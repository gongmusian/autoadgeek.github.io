{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u524d\u7aef\u5f00\u53d1 \u00b6 HTML5 \u8d85\u6587\u672c\u6807\u8bb0\u8bed\u8a00\uff08\u5168\u79f0\uff1aHyperText Markup Language 5) Python \u00b6 Python \u662f\u4e00\u79cd\u89e3\u91ca\u578b\u3001\u9762\u5411\u5bf9\u8c61\u3001\u52a8\u6001\u6570\u636e\u7c7b\u578b\u7684\u9ad8\u7ea7\u7a0b\u5e8f\u8bbe\u8ba1\u8bed\u8a00 python Uipath Orchestrator Cloud API \u6559\u7a0b \u4f7f\u7528Python\u548cGoogle NLP API\u8fdb\u884c\u7f51\u7ad9\u5206\u7c7b \u4eba\u5de5\u667a\u80fd \u00b6 \u4eba\u5de5\u667a\u80fd \u4eba\u5de5\u667a\u80fd\uff08\u82f1\u8bed\uff1aartificial intelligence\uff0c\u7f29\u5199\u4e3aAI\uff09\u4ea6\u79f0\u667a\u68b0\u3001\u673a\u5668\u667a\u80fd\uff0c\u6307\u7531\u4eba\u5236\u9020\u51fa\u6765\u7684\u673a\u5668\u6240\u8868\u73b0\u51fa\u6765\u7684\u667a\u80fd\u3002\u901a\u5e38\u4eba\u5de5\u667a\u80fd\u662f\u6307\u901a\u8fc7\u666e\u901a\u8ba1\u7b97\u673a\u7a0b\u5e8f\u6765\u5448\u73b0\u4eba\u7c7b\u667a\u80fd\u7684\u6280\u672f\u3002\u8be5\u8bcd\u4e5f\u6307\u51fa\u7814\u7a76\u8fd9\u6837\u7684\u667a\u80fd\u7cfb\u7edf\u662f\u5426\u80fd\u591f\u5b9e\u73b0\uff0c\u4ee5\u53ca\u5982\u4f55\u5b9e\u73b0\u3002 nlp\u5e38\u7528\u5de5\u5177\u96c6 NLP\u7684\u5e38\u7528\u5e93\u4ecb\u7ecd NLP HanNLP \u8bcd\u5178\u5206\u8bcd \u8bc4\u4ef7\u6307\u6807\uff1a\u51c6\u786e\u7387(Precision)\u3001\u53ec\u56de\u7387(Recall)\u3001F\u503c(F-Measure) \u6587\u672c\u5173\u952e\u8bcd\u63d0\u53d6 nlp\u5e38\u7528\u5de5\u5177\u96c6 \u7528Python\u4ece\u6d77\u91cf\u6587\u672c\u62bd\u53d6\u4e3b\u9898 NLP pattern\u5e93 hands on guide \u57fa\u4e8e\u9884\u8bad\u7ec3\u6a21\u578b\u7684\u6587\u672c\u6458\u8981 Serverless \u5b9e\u6218\uff1a\u5982\u4f55\u7ed3\u5408 NLP \u5b9e\u73b0\u6587\u672c\u6458\u8981\u548c\u5173\u952e\u8bcd\u63d0\u53d6? \u5f00\u6e90\u9879\u76ee\uff0c\u6db5\u76d6 11 \u7c7b AI \u5b66\u4e60\u6846\u67b6\u3001\u5e73\u53f0 \u81ea\u7136\u8bed\u8a00\u5904\u7406\u5de5\u5177\u5305\u4e4bNLTK \u57fa\u4e8espaCy \u89c4\u5219\u63d0\u53d6\uff0c\u641c\u7d22\u5f15\u64ce\u5982\u4f55\u68c0\u7d22\u7ed3\u679c\uff1aPython\u548cspaCy\u4fe1\u606f\u63d0\u53d6\u7b80\u4ecb bert-extractive-summarizer \u4e2d\u6587\u6587\u7ae0\u7684\u62bd\u53d6\u5f0f\u6458\u8981 \u7406\u89e3NLP\u4e2d\u7684CNN\u5377\u79ef\u795e\u7ecf\u7f51\u7edc \u4f9d\u5b58\u5206\u6790\u4e0e\u4f9d\u5b58\u6811 dependency parse \u5173\u952e\u8bcd\u4e0e\u6587\u7ae0\u76f8\u5173\u6027, \u5173\u952e\u8bcd\u81ea\u52a8\u6807\u6ce8\u4e0e\u63d0\u53d6 \u4f7f\u7528Python\u548cGoogle NLP API\u8fdb\u884c\u7f51\u7ad9\u5206\u7c7b \u4f7f\u7528 AI \u81ea\u52a8\u6267\u884c Web \u722c\u7f51 \u5e7f\u544a\u7a0b\u5e8f\u5316 \u00b6 SEO\u7ade\u4e89\u5bf9\u624b\u5206\u6790 \u56f4\u7ed5 SEO \u5f00\u5c55\u7ade\u4e89\u5bf9\u624b\u5206\u6790 [\u5305\u542b\u5206\u6790\u6a21\u677f] \u8c37\u6b4c Adsense hexo\u4e2a\u4ebanext\u4e3b\u9898\u535a\u5ba2\u63a5\u5165\u8c37\u6b4c\u5e7f\u544a \u72ec\u7acb\u7ad9\u9009\u54c1\u65b9\u6cd5 \u5206\u4eabShopify\u72ec\u7acb\u7ad9\u7684\u51e0\u5957\u9009\u54c1\u65b9\u6cd5\u8bba \u4ec0\u4e48\u662f\u8bed\u4e49\u641c\u7d22\uff1f\u5b83\u662f\u5982\u4f55\u5f71\u54cdSEO\u7684 \u8bed\u4e49\u641c\u7d22\u662f\u73b0\u4ee3\u641c\u7d22\u5f15\u64ce\u7528\u6765\u8fd4\u56de\u6700\u76f8\u5173\u641c\u7d22\u7ed3\u679c\u7684\u4fe1\u606f\u68c0\u7d22\u8fc7\u7a0b \u5982\u4f55\u628a\u7f51\u7ad9\u63d0\u4ea4\u7ed9\u641c\u7d22\u5f15\u64ce \u5982\u4f55\u628a\u7f51\u7ad9\u63d0\u4ea4\u7ed9\u641c\u7d22\u5f15\u64ce Google\uff0cBing, Yahoo\u548c\u767e\u5ea6 \u5982\u4f55\u7f16\u5199\u5b8c\u7f8e\u7684\u5143\u63cf\u8ff0 \u5982\u4f55\u7f16\u5199\u5b8c\u7f8e\u7684\u5143\u63cf\u8ff0\u3002\u5143\u63cf\u8ff0\u662f\u4e00\u4e2aHTML meta\u5c5e\u6027\uff0c\u7528\u4e8e\u63cf\u8ff0\u9875\u9762\u5185\u5bb9\u3002 SEO\u4e4b\u7f51\u7ad9\u5206\u7c7b\u76ee\u5f55\u5916\u94fe\u63a8\u5e7f\u5de5\u5177, \u9ad8\u8d28\u91cf\u5916\u94fe\u6765\u6e90\u548c\u6280\u5de7 \u4f7f\u7528 Google Trend\u3001Python \u548c Ahrefs \u67e5\u627e\u5173\u952e\u5b57\u5546\u673a \u957f\u5c3e\u8bcdSEO\u4f18\u5316 \u00b6 \u957f\u5c3e\u8bcd\u4f18\u5316\u5165\u7f51\u9875 \u5173\u952e\u8bcd\u96be\u5ea6\uff1a\u5982\u4f55\u786e\u8ba4\u4f60\u5728 Google \u83b7\u5f97\u6392\u540d\u7684\u673a\u4f1a \u5982\u4f55\u8ba9\u7f51\u7ad9\u6392\u540d\u8fdb\u5165\u8c37\u6b4c\u9996\u9875 \u5982\u4f55\u642d\u5efa\u4e00\u4e2a\u6210\u529f\u7684\u4e9a\u9a6c\u900a\u8054\u76df\u7f51\u7ad9","title":"Home"},{"location":"#\u524d\u7aef\u5f00\u53d1","text":"HTML5 \u8d85\u6587\u672c\u6807\u8bb0\u8bed\u8a00\uff08\u5168\u79f0\uff1aHyperText Markup Language 5)","title":"\u524d\u7aef\u5f00\u53d1"},{"location":"#Python","text":"Python \u662f\u4e00\u79cd\u89e3\u91ca\u578b\u3001\u9762\u5411\u5bf9\u8c61\u3001\u52a8\u6001\u6570\u636e\u7c7b\u578b\u7684\u9ad8\u7ea7\u7a0b\u5e8f\u8bbe\u8ba1\u8bed\u8a00 python Uipath Orchestrator Cloud API \u6559\u7a0b \u4f7f\u7528Python\u548cGoogle NLP API\u8fdb\u884c\u7f51\u7ad9\u5206\u7c7b","title":"Python"},{"location":"#\u4eba\u5de5\u667a\u80fd","text":"\u4eba\u5de5\u667a\u80fd \u4eba\u5de5\u667a\u80fd\uff08\u82f1\u8bed\uff1aartificial intelligence\uff0c\u7f29\u5199\u4e3aAI\uff09\u4ea6\u79f0\u667a\u68b0\u3001\u673a\u5668\u667a\u80fd\uff0c\u6307\u7531\u4eba\u5236\u9020\u51fa\u6765\u7684\u673a\u5668\u6240\u8868\u73b0\u51fa\u6765\u7684\u667a\u80fd\u3002\u901a\u5e38\u4eba\u5de5\u667a\u80fd\u662f\u6307\u901a\u8fc7\u666e\u901a\u8ba1\u7b97\u673a\u7a0b\u5e8f\u6765\u5448\u73b0\u4eba\u7c7b\u667a\u80fd\u7684\u6280\u672f\u3002\u8be5\u8bcd\u4e5f\u6307\u51fa\u7814\u7a76\u8fd9\u6837\u7684\u667a\u80fd\u7cfb\u7edf\u662f\u5426\u80fd\u591f\u5b9e\u73b0\uff0c\u4ee5\u53ca\u5982\u4f55\u5b9e\u73b0\u3002 nlp\u5e38\u7528\u5de5\u5177\u96c6 NLP\u7684\u5e38\u7528\u5e93\u4ecb\u7ecd NLP HanNLP \u8bcd\u5178\u5206\u8bcd \u8bc4\u4ef7\u6307\u6807\uff1a\u51c6\u786e\u7387(Precision)\u3001\u53ec\u56de\u7387(Recall)\u3001F\u503c(F-Measure) \u6587\u672c\u5173\u952e\u8bcd\u63d0\u53d6 nlp\u5e38\u7528\u5de5\u5177\u96c6 \u7528Python\u4ece\u6d77\u91cf\u6587\u672c\u62bd\u53d6\u4e3b\u9898 NLP pattern\u5e93 hands on guide \u57fa\u4e8e\u9884\u8bad\u7ec3\u6a21\u578b\u7684\u6587\u672c\u6458\u8981 Serverless \u5b9e\u6218\uff1a\u5982\u4f55\u7ed3\u5408 NLP \u5b9e\u73b0\u6587\u672c\u6458\u8981\u548c\u5173\u952e\u8bcd\u63d0\u53d6? \u5f00\u6e90\u9879\u76ee\uff0c\u6db5\u76d6 11 \u7c7b AI \u5b66\u4e60\u6846\u67b6\u3001\u5e73\u53f0 \u81ea\u7136\u8bed\u8a00\u5904\u7406\u5de5\u5177\u5305\u4e4bNLTK \u57fa\u4e8espaCy \u89c4\u5219\u63d0\u53d6\uff0c\u641c\u7d22\u5f15\u64ce\u5982\u4f55\u68c0\u7d22\u7ed3\u679c\uff1aPython\u548cspaCy\u4fe1\u606f\u63d0\u53d6\u7b80\u4ecb bert-extractive-summarizer \u4e2d\u6587\u6587\u7ae0\u7684\u62bd\u53d6\u5f0f\u6458\u8981 \u7406\u89e3NLP\u4e2d\u7684CNN\u5377\u79ef\u795e\u7ecf\u7f51\u7edc \u4f9d\u5b58\u5206\u6790\u4e0e\u4f9d\u5b58\u6811 dependency parse \u5173\u952e\u8bcd\u4e0e\u6587\u7ae0\u76f8\u5173\u6027, \u5173\u952e\u8bcd\u81ea\u52a8\u6807\u6ce8\u4e0e\u63d0\u53d6 \u4f7f\u7528Python\u548cGoogle NLP API\u8fdb\u884c\u7f51\u7ad9\u5206\u7c7b \u4f7f\u7528 AI \u81ea\u52a8\u6267\u884c Web \u722c\u7f51","title":"\u4eba\u5de5\u667a\u80fd"},{"location":"#\u5e7f\u544a\u7a0b\u5e8f\u5316","text":"SEO\u7ade\u4e89\u5bf9\u624b\u5206\u6790 \u56f4\u7ed5 SEO \u5f00\u5c55\u7ade\u4e89\u5bf9\u624b\u5206\u6790 [\u5305\u542b\u5206\u6790\u6a21\u677f] \u8c37\u6b4c Adsense hexo\u4e2a\u4ebanext\u4e3b\u9898\u535a\u5ba2\u63a5\u5165\u8c37\u6b4c\u5e7f\u544a \u72ec\u7acb\u7ad9\u9009\u54c1\u65b9\u6cd5 \u5206\u4eabShopify\u72ec\u7acb\u7ad9\u7684\u51e0\u5957\u9009\u54c1\u65b9\u6cd5\u8bba \u4ec0\u4e48\u662f\u8bed\u4e49\u641c\u7d22\uff1f\u5b83\u662f\u5982\u4f55\u5f71\u54cdSEO\u7684 \u8bed\u4e49\u641c\u7d22\u662f\u73b0\u4ee3\u641c\u7d22\u5f15\u64ce\u7528\u6765\u8fd4\u56de\u6700\u76f8\u5173\u641c\u7d22\u7ed3\u679c\u7684\u4fe1\u606f\u68c0\u7d22\u8fc7\u7a0b \u5982\u4f55\u628a\u7f51\u7ad9\u63d0\u4ea4\u7ed9\u641c\u7d22\u5f15\u64ce \u5982\u4f55\u628a\u7f51\u7ad9\u63d0\u4ea4\u7ed9\u641c\u7d22\u5f15\u64ce Google\uff0cBing, Yahoo\u548c\u767e\u5ea6 \u5982\u4f55\u7f16\u5199\u5b8c\u7f8e\u7684\u5143\u63cf\u8ff0 \u5982\u4f55\u7f16\u5199\u5b8c\u7f8e\u7684\u5143\u63cf\u8ff0\u3002\u5143\u63cf\u8ff0\u662f\u4e00\u4e2aHTML meta\u5c5e\u6027\uff0c\u7528\u4e8e\u63cf\u8ff0\u9875\u9762\u5185\u5bb9\u3002 SEO\u4e4b\u7f51\u7ad9\u5206\u7c7b\u76ee\u5f55\u5916\u94fe\u63a8\u5e7f\u5de5\u5177, \u9ad8\u8d28\u91cf\u5916\u94fe\u6765\u6e90\u548c\u6280\u5de7 \u4f7f\u7528 Google Trend\u3001Python \u548c Ahrefs \u67e5\u627e\u5173\u952e\u5b57\u5546\u673a","title":"\u5e7f\u544a\u7a0b\u5e8f\u5316"},{"location":"#\u957f\u5c3e\u8bcdSEO\u4f18\u5316","text":"\u957f\u5c3e\u8bcd\u4f18\u5316\u5165\u7f51\u9875 \u5173\u952e\u8bcd\u96be\u5ea6\uff1a\u5982\u4f55\u786e\u8ba4\u4f60\u5728 Google \u83b7\u5f97\u6392\u540d\u7684\u673a\u4f1a \u5982\u4f55\u8ba9\u7f51\u7ad9\u6392\u540d\u8fdb\u5165\u8c37\u6b4c\u9996\u9875 \u5982\u4f55\u642d\u5efa\u4e00\u4e2a\u6210\u529f\u7684\u4e9a\u9a6c\u900a\u8054\u76df\u7f51\u7ad9","title":"\u957f\u5c3e\u8bcdSEO\u4f18\u5316"},{"location":"about/","text":"","title":"\u5173\u4e8e"},{"location":"pages/affiliate/adsense/","text":"hexo\u4e2a\u4ebanext\u4e3b\u9898\u535a\u5ba2\u63a5\u5165\u8c37\u6b4c\u5e7f\u544a \u00b6 \u524d\u8a00 \u00b6 \u4e2a\u4eba\u535a\u5ba2\u642d\u4e86\u5927\u6982\u4e5f\u6709\u5927\u534a\u5e74\u7684\u65f6\u95f4\uff0c\u9646\u9646\u7eed\u7eed\u66f4\u65b0\u4e86\u4e00\u4e9b\u6587\u7ae0\uff0c\u867d\u7136\u6bcf\u5929\u6574\u4e2a\u7f51\u7ad9\u7684\u6d4f\u89c8\u91cf\u4e0d\u662f\u7279\u522b\u9ad8\uff0c\u4f46\u662f\u4e5f\u5e0c\u671b\u80fd\u591f\u5f15\u5165\u7f51\u7ad9\u7684\u6d41\u91cf\u53d8\u73b0\uff08\u868a\u5b50\u817f\u518d\u5c0f\u4e5f\u662f\u8089\u554a\u2026\uff09\uff0c\u4e8e\u662f\u81ea\u5df1\u67e5\u9605\u4e86\u76f8\u5173\u7684\u8d44\u6599\uff0c\u6574\u7406\u4e86\u4e00\u4efd\u5b8c\u6574\u7684\uff0c\u63a5\u5165\u8c37\u6b4c\u5e7f\u544a\u8054\u76dfgoogle adsense\u7684\u4e00\u5957\u5b8c\u6574\u6d41\u7a0b\uff0c\u4f9b\u5927\u5bb6\u53c2\u8003\uff5e \u51c6\u5907\u73af\u5883 \u00b6 \u4f7f\u7528hexo\u7684next\u4e3b\u9898\u642d\u5efa\u535a\u5ba2 \u5df2\u7ffb\u5899\uff0c\u53ef\u4ee5\u767b\u5f55google adsense\u7f51\u7ad9(\u672c\u4eba\u662f\u5728 \u642c\u74e6\u5de5 \u4e0a\u8d2d\u4e70\u4e86\u4e00\u5e74\u7684\u670d\u52a1\u5668\uff0c\u81ea\u5df1\u642d\u4e86\u4e86\u4e00\u5957ShadowSocks\u73af\u5883) \u6ce8\u518c\u8d26\u53f7 \u00b6 \u6ce8\u518c\u8d26\u53f7\u6d41\u7a0b\u6bd4\u8f83\u7b80\u5355\uff0c\u5165\u53e3\u5728\u8fd9\u91cc\uff1a Google Adsense \u6dfb\u52a0\u5e7f\u544a\u4ee3\u7801 \u00b6 \u6ce8\u518c\u8d26\u53f7\u5b8c\u6210\u4e4b\u540e\uff0c\u9700\u8981\u5c06\u8c37\u6b4c\u63d0\u4f9b\u7ed9\u4f60\u7684\u4e00\u4efd\u4ee3\u7801\u6dfb\u52a0\u5230\u4f60\u7f51\u7ad9\u7684\u4e2d\u7684 \u6807\u8bb0\u4e2d\uff0c\u5728\u4f60\u6dfb\u52a0\u5b8c\u6210\u4e4b\u540e\uff0c\u70b9\u51fb\u786e\u8ba4\uff0c\u8c37\u6b4c\u4f1a\u5230\u4f60\u7684\u7f51\u7ad9\u4e0a\u8fdb\u884c\u6838\u67e5\u548c\u9a8c\u6536\u3002 \u5bf9\u4e8e\u4f7f\u7528hexo\u7684next\u4e3b\u9898\u535a\u5ba2\u7684\u540c\u5b66\uff0c\u53ea\u8981\u5c06\u8c37\u6b4c\u63d0\u4f9b\u7684\u4ee3\u7801 1 2 3 4 5 6 7 <script async src=\"http://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script> <script> (adsbygoogle = window.adsbygoogle || []).push({ google_ad_client: \"ca-pub-123456789\", enable_page_level_ads: true }); </script> \u653e\u5230\\themes\\next\\layout\\partials\\head.swig \u4efb\u610f\u4e00\u4e2a\u4f4d\u7f6e(\u672c\u4eba\u653e\u5728\u4e86\u6700\u540e)\u5373\u53ef\uff0c\u5728\u7ed9\u8c37\u6b4c\u786e\u8ba4\u4e4b\u524d\uff0c\u53ef\u4ee5\u81ea\u5df1\u5148\u4f7f\u7528\u6d4f\u89c8\u5668\u8fdb\u884c\u9a8c\u8bc1\uff1a \u6253\u5f00\u81ea\u5df1\u7684\u7f51\u7ad9\uff0c\u70b9\u51fb\u53f3\u952e\uff0c\u67e5\u770b\u6e90\u7801\uff0c\u641c\u7d22\u4e00\u4e0b\u662f\u5426\u5df2\u7ecf\u6210\u529f\u6dfb\u52a0\u4e0a\u8ff0\u4ee3\u7801\u3002 \u786e\u8ba4\u65e0\u8bef\u4e4b\u540e\uff0c\u5728google adsense\u4e0a\u70b9\u51fb\u786e\u8ba4\uff0c\u5f00\u59cb\u9a8c\u8bc1\uff0c\u4e00\u822c\u6ca1\u95ee\u9898\u7684\u8bdd\u51e0\u5206\u949f\u5c31\u4f1a\u51fa\u7ed3\u679c\uff0c\u6709\u95ee\u9898\u7684\u8bdd\u8981\u7b49\u5f85\u4e00\u6bb5\u65f6\u95f4\u3002 \u6839\u636e\u6211\u4e2a\u4eba\u7533\u8bf7\u7684\u6d41\u7a0b\uff0c\u603b\u7ed3\u4e86\u4e00\u4e9b\u7ecf\u9a8c\uff0c\u4f9b\u5927\u5bb6\u53c2\u8003\uff1a \u7f51\u7ad9\u6587\u7ae0\u4e0d\u8981\u592a\u5c11\uff0c\u81f3\u5c11\u5927\u4e8e10\u7bc7\u535a\u5ba2\u4ee5\u4e0a\u3002 \u7f51\u7ad9\u4e0a\u67b6\u534a\u5e74\u4ee5\u4e0a\uff0c\u5982\u679c\u662f\u65b0\u7533\u8bf7\u7684\u7f51\u7ad9\uff0c\u4e00\u822c\u4e0d\u5bb9\u6613\u8fc7\u5ba1\u3002(\u8fd9\u91cc\u5efa\u8bae\u5927\u5bb6\u6709\u63a5\u5165google adsense\u7684\u65b0\u7ad9\u957f\uff0c\u7b49\u7f51\u7ad9\u7a0d\u5fae\u6210\u719f\u70b9\u518d\u53bb\u7533\u8bf7\uff0c\u672c\u4eba\u7b2c\u4e00\u6b21\u7533\u8bf7\u5c31\u56e0\u4e3a\u5efa\u7ad9\u65f6\u95f4\u8fc7\u77ed\uff0c\u8fd8\u4e0d\u52303\u4e2a\u6708\u88ab\u62d2) \u4e2a\u6027\u5316\u914d\u7f6e\u5e7f\u544a\u4f4d \u00b6 \u5f85\u901a\u8fc7\u5ba1\u6838\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u5f00\u59cb\u8003\u8651\u5728\u81ea\u5df1\u7684\u7f51\u7ad9\u4e0a\u8fdb\u884c\u5e7f\u544a\u4f4d\u7f6e\u7684\u7b5b\u9009\u548c\u8bbe\u8ba1\u4e86\uff0c\u76ee\u524dgoogle adsense\u4e3b\u8981\u63d0\u4f9b\u4e86\u81ea\u52a8\u5e7f\u544a\u548c\u5e7f\u544a\u5355\u5143\u4e24\u79cd\u5f62\u5f0f\u7684\u5e7f\u544a\u6dfb\u52a0\u65b9\u5f0f\u3002 \u81ea\u52a8\u5e7f\u544a \u00b6 \u81ea\u52a8\u5e7f\u544a\u662fgoogle adsense\u8fd1\u6765\u63d0\u4f9b\u7684\u4e00\u79cd\u5e7f\u544a\u5f62\u5f0f\uff0c\u5b83\u80fd\u591f\u901a\u8fc7\u5206\u6790\u4f60\u7684\u535a\u5ba2\u5e03\u5c40\u7ed3\u6784\uff0c\u81ea\u5b9a\u4e49\u7684\u5728\u4f60\u7684\u7f51\u7ad9\u4e2d\u63d2\u5165\u5408\u9002\u7684\u5e7f\u544a\uff0c\u65e0\u8bba\u662f\u5185\u5bb9\uff0c\u8fd8\u662f\u5e7f\u544a\u5c3a\u5bf8\uff0c\u90fd\u662f\u5b8c\u5168\u5951\u5408\u7f51\u7ad9\u5185\u5bb9\u672c\u8eab\u7684\uff0c\u7b97\u662f\u4e00\u79cd\u6bd4\u8f83\u9ad8\u8d28\u91cf\u7684\u5e7f\u544a\u3002 \u4f46\u662f\u6839\u636e\u6211\u7684\u4f7f\u7528\u7ecf\u9a8c\uff0c\u8fd9\u79cd\u5e7f\u544a\u6295\u653e\u7684\u51e0\u7387\u6bd4\u8f83\u5c0f\uff0c\u5f80\u5f80\u597d\u51e0\u7bc7\u6587\u7ae0\u6216\u9875\u9762\u624d\u4f1a\u6295\u653e\u4e00\u4e2a\u5e7f\u544a\u5185\u5bb9\uff0c\u6548\u7387\u6bd4\u8f83\u4f4e(\u552f\u4e00\u7684\u597d\u5904\u662f\uff0c\u5982\u679c\u4f60\u7684\u7f51\u7ad9\u652f\u6301\u79fb\u52a8\u7aef\u67e5\u770b\u7684\u8bdd\uff0c\u4f1a\u81ea\u52a8\u6295\u653e\u79fb\u52a8\u7aef\u81ea\u9002\u5e94\u7684\u5e7f\u544a) \u5177\u4f53\u7684\u4ee3\u7801\u63d2\u5165\u65b9\u6cd5\uff0c\u5176\u5b9e\u5c31\u662f\u4e0a\u8ff0\u7684\u7528\u6765\u68c0\u9a8c\u7684\u4ee3\u7801\uff0c\u4e00\u65e6\u4e0a\u8ff0\u4ee3\u7801\u5ba1\u6838\u901a\u8fc7\uff0c\u5176\u5b9e\u5df2\u7ecf\u81ea\u52a8\u63a5\u5165\u4e86google adsense\u7684\u81ea\u52a8\u5e7f\u544a\u3002 \u5e7f\u544a\u5355\u5143 \u00b6 \u4e3a\u4e86\u80fd\u591f\u6700\u9ad8\u6548\u7684\u5229\u7528\u81ea\u5df1\u535a\u5ba2\u7684\u5e7f\u544a\u4f4d\uff0cadsense\u8fd8\u63d0\u4f9b\u4e86\u4e09\u79cd\u56fa\u5b9a\u5e7f\u544a\u4f4d \u6587\u5b57\u5e7f\u544a\u548c\u5c55\u793a\u5e7f\u544a(\u5373\u4fa7\u8fb9\u680f\uff0c\u8bc4\u8bba\u533a\u4e4b\u7c7b\u7684\u56fa\u5b9a\u5e7f\u544a\u4f4d) \u4fe1\u606f\u6d41\u5e7f\u544a(\u63d2\u5165\u5728\u4fe1\u606f\u6d41\u5185\u5bb9\u7684\u5e7f\u544a\u4f4d\u7f6e) \u6587\u7ae0\u5185\u5d4c\u5e7f\u544a(\u4e3b\u8981\u662f\u63d2\u5165\u5728\u6bcf\u7bc7\u6587\u7ae0\u5185\u90e8\u7684\u5f00\u59cb\uff0c\u4e2d\u95f4\uff0c\u7ed3\u5c3e\u90e8\u5206\uff0c\u5c55\u793a\u6b21\u6570\u6bd4\u8f83\u591a\uff0c\u5f3a\u70c8\u63a8\u8350) \u7531\u4e8e\u672c\u4eba\u7684\u662f\u535a\u5ba2\u7f51\u7ad9\uff0c\u6240\u4ee5\u7b2c\u4e8c\u79cd\u4fe1\u606f\u6d41\u5e7f\u544a\u6ca1\u6709\u6295\u5165\u4f7f\u7528\uff0c\u8fd9\u91cc\u4e3b\u8981\u4f7f\u7528\u4e86\u7b2c\u4e00\u79cd\u548c\u7b2c\u4e09\u79cd\u3002 \u5177\u4f53\u7684\u64cd\u4f5c\u6d41\u7a0b\u662f\uff0c\u5728\u7f51\u7ad9\u4e0a\uff0c\u9009\u62e9\u5e7f\u544a\u5355\u5143->\u65b0\u5efa\u5e7f\u544a\u4f4d->\u9009\u62e9\u5bf9\u5e94\u7684\u5e7f\u544a\u7c7b\u578b->\u751f\u6210\u5bf9\u5e94\u7684\u5e7f\u544a\u4ee3\u7801\u3002 \u8fd9\u91cc\uff0c\u672c\u4eba\u6839\u636e\u4e2a\u4eba\u7ecf\u9a8c\uff0c\u63d0\u4f9b\u51e0\u79cd\u9488\u5bf9hexo\u7684next\u4e3b\u9898\u5e7f\u544a\u4ee3\u7801\u4f4d\u7f6e\u7684\u63d2\u5165\u3002 \u63d2\u5165\u8bc4\u8bba\u533a\uff1a\u5c06\u4ee3\u7801\u63d2\u5165\\themes\\next\\layout\\partials\\comments.swig \u4e2d\u7684\u672b\u5c3e\u5373\u53ef\u3002 \u63d2\u5165\u4fa7\u8fb9\u680f\uff1a\u5c06\u4ee3\u7801\u63d2\u5165\\themes\\next\\layout\\macro\\sidebar.swig \u6587\u4ef6\u4e2d \u7684\u6700\u4e0b\u4fa7\u5373\u53ef \u63d2\u5165\u6587\u7ae0\u5934\u90e8\uff1a\u5728\\themes\\next\\layout\\custom\\post.swig \u76ee\u5f55\u4e0b\uff0c\u65b0\u5efagoogle\\adsense.swig\uff0c\u5e76\u5c06google\u63d0\u4f9b\u7684\u5e7f\u544a\u4ee3\u7801\u653e\u5165\u5176\u4e2d\uff0c\u7136\u540e\u5c06 \u63d2\u5165\\themes\\next\\layout\\macro\\post.swig \u6587\u4ef6\u4e2d \u6ce8\u610f\uff0c\u8fd9\u91cc\u4e0d\u8981\u641e\u9519\uff0c\u8bef\u63d2\u5165\u5230\\themes\\next\\layout\\post.swig \u6587\u4ef6\u4e2d\u4e86\uff0c\u8fd9\u6837\u4e0d\u4ec5\u4ec5\u4f1a\u5bfc\u81f4\u6bcf\u7bc7\u6587\u7ae0\u91cc\u5b58\u5728\u5e7f\u544a\uff0c\u5728\u9996\u9875\u7684\u5217\u8868\u4e2d\uff0c\u6bcf\u7bc7\u6587\u7ae0\u540c\u6837\u4e5f\u90fd\u4f1a\u5e26\u4e0a\u5e7f\u544a\uff0c\u5bfc\u81f4\u9996\u9875\u4e00\u6b21\u5237\u51fa\u6765N\u4e2a\u5e7f\u544a\uff0c\u5f71\u54cd\u7f51\u7ad9\u5e03\u5c40\u548c\u8bbe\u8ba1\u3002 \u6ce8\u610f\u4e8b\u9879 \u00b6 \u5728\u6210\u529f\u63a5\u5165AdSense\u5e7f\u544a\u4e4b\u540e\uff0c\u5e76\u4e0d\u7b97\u7ed3\u675f\uff0cGoogle\u4f1a\u6839\u636e\u51e0\u79cd\u65b9\u5f0f\u548c\u6570\u636e\u5224\u65ad\u5e7f\u544a\u70b9\u51fb\u662f\u5426\u4f5c\u5f0a\uff0c\u4ece\u800c\u6ce8\u9500\u4f60\u7684\u8d26\u53f7\u3002\u6240\u4ee5\u4e0d\u8981\u5fc3\u5b58\u4fa5\u5e78\u5fc3\u7406\uff0c\u597d\u597d\u53d1\u539f\u521b\u6587\u7ae0\uff0c\u63d0\u9ad8\u7f51\u7ad9\u7684\u8d28\u91cf\u624d\u662f\u738b\u9053\u3002 \u4f5c\u5f0a\u5e7f\u544a\u70b9\u51fb\u8005\u7684IP\u5730\u5740\u4e0e\u4f60Adsense\u8d26\u6237\u767b\u5f55IP\u5730\u5740\u76f8\u540c \u4f5c\u5f0a\u5e7f\u544a\u70b9\u51fb\u7684CTR\u6570\u636e\u592a\u9ad8 \u4f5c\u5f0a\u5e7f\u544a\u70b9\u51fb\u8005\u7684IP\u5730\u5740\u6765\u81ea\u540c\u4e00\u4e2a\u5730\u7406\u533a\u57df \u6839\u636eCookies\u5224\u65ad\u4f5c\u5f0aAdsense\u5e7f\u544a\u70b9\u51fb \u4f5c\u5f0a\u5e7f\u544a\u70b9\u51fb\u8005\u9875\u9762\u505c\u7559\u65f6\u95f4\u592a\u77ed \u76f4\u63a5\u8bbf\u95ee\u8005\u7684\u5e7f\u544a\u70b9\u51fb\u7387\u8fc7\u9ad8 \u6d41\u91cf\u5c0f\u4f46\u5e7f\u544a\u70b9\u51fb\u7387\u9ad8 \u5728\u7f51\u9875\u4e0a\u7528\u6587\u5b57\u63d0\u793a\u8bf7\u6c42\u9f13\u52a8\u70b9\u51fb\u5e7f\u544a \u8bf4\u5728\u6700\u540e \u00b6 \u73b0\u5728\u901a\u8fc7adsense\u672c\u8eab\u80fd\u8d5a\u5230\u7684\u6536\u5165\u672c\u8eab\u5e76\u4e0d\u9ad8\uff0c\u5c24\u5176\u662f\u535a\u5ba2\u7c7b\u7684\u7f51\u7ad9\u66f4\u662f\u5982\u6b64\uff0c\u4f46\u662f\u65e2\u7136\u5927\u5bb6\u613f\u610f\u82b1\u65f6\u95f4\u548c\u7cbe\u529b\u53bb\u642d\u5efa\u4e2a\u4eba\u535a\u5ba2\uff0c\u9664\u4e86\u94b1\u4ee5\u5916\uff0c\u80af\u5b9a\u8fd8\u6709\u5176\u4ed6\u7684\u76ee\u7684\uff0c\u5e0c\u671b\u5927\u5bb6\u4e0d\u8981\u820d\u672c\u9010\u672b\uff0c\u5fd8\u8bb0\u4e86\u81ea\u5df1\u642d\u5efa\u535a\u5ba2\u7684\u521d\u8877\uff0c\u6bd5\u7adf\u5e7f\u544a\u6536\u5165\u8fd9\u4e2a\u4e8b\u60c5\uff0c\u6709\u5f53\u7136\u597d\uff0c\u6ca1\u6709\u4e5f\u4e0d\u7528\u6c14\u9981\uff0c\u5c3d\u529b\u5c31\u597d\uff5e","title":"hexo\u4e2a\u4ebanext\u4e3b\u9898\u535a\u5ba2\u63a5\u5165\u8c37\u6b4c\u5e7f\u544a"},{"location":"pages/affiliate/adsense/#hexo\u4e2a\u4ebanext\u4e3b\u9898\u535a\u5ba2\u63a5\u5165\u8c37\u6b4c\u5e7f\u544a","text":"","title":"hexo\u4e2a\u4ebanext\u4e3b\u9898\u535a\u5ba2\u63a5\u5165\u8c37\u6b4c\u5e7f\u544a"},{"location":"pages/affiliate/adsense/#\u524d\u8a00","text":"\u4e2a\u4eba\u535a\u5ba2\u642d\u4e86\u5927\u6982\u4e5f\u6709\u5927\u534a\u5e74\u7684\u65f6\u95f4\uff0c\u9646\u9646\u7eed\u7eed\u66f4\u65b0\u4e86\u4e00\u4e9b\u6587\u7ae0\uff0c\u867d\u7136\u6bcf\u5929\u6574\u4e2a\u7f51\u7ad9\u7684\u6d4f\u89c8\u91cf\u4e0d\u662f\u7279\u522b\u9ad8\uff0c\u4f46\u662f\u4e5f\u5e0c\u671b\u80fd\u591f\u5f15\u5165\u7f51\u7ad9\u7684\u6d41\u91cf\u53d8\u73b0\uff08\u868a\u5b50\u817f\u518d\u5c0f\u4e5f\u662f\u8089\u554a\u2026\uff09\uff0c\u4e8e\u662f\u81ea\u5df1\u67e5\u9605\u4e86\u76f8\u5173\u7684\u8d44\u6599\uff0c\u6574\u7406\u4e86\u4e00\u4efd\u5b8c\u6574\u7684\uff0c\u63a5\u5165\u8c37\u6b4c\u5e7f\u544a\u8054\u76dfgoogle adsense\u7684\u4e00\u5957\u5b8c\u6574\u6d41\u7a0b\uff0c\u4f9b\u5927\u5bb6\u53c2\u8003\uff5e","title":"\u524d\u8a00"},{"location":"pages/affiliate/adsense/#\u51c6\u5907\u73af\u5883","text":"\u4f7f\u7528hexo\u7684next\u4e3b\u9898\u642d\u5efa\u535a\u5ba2 \u5df2\u7ffb\u5899\uff0c\u53ef\u4ee5\u767b\u5f55google adsense\u7f51\u7ad9(\u672c\u4eba\u662f\u5728 \u642c\u74e6\u5de5 \u4e0a\u8d2d\u4e70\u4e86\u4e00\u5e74\u7684\u670d\u52a1\u5668\uff0c\u81ea\u5df1\u642d\u4e86\u4e86\u4e00\u5957ShadowSocks\u73af\u5883)","title":"\u51c6\u5907\u73af\u5883"},{"location":"pages/affiliate/adsense/#\u6ce8\u518c\u8d26\u53f7","text":"\u6ce8\u518c\u8d26\u53f7\u6d41\u7a0b\u6bd4\u8f83\u7b80\u5355\uff0c\u5165\u53e3\u5728\u8fd9\u91cc\uff1a Google Adsense","title":"\u6ce8\u518c\u8d26\u53f7"},{"location":"pages/affiliate/adsense/#\u6dfb\u52a0\u5e7f\u544a\u4ee3\u7801","text":"\u6ce8\u518c\u8d26\u53f7\u5b8c\u6210\u4e4b\u540e\uff0c\u9700\u8981\u5c06\u8c37\u6b4c\u63d0\u4f9b\u7ed9\u4f60\u7684\u4e00\u4efd\u4ee3\u7801\u6dfb\u52a0\u5230\u4f60\u7f51\u7ad9\u7684\u4e2d\u7684 \u6807\u8bb0\u4e2d\uff0c\u5728\u4f60\u6dfb\u52a0\u5b8c\u6210\u4e4b\u540e\uff0c\u70b9\u51fb\u786e\u8ba4\uff0c\u8c37\u6b4c\u4f1a\u5230\u4f60\u7684\u7f51\u7ad9\u4e0a\u8fdb\u884c\u6838\u67e5\u548c\u9a8c\u6536\u3002 \u5bf9\u4e8e\u4f7f\u7528hexo\u7684next\u4e3b\u9898\u535a\u5ba2\u7684\u540c\u5b66\uff0c\u53ea\u8981\u5c06\u8c37\u6b4c\u63d0\u4f9b\u7684\u4ee3\u7801 1 2 3 4 5 6 7 <script async src=\"http://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script> <script> (adsbygoogle = window.adsbygoogle || []).push({ google_ad_client: \"ca-pub-123456789\", enable_page_level_ads: true }); </script> \u653e\u5230\\themes\\next\\layout\\partials\\head.swig \u4efb\u610f\u4e00\u4e2a\u4f4d\u7f6e(\u672c\u4eba\u653e\u5728\u4e86\u6700\u540e)\u5373\u53ef\uff0c\u5728\u7ed9\u8c37\u6b4c\u786e\u8ba4\u4e4b\u524d\uff0c\u53ef\u4ee5\u81ea\u5df1\u5148\u4f7f\u7528\u6d4f\u89c8\u5668\u8fdb\u884c\u9a8c\u8bc1\uff1a \u6253\u5f00\u81ea\u5df1\u7684\u7f51\u7ad9\uff0c\u70b9\u51fb\u53f3\u952e\uff0c\u67e5\u770b\u6e90\u7801\uff0c\u641c\u7d22\u4e00\u4e0b\u662f\u5426\u5df2\u7ecf\u6210\u529f\u6dfb\u52a0\u4e0a\u8ff0\u4ee3\u7801\u3002 \u786e\u8ba4\u65e0\u8bef\u4e4b\u540e\uff0c\u5728google adsense\u4e0a\u70b9\u51fb\u786e\u8ba4\uff0c\u5f00\u59cb\u9a8c\u8bc1\uff0c\u4e00\u822c\u6ca1\u95ee\u9898\u7684\u8bdd\u51e0\u5206\u949f\u5c31\u4f1a\u51fa\u7ed3\u679c\uff0c\u6709\u95ee\u9898\u7684\u8bdd\u8981\u7b49\u5f85\u4e00\u6bb5\u65f6\u95f4\u3002 \u6839\u636e\u6211\u4e2a\u4eba\u7533\u8bf7\u7684\u6d41\u7a0b\uff0c\u603b\u7ed3\u4e86\u4e00\u4e9b\u7ecf\u9a8c\uff0c\u4f9b\u5927\u5bb6\u53c2\u8003\uff1a \u7f51\u7ad9\u6587\u7ae0\u4e0d\u8981\u592a\u5c11\uff0c\u81f3\u5c11\u5927\u4e8e10\u7bc7\u535a\u5ba2\u4ee5\u4e0a\u3002 \u7f51\u7ad9\u4e0a\u67b6\u534a\u5e74\u4ee5\u4e0a\uff0c\u5982\u679c\u662f\u65b0\u7533\u8bf7\u7684\u7f51\u7ad9\uff0c\u4e00\u822c\u4e0d\u5bb9\u6613\u8fc7\u5ba1\u3002(\u8fd9\u91cc\u5efa\u8bae\u5927\u5bb6\u6709\u63a5\u5165google adsense\u7684\u65b0\u7ad9\u957f\uff0c\u7b49\u7f51\u7ad9\u7a0d\u5fae\u6210\u719f\u70b9\u518d\u53bb\u7533\u8bf7\uff0c\u672c\u4eba\u7b2c\u4e00\u6b21\u7533\u8bf7\u5c31\u56e0\u4e3a\u5efa\u7ad9\u65f6\u95f4\u8fc7\u77ed\uff0c\u8fd8\u4e0d\u52303\u4e2a\u6708\u88ab\u62d2)","title":"\u6dfb\u52a0\u5e7f\u544a\u4ee3\u7801"},{"location":"pages/affiliate/adsense/#\u4e2a\u6027\u5316\u914d\u7f6e\u5e7f\u544a\u4f4d","text":"\u5f85\u901a\u8fc7\u5ba1\u6838\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u5f00\u59cb\u8003\u8651\u5728\u81ea\u5df1\u7684\u7f51\u7ad9\u4e0a\u8fdb\u884c\u5e7f\u544a\u4f4d\u7f6e\u7684\u7b5b\u9009\u548c\u8bbe\u8ba1\u4e86\uff0c\u76ee\u524dgoogle adsense\u4e3b\u8981\u63d0\u4f9b\u4e86\u81ea\u52a8\u5e7f\u544a\u548c\u5e7f\u544a\u5355\u5143\u4e24\u79cd\u5f62\u5f0f\u7684\u5e7f\u544a\u6dfb\u52a0\u65b9\u5f0f\u3002","title":"\u4e2a\u6027\u5316\u914d\u7f6e\u5e7f\u544a\u4f4d"},{"location":"pages/affiliate/adsense/#\u81ea\u52a8\u5e7f\u544a","text":"\u81ea\u52a8\u5e7f\u544a\u662fgoogle adsense\u8fd1\u6765\u63d0\u4f9b\u7684\u4e00\u79cd\u5e7f\u544a\u5f62\u5f0f\uff0c\u5b83\u80fd\u591f\u901a\u8fc7\u5206\u6790\u4f60\u7684\u535a\u5ba2\u5e03\u5c40\u7ed3\u6784\uff0c\u81ea\u5b9a\u4e49\u7684\u5728\u4f60\u7684\u7f51\u7ad9\u4e2d\u63d2\u5165\u5408\u9002\u7684\u5e7f\u544a\uff0c\u65e0\u8bba\u662f\u5185\u5bb9\uff0c\u8fd8\u662f\u5e7f\u544a\u5c3a\u5bf8\uff0c\u90fd\u662f\u5b8c\u5168\u5951\u5408\u7f51\u7ad9\u5185\u5bb9\u672c\u8eab\u7684\uff0c\u7b97\u662f\u4e00\u79cd\u6bd4\u8f83\u9ad8\u8d28\u91cf\u7684\u5e7f\u544a\u3002 \u4f46\u662f\u6839\u636e\u6211\u7684\u4f7f\u7528\u7ecf\u9a8c\uff0c\u8fd9\u79cd\u5e7f\u544a\u6295\u653e\u7684\u51e0\u7387\u6bd4\u8f83\u5c0f\uff0c\u5f80\u5f80\u597d\u51e0\u7bc7\u6587\u7ae0\u6216\u9875\u9762\u624d\u4f1a\u6295\u653e\u4e00\u4e2a\u5e7f\u544a\u5185\u5bb9\uff0c\u6548\u7387\u6bd4\u8f83\u4f4e(\u552f\u4e00\u7684\u597d\u5904\u662f\uff0c\u5982\u679c\u4f60\u7684\u7f51\u7ad9\u652f\u6301\u79fb\u52a8\u7aef\u67e5\u770b\u7684\u8bdd\uff0c\u4f1a\u81ea\u52a8\u6295\u653e\u79fb\u52a8\u7aef\u81ea\u9002\u5e94\u7684\u5e7f\u544a) \u5177\u4f53\u7684\u4ee3\u7801\u63d2\u5165\u65b9\u6cd5\uff0c\u5176\u5b9e\u5c31\u662f\u4e0a\u8ff0\u7684\u7528\u6765\u68c0\u9a8c\u7684\u4ee3\u7801\uff0c\u4e00\u65e6\u4e0a\u8ff0\u4ee3\u7801\u5ba1\u6838\u901a\u8fc7\uff0c\u5176\u5b9e\u5df2\u7ecf\u81ea\u52a8\u63a5\u5165\u4e86google adsense\u7684\u81ea\u52a8\u5e7f\u544a\u3002","title":"\u81ea\u52a8\u5e7f\u544a"},{"location":"pages/affiliate/adsense/#\u5e7f\u544a\u5355\u5143","text":"\u4e3a\u4e86\u80fd\u591f\u6700\u9ad8\u6548\u7684\u5229\u7528\u81ea\u5df1\u535a\u5ba2\u7684\u5e7f\u544a\u4f4d\uff0cadsense\u8fd8\u63d0\u4f9b\u4e86\u4e09\u79cd\u56fa\u5b9a\u5e7f\u544a\u4f4d \u6587\u5b57\u5e7f\u544a\u548c\u5c55\u793a\u5e7f\u544a(\u5373\u4fa7\u8fb9\u680f\uff0c\u8bc4\u8bba\u533a\u4e4b\u7c7b\u7684\u56fa\u5b9a\u5e7f\u544a\u4f4d) \u4fe1\u606f\u6d41\u5e7f\u544a(\u63d2\u5165\u5728\u4fe1\u606f\u6d41\u5185\u5bb9\u7684\u5e7f\u544a\u4f4d\u7f6e) \u6587\u7ae0\u5185\u5d4c\u5e7f\u544a(\u4e3b\u8981\u662f\u63d2\u5165\u5728\u6bcf\u7bc7\u6587\u7ae0\u5185\u90e8\u7684\u5f00\u59cb\uff0c\u4e2d\u95f4\uff0c\u7ed3\u5c3e\u90e8\u5206\uff0c\u5c55\u793a\u6b21\u6570\u6bd4\u8f83\u591a\uff0c\u5f3a\u70c8\u63a8\u8350) \u7531\u4e8e\u672c\u4eba\u7684\u662f\u535a\u5ba2\u7f51\u7ad9\uff0c\u6240\u4ee5\u7b2c\u4e8c\u79cd\u4fe1\u606f\u6d41\u5e7f\u544a\u6ca1\u6709\u6295\u5165\u4f7f\u7528\uff0c\u8fd9\u91cc\u4e3b\u8981\u4f7f\u7528\u4e86\u7b2c\u4e00\u79cd\u548c\u7b2c\u4e09\u79cd\u3002 \u5177\u4f53\u7684\u64cd\u4f5c\u6d41\u7a0b\u662f\uff0c\u5728\u7f51\u7ad9\u4e0a\uff0c\u9009\u62e9\u5e7f\u544a\u5355\u5143->\u65b0\u5efa\u5e7f\u544a\u4f4d->\u9009\u62e9\u5bf9\u5e94\u7684\u5e7f\u544a\u7c7b\u578b->\u751f\u6210\u5bf9\u5e94\u7684\u5e7f\u544a\u4ee3\u7801\u3002 \u8fd9\u91cc\uff0c\u672c\u4eba\u6839\u636e\u4e2a\u4eba\u7ecf\u9a8c\uff0c\u63d0\u4f9b\u51e0\u79cd\u9488\u5bf9hexo\u7684next\u4e3b\u9898\u5e7f\u544a\u4ee3\u7801\u4f4d\u7f6e\u7684\u63d2\u5165\u3002 \u63d2\u5165\u8bc4\u8bba\u533a\uff1a\u5c06\u4ee3\u7801\u63d2\u5165\\themes\\next\\layout\\partials\\comments.swig \u4e2d\u7684\u672b\u5c3e\u5373\u53ef\u3002 \u63d2\u5165\u4fa7\u8fb9\u680f\uff1a\u5c06\u4ee3\u7801\u63d2\u5165\\themes\\next\\layout\\macro\\sidebar.swig \u6587\u4ef6\u4e2d \u7684\u6700\u4e0b\u4fa7\u5373\u53ef \u63d2\u5165\u6587\u7ae0\u5934\u90e8\uff1a\u5728\\themes\\next\\layout\\custom\\post.swig \u76ee\u5f55\u4e0b\uff0c\u65b0\u5efagoogle\\adsense.swig\uff0c\u5e76\u5c06google\u63d0\u4f9b\u7684\u5e7f\u544a\u4ee3\u7801\u653e\u5165\u5176\u4e2d\uff0c\u7136\u540e\u5c06 \u63d2\u5165\\themes\\next\\layout\\macro\\post.swig \u6587\u4ef6\u4e2d \u6ce8\u610f\uff0c\u8fd9\u91cc\u4e0d\u8981\u641e\u9519\uff0c\u8bef\u63d2\u5165\u5230\\themes\\next\\layout\\post.swig \u6587\u4ef6\u4e2d\u4e86\uff0c\u8fd9\u6837\u4e0d\u4ec5\u4ec5\u4f1a\u5bfc\u81f4\u6bcf\u7bc7\u6587\u7ae0\u91cc\u5b58\u5728\u5e7f\u544a\uff0c\u5728\u9996\u9875\u7684\u5217\u8868\u4e2d\uff0c\u6bcf\u7bc7\u6587\u7ae0\u540c\u6837\u4e5f\u90fd\u4f1a\u5e26\u4e0a\u5e7f\u544a\uff0c\u5bfc\u81f4\u9996\u9875\u4e00\u6b21\u5237\u51fa\u6765N\u4e2a\u5e7f\u544a\uff0c\u5f71\u54cd\u7f51\u7ad9\u5e03\u5c40\u548c\u8bbe\u8ba1\u3002","title":"\u5e7f\u544a\u5355\u5143"},{"location":"pages/affiliate/adsense/#\u6ce8\u610f\u4e8b\u9879","text":"\u5728\u6210\u529f\u63a5\u5165AdSense\u5e7f\u544a\u4e4b\u540e\uff0c\u5e76\u4e0d\u7b97\u7ed3\u675f\uff0cGoogle\u4f1a\u6839\u636e\u51e0\u79cd\u65b9\u5f0f\u548c\u6570\u636e\u5224\u65ad\u5e7f\u544a\u70b9\u51fb\u662f\u5426\u4f5c\u5f0a\uff0c\u4ece\u800c\u6ce8\u9500\u4f60\u7684\u8d26\u53f7\u3002\u6240\u4ee5\u4e0d\u8981\u5fc3\u5b58\u4fa5\u5e78\u5fc3\u7406\uff0c\u597d\u597d\u53d1\u539f\u521b\u6587\u7ae0\uff0c\u63d0\u9ad8\u7f51\u7ad9\u7684\u8d28\u91cf\u624d\u662f\u738b\u9053\u3002 \u4f5c\u5f0a\u5e7f\u544a\u70b9\u51fb\u8005\u7684IP\u5730\u5740\u4e0e\u4f60Adsense\u8d26\u6237\u767b\u5f55IP\u5730\u5740\u76f8\u540c \u4f5c\u5f0a\u5e7f\u544a\u70b9\u51fb\u7684CTR\u6570\u636e\u592a\u9ad8 \u4f5c\u5f0a\u5e7f\u544a\u70b9\u51fb\u8005\u7684IP\u5730\u5740\u6765\u81ea\u540c\u4e00\u4e2a\u5730\u7406\u533a\u57df \u6839\u636eCookies\u5224\u65ad\u4f5c\u5f0aAdsense\u5e7f\u544a\u70b9\u51fb \u4f5c\u5f0a\u5e7f\u544a\u70b9\u51fb\u8005\u9875\u9762\u505c\u7559\u65f6\u95f4\u592a\u77ed \u76f4\u63a5\u8bbf\u95ee\u8005\u7684\u5e7f\u544a\u70b9\u51fb\u7387\u8fc7\u9ad8 \u6d41\u91cf\u5c0f\u4f46\u5e7f\u544a\u70b9\u51fb\u7387\u9ad8 \u5728\u7f51\u9875\u4e0a\u7528\u6587\u5b57\u63d0\u793a\u8bf7\u6c42\u9f13\u52a8\u70b9\u51fb\u5e7f\u544a","title":"\u6ce8\u610f\u4e8b\u9879"},{"location":"pages/affiliate/adsense/#\u8bf4\u5728\u6700\u540e","text":"\u73b0\u5728\u901a\u8fc7adsense\u672c\u8eab\u80fd\u8d5a\u5230\u7684\u6536\u5165\u672c\u8eab\u5e76\u4e0d\u9ad8\uff0c\u5c24\u5176\u662f\u535a\u5ba2\u7c7b\u7684\u7f51\u7ad9\u66f4\u662f\u5982\u6b64\uff0c\u4f46\u662f\u65e2\u7136\u5927\u5bb6\u613f\u610f\u82b1\u65f6\u95f4\u548c\u7cbe\u529b\u53bb\u642d\u5efa\u4e2a\u4eba\u535a\u5ba2\uff0c\u9664\u4e86\u94b1\u4ee5\u5916\uff0c\u80af\u5b9a\u8fd8\u6709\u5176\u4ed6\u7684\u76ee\u7684\uff0c\u5e0c\u671b\u5927\u5bb6\u4e0d\u8981\u820d\u672c\u9010\u672b\uff0c\u5fd8\u8bb0\u4e86\u81ea\u5df1\u642d\u5efa\u535a\u5ba2\u7684\u521d\u8877\uff0c\u6bd5\u7adf\u5e7f\u544a\u6536\u5165\u8fd9\u4e2a\u4e8b\u60c5\uff0c\u6709\u5f53\u7136\u597d\uff0c\u6ca1\u6709\u4e5f\u4e0d\u7528\u6c14\u9981\uff0c\u5c3d\u529b\u5c31\u597d\uff5e","title":"\u8bf4\u5728\u6700\u540e"},{"location":"pages/affiliate/amazon-affiliate-marketing/","text":"\u5982\u4f55\uff08\u4e00\u6b65\u6b65\uff09\u642d\u5efa\u4e00\u4e2a\u6210\u529f\u7684\u4e9a\u9a6c\u900a\u8054\u76df\u7f51\u7ad9 \u00b6 \u4f60\u60f3\u901a\u8fc7\u63a8\u5e7f\u4e9a\u9a6c\u900a\u7684\u4ea7\u54c1\u6765\u8d5a\u70b9\u5916\u5feb\u5417\uff1f \u8bb8\u591a\u4eba\u901a\u8fc7\u4e9a\u9a6c\u900a\u8054\u76df\u5ba2\u7f51\u7ad9\u8d5a\u94b1\u3002\u4f46\u662f\u6bcf\u6709\u4e00\u4e2a\u6210\u529f\u6848\u4f8b\uff0c\u5c31\u6709\u8bb8\u591a\u5931\u8d25\u7684\u6545\u4e8b\u3002 \u4f8b\u5982\uff0c/r/juststart \u5b50\u677f\u5757\u7684 \u8fd9\u4e2a\u4eba \u5c31\u58f0\u79f0\u4ed6\u4ec5\u7528 6 \u4e2a\u6708\u4e0d\u5230\u7684\u65f6\u95f4\u5c31\u53ef\u4ee5\u6bcf\u4e2a\u6708\u4ece\u4e9a\u9a6c\u900a\u8d5a 1,000 \u7f8e\u91d1\uff1a \u800c \u8fd9\u4e2a\u4eba \u8fd0\u8425\u4e86\u4e24\u5e74\u591a\u7684\u7f51\u7ad9\u6bcf\u4e2a\u6708\u53ea\u80fd\u8d5a 38 \u7f8e\u91d1\u3002 \u5982\u679c\u4f60\u5e0c\u671b\u81ea\u5df1\u7684\u6545\u4e8b\u53ef\u4ee5\u591a\u50cf\u7b2c\u4e00\u5f20\u622a\u56fe\u7684\u6848\u4f8b\u4e00\u4e9b\uff0c\u800c\u5c11\u50cf\u7b2c\u4e8c\u5f20\u622a\u56fe\u91cc\u7684\u6848\u4f8b\u4e00\u4e9b\uff0c\u800c\u4e48\u8fd9\u7bc7\u6307\u5357\u5c31\u662f\u4e3a\u4f60\u51c6\u5907\u7684\u3002 \u901a\u8fc7\u8fd9\u7bc7\u6307\u5357\uff0c\u4f60\u5c06\u4e86\u89e3\uff1a \u4e9a\u9a6c\u900a\u8054\u76df\u9879\u76ee\u662f\u4ec0\u4e48 \u4e9a\u9a6c\u900a\u8054\u76df\u9879\u76ee\u5982\u4f55\u5de5\u4f5c \u5982\u4f55\u6210\u4e3a\u4e9a\u9a6c\u900a\u8054\u76df\u5ba2 \u4e9a\u9a6c\u900a\u8054\u76df\u5ba2\u7f51\u7ad9\u662f\u4ec0\u4e48 \u4e3a\u4ec0\u4e48 SEO \u5bf9\u4e9a\u9a6c\u900a\u8054\u76df\u5ba2\u7f51\u7ad9\u5f88\u91cd\u8981 * \u5982\u4f55\u642d\u5efa\u4e00\u4e2a\u6210\u529f\u7684\u4e9a\u9a6c\u900a\u8054\u76df\u5ba2\u7f51\u7ad9 \u4e9a\u9a6c\u900a\u8054\u76df\u9879\u76ee\u662f\u4ec0\u4e48 \u00b6 \u4eba\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e9a\u9a6c\u900a\u8054\u76df\u9879\u76ee\uff08 \u4e9a\u9a6c\u900a\u8054\u76df \uff09\u5411\u4e9a\u9a6c\u900a\u5f15\u4ecb\u9500\u552e\uff08\u989d\uff09\u6765\u8d5a\u94b1\u3002 \u4e9a\u9a6c\u900a\u8054\u76df\u9879\u76ee\u5982\u4f55\u5de5\u4f5c \u00b6 \u4e9a\u9a6c\u900a\u4f1a\u5728\u4f60\u6ce8\u518c\uff08\u8054\u76df\u9879\u76ee\uff09\u7684\u65f6\u5019\u5206\u914d\u7ed9\u4f60\u4e00\u4e2a\u552f\u4e00\u7684\u8ffd\u8e2a ID\uff0c\u5b83\u770b\u8d77\u6765\u50cf\u4e0b\u9762\u8fd9\u6837\uff1a yourname-20 . \u4f60\u53ef\u4ee5\u5c06\u8fd9\u4e2a ID \u6dfb\u52a0\u5230\u4efb\u610f\u4e00\u4e2a\u4e9a\u9a6c\u900a\u4ea7\u54c1\u7684\u94fe\u63a5\u4e2d\uff0c\u4ee5\u521b\u5efa\u4e00\u4e2a\u8054\u76df\u5ba2\u94fe\u63a5\u3002 \u4f8b\u5b50\uff1a amazon.com/dp/B01K1C94E4 \u2192 amazon.com/dp/B01K1C94E4 **?tag=yourname-20** \u82e5\u6709\u4eba\u70b9\u51fb\u4e86\u4f60\u7684\u4e13\u5c5e\u8054\u76df\u5ba2\u94fe\u63a5\uff0c\u5e76\u4e8e\u4e4b\u540e\u7684 24 \u5c0f\u65f6\u5185\u5728\u4e9a\u9a6c\u900a\u7f51\u7ad9\u6d88\u8d39\uff0c\u4f60\u5c31\u53ef\u4ee5\u4ece\u8fd9\u7b14\u6d88\u8d39\u4e2d\u62bd\u53d6\u4f63\u91d1\u3002 \u66f4\u597d\u7684\u662f\uff0c\u4ed6\u4eec\u4e0d\u5fc5\u8d2d\u4e70\u4f60\u63a8\u8350\u7684\u4ea7\u54c1\u3002\u5982\u679c\u4f60\u63d0\u4f9b\u7684\u94fe\u63a5\u6307\u5411\u83dc\u5200\uff0c\u800c\u70b9\u51fb\u7684\u4eba\u6700\u7ec8\u8d2d\u4e70\u4e86\u7f51\u7403\u62cd\uff0c\u4f60\u4f9d\u7136\u53ef\u4ee5\u83b7\u5f97\u4f63\u91d1\u3002\u5982\u679c\u4ed6\u4eec\u4e70\u4e86\u83dc\u5200\u3001\u7f51\u7403\u62cd\u548c\u5176\u4ed6\u4e00\u5806\u4e1c\u897f\uff0c\u4f60\u53ef\u4ee5\u4ece\u6bcf\u4ef6\u4ea7\u54c1\u4e2d\u6323\u5f97\u4f63\u91d1\u3002 \u4e9a\u9a6c\u900a\u8054\u76df\u9879\u76ee\u8fd9\u4e48\u53d7\u6b22\u8fce\uff0c\u8fd9\u4e5f\u662f\u4e00\u90e8\u5206\u539f\u56e0\u3002\u4e9a\u9a6c\u900a\u51fa\u552e\u7684\u4ea7\u54c1\u5404\u5f0f\u5404\u6837\uff0c\u6240\u4ee5\u5982\u679c\u4f60\u6536\u5230\u6765\u81ea\u4ece\u672a\u542c\u8bf4\u8fc7\u7684\u4ea7\u54c1\u7684\u4e00\u5927\u7b14\u4f63\u91d1\u4e5f\u662f\u5f88\u6b63\u5e38\u7684\u3002 \u5982\u4f55\u6210\u4e3a\u4e9a\u9a6c\u900a\u8054\u76df\u5ba2 \u00b6 \u6839\u636e\u4ee5\u4e0b\u6b65\u9aa4\uff1a \u524d\u5f80 \u4e9a\u9a6c\u900a\u8054\u76df\u4e3b\u9875 ; \u767b\u5f55\u4e9a\u9a6c\u900a\u8d26\u6237\uff1b \u6309\u7167\u5c4f\u5e55\u4e0a\u7684\u63d0\u793a\u64cd\u4f5c\u3002 \u5728\u6ce8\u518c\u8fc7\u7a0b\u4e2d\uff0c\u4e9a\u9a6c\u900a\u4f1a\u8981\u6c42\u63d0\u4f9b\u7f51\u5740\u3002\u5c3d\u7ba1\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4e2a\u793e\u4ea4\u5a92\u4f53\u7684\u94fe\u63a5\uff0c\u4f46\u5982\u679c\u4f60\u5f88\u8ba4\u771f\u7684\u60f3\u901a\u8fc7\u4e9a\u9a6c\u900a\u8054\u76df\u8ba1\u5212\u6323\u94b1\uff0c\u5c31\u9700\u8981\u5efa\u7acb\u4e00\u4e2a\u4e9a\u9a6c\u900a\u8054\u76df\u5ba2\u7f51\u7ad9\u4e86\u3002 \u4e9a\u9a6c\u900a\u8054\u76df\u5ba2\u7f51\u7ad9\u662f\u4ec0\u4e48\uff1f \u00b6 \u4e9a\u9a6c\u900a\u8054\u76df\u5ba2\u7f51\u7ad9 \u901a\u8fc7\u53d1\u5e03\u5185\u5bb9\u6765\u5bf9\u63a8\u5e7f\u4e9a\u9a6c\u900a\u4e0a\u7684\u4ea7\u54c1\uff0c\u4ee5\u4fc3\u8fdb\u9500\u552e\u3002 \u5982\u679c\u4f60\u66fe\u7ecf\u5728 Google \u4e2d\u641c\u7d22\u8fc7\u50cf \u201cbest [product type]\u201d\uff08\u201c\u6700\u597d\u7684 [\u4ea7\u54c1\u7c7b\u578b]\u201d\uff09\u6216\u8005 \u201c[product] review\u201d\uff08[\u4ea7\u54c1] \u8bc4\u6d4b\uff09\u8fd9\u6837\u7684\u8bcd\uff0c\u90a3\u4e48\u4f60\u51e0\u4e4e\u80af\u5b9a\u8bbf\u95ee\u8fc7\u8fd9\u7c7b\u7f51\u7ad9\u3002 \u6765\u770b\u4e00\u4e0b \u201cbest coffee grinder\u201d\uff08\u201c\u6700\u597d\u7684\u5496\u5561\u7814\u78e8\u673a\u201d\uff09\u8fd9\u4e2a\u5173\u952e\u8bcd\u6392\u540d\u9760\u524d\u7684\u7ed3\u679c\uff1a \u8fd9\u4e9b\u4eba\u8c03\u7814\u4e86\u6700\u597d\u7684\u5496\u5561\u7814\u78e8\u673a\uff0c\u5c06\u4ed6\u4eec\u7684\u53d1\u73b0\u603b\u7ed3\u5230\u4e00\u7bc7\u535a\u5ba2\u6587\u7ae0\u4e2d\uff0c\u5e76\u5728\u5176\u4e2d\u5305\u542b\u4e86\u4e9a\u9a6c\u900a\u7684\u8054\u76df\u5ba2\u94fe\u63a5\uff0c\u8bbf\u95ee\u8005\u70b9\u51fb\u540e\u53ef\u4ee5\u8d2d\u4e70\u63a8\u8350\u7684\u4ea7\u54c1\u3002 \u201cAeropress review\u201d\uff08\u201c\u7231\u4e50\u538b\u8bc4\u6d4b\u201d\uff09\u8fd9\u4e2a\u5173\u952e\u8bcd\u7684\u60c5\u51b5\u4e5f\u7c7b\u4f3c\u3002 \u8fd9\u4e24\u7c7b\u535a\u6587\u5bf9\u8bfb\u8005\u6765\u8bf4\u90fd\u5f88\u6709\u7528\uff0c\u56e0\u4e3a\u4ed6\u4eec\u8282\u7ea6\u4e86\u7528\u6237\u7684\u65f6\u95f4\uff0c\u8ba9\u751f\u6d3b\u53d8\u5f97\u8f7b\u677e\u3002\u5982\u679c\u4f60\u60f3\u8981\u8d2d\u4e70\u4e00\u53f0\u65b0\u7684\u5496\u5561\u7814\u78e8\u673a\uff0c\u4f60\u6ca1\u529e\u6cd5\u81ea\u5df1\u53bb\u6d4b\u8bd5\u591a\u4e2a\u4ea7\u54c1\u3002\u4f60\u4e0d\u5f97\u4e0d\u4f9d\u9760\u5176\u4ed6\u4eba\u7684\u8c03\u7814\u548c\u6d4b\u8bd5\u3002 \u4e3a\u4ec0\u4e48 SEO \u662f\u4e9a\u9a6c\u900a\u8054\u76df\u5ba2\u7f51\u7ad9\u6210\u529f\u7684\u79d8\u8bc0 \u00b6 \u4ece\u4e9a\u9a6c\u900a\u8054\u76df\u5ba2\u7f51\u7ad9\u6323\u94b1\u9700\u8981\u6d41\u91cf\uff08\u8bbf\u5ba2\uff09\u3002 \u5982\u679c\u6ca1\u6709\u6d41\u91cf\uff0c\u5c31\u4e0d\u4f1a\u6709\u4eba\u53bb\u70b9\u51fb\u4f60\u7684\u8054\u76df\u94fe\u63a5\uff0c\u4e5f\u5c31\u610f\u5473\u7740\u6ca1\u6709\u4f63\u91d1\u3002 \u5982\u4eca\uff0c\u83b7\u53d6\u6d41\u91cf\u7684\u65b9\u5f0f\u6709\u5f88\u591a\u3002\u4f46\u662f\u5927\u591a\u6570\u6709\u6210\u529f\u7ecf\u9a8c\u7684\u8054\u76df\u5ba2\u90fd\u901a\u8fc7 SEO \u83b7\u5f97\u4e86\u5927\u91cf\u6d41\u91cf\u3002 \u8fd9\u662f\u4e3a\u4ec0\u4e48\u5462\uff1f \u5982\u679c\u4f60\u5728\u793e\u5a92\u6216\u8005\u90ae\u4ef6\u901a\u8baf\u4e2d\u63a8\u5e7f\u535a\u5ba2\uff0c\u4f60\u4f1a\u83b7\u5f97\u6d41\u91cf\u7684\u6fc0\u589e\u3002\u4f46\u662f\u4e00\u65e6\u4f60\u7684\u53d7\u4f17\u770b\u8fc7\u4e86\u535a\u6587\uff0c\u6d41\u91cf\u5c31\u4f1a\u8dcc\u56de\u5230\u96f6\u3002 \u8fd9\u5c31\u662f\u6240\u8c13\u7684 \u201c\u5e0c\u671b\u7684\u5dc5\u5cf0\u201d\uff08\u201cspike of hope\u201d\uff09\uff0c\u7d27\u968f\u5176\u540e\u7684\u662f\u201c\u5426\u5b9a\u7684\u5e73\u7ebf\u201d\uff08\u201cflatliine of nope\u201d\uff09\u3002 SEO \u7684\u6548\u679c\u5219\u6b63\u597d\u76f8\u53cd\u3002\u5982\u679c\u4f60\u7684\u7f51\u7ad9\u4e4b\u4e8e\u90a3\u4e9b\u6bcf\u4e2a\u6708\u90fd\u6709\u641c\u7d22\u91cf\u7684\u5173\u952e\u8bcd\u5728 Google \u6709\u6392\u540d\uff0c\u4f60\u7f51\u7ad9\u7684\u6d41\u91cf\u5c06\u4f1a\u662f\u6301\u7eed\u7684\u2014\u2014\u5e76\u4e14\u4f1a\u968f\u7740\u65f6\u95f4\u9010\u6b65\u589e\u52a0\u3002 \u4ed8\u8d39\u5e7f\u544a\u4e5f\u53ef\u80fd\u8d77\u5230\u76f8\u540c\u7684\u4f5c\u7528\uff0c\u4f46\u662f\u5b83\u5b58\u5728\u4e00\u4e9b\u95ee\u9898\uff1a \u5b83\u9700\u8981\u82b1\u94b1 \uff08\u5927\u591a\u6570\u4eba\u7684\u65f6\u95f4\u6bd4\u94b1\u591a\uff09\u3002 \u5b83\u8981\u4e48\u5c31\u5168\u6709\uff0c\u8981\u4e48\u5c31\u5168\u65e0\u3002 \u4e00\u65e6\u4f60\u505c\u6b62\u82b1\u94b1\uff08\u6253\u5e7f\u544a\uff09\uff0c\u4f60\u7684\u6d41\u91cf\u5c31\u4f1a\u9057\u5931\u81f3\u96f6\u3002 \u5b83\u5f88\u96be\u8ba9\u4f60\u76c8\u5229 \uff0c\u56e0\u4e3a\u5e7f\u544a\u8d39\u4f1a\u8695\u98df\u4f60\u7684\u8054\u76df\u4f63\u91d1\u3002 \u8003\u8651\u5230\u8fd9\u4e00\u70b9\uff0c\u8ba9\u6211\u4eec\u6765\u770b\u770b\u5982\u4f55\u642d\u5efa\u4e00\u4e2a\u6bcf\u4e2a\u6708\u90fd\u80fd\u8d5a\u94b1\u7684\u4e9a\u9a6c\u900a\u8054\u76df\u5ba2\u7f51\u7ad9\u3002 \u5982\u4f55\u642d\u5efa\u6210\u529f\u7684\u4e9a\u9a6c\u900a\u8054\u76df\u5ba2\u7f51\u7ad9 \u00b6 \u4e0d\u540c\u7684\u4eba\u5bf9\u6210\u529f\u6709\u4e0d\u540c\u7684\u5b9a\u4e49\u3002 \u5bf9\u4e8e\u4e00\u4e9b\u4eba\u6765\u8bf4\uff0c\u6210\u529f\u610f\u5473\u7740\u4e00\u4e2a\u6708\u80fd\u8d5a 1,000 \u7f8e\u91d1\u7684\u7f51\u7ad9\u3002\u5bf9\u53e6\u5916\u4e00\u4e9b\u4eba\u6765\u8bf4\uff0c\u5b83\u53ef\u80fd\u662f\u66f4\u52a0\u96c4\u5fc3\u52c3\u52c3\u7684\u6bcf\u6708 10,000 \u7f8e\u91d1\u3002 \u65e0\u8bba\u6570\u76ee\u5927\u5c0f\uff0c\u901a\u5f80\u6210\u529f\u7684\u6b65\u9aa4\u662f\u4e00\u81f4\u7684\u3002 \u627e\u5230\u5229\u57fa\u5e02\u573a \u627e\u51fa\u53ef\u4ee5\u5e26\u6765\u5229\u6da6\u7684\u5173\u952e\u8bcd \u521b\u5efa\u7c7b\u578b\u201c\u6b63\u786e\u201d\u7684\u5185\u5bb9 \u901a\u8fc7 SEO \u4e3a\u7f51\u7ad9\u5f15\u6d41 \u4e3a\u8054\u76df\u5ba2\u94fe\u63a5\u83b7\u5f97\u70b9\u51fb 1. \u627e\u5230\u5229\u57fa\u5e02\u573a \u00b6 \u4f60\u542c\u8bf4\u8fc7 The Wirecutter \u5417\uff1f \u5b83\u5c5e\u4e8e\u300a\u7ebd\u7ea6\u65f6\u62a5\u300b\uff0c\u53ef\u80fd\u662f\u6700\u53d7\u6b22\u8fce\u7684\u4e9a\u9a6c\u900a\u8054\u76df\u5ba2\u7f51\u7ad9\u3002The Wirecutter \u7f51\u7ad9\u6709\u5404\u79cd\u5404\u6837\u7684\u8bc4\u6d4b\uff0c\u4ece\u78e8\u5200\u77f3\u5230\u7acb\u5f0f\u529e\u516c\u684c\u3002\u7f51\u7ad9\u6bcf\u4e2a\u6708\u4ec5\u4ece Google \u5c31\u80fd\u83b7\u5f97 390 \u4e07\u6b21\u8bbf\u95ee\u3002 \u5c0f\u63d0\u793a. The Wirecutter \u7f51\u7ad9\u73b0\u5728\u5df2\u7ecf\u88ab\u91cd\u5b9a\u5411\u5230\u4e86 nytimes.com/wirecutter/ \u8bb8\u591a Amazon \u8054\u76df\u8425\u9500\u7684\u65b0\u4eba\u770b\u5230\u4e86\u8fd9\u4e9b\u7f51\u7ad9\u5c31\u60f3\u8981\u590d\u5236\u4ed6\u4eec\u7684\u6210\u529f\u3002 \u4e0d\u8981\u72af\u8fd9\u4e2a\u9519\u8bef\u3002 \u50cf The Wirecutter \u8fd9\u6837\u7684\u5927\u7f51\u7ad9\u62e5\u6709\u96c4\u539a\u7684\u8d44\u91d1\u548c\u4f18\u79c0\u7684 SEO \u56e2\u961f\u3002\u8bd5\u56fe\u4e0e\u4ed6\u4eec\u7ade\u4e89\u5c06\u4f1a\u662f\u4e00\u573a\u8270\u82e6\u7684\u6218\u6597\u3002 \u76f8\u53cd\uff0c\u4f60\u5e94\u8be5\u9009\u62e9\u4e00\u4e2a\u53ef\u4ee5\u4e3b\u5bfc\u7684\u5229\u57fa\u5e02\u573a\u3002 \u505a\u6cd5\u5982\u4e0b\uff1a A. \u627e\u4e00\u4e9b\u4f60\u611f\u5174\u8da3\u7684\u4e1c\u897f \u00b6 \u7f3a\u4e4f\u52a8\u673a\u53ef\u80fd\u662f\u4eba\u4eec\u5728\u8054\u76df\u8425\u9500\u906d\u9047\u5931\u8d25\u7684\u6700\u5e38\u89c1\u539f\u56e0\uff0c\u56e0\u6b64\u9009\u62e9\u4e00\u4e2a\u4f60\u89c9\u5f97\u6709\u8da3\u7684\u9886\u57df\u662f\u5f88\u91cd\u8981\u7684\u3002 \u90a3\u4e48\uff0c\u62ff\u8d77\u7eb8\u548c\u7b14\uff0c\u8bb0\u5f55\u4e0b\u4e00\u4e9b\u60f3\u6cd5\u3002 \u5982\u679c\u4f60\u6b63\u5728\u82e6\u82e6\u6323\u624e\uff0c\u8fd9\u4efd \u8986\u76d6\u4e86\u8054\u76df\u8425\u9500\u5229\u57fa\u5e02\u573a\u7684\u5de8\u578b\u5217\u8868 \u53ef\u80fd\u4f1a\u6709\u6240\u5e2e\u52a9\u3002 \u53e6\u5916\uff0c\u4f60\u8fd8\u53ef\u4ee5\u4ece The Wirecutter \u7684\u7c7b\u76ee\u4e2d\u627e\u5230\u7075\u611f\u3002 B. \u67e5\u770b\u4f63\u91d1\u7387 \u00b6 \u4e9a\u9a6c\u900a\u7684\u4f63\u91d1\u7387\u56e0\u4ea7\u54c1\u7c7b\u76ee\u800c\u5f02\u3002 \u76ee\u524d\u7684\u4f63\u91d1\u62bd\u6210\u4f53\u7cfb \u662f\u8fd9\u6837\u7684\uff1a Product Category Commissions Luxury Beauty, Amazon Coins 10.00% Digital Music, Physical Music, Handmade, Digital Videos 5.00% Physical Books, Kitchen, Automotive 4.50% Amazon Fire Tablet Devices, Amazon Kindle Devices, Amazon Fashion Women\u2019s, Men\u2019s & Kids Private Label, Apparel, Amazon Cloud Cam Devices, Fire TV Edition Smart TVs, Amazon Fire TV Devices, Amazon Echo Devices, Ring Devices, Watches, Jewelry, Luggage, Shoes, and Handbags & Accessories 4.00% All Other Categories 4.00% Toys, Furniture, Home, Home Improvement, Lawn & Garden, Pets Products, Pantry, Headphones, Beauty, Musical Instruments, Business & Industrial Supplies, Outdoors, Tools, Sports, Baby Products 3.00% PC, PC Components, DVD & Blu-Ray 2.50% Televisions, Digital Video Games 2.00% Amazon Fresh, Physical Video Games & Video Game Consoles Grocery, Health & Personal Care 1.00% Gift Cards; Wireless Service Plans; Alcoholic Beverages; Digital Kindle Products purchased as a subscription; Food prepared and delivered from a restaurant; Amazon Appstore, Prime Now, Amazon Pay Places, or Prime Wardrobe Purchases 0.00% \u5982\u679c\u4f60\u611f\u5174\u8da3\u7684\u5229\u57fa\u5e02\u573a\u5c5e\u4e8e0\uff05\u7c7b\u522b\uff0c\uff0c\u8bf7\u628a\u4ed6\u4eec\u4ece\u5217\u8868\u4e2d\u5212\u6389\u3002\u63a8\u9500\u6ca1\u6709\u62a5\u916c\u7684\u4ea7\u54c1\u662f\u6ca1\u6709\u610f\u4e49\u7684\u3002 \u6211\u8fd8\u4f1a\u5212\u6389\u90a3\u4e9b\u4f63\u91d1\u7387\u4e0d\u8d85\u8fc7 2% \u7684\u7c7b\u76ee\uff0c\u56e0\u4e3a\u8981\u60f3\u4ece\u8fd9\u4e9b\u7c7b\u76ee\u8d5a\u94b1\uff0c\u4f60\u9700\u8981\u5927\u91cf\u6d41\u91cf\u3002 \u5c0f\u63d0\u793a. \u4e9a\u9a6c\u900a\u7684\u4f63\u91d1\u7387\u5728\u8fc7\u53bb 10 \u5e74\u5de6\u53f3\u7684\u65f6\u95f4\u91cc \u5927\u5e45\u4e0b\u964d \u3002\u6700\u8fd1\u4e00\u6b21\u524a\u51cf\u662f\u5728 2020 \u5e74\u521d\uff0c\u8fd9\u4f7f\u5f97\u4e00\u4e9b\u4eba\u8ba4\u4e3a\u4e9a\u9a6c\u900a\u8054\u76df\u5ba2\u7f51\u7ad9\u5df2\u7ecf\u6b7b\u4e86\u3002\u4e8b\u5b9e\u5e76\u975e\u5982\u6b64\u3002\u4ed6\u4eec\u53ea\u662f\u4e0d\u50cf\u4ee5\u524d\u90a3\u4e48\u8d5a\u94b1\u4e86\u800c\u5df2\u3002 C. \u67e5\u770b\u4ea7\u54c1\u4ef7\u683c \u00b6 \u4e00\u822c\u6765\u8bf4\uff0c\u4ea7\u54c1\u5355\u4ef7\u8d8a\u9ad8\uff0c\u4f60\u80fd\u8d5a\u5230\u7684\u94b1\u5c31\u8d8a\u591a\u3002 \u4f8b\u5982\uff0c\u6709\u4eba\u82b1 4,000 \u7f8e\u91d1\u4e70\u4e86\u4e00\u53f0\u7535\u8111\uff0c\u4f60\u83b7\u5f97\u7684 2.5% \u7684\u4f63\u91d1\uff08100 \u7f8e\u91d1\uff09\u6bd4\u6709\u4eba\u82b1 40 \u7f8e\u91d1\u4e70\u4e00\u6761\u65b0\u7684\u5185\u5b58\u6761\u5e26\u6765\u7684\u4f63\u91d1\uff081 \u7f8e\u91d1\uff09\u8981\u9ad8\u7684\u591a\u3002 \u4f46\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u4f60\u5e94\u8be5\u9009\u62e9\u8fdb\u5165\u4e00\u4e2a\u4ef7\u683c\u9ad8\u6602\u7684\u5229\u57fa\u5e02\u573a\u3002 \u4eba\u4eec\u5728\u8d2d\u4e70\u9ad8\u4ef7\u4ea7\u54c1\u65f6\u4e0d\u4f1a\u90a3\u4e48\u51b2\u52a8\uff0c\u610f\u5473\u7740\u8f6c\u5316\u6210\u4ea4\u6613\u7684\u70b9\u51fb\u8f83\u5c11\u3002\u8fd9\u5c31\u662f\u4f60\u7684\u8f6c\u5316\u7387\u3002 \u73b0\u5728\u63d0\u5230\u4ea7\u54c1\u4ef7\u683c\uff0c\u5c31\u6709\u8bb8\u591a\u5173\u4e8e\u6700\u6709\u6548\u70b9\uff08sweet spot\uff09\u7684\u8ba8\u8bba\uff0c\u4f46\u4eba\u4eec\u5171\u8bc6\u7684\u5747\u4ef7\u4f3c\u4e4e\u5728 30 \u7f8e\u91d1\u5230 300 \u7f8e\u91d1\u4e4b\u95f4\u3002\u8d85\u8fc7 300 \u7f8e\u91d1\uff0c\u8f6c\u5316\u7387\u4f1a\u5f00\u59cb\u53d7\u635f\u3002\u4f4e\u4e8e 30 \u7f8e\u91d1\uff0c\u4f60\u4fbf\u65e0\u6cd5\u8d5a\u53d6\u8db3\u591f\u7684\u4f63\u91d1\u3002 \u4e3a\u4e86\u4e86\u89e3\u4f60\u7684\u5229\u57fa\u5e02\u573a\u7684\u4ef7\u683c\uff0c\u53ef\u4ee5\u5728\u4e9a\u9a6c\u900a\u641c\u7d22\u4e00\u4e9b\u4ea7\u54c1\u3002 \u00b6 D. \u4f30\u7b97\u6d41\u91cf\u8981\u6c42 \u00b6 \u73b0\u5728\u4f60\u5bf9\u60f3\u8fdb\u5165\u7684\u5229\u57fa\u5e02\u573a\u6709\u4e86\u66f4\u591a\u4e86\u89e3\uff0c\u5c31\u53ef\u4ee5\u5229\u7528\u8fd9\u4e9b\u4fe1\u606f\u6765\u4f30\u7b97\u201c\u8d5a\u94b1\u9875\u9762\u201d\uff08\u201cmoney pages\u201d\uff09\u9700\u8981\u83b7\u5f97\u591a\u5c11\u6d41\u91cf\u624d\u80fd\u5b9e\u73b0\u8d22\u52a1\u76ee\u6807\u3002 \u81f3\u4e8e\u201c\u8d5a\u94b1\u9875\u9762\u201d\u8fd9\u4e2a\u8bcd\uff0c\u5982\u679c\u4f60\u4e0d\u719f\u6089\u7684\u8bdd\uff0c\u4ed6\u4eec\u662f\u4f60\u7f51\u7ad9\u4e0a\u5305\u542b\u8054\u76df\u94fe\u63a5\u7684\u9875\u9762\u3002 \u5bf9\u4e9a\u9a6c\u900a\u8054\u76df\u5ba2\u7f51\u7ad9\u800c\u8a00\uff0c\u4ea7\u54c1\u7efc\u8ff0\u53ef\u80fd\u662f\u6700\u597d\u7684\u201c\u8d5a\u94b1\u9875\u9762\u201d\u3002\u8fd9\u4e9b\u9875\u9762\u4f1a\u5217\u51fa\u67d0\u4e2a\u7c7b\u76ee\u5185\u6700\u597d\u7684\u4ea7\u54c1\uff0c\u5c31\u50cf\u4e0b\u9762\u8fd9\u5f20 The Wirecutter \u7684\u5217\u8868\uff0c\u5b83\u5217\u4e3e\u51fa\u4e86\u6700\u597d\u7684\u626b\u5730\u673a\u5668\u4eba\uff1a \u8fd9\u4e9b\u5f80\u5f80\u662f\u6700\u8d5a\u94b1\u7684\u9875\u9762\uff0c\u56e0\u4e3a\u4ed6\u4eec\u63a8\u8350\u4e86\u591a\u6b3e\u4ea7\u54c1\uff0c\u5e76\u4e14\u5728 Google \u641c\u7d22\u8fd9\u4e9b\u4ea7\u54c1\u7684\u7528\u6237\u5df2\u7ecf\u6709\u8d2d\u4e70\u7684\u610f\u613f\u3002\u8fd9\u4f1a\u63d0\u9ad8\u8054\u76df\u94fe\u63a5\u7684\u70b9\u51fb\u7387\uff08clickthrough rate, CTR\uff09\u3002 \u90a3\u4e48\u6d41\u91cf\u4f30\u7b97\u7684\u516c\u5f0f\u662f\u4ec0\u4e48\uff1f \u6708\u5ea6\u76ee\u6807 / \uff08\u4ea7\u54c1\u5747\u4ef7 * \u7c7b\u76ee\u4f63\u91d1\u7387 * \u8054\u76df\u94fe\u63a5\u5e73\u5747\u70b9\u51fb\u7387 * \u5e73\u5747\u8f6c\u5316\u7387\uff09 \u6211\u4eec\u6765\u4e3e\u4f8b\u8bf4\u660e\u3002 \u5982\u679c\u4f60\u60f3\u8fdb\u5165\u7684\u662f\u5496\u5561\u8fd9\u4e2a\u5229\u57fa\u5e02\u573a\uff0c\u76ee\u6807\u662f \u4e00\u4e2a\u6708\u8d5a 1,000 \u7f8e\u91d1 \u3002\u901a\u8fc7\u4e4b\u524d\u7684\u64cd\u4f5c\uff0c\u4f60\u4e86\u89e3\u5230\u4ea7\u54c1\u5747\u4ef7\u4e3a 40 \u7f8e\u91d1 \uff0c\u800c\u4e0e\u5496\u5561\u76f8\u5173\u7684\u4ea7\u54c1\u7684\u4f63\u91d1\u7387\u4e3a 4% \u3002 \u4f46\u662f\uff0c\u4f60\u5e76\u4e0d\u77e5\u9053\u4f60\u6587\u7ae0\u7684\u5e73\u5747\u70b9\u51fb\u7387\uff08\u8bbf\u95ee\u8005\u70b9\u51fb\u4e9a\u9a6c\u900a\u8054\u76df\u94fe\u63a5\u7684\u767e\u5206\u6bd4\uff09\uff0c\u6216\u8005\u4e9a\u9a6c\u900a\u7684\u8f6c\u5316\u7387\uff08\u70b9\u51fb\u8f6c\u5316\u4e3a\u4ea4\u6613\u7684\u767e\u5206\u6bd4\uff09\u3002 \u6211\u4eec\u53ef\u80fd\u60b2\u89c2\u4e00\u70b9\uff0c\u5047\u8bbe\u70b9\u51fb\u7387\u4e3a 10% \uff0c\u8f6c\u5316\u7387\u4e3a 7.5% \u3002 \u8ba9\u6211\u4eec\u628a\u6240\u6709\u7684\u4e1c\u897f\u90fd\u4ee3\u5165\u8ba1\u7b97\uff1a 1,000 / (40 * 4% * 10% * 7.5%) = 83,333 \u770b\u8d77\u6765\u6211\u4eec\u7684\u201c\u8d5a\u94b1\u9875\u9762\u201d\u6bcf\u4e2a\u6708\u9700\u8981 ~ 83,000 \u6b21\u8bbf\u95ee\u624d\u80fd\u5b8c\u6210 1,000 \u7f8e\u91d1/\u6708\u7684\u9500\u552e\u76ee\u6807\u3002 \u5f53\u7136\uff0c\u8fd9\u548c\u7cbe\u786e\u7684\u79d1\u5b66\u8ba1\u7b97\u8fd8\u5dee\u5f88\u8fdc\u3002\u6211\u4eec\u60b2\u89c2\u7684\u4f30\u8ba1\u4e86\u4e00\u4e9b\u773c\u5b57\uff0c \u8fd9\u662f\u6709\u539f\u56e0\u7684\u3002 E. \u4f30\u7b97\u6d41\u91cf\u6f5c\u529b \u00b6 \u73b0\u5728\u4f60\u5df2\u7ecf\u77e5\u9053\u9700\u8981\u591a\u5c11\u6d41\u91cf\u624d\u80fd\u8d5a\u94b1\uff0c\u63a5\u4e0b\u6765\u4f60\u9700\u8981\u4f30\u7b97\u8be5\u5229\u57fa\u5e02\u573a\u662f\u5426\u6709\u8db3\u591f\u7684\u641c\u7d22\u6d41\u91cf\u6f5c\u529b\u3002 \u8fd9\u91cc\u6709\u4e00\u4e9b\u7b80\u5355\u7684\u65b9\u6cd5\uff1a \u5b89\u88c5\u5e76\u6fc0\u6d3b Ahrefs SEO \u5de5\u5177\u680f \uff0c\u63a5\u7740\u5728 Google \u4e2d\u641c\u7d22\uff1a best\uff08\u6700\u597d\u7684\uff09 [\u4f60\u7684\u5229\u57fa\u9886\u57df\u7684\u67d0\u6b3e\u4ea7\u54c1]\uff08product in your niche\uff09 inurl:best \u4f8b\u5982\uff0c\u5c31\u5496\u5561\u8fd9\u4e2a\u5229\u57fa\u5e02\u573a\u800c\u8a00\uff0c \u6211\u4eec\u7684\u641c\u7d22\u8bcd\u53ef\u80fd\u662f\uff1a \u5982\u679c\u4f60\u5bf9\u641c\u7d22\u8bcd\u4e2d\u7684 inurl:best \u4e0d\u89e3, \u8fd9\u6837\u505a\u7684\u76ee\u7684\u662f\u9650\u5236 Google \u5728\u641c\u7d22\u7ed3\u679c\u4e2d\u53ea\u5448\u73b0\u7f51\u9875\u94fe\u63a5\u5305\u542b \u201cbest\u201d \u7684\u7f51\u9875\u7ed3\u679c\u3002\u5728\u63a5\u4e0b\u6765\u7684\u6b65\u9aa4\u4e2d\uff0c\u4f60\u5c06\u770b\u5230\u5b83\u7684\u91cd\u8981\u6027\u3002 \u4ece\u73b0\u5728\u8d77\uff0c\u5c06\u6ce8\u610f\u529b\u653e\u5728\u641c\u7d22\u7ed3\u679c\u4e2d\u51fa\u73b0\u7684\u6d41\u91cf\u8fbe\u6807\u7684\u5229\u57fa\u7f51\u7ad9\u4e0a\u3002 \u8fd9\u91cc\u7684\u5173\u952e\u8bcd\u662f\u201c\u5229\u57fa\u201d\u3002\u4f60\u5e94\u8be5\u5ffd\u7565\u50cf\u798f\u5e03\u65af\u3001The Wirecutter \u6216\u536b\u62a5\u8fd9\u6837\u7684\u5927\u578b\u901a\u7528\u7ad9\u70b9\u3002\u5c3d\u7ba1\u4ed6\u4eec\u62e5\u6709\u5927\u91cf\u6d41\u91cf\uff0c\u4f46\u662f\u4ed6\u4eec\u4e0d\u662f\u4f60\u9700\u8981\u5173\u6ce8\u7684\u3002\u5982\u679c\u4f60\u6ca1\u6709\u53d1\u73b0\u4efb\u4f55\u5229\u57fa\u7f51\u7ad9\uff0c\u5c1d\u8bd5\u66f4\u6362\u4e0d\u540c\u7684\u4ea7\u54c1\u3002 \u8fd9\u91cc\u6709\u4e00\u4e2a\u6ee1\u8db3\u6211\u4eec\u8981\u6c42\u7684\uff1a \u5c0f\u63d0\u793a. \u786e\u4fdd\u4f60\u67e5\u770b\u7684\u662f\u57df\u540d\u7ea7\u522b\u7684\uff0c\u800c\u4e0d\u662f\u9875\u9762\u7ea7\u522b\u7684\u6d41\u91cf\u3002 \u786e\u4fdd\u4f60\u67e5\u770b\u7684\u662f\u57df\u540d\u7ea7\u522b\u7684\uff0c\u800c\u4e0d\u662f\u9875\u9762\u7ea7\u522b\u7684\u6d41\u91cf\u3002 \u8fd9\u4e2a\u7f51\u7ad9\u6bcf\u4e2a\u6708\u83b7\u5f97 ~210,000 \u6b21\u6765\u81ea\u7f8e\u56fd\u7684\u641c\u7d22\u8bbf\u95ee\uff0c\u4ece\u57df\u540d\u6211\u4eec\u53ef\u4ee5\u5224\u65ad\u8fd9\u662f\u4e00\u4e2a\u5173\u6ce8\u5496\u5561\u7684\u5229\u57fa\u7f51\u7ad9\u3002 \u7136\u800c\uff0c\u6211\u4eec\u5e76\u4e0d\u77e5\u9053\u201c\u8d5a\u94b1\u201d\u9875\u9762\u83b7\u5f97\u4e86\u591a\u5c11\u6d41\u91cf\u3002\u5982\u679c\u5927\u90e8\u5206\u6d41\u91cf\u53bb\u5230\u4e86\u65e0\u5173\u7684\u535a\u5ba2\u6587\u7ae0\uff0c\u90a3\u5bf9\u6211\u4eec\u6765\u8bf4\u4e0d\u662f\u597d\u5146\u5934\u3002 \u5e78\u8fd0\u7684\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 Ahrefs \u7684\u7f51\u7ad9\u5206\u6790 \u62a5\u544a\u66f4\u597d\u5730\u4e86\u89e3\u201c\u8d5a\u94b1\u201d\u9875\u9762\u7684\u6d41\u91cf\u60c5\u51b5\u3002 \u53ea\u9700\u8981\u7c98\u8d34\u57df\u540d\uff0c\u524d\u5f80 \u70ed\u95e8\u9875\u9762 \u62a5\u544a\uff0c\u5728\u201c\u5305\u542b\u201d\u8fc7\u6ee4\u5668\u4e2d\u6dfb\u52a0\u201cbest\u201d\uff0c\u63a5\u7740\u4ece\u201c\u4efb\u610f\u76ee\u6807\u201d\u4e0b\u62c9\u83dc\u5355\u4e2d\u9009\u62e9\u201cURLs\u201d\u3002\u4f60\u4f1a\u53d1\u73b0\u8fc7\u6ee4\u540e\u7684\u9875\u9762\u51e0\u4e4e\u5168\u90e8\u90fd\u662f\u4ea7\u54c1\u7efc\u8ff0\u5e16\u6587\u3002 \u4f60\u53ef\u4ee5\u5728\u8fc7\u6ee4\u62a5\u544a\u7684\u9876\u90e8\u67e5\u770b\u6240\u6709\u9875\u9762\u6708\u5ea6\u641c\u7d22\u6d41\u91cf\u603b\u548c\u7684\u4f30\u503c\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u8fd9\u4e2a\u6570\u5b57\u662f 107,714\u3002 \u4f60\u5e94\u8be5\u8bb0\u5f97\u6211\u4eec\u4e4b\u524d\u4f30\u8ba1\u6bcf\u6708\u9700\u8981 ~83,000 \u4e2a\u8bbf\u5ba2\u624d\u80fd\u8fbe\u5230 1,000 \u7f8e\u91d1/\u6708\u7684\u8d5a\u94b1\u76ee\u6807\uff0c\u770b\u8d77\u6765\u8fd9\u4e2a\u5229\u57fa\u5e02\u573a\u53ef\u4ee5\u8f7b\u677e\u6ee1\u8db3\u6211\u4eec\u7684\u6f5c\u5728\u8981\u6c42\u3002 F. \u4f30\u7b97\u7ade\u4e89\u5ea6 \u00b6 \u8fdb\u5165\u4e00\u4e2a\u4f60\u9700\u8981\u594b\u6218\u591a\u5e74\u624d\u80fd\u8fbe\u5230\u6d41\u91cf\u76ee\u6807\u7684\u5229\u57fa\u5e02\u573a\u662f\u6ca1\u6709\u610f\u4e49\u7684\u3002\u56e0\u6b64\u4f60\u9700\u8981\u786e\u4fdd\u6709\u4e00\u4e9b\u4e0d\u9700\u8981\u592a\u591a\u7e41\u7410\u7684 SEO \u5de5\u4f5c\u5c31\u53ef\u4ee5\u201c\u7834\u89e3\u201d\u7684\u4e3b\u9898\u3002 SEO \u662f\u4e00\u573a\u590d\u6742\u7684\u535a\u5f08\u3002\u5305\u62ec\u4e86\u8bb8\u591a \u6392\u540d\u56e0\u7d20 \u548c \u6700\u4f73\u5b9e\u8df5 \u3002\u4f46\u6700\u91cd\u8981\u7684\u662f\u4f60\u7684\u9875\u9762\u83b7\u5f97\u4e86\u591a\u5c11\u9ad8\u8d28\u91cf\u5916\u94fe\u3002 Google \u5728 \u5176\u5173\u4e8e\u641c\u7d22\u7b97\u6cd5\u7684\u9875\u9762 \u8ba8\u8bba\u4e86\u5916\u94fe\u7684\u91cd\u8981\u6027\u3002 \u5728\u6211\u4eec\u5f00\u5c55\u7684 \u4e00\u9879\u9488\u5bf9\u5341\u4ebf\u591a\u7f51\u9875\u7684\u7814\u7a76 \u4e2d\uff0c\u6211\u4eec\u8fd8\u89c2\u5bdf\u5230\u4e86\u7f51\u9875\u83b7\u5f97\u7684\u6765\u81ea\u72ec\u7acb\u7f51\u7ad9\uff08\u6307\u5165\u57df\u540d\uff09\u7684\u5916\u94fe\u6570\u91cf\u4e0e\u5176\u641c\u7d22\u6d41\u91cf\u4e4b\u95f4\u7684\u6e05\u6670\u5173\u8054\u3002 \u6240\u4ee5\u5728\u6211\u4eec\u5173\u95ed\u4e4b\u524d\u4e00\u6b65\u6240\u5f97\u7684\u8fc7\u6ee4\u540e\u7684 \u70ed\u95e8\u9875\u9762 \u62a5\u544a\u4e4b\u524d\uff0c\u8bf7\u5173\u6ce8 RDs \uff08\u6307\u5165\u57df\u540d\uff09\u8fd9\u4e00\u680f\u3002\u8be5\u680f\u5c55\u793a\u4e86\u6bcf\u4e2a\u9875\u9762\u7684\u6307\u5165\u57df\u540d\u6570\u91cf\u3002 \u89c2\u5bdf\u90a3\u4e9b\u62e5\u6709\u6d41\u91cf\u7684\u9875\u9762\uff0c\u5982\u679c\u4ed6\u4eec\u7684\u6307\u5165\u57df\u540d\u5f88\u5c11\uff0c\u6216\u8005\u6ca1\u6709\u6307\u5165\u57df\u540d\uff0c\u5c31\u6807\u5fd7\u7740\u8fd9\u4e2a\u8bdd\u9898\u7684\u7ade\u4e89\u5ea6\u4e0d\u9ad8\u3002 \u89c2\u5bdf Homegrounds \u7684\u62a5\u544a\uff0c\u6211\u4eec\u770b\u5230\u8bb8\u591a\u8fd9\u6837\u7684\u9875\u9762\uff1a \u5982\u679c\u5bf9 wareable.com \u6267\u884c\u76f8\u540c\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u4f1a\u770b\u5230\u76f8\u53cd\u7684\u60c5\u51b5\u3002\u51e0\u4e4e\u6bcf\u4e00\u4e2a\u9875\u9762\u90fd\u6709\u6765\u81ea\u6570\u4ee5\u5343\u8ba1\u7684\u6307\u5165\u57df\u540d\u7684\u5916\u94fe\uff0c\u8fd9\u8868\u793a\u8fd9\u4e00\u5229\u57fa\u9886\u57df\u7684\u8bb8\u591a\u8bdd\u9898\u90fd\u5f88\u96be\u653b\u514b\u3002 \u9047\u5230\u8fd9\u79cd\u60c5\u51b5\u65f6\uff0c\u4f60\u6709\u4e24\u4e2a\u9009\u9879\uff1a \u8fdb\u4e00\u6b65\u7f29\u5c0f\u5229\u57fa\u5e02\u573a\u7684\u8303\u56f4\u3002 \u9664\u4e86\u53ef\u7a7f\u6234\u8bbe\u5907\uff0c\u6211\u4eec\u53ef\u80fd\u8fd8\u60f3\u5173\u6ce8\u667a\u80fd\u624b\u8868\u6216\u8005\u5065\u5eb7\u8ffd\u8e2a\u5668\u3002\u5982\u679c\u90a3\u4e9b\u5229\u57fa\u5e02\u573a\u770b\u8d77\u6765\u8fd8\u662f\u8fc7\u4e8e\u5e7f\u6cdb\uff0c\u4f60\u53ef\u4ee5\u628a\u8303\u56f4\u8fdb\u4e00\u6b65\u7f29\u5c0f\u81f3\u50cf\u513f\u7ae5\u667a\u80fd\u624b\u8868\u8fd9\u6837\u7684\u8bdd\u9898\u3002 \u9009\u62e9\u4e0d\u540c\u7684\u5229\u57fa\u5e02\u573a\u3002 \u5982\u679c\u4f60\u5bf9\u7f29\u5c0f\uff08\u5229\u57fa\u5e02\u573a\u7684\uff09\u8303\u56f4\u4e0d\u611f\u5174\u8da3\uff0c\u5c31\u53ef\u4ee5\u653e\u5f03\u539f\u6765\u7684\u4e3b\u610f\uff0c\u91cd\u590d\u4ee5\u4e0a\u6b65\u9aa4\u4ee5\u627e\u5230\u65b0\u7684\u5229\u57fa\u5e02\u573a\u3002 2. \u8fdb\u884c\u5173\u952e\u8bcd\u8c03\u7814 \u00b6 \u627e\u5230\u4e00\u4e2a\u6709\u6f5c\u529b\u7684\u5229\u57fa\u5e02\u573a\u662f\u56f0\u96be\u7684\uff1b\u800c\u5173\u952e\u8bcd\u8c03\u7814\u5219\u76f8\u5bf9\u7b80\u5355\u3002 \u5982\u679c\u4f60\u61d2\u5f97\u52a8\uff0c\u751a\u81f3\u53ef\u4ee5\u76f4\u63a5\u5c06\u4e4b\u524d\u6b65\u9aa4\u8fc7\u6ee4\u51fa\u7684 \u70ed\u95e8\u9875\u9762 \u62a5\u544a\u5bfc\u51fa\u3002\u5b83\u5e94\u8be5\u80fd\u7ed9\u4f60\u8db3\u591f\u591a\u7684\u6709\u5229\u53ef\u56fe\u7684\u201c\u4ea7\u54c1\u7efc\u8ff0\u201d\u8bdd\u9898\uff0c\u8fd9\u591f\u4f60\u5fd9\u597d\u51e0\u4e2a\u6708\u4e86\u3002 \u7136\u800c\uff0c\u5982\u679c\u4f60\u60f3\u66f4\u6709\u7b56\u7565\u5e76\u627e\u51fa\u66f4\u591a\u5173\u952e\u8bcd\uff0c\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a \u524d\u5f80 Ahrefs \u7684\u5173\u952e\u8bcd\u5206\u6790\u5de5\u5177 ; \u8f93\u5165\u51e0\u4e2a\u548c\u5229\u57fa\u5e02\u573a\u53ca\u4ea7\u54c1\u76f8\u5173\u7684\u201c\u79cd\u5b50\u201d\u5173\u952e\u8bcd\uff1b \u524d\u5f80\u201c\u6240\u6709\u5173\u952e\u8bcd\u201d\u62a5\u544a\u3002 \u5982\u679c\u6211\u4eec\u60f3\u8fdb\u5165\u5496\u5561\u8fd9\u4e2a\u5229\u57fa\u5e02\u573a\uff0c\u754c\u9762\u770b\u8d77\u6765\u4f1a\u662f\u8fd9\u6837\u7684\uff1a \u4f60\u5f88\u53ef\u80fd\u4ece\u8fd9\u4efd\u62a5\u544a\u4e2d\u770b\u5230\u6210\u767e\u4e0a\u5343\u4e2a\u5173\u952e\u8bcd\uff0c\u4f46\u5176\u4e2d\u6709\u4e00\u4e9b\u662f\u65e0\u5173\u7684\u3002\u56e0\u6b64\u6211\u4eec\u63a5\u4e0b\u6765\u4f1a\u4f7f\u7528\u5185\u5efa\u7684\u8fc7\u6ee4\u5668\u627e\u51fa\u6211\u4eec\u9700\u8981\u7684\u4e09\u79cd\u5173\u952e\u8bcd\u3002 A. \u627e\u5230\u4ea7\u54c1\u7efc\u8ff0\u5173\u952e\u8bcd \u00b6 \u91cd\u7533\u4e00\u4e0b\uff0c\u4ea7\u54c1\u7efc\u8ff0\u5173\u952e\u8bcd\u3014\u5982\uff1a\u201cbest coffee machine\u201d\uff08\u201c\u6700\u597d\u7684\u5496\u5561\u673a\u201d\uff09\u3001\u201cbest coffee grinder\u201d\u3015\u901a\u5e38\u662f\u4e9a\u9a6c\u900a\u8054\u76df\u5ba2\u7f51\u7ad9\u7684\u6700\u5927\u5229\u6da6\u6765\u6e90\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u627e\u51fa\u90a3\u4e9b\u62e5\u6709\u6f5c\u5728\u6d41\u91cf\uff0c\u4f46\u662f\u6392\u540d\u96be\u5ea6\u5e76\u4e0d\u662f\u592a\u9ad8\u7684\u4ea7\u54c1\u7efc\u8ff0\u5173\u952e\u8bcd\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u9700\u8981\u6dfb\u52a0\u4ee5\u4e0b\u4e09\u4e2a\u8fc7\u6ee4\u5668\uff1a \u5305\u542b\uff1a \u201cbest\u201d **\u5173\u952e\u8bcd\u96be\u5ea6 ( KD ) : <=10 * \u641c\u7d22\u91cf:** >=500 \u5c0f\u63d0\u793a. \u4f60\u53ef\u4ee5\u7a0d\u5fae\u653e\u5bbd\u5bf9\u641c\u7d22\u91cf\u9608\u503c\u7684\u9650\u5236\uff0c\u8fd9\u4e2a\u6570\u5b57\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u4e0e\u5229\u57fa\u5e02\u573a\u6709\u5173\u3002 \u4f60\u53ef\u4ee5\u7a0d\u5fae\u653e\u5bbd\u5bf9\u641c\u7d22\u91cf\u9608\u503c\u7684\u9650\u5236\uff0c\u8fd9\u4e2a\u6570\u5b57\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u4e0e\u5229\u57fa\u5e02\u573a\u6709\u5173\u3002 \u73b0\u5728\u4f60\u5e94\u8be5\u53ef\u4ee5\u770b\u5230\u4e00\u5f20\u6309\u7167\u6708\u5ea6\u641c\u7d22\u91cf\u6392\u5e8f\u7684\u6392\u540d\u96be\u5ea6\u8f83\u4f4e\u7684\u76f8\u5173\u5173\u952e\u8bcd\u5217\u8868\u3002 \u73b0\u5728\uff0c\u6ce8\u610f\u5173\u952e\u8bcd\u96be\u5ea6\u6307\u6807\u53ea\u80fd\u7ed9\u4f60\u5173\u4e8e\u6392\u540d\u96be\u5ea6\u7684\u7c97\u7565\u63d0\u793a\u3002\u800c\u6708\u5ea6\u641c\u7d22\u91cf\u53ea\u80fd\u7ed9\u51fa\u8be5\u8bdd\u9898\u6d41\u91cf\u6f5c\u529b\u7684\u7c97\u7565\u4f30\u8ba1\u3002 \u6240\u4ee5\u63a5\u4e0b\u6765\u4f60\u9700\u8981\u505a\u7684\u662f\u7b5b\u9009\u62a5\u544a\uff0c\u9010\u4e00\u5206\u6790\u5173\u952e\u8bcd\uff0c\u5e76\u5c06\u4f18\u8d28\u7684\u4e3b\u9898\u5173\u952e\u8bcd\u4fdd\u5b58\u5230\u5173\u952e\u8bcd\u5217\u8868\u4e2d\u3002 \u5982\u679c\u6709\u4e0a\u5343\u4e2a\u5173\u952e\u8bcd\uff0c\u4e5f\u65e0\u9700\u62c5\u5fc3\u3002\u4f60\u4e0d\u9700\u8981\u5206\u6790\u6240\u6709\u7684\u5173\u952e\u8bcd\uff0c\u53ea\u9700\u8981 20~50 \u4e2a\u5173\u952e\u8bcd\u5c31\u53ef\u4ee5\u5f00\u59cb\u3002 \u6240\u4ee5\u6d41\u7a0b\u662f\u4ec0\u4e48\u5462\uff1f \u5728\u6211\u4eec\u8ba8\u8bba\u6280\u672f\u5185\u5bb9\u4e4b\u524d\uff0c\u6709\u4e00\u70b9\u5f88\u91cd\u8981\uff0c\u90a3\u5c31\u662f\u5728\u5bfb\u627e\u5173\u952e\u8bcd\u65f6\uff0c\u4f60\u9700\u8981\u8fd0\u7528\u5e38\u8bc6\u3002\u5982\u679c\uff08\u5019\u9009\uff09\u5173\u952e\u8bcd\u662f\u201cbest coffee grinder\u201d\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8bcd\u662f\u6709\u610f\u4e49\u7684\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u4ea7\u54c1\u4e9a\u9a6c\u900a\u6709\u552e\u3002\u5982\u679c\uff08\u5019\u9009\uff09\u5173\u952e\u8bcd\u4e0e\u4f60\u53ef\u80fd\u4f1a\u5728\u4e9a\u9a6c\u900a\u8d2d\u4e70\u7684\u5546\u54c1\u65e0\u5173\uff0c\u4f8b\u5982\u201cbest coffee in los angeles\u201d\uff08\u201c\u6d1b\u6749\u77f6\u6700\u597d\u7684\u5496\u5561\u201d\uff09\uff0c\u4f60\u53ef\u4ee5\u9a6c\u4e0a\u5c06\u5b83\u6392\u9664\u6389\u3002 \u4e3a\u4e86\u627e\u51fa\u6709\u610f\u4e49\u7684\u5173\u952e\u8bcd\uff0c\u4f60\u53ef\u4ee5\u70b9\u51fb SERP \u6309\u94ae\uff0c\u67e5\u770b Google \u4e2d\u4e4b\u4e8e\u8be5\u5173\u952e\u8bcd\u6392\u540d\u9760\u524d\u7684\u9875\u9762\u2026\u2026 \u2026\u2026 \u7136\u540e\u6309\u7167\u8fd9\u5f20\u6d41\u7a0b\u56fe\u7ee7\u7eed\u5de5\u4f5c\uff1a \u5728\u8fdb\u4e00\u6b65\u8ba8\u8bba\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u7b80\u5355\u89e3\u91ca\u4e00\u4e0b\u57df\u540d\u8bc4\u5206\u7684\u6982\u5ff5\u3002 \u57df\u540d\u8bc4\u5206\uff08DR\uff09 \u6839\u636e\u7f51\u7ad9\u7684\u5916\u94fe\u60c5\u51b5\u6765\u8861\u91cf\u5b83\u7684\u6743\u5a01\u5ea6\u3002\u8303\u56f4\u5728 0 \u5230 100 \u4e4b\u95f4\u3002\u901a\u5e38\u6765\u8bf4\uff0c\u8fd9\u4e2a\u6570\u503c\u8d8a\u9ad8\uff0c\u7f51\u7ad9\u7684\u6743\u5a01\u5ea6\u5c31\u8d8a\u9ad8\u3002 \u8fd9\u662f\u6211\u4eec\u6d41\u7a0b\u7684\u4e00\u90e8\u5206\uff0c\u56e0\u4e3a\u6211\u4eec\u8981\u627e\u7684\u662f\u4e00\u4e2a\u5168\u65b0\u6216\u8005\u76f8\u5bf9\u8f83\u65b0\u7684\u7f51\u7ad9\u80fd\u591f\u53d6\u5f97\u6392\u540d\u7684\u5173\u952e\u8bcd\uff0c\u8fd9\u6837\u7684\u7f51\u7ad9\u7684\u6743\u5a01\u5ea6\u5f80\u5f80\u8f83\u4f4e\u3002\u5982\u679c\u5df2\u7ecf\u6709\u4f4e\u6743\u5a01\u5ea6\u7684\u7f51\u7ad9\u83b7\u5f97\u4e86\u6392\u540d\uff0c\u8fd9\u5c31\u9884\u793a\u7740\u6211\u4eec\u7684\u7f51\u7ad9\u4e5f\u80fd\u83b7\u5f97\u6392\u540d\u3002 \u8fd9\u91cc\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u5173\u952e\u8bcd\u793a\u4f8b\uff1a \u6807\u8bb0\u51fa\u7684\u7f51\u9875\u6709 4 \u4e2a\u6307\u5165\u57df\u540d\uff0c\u6bcf\u4e2a\u6708\u83b7\u5f97\u6570\u767e\u4e2a\u6765\u81ea\u7f8e\u56fd\u7684\u641c\u7d22\u6d41\u91cf\uff0c\u5e76\u4e14\u5904\u4e8e\u4e00\u4e2a\u70ed\u95e8\u7684\u3001\u4f4e\u6743\u5a01\u5ea6\uff08DR\uff09\u7684\u7f51\u7ad9\u4e4b\u4e0a\u3002 \u8fd9\u91cc\u6709\u4e00\u4e2a\u4e0d\u592a\u597d\u7684\u5173\u952e\u8bcd\u793a\u4f8b\uff1a \u867d\u7136\u641c\u7d22\u7ed3\u679c\u4e2d\u6709\u51e0\u4e2a\u9875\u9762\u6765\u81ea\u6307\u5165\u57df\u540d\u8f83\u5c11\u7684\u4f4e\u6743\u5a01\u5ea6\u5229\u57fa\u7f51\u7ad9\uff0c\u4f46\u662f\u4ed6\u4eec\u90fd\u6ca1\u6709\u80fd\u6bcf\u4e2a\u6708\u83b7\u5f97\u4e00\u5b9a\u91cf\u7684\u641c\u7d22\u8bbf\u95ee\u91cf\u3002 \u4e0b\u56fe\u5c55\u793a\u4e86\u53d1\u73b0\u4f18\u80dc\u5173\u952e\u8bcd\u540e\u5982\u4f55\u5c06\u4ed6\u4eec\u6dfb\u52a0\u81f3\u5173\u952e\u8bcd\u5217\u8868\u3002 \u4e00\u76f4\u8fd9\u6837\u505a\uff0c\u76f4\u5230\u4f60\u627e\u5230 25~50 \u4e2a\u5173\u952e\u8bcd\u3002 B. \u627e\u5230\u4ea7\u54c1\u8bc4\u6d4b\u5173\u952e\u8bcd \u00b6 \u50cf \u201caeropress review\u201d\uff08\u201c\u7231\u4e50\u538b\u8bc4\u6d4b\u201d\uff09\u548c \u201cbaratza virtuoso \u8bc4\u6d4b\u201d \u8fd9\u6837\u7684\u8bcd\u5c31\u662f\u4ea7\u54c1\u8bc4\u6d4b\u5173\u952e\u8bcd\u3002 \u5c3d\u7ba1\u6bcf\u4e2a\u7ec6\u5206\u5e02\u573a\u7684\u60c5\u51b5\u90fd\u4e0d\u540c\uff0c\u8fd9\u4e9b\u5173\u952e\u8bcd\u7684\u6d41\u91cf\u6f5c\u529b\u9c9c\u6709\u80fd\u4e0e\u4ea7\u54c1\u7efc\u8ff0\u5173\u952e\u8bcd\u5339\u654c\u7684\u3002\u4f60\u53ef\u80fd\u53ea\u80fd\u627e\u5230\u5c11\u6570\u51e0\u4e2a\u503c\u5f97\u53bb\u505a\u6392\u540d\u7684\u8bc4\u6d4b\u5173\u952e\u8bcd\u3002 \u90a3\u4f55\u5fc5\u8fd8\u8981\u4e3a\u4ed6\u4eec\u8d39\u5fc3\u5462\uff1f \u8fd9\u4e2a\u4e3b\u8981\u539f\u56e0\uff1a \u5c3d\u7ba1\u8fd9\u4e9b\u8bcd\u7684\u6d41\u91cf\u6f5c\u529b\u4e0d\u662f\u5341\u5206\u5de8\u5927\uff0c\u4f46\u662f\u8981\u83b7\u5f97\u8fd9\u4e9b\u5173\u952e\u8bcd\u8f83\u9ad8\u7684\u6392\u540d\u76f8\u5bf9\u7b80\u5355\uff1b \u4ea7\u54c1\u8bc4\u6d4b\u53ef\u4ee5\u52a9\u529b\u4ea7\u54c1\u7efc\u8ff0\u7684SEO\uff08\u7a0d\u540e\u8be6\u8ff0\uff09\u3002 \u4e3a\u4e86\u627e\u51fa\u8fd9\u4e9b\u5173\u952e\u8bcd\uff0c\u4f60\u9700\u8981\u5728\u201c\u6240\u6709\u5173\u952e\u8bcd\u201d\u62a5\u544a\u4e2d\u52a0\u5165\u4ee5\u4e0b\u8fc7\u6ee4\u6761\u4ef6\uff1a \u5305\u542b\uff1a \u201creview\u201d \u5173\u952e\u8bcd\u96be\u5ea6 \uff1a<=10 \u641c\u7d22\u91cf\uff1a >=200 \u4ee5\u4e0b\u662f\u6211\u4eec\u7684\u5496\u5561\u4f8b\u5b50\u663e\u793a\u7684\u7ed3\u679c\uff1a \u8fd9\u4e9b\u5e76\u4e0d\u90fd\u662f\u8bc4\u6d4b\u7c7b\u7684\u5173\u952e\u8bcd\uff0c\u4f46\u662f\u4f60\u53ef\u4ee5\u8f7b\u6613\u53d1\u73b0\u4ed6\u4eec\u3002 \u5bf9\u4e8e\u90a3\u4e9b\u6709\u610f\u4e49\u7684\u5173\u952e\u8bcd\uff0c\u4f60\u53ef\u4ee5\u6267\u884c\u4e0a\u9762\u7684\u6d41\u7a0b\u56fe\uff0c\u5c06\u4f18\u80dc\u7684\u5173\u952e\u8bcd\u52a0\u5165\u5173\u952e\u8bcd\u5217\u8868\u3002 C. \u627e\u51fa\u535a\u5ba2\u5173\u952e\u8bcd \u00b6 \u5927\u591a\u6570\u4e9a\u9a6c\u900a\u8054\u76df\u5ba2\u7f51\u7ad9\u90fd\u4e0d\u53ea\u53d1\u5e03\u201c\u8d5a\u94b1\u201d\u5e16\u6587\u3002\u4ed6\u4eec\u8fd8\u53d1\u5e03\u535a\u5ba2\u6587\u7ae0\u548c\u5176\u4ed6\u4fe1\u606f\u7c7b\u5185\u5bb9\u3002 \u6211\u4eec\u6765\u770b\u4e00\u4e0b homegrounds.co\uff1a \u4ed6\u4eec\u7f51\u7ad9\u6709\u4e00\u6574\u7248\u5185\u5bb9\u4e13\u95e8\u63d0\u4f9b\u6709\u7528\u7684\u51b2\u6ce1\u6307\u5357\u3002 \u8fd9\u6837\u505a\u662f\u6709\u610f\u4e49\u7684\uff0c\u539f\u56e0\u6211\u4eec\u4f1a\u5728\u540e\u9762\u8fdb\u884c\u8ba8\u8bba\u3002\u73b0\u5728\uff0c\u6211\u4eec\u60f3\u8981\u627e\u51fa\u4e00\u4e9b\u4fe1\u606f\u7c7b\u7684\u5173\u952e\u8bcd\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u56f4\u7ed5\u8fd9\u4e9b\u5173\u952e\u8bcd\u6765\u5199\u4f5c\u4e00\u4e9b\u535a\u5ba2\u6587\u7ae0\u548c\u6307\u5357\u3002 \u4e3a\u4e86\u627e\u51fa\u8fd9\u4e9b\u5173\u952e\u8bcd\uff0c\u9700\u8981\u5728\u201c\u6240\u6709\u5173\u952e\u8bcd\u201d\u62a5\u544a\u4e2d\u52a0\u8fd9\u4e9b\u8fc7\u6ee4\u6761\u4ef6\uff1a \u5305\u542b\uff1a who, what, when, where, why, how, guide, tutorial, ideas, tips \u641c\u7d22\u91cf\uff1a >=500 \u5bfb\u627e\u90a3\u4e9b\u4e0e\u4f60\u4f1a\u5728\u7efc\u8ff0\u91cc\u8bc4\u6d4b\u7684\u4ea7\u54c1\u5bc6\u5207\u8054\u7cfb\u7684\u8bdd\u9898\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u5496\u5561\u662f\u4f60\u7684\u7ec6\u5206\u5e02\u573a\uff0c\u90a3\u4e48\u50cf\u201chow to use a frech press\u201d\uff08\u201c\u5982\u4f55\u4f7f\u7528\u6cd5\u5f0f\u6ee4\u538b\u58f6\u201d\uff09\u548c\u201chow to make coffee\u201d\uff08\u201c\u5982\u4f55\u716e\u5496\u5561\u201d\uff09\u8fd9\u6837\u7684\u8bdd\u9898\u5c31\u5f88\u6709\u610f\u4e49\u4e86\uff0c\u56e0\u4e3a\u4f60\u51e0\u4e4e\u80af\u5b9a\u4f1a\u8bc4\u6d4b\u6cd5\u5f0f\u6ee4\u538b\u58f6\u548c\u5496\u5561\u673a\u3002 \u8fd9\u4e2a\u90e8\u5206\u4e0d\u8981\u60f3\u592a\u591a\u3002\u53ea\u9700\u8981\u5728\u5217\u8868\u4e2d\u6dfb\u52a0 20 \u5230 50 \u4e2a\u5173\u952e\u8bcd\uff0c\u5c31\u53ef\u4ee5\u7ee7\u7eed\u4e86\u3002 3. \u521b\u5efa\u7c7b\u578b\u201c\u6b63\u786e\u201d\u7684\u5185\u5bb9 \u00b6 \u5047\u8bbe\u4f60\u5df2\u7ecf\u9009\u5b9a\u4e86\u57df\u540d\uff0c\u505a\u597d\u4e86\u7f51\u7ad9\u3002\u662f\u65f6\u5019\u5f00\u59cb\u5199\u4f5c\u548c\u53d1\u5e03\u4e00\u4e9b\u5185\u5bb9\u4e86\u3002 \u5728\u8fd9\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u5c06\u8ba8\u8bba\u5982\u4f55\u521b\u5efa\u4ee5\u4e0b\u4e09\u79cd\u7c7b\u578b\u7684\u5185\u5bb9\uff1a \u4ea7\u54c1\u7efc\u8ff0 \u4ea7\u54c1\u8bc4\u6d4b \u535a\u5ba2\u6587\u7ae0 \u8ba9\u6211\u4eec\u4ece\u6700\u91cd\u8981\u7684\u5f00\u59cb\u3002 A. \u4ea7\u54c1\u7efc\u8ff0 \u00b6 \u8bf7\u9075\u5faa\u4ee5\u4e0b\u56db\u4e2a\u6b65\u9aa4\uff1a \u627e\u51fa\u9700\u8981\u5305\u542b\u7684\u4ea7\u54c1 \u627e\u51fa\u4eba\u4eec\u5173\u5fc3\u7684\u5185\u5bb9 \u627e\u51fa\u6700\u597d\u7684\u4ea7\u54c1 \u5199\u8d77\u6765 1. \u627e\u51fa\u9700\u8981\u5305\u542b\u7684\u4ea7\u54c1 \u00b6 \u4ea7\u54c1\u7efc\u8ff0\u4f1a\u5bf9\u591a\u4e2a\u4ea7\u54c1\u8fdb\u884c\u8bc4\u6d4b\uff0c\u4f46\u662f\u4f60\u5982\u4f55\u77e5\u9053\u5e94\u8be5\u8bc4\u6d4b\u54ea\u4e9b\u4ea7\u54c1\u5462\uff1f \u8fd9\u91cc\u4ecb\u7ecd\u4e00\u4e9b\u65b9\u6cd5\uff1a \u901b\u4e9a\u9a6c\u900a \u00b6 \u9762\u5bf9\u73b0\u5b9e\u5427\uff1a\u4e9a\u9a6c\u900a\u5728\u63a8\u8350\u6700\u597d\u7684\u4ea7\u54c1\u65b9\u6cd5\u505a\u5f97\u76f8\u5f53\u4e0d\u9519\u3002\u770b\u770b \u201ccoffee grinder\u201d \u8fd9\u4e2a\u5173\u952e\u8bcd\u7684\u524d\u51e0\u4e2a\u641c\u7d22\u7ed3\u679c\u5c31\u77e5\u9053\u4e86\u3002 \u8fd9\u4e9b\u4ea7\u54c1\u5750\u62e5\u6210\u767e\u4e0a\u5343\u6761\u8bc4\u8bba\uff0c\u4e14\u6ca1\u6709\u4e00\u4e2a\u4ea7\u54c1\u7684\u8bc4\u5206\u4f4e\u4e8e\u56db\u661f\u3002 \u56e0\u6b64\u4e00\u79cd\u4e86\u89e3\u4f60\u60f3\u8981\u4e86\u89e3\u7684\u4ea7\u54c1\u7684\u597d\u529e\u6cd5\u662f\u5728\u4e9a\u9a6c\u900a\u641c\u7d22\u8fd9\u7c7b\u4ea7\u54c1\u3002 \u67e5\u770b\u9ad8\u6392\u540d\u9875\u9762 \u00b6 \u901b\u4e9a\u9a6c\u900a\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u8d77\u70b9\uff0c\u4f46\u5b83\u53ef\u80fd\u4f1a\u8ba9\u4f60\u4e0d\u77e5\u6240\u63aa\u3002\u53e6\u5916\u4e00\u79cd\u6bd4\u8f83\u597d\u7684\u7b56\u7565\u662f\u5728\u6392\u540d\u9760\u524d\u7684\u9875\u9762\u4e2d\u5bfb\u627e\u5171\u540c\u7684\u5185\u5bb9\u3002 \u4f8b\u5982\uff0c\u201cbest coffee grinder\u201d \u8fd9\u4e2a\u5173\u952e\u8bcd\u6392\u540d\u9760\u524d\u7684\u7ed3\u679c\u4e2d\uff0c\u6709\u4e09\u4e2a\u90fd\u5c06 Baratza Encore Conical \u7814\u78e8\u673a\u5217\u4e3a\u6700\u597d\u7684\u4e4b\u4e00\uff1a \u4f60\u4e0d\u9700\u8981\u4efb\u4f55\u8fc7\u4eba\u4e4b\u5904\u90fd\u80fd\u77e5\u9053\u8fd9\u6b3e\u4ea7\u54c1\u503c\u5f97\u51fa\u73b0\u5728\u4e00\u7bc7\u4ea7\u54c1\u7efc\u8ff0\u4e2d\u3002 2. \u627e\u51fa\u4eba\u4eec\u5173\u5fc3\u7684\u5185\u5bb9 \u00b6 \u4e3a\u4e86\u521b\u5efa\u4e00\u7bc7\u6709\u7528\u7684\u4ea7\u54c1\u7efc\u8ff0\uff0c\u4f60\u9996\u5148\u9700\u8981\u4e86\u89e3\u54ea\u4e9b\u4ea7\u54c1\u5c5e\u6027\u5bf9\u4e70\u5bb6\u6765\u8bf4\u662f\u91cd\u8981\u7684\u3002 \u8fd9\u91cc\u6709\u4e00\u4e9b\u65b9\u6cd5\u53ef\u4ee5\u6765\u5e2e\u52a9\u4f60\u786e\u8ba4\uff1a \u6d4f\u89c8\u4e9a\u9a6c\u900a\u4ea7\u54c1\u8bc4\u8bba \u00b6 \u6d4f\u89c8\u51e0\u4e2a\u4f60\u53ef\u80fd\u4f1a\u653e\u8fdb\u6587\u7ae0\u4e2d\u7684\u4ea7\u54c1\uff0c\u67e5\u770b\u7528\u6237\u8bc4\u8bba\u3002\u4f60\u5f88\u5feb\u5c31\u4f1a\u660e\u767d\u54ea\u4e9b\u4e1c\u897f\u5bf9\u4e70\u5bb6\u6765\u8bf4\u662f\u91cd\u8981\u7684\u3002 \u4f8b\u5982\uff0c\u67e5\u770b\u4e0b\u9762\u7684\u8bc4\u8bba\uff0c\u53ea\u9700\u8981\u51e0\u79d2\u949f\u4f60\u5c31\u53ef\u4ee5\u77e5\u9053\u7814\u78e8\u7c92\u5ea6\u3001\u6e05\u6d01\u7b80\u5355\u548c\u4fbf\u4e8e\u643a\u5e26\u662f\u4eba\u4eec\u5728\u9009\u8d2d\u4e00\u53f0\u624b\u52a8\u5496\u5561\u7814\u78e8\u673a\u65f6\u4f1a\u8003\u8651\u7684\u91cd\u8981\u56e0\u7d20\uff1a \u5982\u679c\u4f60\u4e0d\u559c\u6b22\u6d4f\u89c8\u6bcf\u4e00\u5219\u8bc4\u8bba\uff0c\u53ef\u4ee5\u67e5\u770b \u201cRead reviews that mention\u201d\uff08\u201c\u8bc4\u8bba\u63d0\u53ca\u7684\u2026\u2026\u201d\uff09\u677f\u5757\u7684\u6807\u7b7e\u3002 \u4e9a\u9a6c\u900a\u4ece\u8bc4\u8bba\u4e2d\u63d0\u53d6\u8fd9\u4e9b\u4fe1\u606f\uff0c\u8fd9\u4e9b\u4fe1\u606f\u5f80\u5f80\u53ef\u4ee5\u63d0\u793a\u4eba\u4eec\u6240\u5173\u5fc3\u7684\u4e1c\u897f\u3002 \u67e5\u770b\u6392\u540d\u9760\u524d\u7684\u9875\u9762 \u00b6 \u6d4f\u89c8\u4e00\u4e9b\u6392\u540d\u9760\u524d\u7684\u9875\u9762\uff0c\u5bfb\u627e\u5171\u540c\u70b9\u3002 \u4f8b\u5982\uff0c\u8fd9\u91cc\u4e24\u7bc7\u5496\u5561\u7814\u78e8\u673a\u7684\u7efc\u8ff0\u6587\u7ae0\u90fd\u63d0\u5230\u4e86\u7814\u78e8\u5747\u5300\u5ea6\uff1a \u5f00\u5c55\u5185\u5bb9\u5dee\u8ddd\u673a\u4f1a\u5206\u6790 \u00b6 \u5185\u5bb9\u5dee\u8ddd\u673a\u4f1a\u5206\u6790\u53ef\u4ee5\u5c55\u793a\u591a\u4e2a\u9875\u9762\u5171\u6709\u7684\u6392\u540d\u5173\u952e\u8bcd\u3002 \u901a\u8fc7\u5206\u6790\u4e4b\u4e8e\u4f60\u7684\u76ee\u6807\u5173\u952e\u8bcd\u6392\u540d\u9760\u524d\u7684\u9875\u9762\uff0c\u4f60\u53ef\u4ee5\u8fdb\u4e00\u6b65\u4e86\u89e3\u4eba\u4eec\u611f\u5174\u8da3\u7684\u5185\u5bb9\u3002 \u5f00\u5c55\u5206\u6790\u65f6\uff0c\u53ea\u9700\u8981\u5c06\u6392\u540d\u9760\u524d\u7684\u94fe\u63a5\u7c98\u8d34\u8fdb Ahrefs \u7684\u5185\u5bb9\u5dee\u8ddd\u673a\u4f1a\u5206\u6790\u5de5\u5177 \u4e2d\u3002 \u5982\u679c\u6211\u4eec\u5c31 \u201cbest coffee grinder\u201d \u8fd9\u4e2a\u5173\u952e\u8bcd\u5206\u6790\u4e09\u4e2a\u6392\u540d\u9760\u524d\u7684\u9875\u9762\uff0c\u4f1a\u6ce8\u610f\u5230\u4ed6\u4eec\u540c\u65f6\u8fd8\u4e4b\u4e8e\u4e0e\u5496\u5561\u7814\u78e8\u673a\u79cd\u7c7b\u76f8\u5173\u7684\u5173\u952e\u8bcd\u6709\u6392\u540d\uff0c\u5305\u62ec\uff1a\u76d8\u5f0f\u78e8\u8c46\u673a\uff08burr grinder\uff09\u3001\u624b\u52a8\u5496\u5561\u7814\u78e8\u673a\uff08manual coffee grinder\uff09\u3001\u624b\u6447\u5496\u5561\u7814\u78e8\u673a\uff08hand grinder\uff09\u3001\u7535\u52a8\u5496\u5561\u7814\u78e8\u673a\uff08electric grinder\uff09\u7b49\u3002 \u6211\u4eec\u8fd8\u6ce8\u610f\u5230\u4eba\u4eec\u4f1a\u6839\u636e\u5496\u5561\u79cd\u7c7b\u6765\u641c\u7d22\u6700\u597d\u7684\u7814\u78e8\u673a\uff0c\u5982\uff1a\u6d53\u7f29\u5496\u5561\uff08espresso\uff09\uff0c\u6cd5\u5f0f\u6ee4\u538b\u58f6\uff08french press\uff09\u5496\u5561\u7b49\u3002 \u4ea7\u54c1\u7684\u505a\u5de5\u548c\u6750\u8d28\u4f3c\u4e4e\u4e5f\u5f88\u91cd\u8981\u3002 \u6211\u4eec\u5728\u64b0\u5199\u6587\u7ae0\u3001\u8c03\u7814\u6216\u8005\u6d4b\u8bd5\u4ea7\u54c1\u7684\u65f6\u5019\u4f1a\u8003\u8651\u8fd9\u4e9b\u56e0\u7d20\u3002 3. \u627e\u51fa\u6700\u597d\u7684\u4ea7\u54c1 \u00b6 \u5927\u591a\u6570\u521a\u5f00\u59cb\u505a\u4e9a\u9a6c\u900a\u8054\u76df\u5ba2\u7f51\u7ad9\u7684\u4eba\u90fd\u4e0d\u4f1a\u81ea\u5df1\u53bb\u6d4b\u8bd5\u4ea7\u54c1\u3002\u76f8\u53cd\uff0c\u4ed6\u4eec\u4f1a\u5728\u7ebf\u7814\u7a76\u4ea7\u54c1\uff0c\u4ece\u5176\u4ed6\u8bc4\u6d4b\u4e2d\u63d0\u53d6\u89c2\u70b9\u3002 \u5c3d\u7ba1\u4f60\u53ef\u4ee5\u8fd9\u6837\u505a\uff0c\u4f46\u662f\u6211\u4eec\u5e76\u4e0d\u5efa\u8bae\uff0c\u539f\u56e0\u6709\u4e8c\uff1a \u6d4b\u8bd5\u4ea7\u54c1\u53ef\u4ee5\u5e2e\u52a9\u4f60\u4ece\u4eba\u7fa4\u4e2d\u8131\u9896\u800c\u51fa \uff0c\u5efa\u7acb E\u2011A-T \uff0c\u5e76\u4f7f \u5916\u94fe\u5efa\u8bbe \u53d8\u5f97\u66f4\u5bb9\u6613\u3002 \u7f51\u7ad9\u4e0a\u5145\u65a5\u7740\u201c\u6211\u4e5f\u662f\u201d\u7684\u8054\u76df\u5e16\u6587 \uff0c\u4ed6\u4eec\u4ece\u5176\u4ed6\u6587\u7ae0\u4e2d\u6458\u53d6\u89c2\u70b9\uff0c\u5bf9\u641c\u7d22\u8005\u6765\u8bf4\u8fd9\u4e9b\u5185\u5bb9\u51e0\u4e4e\u6ca1\u6709\u7528\u5904\u3002 \u5982\u679c\u4f60\u60f3\u521b\u5efa\u4e00\u4e2a\u957f\u671f\u6709\u7528\u7684\u7f51\u7ad9\uff0c\u5e76\u4e14\u80fd\u591f\u8d1f\u62c5\u5f97\u8d77\uff0c\u90a3\u4e48\u5bf9\u4ea7\u54c1\u8fdb\u884c\u771f\u6b63\u7684\u8bc4\u6d4b\u662f\u503c\u5f97\u7684\u3002 \u4ee5\u4e0b\u662f\u4e00\u4e9b\u964d\u4f4e\u6210\u672c\u7684\u65b9\u6cd5\uff1a \u4ece\u4fbf\u5b9c\u7684\u4ea7\u54c1\u5f00\u59cb\u3002 \u81ea\u5df1\u6d4b\u8bd5 10 \u53f0 500 \u7f8e\u5143\u7684\u5496\u5561\u673a\u53ef\u4e0d\u4fbf\u5b9c\uff0c\u4f46\u662f 10 \u53f0 30 \u7f8e\u91d1\u7684\u5496\u5561\u7814\u78e8\u673a\u53ef\u80fd\u662f\u53ef\u884c\u7684\u3002\u6d4f\u89c8\u4f60\u7684\u5173\u952e\u8bcd\u5217\u8868\uff0c\u4ece\u6210\u672c\u8f83\u4f4e\u7684\u4ea7\u54c1\u5f00\u59cb\u6d4b\u8bd5\u3002 \u4e00\u65e6\u4f60\u5b8c\u6210\u4e86\u6d4b\u8bd5\uff0c\u5c31\u628a\u4ed6\u4eec\u5356\u6389\u3002 \u6ca1\u6709\u4eba\u4f1a\u9700\u8981 10 \u53f0\u5496\u5561\u7814\u78e8\u673a\u3002\u5b8c\u6210\u8bc4\u6d4b\u540e\uff0c\u4f60\u53ef\u4ee5\u628a\u6302\u5230 eBay \u4e0a\u3002\u5373\u4f7f\u4f60\u635f\u5931\u4e86\u539f\u4ef7\u7684 \u00bc\uff0c\u8fd9\u5bf9\u6709\u7528\u7684\u72ec\u7279\u5185\u5bb9\u6765\u8bf4\u53ea\u662f\u4e00\u7b14\u5c0f\u94b1\u3002 \u8981\u6c42\u5382\u5bb6\u8bc4\u6d4b\u4ea7\u54c1\u3002 \u4e0d\u8981\u5bf9\u6b64\u62b1\u592a\u5927\u5e0c\u671b\u3002\u7279\u522b\u662f\u4f60\u521a\u8fdb\u5165\u8fd9\u4e2a\u9886\u57df\u8fd8\u6ca1\u6709\u540d\u6c14\u7684\u65f6\u5019\u3002 4. \u5199\u8d77\u6765 \u00b6 \u4ea7\u54c1\u7efc\u8ff0\u548c\u666e\u901a\u7684\u535a\u5ba2\u6587\u7ae0\u4e0d\u4e00\u6837\u3002\u4f60\u9700\u8981\u5373\u65f6\u5411\u8bfb\u8005\u63d0\u4f9b\u4ed6\u4eec\u60f3\u8981\u7684\u4fe1\u606f\u3002 \u5728\u4ea7\u54c1\u7efc\u8ff0\u65b9\u9762\uff0c\u4f60\u9700\u8981\u76f4\u63a5\u544a\u8bc9\u8bfb\u8005\u6700\u7ec8\u83b7\u80dc\u7684\u662f\u54ea\u6b3e\u4ea7\u54c1\u3002 \u57fa\u4e8e\u6b64\uff0c\u4f60\u5e94\u8be5\u6309\u7167\u5012\u91d1\u5b57\u5854\u683c\u5f0f\u521b\u5efa\u4e00\u5219\u5217\u8868\u5e16\u6587\u3002 \u70b9\u51fb \u8fd9\u91cc \u4e86\u89e3\u66f4\u591a\u4fe1\u606f\u3002 B. \u8bc4\u6d4b\u5e16\u6587 \u00b6 \u4e0a\u9762\u5927\u591a\u6570\u5173\u4e8e\u4ea7\u54c1\u7efc\u8ff0\u7684\u5efa\u8bae\u90fd\u9002\u7528\u4e8e\u5355\u72ec\u7684\u4ea7\u54c1\u8bc4\u6d4b\u3002\u4f60\u9700\u8981\u4e86\u89e3\u4eba\u4eec\u5728\u610f\u548c\u611f\u5174\u8da3\u7684\u5185\u5bb9\uff0c\u4f60\u8fd8\u9700\u8981\u628a\u4ea7\u54c1\u7814\u7a76\u900f\u5f7b\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u901a\u5e38\u6700\u597d\u662f\u5728\u64b0\u5199\u4ea7\u54c1\u7efc\u8ff0\u7684\u540c\u65f6\u64b0\u5199\u5355\u72ec\u7684\u4ea7\u54c1\u8bc4\u6d4b\u3002 \u4e3a\u4ec0\u4e48\u5462\uff1f\u56e0\u4e3a\u5f53\u4f60\u5728\u64b0\u5199\u4ea7\u54c1\u7efc\u8ff0\u6587\u7ae0\u7684\u65f6\u5019\uff0c\u4f60\u5b9e\u9645\u4e0a\u662f\u5728\u540c\u65f6\u8bc4\u6d4b\u591a\u4e2a\u4ea7\u54c1\u3002\u53ea\u4e0d\u8fc7\u4ea7\u54c1\u7efc\u8ff0\u5bf9\u6bcf\u4e00\u4e2a\u4ea7\u54c1\u8fdb\u884c\u4e86\u603b\u7ed3\uff0c\u800c\u4e0d\u662f\u8ba8\u8bba\u7ec6\u8282\u3002 \u4f46\u5173\u952e\u70b9\u662f\uff1a\u4f60\u9700\u8981\u901a\u8fc7\u8c03\u7814\u4ea7\u54c1\u6765\u521b\u5efa\u4ea7\u54c1\u7efc\u8ff0\uff0c\u56e0\u6b64\u4f60\u53ef\u80fd\u4e5f\u4f1a\u5c06\u8c03\u7814\u7ed3\u679c\u53d1\u5e03\u5728\u5355\u72ec\u7684\u4ea7\u54c1\u8bc4\u6d4b\u5e16\u6587\u4e2d\u3002 \u8fd9\u6837\u505a\u7684\u610f\u4e49\u8fd8\u6709\u4ee5\u4e0b\u5176\u4ed6\u51e0\u70b9\u539f\u56e0\uff1a \u8bc4\u8bba\u662f\u76f8\u5bf9\u7684\u3002 \u5047\u8bbe\u4f60\u8bc4\u6d4b\u4e86\u4e00\u6b3e\u5496\u5561\u7814\u78e8\u673a\u3002\u9664\u975e\u4f60\u628a\u5b83\u548c\u5176\u4ed6\u7c7b\u4f3c\u4ea7\u54c1\u653e\u5728\u4e00\u8d77\u8c03\u7814\u548c\u6d4b\u8bd5\uff0c\u5426\u5219\u4f60\u600e\u4e48\u77e5\u9053\u8fd9\u6b3e\u4ea7\u54c1\u6709\u591a\u597d\u6216\u8005\u591a\u5dee\u5462\uff1f\u4f60\u53ef\u80fd\u5f88\u5bb9\u6613\u5730\u5c31\u7ed9\u5b83\u6253\u4e2a\u4e94\u661f\uff0c\u5374\u53d1\u73b0\u5b83\u6bd4\u5e02\u9762\u4e0a\u5176\u4ed6\u4ef7\u683c\u76f8\u5f53\u7684\u4ea7\u54c1\u5dee\u5f88\u591a\u3002 \u5bf9SEO \u53ef\u80fd\u6709\u5e2e\u52a9\u3002 \u53d1\u5e03\u53ef\u4ee5\u56de\u6eaf\u5230\u5df2\u6709\u7684\u4ea7\u54c1\u7efc\u8ff0\u7684\u5355\u72ec\u7684\u4ea7\u54c1\u8bc4\u6d4b\u5e16\u6587\u53ef\u80fd\u5bf9 SEO\u6709\u5229\u3002\uff08\u4e0b\u4e00\u7ae0\u8282\u5c06\u5bf9\u6b64\u4f5c\u8fdb\u4e00\u6b65\u8ba8\u8bba\uff09 \u4fbf\u4e8e\u683c\u5f0f\u5316/\u6a21\u677f\u5316\u3002 \u4e3a\u7efc\u8ff0\u6587\u7ae0\u8c03\u7814\u4ea7\u54c1\u53ef\u4ee5\u544a\u8bc9\u4f60\u4eba\u4eec\u7684\u5173\u6ce8\u70b9\u5728\u54ea\u91cc\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u77e5\u8bc6\u6765\u4e3a\u5355\u72ec\u7684\u4ea7\u54c1\u8bc4\u6d4b\u5e16\u6587\u521b\u5efa\u6a21\u677f\u3002 \u6211\u4eec\u6765\u8ba8\u8bba\u4e00\u4e0b\u6700\u540e\u4e00\u70b9\u3002 \u5982\u679c\u4f60\u5df2\u7ecf\u521b\u5efa\u4e86\u5173\u4e8e\u6700\u597d\u7684\u5496\u5561\u7814\u78e8\u673a\u7684\u4ea7\u54c1\u7efc\u8ff0\u6587\u7ae0\uff0c\u4f60\u5c31\u5df2\u7ecf\u77e5\u9053\u7814\u78e8\u7684\u5747\u5300\u5ea6\u548c\u6613\u7528\u6027\u662f\u4eba\u4eec\u5173\u5fc3\u7684\u4ea7\u54c1\u5c5e\u6027\u3002 \u77e5\u9053\u4e86\u8fd9\u4e00\u70b9\uff0c\u4f60\u5c31\u53ef\u4ee5\u5f88\u8f7b\u677e\u5730\u4e3a\u8fd9\u4e2a\u7c7b\u76ee\u7684\u6240\u6709\u4ea7\u54c1\u5236\u5b9a\u6d4b\u8bd5\u6837\u5f0f\u7684\u6a21\u677f\u3002\u4f60\u53ea\u9700\u8981\u5c06\u8fd9\u4e9b\u6307\u6807\u7528\u4f5c\u5b50\u6807\u9898\uff0c\u5e76\u5c31\u6bcf\u4e2a\u5c5e\u6027\u4e3a\u6bcf\u4e2a\u4ea7\u54c1\u6309 1\u20135 \u6253\u5206\u5373\u53ef\u3002 \u53ef\u4ee5\u53c2\u8003\u8fd9 \u4e24 \u7bc7 \u6587\u7ae0\u3002 \u56e0\u4e3a\u4f60\u5df2\u7ecf\u5728\u6bcf\u4e2a\u4ea7\u54c1\u8bc4\u6d4b\u4e2d\u4f7f\u7528\u4e86\u76f8\u540c\u7684\u683c\u5f0f\uff0c\u5e76\u4e14\u5728\u521b\u4f5c\u4ea7\u54c1\u7efc\u8ff0\u65f6\u8fdb\u884c\u4e86\u8c03\u7814\uff0c\u521b\u5efa\u8fd9\u4e9b\u5e16\u6587\u5e94\u8be5\u4e0d\u4f1a\u82b1\u8d39\u4f60\u592a\u591a\u7684\u65f6\u95f4\u3002 C. \u535a\u5ba2\u6587\u7ae0 \u00b6 \u64b0\u5199\u4f18\u8d28\u7684\u535a\u5ba2\u6587\u7ae0\u672c\u8eab\u53c8\u5b8c\u5168\u662f\u53e6\u5916\u4e00\u4e2a\u8bdd\u9898\u4e86\u3002 \u5e78\u8fd0\u7684\u662f\uff0c\u6211\u4eec\u6709\u8bb8\u591a\u5173\u4e8e\u5982\u4f55\u64b0\u5199\u535a\u5ba2\u6587\u7ae0\u7684\u6307\u5357\uff0c\u6240\u4ee5\u8fd9\u91cc\u6211\u5c31\u53ea\u653e\u4e0a\u8fd9\u4e9b\u6587\u7ae0\u7684\u94fe\u63a5\uff0c\u800c\u4e0d\u8d58\u8ff0\u4e86\u3002 \u5ef6\u4f38\u9605\u8bfb 9 \u4e2a\u6b65\u9aa4\u64b0\u5199\uff08\u4eba\u4eec\u771f\u7684\u60f3\u8981\u53bb\u8bfb\u7684\uff09\u535a\u5ba2\u6587\u7ae0\uff08\u82f1\u6587\uff09 \u5b9e\u6218\u6709\u6548\u768417\u4e2a\u535a\u5ba2\u8fd0\u8425\u6280\u5de7\uff08\u65b0\u624b\u5fc5\u5907\uff09 \u4ec0\u4e48\u662f SEO \u5185\u5bb9\uff1f\u5982\u4f55\u64b0\u5199\u53ef\u5f97\u6392\u540d\u7684\u5185\u5bb9\uff08\u82f1\u6587\uff09 \u5982\u4f55\u5c06\u4f60\u7684\u5185\u5bb9\u521b\u4f5c\u5de5\u4f5c\u5916\u5305\u7ed9\u81ea\u7531\u804c\u4e1a\u5199\u624b\uff084 \u4e2a\u6b65\u9aa4\uff09\uff08\u82f1\u6587\uff09 4. \u901a\u8fc7 SEO \u4e3a\u7f51\u7ad9\u5f15\u6d41 \u00b6 SEO \u4e0d\u662f\u706b\u7bad\u79d1\u5b66\uff0c\u4f46\u6211\u4eec\u4e5f\u65e0\u6cd5\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u4ece\u5934\u5230\u5c3e\u8fdb\u884c\u603b\u7ed3\u3002\u5143\u7d20\u5b9e\u5728\u662f\u592a\u591a\u4e86\u3002 \u76f8\u53cd\uff0c\u6211\u4f1a\u5728\u8fd9\u91cc\u8ba8\u8bba\u4e24\u4e2a\u91cd\u8981\u7684\u65b9\u9762\uff0c\u7136\u540e\u63d0\u4f9b\u4e00\u4e9b\u6307\u5411\u8fd9\u4e2a\u535a\u5ba2 SEO \u6559\u7a0b\u7684\u94fe\u63a5\u3002 A. \u521b\u5efa\u5185\u5bb9\u4e2d\u5fc3 \u00b6 \u5185\u5bb9\u4e2d\u5fc3 \u662f\u5173\u4e8e\u7c7b\u4f3c\u4e3b\u9898\u7684\u76f8\u4e92\u94fe\u63a5\u7684\u5185\u5bb9\u96c6\u5408\u3002 \u4ed6\u4eec\u7531\u4ee5\u4e0b\u4e09\u90e8\u5206\u7ec4\u6210\uff1a \u4e2d\u5fc3\u9875\u9762/\u652f\u67f1\u5185\u5bb9\uff1a \u8fd9\u662f\u4e00\u4e2a\u5173\u4e8e\u5e7f\u6cdb\u4e3b\u9898\u7684\u9ad8\u9636\u6307\u5357\u3002 \u5b50\u9875\u9762/\u96c6\u7fa4\u5185\u5bb9\uff1a \u8fd9\u4e9b\u662f\u5173\u4e8e\u4e2d\u5fc3\u4e3b\u9898\u5404\u4e2a\u90e8\u5206\u7684\u6df1\u5ea6\u6307\u5357\u3002 \u8d85\u94fe\u63a5\uff1a \u4ed6\u4eec\u8054\u7ed3\u4e86\u4e2d\u5fc3\u9875\u9762\u548c\u5b50\u9875\u9762\u3002\u4e2d\u5fc3\u9875\u9762\u94fe\u5411\u4e86\u6240\u6709\u7684\u5b50\u9875\u9762\uff0c\u6bcf\u4e2a\u5b50\u9875\u9762\u53c8\u94fe\u56de\u4e86\u4e2d\u5fc3\u9875\u9762\u3002 \u5bf9\u4e8e\u4e9a\u9a6c\u900a\u8054\u76df\u5ba2\u7f51\u7ad9\u6765\u8bf4\uff0c\u521b\u5efa\u4e00\u4e2a\u4ee5\u4ea7\u54c1\u7efc\u8ff0\u6587\u7ae0\u4e3a\u4e2d\u5fc3\u9875\u9762\u3001\u4ea7\u54c1\u8bc4\u6d4b\u5e16\u6587\u4e3a\u5b50\u9875\u9762\u7684\u5185\u5bb9\u4e2d\u5fc3\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u7b56\u7565\u3002 \u4ece SEO \u7684\u89d2\u5ea6\u6765\u770b\uff0c\u8fd9\u6837\u505a\u6709\u51e0\u4e2a\u4e3b\u8981\u7684\u597d\u5904\u3002 \u9996\u5148\uff0c\u4ed6\u4eec\u4f1a\u5728\u201c\u8d5a\u94b1\u201d\u9875\u9762\u4e4b\u95f4\u751f\u6210\u66f4\u591a\u5bcc\u542b\u5173\u952e\u8bcd\u7684\u5185\u90e8\u94fe\u63a5\u3002\u56e0\u4e3a Google \u4f1a\u4f7f\u7528 \u951a\u6587\u672c \u6765\u7406\u89e3\u9875\u9762\u7684\u5185\u5bb9\uff0c\u6240\u4ee5\u8fd9\u6837\u505a\u5bf9\u6392\u540d\u6709\u5e2e\u52a9\u3002 Most links do provide a bit of additional context through their anchor text. At least they should, right\u203d \u2014 \ud83c\udf4c John \ud83c\udf4c (@JohnMu) November 23, 2017 \u5176\u6b21\uff0c\u7531\u4e8e \u4f69\u5947\u6392\u540d \u7b97\u6cd5\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u5185\u5bb9\u4e2d\u5fc3\u6240\u6709\u7684\u9875\u9762\u4e92\u76f8\u4ece\u53cd\u5411\u94fe\u63a5\u4e2d\u83b7\u76ca\u3002 \u5982\u4f55\u642d\u5efa\u5185\u5bb9\u4e2d\u5fc3\u5462\uff1f \u9009\u62e9\u4e00\u7bc7\u5185\u5bb9\u7efc\u8ff0\u6587\u7ae0\uff1b \u4e3a\u6bcf\u4e00\u6b3e\u63d0\u5230\u7684\u4ea7\u54c1\u6dfb\u52a0\u94fe\u63a5\uff1b \u4e3a\u4ea7\u54c1\u8bc4\u6d4b\u5e16\u6587\u6dfb\u52a0\u6307\u5411\u4ea7\u54c1\u7efc\u8ff0\u6587\u7ae0\u7684\u94fe\u63a5\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u4f60\u60f3\u56f4\u7ed5\u4e00\u7bc7\u5173\u4e8e \u201cbest coffee grinders\u201d \u7684\u4ea7\u54c1\u7efc\u8ff0\u6587\u7ae0\u521b\u5efa\u5185\u5bb9\u4e2d\u5fc3\u3002\u5982\u679c\u4f60\u5df2\u7ecf\u4e3a\u5217\u8868\u4e2d\u63d0\u5230\u7684\u67d0\u4e9b\u4ea7\u54c1\u64b0\u5199\u4e86\u8bc4\u6d4b\u5e16\u6587\uff0c\u53ea\u9700\u8981\u4ece\u4e2d\u5fc3\u9875\u9762\u94fe\u63a5\u5230\u4ed6\u4eec\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002 \u8fd9\u91cc\u6709\u4e00\u4e2a\u771f\u5b9e\u7684\u4f8b\u5b50\uff1a \u8fd9\u4efd\u6700\u597d\u7684\u5496\u5561\u7814\u78e8\u673a \u5217\u8868 \u6709\u4e00\u6b3e\u4ea7\u54c1\u662f Baratza Virtuoso Plus\u3002 \u5728\u7b80\u77ed\u7684\u63cf\u8ff0\u4e2d\uff0c\u6709\u4e00\u4e2a\u6307\u5411\u8be5\u4ea7\u54c1\u5b8c\u6574\u8bc4\u6d4b\u7684\u94fe\u63a5\u3002 \u5728\u8fd9\u5219 \u4ea7\u54c1\u8bc4\u6d4b \u5e16\u6587\u4e2d\uff0c\u5305\u542b\u4e86\u6307\u5411\u4ea7\u54c1\u7efc\u8ff0\u6587\u7ae0\u7684\u53cd\u5411\u94fe\u63a5\u3002 \u5982\u679c\u4f60\u5bf9\u7efc\u8ff0\u91cc\u7684\u6240\u6709\u4ea7\u54c1\u90fd\u8fd9\u6837\u64cd\u4f5c\uff0c\u4f60\u5c31\u521b\u5efa\u4e86\u4e00\u4e2a\u5185\u5bb9\u4e2d\u5fc3\u4e86\u3002 B. \u94fe\u63a5\u5efa\u8bbe \u00b6 \u5916\u94fe\u53ef\u80fd\u662f\u6700\u91cd\u8981\u7684 Google \u6392\u540d\u56e0\u7d20 \u3002\u4ed6\u4eec\u662f Google \u6392\u540d\u7b97\u6cd5\u7684\u57fa\u77f3\uff0c\u591a\u9879\u72ec\u7acb \u7814\u7a76 \u90fd\u53d1\u73b0\u4e86\u6765\u81ea\u72ec\u7acb\u7f51\u7ad9\u7684\u5916\u94fe\u6570\u91cf\u4e0e\u7f51\u9875\u81ea\u7136\u641c\u7d22\u6d41\u91cf\u4e4b\u95f4\u7684\u5f3a\u5173\u8054\u3002 \u5bf9\u4e9a\u9a6c\u900a\u8054\u76df\u5ba2\u7f51\u7ad9\u800c\u8a00\uff0c\u4f60\u5e0c\u671b\u76f4\u63a5\u4e3a\u50cf\u4ea7\u54c1\u7efc\u8ff0\u6587\u7ae0\u548c\u4ea7\u54c1\u8bc4\u6d4b\u5e16\u6587\u8fd9\u6837\u7684\u201c\u8d5a\u94b1\u201d\u9875\u9762\u5efa\u7acb\u76f4\u63a5\u7684\u5916\u94fe\u3002 \u505a\u5230\u8fd9\u4e00\u70b9\u6709\u8bb8\u591a\u65b9\u6cd5\uff0c\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u4e2a\uff1a \u4ea7\u54c1\u7efc\u8ff0\u6587\u7ae0\u5bf9\u7279\u5b9a\u79cd\u7c7b\u7684\u4ea7\u54c1\u8fdb\u884c\u8bc4\u6d4b\u3002\u5b83\u53ef\u80fd\u662f\u5496\u5561\u7814\u78e8\u673a\uff0c\u7acb\u5f0f\u529e\u516c\u684c\uff0cWiFi \u8def\u7531\u5668\u7b49\u3002\u60f3\u60f3\u4ea7\u54c1\u7684\u76ee\u7684\uff0c\u95ee\u95ee\u81ea\u5df1\uff0c\u5b83\u80fd\u5e2e\u52a9\u4eba\u4eec\u505a\u4ec0\u4e48\uff1f \u8fd9\u91cc\u6709\u4e00\u4e9b\u4f8b\u5b50\uff1a \u5496\u5561\u7814\u78e8\u673a -> \u5e2e\u52a9\u4eba\u4eec \u505a\u51fa\u66f4\u597d\u559d\u7684\u5496\u5561 \u7acb\u5f0f\u529e\u516c\u684c -> \u5e2e\u52a9\u4eba\u4eec \u66f4\u5065\u5eb7\u5730\u5728\u5bb6\u5de5\u4f5c WiFi \u8def\u7531\u5668 -> \u5e2e\u52a9\u4eba\u4eec \u66f4\u5b89\u5168\u5730\u4e0a\u7f51 \u73b0\u5728\u4f60\u5df2\u7ecf\u786e\u7acb\u4e86\u4ea7\u54c1\u7684\u529f\u7528\uff0c\u53ef\u4ee5\u5bfb\u627e\u90a3\u4e9b\u5728\u8ba8\u8bba\u5b9e\u73b0\u8fd9\u4e2a\u529f\u6548\u7684\u540c\u65f6\u63d0\u53ca\u4f60\u7684\u4ea7\u54c1\u7684\u6587\u7ae0\u4e86\u3002\u63a5\u7740\u4f60\u53ef\u4ee5\u8054\u7cfb\u4ed6\u4eec\uff0c\u5efa\u8bae\u5728\u6587\u7ae0\u4e2d\u52a0\u5165\u6307\u5411\u4f60\u7684\u4ea7\u54c1\u7efc\u8ff0\u6587\u7ae0\u7684\u94fe\u63a5\uff0c\u4ee5\u5e2e\u52a9\u4ed6\u4eec\u7684\u8bfb\u8005\u66f4\u597d\u7684\u9009\u62e9\u5bf9\u4ed6\u4eec\u6765\u8bf4\u6700\u597d\u7684\u4ea7\u54c1\u3002 \u8ba9\u6211\u4eec\u7528\u4e00\u4e2a\u4f8b\u5b50\u6765\u89e3\u91ca\u3002 \u5982\u679c\u6211\u4eec\u5728 Google \u4e2d\u641c\u7d22\u201chow to stay healthy when working from home\u201d\uff08\u201c\u5982\u4f55\u80fd\u5728\u5c45\u5bb6\u5de5\u4f5c\u7684\u540c\u65f6\u4fdd\u6301\u5065\u5eb7\u201d\uff09\uff0c\u5f88\u53ef\u80fd\u6240\u6709\u7684\u7ed3\u679c\u90fd\u662f\u5e26\u6709\u76f8\u5173\u63d0\u793a\u7684\u535a\u5ba2\u6587\u7ae0\u3002 \u4f46\u662f\u6211\u4eec\u5e76\u4e0d\u77e5\u9053\u8fd9\u4e9b\u6587\u7ae0\u6709\u6ca1\u6709\u63d0\u5230\u7acb\u5f0f\u529e\u516c\u684c\uff0c\u6240\u4ee5\u8ba9\u6211\u4eec\u4f7f\u7528 Google \u641c\u7d22\u64cd\u4f5c\u7b26 \u6765\u9650\u5b9a\u63d0\u53ca \u201cstanding desk\u201d \u7684\u7ed3\u679c\u3002 \u51fa\u73b0\u4e86 940 \u4e07\u4e2a\u7ed3\u679c\u3002 \u4ee5\u4e0b\u53ea\u662f\u5176\u4e2d\u7684\u4e00\u4e2a\uff1a \u5c3d\u7ba1\u8fd9\u7bc7\u6587\u7ae0\u63a8\u8350\u4e86\u4e00\u6b3e\u7279\u5b9a\u578b\u53f7\u7684\u7acb\u5f0f\u529e\u516c\u684c\uff0c\u5f88\u660e\u663e\u5982\u679c\u6709\u591a\u4e2a\u9009\u9879\uff0c\u5bf9\u8bfb\u8005\u7684\u5e2e\u52a9\u66f4\u5927\u3002\u56e0\u6b64\u5982\u679c\u8fd9\u7bc7\u6587\u7ae0\u53ef\u4ee5\u5305\u542b\u6307\u5411\u6700\u597d\u7684\u7acb\u5f0f\u529e\u516c\u684c\u5217\u8868\u7684\u5e16\u6587\uff08\u50cf \u8fd9\u7bc7 \uff09\u5c31\u66f4\u6709\u7528\u4e86\u3002 \u6240\u4ee5\uff0c\u5bf9\u6211\u4eec\u6765\u8bf4\uff0c\u5efa\u8bae\u5bf9\u65b9\u5728\u6587\u7ae0\u4e2d\u52a0\u5165\u6307\u5411\u6211\u4eec\u6bd4\u8f83\u6700\u597d\u7684\u7acb\u5f0f\u529e\u516c\u684c\u7684\u5e16\u6587\u7684\u94fe\u63a5\u662f\u6709\u610f\u4e49\u7684\u3002 \u4ee5\u4e0b\u662f\u4e00\u5c01\u7535\u5b50\u90ae\u4ef6\u7684\u793a\u4f8b\uff1a Hey [name], Just came across your guide to staying fit and healthy as a remote worker. Loved the tip about standing desks, and I agree that the Jarvis is a great option. However, I spent XX hours testing XX standing desks and found that the Jarvis is actually quite expensive for what it is, and that [other model] is almost as good for less money. Perhaps it might be worth including my comparison to give readers some extra choice? [link] Thanks, [name] \u8bd1\uff1a \u4f60\u597d [\u5bf9\u65b9\u540d\u5b57]\uff0c \u6211\u521a\u521a\u78b0\u5de7\u770b\u5230\u4e86\u4f60\u5199\u7684\u5173\u4e8e\u5982\u4f55\u5728\u8fdc\u7a0b\u5de5\u4f5c\u65f6\u4fdd\u6301\u8eab\u4f53\u5065\u5eb7\u7684\u6307\u5357\u3002 \u6211\u5f88\u559c\u6b22\u4f60\u5bf9\u4e8e\u4f7f\u7528\u7acb\u5f0f\u529e\u516c\u684c\u7684\u5efa\u8bae\uff0c\u6211\u4e5f\u89c9\u5f97 Jarvis \u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u9879\u3002\u4f46\u662f\uff0c\u5728\u82b1\u4e86 XX \u4e2a\u5c0f\u65f6\u6d4b\u8bd5\u4e86 XX \u6b3e\u7acb\u5f0f\u529e\u516c\u684c\u540e\u6211\u53d1\u73b0 Jarvis \u7684\u4ef7\u683c\u5b9e\u9645\u4e0a\u504f\u9ad8\u4e86\uff0c\u800c [\u53e6\u5916\u7684\u578b\u53f7] \u5dee\u4e0d\u591a\uff08\u548c Jarvis\uff09\u4e00\u6837\u4f18\u79c0\u4f46\u662f\u5374\u66f4\u4fbf\u5b9c\u3002 \u6216\u8bb8\u4f60\u53ef\u4ee5\u5c06\u6211\u7684\u8fd9\u7bc7\u6bd4\u8f83\u5e16\u6587\u52a0\u5165\u8fd9\u7bc7\u6587\u7ae0\uff0c\u7ed9\u4f60\u7684\u8bfb\u8005\u591a\u51e0\u79cd\u9009\u62e9\uff1f [\u94fe\u63a5] \u8c22\u8c22\uff0c [\u540d\u5b57] \u5982\u679c\u4f60\u5411\u591a\u4eba\u53d1\u9001\u7c7b\u4f3c\u7684\u7535\u5b50\u90ae\u4ef6\uff0c\u5e94\u8be5\u80fd\u591f\u4e3a\u4f60\u7684\u7efc\u8ff0\u6587\u7ae0\u83b7\u5f97\u4e00\u4e9b\u9ad8\u8d28\u91cf\u7684\u5916\u94fe\u3002 \u5f53\u7136\uff0c\u8fd9\u53ea\u662f\u4e00\u4e2a\u60f3\u6cd5\u3002 \u67e5\u770b\u4ee5\u4e0b\u51e0\u7bc7\u6587\u7ae0\uff0c\u4e86\u89e3\u66f4\u591a \u5916\u94fe\u5efa\u8bbe\u7684\u7b56\u7565 \uff1a \u5ef6\u4f38\u9605\u8bfb \u5982\u4f55\u6709\u6548\u5730\u6267\u884c\u6469\u5929\u697c(Skyscraper)\u7b56\u7565 SEO\u5ba2\u5ea7\u535a\u6587\uff1a\u5982\u4f55\u6279\u91cf\u5efa\u8bbe\u9ad8\u8d28\u91cf\u7684\u5916\u94fe\uff08\u82f1\u6587\uff09 \u8d44\u6e90\u9875\u9762\u5916\u94fe\u5efa\u8bbe\uff1a\u770b\u8fd9\u4e00\u7bc7\u5c31\u591f\u4e86\uff08\u82f1\u6587\uff09 \u5916\u94fe\u5efa\u8bbe\u7b80\u660e\u5b8c\u6574\u6307\u5357\uff08\u82f1\u6587\uff09 \u5728\u4e3a\u201c\u8d5a\u94b1\u201d\u9875\u9762\u5efa\u7acb\u5916\u94fe\u65f6\u8270\u96be\u524d\u884c? \u4e3a\u76f8\u5173\u8bdd\u9898\u521b\u5efa\u535a\u5ba2\u6587\u7ae0\u548c\u5176\u4ed6\u6709\u7528\u7684\u5185\u5bb9\uff0c\u63a5\u7740\u4f7f\u7528 \u4e2d\u95f4\u4eba\u6280\u672f \u6765\u63d0\u632f\u4ed6\u4eec\u7684\u8868\u73b0\u5427\u3002 5. \u83b7\u5f97\u70b9\u51fb \u00b6 \u56e0\u4e3a 24 \u5c0f\u65f6\u7f13\u5b58\u671f\u7684\u673a\u5236\uff0c\u5982\u679c\u4f60\u60f3\u8981\u8d5a\u94b1\uff0c\u5c31\u9700\u8981\u9a71\u52a8\u70b9\u51fb\u524d\u5f80\u4e9a\u9a6c\u900a\u3002 \u8fd9\u91cc\u6211\u4e0d\u4f1a\u8be6\u8ff0\u7ec6\u8282\uff0c\u56e0\u4e3a\u5982\u679c\u4f60\u624d\u521a\u521a\u8d77\u6b65\uff0c\u8f6c\u5316\u7387\u4f18\u5316\u4e0d\u662f\u4f60\u5e94\u8be5\u6c89\u8ff7\u7684\u4e1c\u897f\u3002 \u4f46\u662f\uff0c\u4f60\u9700\u8981\u786e\u4fdd\u5df2\u7ecf\u638c\u63e1\u4e86\u57fa\u672c\u77e5\u8bc6\uff0c\u4ed6\u4eec\u662f\uff1a \u5c3d\u65e9\u653e\u7f6e\u63a8\u8350\u8868\u683c\u3002 \u63a8\u8350\u8868\u683c\u5728\u4ea7\u54c1\u7efc\u8ff0\u6587\u7ae0\u4e2d\u7f57\u5217\u4e86\u63a8\u8350\u7684\u70ed\u95e8\u4ea7\u54c1\uff0c\u5e76\u5305\u542b\u4e86\u6307\u5411\u8fd9\u4e9b\u4ea7\u54c1\u7684\u94fe\u63a5\u3002\u4ed6\u4eec\u5e94\u8be5\u51fa\u73b0\u5728\u6587\u7ae0\u7684\u524d\u90e8\uff0c\u56e0\u4e3a\u4f60\u60f3\u8981\u4eba\u4eec\u80fd\u591f\u5feb\u901f\u627e\u5230\u4ed6\u4eec\u60f3\u8981\u7684\u4fe1\u606f\u3002 \u4f7f\u7528\u660e\u663e\u7684\u4e9a\u9a6c\u900a\u94fe\u63a5\u3002 \u80fd\u4ece\u4f60\u7f51\u7ad9\u8bbe\u8ba1\u8131\u9896\u800c\u51fa\u7684\u6309\u94ae\u5f80\u5f80\u6548\u679c\u6700\u597d\u3002 \u7ed9\u4eba\u4eec\u4e00\u4e2a\u76f8\u4fe1\u4f60\u7684\u7406\u7531\u3002 \u8fd9\u4e00\u70b9\u4f60\u8d8a\u5feb\u80fd\u505a\u5230\u8d8a\u597d\u3002The Wirecutter \u7684\u7b56\u7565\u53ef\u80fd\u662f\u8fd9\u91cc\u7684\u91d1\u6807\u51c6\u3002\u53bb\u770b\u770b\u4ed6\u4eec\u7684\u4ecb\u7ecd\u5185\u5bb9\u5427\u3002 \u4e00\u65e6\u4f60\u7684\u7f51\u7ad9\u83b7\u5f97\u4e86\u53ef\u89c2\u7684\u6d41\u91cf\uff0c\u8bb0\u5f97\u67e5\u770b\u4e0b\u9762\u7684\u8d44\u6e90\u786e\u4fdd\u4f60\u83b7\u5f97\u4e86\u5c3d\u53ef\u80fd\u591a\u7684\u70b9\u51fb\u3002 \u5ef6\u4f38\u9605\u8bfb \u5982\u4f55\u4f18\u5316\u8054\u76df\u5ba2\u7f51\u7ad9\u7684\u8f6c\u5316\u7387\uff08\u9010\u6b65\u6307\u5f15\uff09\uff08\u82f1\u6587\uff09 17 \u79cd\u63d0\u9ad8\u4e9a\u9a6c\u900a\u8054\u76df\u5ba2\u7f51\u7ad9\u548c\u6743\u5a01\u7f51\u7ad9\u8f6c\u5316\u7387\u7684\u7b56\u7565\uff08\u82f1\u6587\uff09 \u5982\u4f55\u4f18\u5316\u4f60\u7684\u4e9a\u9a6c\u900a\u8054\u76df\u5ba2\u7f51\u7ad9\u7684\u8f6c\u5316\u7387\uff08\u82f1\u6587\uff09 \u7ed3\u8bed \u00b6 \u5c3d\u7ba1\u4e9a\u9a6c\u900a\u6700\u8fd1\u8c03\u4f4e\u4e86\u4f63\u91d1\u7684\u62bd\u6210\u6bd4\u4f8b\uff0c\u4f46\u662f\u56f4\u7ed5\u4e9a\u9a6c\u900a\u5efa\u7acb\u8054\u76df\u5ba2\u7f51\u7ad9\u4f9d\u7136\u662f\u5f00\u5c55 \u8054\u76df\u8425\u9500 \u7684\u597d\u529e\u6cd5\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u65e6\u4f60\u83b7\u5f97\u4e86\u53ef\u89c2\u7684\u6d41\u91cf\uff0c\u5c31\u503c\u5f97\u53bb\u5173\u6ce8\u5176\u4ed6\u7684\u8054\u76df\u5ba2\u9879\u76ee\uff0c\u4ed6\u4eec\u53ef\u4ee5\u4f1a\u4e3a\u540c\u6837\u7684\u4ea7\u54c1\u63d0\u4f9b\u66f4\u4e3a\u4e30\u539a\u7684\u4f63\u91d1\u3002\u5c3d\u7ba1\u901a\u5e38\u60c5\u51b5\u4e0b\u4e9a\u9a6c\u900a\u7684\u8f6c\u5316\u662f\u6700\u9ad8\u7684\uff0c\u4f46\u662f\u7531\u4e8e\u66f4\u9ad8\u7684\u4f63\u91d1\u6bd4\u4f8b\uff0c\u901a\u8fc7\u52a0\u5165\u5176\u4ed6\u7684\u8054\u76df\u9879\u76ee\u5f80\u5f80\u53ef\u80fd\u5e2e\u4f60\u8d5a\u66f4\u591a\u94b1\u3002 \u6709\u95ee\u9898\uff1f \u5728 Twitter \u4e0a \u544a\u8bc9\u6211\u5427\u3002 \u51e1\u672c\u7f51\u6ce8\u660e\"\u6765\u6e90\uff1aXXX \"\u7684\u6587/\u56fe/\u89c6\u9891\u7b49\u7a3f\u4ef6\uff0c\u672c\u7f51\u8f6c\u8f7d\u51fa\u4e8e\u4f20\u9012\u66f4\u591a\u4fe1\u606f\u4e4b\u76ee\u7684\uff0c\u5e76\u4e0d\u610f\u5473\u7740\u8d5e\u540c\u5176\u89c2\u70b9\u6216\u8bc1\u5b9e\u5176\u5185\u5bb9\u7684\u771f\u5b9e\u6027\u3002\u5982\u6d89\u53ca\u4f5c\u54c1\u5185\u5bb9\u3001\u7248\u6743\u548c\u5176\u5b83\u95ee\u9898\uff0c\u8bf7\u4e0e\u672c\u7f51\u8054\u7cfb\uff0c\u6211\u4eec\u5c06\u5728\u7b2c\u4e00\u65f6\u95f4\u5220\u9664\u5185\u5bb9\uff01 \u4f5c\u8005: Joshua Hardwick \u6765\u6e90\uff1a https://ahrefs.com/blog/zh/amazon-affiliate-marketing/","title":"\u5982\u4f55\u642d\u5efa\u4e00\u4e2a\u6210\u529f\u7684\u4e9a\u9a6c\u900a\u8054\u76df\u7f51\u7ad9"},{"location":"pages/affiliate/amazon-affiliate-marketing/#\u5982\u4f55\u4e00\u6b65\u6b65\u642d\u5efa\u4e00\u4e2a\u6210\u529f\u7684\u4e9a\u9a6c\u900a\u8054\u76df\u7f51\u7ad9","text":"\u4f60\u60f3\u901a\u8fc7\u63a8\u5e7f\u4e9a\u9a6c\u900a\u7684\u4ea7\u54c1\u6765\u8d5a\u70b9\u5916\u5feb\u5417\uff1f \u8bb8\u591a\u4eba\u901a\u8fc7\u4e9a\u9a6c\u900a\u8054\u76df\u5ba2\u7f51\u7ad9\u8d5a\u94b1\u3002\u4f46\u662f\u6bcf\u6709\u4e00\u4e2a\u6210\u529f\u6848\u4f8b\uff0c\u5c31\u6709\u8bb8\u591a\u5931\u8d25\u7684\u6545\u4e8b\u3002 \u4f8b\u5982\uff0c/r/juststart \u5b50\u677f\u5757\u7684 \u8fd9\u4e2a\u4eba \u5c31\u58f0\u79f0\u4ed6\u4ec5\u7528 6 \u4e2a\u6708\u4e0d\u5230\u7684\u65f6\u95f4\u5c31\u53ef\u4ee5\u6bcf\u4e2a\u6708\u4ece\u4e9a\u9a6c\u900a\u8d5a 1,000 \u7f8e\u91d1\uff1a \u800c \u8fd9\u4e2a\u4eba \u8fd0\u8425\u4e86\u4e24\u5e74\u591a\u7684\u7f51\u7ad9\u6bcf\u4e2a\u6708\u53ea\u80fd\u8d5a 38 \u7f8e\u91d1\u3002 \u5982\u679c\u4f60\u5e0c\u671b\u81ea\u5df1\u7684\u6545\u4e8b\u53ef\u4ee5\u591a\u50cf\u7b2c\u4e00\u5f20\u622a\u56fe\u7684\u6848\u4f8b\u4e00\u4e9b\uff0c\u800c\u5c11\u50cf\u7b2c\u4e8c\u5f20\u622a\u56fe\u91cc\u7684\u6848\u4f8b\u4e00\u4e9b\uff0c\u800c\u4e48\u8fd9\u7bc7\u6307\u5357\u5c31\u662f\u4e3a\u4f60\u51c6\u5907\u7684\u3002 \u901a\u8fc7\u8fd9\u7bc7\u6307\u5357\uff0c\u4f60\u5c06\u4e86\u89e3\uff1a \u4e9a\u9a6c\u900a\u8054\u76df\u9879\u76ee\u662f\u4ec0\u4e48 \u4e9a\u9a6c\u900a\u8054\u76df\u9879\u76ee\u5982\u4f55\u5de5\u4f5c \u5982\u4f55\u6210\u4e3a\u4e9a\u9a6c\u900a\u8054\u76df\u5ba2 \u4e9a\u9a6c\u900a\u8054\u76df\u5ba2\u7f51\u7ad9\u662f\u4ec0\u4e48 \u4e3a\u4ec0\u4e48 SEO \u5bf9\u4e9a\u9a6c\u900a\u8054\u76df\u5ba2\u7f51\u7ad9\u5f88\u91cd\u8981 * \u5982\u4f55\u642d\u5efa\u4e00\u4e2a\u6210\u529f\u7684\u4e9a\u9a6c\u900a\u8054\u76df\u5ba2\u7f51\u7ad9","title":"\u5982\u4f55\uff08\u4e00\u6b65\u6b65\uff09\u642d\u5efa\u4e00\u4e2a\u6210\u529f\u7684\u4e9a\u9a6c\u900a\u8054\u76df\u7f51\u7ad9"},{"location":"pages/affiliate/amazon-affiliate-marketing/#\u4e9a\u9a6c\u900a\u8054\u76df\u9879\u76ee\u662f\u4ec0\u4e48","text":"\u4eba\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e9a\u9a6c\u900a\u8054\u76df\u9879\u76ee\uff08 \u4e9a\u9a6c\u900a\u8054\u76df \uff09\u5411\u4e9a\u9a6c\u900a\u5f15\u4ecb\u9500\u552e\uff08\u989d\uff09\u6765\u8d5a\u94b1\u3002","title":"\u4e9a\u9a6c\u900a\u8054\u76df\u9879\u76ee\u662f\u4ec0\u4e48"},{"location":"pages/affiliate/amazon-affiliate-marketing/#\u4e9a\u9a6c\u900a\u8054\u76df\u9879\u76ee\u5982\u4f55\u5de5\u4f5c","text":"\u4e9a\u9a6c\u900a\u4f1a\u5728\u4f60\u6ce8\u518c\uff08\u8054\u76df\u9879\u76ee\uff09\u7684\u65f6\u5019\u5206\u914d\u7ed9\u4f60\u4e00\u4e2a\u552f\u4e00\u7684\u8ffd\u8e2a ID\uff0c\u5b83\u770b\u8d77\u6765\u50cf\u4e0b\u9762\u8fd9\u6837\uff1a yourname-20 . \u4f60\u53ef\u4ee5\u5c06\u8fd9\u4e2a ID \u6dfb\u52a0\u5230\u4efb\u610f\u4e00\u4e2a\u4e9a\u9a6c\u900a\u4ea7\u54c1\u7684\u94fe\u63a5\u4e2d\uff0c\u4ee5\u521b\u5efa\u4e00\u4e2a\u8054\u76df\u5ba2\u94fe\u63a5\u3002 \u4f8b\u5b50\uff1a amazon.com/dp/B01K1C94E4 \u2192 amazon.com/dp/B01K1C94E4 **?tag=yourname-20** \u82e5\u6709\u4eba\u70b9\u51fb\u4e86\u4f60\u7684\u4e13\u5c5e\u8054\u76df\u5ba2\u94fe\u63a5\uff0c\u5e76\u4e8e\u4e4b\u540e\u7684 24 \u5c0f\u65f6\u5185\u5728\u4e9a\u9a6c\u900a\u7f51\u7ad9\u6d88\u8d39\uff0c\u4f60\u5c31\u53ef\u4ee5\u4ece\u8fd9\u7b14\u6d88\u8d39\u4e2d\u62bd\u53d6\u4f63\u91d1\u3002 \u66f4\u597d\u7684\u662f\uff0c\u4ed6\u4eec\u4e0d\u5fc5\u8d2d\u4e70\u4f60\u63a8\u8350\u7684\u4ea7\u54c1\u3002\u5982\u679c\u4f60\u63d0\u4f9b\u7684\u94fe\u63a5\u6307\u5411\u83dc\u5200\uff0c\u800c\u70b9\u51fb\u7684\u4eba\u6700\u7ec8\u8d2d\u4e70\u4e86\u7f51\u7403\u62cd\uff0c\u4f60\u4f9d\u7136\u53ef\u4ee5\u83b7\u5f97\u4f63\u91d1\u3002\u5982\u679c\u4ed6\u4eec\u4e70\u4e86\u83dc\u5200\u3001\u7f51\u7403\u62cd\u548c\u5176\u4ed6\u4e00\u5806\u4e1c\u897f\uff0c\u4f60\u53ef\u4ee5\u4ece\u6bcf\u4ef6\u4ea7\u54c1\u4e2d\u6323\u5f97\u4f63\u91d1\u3002 \u4e9a\u9a6c\u900a\u8054\u76df\u9879\u76ee\u8fd9\u4e48\u53d7\u6b22\u8fce\uff0c\u8fd9\u4e5f\u662f\u4e00\u90e8\u5206\u539f\u56e0\u3002\u4e9a\u9a6c\u900a\u51fa\u552e\u7684\u4ea7\u54c1\u5404\u5f0f\u5404\u6837\uff0c\u6240\u4ee5\u5982\u679c\u4f60\u6536\u5230\u6765\u81ea\u4ece\u672a\u542c\u8bf4\u8fc7\u7684\u4ea7\u54c1\u7684\u4e00\u5927\u7b14\u4f63\u91d1\u4e5f\u662f\u5f88\u6b63\u5e38\u7684\u3002","title":"\u4e9a\u9a6c\u900a\u8054\u76df\u9879\u76ee\u5982\u4f55\u5de5\u4f5c"},{"location":"pages/affiliate/amazon-affiliate-marketing/#\u5982\u4f55\u6210\u4e3a\u4e9a\u9a6c\u900a\u8054\u76df\u5ba2","text":"\u6839\u636e\u4ee5\u4e0b\u6b65\u9aa4\uff1a \u524d\u5f80 \u4e9a\u9a6c\u900a\u8054\u76df\u4e3b\u9875 ; \u767b\u5f55\u4e9a\u9a6c\u900a\u8d26\u6237\uff1b \u6309\u7167\u5c4f\u5e55\u4e0a\u7684\u63d0\u793a\u64cd\u4f5c\u3002 \u5728\u6ce8\u518c\u8fc7\u7a0b\u4e2d\uff0c\u4e9a\u9a6c\u900a\u4f1a\u8981\u6c42\u63d0\u4f9b\u7f51\u5740\u3002\u5c3d\u7ba1\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4e2a\u793e\u4ea4\u5a92\u4f53\u7684\u94fe\u63a5\uff0c\u4f46\u5982\u679c\u4f60\u5f88\u8ba4\u771f\u7684\u60f3\u901a\u8fc7\u4e9a\u9a6c\u900a\u8054\u76df\u8ba1\u5212\u6323\u94b1\uff0c\u5c31\u9700\u8981\u5efa\u7acb\u4e00\u4e2a\u4e9a\u9a6c\u900a\u8054\u76df\u5ba2\u7f51\u7ad9\u4e86\u3002","title":"\u5982\u4f55\u6210\u4e3a\u4e9a\u9a6c\u900a\u8054\u76df\u5ba2"},{"location":"pages/affiliate/amazon-affiliate-marketing/#\u4e9a\u9a6c\u900a\u8054\u76df\u5ba2\u7f51\u7ad9\u662f\u4ec0\u4e48","text":"\u4e9a\u9a6c\u900a\u8054\u76df\u5ba2\u7f51\u7ad9 \u901a\u8fc7\u53d1\u5e03\u5185\u5bb9\u6765\u5bf9\u63a8\u5e7f\u4e9a\u9a6c\u900a\u4e0a\u7684\u4ea7\u54c1\uff0c\u4ee5\u4fc3\u8fdb\u9500\u552e\u3002 \u5982\u679c\u4f60\u66fe\u7ecf\u5728 Google \u4e2d\u641c\u7d22\u8fc7\u50cf \u201cbest [product type]\u201d\uff08\u201c\u6700\u597d\u7684 [\u4ea7\u54c1\u7c7b\u578b]\u201d\uff09\u6216\u8005 \u201c[product] review\u201d\uff08[\u4ea7\u54c1] \u8bc4\u6d4b\uff09\u8fd9\u6837\u7684\u8bcd\uff0c\u90a3\u4e48\u4f60\u51e0\u4e4e\u80af\u5b9a\u8bbf\u95ee\u8fc7\u8fd9\u7c7b\u7f51\u7ad9\u3002 \u6765\u770b\u4e00\u4e0b \u201cbest coffee grinder\u201d\uff08\u201c\u6700\u597d\u7684\u5496\u5561\u7814\u78e8\u673a\u201d\uff09\u8fd9\u4e2a\u5173\u952e\u8bcd\u6392\u540d\u9760\u524d\u7684\u7ed3\u679c\uff1a \u8fd9\u4e9b\u4eba\u8c03\u7814\u4e86\u6700\u597d\u7684\u5496\u5561\u7814\u78e8\u673a\uff0c\u5c06\u4ed6\u4eec\u7684\u53d1\u73b0\u603b\u7ed3\u5230\u4e00\u7bc7\u535a\u5ba2\u6587\u7ae0\u4e2d\uff0c\u5e76\u5728\u5176\u4e2d\u5305\u542b\u4e86\u4e9a\u9a6c\u900a\u7684\u8054\u76df\u5ba2\u94fe\u63a5\uff0c\u8bbf\u95ee\u8005\u70b9\u51fb\u540e\u53ef\u4ee5\u8d2d\u4e70\u63a8\u8350\u7684\u4ea7\u54c1\u3002 \u201cAeropress review\u201d\uff08\u201c\u7231\u4e50\u538b\u8bc4\u6d4b\u201d\uff09\u8fd9\u4e2a\u5173\u952e\u8bcd\u7684\u60c5\u51b5\u4e5f\u7c7b\u4f3c\u3002 \u8fd9\u4e24\u7c7b\u535a\u6587\u5bf9\u8bfb\u8005\u6765\u8bf4\u90fd\u5f88\u6709\u7528\uff0c\u56e0\u4e3a\u4ed6\u4eec\u8282\u7ea6\u4e86\u7528\u6237\u7684\u65f6\u95f4\uff0c\u8ba9\u751f\u6d3b\u53d8\u5f97\u8f7b\u677e\u3002\u5982\u679c\u4f60\u60f3\u8981\u8d2d\u4e70\u4e00\u53f0\u65b0\u7684\u5496\u5561\u7814\u78e8\u673a\uff0c\u4f60\u6ca1\u529e\u6cd5\u81ea\u5df1\u53bb\u6d4b\u8bd5\u591a\u4e2a\u4ea7\u54c1\u3002\u4f60\u4e0d\u5f97\u4e0d\u4f9d\u9760\u5176\u4ed6\u4eba\u7684\u8c03\u7814\u548c\u6d4b\u8bd5\u3002","title":"\u4e9a\u9a6c\u900a\u8054\u76df\u5ba2\u7f51\u7ad9\u662f\u4ec0\u4e48\uff1f"},{"location":"pages/affiliate/amazon-affiliate-marketing/#\u4e3a\u4ec0\u4e48-SEO-\u662f\u4e9a\u9a6c\u900a\u8054\u76df\u5ba2\u7f51\u7ad9\u6210\u529f\u7684\u79d8\u8bc0","text":"\u4ece\u4e9a\u9a6c\u900a\u8054\u76df\u5ba2\u7f51\u7ad9\u6323\u94b1\u9700\u8981\u6d41\u91cf\uff08\u8bbf\u5ba2\uff09\u3002 \u5982\u679c\u6ca1\u6709\u6d41\u91cf\uff0c\u5c31\u4e0d\u4f1a\u6709\u4eba\u53bb\u70b9\u51fb\u4f60\u7684\u8054\u76df\u94fe\u63a5\uff0c\u4e5f\u5c31\u610f\u5473\u7740\u6ca1\u6709\u4f63\u91d1\u3002 \u5982\u4eca\uff0c\u83b7\u53d6\u6d41\u91cf\u7684\u65b9\u5f0f\u6709\u5f88\u591a\u3002\u4f46\u662f\u5927\u591a\u6570\u6709\u6210\u529f\u7ecf\u9a8c\u7684\u8054\u76df\u5ba2\u90fd\u901a\u8fc7 SEO \u83b7\u5f97\u4e86\u5927\u91cf\u6d41\u91cf\u3002 \u8fd9\u662f\u4e3a\u4ec0\u4e48\u5462\uff1f \u5982\u679c\u4f60\u5728\u793e\u5a92\u6216\u8005\u90ae\u4ef6\u901a\u8baf\u4e2d\u63a8\u5e7f\u535a\u5ba2\uff0c\u4f60\u4f1a\u83b7\u5f97\u6d41\u91cf\u7684\u6fc0\u589e\u3002\u4f46\u662f\u4e00\u65e6\u4f60\u7684\u53d7\u4f17\u770b\u8fc7\u4e86\u535a\u6587\uff0c\u6d41\u91cf\u5c31\u4f1a\u8dcc\u56de\u5230\u96f6\u3002 \u8fd9\u5c31\u662f\u6240\u8c13\u7684 \u201c\u5e0c\u671b\u7684\u5dc5\u5cf0\u201d\uff08\u201cspike of hope\u201d\uff09\uff0c\u7d27\u968f\u5176\u540e\u7684\u662f\u201c\u5426\u5b9a\u7684\u5e73\u7ebf\u201d\uff08\u201cflatliine of nope\u201d\uff09\u3002 SEO \u7684\u6548\u679c\u5219\u6b63\u597d\u76f8\u53cd\u3002\u5982\u679c\u4f60\u7684\u7f51\u7ad9\u4e4b\u4e8e\u90a3\u4e9b\u6bcf\u4e2a\u6708\u90fd\u6709\u641c\u7d22\u91cf\u7684\u5173\u952e\u8bcd\u5728 Google \u6709\u6392\u540d\uff0c\u4f60\u7f51\u7ad9\u7684\u6d41\u91cf\u5c06\u4f1a\u662f\u6301\u7eed\u7684\u2014\u2014\u5e76\u4e14\u4f1a\u968f\u7740\u65f6\u95f4\u9010\u6b65\u589e\u52a0\u3002 \u4ed8\u8d39\u5e7f\u544a\u4e5f\u53ef\u80fd\u8d77\u5230\u76f8\u540c\u7684\u4f5c\u7528\uff0c\u4f46\u662f\u5b83\u5b58\u5728\u4e00\u4e9b\u95ee\u9898\uff1a \u5b83\u9700\u8981\u82b1\u94b1 \uff08\u5927\u591a\u6570\u4eba\u7684\u65f6\u95f4\u6bd4\u94b1\u591a\uff09\u3002 \u5b83\u8981\u4e48\u5c31\u5168\u6709\uff0c\u8981\u4e48\u5c31\u5168\u65e0\u3002 \u4e00\u65e6\u4f60\u505c\u6b62\u82b1\u94b1\uff08\u6253\u5e7f\u544a\uff09\uff0c\u4f60\u7684\u6d41\u91cf\u5c31\u4f1a\u9057\u5931\u81f3\u96f6\u3002 \u5b83\u5f88\u96be\u8ba9\u4f60\u76c8\u5229 \uff0c\u56e0\u4e3a\u5e7f\u544a\u8d39\u4f1a\u8695\u98df\u4f60\u7684\u8054\u76df\u4f63\u91d1\u3002 \u8003\u8651\u5230\u8fd9\u4e00\u70b9\uff0c\u8ba9\u6211\u4eec\u6765\u770b\u770b\u5982\u4f55\u642d\u5efa\u4e00\u4e2a\u6bcf\u4e2a\u6708\u90fd\u80fd\u8d5a\u94b1\u7684\u4e9a\u9a6c\u900a\u8054\u76df\u5ba2\u7f51\u7ad9\u3002","title":"\u4e3a\u4ec0\u4e48 SEO \u662f\u4e9a\u9a6c\u900a\u8054\u76df\u5ba2\u7f51\u7ad9\u6210\u529f\u7684\u79d8\u8bc0"},{"location":"pages/affiliate/amazon-affiliate-marketing/#\u5982\u4f55\u642d\u5efa\u6210\u529f\u7684\u4e9a\u9a6c\u900a\u8054\u76df\u5ba2\u7f51\u7ad9","text":"\u4e0d\u540c\u7684\u4eba\u5bf9\u6210\u529f\u6709\u4e0d\u540c\u7684\u5b9a\u4e49\u3002 \u5bf9\u4e8e\u4e00\u4e9b\u4eba\u6765\u8bf4\uff0c\u6210\u529f\u610f\u5473\u7740\u4e00\u4e2a\u6708\u80fd\u8d5a 1,000 \u7f8e\u91d1\u7684\u7f51\u7ad9\u3002\u5bf9\u53e6\u5916\u4e00\u4e9b\u4eba\u6765\u8bf4\uff0c\u5b83\u53ef\u80fd\u662f\u66f4\u52a0\u96c4\u5fc3\u52c3\u52c3\u7684\u6bcf\u6708 10,000 \u7f8e\u91d1\u3002 \u65e0\u8bba\u6570\u76ee\u5927\u5c0f\uff0c\u901a\u5f80\u6210\u529f\u7684\u6b65\u9aa4\u662f\u4e00\u81f4\u7684\u3002 \u627e\u5230\u5229\u57fa\u5e02\u573a \u627e\u51fa\u53ef\u4ee5\u5e26\u6765\u5229\u6da6\u7684\u5173\u952e\u8bcd \u521b\u5efa\u7c7b\u578b\u201c\u6b63\u786e\u201d\u7684\u5185\u5bb9 \u901a\u8fc7 SEO \u4e3a\u7f51\u7ad9\u5f15\u6d41 \u4e3a\u8054\u76df\u5ba2\u94fe\u63a5\u83b7\u5f97\u70b9\u51fb","title":"\u5982\u4f55\u642d\u5efa\u6210\u529f\u7684\u4e9a\u9a6c\u900a\u8054\u76df\u5ba2\u7f51\u7ad9"},{"location":"pages/affiliate/amazon-affiliate-marketing/#1-\u627e\u5230\u5229\u57fa\u5e02\u573a","text":"\u4f60\u542c\u8bf4\u8fc7 The Wirecutter \u5417\uff1f \u5b83\u5c5e\u4e8e\u300a\u7ebd\u7ea6\u65f6\u62a5\u300b\uff0c\u53ef\u80fd\u662f\u6700\u53d7\u6b22\u8fce\u7684\u4e9a\u9a6c\u900a\u8054\u76df\u5ba2\u7f51\u7ad9\u3002The Wirecutter \u7f51\u7ad9\u6709\u5404\u79cd\u5404\u6837\u7684\u8bc4\u6d4b\uff0c\u4ece\u78e8\u5200\u77f3\u5230\u7acb\u5f0f\u529e\u516c\u684c\u3002\u7f51\u7ad9\u6bcf\u4e2a\u6708\u4ec5\u4ece Google \u5c31\u80fd\u83b7\u5f97 390 \u4e07\u6b21\u8bbf\u95ee\u3002 \u5c0f\u63d0\u793a. The Wirecutter \u7f51\u7ad9\u73b0\u5728\u5df2\u7ecf\u88ab\u91cd\u5b9a\u5411\u5230\u4e86 nytimes.com/wirecutter/ \u8bb8\u591a Amazon \u8054\u76df\u8425\u9500\u7684\u65b0\u4eba\u770b\u5230\u4e86\u8fd9\u4e9b\u7f51\u7ad9\u5c31\u60f3\u8981\u590d\u5236\u4ed6\u4eec\u7684\u6210\u529f\u3002 \u4e0d\u8981\u72af\u8fd9\u4e2a\u9519\u8bef\u3002 \u50cf The Wirecutter \u8fd9\u6837\u7684\u5927\u7f51\u7ad9\u62e5\u6709\u96c4\u539a\u7684\u8d44\u91d1\u548c\u4f18\u79c0\u7684 SEO \u56e2\u961f\u3002\u8bd5\u56fe\u4e0e\u4ed6\u4eec\u7ade\u4e89\u5c06\u4f1a\u662f\u4e00\u573a\u8270\u82e6\u7684\u6218\u6597\u3002 \u76f8\u53cd\uff0c\u4f60\u5e94\u8be5\u9009\u62e9\u4e00\u4e2a\u53ef\u4ee5\u4e3b\u5bfc\u7684\u5229\u57fa\u5e02\u573a\u3002 \u505a\u6cd5\u5982\u4e0b\uff1a","title":"1. \u627e\u5230\u5229\u57fa\u5e02\u573a"},{"location":"pages/affiliate/amazon-affiliate-marketing/#A-\u627e\u4e00\u4e9b\u4f60\u611f\u5174\u8da3\u7684\u4e1c\u897f","text":"\u7f3a\u4e4f\u52a8\u673a\u53ef\u80fd\u662f\u4eba\u4eec\u5728\u8054\u76df\u8425\u9500\u906d\u9047\u5931\u8d25\u7684\u6700\u5e38\u89c1\u539f\u56e0\uff0c\u56e0\u6b64\u9009\u62e9\u4e00\u4e2a\u4f60\u89c9\u5f97\u6709\u8da3\u7684\u9886\u57df\u662f\u5f88\u91cd\u8981\u7684\u3002 \u90a3\u4e48\uff0c\u62ff\u8d77\u7eb8\u548c\u7b14\uff0c\u8bb0\u5f55\u4e0b\u4e00\u4e9b\u60f3\u6cd5\u3002 \u5982\u679c\u4f60\u6b63\u5728\u82e6\u82e6\u6323\u624e\uff0c\u8fd9\u4efd \u8986\u76d6\u4e86\u8054\u76df\u8425\u9500\u5229\u57fa\u5e02\u573a\u7684\u5de8\u578b\u5217\u8868 \u53ef\u80fd\u4f1a\u6709\u6240\u5e2e\u52a9\u3002 \u53e6\u5916\uff0c\u4f60\u8fd8\u53ef\u4ee5\u4ece The Wirecutter \u7684\u7c7b\u76ee\u4e2d\u627e\u5230\u7075\u611f\u3002","title":"A. \u627e\u4e00\u4e9b\u4f60\u611f\u5174\u8da3\u7684\u4e1c\u897f"},{"location":"pages/affiliate/amazon-affiliate-marketing/#B-\u67e5\u770b\u4f63\u91d1\u7387","text":"\u4e9a\u9a6c\u900a\u7684\u4f63\u91d1\u7387\u56e0\u4ea7\u54c1\u7c7b\u76ee\u800c\u5f02\u3002 \u76ee\u524d\u7684\u4f63\u91d1\u62bd\u6210\u4f53\u7cfb \u662f\u8fd9\u6837\u7684\uff1a Product Category Commissions Luxury Beauty, Amazon Coins 10.00% Digital Music, Physical Music, Handmade, Digital Videos 5.00% Physical Books, Kitchen, Automotive 4.50% Amazon Fire Tablet Devices, Amazon Kindle Devices, Amazon Fashion Women\u2019s, Men\u2019s & Kids Private Label, Apparel, Amazon Cloud Cam Devices, Fire TV Edition Smart TVs, Amazon Fire TV Devices, Amazon Echo Devices, Ring Devices, Watches, Jewelry, Luggage, Shoes, and Handbags & Accessories 4.00% All Other Categories 4.00% Toys, Furniture, Home, Home Improvement, Lawn & Garden, Pets Products, Pantry, Headphones, Beauty, Musical Instruments, Business & Industrial Supplies, Outdoors, Tools, Sports, Baby Products 3.00% PC, PC Components, DVD & Blu-Ray 2.50% Televisions, Digital Video Games 2.00% Amazon Fresh, Physical Video Games & Video Game Consoles Grocery, Health & Personal Care 1.00% Gift Cards; Wireless Service Plans; Alcoholic Beverages; Digital Kindle Products purchased as a subscription; Food prepared and delivered from a restaurant; Amazon Appstore, Prime Now, Amazon Pay Places, or Prime Wardrobe Purchases 0.00% \u5982\u679c\u4f60\u611f\u5174\u8da3\u7684\u5229\u57fa\u5e02\u573a\u5c5e\u4e8e0\uff05\u7c7b\u522b\uff0c\uff0c\u8bf7\u628a\u4ed6\u4eec\u4ece\u5217\u8868\u4e2d\u5212\u6389\u3002\u63a8\u9500\u6ca1\u6709\u62a5\u916c\u7684\u4ea7\u54c1\u662f\u6ca1\u6709\u610f\u4e49\u7684\u3002 \u6211\u8fd8\u4f1a\u5212\u6389\u90a3\u4e9b\u4f63\u91d1\u7387\u4e0d\u8d85\u8fc7 2% \u7684\u7c7b\u76ee\uff0c\u56e0\u4e3a\u8981\u60f3\u4ece\u8fd9\u4e9b\u7c7b\u76ee\u8d5a\u94b1\uff0c\u4f60\u9700\u8981\u5927\u91cf\u6d41\u91cf\u3002 \u5c0f\u63d0\u793a. \u4e9a\u9a6c\u900a\u7684\u4f63\u91d1\u7387\u5728\u8fc7\u53bb 10 \u5e74\u5de6\u53f3\u7684\u65f6\u95f4\u91cc \u5927\u5e45\u4e0b\u964d \u3002\u6700\u8fd1\u4e00\u6b21\u524a\u51cf\u662f\u5728 2020 \u5e74\u521d\uff0c\u8fd9\u4f7f\u5f97\u4e00\u4e9b\u4eba\u8ba4\u4e3a\u4e9a\u9a6c\u900a\u8054\u76df\u5ba2\u7f51\u7ad9\u5df2\u7ecf\u6b7b\u4e86\u3002\u4e8b\u5b9e\u5e76\u975e\u5982\u6b64\u3002\u4ed6\u4eec\u53ea\u662f\u4e0d\u50cf\u4ee5\u524d\u90a3\u4e48\u8d5a\u94b1\u4e86\u800c\u5df2\u3002","title":"B. \u67e5\u770b\u4f63\u91d1\u7387"},{"location":"pages/affiliate/amazon-affiliate-marketing/#C-\u67e5\u770b\u4ea7\u54c1\u4ef7\u683c","text":"\u4e00\u822c\u6765\u8bf4\uff0c\u4ea7\u54c1\u5355\u4ef7\u8d8a\u9ad8\uff0c\u4f60\u80fd\u8d5a\u5230\u7684\u94b1\u5c31\u8d8a\u591a\u3002 \u4f8b\u5982\uff0c\u6709\u4eba\u82b1 4,000 \u7f8e\u91d1\u4e70\u4e86\u4e00\u53f0\u7535\u8111\uff0c\u4f60\u83b7\u5f97\u7684 2.5% \u7684\u4f63\u91d1\uff08100 \u7f8e\u91d1\uff09\u6bd4\u6709\u4eba\u82b1 40 \u7f8e\u91d1\u4e70\u4e00\u6761\u65b0\u7684\u5185\u5b58\u6761\u5e26\u6765\u7684\u4f63\u91d1\uff081 \u7f8e\u91d1\uff09\u8981\u9ad8\u7684\u591a\u3002 \u4f46\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u4f60\u5e94\u8be5\u9009\u62e9\u8fdb\u5165\u4e00\u4e2a\u4ef7\u683c\u9ad8\u6602\u7684\u5229\u57fa\u5e02\u573a\u3002 \u4eba\u4eec\u5728\u8d2d\u4e70\u9ad8\u4ef7\u4ea7\u54c1\u65f6\u4e0d\u4f1a\u90a3\u4e48\u51b2\u52a8\uff0c\u610f\u5473\u7740\u8f6c\u5316\u6210\u4ea4\u6613\u7684\u70b9\u51fb\u8f83\u5c11\u3002\u8fd9\u5c31\u662f\u4f60\u7684\u8f6c\u5316\u7387\u3002 \u73b0\u5728\u63d0\u5230\u4ea7\u54c1\u4ef7\u683c\uff0c\u5c31\u6709\u8bb8\u591a\u5173\u4e8e\u6700\u6709\u6548\u70b9\uff08sweet spot\uff09\u7684\u8ba8\u8bba\uff0c\u4f46\u4eba\u4eec\u5171\u8bc6\u7684\u5747\u4ef7\u4f3c\u4e4e\u5728 30 \u7f8e\u91d1\u5230 300 \u7f8e\u91d1\u4e4b\u95f4\u3002\u8d85\u8fc7 300 \u7f8e\u91d1\uff0c\u8f6c\u5316\u7387\u4f1a\u5f00\u59cb\u53d7\u635f\u3002\u4f4e\u4e8e 30 \u7f8e\u91d1\uff0c\u4f60\u4fbf\u65e0\u6cd5\u8d5a\u53d6\u8db3\u591f\u7684\u4f63\u91d1\u3002 \u4e3a\u4e86\u4e86\u89e3\u4f60\u7684\u5229\u57fa\u5e02\u573a\u7684\u4ef7\u683c\uff0c\u53ef\u4ee5\u5728\u4e9a\u9a6c\u900a\u641c\u7d22\u4e00\u4e9b\u4ea7\u54c1\u3002","title":"C. \u67e5\u770b\u4ea7\u54c1\u4ef7\u683c"},{"location":"pages/affiliate/amazon-affiliate-marketing/#_1","text":"","title":""},{"location":"pages/affiliate/amazon-affiliate-marketing/#D-\u4f30\u7b97\u6d41\u91cf\u8981\u6c42","text":"\u73b0\u5728\u4f60\u5bf9\u60f3\u8fdb\u5165\u7684\u5229\u57fa\u5e02\u573a\u6709\u4e86\u66f4\u591a\u4e86\u89e3\uff0c\u5c31\u53ef\u4ee5\u5229\u7528\u8fd9\u4e9b\u4fe1\u606f\u6765\u4f30\u7b97\u201c\u8d5a\u94b1\u9875\u9762\u201d\uff08\u201cmoney pages\u201d\uff09\u9700\u8981\u83b7\u5f97\u591a\u5c11\u6d41\u91cf\u624d\u80fd\u5b9e\u73b0\u8d22\u52a1\u76ee\u6807\u3002 \u81f3\u4e8e\u201c\u8d5a\u94b1\u9875\u9762\u201d\u8fd9\u4e2a\u8bcd\uff0c\u5982\u679c\u4f60\u4e0d\u719f\u6089\u7684\u8bdd\uff0c\u4ed6\u4eec\u662f\u4f60\u7f51\u7ad9\u4e0a\u5305\u542b\u8054\u76df\u94fe\u63a5\u7684\u9875\u9762\u3002 \u5bf9\u4e9a\u9a6c\u900a\u8054\u76df\u5ba2\u7f51\u7ad9\u800c\u8a00\uff0c\u4ea7\u54c1\u7efc\u8ff0\u53ef\u80fd\u662f\u6700\u597d\u7684\u201c\u8d5a\u94b1\u9875\u9762\u201d\u3002\u8fd9\u4e9b\u9875\u9762\u4f1a\u5217\u51fa\u67d0\u4e2a\u7c7b\u76ee\u5185\u6700\u597d\u7684\u4ea7\u54c1\uff0c\u5c31\u50cf\u4e0b\u9762\u8fd9\u5f20 The Wirecutter \u7684\u5217\u8868\uff0c\u5b83\u5217\u4e3e\u51fa\u4e86\u6700\u597d\u7684\u626b\u5730\u673a\u5668\u4eba\uff1a \u8fd9\u4e9b\u5f80\u5f80\u662f\u6700\u8d5a\u94b1\u7684\u9875\u9762\uff0c\u56e0\u4e3a\u4ed6\u4eec\u63a8\u8350\u4e86\u591a\u6b3e\u4ea7\u54c1\uff0c\u5e76\u4e14\u5728 Google \u641c\u7d22\u8fd9\u4e9b\u4ea7\u54c1\u7684\u7528\u6237\u5df2\u7ecf\u6709\u8d2d\u4e70\u7684\u610f\u613f\u3002\u8fd9\u4f1a\u63d0\u9ad8\u8054\u76df\u94fe\u63a5\u7684\u70b9\u51fb\u7387\uff08clickthrough rate, CTR\uff09\u3002 \u90a3\u4e48\u6d41\u91cf\u4f30\u7b97\u7684\u516c\u5f0f\u662f\u4ec0\u4e48\uff1f \u6708\u5ea6\u76ee\u6807 / \uff08\u4ea7\u54c1\u5747\u4ef7 * \u7c7b\u76ee\u4f63\u91d1\u7387 * \u8054\u76df\u94fe\u63a5\u5e73\u5747\u70b9\u51fb\u7387 * \u5e73\u5747\u8f6c\u5316\u7387\uff09 \u6211\u4eec\u6765\u4e3e\u4f8b\u8bf4\u660e\u3002 \u5982\u679c\u4f60\u60f3\u8fdb\u5165\u7684\u662f\u5496\u5561\u8fd9\u4e2a\u5229\u57fa\u5e02\u573a\uff0c\u76ee\u6807\u662f \u4e00\u4e2a\u6708\u8d5a 1,000 \u7f8e\u91d1 \u3002\u901a\u8fc7\u4e4b\u524d\u7684\u64cd\u4f5c\uff0c\u4f60\u4e86\u89e3\u5230\u4ea7\u54c1\u5747\u4ef7\u4e3a 40 \u7f8e\u91d1 \uff0c\u800c\u4e0e\u5496\u5561\u76f8\u5173\u7684\u4ea7\u54c1\u7684\u4f63\u91d1\u7387\u4e3a 4% \u3002 \u4f46\u662f\uff0c\u4f60\u5e76\u4e0d\u77e5\u9053\u4f60\u6587\u7ae0\u7684\u5e73\u5747\u70b9\u51fb\u7387\uff08\u8bbf\u95ee\u8005\u70b9\u51fb\u4e9a\u9a6c\u900a\u8054\u76df\u94fe\u63a5\u7684\u767e\u5206\u6bd4\uff09\uff0c\u6216\u8005\u4e9a\u9a6c\u900a\u7684\u8f6c\u5316\u7387\uff08\u70b9\u51fb\u8f6c\u5316\u4e3a\u4ea4\u6613\u7684\u767e\u5206\u6bd4\uff09\u3002 \u6211\u4eec\u53ef\u80fd\u60b2\u89c2\u4e00\u70b9\uff0c\u5047\u8bbe\u70b9\u51fb\u7387\u4e3a 10% \uff0c\u8f6c\u5316\u7387\u4e3a 7.5% \u3002 \u8ba9\u6211\u4eec\u628a\u6240\u6709\u7684\u4e1c\u897f\u90fd\u4ee3\u5165\u8ba1\u7b97\uff1a 1,000 / (40 * 4% * 10% * 7.5%) = 83,333 \u770b\u8d77\u6765\u6211\u4eec\u7684\u201c\u8d5a\u94b1\u9875\u9762\u201d\u6bcf\u4e2a\u6708\u9700\u8981 ~ 83,000 \u6b21\u8bbf\u95ee\u624d\u80fd\u5b8c\u6210 1,000 \u7f8e\u91d1/\u6708\u7684\u9500\u552e\u76ee\u6807\u3002 \u5f53\u7136\uff0c\u8fd9\u548c\u7cbe\u786e\u7684\u79d1\u5b66\u8ba1\u7b97\u8fd8\u5dee\u5f88\u8fdc\u3002\u6211\u4eec\u60b2\u89c2\u7684\u4f30\u8ba1\u4e86\u4e00\u4e9b\u773c\u5b57\uff0c \u8fd9\u662f\u6709\u539f\u56e0\u7684\u3002","title":"D. \u4f30\u7b97\u6d41\u91cf\u8981\u6c42"},{"location":"pages/affiliate/amazon-affiliate-marketing/#E-\u4f30\u7b97\u6d41\u91cf\u6f5c\u529b","text":"\u73b0\u5728\u4f60\u5df2\u7ecf\u77e5\u9053\u9700\u8981\u591a\u5c11\u6d41\u91cf\u624d\u80fd\u8d5a\u94b1\uff0c\u63a5\u4e0b\u6765\u4f60\u9700\u8981\u4f30\u7b97\u8be5\u5229\u57fa\u5e02\u573a\u662f\u5426\u6709\u8db3\u591f\u7684\u641c\u7d22\u6d41\u91cf\u6f5c\u529b\u3002 \u8fd9\u91cc\u6709\u4e00\u4e9b\u7b80\u5355\u7684\u65b9\u6cd5\uff1a \u5b89\u88c5\u5e76\u6fc0\u6d3b Ahrefs SEO \u5de5\u5177\u680f \uff0c\u63a5\u7740\u5728 Google \u4e2d\u641c\u7d22\uff1a best\uff08\u6700\u597d\u7684\uff09 [\u4f60\u7684\u5229\u57fa\u9886\u57df\u7684\u67d0\u6b3e\u4ea7\u54c1]\uff08product in your niche\uff09 inurl:best \u4f8b\u5982\uff0c\u5c31\u5496\u5561\u8fd9\u4e2a\u5229\u57fa\u5e02\u573a\u800c\u8a00\uff0c \u6211\u4eec\u7684\u641c\u7d22\u8bcd\u53ef\u80fd\u662f\uff1a \u5982\u679c\u4f60\u5bf9\u641c\u7d22\u8bcd\u4e2d\u7684 inurl:best \u4e0d\u89e3, \u8fd9\u6837\u505a\u7684\u76ee\u7684\u662f\u9650\u5236 Google \u5728\u641c\u7d22\u7ed3\u679c\u4e2d\u53ea\u5448\u73b0\u7f51\u9875\u94fe\u63a5\u5305\u542b \u201cbest\u201d \u7684\u7f51\u9875\u7ed3\u679c\u3002\u5728\u63a5\u4e0b\u6765\u7684\u6b65\u9aa4\u4e2d\uff0c\u4f60\u5c06\u770b\u5230\u5b83\u7684\u91cd\u8981\u6027\u3002 \u4ece\u73b0\u5728\u8d77\uff0c\u5c06\u6ce8\u610f\u529b\u653e\u5728\u641c\u7d22\u7ed3\u679c\u4e2d\u51fa\u73b0\u7684\u6d41\u91cf\u8fbe\u6807\u7684\u5229\u57fa\u7f51\u7ad9\u4e0a\u3002 \u8fd9\u91cc\u7684\u5173\u952e\u8bcd\u662f\u201c\u5229\u57fa\u201d\u3002\u4f60\u5e94\u8be5\u5ffd\u7565\u50cf\u798f\u5e03\u65af\u3001The Wirecutter \u6216\u536b\u62a5\u8fd9\u6837\u7684\u5927\u578b\u901a\u7528\u7ad9\u70b9\u3002\u5c3d\u7ba1\u4ed6\u4eec\u62e5\u6709\u5927\u91cf\u6d41\u91cf\uff0c\u4f46\u662f\u4ed6\u4eec\u4e0d\u662f\u4f60\u9700\u8981\u5173\u6ce8\u7684\u3002\u5982\u679c\u4f60\u6ca1\u6709\u53d1\u73b0\u4efb\u4f55\u5229\u57fa\u7f51\u7ad9\uff0c\u5c1d\u8bd5\u66f4\u6362\u4e0d\u540c\u7684\u4ea7\u54c1\u3002 \u8fd9\u91cc\u6709\u4e00\u4e2a\u6ee1\u8db3\u6211\u4eec\u8981\u6c42\u7684\uff1a \u5c0f\u63d0\u793a. \u786e\u4fdd\u4f60\u67e5\u770b\u7684\u662f\u57df\u540d\u7ea7\u522b\u7684\uff0c\u800c\u4e0d\u662f\u9875\u9762\u7ea7\u522b\u7684\u6d41\u91cf\u3002 \u786e\u4fdd\u4f60\u67e5\u770b\u7684\u662f\u57df\u540d\u7ea7\u522b\u7684\uff0c\u800c\u4e0d\u662f\u9875\u9762\u7ea7\u522b\u7684\u6d41\u91cf\u3002 \u8fd9\u4e2a\u7f51\u7ad9\u6bcf\u4e2a\u6708\u83b7\u5f97 ~210,000 \u6b21\u6765\u81ea\u7f8e\u56fd\u7684\u641c\u7d22\u8bbf\u95ee\uff0c\u4ece\u57df\u540d\u6211\u4eec\u53ef\u4ee5\u5224\u65ad\u8fd9\u662f\u4e00\u4e2a\u5173\u6ce8\u5496\u5561\u7684\u5229\u57fa\u7f51\u7ad9\u3002 \u7136\u800c\uff0c\u6211\u4eec\u5e76\u4e0d\u77e5\u9053\u201c\u8d5a\u94b1\u201d\u9875\u9762\u83b7\u5f97\u4e86\u591a\u5c11\u6d41\u91cf\u3002\u5982\u679c\u5927\u90e8\u5206\u6d41\u91cf\u53bb\u5230\u4e86\u65e0\u5173\u7684\u535a\u5ba2\u6587\u7ae0\uff0c\u90a3\u5bf9\u6211\u4eec\u6765\u8bf4\u4e0d\u662f\u597d\u5146\u5934\u3002 \u5e78\u8fd0\u7684\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 Ahrefs \u7684\u7f51\u7ad9\u5206\u6790 \u62a5\u544a\u66f4\u597d\u5730\u4e86\u89e3\u201c\u8d5a\u94b1\u201d\u9875\u9762\u7684\u6d41\u91cf\u60c5\u51b5\u3002 \u53ea\u9700\u8981\u7c98\u8d34\u57df\u540d\uff0c\u524d\u5f80 \u70ed\u95e8\u9875\u9762 \u62a5\u544a\uff0c\u5728\u201c\u5305\u542b\u201d\u8fc7\u6ee4\u5668\u4e2d\u6dfb\u52a0\u201cbest\u201d\uff0c\u63a5\u7740\u4ece\u201c\u4efb\u610f\u76ee\u6807\u201d\u4e0b\u62c9\u83dc\u5355\u4e2d\u9009\u62e9\u201cURLs\u201d\u3002\u4f60\u4f1a\u53d1\u73b0\u8fc7\u6ee4\u540e\u7684\u9875\u9762\u51e0\u4e4e\u5168\u90e8\u90fd\u662f\u4ea7\u54c1\u7efc\u8ff0\u5e16\u6587\u3002 \u4f60\u53ef\u4ee5\u5728\u8fc7\u6ee4\u62a5\u544a\u7684\u9876\u90e8\u67e5\u770b\u6240\u6709\u9875\u9762\u6708\u5ea6\u641c\u7d22\u6d41\u91cf\u603b\u548c\u7684\u4f30\u503c\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u8fd9\u4e2a\u6570\u5b57\u662f 107,714\u3002 \u4f60\u5e94\u8be5\u8bb0\u5f97\u6211\u4eec\u4e4b\u524d\u4f30\u8ba1\u6bcf\u6708\u9700\u8981 ~83,000 \u4e2a\u8bbf\u5ba2\u624d\u80fd\u8fbe\u5230 1,000 \u7f8e\u91d1/\u6708\u7684\u8d5a\u94b1\u76ee\u6807\uff0c\u770b\u8d77\u6765\u8fd9\u4e2a\u5229\u57fa\u5e02\u573a\u53ef\u4ee5\u8f7b\u677e\u6ee1\u8db3\u6211\u4eec\u7684\u6f5c\u5728\u8981\u6c42\u3002","title":"E. \u4f30\u7b97\u6d41\u91cf\u6f5c\u529b"},{"location":"pages/affiliate/amazon-affiliate-marketing/#F-\u4f30\u7b97\u7ade\u4e89\u5ea6","text":"\u8fdb\u5165\u4e00\u4e2a\u4f60\u9700\u8981\u594b\u6218\u591a\u5e74\u624d\u80fd\u8fbe\u5230\u6d41\u91cf\u76ee\u6807\u7684\u5229\u57fa\u5e02\u573a\u662f\u6ca1\u6709\u610f\u4e49\u7684\u3002\u56e0\u6b64\u4f60\u9700\u8981\u786e\u4fdd\u6709\u4e00\u4e9b\u4e0d\u9700\u8981\u592a\u591a\u7e41\u7410\u7684 SEO \u5de5\u4f5c\u5c31\u53ef\u4ee5\u201c\u7834\u89e3\u201d\u7684\u4e3b\u9898\u3002 SEO \u662f\u4e00\u573a\u590d\u6742\u7684\u535a\u5f08\u3002\u5305\u62ec\u4e86\u8bb8\u591a \u6392\u540d\u56e0\u7d20 \u548c \u6700\u4f73\u5b9e\u8df5 \u3002\u4f46\u6700\u91cd\u8981\u7684\u662f\u4f60\u7684\u9875\u9762\u83b7\u5f97\u4e86\u591a\u5c11\u9ad8\u8d28\u91cf\u5916\u94fe\u3002 Google \u5728 \u5176\u5173\u4e8e\u641c\u7d22\u7b97\u6cd5\u7684\u9875\u9762 \u8ba8\u8bba\u4e86\u5916\u94fe\u7684\u91cd\u8981\u6027\u3002 \u5728\u6211\u4eec\u5f00\u5c55\u7684 \u4e00\u9879\u9488\u5bf9\u5341\u4ebf\u591a\u7f51\u9875\u7684\u7814\u7a76 \u4e2d\uff0c\u6211\u4eec\u8fd8\u89c2\u5bdf\u5230\u4e86\u7f51\u9875\u83b7\u5f97\u7684\u6765\u81ea\u72ec\u7acb\u7f51\u7ad9\uff08\u6307\u5165\u57df\u540d\uff09\u7684\u5916\u94fe\u6570\u91cf\u4e0e\u5176\u641c\u7d22\u6d41\u91cf\u4e4b\u95f4\u7684\u6e05\u6670\u5173\u8054\u3002 \u6240\u4ee5\u5728\u6211\u4eec\u5173\u95ed\u4e4b\u524d\u4e00\u6b65\u6240\u5f97\u7684\u8fc7\u6ee4\u540e\u7684 \u70ed\u95e8\u9875\u9762 \u62a5\u544a\u4e4b\u524d\uff0c\u8bf7\u5173\u6ce8 RDs \uff08\u6307\u5165\u57df\u540d\uff09\u8fd9\u4e00\u680f\u3002\u8be5\u680f\u5c55\u793a\u4e86\u6bcf\u4e2a\u9875\u9762\u7684\u6307\u5165\u57df\u540d\u6570\u91cf\u3002 \u89c2\u5bdf\u90a3\u4e9b\u62e5\u6709\u6d41\u91cf\u7684\u9875\u9762\uff0c\u5982\u679c\u4ed6\u4eec\u7684\u6307\u5165\u57df\u540d\u5f88\u5c11\uff0c\u6216\u8005\u6ca1\u6709\u6307\u5165\u57df\u540d\uff0c\u5c31\u6807\u5fd7\u7740\u8fd9\u4e2a\u8bdd\u9898\u7684\u7ade\u4e89\u5ea6\u4e0d\u9ad8\u3002 \u89c2\u5bdf Homegrounds \u7684\u62a5\u544a\uff0c\u6211\u4eec\u770b\u5230\u8bb8\u591a\u8fd9\u6837\u7684\u9875\u9762\uff1a \u5982\u679c\u5bf9 wareable.com \u6267\u884c\u76f8\u540c\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u4f1a\u770b\u5230\u76f8\u53cd\u7684\u60c5\u51b5\u3002\u51e0\u4e4e\u6bcf\u4e00\u4e2a\u9875\u9762\u90fd\u6709\u6765\u81ea\u6570\u4ee5\u5343\u8ba1\u7684\u6307\u5165\u57df\u540d\u7684\u5916\u94fe\uff0c\u8fd9\u8868\u793a\u8fd9\u4e00\u5229\u57fa\u9886\u57df\u7684\u8bb8\u591a\u8bdd\u9898\u90fd\u5f88\u96be\u653b\u514b\u3002 \u9047\u5230\u8fd9\u79cd\u60c5\u51b5\u65f6\uff0c\u4f60\u6709\u4e24\u4e2a\u9009\u9879\uff1a \u8fdb\u4e00\u6b65\u7f29\u5c0f\u5229\u57fa\u5e02\u573a\u7684\u8303\u56f4\u3002 \u9664\u4e86\u53ef\u7a7f\u6234\u8bbe\u5907\uff0c\u6211\u4eec\u53ef\u80fd\u8fd8\u60f3\u5173\u6ce8\u667a\u80fd\u624b\u8868\u6216\u8005\u5065\u5eb7\u8ffd\u8e2a\u5668\u3002\u5982\u679c\u90a3\u4e9b\u5229\u57fa\u5e02\u573a\u770b\u8d77\u6765\u8fd8\u662f\u8fc7\u4e8e\u5e7f\u6cdb\uff0c\u4f60\u53ef\u4ee5\u628a\u8303\u56f4\u8fdb\u4e00\u6b65\u7f29\u5c0f\u81f3\u50cf\u513f\u7ae5\u667a\u80fd\u624b\u8868\u8fd9\u6837\u7684\u8bdd\u9898\u3002 \u9009\u62e9\u4e0d\u540c\u7684\u5229\u57fa\u5e02\u573a\u3002 \u5982\u679c\u4f60\u5bf9\u7f29\u5c0f\uff08\u5229\u57fa\u5e02\u573a\u7684\uff09\u8303\u56f4\u4e0d\u611f\u5174\u8da3\uff0c\u5c31\u53ef\u4ee5\u653e\u5f03\u539f\u6765\u7684\u4e3b\u610f\uff0c\u91cd\u590d\u4ee5\u4e0a\u6b65\u9aa4\u4ee5\u627e\u5230\u65b0\u7684\u5229\u57fa\u5e02\u573a\u3002","title":"F. \u4f30\u7b97\u7ade\u4e89\u5ea6"},{"location":"pages/affiliate/amazon-affiliate-marketing/#2-\u8fdb\u884c\u5173\u952e\u8bcd\u8c03\u7814","text":"\u627e\u5230\u4e00\u4e2a\u6709\u6f5c\u529b\u7684\u5229\u57fa\u5e02\u573a\u662f\u56f0\u96be\u7684\uff1b\u800c\u5173\u952e\u8bcd\u8c03\u7814\u5219\u76f8\u5bf9\u7b80\u5355\u3002 \u5982\u679c\u4f60\u61d2\u5f97\u52a8\uff0c\u751a\u81f3\u53ef\u4ee5\u76f4\u63a5\u5c06\u4e4b\u524d\u6b65\u9aa4\u8fc7\u6ee4\u51fa\u7684 \u70ed\u95e8\u9875\u9762 \u62a5\u544a\u5bfc\u51fa\u3002\u5b83\u5e94\u8be5\u80fd\u7ed9\u4f60\u8db3\u591f\u591a\u7684\u6709\u5229\u53ef\u56fe\u7684\u201c\u4ea7\u54c1\u7efc\u8ff0\u201d\u8bdd\u9898\uff0c\u8fd9\u591f\u4f60\u5fd9\u597d\u51e0\u4e2a\u6708\u4e86\u3002 \u7136\u800c\uff0c\u5982\u679c\u4f60\u60f3\u66f4\u6709\u7b56\u7565\u5e76\u627e\u51fa\u66f4\u591a\u5173\u952e\u8bcd\uff0c\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a \u524d\u5f80 Ahrefs \u7684\u5173\u952e\u8bcd\u5206\u6790\u5de5\u5177 ; \u8f93\u5165\u51e0\u4e2a\u548c\u5229\u57fa\u5e02\u573a\u53ca\u4ea7\u54c1\u76f8\u5173\u7684\u201c\u79cd\u5b50\u201d\u5173\u952e\u8bcd\uff1b \u524d\u5f80\u201c\u6240\u6709\u5173\u952e\u8bcd\u201d\u62a5\u544a\u3002 \u5982\u679c\u6211\u4eec\u60f3\u8fdb\u5165\u5496\u5561\u8fd9\u4e2a\u5229\u57fa\u5e02\u573a\uff0c\u754c\u9762\u770b\u8d77\u6765\u4f1a\u662f\u8fd9\u6837\u7684\uff1a \u4f60\u5f88\u53ef\u80fd\u4ece\u8fd9\u4efd\u62a5\u544a\u4e2d\u770b\u5230\u6210\u767e\u4e0a\u5343\u4e2a\u5173\u952e\u8bcd\uff0c\u4f46\u5176\u4e2d\u6709\u4e00\u4e9b\u662f\u65e0\u5173\u7684\u3002\u56e0\u6b64\u6211\u4eec\u63a5\u4e0b\u6765\u4f1a\u4f7f\u7528\u5185\u5efa\u7684\u8fc7\u6ee4\u5668\u627e\u51fa\u6211\u4eec\u9700\u8981\u7684\u4e09\u79cd\u5173\u952e\u8bcd\u3002","title":"2. \u8fdb\u884c\u5173\u952e\u8bcd\u8c03\u7814"},{"location":"pages/affiliate/amazon-affiliate-marketing/#A-\u627e\u5230\u4ea7\u54c1\u7efc\u8ff0\u5173\u952e\u8bcd","text":"\u91cd\u7533\u4e00\u4e0b\uff0c\u4ea7\u54c1\u7efc\u8ff0\u5173\u952e\u8bcd\u3014\u5982\uff1a\u201cbest coffee machine\u201d\uff08\u201c\u6700\u597d\u7684\u5496\u5561\u673a\u201d\uff09\u3001\u201cbest coffee grinder\u201d\u3015\u901a\u5e38\u662f\u4e9a\u9a6c\u900a\u8054\u76df\u5ba2\u7f51\u7ad9\u7684\u6700\u5927\u5229\u6da6\u6765\u6e90\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u627e\u51fa\u90a3\u4e9b\u62e5\u6709\u6f5c\u5728\u6d41\u91cf\uff0c\u4f46\u662f\u6392\u540d\u96be\u5ea6\u5e76\u4e0d\u662f\u592a\u9ad8\u7684\u4ea7\u54c1\u7efc\u8ff0\u5173\u952e\u8bcd\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u9700\u8981\u6dfb\u52a0\u4ee5\u4e0b\u4e09\u4e2a\u8fc7\u6ee4\u5668\uff1a \u5305\u542b\uff1a \u201cbest\u201d **\u5173\u952e\u8bcd\u96be\u5ea6 ( KD ) : <=10 * \u641c\u7d22\u91cf:** >=500 \u5c0f\u63d0\u793a. \u4f60\u53ef\u4ee5\u7a0d\u5fae\u653e\u5bbd\u5bf9\u641c\u7d22\u91cf\u9608\u503c\u7684\u9650\u5236\uff0c\u8fd9\u4e2a\u6570\u5b57\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u4e0e\u5229\u57fa\u5e02\u573a\u6709\u5173\u3002 \u4f60\u53ef\u4ee5\u7a0d\u5fae\u653e\u5bbd\u5bf9\u641c\u7d22\u91cf\u9608\u503c\u7684\u9650\u5236\uff0c\u8fd9\u4e2a\u6570\u5b57\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u4e0e\u5229\u57fa\u5e02\u573a\u6709\u5173\u3002 \u73b0\u5728\u4f60\u5e94\u8be5\u53ef\u4ee5\u770b\u5230\u4e00\u5f20\u6309\u7167\u6708\u5ea6\u641c\u7d22\u91cf\u6392\u5e8f\u7684\u6392\u540d\u96be\u5ea6\u8f83\u4f4e\u7684\u76f8\u5173\u5173\u952e\u8bcd\u5217\u8868\u3002 \u73b0\u5728\uff0c\u6ce8\u610f\u5173\u952e\u8bcd\u96be\u5ea6\u6307\u6807\u53ea\u80fd\u7ed9\u4f60\u5173\u4e8e\u6392\u540d\u96be\u5ea6\u7684\u7c97\u7565\u63d0\u793a\u3002\u800c\u6708\u5ea6\u641c\u7d22\u91cf\u53ea\u80fd\u7ed9\u51fa\u8be5\u8bdd\u9898\u6d41\u91cf\u6f5c\u529b\u7684\u7c97\u7565\u4f30\u8ba1\u3002 \u6240\u4ee5\u63a5\u4e0b\u6765\u4f60\u9700\u8981\u505a\u7684\u662f\u7b5b\u9009\u62a5\u544a\uff0c\u9010\u4e00\u5206\u6790\u5173\u952e\u8bcd\uff0c\u5e76\u5c06\u4f18\u8d28\u7684\u4e3b\u9898\u5173\u952e\u8bcd\u4fdd\u5b58\u5230\u5173\u952e\u8bcd\u5217\u8868\u4e2d\u3002 \u5982\u679c\u6709\u4e0a\u5343\u4e2a\u5173\u952e\u8bcd\uff0c\u4e5f\u65e0\u9700\u62c5\u5fc3\u3002\u4f60\u4e0d\u9700\u8981\u5206\u6790\u6240\u6709\u7684\u5173\u952e\u8bcd\uff0c\u53ea\u9700\u8981 20~50 \u4e2a\u5173\u952e\u8bcd\u5c31\u53ef\u4ee5\u5f00\u59cb\u3002 \u6240\u4ee5\u6d41\u7a0b\u662f\u4ec0\u4e48\u5462\uff1f \u5728\u6211\u4eec\u8ba8\u8bba\u6280\u672f\u5185\u5bb9\u4e4b\u524d\uff0c\u6709\u4e00\u70b9\u5f88\u91cd\u8981\uff0c\u90a3\u5c31\u662f\u5728\u5bfb\u627e\u5173\u952e\u8bcd\u65f6\uff0c\u4f60\u9700\u8981\u8fd0\u7528\u5e38\u8bc6\u3002\u5982\u679c\uff08\u5019\u9009\uff09\u5173\u952e\u8bcd\u662f\u201cbest coffee grinder\u201d\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8bcd\u662f\u6709\u610f\u4e49\u7684\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u4ea7\u54c1\u4e9a\u9a6c\u900a\u6709\u552e\u3002\u5982\u679c\uff08\u5019\u9009\uff09\u5173\u952e\u8bcd\u4e0e\u4f60\u53ef\u80fd\u4f1a\u5728\u4e9a\u9a6c\u900a\u8d2d\u4e70\u7684\u5546\u54c1\u65e0\u5173\uff0c\u4f8b\u5982\u201cbest coffee in los angeles\u201d\uff08\u201c\u6d1b\u6749\u77f6\u6700\u597d\u7684\u5496\u5561\u201d\uff09\uff0c\u4f60\u53ef\u4ee5\u9a6c\u4e0a\u5c06\u5b83\u6392\u9664\u6389\u3002 \u4e3a\u4e86\u627e\u51fa\u6709\u610f\u4e49\u7684\u5173\u952e\u8bcd\uff0c\u4f60\u53ef\u4ee5\u70b9\u51fb SERP \u6309\u94ae\uff0c\u67e5\u770b Google \u4e2d\u4e4b\u4e8e\u8be5\u5173\u952e\u8bcd\u6392\u540d\u9760\u524d\u7684\u9875\u9762\u2026\u2026 \u2026\u2026 \u7136\u540e\u6309\u7167\u8fd9\u5f20\u6d41\u7a0b\u56fe\u7ee7\u7eed\u5de5\u4f5c\uff1a \u5728\u8fdb\u4e00\u6b65\u8ba8\u8bba\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u7b80\u5355\u89e3\u91ca\u4e00\u4e0b\u57df\u540d\u8bc4\u5206\u7684\u6982\u5ff5\u3002 \u57df\u540d\u8bc4\u5206\uff08DR\uff09 \u6839\u636e\u7f51\u7ad9\u7684\u5916\u94fe\u60c5\u51b5\u6765\u8861\u91cf\u5b83\u7684\u6743\u5a01\u5ea6\u3002\u8303\u56f4\u5728 0 \u5230 100 \u4e4b\u95f4\u3002\u901a\u5e38\u6765\u8bf4\uff0c\u8fd9\u4e2a\u6570\u503c\u8d8a\u9ad8\uff0c\u7f51\u7ad9\u7684\u6743\u5a01\u5ea6\u5c31\u8d8a\u9ad8\u3002 \u8fd9\u662f\u6211\u4eec\u6d41\u7a0b\u7684\u4e00\u90e8\u5206\uff0c\u56e0\u4e3a\u6211\u4eec\u8981\u627e\u7684\u662f\u4e00\u4e2a\u5168\u65b0\u6216\u8005\u76f8\u5bf9\u8f83\u65b0\u7684\u7f51\u7ad9\u80fd\u591f\u53d6\u5f97\u6392\u540d\u7684\u5173\u952e\u8bcd\uff0c\u8fd9\u6837\u7684\u7f51\u7ad9\u7684\u6743\u5a01\u5ea6\u5f80\u5f80\u8f83\u4f4e\u3002\u5982\u679c\u5df2\u7ecf\u6709\u4f4e\u6743\u5a01\u5ea6\u7684\u7f51\u7ad9\u83b7\u5f97\u4e86\u6392\u540d\uff0c\u8fd9\u5c31\u9884\u793a\u7740\u6211\u4eec\u7684\u7f51\u7ad9\u4e5f\u80fd\u83b7\u5f97\u6392\u540d\u3002 \u8fd9\u91cc\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u5173\u952e\u8bcd\u793a\u4f8b\uff1a \u6807\u8bb0\u51fa\u7684\u7f51\u9875\u6709 4 \u4e2a\u6307\u5165\u57df\u540d\uff0c\u6bcf\u4e2a\u6708\u83b7\u5f97\u6570\u767e\u4e2a\u6765\u81ea\u7f8e\u56fd\u7684\u641c\u7d22\u6d41\u91cf\uff0c\u5e76\u4e14\u5904\u4e8e\u4e00\u4e2a\u70ed\u95e8\u7684\u3001\u4f4e\u6743\u5a01\u5ea6\uff08DR\uff09\u7684\u7f51\u7ad9\u4e4b\u4e0a\u3002 \u8fd9\u91cc\u6709\u4e00\u4e2a\u4e0d\u592a\u597d\u7684\u5173\u952e\u8bcd\u793a\u4f8b\uff1a \u867d\u7136\u641c\u7d22\u7ed3\u679c\u4e2d\u6709\u51e0\u4e2a\u9875\u9762\u6765\u81ea\u6307\u5165\u57df\u540d\u8f83\u5c11\u7684\u4f4e\u6743\u5a01\u5ea6\u5229\u57fa\u7f51\u7ad9\uff0c\u4f46\u662f\u4ed6\u4eec\u90fd\u6ca1\u6709\u80fd\u6bcf\u4e2a\u6708\u83b7\u5f97\u4e00\u5b9a\u91cf\u7684\u641c\u7d22\u8bbf\u95ee\u91cf\u3002 \u4e0b\u56fe\u5c55\u793a\u4e86\u53d1\u73b0\u4f18\u80dc\u5173\u952e\u8bcd\u540e\u5982\u4f55\u5c06\u4ed6\u4eec\u6dfb\u52a0\u81f3\u5173\u952e\u8bcd\u5217\u8868\u3002 \u4e00\u76f4\u8fd9\u6837\u505a\uff0c\u76f4\u5230\u4f60\u627e\u5230 25~50 \u4e2a\u5173\u952e\u8bcd\u3002","title":"A. \u627e\u5230\u4ea7\u54c1\u7efc\u8ff0\u5173\u952e\u8bcd"},{"location":"pages/affiliate/amazon-affiliate-marketing/#B-\u627e\u5230\u4ea7\u54c1\u8bc4\u6d4b\u5173\u952e\u8bcd","text":"\u50cf \u201caeropress review\u201d\uff08\u201c\u7231\u4e50\u538b\u8bc4\u6d4b\u201d\uff09\u548c \u201cbaratza virtuoso \u8bc4\u6d4b\u201d \u8fd9\u6837\u7684\u8bcd\u5c31\u662f\u4ea7\u54c1\u8bc4\u6d4b\u5173\u952e\u8bcd\u3002 \u5c3d\u7ba1\u6bcf\u4e2a\u7ec6\u5206\u5e02\u573a\u7684\u60c5\u51b5\u90fd\u4e0d\u540c\uff0c\u8fd9\u4e9b\u5173\u952e\u8bcd\u7684\u6d41\u91cf\u6f5c\u529b\u9c9c\u6709\u80fd\u4e0e\u4ea7\u54c1\u7efc\u8ff0\u5173\u952e\u8bcd\u5339\u654c\u7684\u3002\u4f60\u53ef\u80fd\u53ea\u80fd\u627e\u5230\u5c11\u6570\u51e0\u4e2a\u503c\u5f97\u53bb\u505a\u6392\u540d\u7684\u8bc4\u6d4b\u5173\u952e\u8bcd\u3002 \u90a3\u4f55\u5fc5\u8fd8\u8981\u4e3a\u4ed6\u4eec\u8d39\u5fc3\u5462\uff1f \u8fd9\u4e2a\u4e3b\u8981\u539f\u56e0\uff1a \u5c3d\u7ba1\u8fd9\u4e9b\u8bcd\u7684\u6d41\u91cf\u6f5c\u529b\u4e0d\u662f\u5341\u5206\u5de8\u5927\uff0c\u4f46\u662f\u8981\u83b7\u5f97\u8fd9\u4e9b\u5173\u952e\u8bcd\u8f83\u9ad8\u7684\u6392\u540d\u76f8\u5bf9\u7b80\u5355\uff1b \u4ea7\u54c1\u8bc4\u6d4b\u53ef\u4ee5\u52a9\u529b\u4ea7\u54c1\u7efc\u8ff0\u7684SEO\uff08\u7a0d\u540e\u8be6\u8ff0\uff09\u3002 \u4e3a\u4e86\u627e\u51fa\u8fd9\u4e9b\u5173\u952e\u8bcd\uff0c\u4f60\u9700\u8981\u5728\u201c\u6240\u6709\u5173\u952e\u8bcd\u201d\u62a5\u544a\u4e2d\u52a0\u5165\u4ee5\u4e0b\u8fc7\u6ee4\u6761\u4ef6\uff1a \u5305\u542b\uff1a \u201creview\u201d \u5173\u952e\u8bcd\u96be\u5ea6 \uff1a<=10 \u641c\u7d22\u91cf\uff1a >=200 \u4ee5\u4e0b\u662f\u6211\u4eec\u7684\u5496\u5561\u4f8b\u5b50\u663e\u793a\u7684\u7ed3\u679c\uff1a \u8fd9\u4e9b\u5e76\u4e0d\u90fd\u662f\u8bc4\u6d4b\u7c7b\u7684\u5173\u952e\u8bcd\uff0c\u4f46\u662f\u4f60\u53ef\u4ee5\u8f7b\u6613\u53d1\u73b0\u4ed6\u4eec\u3002 \u5bf9\u4e8e\u90a3\u4e9b\u6709\u610f\u4e49\u7684\u5173\u952e\u8bcd\uff0c\u4f60\u53ef\u4ee5\u6267\u884c\u4e0a\u9762\u7684\u6d41\u7a0b\u56fe\uff0c\u5c06\u4f18\u80dc\u7684\u5173\u952e\u8bcd\u52a0\u5165\u5173\u952e\u8bcd\u5217\u8868\u3002","title":"B. \u627e\u5230\u4ea7\u54c1\u8bc4\u6d4b\u5173\u952e\u8bcd"},{"location":"pages/affiliate/amazon-affiliate-marketing/#C-\u627e\u51fa\u535a\u5ba2\u5173\u952e\u8bcd","text":"\u5927\u591a\u6570\u4e9a\u9a6c\u900a\u8054\u76df\u5ba2\u7f51\u7ad9\u90fd\u4e0d\u53ea\u53d1\u5e03\u201c\u8d5a\u94b1\u201d\u5e16\u6587\u3002\u4ed6\u4eec\u8fd8\u53d1\u5e03\u535a\u5ba2\u6587\u7ae0\u548c\u5176\u4ed6\u4fe1\u606f\u7c7b\u5185\u5bb9\u3002 \u6211\u4eec\u6765\u770b\u4e00\u4e0b homegrounds.co\uff1a \u4ed6\u4eec\u7f51\u7ad9\u6709\u4e00\u6574\u7248\u5185\u5bb9\u4e13\u95e8\u63d0\u4f9b\u6709\u7528\u7684\u51b2\u6ce1\u6307\u5357\u3002 \u8fd9\u6837\u505a\u662f\u6709\u610f\u4e49\u7684\uff0c\u539f\u56e0\u6211\u4eec\u4f1a\u5728\u540e\u9762\u8fdb\u884c\u8ba8\u8bba\u3002\u73b0\u5728\uff0c\u6211\u4eec\u60f3\u8981\u627e\u51fa\u4e00\u4e9b\u4fe1\u606f\u7c7b\u7684\u5173\u952e\u8bcd\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u56f4\u7ed5\u8fd9\u4e9b\u5173\u952e\u8bcd\u6765\u5199\u4f5c\u4e00\u4e9b\u535a\u5ba2\u6587\u7ae0\u548c\u6307\u5357\u3002 \u4e3a\u4e86\u627e\u51fa\u8fd9\u4e9b\u5173\u952e\u8bcd\uff0c\u9700\u8981\u5728\u201c\u6240\u6709\u5173\u952e\u8bcd\u201d\u62a5\u544a\u4e2d\u52a0\u8fd9\u4e9b\u8fc7\u6ee4\u6761\u4ef6\uff1a \u5305\u542b\uff1a who, what, when, where, why, how, guide, tutorial, ideas, tips \u641c\u7d22\u91cf\uff1a >=500 \u5bfb\u627e\u90a3\u4e9b\u4e0e\u4f60\u4f1a\u5728\u7efc\u8ff0\u91cc\u8bc4\u6d4b\u7684\u4ea7\u54c1\u5bc6\u5207\u8054\u7cfb\u7684\u8bdd\u9898\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u5496\u5561\u662f\u4f60\u7684\u7ec6\u5206\u5e02\u573a\uff0c\u90a3\u4e48\u50cf\u201chow to use a frech press\u201d\uff08\u201c\u5982\u4f55\u4f7f\u7528\u6cd5\u5f0f\u6ee4\u538b\u58f6\u201d\uff09\u548c\u201chow to make coffee\u201d\uff08\u201c\u5982\u4f55\u716e\u5496\u5561\u201d\uff09\u8fd9\u6837\u7684\u8bdd\u9898\u5c31\u5f88\u6709\u610f\u4e49\u4e86\uff0c\u56e0\u4e3a\u4f60\u51e0\u4e4e\u80af\u5b9a\u4f1a\u8bc4\u6d4b\u6cd5\u5f0f\u6ee4\u538b\u58f6\u548c\u5496\u5561\u673a\u3002 \u8fd9\u4e2a\u90e8\u5206\u4e0d\u8981\u60f3\u592a\u591a\u3002\u53ea\u9700\u8981\u5728\u5217\u8868\u4e2d\u6dfb\u52a0 20 \u5230 50 \u4e2a\u5173\u952e\u8bcd\uff0c\u5c31\u53ef\u4ee5\u7ee7\u7eed\u4e86\u3002","title":"C. \u627e\u51fa\u535a\u5ba2\u5173\u952e\u8bcd"},{"location":"pages/affiliate/amazon-affiliate-marketing/#3-\u521b\u5efa\u7c7b\u578b\u6b63\u786e\u7684\u5185\u5bb9","text":"\u5047\u8bbe\u4f60\u5df2\u7ecf\u9009\u5b9a\u4e86\u57df\u540d\uff0c\u505a\u597d\u4e86\u7f51\u7ad9\u3002\u662f\u65f6\u5019\u5f00\u59cb\u5199\u4f5c\u548c\u53d1\u5e03\u4e00\u4e9b\u5185\u5bb9\u4e86\u3002 \u5728\u8fd9\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u5c06\u8ba8\u8bba\u5982\u4f55\u521b\u5efa\u4ee5\u4e0b\u4e09\u79cd\u7c7b\u578b\u7684\u5185\u5bb9\uff1a \u4ea7\u54c1\u7efc\u8ff0 \u4ea7\u54c1\u8bc4\u6d4b \u535a\u5ba2\u6587\u7ae0 \u8ba9\u6211\u4eec\u4ece\u6700\u91cd\u8981\u7684\u5f00\u59cb\u3002","title":"3. \u521b\u5efa\u7c7b\u578b\u201c\u6b63\u786e\u201d\u7684\u5185\u5bb9"},{"location":"pages/affiliate/amazon-affiliate-marketing/#A-\u4ea7\u54c1\u7efc\u8ff0","text":"\u8bf7\u9075\u5faa\u4ee5\u4e0b\u56db\u4e2a\u6b65\u9aa4\uff1a \u627e\u51fa\u9700\u8981\u5305\u542b\u7684\u4ea7\u54c1 \u627e\u51fa\u4eba\u4eec\u5173\u5fc3\u7684\u5185\u5bb9 \u627e\u51fa\u6700\u597d\u7684\u4ea7\u54c1 \u5199\u8d77\u6765","title":"A. \u4ea7\u54c1\u7efc\u8ff0"},{"location":"pages/affiliate/amazon-affiliate-marketing/#1-\u627e\u51fa\u9700\u8981\u5305\u542b\u7684\u4ea7\u54c1","text":"\u4ea7\u54c1\u7efc\u8ff0\u4f1a\u5bf9\u591a\u4e2a\u4ea7\u54c1\u8fdb\u884c\u8bc4\u6d4b\uff0c\u4f46\u662f\u4f60\u5982\u4f55\u77e5\u9053\u5e94\u8be5\u8bc4\u6d4b\u54ea\u4e9b\u4ea7\u54c1\u5462\uff1f \u8fd9\u91cc\u4ecb\u7ecd\u4e00\u4e9b\u65b9\u6cd5\uff1a","title":"1. \u627e\u51fa\u9700\u8981\u5305\u542b\u7684\u4ea7\u54c1"},{"location":"pages/affiliate/amazon-affiliate-marketing/#\u901b\u4e9a\u9a6c\u900a","text":"\u9762\u5bf9\u73b0\u5b9e\u5427\uff1a\u4e9a\u9a6c\u900a\u5728\u63a8\u8350\u6700\u597d\u7684\u4ea7\u54c1\u65b9\u6cd5\u505a\u5f97\u76f8\u5f53\u4e0d\u9519\u3002\u770b\u770b \u201ccoffee grinder\u201d \u8fd9\u4e2a\u5173\u952e\u8bcd\u7684\u524d\u51e0\u4e2a\u641c\u7d22\u7ed3\u679c\u5c31\u77e5\u9053\u4e86\u3002 \u8fd9\u4e9b\u4ea7\u54c1\u5750\u62e5\u6210\u767e\u4e0a\u5343\u6761\u8bc4\u8bba\uff0c\u4e14\u6ca1\u6709\u4e00\u4e2a\u4ea7\u54c1\u7684\u8bc4\u5206\u4f4e\u4e8e\u56db\u661f\u3002 \u56e0\u6b64\u4e00\u79cd\u4e86\u89e3\u4f60\u60f3\u8981\u4e86\u89e3\u7684\u4ea7\u54c1\u7684\u597d\u529e\u6cd5\u662f\u5728\u4e9a\u9a6c\u900a\u641c\u7d22\u8fd9\u7c7b\u4ea7\u54c1\u3002","title":"\u901b\u4e9a\u9a6c\u900a"},{"location":"pages/affiliate/amazon-affiliate-marketing/#\u67e5\u770b\u9ad8\u6392\u540d\u9875\u9762","text":"\u901b\u4e9a\u9a6c\u900a\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u8d77\u70b9\uff0c\u4f46\u5b83\u53ef\u80fd\u4f1a\u8ba9\u4f60\u4e0d\u77e5\u6240\u63aa\u3002\u53e6\u5916\u4e00\u79cd\u6bd4\u8f83\u597d\u7684\u7b56\u7565\u662f\u5728\u6392\u540d\u9760\u524d\u7684\u9875\u9762\u4e2d\u5bfb\u627e\u5171\u540c\u7684\u5185\u5bb9\u3002 \u4f8b\u5982\uff0c\u201cbest coffee grinder\u201d \u8fd9\u4e2a\u5173\u952e\u8bcd\u6392\u540d\u9760\u524d\u7684\u7ed3\u679c\u4e2d\uff0c\u6709\u4e09\u4e2a\u90fd\u5c06 Baratza Encore Conical \u7814\u78e8\u673a\u5217\u4e3a\u6700\u597d\u7684\u4e4b\u4e00\uff1a \u4f60\u4e0d\u9700\u8981\u4efb\u4f55\u8fc7\u4eba\u4e4b\u5904\u90fd\u80fd\u77e5\u9053\u8fd9\u6b3e\u4ea7\u54c1\u503c\u5f97\u51fa\u73b0\u5728\u4e00\u7bc7\u4ea7\u54c1\u7efc\u8ff0\u4e2d\u3002","title":"\u67e5\u770b\u9ad8\u6392\u540d\u9875\u9762"},{"location":"pages/affiliate/amazon-affiliate-marketing/#2-\u627e\u51fa\u4eba\u4eec\u5173\u5fc3\u7684\u5185\u5bb9","text":"\u4e3a\u4e86\u521b\u5efa\u4e00\u7bc7\u6709\u7528\u7684\u4ea7\u54c1\u7efc\u8ff0\uff0c\u4f60\u9996\u5148\u9700\u8981\u4e86\u89e3\u54ea\u4e9b\u4ea7\u54c1\u5c5e\u6027\u5bf9\u4e70\u5bb6\u6765\u8bf4\u662f\u91cd\u8981\u7684\u3002 \u8fd9\u91cc\u6709\u4e00\u4e9b\u65b9\u6cd5\u53ef\u4ee5\u6765\u5e2e\u52a9\u4f60\u786e\u8ba4\uff1a","title":"2. \u627e\u51fa\u4eba\u4eec\u5173\u5fc3\u7684\u5185\u5bb9"},{"location":"pages/affiliate/amazon-affiliate-marketing/#\u6d4f\u89c8\u4e9a\u9a6c\u900a\u4ea7\u54c1\u8bc4\u8bba","text":"\u6d4f\u89c8\u51e0\u4e2a\u4f60\u53ef\u80fd\u4f1a\u653e\u8fdb\u6587\u7ae0\u4e2d\u7684\u4ea7\u54c1\uff0c\u67e5\u770b\u7528\u6237\u8bc4\u8bba\u3002\u4f60\u5f88\u5feb\u5c31\u4f1a\u660e\u767d\u54ea\u4e9b\u4e1c\u897f\u5bf9\u4e70\u5bb6\u6765\u8bf4\u662f\u91cd\u8981\u7684\u3002 \u4f8b\u5982\uff0c\u67e5\u770b\u4e0b\u9762\u7684\u8bc4\u8bba\uff0c\u53ea\u9700\u8981\u51e0\u79d2\u949f\u4f60\u5c31\u53ef\u4ee5\u77e5\u9053\u7814\u78e8\u7c92\u5ea6\u3001\u6e05\u6d01\u7b80\u5355\u548c\u4fbf\u4e8e\u643a\u5e26\u662f\u4eba\u4eec\u5728\u9009\u8d2d\u4e00\u53f0\u624b\u52a8\u5496\u5561\u7814\u78e8\u673a\u65f6\u4f1a\u8003\u8651\u7684\u91cd\u8981\u56e0\u7d20\uff1a \u5982\u679c\u4f60\u4e0d\u559c\u6b22\u6d4f\u89c8\u6bcf\u4e00\u5219\u8bc4\u8bba\uff0c\u53ef\u4ee5\u67e5\u770b \u201cRead reviews that mention\u201d\uff08\u201c\u8bc4\u8bba\u63d0\u53ca\u7684\u2026\u2026\u201d\uff09\u677f\u5757\u7684\u6807\u7b7e\u3002 \u4e9a\u9a6c\u900a\u4ece\u8bc4\u8bba\u4e2d\u63d0\u53d6\u8fd9\u4e9b\u4fe1\u606f\uff0c\u8fd9\u4e9b\u4fe1\u606f\u5f80\u5f80\u53ef\u4ee5\u63d0\u793a\u4eba\u4eec\u6240\u5173\u5fc3\u7684\u4e1c\u897f\u3002","title":"\u6d4f\u89c8\u4e9a\u9a6c\u900a\u4ea7\u54c1\u8bc4\u8bba"},{"location":"pages/affiliate/amazon-affiliate-marketing/#\u67e5\u770b\u6392\u540d\u9760\u524d\u7684\u9875\u9762","text":"\u6d4f\u89c8\u4e00\u4e9b\u6392\u540d\u9760\u524d\u7684\u9875\u9762\uff0c\u5bfb\u627e\u5171\u540c\u70b9\u3002 \u4f8b\u5982\uff0c\u8fd9\u91cc\u4e24\u7bc7\u5496\u5561\u7814\u78e8\u673a\u7684\u7efc\u8ff0\u6587\u7ae0\u90fd\u63d0\u5230\u4e86\u7814\u78e8\u5747\u5300\u5ea6\uff1a","title":"\u67e5\u770b\u6392\u540d\u9760\u524d\u7684\u9875\u9762"},{"location":"pages/affiliate/amazon-affiliate-marketing/#\u5f00\u5c55\u5185\u5bb9\u5dee\u8ddd\u673a\u4f1a\u5206\u6790","text":"\u5185\u5bb9\u5dee\u8ddd\u673a\u4f1a\u5206\u6790\u53ef\u4ee5\u5c55\u793a\u591a\u4e2a\u9875\u9762\u5171\u6709\u7684\u6392\u540d\u5173\u952e\u8bcd\u3002 \u901a\u8fc7\u5206\u6790\u4e4b\u4e8e\u4f60\u7684\u76ee\u6807\u5173\u952e\u8bcd\u6392\u540d\u9760\u524d\u7684\u9875\u9762\uff0c\u4f60\u53ef\u4ee5\u8fdb\u4e00\u6b65\u4e86\u89e3\u4eba\u4eec\u611f\u5174\u8da3\u7684\u5185\u5bb9\u3002 \u5f00\u5c55\u5206\u6790\u65f6\uff0c\u53ea\u9700\u8981\u5c06\u6392\u540d\u9760\u524d\u7684\u94fe\u63a5\u7c98\u8d34\u8fdb Ahrefs \u7684\u5185\u5bb9\u5dee\u8ddd\u673a\u4f1a\u5206\u6790\u5de5\u5177 \u4e2d\u3002 \u5982\u679c\u6211\u4eec\u5c31 \u201cbest coffee grinder\u201d \u8fd9\u4e2a\u5173\u952e\u8bcd\u5206\u6790\u4e09\u4e2a\u6392\u540d\u9760\u524d\u7684\u9875\u9762\uff0c\u4f1a\u6ce8\u610f\u5230\u4ed6\u4eec\u540c\u65f6\u8fd8\u4e4b\u4e8e\u4e0e\u5496\u5561\u7814\u78e8\u673a\u79cd\u7c7b\u76f8\u5173\u7684\u5173\u952e\u8bcd\u6709\u6392\u540d\uff0c\u5305\u62ec\uff1a\u76d8\u5f0f\u78e8\u8c46\u673a\uff08burr grinder\uff09\u3001\u624b\u52a8\u5496\u5561\u7814\u78e8\u673a\uff08manual coffee grinder\uff09\u3001\u624b\u6447\u5496\u5561\u7814\u78e8\u673a\uff08hand grinder\uff09\u3001\u7535\u52a8\u5496\u5561\u7814\u78e8\u673a\uff08electric grinder\uff09\u7b49\u3002 \u6211\u4eec\u8fd8\u6ce8\u610f\u5230\u4eba\u4eec\u4f1a\u6839\u636e\u5496\u5561\u79cd\u7c7b\u6765\u641c\u7d22\u6700\u597d\u7684\u7814\u78e8\u673a\uff0c\u5982\uff1a\u6d53\u7f29\u5496\u5561\uff08espresso\uff09\uff0c\u6cd5\u5f0f\u6ee4\u538b\u58f6\uff08french press\uff09\u5496\u5561\u7b49\u3002 \u4ea7\u54c1\u7684\u505a\u5de5\u548c\u6750\u8d28\u4f3c\u4e4e\u4e5f\u5f88\u91cd\u8981\u3002 \u6211\u4eec\u5728\u64b0\u5199\u6587\u7ae0\u3001\u8c03\u7814\u6216\u8005\u6d4b\u8bd5\u4ea7\u54c1\u7684\u65f6\u5019\u4f1a\u8003\u8651\u8fd9\u4e9b\u56e0\u7d20\u3002","title":"\u5f00\u5c55\u5185\u5bb9\u5dee\u8ddd\u673a\u4f1a\u5206\u6790"},{"location":"pages/affiliate/amazon-affiliate-marketing/#3-\u627e\u51fa\u6700\u597d\u7684\u4ea7\u54c1","text":"\u5927\u591a\u6570\u521a\u5f00\u59cb\u505a\u4e9a\u9a6c\u900a\u8054\u76df\u5ba2\u7f51\u7ad9\u7684\u4eba\u90fd\u4e0d\u4f1a\u81ea\u5df1\u53bb\u6d4b\u8bd5\u4ea7\u54c1\u3002\u76f8\u53cd\uff0c\u4ed6\u4eec\u4f1a\u5728\u7ebf\u7814\u7a76\u4ea7\u54c1\uff0c\u4ece\u5176\u4ed6\u8bc4\u6d4b\u4e2d\u63d0\u53d6\u89c2\u70b9\u3002 \u5c3d\u7ba1\u4f60\u53ef\u4ee5\u8fd9\u6837\u505a\uff0c\u4f46\u662f\u6211\u4eec\u5e76\u4e0d\u5efa\u8bae\uff0c\u539f\u56e0\u6709\u4e8c\uff1a \u6d4b\u8bd5\u4ea7\u54c1\u53ef\u4ee5\u5e2e\u52a9\u4f60\u4ece\u4eba\u7fa4\u4e2d\u8131\u9896\u800c\u51fa \uff0c\u5efa\u7acb E\u2011A-T \uff0c\u5e76\u4f7f \u5916\u94fe\u5efa\u8bbe \u53d8\u5f97\u66f4\u5bb9\u6613\u3002 \u7f51\u7ad9\u4e0a\u5145\u65a5\u7740\u201c\u6211\u4e5f\u662f\u201d\u7684\u8054\u76df\u5e16\u6587 \uff0c\u4ed6\u4eec\u4ece\u5176\u4ed6\u6587\u7ae0\u4e2d\u6458\u53d6\u89c2\u70b9\uff0c\u5bf9\u641c\u7d22\u8005\u6765\u8bf4\u8fd9\u4e9b\u5185\u5bb9\u51e0\u4e4e\u6ca1\u6709\u7528\u5904\u3002 \u5982\u679c\u4f60\u60f3\u521b\u5efa\u4e00\u4e2a\u957f\u671f\u6709\u7528\u7684\u7f51\u7ad9\uff0c\u5e76\u4e14\u80fd\u591f\u8d1f\u62c5\u5f97\u8d77\uff0c\u90a3\u4e48\u5bf9\u4ea7\u54c1\u8fdb\u884c\u771f\u6b63\u7684\u8bc4\u6d4b\u662f\u503c\u5f97\u7684\u3002 \u4ee5\u4e0b\u662f\u4e00\u4e9b\u964d\u4f4e\u6210\u672c\u7684\u65b9\u6cd5\uff1a \u4ece\u4fbf\u5b9c\u7684\u4ea7\u54c1\u5f00\u59cb\u3002 \u81ea\u5df1\u6d4b\u8bd5 10 \u53f0 500 \u7f8e\u5143\u7684\u5496\u5561\u673a\u53ef\u4e0d\u4fbf\u5b9c\uff0c\u4f46\u662f 10 \u53f0 30 \u7f8e\u91d1\u7684\u5496\u5561\u7814\u78e8\u673a\u53ef\u80fd\u662f\u53ef\u884c\u7684\u3002\u6d4f\u89c8\u4f60\u7684\u5173\u952e\u8bcd\u5217\u8868\uff0c\u4ece\u6210\u672c\u8f83\u4f4e\u7684\u4ea7\u54c1\u5f00\u59cb\u6d4b\u8bd5\u3002 \u4e00\u65e6\u4f60\u5b8c\u6210\u4e86\u6d4b\u8bd5\uff0c\u5c31\u628a\u4ed6\u4eec\u5356\u6389\u3002 \u6ca1\u6709\u4eba\u4f1a\u9700\u8981 10 \u53f0\u5496\u5561\u7814\u78e8\u673a\u3002\u5b8c\u6210\u8bc4\u6d4b\u540e\uff0c\u4f60\u53ef\u4ee5\u628a\u6302\u5230 eBay \u4e0a\u3002\u5373\u4f7f\u4f60\u635f\u5931\u4e86\u539f\u4ef7\u7684 \u00bc\uff0c\u8fd9\u5bf9\u6709\u7528\u7684\u72ec\u7279\u5185\u5bb9\u6765\u8bf4\u53ea\u662f\u4e00\u7b14\u5c0f\u94b1\u3002 \u8981\u6c42\u5382\u5bb6\u8bc4\u6d4b\u4ea7\u54c1\u3002 \u4e0d\u8981\u5bf9\u6b64\u62b1\u592a\u5927\u5e0c\u671b\u3002\u7279\u522b\u662f\u4f60\u521a\u8fdb\u5165\u8fd9\u4e2a\u9886\u57df\u8fd8\u6ca1\u6709\u540d\u6c14\u7684\u65f6\u5019\u3002","title":"3. \u627e\u51fa\u6700\u597d\u7684\u4ea7\u54c1"},{"location":"pages/affiliate/amazon-affiliate-marketing/#4-\u5199\u8d77\u6765","text":"\u4ea7\u54c1\u7efc\u8ff0\u548c\u666e\u901a\u7684\u535a\u5ba2\u6587\u7ae0\u4e0d\u4e00\u6837\u3002\u4f60\u9700\u8981\u5373\u65f6\u5411\u8bfb\u8005\u63d0\u4f9b\u4ed6\u4eec\u60f3\u8981\u7684\u4fe1\u606f\u3002 \u5728\u4ea7\u54c1\u7efc\u8ff0\u65b9\u9762\uff0c\u4f60\u9700\u8981\u76f4\u63a5\u544a\u8bc9\u8bfb\u8005\u6700\u7ec8\u83b7\u80dc\u7684\u662f\u54ea\u6b3e\u4ea7\u54c1\u3002 \u57fa\u4e8e\u6b64\uff0c\u4f60\u5e94\u8be5\u6309\u7167\u5012\u91d1\u5b57\u5854\u683c\u5f0f\u521b\u5efa\u4e00\u5219\u5217\u8868\u5e16\u6587\u3002 \u70b9\u51fb \u8fd9\u91cc \u4e86\u89e3\u66f4\u591a\u4fe1\u606f\u3002","title":"4. \u5199\u8d77\u6765"},{"location":"pages/affiliate/amazon-affiliate-marketing/#B-\u8bc4\u6d4b\u5e16\u6587","text":"\u4e0a\u9762\u5927\u591a\u6570\u5173\u4e8e\u4ea7\u54c1\u7efc\u8ff0\u7684\u5efa\u8bae\u90fd\u9002\u7528\u4e8e\u5355\u72ec\u7684\u4ea7\u54c1\u8bc4\u6d4b\u3002\u4f60\u9700\u8981\u4e86\u89e3\u4eba\u4eec\u5728\u610f\u548c\u611f\u5174\u8da3\u7684\u5185\u5bb9\uff0c\u4f60\u8fd8\u9700\u8981\u628a\u4ea7\u54c1\u7814\u7a76\u900f\u5f7b\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u901a\u5e38\u6700\u597d\u662f\u5728\u64b0\u5199\u4ea7\u54c1\u7efc\u8ff0\u7684\u540c\u65f6\u64b0\u5199\u5355\u72ec\u7684\u4ea7\u54c1\u8bc4\u6d4b\u3002 \u4e3a\u4ec0\u4e48\u5462\uff1f\u56e0\u4e3a\u5f53\u4f60\u5728\u64b0\u5199\u4ea7\u54c1\u7efc\u8ff0\u6587\u7ae0\u7684\u65f6\u5019\uff0c\u4f60\u5b9e\u9645\u4e0a\u662f\u5728\u540c\u65f6\u8bc4\u6d4b\u591a\u4e2a\u4ea7\u54c1\u3002\u53ea\u4e0d\u8fc7\u4ea7\u54c1\u7efc\u8ff0\u5bf9\u6bcf\u4e00\u4e2a\u4ea7\u54c1\u8fdb\u884c\u4e86\u603b\u7ed3\uff0c\u800c\u4e0d\u662f\u8ba8\u8bba\u7ec6\u8282\u3002 \u4f46\u5173\u952e\u70b9\u662f\uff1a\u4f60\u9700\u8981\u901a\u8fc7\u8c03\u7814\u4ea7\u54c1\u6765\u521b\u5efa\u4ea7\u54c1\u7efc\u8ff0\uff0c\u56e0\u6b64\u4f60\u53ef\u80fd\u4e5f\u4f1a\u5c06\u8c03\u7814\u7ed3\u679c\u53d1\u5e03\u5728\u5355\u72ec\u7684\u4ea7\u54c1\u8bc4\u6d4b\u5e16\u6587\u4e2d\u3002 \u8fd9\u6837\u505a\u7684\u610f\u4e49\u8fd8\u6709\u4ee5\u4e0b\u5176\u4ed6\u51e0\u70b9\u539f\u56e0\uff1a \u8bc4\u8bba\u662f\u76f8\u5bf9\u7684\u3002 \u5047\u8bbe\u4f60\u8bc4\u6d4b\u4e86\u4e00\u6b3e\u5496\u5561\u7814\u78e8\u673a\u3002\u9664\u975e\u4f60\u628a\u5b83\u548c\u5176\u4ed6\u7c7b\u4f3c\u4ea7\u54c1\u653e\u5728\u4e00\u8d77\u8c03\u7814\u548c\u6d4b\u8bd5\uff0c\u5426\u5219\u4f60\u600e\u4e48\u77e5\u9053\u8fd9\u6b3e\u4ea7\u54c1\u6709\u591a\u597d\u6216\u8005\u591a\u5dee\u5462\uff1f\u4f60\u53ef\u80fd\u5f88\u5bb9\u6613\u5730\u5c31\u7ed9\u5b83\u6253\u4e2a\u4e94\u661f\uff0c\u5374\u53d1\u73b0\u5b83\u6bd4\u5e02\u9762\u4e0a\u5176\u4ed6\u4ef7\u683c\u76f8\u5f53\u7684\u4ea7\u54c1\u5dee\u5f88\u591a\u3002 \u5bf9SEO \u53ef\u80fd\u6709\u5e2e\u52a9\u3002 \u53d1\u5e03\u53ef\u4ee5\u56de\u6eaf\u5230\u5df2\u6709\u7684\u4ea7\u54c1\u7efc\u8ff0\u7684\u5355\u72ec\u7684\u4ea7\u54c1\u8bc4\u6d4b\u5e16\u6587\u53ef\u80fd\u5bf9 SEO\u6709\u5229\u3002\uff08\u4e0b\u4e00\u7ae0\u8282\u5c06\u5bf9\u6b64\u4f5c\u8fdb\u4e00\u6b65\u8ba8\u8bba\uff09 \u4fbf\u4e8e\u683c\u5f0f\u5316/\u6a21\u677f\u5316\u3002 \u4e3a\u7efc\u8ff0\u6587\u7ae0\u8c03\u7814\u4ea7\u54c1\u53ef\u4ee5\u544a\u8bc9\u4f60\u4eba\u4eec\u7684\u5173\u6ce8\u70b9\u5728\u54ea\u91cc\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u77e5\u8bc6\u6765\u4e3a\u5355\u72ec\u7684\u4ea7\u54c1\u8bc4\u6d4b\u5e16\u6587\u521b\u5efa\u6a21\u677f\u3002 \u6211\u4eec\u6765\u8ba8\u8bba\u4e00\u4e0b\u6700\u540e\u4e00\u70b9\u3002 \u5982\u679c\u4f60\u5df2\u7ecf\u521b\u5efa\u4e86\u5173\u4e8e\u6700\u597d\u7684\u5496\u5561\u7814\u78e8\u673a\u7684\u4ea7\u54c1\u7efc\u8ff0\u6587\u7ae0\uff0c\u4f60\u5c31\u5df2\u7ecf\u77e5\u9053\u7814\u78e8\u7684\u5747\u5300\u5ea6\u548c\u6613\u7528\u6027\u662f\u4eba\u4eec\u5173\u5fc3\u7684\u4ea7\u54c1\u5c5e\u6027\u3002 \u77e5\u9053\u4e86\u8fd9\u4e00\u70b9\uff0c\u4f60\u5c31\u53ef\u4ee5\u5f88\u8f7b\u677e\u5730\u4e3a\u8fd9\u4e2a\u7c7b\u76ee\u7684\u6240\u6709\u4ea7\u54c1\u5236\u5b9a\u6d4b\u8bd5\u6837\u5f0f\u7684\u6a21\u677f\u3002\u4f60\u53ea\u9700\u8981\u5c06\u8fd9\u4e9b\u6307\u6807\u7528\u4f5c\u5b50\u6807\u9898\uff0c\u5e76\u5c31\u6bcf\u4e2a\u5c5e\u6027\u4e3a\u6bcf\u4e2a\u4ea7\u54c1\u6309 1\u20135 \u6253\u5206\u5373\u53ef\u3002 \u53ef\u4ee5\u53c2\u8003\u8fd9 \u4e24 \u7bc7 \u6587\u7ae0\u3002 \u56e0\u4e3a\u4f60\u5df2\u7ecf\u5728\u6bcf\u4e2a\u4ea7\u54c1\u8bc4\u6d4b\u4e2d\u4f7f\u7528\u4e86\u76f8\u540c\u7684\u683c\u5f0f\uff0c\u5e76\u4e14\u5728\u521b\u4f5c\u4ea7\u54c1\u7efc\u8ff0\u65f6\u8fdb\u884c\u4e86\u8c03\u7814\uff0c\u521b\u5efa\u8fd9\u4e9b\u5e16\u6587\u5e94\u8be5\u4e0d\u4f1a\u82b1\u8d39\u4f60\u592a\u591a\u7684\u65f6\u95f4\u3002","title":"B. \u8bc4\u6d4b\u5e16\u6587"},{"location":"pages/affiliate/amazon-affiliate-marketing/#C-\u535a\u5ba2\u6587\u7ae0","text":"\u64b0\u5199\u4f18\u8d28\u7684\u535a\u5ba2\u6587\u7ae0\u672c\u8eab\u53c8\u5b8c\u5168\u662f\u53e6\u5916\u4e00\u4e2a\u8bdd\u9898\u4e86\u3002 \u5e78\u8fd0\u7684\u662f\uff0c\u6211\u4eec\u6709\u8bb8\u591a\u5173\u4e8e\u5982\u4f55\u64b0\u5199\u535a\u5ba2\u6587\u7ae0\u7684\u6307\u5357\uff0c\u6240\u4ee5\u8fd9\u91cc\u6211\u5c31\u53ea\u653e\u4e0a\u8fd9\u4e9b\u6587\u7ae0\u7684\u94fe\u63a5\uff0c\u800c\u4e0d\u8d58\u8ff0\u4e86\u3002 \u5ef6\u4f38\u9605\u8bfb 9 \u4e2a\u6b65\u9aa4\u64b0\u5199\uff08\u4eba\u4eec\u771f\u7684\u60f3\u8981\u53bb\u8bfb\u7684\uff09\u535a\u5ba2\u6587\u7ae0\uff08\u82f1\u6587\uff09 \u5b9e\u6218\u6709\u6548\u768417\u4e2a\u535a\u5ba2\u8fd0\u8425\u6280\u5de7\uff08\u65b0\u624b\u5fc5\u5907\uff09 \u4ec0\u4e48\u662f SEO \u5185\u5bb9\uff1f\u5982\u4f55\u64b0\u5199\u53ef\u5f97\u6392\u540d\u7684\u5185\u5bb9\uff08\u82f1\u6587\uff09 \u5982\u4f55\u5c06\u4f60\u7684\u5185\u5bb9\u521b\u4f5c\u5de5\u4f5c\u5916\u5305\u7ed9\u81ea\u7531\u804c\u4e1a\u5199\u624b\uff084 \u4e2a\u6b65\u9aa4\uff09\uff08\u82f1\u6587\uff09","title":"C. \u535a\u5ba2\u6587\u7ae0"},{"location":"pages/affiliate/amazon-affiliate-marketing/#4-\u901a\u8fc7-SEO-\u4e3a\u7f51\u7ad9\u5f15\u6d41","text":"SEO \u4e0d\u662f\u706b\u7bad\u79d1\u5b66\uff0c\u4f46\u6211\u4eec\u4e5f\u65e0\u6cd5\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u4ece\u5934\u5230\u5c3e\u8fdb\u884c\u603b\u7ed3\u3002\u5143\u7d20\u5b9e\u5728\u662f\u592a\u591a\u4e86\u3002 \u76f8\u53cd\uff0c\u6211\u4f1a\u5728\u8fd9\u91cc\u8ba8\u8bba\u4e24\u4e2a\u91cd\u8981\u7684\u65b9\u9762\uff0c\u7136\u540e\u63d0\u4f9b\u4e00\u4e9b\u6307\u5411\u8fd9\u4e2a\u535a\u5ba2 SEO \u6559\u7a0b\u7684\u94fe\u63a5\u3002","title":"4. \u901a\u8fc7 SEO \u4e3a\u7f51\u7ad9\u5f15\u6d41"},{"location":"pages/affiliate/amazon-affiliate-marketing/#A-\u521b\u5efa\u5185\u5bb9\u4e2d\u5fc3","text":"\u5185\u5bb9\u4e2d\u5fc3 \u662f\u5173\u4e8e\u7c7b\u4f3c\u4e3b\u9898\u7684\u76f8\u4e92\u94fe\u63a5\u7684\u5185\u5bb9\u96c6\u5408\u3002 \u4ed6\u4eec\u7531\u4ee5\u4e0b\u4e09\u90e8\u5206\u7ec4\u6210\uff1a \u4e2d\u5fc3\u9875\u9762/\u652f\u67f1\u5185\u5bb9\uff1a \u8fd9\u662f\u4e00\u4e2a\u5173\u4e8e\u5e7f\u6cdb\u4e3b\u9898\u7684\u9ad8\u9636\u6307\u5357\u3002 \u5b50\u9875\u9762/\u96c6\u7fa4\u5185\u5bb9\uff1a \u8fd9\u4e9b\u662f\u5173\u4e8e\u4e2d\u5fc3\u4e3b\u9898\u5404\u4e2a\u90e8\u5206\u7684\u6df1\u5ea6\u6307\u5357\u3002 \u8d85\u94fe\u63a5\uff1a \u4ed6\u4eec\u8054\u7ed3\u4e86\u4e2d\u5fc3\u9875\u9762\u548c\u5b50\u9875\u9762\u3002\u4e2d\u5fc3\u9875\u9762\u94fe\u5411\u4e86\u6240\u6709\u7684\u5b50\u9875\u9762\uff0c\u6bcf\u4e2a\u5b50\u9875\u9762\u53c8\u94fe\u56de\u4e86\u4e2d\u5fc3\u9875\u9762\u3002 \u5bf9\u4e8e\u4e9a\u9a6c\u900a\u8054\u76df\u5ba2\u7f51\u7ad9\u6765\u8bf4\uff0c\u521b\u5efa\u4e00\u4e2a\u4ee5\u4ea7\u54c1\u7efc\u8ff0\u6587\u7ae0\u4e3a\u4e2d\u5fc3\u9875\u9762\u3001\u4ea7\u54c1\u8bc4\u6d4b\u5e16\u6587\u4e3a\u5b50\u9875\u9762\u7684\u5185\u5bb9\u4e2d\u5fc3\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u7b56\u7565\u3002 \u4ece SEO \u7684\u89d2\u5ea6\u6765\u770b\uff0c\u8fd9\u6837\u505a\u6709\u51e0\u4e2a\u4e3b\u8981\u7684\u597d\u5904\u3002 \u9996\u5148\uff0c\u4ed6\u4eec\u4f1a\u5728\u201c\u8d5a\u94b1\u201d\u9875\u9762\u4e4b\u95f4\u751f\u6210\u66f4\u591a\u5bcc\u542b\u5173\u952e\u8bcd\u7684\u5185\u90e8\u94fe\u63a5\u3002\u56e0\u4e3a Google \u4f1a\u4f7f\u7528 \u951a\u6587\u672c \u6765\u7406\u89e3\u9875\u9762\u7684\u5185\u5bb9\uff0c\u6240\u4ee5\u8fd9\u6837\u505a\u5bf9\u6392\u540d\u6709\u5e2e\u52a9\u3002 Most links do provide a bit of additional context through their anchor text. At least they should, right\u203d \u2014 \ud83c\udf4c John \ud83c\udf4c (@JohnMu) November 23, 2017 \u5176\u6b21\uff0c\u7531\u4e8e \u4f69\u5947\u6392\u540d \u7b97\u6cd5\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u5185\u5bb9\u4e2d\u5fc3\u6240\u6709\u7684\u9875\u9762\u4e92\u76f8\u4ece\u53cd\u5411\u94fe\u63a5\u4e2d\u83b7\u76ca\u3002 \u5982\u4f55\u642d\u5efa\u5185\u5bb9\u4e2d\u5fc3\u5462\uff1f \u9009\u62e9\u4e00\u7bc7\u5185\u5bb9\u7efc\u8ff0\u6587\u7ae0\uff1b \u4e3a\u6bcf\u4e00\u6b3e\u63d0\u5230\u7684\u4ea7\u54c1\u6dfb\u52a0\u94fe\u63a5\uff1b \u4e3a\u4ea7\u54c1\u8bc4\u6d4b\u5e16\u6587\u6dfb\u52a0\u6307\u5411\u4ea7\u54c1\u7efc\u8ff0\u6587\u7ae0\u7684\u94fe\u63a5\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u4f60\u60f3\u56f4\u7ed5\u4e00\u7bc7\u5173\u4e8e \u201cbest coffee grinders\u201d \u7684\u4ea7\u54c1\u7efc\u8ff0\u6587\u7ae0\u521b\u5efa\u5185\u5bb9\u4e2d\u5fc3\u3002\u5982\u679c\u4f60\u5df2\u7ecf\u4e3a\u5217\u8868\u4e2d\u63d0\u5230\u7684\u67d0\u4e9b\u4ea7\u54c1\u64b0\u5199\u4e86\u8bc4\u6d4b\u5e16\u6587\uff0c\u53ea\u9700\u8981\u4ece\u4e2d\u5fc3\u9875\u9762\u94fe\u63a5\u5230\u4ed6\u4eec\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002 \u8fd9\u91cc\u6709\u4e00\u4e2a\u771f\u5b9e\u7684\u4f8b\u5b50\uff1a \u8fd9\u4efd\u6700\u597d\u7684\u5496\u5561\u7814\u78e8\u673a \u5217\u8868 \u6709\u4e00\u6b3e\u4ea7\u54c1\u662f Baratza Virtuoso Plus\u3002 \u5728\u7b80\u77ed\u7684\u63cf\u8ff0\u4e2d\uff0c\u6709\u4e00\u4e2a\u6307\u5411\u8be5\u4ea7\u54c1\u5b8c\u6574\u8bc4\u6d4b\u7684\u94fe\u63a5\u3002 \u5728\u8fd9\u5219 \u4ea7\u54c1\u8bc4\u6d4b \u5e16\u6587\u4e2d\uff0c\u5305\u542b\u4e86\u6307\u5411\u4ea7\u54c1\u7efc\u8ff0\u6587\u7ae0\u7684\u53cd\u5411\u94fe\u63a5\u3002 \u5982\u679c\u4f60\u5bf9\u7efc\u8ff0\u91cc\u7684\u6240\u6709\u4ea7\u54c1\u90fd\u8fd9\u6837\u64cd\u4f5c\uff0c\u4f60\u5c31\u521b\u5efa\u4e86\u4e00\u4e2a\u5185\u5bb9\u4e2d\u5fc3\u4e86\u3002","title":"A. \u521b\u5efa\u5185\u5bb9\u4e2d\u5fc3"},{"location":"pages/affiliate/amazon-affiliate-marketing/#B-\u94fe\u63a5\u5efa\u8bbe","text":"\u5916\u94fe\u53ef\u80fd\u662f\u6700\u91cd\u8981\u7684 Google \u6392\u540d\u56e0\u7d20 \u3002\u4ed6\u4eec\u662f Google \u6392\u540d\u7b97\u6cd5\u7684\u57fa\u77f3\uff0c\u591a\u9879\u72ec\u7acb \u7814\u7a76 \u90fd\u53d1\u73b0\u4e86\u6765\u81ea\u72ec\u7acb\u7f51\u7ad9\u7684\u5916\u94fe\u6570\u91cf\u4e0e\u7f51\u9875\u81ea\u7136\u641c\u7d22\u6d41\u91cf\u4e4b\u95f4\u7684\u5f3a\u5173\u8054\u3002 \u5bf9\u4e9a\u9a6c\u900a\u8054\u76df\u5ba2\u7f51\u7ad9\u800c\u8a00\uff0c\u4f60\u5e0c\u671b\u76f4\u63a5\u4e3a\u50cf\u4ea7\u54c1\u7efc\u8ff0\u6587\u7ae0\u548c\u4ea7\u54c1\u8bc4\u6d4b\u5e16\u6587\u8fd9\u6837\u7684\u201c\u8d5a\u94b1\u201d\u9875\u9762\u5efa\u7acb\u76f4\u63a5\u7684\u5916\u94fe\u3002 \u505a\u5230\u8fd9\u4e00\u70b9\u6709\u8bb8\u591a\u65b9\u6cd5\uff0c\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u4e2a\uff1a \u4ea7\u54c1\u7efc\u8ff0\u6587\u7ae0\u5bf9\u7279\u5b9a\u79cd\u7c7b\u7684\u4ea7\u54c1\u8fdb\u884c\u8bc4\u6d4b\u3002\u5b83\u53ef\u80fd\u662f\u5496\u5561\u7814\u78e8\u673a\uff0c\u7acb\u5f0f\u529e\u516c\u684c\uff0cWiFi \u8def\u7531\u5668\u7b49\u3002\u60f3\u60f3\u4ea7\u54c1\u7684\u76ee\u7684\uff0c\u95ee\u95ee\u81ea\u5df1\uff0c\u5b83\u80fd\u5e2e\u52a9\u4eba\u4eec\u505a\u4ec0\u4e48\uff1f \u8fd9\u91cc\u6709\u4e00\u4e9b\u4f8b\u5b50\uff1a \u5496\u5561\u7814\u78e8\u673a -> \u5e2e\u52a9\u4eba\u4eec \u505a\u51fa\u66f4\u597d\u559d\u7684\u5496\u5561 \u7acb\u5f0f\u529e\u516c\u684c -> \u5e2e\u52a9\u4eba\u4eec \u66f4\u5065\u5eb7\u5730\u5728\u5bb6\u5de5\u4f5c WiFi \u8def\u7531\u5668 -> \u5e2e\u52a9\u4eba\u4eec \u66f4\u5b89\u5168\u5730\u4e0a\u7f51 \u73b0\u5728\u4f60\u5df2\u7ecf\u786e\u7acb\u4e86\u4ea7\u54c1\u7684\u529f\u7528\uff0c\u53ef\u4ee5\u5bfb\u627e\u90a3\u4e9b\u5728\u8ba8\u8bba\u5b9e\u73b0\u8fd9\u4e2a\u529f\u6548\u7684\u540c\u65f6\u63d0\u53ca\u4f60\u7684\u4ea7\u54c1\u7684\u6587\u7ae0\u4e86\u3002\u63a5\u7740\u4f60\u53ef\u4ee5\u8054\u7cfb\u4ed6\u4eec\uff0c\u5efa\u8bae\u5728\u6587\u7ae0\u4e2d\u52a0\u5165\u6307\u5411\u4f60\u7684\u4ea7\u54c1\u7efc\u8ff0\u6587\u7ae0\u7684\u94fe\u63a5\uff0c\u4ee5\u5e2e\u52a9\u4ed6\u4eec\u7684\u8bfb\u8005\u66f4\u597d\u7684\u9009\u62e9\u5bf9\u4ed6\u4eec\u6765\u8bf4\u6700\u597d\u7684\u4ea7\u54c1\u3002 \u8ba9\u6211\u4eec\u7528\u4e00\u4e2a\u4f8b\u5b50\u6765\u89e3\u91ca\u3002 \u5982\u679c\u6211\u4eec\u5728 Google \u4e2d\u641c\u7d22\u201chow to stay healthy when working from home\u201d\uff08\u201c\u5982\u4f55\u80fd\u5728\u5c45\u5bb6\u5de5\u4f5c\u7684\u540c\u65f6\u4fdd\u6301\u5065\u5eb7\u201d\uff09\uff0c\u5f88\u53ef\u80fd\u6240\u6709\u7684\u7ed3\u679c\u90fd\u662f\u5e26\u6709\u76f8\u5173\u63d0\u793a\u7684\u535a\u5ba2\u6587\u7ae0\u3002 \u4f46\u662f\u6211\u4eec\u5e76\u4e0d\u77e5\u9053\u8fd9\u4e9b\u6587\u7ae0\u6709\u6ca1\u6709\u63d0\u5230\u7acb\u5f0f\u529e\u516c\u684c\uff0c\u6240\u4ee5\u8ba9\u6211\u4eec\u4f7f\u7528 Google \u641c\u7d22\u64cd\u4f5c\u7b26 \u6765\u9650\u5b9a\u63d0\u53ca \u201cstanding desk\u201d \u7684\u7ed3\u679c\u3002 \u51fa\u73b0\u4e86 940 \u4e07\u4e2a\u7ed3\u679c\u3002 \u4ee5\u4e0b\u53ea\u662f\u5176\u4e2d\u7684\u4e00\u4e2a\uff1a \u5c3d\u7ba1\u8fd9\u7bc7\u6587\u7ae0\u63a8\u8350\u4e86\u4e00\u6b3e\u7279\u5b9a\u578b\u53f7\u7684\u7acb\u5f0f\u529e\u516c\u684c\uff0c\u5f88\u660e\u663e\u5982\u679c\u6709\u591a\u4e2a\u9009\u9879\uff0c\u5bf9\u8bfb\u8005\u7684\u5e2e\u52a9\u66f4\u5927\u3002\u56e0\u6b64\u5982\u679c\u8fd9\u7bc7\u6587\u7ae0\u53ef\u4ee5\u5305\u542b\u6307\u5411\u6700\u597d\u7684\u7acb\u5f0f\u529e\u516c\u684c\u5217\u8868\u7684\u5e16\u6587\uff08\u50cf \u8fd9\u7bc7 \uff09\u5c31\u66f4\u6709\u7528\u4e86\u3002 \u6240\u4ee5\uff0c\u5bf9\u6211\u4eec\u6765\u8bf4\uff0c\u5efa\u8bae\u5bf9\u65b9\u5728\u6587\u7ae0\u4e2d\u52a0\u5165\u6307\u5411\u6211\u4eec\u6bd4\u8f83\u6700\u597d\u7684\u7acb\u5f0f\u529e\u516c\u684c\u7684\u5e16\u6587\u7684\u94fe\u63a5\u662f\u6709\u610f\u4e49\u7684\u3002 \u4ee5\u4e0b\u662f\u4e00\u5c01\u7535\u5b50\u90ae\u4ef6\u7684\u793a\u4f8b\uff1a Hey [name], Just came across your guide to staying fit and healthy as a remote worker. Loved the tip about standing desks, and I agree that the Jarvis is a great option. However, I spent XX hours testing XX standing desks and found that the Jarvis is actually quite expensive for what it is, and that [other model] is almost as good for less money. Perhaps it might be worth including my comparison to give readers some extra choice? [link] Thanks, [name] \u8bd1\uff1a \u4f60\u597d [\u5bf9\u65b9\u540d\u5b57]\uff0c \u6211\u521a\u521a\u78b0\u5de7\u770b\u5230\u4e86\u4f60\u5199\u7684\u5173\u4e8e\u5982\u4f55\u5728\u8fdc\u7a0b\u5de5\u4f5c\u65f6\u4fdd\u6301\u8eab\u4f53\u5065\u5eb7\u7684\u6307\u5357\u3002 \u6211\u5f88\u559c\u6b22\u4f60\u5bf9\u4e8e\u4f7f\u7528\u7acb\u5f0f\u529e\u516c\u684c\u7684\u5efa\u8bae\uff0c\u6211\u4e5f\u89c9\u5f97 Jarvis \u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u9879\u3002\u4f46\u662f\uff0c\u5728\u82b1\u4e86 XX \u4e2a\u5c0f\u65f6\u6d4b\u8bd5\u4e86 XX \u6b3e\u7acb\u5f0f\u529e\u516c\u684c\u540e\u6211\u53d1\u73b0 Jarvis \u7684\u4ef7\u683c\u5b9e\u9645\u4e0a\u504f\u9ad8\u4e86\uff0c\u800c [\u53e6\u5916\u7684\u578b\u53f7] \u5dee\u4e0d\u591a\uff08\u548c Jarvis\uff09\u4e00\u6837\u4f18\u79c0\u4f46\u662f\u5374\u66f4\u4fbf\u5b9c\u3002 \u6216\u8bb8\u4f60\u53ef\u4ee5\u5c06\u6211\u7684\u8fd9\u7bc7\u6bd4\u8f83\u5e16\u6587\u52a0\u5165\u8fd9\u7bc7\u6587\u7ae0\uff0c\u7ed9\u4f60\u7684\u8bfb\u8005\u591a\u51e0\u79cd\u9009\u62e9\uff1f [\u94fe\u63a5] \u8c22\u8c22\uff0c [\u540d\u5b57] \u5982\u679c\u4f60\u5411\u591a\u4eba\u53d1\u9001\u7c7b\u4f3c\u7684\u7535\u5b50\u90ae\u4ef6\uff0c\u5e94\u8be5\u80fd\u591f\u4e3a\u4f60\u7684\u7efc\u8ff0\u6587\u7ae0\u83b7\u5f97\u4e00\u4e9b\u9ad8\u8d28\u91cf\u7684\u5916\u94fe\u3002 \u5f53\u7136\uff0c\u8fd9\u53ea\u662f\u4e00\u4e2a\u60f3\u6cd5\u3002 \u67e5\u770b\u4ee5\u4e0b\u51e0\u7bc7\u6587\u7ae0\uff0c\u4e86\u89e3\u66f4\u591a \u5916\u94fe\u5efa\u8bbe\u7684\u7b56\u7565 \uff1a \u5ef6\u4f38\u9605\u8bfb \u5982\u4f55\u6709\u6548\u5730\u6267\u884c\u6469\u5929\u697c(Skyscraper)\u7b56\u7565 SEO\u5ba2\u5ea7\u535a\u6587\uff1a\u5982\u4f55\u6279\u91cf\u5efa\u8bbe\u9ad8\u8d28\u91cf\u7684\u5916\u94fe\uff08\u82f1\u6587\uff09 \u8d44\u6e90\u9875\u9762\u5916\u94fe\u5efa\u8bbe\uff1a\u770b\u8fd9\u4e00\u7bc7\u5c31\u591f\u4e86\uff08\u82f1\u6587\uff09 \u5916\u94fe\u5efa\u8bbe\u7b80\u660e\u5b8c\u6574\u6307\u5357\uff08\u82f1\u6587\uff09 \u5728\u4e3a\u201c\u8d5a\u94b1\u201d\u9875\u9762\u5efa\u7acb\u5916\u94fe\u65f6\u8270\u96be\u524d\u884c? \u4e3a\u76f8\u5173\u8bdd\u9898\u521b\u5efa\u535a\u5ba2\u6587\u7ae0\u548c\u5176\u4ed6\u6709\u7528\u7684\u5185\u5bb9\uff0c\u63a5\u7740\u4f7f\u7528 \u4e2d\u95f4\u4eba\u6280\u672f \u6765\u63d0\u632f\u4ed6\u4eec\u7684\u8868\u73b0\u5427\u3002","title":"B. \u94fe\u63a5\u5efa\u8bbe"},{"location":"pages/affiliate/amazon-affiliate-marketing/#5-\u83b7\u5f97\u70b9\u51fb","text":"\u56e0\u4e3a 24 \u5c0f\u65f6\u7f13\u5b58\u671f\u7684\u673a\u5236\uff0c\u5982\u679c\u4f60\u60f3\u8981\u8d5a\u94b1\uff0c\u5c31\u9700\u8981\u9a71\u52a8\u70b9\u51fb\u524d\u5f80\u4e9a\u9a6c\u900a\u3002 \u8fd9\u91cc\u6211\u4e0d\u4f1a\u8be6\u8ff0\u7ec6\u8282\uff0c\u56e0\u4e3a\u5982\u679c\u4f60\u624d\u521a\u521a\u8d77\u6b65\uff0c\u8f6c\u5316\u7387\u4f18\u5316\u4e0d\u662f\u4f60\u5e94\u8be5\u6c89\u8ff7\u7684\u4e1c\u897f\u3002 \u4f46\u662f\uff0c\u4f60\u9700\u8981\u786e\u4fdd\u5df2\u7ecf\u638c\u63e1\u4e86\u57fa\u672c\u77e5\u8bc6\uff0c\u4ed6\u4eec\u662f\uff1a \u5c3d\u65e9\u653e\u7f6e\u63a8\u8350\u8868\u683c\u3002 \u63a8\u8350\u8868\u683c\u5728\u4ea7\u54c1\u7efc\u8ff0\u6587\u7ae0\u4e2d\u7f57\u5217\u4e86\u63a8\u8350\u7684\u70ed\u95e8\u4ea7\u54c1\uff0c\u5e76\u5305\u542b\u4e86\u6307\u5411\u8fd9\u4e9b\u4ea7\u54c1\u7684\u94fe\u63a5\u3002\u4ed6\u4eec\u5e94\u8be5\u51fa\u73b0\u5728\u6587\u7ae0\u7684\u524d\u90e8\uff0c\u56e0\u4e3a\u4f60\u60f3\u8981\u4eba\u4eec\u80fd\u591f\u5feb\u901f\u627e\u5230\u4ed6\u4eec\u60f3\u8981\u7684\u4fe1\u606f\u3002 \u4f7f\u7528\u660e\u663e\u7684\u4e9a\u9a6c\u900a\u94fe\u63a5\u3002 \u80fd\u4ece\u4f60\u7f51\u7ad9\u8bbe\u8ba1\u8131\u9896\u800c\u51fa\u7684\u6309\u94ae\u5f80\u5f80\u6548\u679c\u6700\u597d\u3002 \u7ed9\u4eba\u4eec\u4e00\u4e2a\u76f8\u4fe1\u4f60\u7684\u7406\u7531\u3002 \u8fd9\u4e00\u70b9\u4f60\u8d8a\u5feb\u80fd\u505a\u5230\u8d8a\u597d\u3002The Wirecutter \u7684\u7b56\u7565\u53ef\u80fd\u662f\u8fd9\u91cc\u7684\u91d1\u6807\u51c6\u3002\u53bb\u770b\u770b\u4ed6\u4eec\u7684\u4ecb\u7ecd\u5185\u5bb9\u5427\u3002 \u4e00\u65e6\u4f60\u7684\u7f51\u7ad9\u83b7\u5f97\u4e86\u53ef\u89c2\u7684\u6d41\u91cf\uff0c\u8bb0\u5f97\u67e5\u770b\u4e0b\u9762\u7684\u8d44\u6e90\u786e\u4fdd\u4f60\u83b7\u5f97\u4e86\u5c3d\u53ef\u80fd\u591a\u7684\u70b9\u51fb\u3002 \u5ef6\u4f38\u9605\u8bfb \u5982\u4f55\u4f18\u5316\u8054\u76df\u5ba2\u7f51\u7ad9\u7684\u8f6c\u5316\u7387\uff08\u9010\u6b65\u6307\u5f15\uff09\uff08\u82f1\u6587\uff09 17 \u79cd\u63d0\u9ad8\u4e9a\u9a6c\u900a\u8054\u76df\u5ba2\u7f51\u7ad9\u548c\u6743\u5a01\u7f51\u7ad9\u8f6c\u5316\u7387\u7684\u7b56\u7565\uff08\u82f1\u6587\uff09 \u5982\u4f55\u4f18\u5316\u4f60\u7684\u4e9a\u9a6c\u900a\u8054\u76df\u5ba2\u7f51\u7ad9\u7684\u8f6c\u5316\u7387\uff08\u82f1\u6587\uff09","title":"5. \u83b7\u5f97\u70b9\u51fb"},{"location":"pages/affiliate/amazon-affiliate-marketing/#\u7ed3\u8bed","text":"\u5c3d\u7ba1\u4e9a\u9a6c\u900a\u6700\u8fd1\u8c03\u4f4e\u4e86\u4f63\u91d1\u7684\u62bd\u6210\u6bd4\u4f8b\uff0c\u4f46\u662f\u56f4\u7ed5\u4e9a\u9a6c\u900a\u5efa\u7acb\u8054\u76df\u5ba2\u7f51\u7ad9\u4f9d\u7136\u662f\u5f00\u5c55 \u8054\u76df\u8425\u9500 \u7684\u597d\u529e\u6cd5\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u65e6\u4f60\u83b7\u5f97\u4e86\u53ef\u89c2\u7684\u6d41\u91cf\uff0c\u5c31\u503c\u5f97\u53bb\u5173\u6ce8\u5176\u4ed6\u7684\u8054\u76df\u5ba2\u9879\u76ee\uff0c\u4ed6\u4eec\u53ef\u4ee5\u4f1a\u4e3a\u540c\u6837\u7684\u4ea7\u54c1\u63d0\u4f9b\u66f4\u4e3a\u4e30\u539a\u7684\u4f63\u91d1\u3002\u5c3d\u7ba1\u901a\u5e38\u60c5\u51b5\u4e0b\u4e9a\u9a6c\u900a\u7684\u8f6c\u5316\u662f\u6700\u9ad8\u7684\uff0c\u4f46\u662f\u7531\u4e8e\u66f4\u9ad8\u7684\u4f63\u91d1\u6bd4\u4f8b\uff0c\u901a\u8fc7\u52a0\u5165\u5176\u4ed6\u7684\u8054\u76df\u9879\u76ee\u5f80\u5f80\u53ef\u80fd\u5e2e\u4f60\u8d5a\u66f4\u591a\u94b1\u3002 \u6709\u95ee\u9898\uff1f \u5728 Twitter \u4e0a \u544a\u8bc9\u6211\u5427\u3002 \u51e1\u672c\u7f51\u6ce8\u660e\"\u6765\u6e90\uff1aXXX \"\u7684\u6587/\u56fe/\u89c6\u9891\u7b49\u7a3f\u4ef6\uff0c\u672c\u7f51\u8f6c\u8f7d\u51fa\u4e8e\u4f20\u9012\u66f4\u591a\u4fe1\u606f\u4e4b\u76ee\u7684\uff0c\u5e76\u4e0d\u610f\u5473\u7740\u8d5e\u540c\u5176\u89c2\u70b9\u6216\u8bc1\u5b9e\u5176\u5185\u5bb9\u7684\u771f\u5b9e\u6027\u3002\u5982\u6d89\u53ca\u4f5c\u54c1\u5185\u5bb9\u3001\u7248\u6743\u548c\u5176\u5b83\u95ee\u9898\uff0c\u8bf7\u4e0e\u672c\u7f51\u8054\u7cfb\uff0c\u6211\u4eec\u5c06\u5728\u7b2c\u4e00\u65f6\u95f4\u5220\u9664\u5185\u5bb9\uff01 \u4f5c\u8005: Joshua Hardwick \u6765\u6e90\uff1a https://ahrefs.com/blog/zh/amazon-affiliate-marketing/","title":"\u7ed3\u8bed"},{"location":"pages/affiliate/how-to-get-on-the-first-page-of-google/","text":"\u5982\u4f55\u8ba9\u7f51\u7ad9\u6392\u540d\u8fdb\u5165\u8c37\u6b4c\u9996\u9875 [\u4e92\u52a8\u6307\u5357] \u00b6 \u9690\u85cf\u5c38\u4f53\u7684\u6700\u4f73\u4f4d\u7f6e\u662f\u8c37\u6b4c\u7684\u7b2c\u4e8c\u9875\u3002 \u4f60\u53ef\u80fd\u4ee5\u524d\u542c\u8fc7\u8fd9\u53e5\u8bdd\u3002\u8fd9\u662fSEO\u4e1a\u754c\u6d41\u4f20\u7684\u4e00\u4e2a\u7b11\u8bdd\uff0c\u56e0\u4e3a\u53ea\u6709 0.78% \u7684\u7528\u6237\u4f1a\u70b9\u51fb\u8c37\u6b4c\u7b2c\u4e8c\u9875\u7684\u7ed3\u679c\u3002 \u628a\u7b11\u8bdd\u653e\u4e00\u8fb9\uff0c\u4e0b\u9762\u8fd9\u662f\u73b0\u5b9e\uff1a \u5982\u679c\u4f60\u7684\u6392\u540d\u5728\u7b2c\u4e8c\u9875\u6216\u66f4\u9760\u540e\u7684\u9875\u9762\uff0c\u90a3\u4e48\u4f60\u57fa\u672c\u4e0a\u662f\u65e0\u6cd5\u88ab\u770b\u5230\u7684\u3002 \u5728\u672c\u6307\u5357\u4e2d\uff0c\u4f60\u5c06\u5b66\u4e60\u5982\u4f55\u901a\u8fc77\u4e2a\u7b80\u5355\u7684\u6b65\u9aa4\u89e3\u51b3\u9996\u9875\u6392\u540d\u95ee\u9898\uff0c\u4ee5\u53ca\u4e86\u89e3\u4e3a\u4ec0\u4e48\u6392\u540d\u9996\u9875\u4e5f\u4e0d\u4e00\u5b9a\u662f\u4f60\u7684\u6700\u7ec8\u76ee\u6807\u3002 \u4f60\u662f\u505a\u672c\u5730\u5316\u4e1a\u52a1\u7684\u5417\uff1f \u5982\u679c\u4f60\u5728\u641c\u7d22\u76ee\u6807\u5173\u952e\u8bcd\u65f6\uff0c\u5728\u7ed3\u679c\u4e2d\u770b\u5230\u4e86\u201c\u5730\u56fe\u5c55\u793a\u201d\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u9605\u8bfb \u8fd9\u4e2a\u6307\u5357 \u3002 https://www.youtube.com/watch?v=FUYAe5ROeP0 \u5728\u6211\u4eec\u5f00\u59cb\u4e4b\u524d\u2026 \u00b6 \u4e0b\u9762\u8fd9\u4e9b\u4e0d\u662f\u5fc5\u9700\u6761\u4ef6\uff0c\u4f46\u662f\u4e3a\u4e86\u6700\u5927\u7a0b\u5ea6\u5730\u5229\u7528\u672c\u6307\u5357\uff08\u5e76\u83b7\u5f97\u5728\u7b2c\u4e00\u9875\u6392\u540d\u7684\u673a\u4f1a\uff09\uff0c\u4f60\u7684\u7f51\u7ad9\u5e94\u8be5\uff1a \u79fb\u52a8\u7aef\u53cb\u597d; \u52a0\u8f7d\u901f\u5ea6\u5757; \u4f7f\u7528\u7b80\u5355\uff08\u6bd4\u5982\u7b80\u6d01\u7684\u5bfc\u822a\u3001\u6f02\u4eae\u7684\u7528\u6237\u4f53\u9a8c\u7b49\u7b49\uff09; \u52a0\u5bc6 (\u4f8b\u5982\u4f7f\u7528 HTTPS \u800c\u4e0d\u662f HTTP ); \u7ed3\u6784\u5206\u660e; \u53ef\u4ee5\u89e3\u51b3 SEO\u6280\u672f\u7c7b\u95ee\u9898 \u3002 \u5982\u679c\u4f60\u7684\u7f51\u7ad9\u4e0d\u7b26\u5408\u4e0a\u8ff0\u6807\u51c6\uff0c\u8fd9\u4e9b\u56e0\u7d20\u4e0d\u4ec5\u4f1a\u76f4\u63a5\u5f71\u54cd\u4f60\u5728\u8c37\u6b4c\u7684\u6392\u540d\uff0c\u540c\u65f6\u4f1a\u5bfc\u81f4\u6267\u884c\u4ee5\u4e0b\u6559\u7a0b\u7684\u96be\u5ea6\u589e\u52a0\u3002 \u4e0b\u9762\u662f\u6574\u4e2a\u8fc7\u7a0b\u7684\u6d41\u7a0b\u56fe\uff1a \u51c6\u5907\u597d\u4e86\u5417\uff1f\u8ba9\u6211\u4eec\u5f00\u59cb\u5427 \u6b65\u9aa4 #1 \u9009\u62e9\u4e00\u4e2a\u5173\u952e\u8bcd \u00b6 \u4f60\u4eec\u4e2d\u7684\u5927\u591a\u6570\u4eba\u53ef\u80fd\u5df2\u7ecf\u505a\u8fc7\u8fd9\u4e00\u6b65\u4e86\u3002\u4f46\u662f\u5982\u679c\u4f60\u8fd8\u6ca1\u6709\u505a\u8fc7\uff0c\u5219\u9700\u8981\u9009\u62e9\u4e00\u4e2a\u9700\u8981\u4e0a\u9996\u9875\u7684\u5173\u952e\u8bcd\u3002 \u6211\u5df2\u7ecf\u5b8c\u6210\u8fd9\u4e00\u6b65\u4e86 \u63a5\u7740 \u6b65\u9aa4 #2. \u6211\u8fd8\u6ca1\u6709\u505a\u8fd9\u4e00\u6b65 \u8bf7\u67e5\u770b\u6211\u4eec\u7684 \u5173\u952e\u8bcd\u7814\u7a76\u6307\u5357 \u3002 \u6b65\u9aa4 #2 \u67e5\u770b\u7ade\u4e89\u5bf9\u624b \u00b6 \u8fd9\u5c31\u597d\u6bd4\u4f60\u60f3\u5728 Walmart\uff08\u6c83\u5c14\u739b\uff09\u65c1\u8fb9\u5efa\u7acb\u4e00\u4e2a\u6742\u8d27\u5e97\u4e00\u6837\uff0c\u5728\u7ade\u4e89\u6fc0\u70c8\u7684\u60c5\u51b5\u4e0b\uff0c\u662f\u5f88\u96be\u5728\u8c37\u6b4c\u7684\u9996\u9875\u6392\u540d\u7684\u3002\u56e0\u6b64\uff0c\u4e0b\u4e00\u6b65\u5c31\u662f\u8981\u4e86\u89e3\u7ade\u4e89\u5bf9\u624b\u2014\u2014\u9996\u5148\u8981\u9762\u5bf9\u7684\u5bf9\u624b\u662f\u8c01\u3002 \u4e3a\u6b64\uff0c\u8bf7\u641c\u7d22\u4f60\u7684\u5173\u952e\u8bcd\u5e76\u67e5\u770b\u7b2c\u4e00\u9875\u7684\u7ed3\u679c\u3002 \u5982\u679c\u5b83\u4eec\u5168\u90e8\u6765\u81ea\u77e5\u540d\u7684\u5927\u54c1\u724c\uff0c\u5e76\u4e14\u4f60\u662f\u4e00\u5bb6\u6ca1\u4eba\u542c\u8bf4\u8fc7\u7684\u521b\u4e1a\u516c\u53f8\uff0c\u90a3\u4e48\u8fdb\u5165\u9996\u9875\u5c06\u975e\u5e38\u8270\u96be\u2014\u2014\u81f3\u5c11\u5728\u77ed\u671f\u5185\u662f\u5982\u6b64\u3002 \u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u67e5\u770b\u8fd9\u4e2a\u8bcd \u201cdresses\uff08\u793c\u88d9\uff09\u201c\u7684\u641c\u7d22\u7ed3\u679c\uff1a \u6bcf\u4e2a\u7ed3\u679c\u90fd\u6765\u81ea\u77e5\u540d\u7684\u54c1\u724c\u2014\u2014Macy\u2019s\uff08\u6885\u897f\u767e\u8d27\uff09, Nordstrom\uff08\u8bfa\u5fb7\u65af\u901a\uff09, Missguided\uff0cBoohoo\u7b49\u7b49\u3002 \u8bd1\u8005\u6ce8\uff1a Missguided\uff1a2009\u5e74\u5728\u7f8e\u56fd\u7ebd\u7ea6\u6210\u7acb\u7684\u77e5\u540d\u5973\u88c5\u54c1\u724c Boohoo\uff1a\u77e5\u540d\u82f1\u56fd\u7684\u5728\u7ebf\u96f6\u552e\u54c1\u724c \u8fd9\u6e05\u695a\u5730\u8868\u660e\uff0c\u90a3\u4e9b\u5e0c\u671b\u8d2d\u4e70\u65b0\u8863\u670d\u7684\u4eba\u5e0c\u671b\u4ece\u4e00\u4e2a\u77e5\u540d\u7684\u8001\u54c1\u724c\u90a3\u91cc\u8d2d\u4e70\u3002\u4e00\u4e2a\u65b0\u7684\u54c1\u724c\u7f51\u7ad9\u60f3\u53c2\u4e0e\u8fd9\u4e2a\u5173\u952e\u8bcd\u7684\u6392\u540d\uff0c\u95e8\u69db\u4f1a\u5f88\u9ad8\uff0c\u5373\u4f7f\u662f\u5bf9\u6700\u806a\u660e\u7684SEO\u4eba\u6765\u8bf4\u4e5f\u662f\u5982\u6b64\u3002 \u5982\u679c\u4f60\u5e76\u4e0d\u77e5\u9053\u4f60\u7684\u884c\u4e1a\u5185\u5927\u724c\u7684\u5bf9\u624b\u6709\u54ea\u4e9b\u7684\u8bdd\uff0c\u4f60\u53ef\u4ee5\u5c06\u5173\u952e\u8bcd\u7c98\u8d34\u5230 Ahrefs\u7684Keywords Explorer \uff08\u5173\u952e\u8bcd\u5206\u6790\uff09\u4e2d\uff0c\u62d6\u52a8\u5230\u6700\u540e\u7684SERP overview\uff08SERP\u6982\u89c8\uff09\u677f\u5757\uff0c\u5e76\u4e14\u67e5\u770b\u6392\u540d\u7f51\u7ad9\u7684Domain Rating \uff08\u57df\u540d\u8bc4\u5206\uff09\u3002 \u8fd9\u91cc\u5c55\u793a\u7684\u662f\u6392\u540d\u9760\u524d\u57df\u540d\u7684\u8bc4\u5206\uff0c\u5206\u6570\u503c\u4ece0\u2013100\u3002 \u81f3\u5173\u91cd\u8981\u7684\u662f\uff0c\u5e76\u975e\u6240\u6709\u5927\u54c1\u724c\u90fd\u62e5\u6709\u9ad8\u8bc4\u5206\uff0c\u4f46\u7edd\u5927\u90e8\u5206\u90fd\u6709\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u770b\u5230Missguided\u7684\u57df\u540d\u8bc4\u5206\u53ea\u670970\uff0c\u4f46\u8fd9\u4ecd\u7136\u662f\u975e\u5e38\u9ad8\u7684\u3002 \u4f60\u53ef\u4ee5\u5728 \u6211\u4eec\u514d\u8d39\u7684Website authority checker \uff08\u7f51\u7ad9\u6743\u5a01\u68c0\u67e5\uff09\u5de5\u5177\u4e2d\u548c\u4f60\u7684\u5bf9\u624b\u8fdb\u884c\u5206\u6570\u7684\u5bf9\u6bd4\u3002 \u4e00\u822c\u800c\u8a00\uff0c\u4e0e\u5f53\u524d\u9996\u9875\u6392\u540d\u9875\u9762\u7684\u8bc4\u5206\u76f8\u6bd4\uff0c\u5982\u679c\u4f60\u7684\u7f51\u7ad9\u8be5\u6570\u5b57\u8d8a\u4f4e\uff0c\u6392\u540d\u5c31\u8d8a\u56f0\u96be\u3002 \u6211\u5728\u9996\u9875\u4e0a\u770b\u5230\u4e86\u548c\u6211\u8bc4\u5206\u76f8\u8fd1\u7684\u54c1\u724c\u7f51\u7ad9\u3002 \u5373\u4fbf\u53ea\u67092\u52303\u4e2a\u7f51\u7ad9\uff0c\u8bf7\u67e5\u770b \u6b65\u9aa4 #3. \u6211\u5728\u9996\u9875\u4e0a\u53ea\u770b\u5230\u5927\u54c1\u724c\u7684\u7f51\u7ad9\u3002 \u5728\u9996\u9875\u4e0a\u6392\u540d\u4f1a\u5f88\u56f0\u96be\uff0c\u4f46\u5e76\u975e\u4e0d\u53ef\u80fd\u3002 \u5982\u679c\u6b64\u5173\u952e\u8bcd\u7684\u6392\u540d\u5bf9\u4f60\u7684\u4e1a\u52a1\u81f3\u5173\u91cd\u8981\uff0c\u90a3\u4e48\u4f60\u4ecd\u7136\u5e94\u8be5\u4e3a\u5b83\u6392\u540d\u3002\u8bf7\u6ce8\u610f\uff0c\u4f60\u53ef\u80fd\u4e0d\u4f1a\u5f88\u5feb\u7684\u53c2\u4e0e\u6392\u540d\uff0c\u540c\u65f6\u53ef\u80fd\u9700\u8981\u6784\u5efa\u6bd4\u7ade\u4e89\u5bf9\u624b\u66f4\u591a\u7684\u5916\u94fe\u3002 \u5982\u679c\u4f60\u7684\u76ee\u6807\u662f\u5728\u4e2d\u77ed\u671f\u5185\u6392\u540d\uff0c\u56de\u5230 \u6b65\u9aa4 #1 \u9009\u62e9\u4e00\u4e2a\u66f4\u7b80\u5355\u7684\u5173\u952e\u8bcd\uff0c\u6bd4\u5982\u201cplus size maxi dresses\uff08\u52a0\u5927\u7801\u7684\u957f\u88d9\uff09\u201d \uff0c\u800c\u5b83\u7684\u9996\u9875\u7ade\u4e89\u5bf9\u624b\u90fd\u662f\u4e00\u4e9b\u4e2d\u5c0f\u578b\u7684\u54c1\u724c\u3002 \u6b65\u9aa4 #3. \u9009\u62e9\u6216\u5236\u4f5c\u4e00\u4e2a\u9875\u9762\uff08\u6ee1\u8db3\u641c\u7d22\u9700\u6c42\uff09 \u00b6 \u91cd\u70b9\u662f\uff0c\u4f60\u9700\u8981\u8ba4\u8bc6\u5230\u8c37\u6b4c\u662f\u9488\u5bf9\u7f51\u9875\u8fdb\u884c\u6392\u540d\u7684\uff0c\u800c\u4e0d\u662f\u7f51\u7ad9\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u6bd4\u5982\u6211\u4eec\u7528\u4e24\u4e2a\u9875\u9762\u5206\u522b\u53c2\u4e0e\u4e86 \u201cwhere to get backlinks\uff08\u54ea\u91cc\u83b7\u53d6\u5916\u94fe\uff09\u201d \u4ee5\u53ca \u201cwhere to buy backlinks\uff08\u54ea\u91cc\u8d2d\u4e70\u5916\u94fe\uff09\u201c\u7684\u9996\u9875\u6392\u540d\u3002 \u73b0\u5728\uff0c\u4f60\u60f3\u5728\u8c37\u6b4c\u4e0a\u6392\u540d\u7684\u9875\u9762\u53ef\u80fd\u662f\u4f60\u7684\u4e3b\u9875\uff0c\u4f46\u8fd9\u4e0d\u4e00\u5b9a\u975e\u5f97\u662f\u4f60\u7684\u4e3b\u9875\u3002\u8fd9\u53ef\u4ee5\u662f\u4efb\u4f55\u9875\u9762\u3002\u53ea\u9700\u786e\u4fdd\u5b83\u7b26\u5408\u641c\u7d22\u610f\u56fe\u5373\u53ef\uff08\u8c37\u6b4c \u5e0c\u671b \u4e3a\u4f60\u6ee1\u8db3\u641c\u7d22\u9700\u6c42\u7684\u5185\u5bb9\u9875\u9762\u8fdb\u884c\u6392\u540d\uff09\u3002 \u5982\u4f55\u68c0\u67e5\uff1f\u5c06\u9875\u9762\u4e0e\u9996\u9875\u4e0a\u5df2\u6392\u540d\u7684\u5185\u5bb9\u8fdb\u884c\u6bd4\u8f83\u3002 \u5982\u679c\u4f60\u7684\u9875\u9762\u4e0e\u641c\u7d22\u610f\u56fe\u6ee1\u8db3\u201c3C\u6807\u51c6\u201d\uff0c\u5219\u5c06\u66f4\u5bb9\u6613\u83b7\u5f97\u6392\u540d\uff1a C ontent-type\uff08\u5185\u5bb9\u7c7b\u578b\uff09; C ontent format\uff08\u5185\u5bb9\u683c\u5f0f\uff09; C ontent angle\uff08\u5185\u5bb9\u89d2\u5ea6\uff09 \u8ba9\u6211\u4eec\u62c6\u5206\u8bb2\u89e3\u3002 Content-type\uff08\u5185\u5bb9\u7c7b\u578b\uff09 \u00b6 \u641c\u7d22\u7ed3\u679c\u4e2d\u6700\u5e38\u89c1\u7684\u5185\u5bb9\u201c\u7c7b\u578b\u201d\uff0c\u901a\u5e38\u662f\u4ee5\u4e0b\u4e4b\u4e00\uff1a \u535a\u5ba2\u9875\u9762\uff1b \u4ea7\u54c1\u9875\u9762 \uff08\u5173\u4e8e\u5355\u4e2a\u4ea7\u54c1\u7684\u8be6\u60c5\u9875\uff09; \u5206\u7c7b\u9875\u9762 \uff08\u591a\u4e2a\u76f8\u540c\u5c5e\u6027\u4ea7\u54c1\u7684\u9875\u9762\uff09; \u4e13\u9898\u9875\u9762 \uff08\u6295\u653e\u4ea7\u54c1\u6216\u670d\u52a1\u7684\u9875\u9762\uff09\u3002 \u901a\u8fc7\u67e5\u770b\u9875\u9762\u6807\u9898\u548cURL\uff0c\u4f60\u5c31\u53ef\u4ee5\u4e86\u89e3\u5b83\u4eec\u7684\u5185\u5bb9\u7c7b\u578b\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u53ef\u4ee5\u5230\u53c2\u4e0e \u201chow to make pancakes\uff08\u5982\u4f55\u505a\u714e\u997c\uff09\u201d\u6392\u540d\u7684\u57fa\u672c\u90fd\u662f\u535a\u5ba2\u9875\u9762\u2026 \u2026 \u53c2\u4e0e \u201cbuy MacBook Pro\uff08\u8d2d\u4e70\u82f9\u679c\u7b14\u8bb0\u672cPro\uff09\u201d\u6392\u540d\u7684\u90fd\u662f\u4ea7\u54c1\u9875\u9762\uff1a Content format\uff08\u5185\u5bb9\u683c\u5f0f\uff09 \u00b6 \u4e0b\u9762\u662f\u6392\u540d\u9760\u524d\u7684\u9875\u9762\u4e2d\u5360\u4e3b\u5bfc\u5730\u4f4d\u7684\u201c\u5185\u5bb9\u683c\u5f0f\u201d\u3002\u5b83\u4e3b\u8981\u9002\u7528\u4e8e\u4e00\u4e9b\u7279\u6b8a\u7684\u5185\u5bb9\u5c55\u793a\u6a21\u5f0f\u3002\u5e38\u89c1\u7684\u5305\u62ec\uff1a \u201c How-to\u201d guides\uff08\u5982\u4f55\u7c7b\u6559\u7a0b\uff09 * Step-by-step tutorials\uff08\u6b65\u9aa4\u6307\u5357\uff09 * List posts\uff08\u5217\u8868\u7c7b\u6587\u7ae0\uff09 * Opinion pieces\uff08\u610f\u89c1\u7247\u6bb5\uff09 * Reviews\uff08\u8bc4\u4ef7\uff09 * Comparisons\uff08\u5bf9\u6bd4\uff09 \u518d\u6765\u770b\u714e\u997c\u83dc\u8c31\u7684\u4f8b\u5b50\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u57fa\u672c\u90fd\u662f\u201chow to\u201d\u7c7b\u578b\u7684\u5185\u5bb9\u2026 \u2026 \u5f53\u6211\u4eec\u770b\u5230 \u201cblogging tips\uff08\u535a\u5ba2\u5efa\u8bae\uff09\u201d\u7684\u6392\u540d\u7ed3\u679c\uff0c\u5219\u662f\u8fd9\u79cd\u5217\u8868\u7c7b\u6587\u7ae0\uff1a Content angle\uff08\u5185\u5bb9\u89d2\u5ea6\uff09 \u00b6 \u4e0b\u9762\u6392\u540d\u9760\u524d\u7684\u9875\u9762\u4e2d\u6700\u5e38\u89c1\u7684\u201c\u5185\u5bb9\u89d2\u5ea6\u201d\u3002\u5b83\u6bd4\u7c7b\u578b\u548c\u683c\u5f0f\u66f4\u96be\u91cf\u5316\uff0c\u4f46\u4ece\u672c\u8d28\u4e0a\u8bb2\uff0c\u5b83\u662f\u9996\u9875\u6392\u540d\u7684\u4e3b\u8981\u6307\u6807\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5927\u591a\u6570\u53c2\u4e0e \u201cblogging tips\uff08\u535a\u5ba2\u5efa\u8bae\uff09\u201d\u6392\u540d\u7684\u90fd\u662f\u9488\u5bf9\u65b0\u624b\u535a\u4e3b\u7684\u3002 \u7ed3\u679c\u5c31\u662f\uff0c\u5982\u679c\u4f60\u7684\u6587\u7ae0\u662f\u5173\u4e8e\u201c\u5c06\u535a\u5ba2\u6536\u76ca\u4ece$5k \u63d0\u9ad8\u5230 $10k\u201d\u7684\u8bdd\uff0c\u90a3\u4e48\u5c31\u5f88\u96be\u53c2\u4e0e\u6392\u540d\uff0c\u56e0\u4e3a\u8fd9\u4e0d\u662f\u65b0\u624b\u60f3\u770b\u5230\u7684\u7ed3\u679c\u3002 \u6211\u7684\u9875\u9762\u6ee1\u8db3\u641c\u7d22\u610f\u56fe \u8fdb\u5165 \u6b65\u9aa4 #4. \u6211\u7684\u9875\u9762\u4e0d\u80fd\u6ee1\u8db3\u641c\u7d22\u610f\u56fe \u4f60\u6709\u4e09\u4e2a\u9009\u62e9\uff1a \u6839\u636e \u641c\u7d22\u610f\u56fe \u7f16\u8f91\u4f60\u7684\u9875\u9762\uff1b \u521b\u5efa\u4e00\u4e2a\u6ee1\u8db3\u641c\u7d22\u610f\u56fe\u7684\u9875\u9762\uff1b \u66f4\u6362\u5173\u952e\u8bcd\uff0c\u56de\u5230 \u6b65\u9aa4 #1\uff0c\u9009\u62e9\u4e00\u4e2a\u66f4\u5408\u9002\u7684\u76ee\u6807\u5173\u952e\u8bcd\u3002 \u65e0\u8bba\u4f60\u505a\u4ec0\u4e48\uff0c\u90fd\u4e0d\u8981\u8bd5\u56fe\u5c06\u65e0\u5173\u7684\u9875\u9762\u585e\u8fdb\u641c\u7d22\u7ed3\u679c\u4e2d\uff0c\u8fd9\u6ce8\u5b9a\u662f\u5f92\u52b3\u7684\u3002 \u6b65\u9aa4 #4 \u786e\u4fdd\u4f60\u7684\u5185\u5bb9\u6db5\u76d6\u4e86\u6240\u6709\u8bdd\u9898\u65b9\u5411 \u00b6 \u4ec5\u62e5\u6709\u7b26\u5408\u641c\u7d22\u610f\u56fe\u7684\u5185\u5bb9\u662f\u4e0d\u591f\u7684\u3002\u8c37\u6b4c\u7684\u76ee\u7684\u662f\u5728\u9996\u9875\u5c55\u793a\u6700\u76f8\u5173\uff0c\u6700\u6709\u7528\u7684\u7ed3\u679c\uff0c\u6240\u4ee5\u4f60\u8fd8\u9700\u8981\u5728\u9996\u9875\u4e0a\u4e89\u62a2\u4e00\u5e2d\u4e4b\u5730 \u5982\u4f55\u786e\u4fdd\u4f60\u7684\u5185\u5bb9\u7b26\u5408\u8981\u6c42\uff1f \u4f60\u53ef\u4ee5\u901a\u8fc7\u6db5\u76d6\u641c\u7d22\u8005\u60f3\u77e5\u9053\u548c\u671f\u671b\u770b\u5230\u7684\u6240\u6709\u5185\u5bb9\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u6bd4\u5982\u8bf4\u4f60\u60f3\u53c2\u4e0e \u201cbest watch brands\uff08\u6700\u597d\u7684\u624b\u8868\u54c1\u724c\uff09\u201d\u7684\u6392\u540d\u3002 \u6211\u4eec\u901a\u8fc7\u5bf9\u641c\u7d22\u610f\u56fe\u7684\u5206\u6790\u53ef\u4ee5\u4e86\u89e3\u5230\uff0c\u4f60\u9700\u8981\u5199\u4e00\u4e2a\u5217\u8868\u7c7b\u7684\u535a\u5ba2\u9875\u9762\uff0c\u5e76\u4e14\u4e3b\u8981\u9488\u5bf9\u4e00\u4e9b\u5962\u4f88\u54c1\u724c\u3002 \u6709\u53ef\u80fd\u4f60\u5df2\u7ecf\u6709\u8fd9\u6837\u7684\u4e00\u4e2a\u9875\u9762\u4e86\uff0c\u9700\u8981\u91cd\u65b0\u5199\u5417\uff1f\u73b0\u5728\u5b83\u662f\u5426\u6db5\u76d6\u4e86\u641c\u7d22\u8005\u60f3\u4e86\u89e3\u7684\u6240\u6709\u624b\u8868\u54c1\u724c\u548c\u7c7b\u522b\uff1f \u6700\u7b80\u5355\u7684\u65b9\u6cd5\u5c31\u662f\uff0c\u5c06\u4f60\u7684\u5185\u5bb9\u548c\u6392\u540d\u9760\u524d\u7684\u5185\u5bb9\u4f5c\u6bd4\u8f83\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4f60\u67e5\u770b\u201cbest watch brands\uff08\u6700\u597d\u7684\u624b\u8868\u54c1\u724c\uff09\u201d\u6392\u540d\u8f83\u9ad8\u7684\u9875\u9762\uff0c\u4f60\u4f1a\u53d1\u73b0\u5b83\u4eec\u90fd\u63d0\u5230\u4e86Rolex\uff08\u52b3\u529b\u58eb\uff09\u3002 \u5982\u679c\u4f60\u6ca1\u63d0\u53ca\u5b83\u7684\u8bdd\uff0c\u90a3\u4e48\u4f60\u5e94\u8be5\u628a\u5b83\u52a0\u5165\u5230\u4f60\u7684\u5185\u5bb9\u7684\u4e2d\u3002 \u4e0a\u9762\uff0c\u8fd9\u662f\u4e00\u4e2a\u663e\u800c\u6613\u89c1\u7684\u4f8b\u5b50\u3002\u4f46\u6392\u540d\u9760\u524d\u7684\u9875\u9762\u4e0a\u9875\u63d0\u5230\u7684\u5176\u4ed6\u7684\u4e00\u4e9b\u54c1\u724c\uff0c\u5305\u62ec\uff1a Tag Heuer\uff08\u6cf0\u683c\u8c6a\u96c5\uff09; Chopard\uff08\u745e\u58eb\u8427\u90a6\uff09; Omega\uff08\u6b27\u7c73\u4f3d\uff09; Cartier\uff08\u5361\u8fea\u4e9a\uff09\u3002 \u901a\u8fc7\u63d0\u53ca\u8fd9\u4e9b\u5185\u5bb9\uff0c\u4f60\u4e0d\u4ec5\u53ef\u4ee5\u4e3a\u641c\u7d22\u8005\u63d0\u4f9b\u4ed6\u4eec\u60f3\u8981\u548c\u671f\u671b\u770b\u5230\u7684\u4e1c\u897f\uff0c\u8fd8\u53ef\u4ee5\u6f5c\u5728\u5730\u63d0\u9ad8\u5185\u5bb9\u5728\u8c37\u6b4c\u773c\u4e2d\u7684\u76f8\u5173\u6027\u3002 \u91cd\u8981 \u8fd9\u4e0d\u4ec5\u4ec5\u662f\u201c\u6dfb\u52a0\u5173\u952e\u8bcd\u201d\u90a3\u4e48\u7b80\u5355\uff0c\u800c\u662f\u5173\u4e8e\u589e\u52a0\u5185\u5bb9\u7684\u6df1\u5ea6\uff0c\u4ee5\u53ca\u5b9e\u7528\u6027\u3002\u4e0d\u8981\u4e3a\u4e86\u51fa\u73b0\u8fd9\u4e9b\u5185\u5bb9\u800c\u5c06\u8fd9\u4e9b\u5173\u952e\u8bcd\u548c\u8bcd\u7ec4\u5f3a\u884c\u52a0\u5165\u4f60\u7684\u5185\u5bb9\u4e2d\u3002 \u5982\u679c\u4f60\u60f3\u505a\u7684\u66f4\u6df1\u5165\u4e00\u4e9b\uff0c\u53ef\u4ee5\u501f\u52a9 Content Gap \uff08\u5185\u5bb9\u5dee\u8ddd\u673a\u4f1a\uff09\u5bf9\u9875\u9762\u8fdb\u884c\u5206\u6790\u3002 \u4f60\u53ea\u9700\u8981\u5c06\u4e00\u4e9b\u6392\u540d\u4e0d\u9519\u7684\u9875\u9762URL\u7c98\u8d34\u5230 Ahrefs Content Gap \uff08\u5185\u5bb9\u5dee\u8ddd\u673a\u4f1a\uff09\u5de5\u5177\u4e2d\u5373\u53ef\u3002 \u5c0f\u63d0\u793a. \u786e\u4fdd\u4f60\u5728\u4e0b\u62c9\u6846\u4e2d\u9009\u62e9\u7684\u662f\u201cURL\u6a21\u5f0f\u201d\uff0c\u540c\u65f6\u6700\u4e0b\u65b9\u7559\u7a7a\u3002 \u786e\u4fdd\u4f60\u5728\u4e0b\u62c9\u6846\u4e2d\u9009\u62e9\u7684\u662f\u201cURL\u6a21\u5f0f\u201d\uff0c\u540c\u65f6\u6700\u4e0b\u65b9\u7559\u7a7a\u3002 \u70b9\u51fb \u201cShow keywords\uff08\u5c55\u793a\u5173\u952e\u8bcd\uff09\u201c\u4f60\u5c31\u53ef\u4ee5\u770b\u5230\u8fd9\u4e9b\u9875\u9762\u53c2\u4e0e\u6392\u540d\u7684\u5173\u952e\u8bcd\u3002 \u540c\u6837\uff0c\u4e0d\u8981\u5c06\u5176\u89c6\u4e3a\u4e00\u4e2a\u7b80\u5355\u7684\u5173\u952e\u8bcd\u5217\u8868\uff0c\u4f60\u9700\u8981\u6df1\u5165\u4e86\u89e3\u4eba\u4eec\u5728\u8c37\u6b4c\u4e0a\u8f93\u5165\u6b64\u5173\u952e\u8bcd\u65f6\u60f3\u8981\u770b\u5230\u7684\u5185\u5bb9\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u6211\u4eec\u53ef\u4ee5\u4e86\u89e3\u5230\uff1a swiss watch brands\uff08\u745e\u58eb\u624b\u8868\u54c1\u724c\uff09; luxury swiss watches\uff08\u745e\u58eb\u5962\u4f88\u624b\u8868\uff09; mechanical watch brands\uff08\u673a\u68b0\u624b\u8868\u54c1\u724c\uff09; french watch brands\uff08\u6cd5\u56fd\u624b\u8868\u54c1\u724c\uff09\u3002 \u56e0\u6b64\uff0c\u4f60\u9700\u8981\u786e\u4fdd\u5728\u5185\u4e2d\u6d89\u53ca\u5230\u8fd9\u4e9b\uff0c\u751a\u81f3\u53ef\u4ee5\u4f7f\u7528\u67d0\u4e9b\u4f5c\u4e3a\u5185\u5bb9\u7684\u526f\u6807\u9898\u3002 \u6211\u7684\u5185\u5bb9\u90fd\u6db5\u76d6\u4e86\u6240\u6709\u8bdd\u9898 \u8fdb\u5165 \u6b65\u9aa4 #5. \u6211\u7684\u5185\u5bb9\u5e76\u6ca1\u6709\u6db5\u76d6\u6240\u6709\u8bdd\u9898 \u6309\u7167\u4e0a\u9762\u7684\u6d41\u7a0b\u4e30\u5bcc\u4f60\u7684\u5185\u5bb9\u3002\u5982\u679c\u8fd9\u6837\u505a\u8981\u82b1\u8d39\u5f88\u957f\u65f6\u95f4\uff0c\u90a3\u4e48\u5c31\u8fd4\u56de \u6b65\u9aa4 #1 \u5e76\u9009\u62e9\u4e00\u4e2a\u7b80\u5355\u7684\u5173\u952e\u8bcd\u3002 \u6b65\u9aa4 #5 \u4f30\u7b97\u4f60\u9700\u8981\u7684\u5916\u94fe\u91cf \u00b6 \u5916\u94fe\u662f\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u6392\u540d\u6307\u6807\u3002\u4e0d\u4ec5 \u8c37\u6b4c\u8fd9\u4e48\u8bf4\u4e86 \uff0c\u540c\u65f6\u884c\u4e1a\u4e2d\u7684\u5404\u9879\u7814\u7a76\u4e5f\u8868\u660e\u81ea\u7136\u641c\u7d22\u6d41\u91cf\u548c\u5916\u94fe\u6709\u7740\u975e\u5e38\u5f3a\u7684\u5173\u7cfb\u3002 \u7814\u7a76\u4e2d\u4e5f\u5305\u62ec \u6211\u4eec \u5173\u4e8e10\u4ebf\u9875\u9762\u7684\u7814\u7a76\u3002 \u56e0\u6b64\uff0c\u62e5\u6709\u7684\u5916\u94fe\u8d28\u91cf\u8d8a\u9ad8\uff0c\u4f60\u5728\u8c37\u6b4c\u9996\u9875\u4e0a\u6392\u540d\u7684\u673a\u4f1a\u5c31\u8d8a\u9ad8\u3002 \u95ee\u9898\u662f\uff0c\u4f60\u5982\u4f55\u77e5\u9053\u9700\u8981\u591a\u5c11\u4e2a\u5916\u94fe\uff1f \u4e0b\u9762\u5c31\u662f\u4e8b\u5b9e\uff1a \u7531\u4e8e\u5e76\u975e\u6240\u6709\u5916\u94fe\u90fd\u662f\u4e00\u6837\u7684\uff0c\u56e0\u6b64\u65e0\u6cd5\u786e\u5b9a\u786e\u5207\u7684\u6570\u5b57\u3002\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u7c97\u7565\u7684\u4f30\u8ba1\u3002 \u4f60\u53ef\u4ee5\u501f\u52a9 Ahrefs Keywords Explorer \uff08\u5173\u952e\u8bcd\u5206\u6790\uff09\uff0c\u641c\u7d22\u4f60\u7684\u76ee\u6807\u5173\u952e\u8bcd\uff0c \u5e76\u67e5\u770b Keyword Difficulty\uff08\u5173\u952e\u8bcd\u96be\u5ea6\uff09 \u6307\u6807\u4e0b\u65b9\u7684\u6570\u5b57\u3002 \u8fd9\u662f\u4e00\u4e2a\u8d85\u7ea7\u7c97\u7565\u7684\u4f30\u8ba1\uff0c\u6240\u4ee5\u4f60\u9700\u8981\u8fa9\u8bc1\u7684\u53bb\u770b\u5f85\u8fd9\u4e2a\u6307\u6807\u3002 \u8981\u83b7\u5f97\u66f4\u51c6\u786e\u7684\u4f30\u7b97\uff0c\u8bf7\u5411\u4e0b\u6eda\u52a8\u81f3SERP overview\uff08SERP\u6982\u89c8\uff09\u677f\u5757\uff0c\u5e76\u67e5\u770b\u548c\u6392\u540d\u8f83\u9ad8\u9875\u9762\u7684 referring domains\uff08\u53cd\u94fe\u57df\u540d\uff09\u6570\u91cf\u7684\u5dee\u8ddd\u3002 \u5982\u679c\u6211\u4eec\u67e5\u770b \u201ccar insurance\uff08\u6c7d\u8f66\u4fdd\u9669\uff09\u201d\u8fd9\u4e2a\u8bcd\uff0c\u6392\u540d\u524d\u5341\u7684\u9875\u9762\u4e2d\u6709154\u4e2a\u81f31,228\u4e2areferring domains\uff08\u53cd\u94fe\u57df\u540d\uff09\u3002 \u540c\u6837\u7684\uff0c\u6211\u4eec\u5bf9 \u201ccheap car insurance\uff08\u4fbf\u5b9c\u7684\u6c7d\u8f66\u4fdd\u9669\uff09\u201d\u8fdb\u884c\u7814\u7a76\uff0c\u8303\u56f4\u572824\u4e2a-434\u4e2a\u3002 \u4ee5\u53ca\u9488\u5bf9 \u201cvery cheap car insurance no deposit\uff08\u975e\u5e38\u4fbf\u5b9c\u7684\u6c7d\u8f66\u4fdd\u9669 \u6ca1\u5b58\u6b3e\uff09\u201d\u8fdb\u884c\u7814\u7a76\uff0c\u8303\u56f4\u8fd9\u662f2\u4e2a\u523052\u4e2a. \u56e0\u6b64\uff0c\u76f8\u6bd4\u4e8e\u201ccar insurance\uff08\u6c7d\u8f66\u4fdd\u9669\uff09\u201d\uff0c\u201ccheap car insurance\uff08\u4fbf\u5b9c\u7684\u6c7d\u8f66\u4fdd\u9669\uff09\u201d\u9700\u8981\u66f4\u5c11\u7684\u5916\u94fe\uff0c\u800c \u201cvery cheap car insurance no deposit\uff08\u975e\u5e38\u4fbf\u5b9c\u7684\u6c7d\u8f66\u4fdd\u9669 \u6ca1\u5b58\u6b3e\uff09\u201d\u9700\u8981\u7684\u5c31\u66f4\u52a0\u5c11\u4e86\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7 Ahrefs\u514d\u8d39\u7684backlink checker \uff08\u5916\u94fe\u68c0\u67e5\uff09\u5de5\u5177\u6765\u67e5\u770b\u4f60\u7684\u5916\u94fe\u6570\u91cf\u3002 \u8fd9\u5e94\u8be5\u53ef\u4ee5\u5927\u81f4\u7684\u544a\u8bc9\u4f60\uff0c\u4f60\u8fd8\u9700\u8981\u505a\u591a\u5c11\u5de5\u4f5c\u3002 \u540c\u65f6\uff0c\u8bf7\u8bb0\u4f4f\u4e24\u70b9\uff1a \u91cd\u8981\u7684\u4e0d\u4ec5\u4ec5\u662f\u6570\u91cf\u3002 \u56e0\u4e3a\u94fe\u63a5\u7684\u6570\u91cf\u53ea\u662f\u65b9\u7a0b\u5f0f\u7684\u4e00\u90e8\u5206\uff0c\u8d28\u91cf\u4e5f\u5f88\u91cd\u8981\u3002 \uff08\u5982\u679c\u4f60\u8981\u66f4\u6df1\u5165\u7814\u7a76\u8fd9\u4e00\u70b9\uff0c\u8bf7\u67e5\u770b\u5f53\u524d\u6392\u540d\u6700\u9ad8\u7684\u9875\u9762\u7684\u201cReferring domains\uff08\u53cd\u94fe\u57df\u540d\uff09\u201d\u62a5\u544a\uff0c\u4ee5\u67e5\u770b\u94fe\u63a5\u5230\u5b83\u4eec\u7684\u7f51\u7ad9\u4e2d\u6709\u591a\u5c11\u662f\u9ad8\u8d28\u91cf\u7684\u3002\uff09 \u8fd9\u4e9b\u6570\u5b57\u662f\u5426\u80fd\u8fbe\u5230\uff0c\u53d6\u51b3\u4e8e\u4f60\u5efa\u7acb\u94fe\u63a5\u7684\u80fd\u529b \u4ee5\u53ca\u4f60\u613f\u610f\u4e3a\u8be5\u9875\u9762\u6392\u540d\u6240\u82b1\u8d39\u7684\u65f6\u95f4\u548c\u7cbe\u529b\u3002 \u6211\u53ef\u4ee5\u83b7\u5f97\u8db3\u591f\u7684\u5916\u94fe \u8fdb\u5165 \u6b65\u9aa4 #6\u3002 \u6211\u65e0\u6cd5\u83b7\u5f97\u8db3\u591f\u7684\u5916\u94fe \u5982\u679c\u4f60\u611f\u89c9\u5236\u4f5c\u9ad8\u8d28\u91cf\u7684\u5916\u94fe\u6bd4\u8f83\u56f0\u96be\u65f6\uff0c\u8bf7\u8fd4\u56de \u6b65\u9aa4 #1\uff0c\u7136\u540e\u9009\u62e9\u4e00\u4e2a\u66f4\u7b80\u5355\u7684\u5173\u952e\u8bcd\u3002\u8fd9\u662f\u77ed\u671f\u83b7\u5f97\u6392\u540d\u6700\u597d\u7684\u65b9\u6cd5\u3002\u7b49\u5230\u4f60\u6709\u66f4\u591a\u7684\u94fe\u63a5\u5efa\u8bbe\u7ecf\u9a8c\u65f6\uff0c\u518d\u53bb\u9488\u5bf9\u96be\u5ea6\u7a0d\u9ad8\u7684\u5173\u952e\u8bcd\u8fdb\u884c\u6392\u540d\u7684\u4f18\u5316\u3002 \u6b65\u9aa4 #6 \u5efa\u7acb\u66f4\u591a\u5916\u94fe\u5e76\u6dfb\u52a0\u5185\u94fe \u00b6 \u5916\u94fe\u6709\u52a9\u4e8e\u63d0\u9ad8\u9875\u9762\u7684\u201c\u6743\u91cd\u201d\uff0c\u9ad8\u6743\u91cd\u9875\u9762\u7684\u6392\u540d\u5f80\u5f80\u9ad8\u4e8e\u4f4e\u6743\u91cd\u9875\u9762\u3002 \u8fd9\u662f\u8c37\u6b4c\u7b97\u6cd5\u5de5\u4f5c\u539f\u7406\u4e4b\u4e00\u3002\u8fd9\u4e5f\u662f\u6211\u4eec\u7814\u7a76\u8fc7\u7684\u5185\u5bb9\u3002 \u5c0f\u63d0\u793a. URL Rating \uff08\u7f51\u5740\u8bc4\u5206\uff09\u662fAhrefs\u9488\u5bf9\u9875\u9762\u8ba1\u7b97\u7684\u6743\u91cd\u6307\u6807\uff0c\u548cDomain Rating\uff08\u57df\u540d\u8bc4\u5206\uff09\u4e00\u6837\uff0c\u6570\u503c\u662f0\u2013100\u4e4b\u95f4\u3002 \u5728\u8fd9\u4e2a\u9636\u6bb5\uff0c\u4f60\u9700\u8981\u505a\u66f4\u591a\u7684\u5916\u94fe\u3002 \u4f60\u53ef\u4ee5\u4ece\u89c2\u770b\u8fd9\u4e2a\u89c6\u9891\u5f00\u59cb\uff1a https://www.youtube.com/watch?v=3sF-m5LKCf4&list=PLvJ_dXFSpd2tjUTuAHpHidz5e2hAedP_m \u4f46\u662f\u8fd8\u6709\u53e6\u4e00\u79cd\u63d0\u9ad8\u9875\u9762\u6743\u91cd\u7684\u65b9\u6cd5\uff1a\u6dfb\u52a0\u76f8\u5173\u7684\u5185\u90e8\u94fe\u63a5\u3002 \u6700\u7b80\u5355\u7684\u65b9\u6cd5\u5c31\u662f\u5728\u8c37\u6b4c\u4e0a\u641c\u7d22 site:yourwebsite.com \"[target keyword]\" \u8fd9\u6837\u5c31\u53ef\u4ee5\u627e\u5230\u4f60\u7f51\u7ad9\u4e0a\u6240\u6709\u63d0\u53ca\u8be5\u786e\u5207\u5355\u8bcd\u6216\u77ed\u8bed\u7684\u9875\u9762\u3002 \u8fd9\u4e9b\u901a\u5e38\u90fd\u975e\u5e38\u9002\u5408\u5236\u4f5c\u5185\u90e8\u94fe\u63a5\u3002 \u6211\u5df2\u7ecf\u5236\u4f5c\u4e86\u5927\u91cf\u7684\u5916\u94fe\u548c\u5185\u94fe\u4e86 \u8fdb\u5165 \u6b65\u9aa4 #7. \u6211\u8fd8\u6ca1\u6709\u5efa\u7acb\u8db3\u591f\u7684\u5916\u94fe\u548c\u5185\u94fe\u3002 \u9605\u8bfb\u6211\u4eec\u7684 9\u4e2a\u7b80\u5355\u7684\u94fe\u63a5\u5efa\u8bbe\u7b56\u7565 \uff0c\u4ee5\u53ca SEO\u5185\u90e8\u94fe\u63a5\u4f18\u5316\u5b9e\u6218\u6307\u5357 . \u6b65\u9aa4 #7 \u4fdd\u6301\u8010\u5fc3 \u00b6 \u4e0d\u5e78\u7684\u662f\uff0c\u8981\u5728\u8c37\u6b4c\u7684\u9996\u9875\u6392\u540d\u9700\u8981\u82b1\u8d39\u4e00\u4e9b\u65f6\u95f4\u3002 \u8981\u591a\u4e45\u5462\uff1f\u66f4\u5177\u6211\u4eec\u505a\u7684 \u9488\u5bf9\u4e24\u767e\u4e07\u5173\u952e\u8bcd\u7684\u7814\u7a76 \uff0c\u4e0d\u5230\u4e24\u5e74\u7684\u65f6\u95f4\uff0c\u8fd9\u8fd8\u662f\u7b2c10\u4f4d\u7684\u6392\u540d\u3002 \u9488\u5bf9\u7b2c\u4e00\u540d\uff0c\u5e73\u5747\u6392\u540d\u65f6\u95f4\u662f3\u5e74\u3002 \u4f46\u662f\uff0c\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u4f60\u9700\u89812\u20133\u5e74\u624d\u80fd\u6392\u540d\u3002\u6709\u4e9b\u9875\u9762\u7684\u6392\u540d\u8981\u6bd4\u8fd9\u5feb\u5f97\u591a\u3002\u5982\u679c\u4f60\u521b\u5efa\u6b63\u786e\u7684\u5185\u5bb9\u5e76\u5bf9SEO\u6709\u8d44\u6e90\u6295\u5165\uff0c\u90a3\u4e48\u5230\u8fbe\u9996\u9875\u7684\u901f\u5ea6\u53ef\u80fd\u4f1a\u6bd4\u5e73\u5747\u901f\u5ea6\u5feb\u5f97\u591a\u3002 \u6211\u6392\u540d\u5230\u4e86\u7b2c\u4e00\u9875\uff01 \u91cd\u590d\u4e0a\u8ff0\u8fc7\u7a0b\u4ee5\u83b7\u53d6\u66f4\u591a\u5173\u952e\u8bcd\u7684\u6392\u540d\uff0c\u4ee5\u83b7\u53d6\u66f4\u591a\u6d41\u91cf\u3002 \u6211\u7684\u7b2c\u4e00\u4e2a\u9875\u9762\u4f9d\u7136\u6ca1\u6709\u6392\u540d \u91cd\u590d \u6b65\u9aa4 #6. \u4e3a\u4ec0\u4e48\u5728\u8c37\u6b4c\u9996\u9875\u4e0a\u6392\u540d\u5e76\u4e0d\u662f\u6700\u7ec8\u76ee\u6807 \u00b6 \u4f60\u53ef\u4ee5\u8fd9\u4e2a\u56fe\uff1a \u8fd9\u663e\u793a\u4e86\u70ed\u95e8\u200b\u200b\u8c37\u6b4c\u641c\u7d22\u7ed3\u679c\u7684\u5e73\u5747\u70b9\u51fb\u7387\u3002\u4f60\u4f1a\u770b\u5230\uff0c\u7ecf\u8fc7\u524d\u51e0\u4e2a\u7ed3\u679c\uff0c\u70b9\u51fb\u7387\u5f88\u5feb\u5c31\u6d88\u5931\u4e86\u3002 \u540c\u65f6\u4f60\u53ef\u4ee5\u770b\u523070%\u7684\u70b9\u51fb\u7387\u90fd\u8d21\u732e\u7ed9\u4e86\u524d3\u540d\u3002 \u7531\u4e8e\u8fd9\u79cd\u5dee\u5f02\u7684\u6781\u7aef\u7a0b\u5ea6\uff0c\u6392\u540d\u7ed3\u679c\u4e0b\u534a\u90e8\u5206\u7684\u7f51\u9875\u4ec5\u83b7\u5f97\u5173\u952e\u8bcd\u70b9\u51fb\u91cf\u7684\u4e00\u5c0f\u90e8\u5206\u3002 \u4e3a\u4e86\u663e\u793a\u6392\u540d\u4e4b\u95f4\u70b9\u51fb\u7387\u7684\u5de8\u5927\u5dee\u5f02\uff0c\u4ee5\u4e0b\u662f\u6bcf\u6708\u641c\u7d22\u91cf\u4e3a10,000\u6b21\u7684\u5173\u952e\u8bcd\u5728\u9996\u9875\u4e0a\u6bcf\u4e2a\u7ed3\u679c\u7684\u5e73\u5747\u8bbf\u95ee\u91cf\uff1a Position Traffic 1 3,121 2 1,388 3 982 4 610 5 751 6 287 7 209 8 162 9 132 10 109 \u76f8\u5dee\u975e\u5e38\u5927\u3002 \u56e0\u6b64\uff0c\u5c3d\u7ba1\u5728\u8c37\u6b4c\u9996\u9875\u4e0a\u6392\u540d\u53ea\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u8d77\u70b9\uff0c\u4f46\u4f60\u9700\u8981\u66f4\u9ad8\u7684\u6392\u540d\u624d\u80fd\u83b7\u5f97\u66f4\u591a\u7684\u6d41\u91cf\u3002 \u63a8\u8350\u9605\u8bfb\uff1a \u5982\u4f55\u5728\u8c37\u6b4c\u4e2d\u6392\u540d\u66f4\u9ad8\uff086\u4e2a\u7b80\u5355\u7684\u6b65\u9aa4\uff09 \u4e13\u5bb6\u5efa\u8bae \u867d\u7136\u5e73\u5747\u6570\u5f88\u6709\u53c2\u8003\u4ef7\u503c\uff0c\u4f46\u70b9\u51fb\u6b21\u6570\u7684\u771f\u5b9e\u5206\u5e03\u53d6\u51b3\u4e8e\u641c\u7d22\u7684\u5173\u952e\u8bcd\u3002 \u5982\u679c\u4f60\u60f3\u67e5\u770b\u4f60\u7684\u5173\u952e\u8bcd\u6570\u636e\uff0c\u5c06\u5b83\u7c98\u8d34\u5230 Ahrefs Keywords Explorer \uff08\u5173\u952e\u8bcd\u5206\u6790\uff09\u4e2d\uff0c\u540c\u65f6\u8fdb\u5165 \u201cTraffic share by pages\uff08\u9875\u9762\u6d41\u91cf\u5206\u5e03\uff09\u201c\u62a5\u544a\uff0c\u5b83\u4f1a\u544a\u8bc9\u4f60\u6392\u540d\u9760\u524d\u9875\u9762\u5927\u81f4\u7684\u70b9\u51fb\u5206\u5e03\u60c5\u51b5\u3002 \u6211\u4eec\u53ef\u4ee5 \u201cbest protein powder\uff08\u6700\u597d\u7684\u86cb\u767d\u7c89\uff09\u201c\u8fd9\u4e2a\u8bcd\uff0c \u70b9\u51fb\u5206\u5e03\u57fa\u672c\u548c\u5e73\u5747\u503c\u662f\u4e00\u81f4\u7684\u3002 \u7136\u800c\u5bf9\u4e8e\u50cf \u201cGoogle Analytics\uff08\u8c37\u6b4c\u5206\u6790\uff09\u201c\u8fd9\u6837\u7684\u5173\u952e\u8bcd\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u7b2c\u4e00\u540d\u83b7\u5f97\u4e86\u5927\u91cf\u7684\u70b9\u51fb\uff1a \u53d1\u751f\u7684\u539f\u56e0\u5c31\u662f \u201cGoogle Analytics\uff08\u8c37\u6b4c\u5206\u6790\uff09\u201c\u662f\u4e00\u4e2a\u54c1\u724c\u8bcd\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u7528\u6237\u641c\u7d22\u8fd9\u4e2a\u8bcd\u65f6\u60f3\u627e\u7684\u5c31\u662f\u8fd9\u4e2a\u7279\u5b9a\u7684\u9875\u9762\u3002 \u6700\u540e \u00b6 \u5728Google\u9996\u9875\u4e0a\u7684\u6392\u540d\u5e76\u4e0d\u662f\u4e00\u95e8\u7cbe\u51c6\u7684\u79d1\u5b66\u3002\u6ca1\u4eba\u786e\u5207\u77e5\u9053\u8c37\u6b4c\u7b97\u6cd5\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u56e0\u6b64\u6ca1\u6709\u4fdd\u8bc1\u6392\u540d\u7684\u516c\u5f0f\u3002\uff08\u522b\u4eba\u4e0d\u4f1a\u544a\u8bc9\u4f60\uff0c\u751a\u81f3\u6211\u4eec\u4e5f\u4e0d\u77e5\u9053\uff01\uff09 \u4e5f\u5c31\u662f\u8bf4\uff0c\u4ee5\u4e0a\u8fc7\u7a0b\u4e3b\u8981\u57fa\u4e8e\u6211\u4eec\u5728\u4f17\u591a\u5927\u89c4\u6a21\u7814\u7a76\u4e2d\u5f97\u51fa\u7684\u7ed3\u679c\u3002\u7814\u7a76\u548c\u7ecf\u9a8c\u662f\u68c0\u9a8c\u6211\u4eec\u7684 SEO\u7b56\u7565 \u662f\u5426\u7b26\u5408\u8c37\u6b4c\u542b\u7cca\u4e0d\u6e05\u7b97\u6cd5\u7684\u7684\u6700\u4f73\u505a\u6cd5\u3002 \u6709\u7591\u95ee\u5417\uff1f\u4f60\u53ef\u4ee5\u5728\u4e0b\u65b9\u7559\u8a00\uff0c\u6216\u8005\u5728 Twitter \u4e0a\u627e\u6211\u3002 \u51e1\u672c\u7f51\u6ce8\u660e\"\u6765\u6e90\uff1aXXX \"\u7684\u6587/\u56fe/\u89c6\u9891\u7b49\u7a3f\u4ef6\uff0c\u672c\u7f51\u8f6c\u8f7d\u51fa\u4e8e\u4f20\u9012\u66f4\u591a\u4fe1\u606f\u4e4b\u76ee\u7684\uff0c\u5e76\u4e0d\u610f\u5473\u7740\u8d5e\u540c\u5176\u89c2\u70b9\u6216\u8bc1\u5b9e\u5176\u5185\u5bb9\u7684\u771f\u5b9e\u6027\u3002\u5982\u6d89\u53ca\u4f5c\u54c1\u5185\u5bb9\u3001\u7248\u6743\u548c\u5176\u5b83\u95ee\u9898\uff0c\u8bf7\u4e0e\u672c\u7f51\u8054\u7cfb\uff0c\u6211\u4eec\u5c06\u5728\u7b2c\u4e00\u65f6\u95f4\u5220\u9664\u5185\u5bb9\uff01 \u4f5c\u8005: Joshua Hardwick \u6765\u6e90\uff1a https://ahrefs.com/blog/zh/how-to-get-on-the-first-page-of-google/","title":"\u5982\u4f55\u8ba9\u7f51\u7ad9\u6392\u540d\u8fdb\u5165\u8c37\u6b4c\u9996\u9875"},{"location":"pages/affiliate/how-to-get-on-the-first-page-of-google/#\u5982\u4f55\u8ba9\u7f51\u7ad9\u6392\u540d\u8fdb\u5165\u8c37\u6b4c\u9996\u9875-\u4e92\u52a8\u6307\u5357","text":"\u9690\u85cf\u5c38\u4f53\u7684\u6700\u4f73\u4f4d\u7f6e\u662f\u8c37\u6b4c\u7684\u7b2c\u4e8c\u9875\u3002 \u4f60\u53ef\u80fd\u4ee5\u524d\u542c\u8fc7\u8fd9\u53e5\u8bdd\u3002\u8fd9\u662fSEO\u4e1a\u754c\u6d41\u4f20\u7684\u4e00\u4e2a\u7b11\u8bdd\uff0c\u56e0\u4e3a\u53ea\u6709 0.78% \u7684\u7528\u6237\u4f1a\u70b9\u51fb\u8c37\u6b4c\u7b2c\u4e8c\u9875\u7684\u7ed3\u679c\u3002 \u628a\u7b11\u8bdd\u653e\u4e00\u8fb9\uff0c\u4e0b\u9762\u8fd9\u662f\u73b0\u5b9e\uff1a \u5982\u679c\u4f60\u7684\u6392\u540d\u5728\u7b2c\u4e8c\u9875\u6216\u66f4\u9760\u540e\u7684\u9875\u9762\uff0c\u90a3\u4e48\u4f60\u57fa\u672c\u4e0a\u662f\u65e0\u6cd5\u88ab\u770b\u5230\u7684\u3002 \u5728\u672c\u6307\u5357\u4e2d\uff0c\u4f60\u5c06\u5b66\u4e60\u5982\u4f55\u901a\u8fc77\u4e2a\u7b80\u5355\u7684\u6b65\u9aa4\u89e3\u51b3\u9996\u9875\u6392\u540d\u95ee\u9898\uff0c\u4ee5\u53ca\u4e86\u89e3\u4e3a\u4ec0\u4e48\u6392\u540d\u9996\u9875\u4e5f\u4e0d\u4e00\u5b9a\u662f\u4f60\u7684\u6700\u7ec8\u76ee\u6807\u3002 \u4f60\u662f\u505a\u672c\u5730\u5316\u4e1a\u52a1\u7684\u5417\uff1f \u5982\u679c\u4f60\u5728\u641c\u7d22\u76ee\u6807\u5173\u952e\u8bcd\u65f6\uff0c\u5728\u7ed3\u679c\u4e2d\u770b\u5230\u4e86\u201c\u5730\u56fe\u5c55\u793a\u201d\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u9605\u8bfb \u8fd9\u4e2a\u6307\u5357 \u3002 https://www.youtube.com/watch?v=FUYAe5ROeP0","title":"\u5982\u4f55\u8ba9\u7f51\u7ad9\u6392\u540d\u8fdb\u5165\u8c37\u6b4c\u9996\u9875 [\u4e92\u52a8\u6307\u5357]"},{"location":"pages/affiliate/how-to-get-on-the-first-page-of-google/#\u5728\u6211\u4eec\u5f00\u59cb\u4e4b\u524d","text":"\u4e0b\u9762\u8fd9\u4e9b\u4e0d\u662f\u5fc5\u9700\u6761\u4ef6\uff0c\u4f46\u662f\u4e3a\u4e86\u6700\u5927\u7a0b\u5ea6\u5730\u5229\u7528\u672c\u6307\u5357\uff08\u5e76\u83b7\u5f97\u5728\u7b2c\u4e00\u9875\u6392\u540d\u7684\u673a\u4f1a\uff09\uff0c\u4f60\u7684\u7f51\u7ad9\u5e94\u8be5\uff1a \u79fb\u52a8\u7aef\u53cb\u597d; \u52a0\u8f7d\u901f\u5ea6\u5757; \u4f7f\u7528\u7b80\u5355\uff08\u6bd4\u5982\u7b80\u6d01\u7684\u5bfc\u822a\u3001\u6f02\u4eae\u7684\u7528\u6237\u4f53\u9a8c\u7b49\u7b49\uff09; \u52a0\u5bc6 (\u4f8b\u5982\u4f7f\u7528 HTTPS \u800c\u4e0d\u662f HTTP ); \u7ed3\u6784\u5206\u660e; \u53ef\u4ee5\u89e3\u51b3 SEO\u6280\u672f\u7c7b\u95ee\u9898 \u3002 \u5982\u679c\u4f60\u7684\u7f51\u7ad9\u4e0d\u7b26\u5408\u4e0a\u8ff0\u6807\u51c6\uff0c\u8fd9\u4e9b\u56e0\u7d20\u4e0d\u4ec5\u4f1a\u76f4\u63a5\u5f71\u54cd\u4f60\u5728\u8c37\u6b4c\u7684\u6392\u540d\uff0c\u540c\u65f6\u4f1a\u5bfc\u81f4\u6267\u884c\u4ee5\u4e0b\u6559\u7a0b\u7684\u96be\u5ea6\u589e\u52a0\u3002 \u4e0b\u9762\u662f\u6574\u4e2a\u8fc7\u7a0b\u7684\u6d41\u7a0b\u56fe\uff1a \u51c6\u5907\u597d\u4e86\u5417\uff1f\u8ba9\u6211\u4eec\u5f00\u59cb\u5427","title":"\u5728\u6211\u4eec\u5f00\u59cb\u4e4b\u524d\u2026"},{"location":"pages/affiliate/how-to-get-on-the-first-page-of-google/#\u6b65\u9aa4-1-\u9009\u62e9\u4e00\u4e2a\u5173\u952e\u8bcd","text":"\u4f60\u4eec\u4e2d\u7684\u5927\u591a\u6570\u4eba\u53ef\u80fd\u5df2\u7ecf\u505a\u8fc7\u8fd9\u4e00\u6b65\u4e86\u3002\u4f46\u662f\u5982\u679c\u4f60\u8fd8\u6ca1\u6709\u505a\u8fc7\uff0c\u5219\u9700\u8981\u9009\u62e9\u4e00\u4e2a\u9700\u8981\u4e0a\u9996\u9875\u7684\u5173\u952e\u8bcd\u3002 \u6211\u5df2\u7ecf\u5b8c\u6210\u8fd9\u4e00\u6b65\u4e86 \u63a5\u7740 \u6b65\u9aa4 #2. \u6211\u8fd8\u6ca1\u6709\u505a\u8fd9\u4e00\u6b65 \u8bf7\u67e5\u770b\u6211\u4eec\u7684 \u5173\u952e\u8bcd\u7814\u7a76\u6307\u5357 \u3002","title":"\u6b65\u9aa4 #1 \u9009\u62e9\u4e00\u4e2a\u5173\u952e\u8bcd"},{"location":"pages/affiliate/how-to-get-on-the-first-page-of-google/#\u6b65\u9aa4-2-\u67e5\u770b\u7ade\u4e89\u5bf9\u624b","text":"\u8fd9\u5c31\u597d\u6bd4\u4f60\u60f3\u5728 Walmart\uff08\u6c83\u5c14\u739b\uff09\u65c1\u8fb9\u5efa\u7acb\u4e00\u4e2a\u6742\u8d27\u5e97\u4e00\u6837\uff0c\u5728\u7ade\u4e89\u6fc0\u70c8\u7684\u60c5\u51b5\u4e0b\uff0c\u662f\u5f88\u96be\u5728\u8c37\u6b4c\u7684\u9996\u9875\u6392\u540d\u7684\u3002\u56e0\u6b64\uff0c\u4e0b\u4e00\u6b65\u5c31\u662f\u8981\u4e86\u89e3\u7ade\u4e89\u5bf9\u624b\u2014\u2014\u9996\u5148\u8981\u9762\u5bf9\u7684\u5bf9\u624b\u662f\u8c01\u3002 \u4e3a\u6b64\uff0c\u8bf7\u641c\u7d22\u4f60\u7684\u5173\u952e\u8bcd\u5e76\u67e5\u770b\u7b2c\u4e00\u9875\u7684\u7ed3\u679c\u3002 \u5982\u679c\u5b83\u4eec\u5168\u90e8\u6765\u81ea\u77e5\u540d\u7684\u5927\u54c1\u724c\uff0c\u5e76\u4e14\u4f60\u662f\u4e00\u5bb6\u6ca1\u4eba\u542c\u8bf4\u8fc7\u7684\u521b\u4e1a\u516c\u53f8\uff0c\u90a3\u4e48\u8fdb\u5165\u9996\u9875\u5c06\u975e\u5e38\u8270\u96be\u2014\u2014\u81f3\u5c11\u5728\u77ed\u671f\u5185\u662f\u5982\u6b64\u3002 \u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u67e5\u770b\u8fd9\u4e2a\u8bcd \u201cdresses\uff08\u793c\u88d9\uff09\u201c\u7684\u641c\u7d22\u7ed3\u679c\uff1a \u6bcf\u4e2a\u7ed3\u679c\u90fd\u6765\u81ea\u77e5\u540d\u7684\u54c1\u724c\u2014\u2014Macy\u2019s\uff08\u6885\u897f\u767e\u8d27\uff09, Nordstrom\uff08\u8bfa\u5fb7\u65af\u901a\uff09, Missguided\uff0cBoohoo\u7b49\u7b49\u3002 \u8bd1\u8005\u6ce8\uff1a Missguided\uff1a2009\u5e74\u5728\u7f8e\u56fd\u7ebd\u7ea6\u6210\u7acb\u7684\u77e5\u540d\u5973\u88c5\u54c1\u724c Boohoo\uff1a\u77e5\u540d\u82f1\u56fd\u7684\u5728\u7ebf\u96f6\u552e\u54c1\u724c \u8fd9\u6e05\u695a\u5730\u8868\u660e\uff0c\u90a3\u4e9b\u5e0c\u671b\u8d2d\u4e70\u65b0\u8863\u670d\u7684\u4eba\u5e0c\u671b\u4ece\u4e00\u4e2a\u77e5\u540d\u7684\u8001\u54c1\u724c\u90a3\u91cc\u8d2d\u4e70\u3002\u4e00\u4e2a\u65b0\u7684\u54c1\u724c\u7f51\u7ad9\u60f3\u53c2\u4e0e\u8fd9\u4e2a\u5173\u952e\u8bcd\u7684\u6392\u540d\uff0c\u95e8\u69db\u4f1a\u5f88\u9ad8\uff0c\u5373\u4f7f\u662f\u5bf9\u6700\u806a\u660e\u7684SEO\u4eba\u6765\u8bf4\u4e5f\u662f\u5982\u6b64\u3002 \u5982\u679c\u4f60\u5e76\u4e0d\u77e5\u9053\u4f60\u7684\u884c\u4e1a\u5185\u5927\u724c\u7684\u5bf9\u624b\u6709\u54ea\u4e9b\u7684\u8bdd\uff0c\u4f60\u53ef\u4ee5\u5c06\u5173\u952e\u8bcd\u7c98\u8d34\u5230 Ahrefs\u7684Keywords Explorer \uff08\u5173\u952e\u8bcd\u5206\u6790\uff09\u4e2d\uff0c\u62d6\u52a8\u5230\u6700\u540e\u7684SERP overview\uff08SERP\u6982\u89c8\uff09\u677f\u5757\uff0c\u5e76\u4e14\u67e5\u770b\u6392\u540d\u7f51\u7ad9\u7684Domain Rating \uff08\u57df\u540d\u8bc4\u5206\uff09\u3002 \u8fd9\u91cc\u5c55\u793a\u7684\u662f\u6392\u540d\u9760\u524d\u57df\u540d\u7684\u8bc4\u5206\uff0c\u5206\u6570\u503c\u4ece0\u2013100\u3002 \u81f3\u5173\u91cd\u8981\u7684\u662f\uff0c\u5e76\u975e\u6240\u6709\u5927\u54c1\u724c\u90fd\u62e5\u6709\u9ad8\u8bc4\u5206\uff0c\u4f46\u7edd\u5927\u90e8\u5206\u90fd\u6709\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u770b\u5230Missguided\u7684\u57df\u540d\u8bc4\u5206\u53ea\u670970\uff0c\u4f46\u8fd9\u4ecd\u7136\u662f\u975e\u5e38\u9ad8\u7684\u3002 \u4f60\u53ef\u4ee5\u5728 \u6211\u4eec\u514d\u8d39\u7684Website authority checker \uff08\u7f51\u7ad9\u6743\u5a01\u68c0\u67e5\uff09\u5de5\u5177\u4e2d\u548c\u4f60\u7684\u5bf9\u624b\u8fdb\u884c\u5206\u6570\u7684\u5bf9\u6bd4\u3002 \u4e00\u822c\u800c\u8a00\uff0c\u4e0e\u5f53\u524d\u9996\u9875\u6392\u540d\u9875\u9762\u7684\u8bc4\u5206\u76f8\u6bd4\uff0c\u5982\u679c\u4f60\u7684\u7f51\u7ad9\u8be5\u6570\u5b57\u8d8a\u4f4e\uff0c\u6392\u540d\u5c31\u8d8a\u56f0\u96be\u3002 \u6211\u5728\u9996\u9875\u4e0a\u770b\u5230\u4e86\u548c\u6211\u8bc4\u5206\u76f8\u8fd1\u7684\u54c1\u724c\u7f51\u7ad9\u3002 \u5373\u4fbf\u53ea\u67092\u52303\u4e2a\u7f51\u7ad9\uff0c\u8bf7\u67e5\u770b \u6b65\u9aa4 #3. \u6211\u5728\u9996\u9875\u4e0a\u53ea\u770b\u5230\u5927\u54c1\u724c\u7684\u7f51\u7ad9\u3002 \u5728\u9996\u9875\u4e0a\u6392\u540d\u4f1a\u5f88\u56f0\u96be\uff0c\u4f46\u5e76\u975e\u4e0d\u53ef\u80fd\u3002 \u5982\u679c\u6b64\u5173\u952e\u8bcd\u7684\u6392\u540d\u5bf9\u4f60\u7684\u4e1a\u52a1\u81f3\u5173\u91cd\u8981\uff0c\u90a3\u4e48\u4f60\u4ecd\u7136\u5e94\u8be5\u4e3a\u5b83\u6392\u540d\u3002\u8bf7\u6ce8\u610f\uff0c\u4f60\u53ef\u80fd\u4e0d\u4f1a\u5f88\u5feb\u7684\u53c2\u4e0e\u6392\u540d\uff0c\u540c\u65f6\u53ef\u80fd\u9700\u8981\u6784\u5efa\u6bd4\u7ade\u4e89\u5bf9\u624b\u66f4\u591a\u7684\u5916\u94fe\u3002 \u5982\u679c\u4f60\u7684\u76ee\u6807\u662f\u5728\u4e2d\u77ed\u671f\u5185\u6392\u540d\uff0c\u56de\u5230 \u6b65\u9aa4 #1 \u9009\u62e9\u4e00\u4e2a\u66f4\u7b80\u5355\u7684\u5173\u952e\u8bcd\uff0c\u6bd4\u5982\u201cplus size maxi dresses\uff08\u52a0\u5927\u7801\u7684\u957f\u88d9\uff09\u201d \uff0c\u800c\u5b83\u7684\u9996\u9875\u7ade\u4e89\u5bf9\u624b\u90fd\u662f\u4e00\u4e9b\u4e2d\u5c0f\u578b\u7684\u54c1\u724c\u3002","title":"\u6b65\u9aa4 #2 \u67e5\u770b\u7ade\u4e89\u5bf9\u624b"},{"location":"pages/affiliate/how-to-get-on-the-first-page-of-google/#\u6b65\u9aa4-3-\u9009\u62e9\u6216\u5236\u4f5c\u4e00\u4e2a\u9875\u9762\u6ee1\u8db3\u641c\u7d22\u9700\u6c42","text":"\u91cd\u70b9\u662f\uff0c\u4f60\u9700\u8981\u8ba4\u8bc6\u5230\u8c37\u6b4c\u662f\u9488\u5bf9\u7f51\u9875\u8fdb\u884c\u6392\u540d\u7684\uff0c\u800c\u4e0d\u662f\u7f51\u7ad9\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u6bd4\u5982\u6211\u4eec\u7528\u4e24\u4e2a\u9875\u9762\u5206\u522b\u53c2\u4e0e\u4e86 \u201cwhere to get backlinks\uff08\u54ea\u91cc\u83b7\u53d6\u5916\u94fe\uff09\u201d \u4ee5\u53ca \u201cwhere to buy backlinks\uff08\u54ea\u91cc\u8d2d\u4e70\u5916\u94fe\uff09\u201c\u7684\u9996\u9875\u6392\u540d\u3002 \u73b0\u5728\uff0c\u4f60\u60f3\u5728\u8c37\u6b4c\u4e0a\u6392\u540d\u7684\u9875\u9762\u53ef\u80fd\u662f\u4f60\u7684\u4e3b\u9875\uff0c\u4f46\u8fd9\u4e0d\u4e00\u5b9a\u975e\u5f97\u662f\u4f60\u7684\u4e3b\u9875\u3002\u8fd9\u53ef\u4ee5\u662f\u4efb\u4f55\u9875\u9762\u3002\u53ea\u9700\u786e\u4fdd\u5b83\u7b26\u5408\u641c\u7d22\u610f\u56fe\u5373\u53ef\uff08\u8c37\u6b4c \u5e0c\u671b \u4e3a\u4f60\u6ee1\u8db3\u641c\u7d22\u9700\u6c42\u7684\u5185\u5bb9\u9875\u9762\u8fdb\u884c\u6392\u540d\uff09\u3002 \u5982\u4f55\u68c0\u67e5\uff1f\u5c06\u9875\u9762\u4e0e\u9996\u9875\u4e0a\u5df2\u6392\u540d\u7684\u5185\u5bb9\u8fdb\u884c\u6bd4\u8f83\u3002 \u5982\u679c\u4f60\u7684\u9875\u9762\u4e0e\u641c\u7d22\u610f\u56fe\u6ee1\u8db3\u201c3C\u6807\u51c6\u201d\uff0c\u5219\u5c06\u66f4\u5bb9\u6613\u83b7\u5f97\u6392\u540d\uff1a C ontent-type\uff08\u5185\u5bb9\u7c7b\u578b\uff09; C ontent format\uff08\u5185\u5bb9\u683c\u5f0f\uff09; C ontent angle\uff08\u5185\u5bb9\u89d2\u5ea6\uff09 \u8ba9\u6211\u4eec\u62c6\u5206\u8bb2\u89e3\u3002","title":"\u6b65\u9aa4 #3. \u9009\u62e9\u6216\u5236\u4f5c\u4e00\u4e2a\u9875\u9762\uff08\u6ee1\u8db3\u641c\u7d22\u9700\u6c42\uff09"},{"location":"pages/affiliate/how-to-get-on-the-first-page-of-google/#Content-type\u5185\u5bb9\u7c7b\u578b","text":"\u641c\u7d22\u7ed3\u679c\u4e2d\u6700\u5e38\u89c1\u7684\u5185\u5bb9\u201c\u7c7b\u578b\u201d\uff0c\u901a\u5e38\u662f\u4ee5\u4e0b\u4e4b\u4e00\uff1a \u535a\u5ba2\u9875\u9762\uff1b \u4ea7\u54c1\u9875\u9762 \uff08\u5173\u4e8e\u5355\u4e2a\u4ea7\u54c1\u7684\u8be6\u60c5\u9875\uff09; \u5206\u7c7b\u9875\u9762 \uff08\u591a\u4e2a\u76f8\u540c\u5c5e\u6027\u4ea7\u54c1\u7684\u9875\u9762\uff09; \u4e13\u9898\u9875\u9762 \uff08\u6295\u653e\u4ea7\u54c1\u6216\u670d\u52a1\u7684\u9875\u9762\uff09\u3002 \u901a\u8fc7\u67e5\u770b\u9875\u9762\u6807\u9898\u548cURL\uff0c\u4f60\u5c31\u53ef\u4ee5\u4e86\u89e3\u5b83\u4eec\u7684\u5185\u5bb9\u7c7b\u578b\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u53ef\u4ee5\u5230\u53c2\u4e0e \u201chow to make pancakes\uff08\u5982\u4f55\u505a\u714e\u997c\uff09\u201d\u6392\u540d\u7684\u57fa\u672c\u90fd\u662f\u535a\u5ba2\u9875\u9762\u2026 \u2026 \u53c2\u4e0e \u201cbuy MacBook Pro\uff08\u8d2d\u4e70\u82f9\u679c\u7b14\u8bb0\u672cPro\uff09\u201d\u6392\u540d\u7684\u90fd\u662f\u4ea7\u54c1\u9875\u9762\uff1a","title":"Content-type\uff08\u5185\u5bb9\u7c7b\u578b\uff09"},{"location":"pages/affiliate/how-to-get-on-the-first-page-of-google/#Content-format\u5185\u5bb9\u683c\u5f0f","text":"\u4e0b\u9762\u662f\u6392\u540d\u9760\u524d\u7684\u9875\u9762\u4e2d\u5360\u4e3b\u5bfc\u5730\u4f4d\u7684\u201c\u5185\u5bb9\u683c\u5f0f\u201d\u3002\u5b83\u4e3b\u8981\u9002\u7528\u4e8e\u4e00\u4e9b\u7279\u6b8a\u7684\u5185\u5bb9\u5c55\u793a\u6a21\u5f0f\u3002\u5e38\u89c1\u7684\u5305\u62ec\uff1a \u201c How-to\u201d guides\uff08\u5982\u4f55\u7c7b\u6559\u7a0b\uff09 * Step-by-step tutorials\uff08\u6b65\u9aa4\u6307\u5357\uff09 * List posts\uff08\u5217\u8868\u7c7b\u6587\u7ae0\uff09 * Opinion pieces\uff08\u610f\u89c1\u7247\u6bb5\uff09 * Reviews\uff08\u8bc4\u4ef7\uff09 * Comparisons\uff08\u5bf9\u6bd4\uff09 \u518d\u6765\u770b\u714e\u997c\u83dc\u8c31\u7684\u4f8b\u5b50\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u57fa\u672c\u90fd\u662f\u201chow to\u201d\u7c7b\u578b\u7684\u5185\u5bb9\u2026 \u2026 \u5f53\u6211\u4eec\u770b\u5230 \u201cblogging tips\uff08\u535a\u5ba2\u5efa\u8bae\uff09\u201d\u7684\u6392\u540d\u7ed3\u679c\uff0c\u5219\u662f\u8fd9\u79cd\u5217\u8868\u7c7b\u6587\u7ae0\uff1a","title":"Content format\uff08\u5185\u5bb9\u683c\u5f0f\uff09"},{"location":"pages/affiliate/how-to-get-on-the-first-page-of-google/#Content-angle\u5185\u5bb9\u89d2\u5ea6","text":"\u4e0b\u9762\u6392\u540d\u9760\u524d\u7684\u9875\u9762\u4e2d\u6700\u5e38\u89c1\u7684\u201c\u5185\u5bb9\u89d2\u5ea6\u201d\u3002\u5b83\u6bd4\u7c7b\u578b\u548c\u683c\u5f0f\u66f4\u96be\u91cf\u5316\uff0c\u4f46\u4ece\u672c\u8d28\u4e0a\u8bb2\uff0c\u5b83\u662f\u9996\u9875\u6392\u540d\u7684\u4e3b\u8981\u6307\u6807\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5927\u591a\u6570\u53c2\u4e0e \u201cblogging tips\uff08\u535a\u5ba2\u5efa\u8bae\uff09\u201d\u6392\u540d\u7684\u90fd\u662f\u9488\u5bf9\u65b0\u624b\u535a\u4e3b\u7684\u3002 \u7ed3\u679c\u5c31\u662f\uff0c\u5982\u679c\u4f60\u7684\u6587\u7ae0\u662f\u5173\u4e8e\u201c\u5c06\u535a\u5ba2\u6536\u76ca\u4ece$5k \u63d0\u9ad8\u5230 $10k\u201d\u7684\u8bdd\uff0c\u90a3\u4e48\u5c31\u5f88\u96be\u53c2\u4e0e\u6392\u540d\uff0c\u56e0\u4e3a\u8fd9\u4e0d\u662f\u65b0\u624b\u60f3\u770b\u5230\u7684\u7ed3\u679c\u3002 \u6211\u7684\u9875\u9762\u6ee1\u8db3\u641c\u7d22\u610f\u56fe \u8fdb\u5165 \u6b65\u9aa4 #4. \u6211\u7684\u9875\u9762\u4e0d\u80fd\u6ee1\u8db3\u641c\u7d22\u610f\u56fe \u4f60\u6709\u4e09\u4e2a\u9009\u62e9\uff1a \u6839\u636e \u641c\u7d22\u610f\u56fe \u7f16\u8f91\u4f60\u7684\u9875\u9762\uff1b \u521b\u5efa\u4e00\u4e2a\u6ee1\u8db3\u641c\u7d22\u610f\u56fe\u7684\u9875\u9762\uff1b \u66f4\u6362\u5173\u952e\u8bcd\uff0c\u56de\u5230 \u6b65\u9aa4 #1\uff0c\u9009\u62e9\u4e00\u4e2a\u66f4\u5408\u9002\u7684\u76ee\u6807\u5173\u952e\u8bcd\u3002 \u65e0\u8bba\u4f60\u505a\u4ec0\u4e48\uff0c\u90fd\u4e0d\u8981\u8bd5\u56fe\u5c06\u65e0\u5173\u7684\u9875\u9762\u585e\u8fdb\u641c\u7d22\u7ed3\u679c\u4e2d\uff0c\u8fd9\u6ce8\u5b9a\u662f\u5f92\u52b3\u7684\u3002","title":"Content angle\uff08\u5185\u5bb9\u89d2\u5ea6\uff09"},{"location":"pages/affiliate/how-to-get-on-the-first-page-of-google/#\u6b65\u9aa4-4-\u786e\u4fdd\u4f60\u7684\u5185\u5bb9\u6db5\u76d6\u4e86\u6240\u6709\u8bdd\u9898\u65b9\u5411","text":"\u4ec5\u62e5\u6709\u7b26\u5408\u641c\u7d22\u610f\u56fe\u7684\u5185\u5bb9\u662f\u4e0d\u591f\u7684\u3002\u8c37\u6b4c\u7684\u76ee\u7684\u662f\u5728\u9996\u9875\u5c55\u793a\u6700\u76f8\u5173\uff0c\u6700\u6709\u7528\u7684\u7ed3\u679c\uff0c\u6240\u4ee5\u4f60\u8fd8\u9700\u8981\u5728\u9996\u9875\u4e0a\u4e89\u62a2\u4e00\u5e2d\u4e4b\u5730 \u5982\u4f55\u786e\u4fdd\u4f60\u7684\u5185\u5bb9\u7b26\u5408\u8981\u6c42\uff1f \u4f60\u53ef\u4ee5\u901a\u8fc7\u6db5\u76d6\u641c\u7d22\u8005\u60f3\u77e5\u9053\u548c\u671f\u671b\u770b\u5230\u7684\u6240\u6709\u5185\u5bb9\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u6bd4\u5982\u8bf4\u4f60\u60f3\u53c2\u4e0e \u201cbest watch brands\uff08\u6700\u597d\u7684\u624b\u8868\u54c1\u724c\uff09\u201d\u7684\u6392\u540d\u3002 \u6211\u4eec\u901a\u8fc7\u5bf9\u641c\u7d22\u610f\u56fe\u7684\u5206\u6790\u53ef\u4ee5\u4e86\u89e3\u5230\uff0c\u4f60\u9700\u8981\u5199\u4e00\u4e2a\u5217\u8868\u7c7b\u7684\u535a\u5ba2\u9875\u9762\uff0c\u5e76\u4e14\u4e3b\u8981\u9488\u5bf9\u4e00\u4e9b\u5962\u4f88\u54c1\u724c\u3002 \u6709\u53ef\u80fd\u4f60\u5df2\u7ecf\u6709\u8fd9\u6837\u7684\u4e00\u4e2a\u9875\u9762\u4e86\uff0c\u9700\u8981\u91cd\u65b0\u5199\u5417\uff1f\u73b0\u5728\u5b83\u662f\u5426\u6db5\u76d6\u4e86\u641c\u7d22\u8005\u60f3\u4e86\u89e3\u7684\u6240\u6709\u624b\u8868\u54c1\u724c\u548c\u7c7b\u522b\uff1f \u6700\u7b80\u5355\u7684\u65b9\u6cd5\u5c31\u662f\uff0c\u5c06\u4f60\u7684\u5185\u5bb9\u548c\u6392\u540d\u9760\u524d\u7684\u5185\u5bb9\u4f5c\u6bd4\u8f83\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4f60\u67e5\u770b\u201cbest watch brands\uff08\u6700\u597d\u7684\u624b\u8868\u54c1\u724c\uff09\u201d\u6392\u540d\u8f83\u9ad8\u7684\u9875\u9762\uff0c\u4f60\u4f1a\u53d1\u73b0\u5b83\u4eec\u90fd\u63d0\u5230\u4e86Rolex\uff08\u52b3\u529b\u58eb\uff09\u3002 \u5982\u679c\u4f60\u6ca1\u63d0\u53ca\u5b83\u7684\u8bdd\uff0c\u90a3\u4e48\u4f60\u5e94\u8be5\u628a\u5b83\u52a0\u5165\u5230\u4f60\u7684\u5185\u5bb9\u7684\u4e2d\u3002 \u4e0a\u9762\uff0c\u8fd9\u662f\u4e00\u4e2a\u663e\u800c\u6613\u89c1\u7684\u4f8b\u5b50\u3002\u4f46\u6392\u540d\u9760\u524d\u7684\u9875\u9762\u4e0a\u9875\u63d0\u5230\u7684\u5176\u4ed6\u7684\u4e00\u4e9b\u54c1\u724c\uff0c\u5305\u62ec\uff1a Tag Heuer\uff08\u6cf0\u683c\u8c6a\u96c5\uff09; Chopard\uff08\u745e\u58eb\u8427\u90a6\uff09; Omega\uff08\u6b27\u7c73\u4f3d\uff09; Cartier\uff08\u5361\u8fea\u4e9a\uff09\u3002 \u901a\u8fc7\u63d0\u53ca\u8fd9\u4e9b\u5185\u5bb9\uff0c\u4f60\u4e0d\u4ec5\u53ef\u4ee5\u4e3a\u641c\u7d22\u8005\u63d0\u4f9b\u4ed6\u4eec\u60f3\u8981\u548c\u671f\u671b\u770b\u5230\u7684\u4e1c\u897f\uff0c\u8fd8\u53ef\u4ee5\u6f5c\u5728\u5730\u63d0\u9ad8\u5185\u5bb9\u5728\u8c37\u6b4c\u773c\u4e2d\u7684\u76f8\u5173\u6027\u3002 \u91cd\u8981 \u8fd9\u4e0d\u4ec5\u4ec5\u662f\u201c\u6dfb\u52a0\u5173\u952e\u8bcd\u201d\u90a3\u4e48\u7b80\u5355\uff0c\u800c\u662f\u5173\u4e8e\u589e\u52a0\u5185\u5bb9\u7684\u6df1\u5ea6\uff0c\u4ee5\u53ca\u5b9e\u7528\u6027\u3002\u4e0d\u8981\u4e3a\u4e86\u51fa\u73b0\u8fd9\u4e9b\u5185\u5bb9\u800c\u5c06\u8fd9\u4e9b\u5173\u952e\u8bcd\u548c\u8bcd\u7ec4\u5f3a\u884c\u52a0\u5165\u4f60\u7684\u5185\u5bb9\u4e2d\u3002 \u5982\u679c\u4f60\u60f3\u505a\u7684\u66f4\u6df1\u5165\u4e00\u4e9b\uff0c\u53ef\u4ee5\u501f\u52a9 Content Gap \uff08\u5185\u5bb9\u5dee\u8ddd\u673a\u4f1a\uff09\u5bf9\u9875\u9762\u8fdb\u884c\u5206\u6790\u3002 \u4f60\u53ea\u9700\u8981\u5c06\u4e00\u4e9b\u6392\u540d\u4e0d\u9519\u7684\u9875\u9762URL\u7c98\u8d34\u5230 Ahrefs Content Gap \uff08\u5185\u5bb9\u5dee\u8ddd\u673a\u4f1a\uff09\u5de5\u5177\u4e2d\u5373\u53ef\u3002 \u5c0f\u63d0\u793a. \u786e\u4fdd\u4f60\u5728\u4e0b\u62c9\u6846\u4e2d\u9009\u62e9\u7684\u662f\u201cURL\u6a21\u5f0f\u201d\uff0c\u540c\u65f6\u6700\u4e0b\u65b9\u7559\u7a7a\u3002 \u786e\u4fdd\u4f60\u5728\u4e0b\u62c9\u6846\u4e2d\u9009\u62e9\u7684\u662f\u201cURL\u6a21\u5f0f\u201d\uff0c\u540c\u65f6\u6700\u4e0b\u65b9\u7559\u7a7a\u3002 \u70b9\u51fb \u201cShow keywords\uff08\u5c55\u793a\u5173\u952e\u8bcd\uff09\u201c\u4f60\u5c31\u53ef\u4ee5\u770b\u5230\u8fd9\u4e9b\u9875\u9762\u53c2\u4e0e\u6392\u540d\u7684\u5173\u952e\u8bcd\u3002 \u540c\u6837\uff0c\u4e0d\u8981\u5c06\u5176\u89c6\u4e3a\u4e00\u4e2a\u7b80\u5355\u7684\u5173\u952e\u8bcd\u5217\u8868\uff0c\u4f60\u9700\u8981\u6df1\u5165\u4e86\u89e3\u4eba\u4eec\u5728\u8c37\u6b4c\u4e0a\u8f93\u5165\u6b64\u5173\u952e\u8bcd\u65f6\u60f3\u8981\u770b\u5230\u7684\u5185\u5bb9\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u6211\u4eec\u53ef\u4ee5\u4e86\u89e3\u5230\uff1a swiss watch brands\uff08\u745e\u58eb\u624b\u8868\u54c1\u724c\uff09; luxury swiss watches\uff08\u745e\u58eb\u5962\u4f88\u624b\u8868\uff09; mechanical watch brands\uff08\u673a\u68b0\u624b\u8868\u54c1\u724c\uff09; french watch brands\uff08\u6cd5\u56fd\u624b\u8868\u54c1\u724c\uff09\u3002 \u56e0\u6b64\uff0c\u4f60\u9700\u8981\u786e\u4fdd\u5728\u5185\u4e2d\u6d89\u53ca\u5230\u8fd9\u4e9b\uff0c\u751a\u81f3\u53ef\u4ee5\u4f7f\u7528\u67d0\u4e9b\u4f5c\u4e3a\u5185\u5bb9\u7684\u526f\u6807\u9898\u3002 \u6211\u7684\u5185\u5bb9\u90fd\u6db5\u76d6\u4e86\u6240\u6709\u8bdd\u9898 \u8fdb\u5165 \u6b65\u9aa4 #5. \u6211\u7684\u5185\u5bb9\u5e76\u6ca1\u6709\u6db5\u76d6\u6240\u6709\u8bdd\u9898 \u6309\u7167\u4e0a\u9762\u7684\u6d41\u7a0b\u4e30\u5bcc\u4f60\u7684\u5185\u5bb9\u3002\u5982\u679c\u8fd9\u6837\u505a\u8981\u82b1\u8d39\u5f88\u957f\u65f6\u95f4\uff0c\u90a3\u4e48\u5c31\u8fd4\u56de \u6b65\u9aa4 #1 \u5e76\u9009\u62e9\u4e00\u4e2a\u7b80\u5355\u7684\u5173\u952e\u8bcd\u3002","title":"\u6b65\u9aa4 #4 \u786e\u4fdd\u4f60\u7684\u5185\u5bb9\u6db5\u76d6\u4e86\u6240\u6709\u8bdd\u9898\u65b9\u5411"},{"location":"pages/affiliate/how-to-get-on-the-first-page-of-google/#\u6b65\u9aa4-5-\u4f30\u7b97\u4f60\u9700\u8981\u7684\u5916\u94fe\u91cf","text":"\u5916\u94fe\u662f\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u6392\u540d\u6307\u6807\u3002\u4e0d\u4ec5 \u8c37\u6b4c\u8fd9\u4e48\u8bf4\u4e86 \uff0c\u540c\u65f6\u884c\u4e1a\u4e2d\u7684\u5404\u9879\u7814\u7a76\u4e5f\u8868\u660e\u81ea\u7136\u641c\u7d22\u6d41\u91cf\u548c\u5916\u94fe\u6709\u7740\u975e\u5e38\u5f3a\u7684\u5173\u7cfb\u3002 \u7814\u7a76\u4e2d\u4e5f\u5305\u62ec \u6211\u4eec \u5173\u4e8e10\u4ebf\u9875\u9762\u7684\u7814\u7a76\u3002 \u56e0\u6b64\uff0c\u62e5\u6709\u7684\u5916\u94fe\u8d28\u91cf\u8d8a\u9ad8\uff0c\u4f60\u5728\u8c37\u6b4c\u9996\u9875\u4e0a\u6392\u540d\u7684\u673a\u4f1a\u5c31\u8d8a\u9ad8\u3002 \u95ee\u9898\u662f\uff0c\u4f60\u5982\u4f55\u77e5\u9053\u9700\u8981\u591a\u5c11\u4e2a\u5916\u94fe\uff1f \u4e0b\u9762\u5c31\u662f\u4e8b\u5b9e\uff1a \u7531\u4e8e\u5e76\u975e\u6240\u6709\u5916\u94fe\u90fd\u662f\u4e00\u6837\u7684\uff0c\u56e0\u6b64\u65e0\u6cd5\u786e\u5b9a\u786e\u5207\u7684\u6570\u5b57\u3002\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u7c97\u7565\u7684\u4f30\u8ba1\u3002 \u4f60\u53ef\u4ee5\u501f\u52a9 Ahrefs Keywords Explorer \uff08\u5173\u952e\u8bcd\u5206\u6790\uff09\uff0c\u641c\u7d22\u4f60\u7684\u76ee\u6807\u5173\u952e\u8bcd\uff0c \u5e76\u67e5\u770b Keyword Difficulty\uff08\u5173\u952e\u8bcd\u96be\u5ea6\uff09 \u6307\u6807\u4e0b\u65b9\u7684\u6570\u5b57\u3002 \u8fd9\u662f\u4e00\u4e2a\u8d85\u7ea7\u7c97\u7565\u7684\u4f30\u8ba1\uff0c\u6240\u4ee5\u4f60\u9700\u8981\u8fa9\u8bc1\u7684\u53bb\u770b\u5f85\u8fd9\u4e2a\u6307\u6807\u3002 \u8981\u83b7\u5f97\u66f4\u51c6\u786e\u7684\u4f30\u7b97\uff0c\u8bf7\u5411\u4e0b\u6eda\u52a8\u81f3SERP overview\uff08SERP\u6982\u89c8\uff09\u677f\u5757\uff0c\u5e76\u67e5\u770b\u548c\u6392\u540d\u8f83\u9ad8\u9875\u9762\u7684 referring domains\uff08\u53cd\u94fe\u57df\u540d\uff09\u6570\u91cf\u7684\u5dee\u8ddd\u3002 \u5982\u679c\u6211\u4eec\u67e5\u770b \u201ccar insurance\uff08\u6c7d\u8f66\u4fdd\u9669\uff09\u201d\u8fd9\u4e2a\u8bcd\uff0c\u6392\u540d\u524d\u5341\u7684\u9875\u9762\u4e2d\u6709154\u4e2a\u81f31,228\u4e2areferring domains\uff08\u53cd\u94fe\u57df\u540d\uff09\u3002 \u540c\u6837\u7684\uff0c\u6211\u4eec\u5bf9 \u201ccheap car insurance\uff08\u4fbf\u5b9c\u7684\u6c7d\u8f66\u4fdd\u9669\uff09\u201d\u8fdb\u884c\u7814\u7a76\uff0c\u8303\u56f4\u572824\u4e2a-434\u4e2a\u3002 \u4ee5\u53ca\u9488\u5bf9 \u201cvery cheap car insurance no deposit\uff08\u975e\u5e38\u4fbf\u5b9c\u7684\u6c7d\u8f66\u4fdd\u9669 \u6ca1\u5b58\u6b3e\uff09\u201d\u8fdb\u884c\u7814\u7a76\uff0c\u8303\u56f4\u8fd9\u662f2\u4e2a\u523052\u4e2a. \u56e0\u6b64\uff0c\u76f8\u6bd4\u4e8e\u201ccar insurance\uff08\u6c7d\u8f66\u4fdd\u9669\uff09\u201d\uff0c\u201ccheap car insurance\uff08\u4fbf\u5b9c\u7684\u6c7d\u8f66\u4fdd\u9669\uff09\u201d\u9700\u8981\u66f4\u5c11\u7684\u5916\u94fe\uff0c\u800c \u201cvery cheap car insurance no deposit\uff08\u975e\u5e38\u4fbf\u5b9c\u7684\u6c7d\u8f66\u4fdd\u9669 \u6ca1\u5b58\u6b3e\uff09\u201d\u9700\u8981\u7684\u5c31\u66f4\u52a0\u5c11\u4e86\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7 Ahrefs\u514d\u8d39\u7684backlink checker \uff08\u5916\u94fe\u68c0\u67e5\uff09\u5de5\u5177\u6765\u67e5\u770b\u4f60\u7684\u5916\u94fe\u6570\u91cf\u3002 \u8fd9\u5e94\u8be5\u53ef\u4ee5\u5927\u81f4\u7684\u544a\u8bc9\u4f60\uff0c\u4f60\u8fd8\u9700\u8981\u505a\u591a\u5c11\u5de5\u4f5c\u3002 \u540c\u65f6\uff0c\u8bf7\u8bb0\u4f4f\u4e24\u70b9\uff1a \u91cd\u8981\u7684\u4e0d\u4ec5\u4ec5\u662f\u6570\u91cf\u3002 \u56e0\u4e3a\u94fe\u63a5\u7684\u6570\u91cf\u53ea\u662f\u65b9\u7a0b\u5f0f\u7684\u4e00\u90e8\u5206\uff0c\u8d28\u91cf\u4e5f\u5f88\u91cd\u8981\u3002 \uff08\u5982\u679c\u4f60\u8981\u66f4\u6df1\u5165\u7814\u7a76\u8fd9\u4e00\u70b9\uff0c\u8bf7\u67e5\u770b\u5f53\u524d\u6392\u540d\u6700\u9ad8\u7684\u9875\u9762\u7684\u201cReferring domains\uff08\u53cd\u94fe\u57df\u540d\uff09\u201d\u62a5\u544a\uff0c\u4ee5\u67e5\u770b\u94fe\u63a5\u5230\u5b83\u4eec\u7684\u7f51\u7ad9\u4e2d\u6709\u591a\u5c11\u662f\u9ad8\u8d28\u91cf\u7684\u3002\uff09 \u8fd9\u4e9b\u6570\u5b57\u662f\u5426\u80fd\u8fbe\u5230\uff0c\u53d6\u51b3\u4e8e\u4f60\u5efa\u7acb\u94fe\u63a5\u7684\u80fd\u529b \u4ee5\u53ca\u4f60\u613f\u610f\u4e3a\u8be5\u9875\u9762\u6392\u540d\u6240\u82b1\u8d39\u7684\u65f6\u95f4\u548c\u7cbe\u529b\u3002 \u6211\u53ef\u4ee5\u83b7\u5f97\u8db3\u591f\u7684\u5916\u94fe \u8fdb\u5165 \u6b65\u9aa4 #6\u3002 \u6211\u65e0\u6cd5\u83b7\u5f97\u8db3\u591f\u7684\u5916\u94fe \u5982\u679c\u4f60\u611f\u89c9\u5236\u4f5c\u9ad8\u8d28\u91cf\u7684\u5916\u94fe\u6bd4\u8f83\u56f0\u96be\u65f6\uff0c\u8bf7\u8fd4\u56de \u6b65\u9aa4 #1\uff0c\u7136\u540e\u9009\u62e9\u4e00\u4e2a\u66f4\u7b80\u5355\u7684\u5173\u952e\u8bcd\u3002\u8fd9\u662f\u77ed\u671f\u83b7\u5f97\u6392\u540d\u6700\u597d\u7684\u65b9\u6cd5\u3002\u7b49\u5230\u4f60\u6709\u66f4\u591a\u7684\u94fe\u63a5\u5efa\u8bbe\u7ecf\u9a8c\u65f6\uff0c\u518d\u53bb\u9488\u5bf9\u96be\u5ea6\u7a0d\u9ad8\u7684\u5173\u952e\u8bcd\u8fdb\u884c\u6392\u540d\u7684\u4f18\u5316\u3002","title":"\u6b65\u9aa4 #5 \u4f30\u7b97\u4f60\u9700\u8981\u7684\u5916\u94fe\u91cf"},{"location":"pages/affiliate/how-to-get-on-the-first-page-of-google/#\u6b65\u9aa4-6-\u5efa\u7acb\u66f4\u591a\u5916\u94fe\u5e76\u6dfb\u52a0\u5185\u94fe","text":"\u5916\u94fe\u6709\u52a9\u4e8e\u63d0\u9ad8\u9875\u9762\u7684\u201c\u6743\u91cd\u201d\uff0c\u9ad8\u6743\u91cd\u9875\u9762\u7684\u6392\u540d\u5f80\u5f80\u9ad8\u4e8e\u4f4e\u6743\u91cd\u9875\u9762\u3002 \u8fd9\u662f\u8c37\u6b4c\u7b97\u6cd5\u5de5\u4f5c\u539f\u7406\u4e4b\u4e00\u3002\u8fd9\u4e5f\u662f\u6211\u4eec\u7814\u7a76\u8fc7\u7684\u5185\u5bb9\u3002 \u5c0f\u63d0\u793a. URL Rating \uff08\u7f51\u5740\u8bc4\u5206\uff09\u662fAhrefs\u9488\u5bf9\u9875\u9762\u8ba1\u7b97\u7684\u6743\u91cd\u6307\u6807\uff0c\u548cDomain Rating\uff08\u57df\u540d\u8bc4\u5206\uff09\u4e00\u6837\uff0c\u6570\u503c\u662f0\u2013100\u4e4b\u95f4\u3002 \u5728\u8fd9\u4e2a\u9636\u6bb5\uff0c\u4f60\u9700\u8981\u505a\u66f4\u591a\u7684\u5916\u94fe\u3002 \u4f60\u53ef\u4ee5\u4ece\u89c2\u770b\u8fd9\u4e2a\u89c6\u9891\u5f00\u59cb\uff1a https://www.youtube.com/watch?v=3sF-m5LKCf4&list=PLvJ_dXFSpd2tjUTuAHpHidz5e2hAedP_m \u4f46\u662f\u8fd8\u6709\u53e6\u4e00\u79cd\u63d0\u9ad8\u9875\u9762\u6743\u91cd\u7684\u65b9\u6cd5\uff1a\u6dfb\u52a0\u76f8\u5173\u7684\u5185\u90e8\u94fe\u63a5\u3002 \u6700\u7b80\u5355\u7684\u65b9\u6cd5\u5c31\u662f\u5728\u8c37\u6b4c\u4e0a\u641c\u7d22 site:yourwebsite.com \"[target keyword]\" \u8fd9\u6837\u5c31\u53ef\u4ee5\u627e\u5230\u4f60\u7f51\u7ad9\u4e0a\u6240\u6709\u63d0\u53ca\u8be5\u786e\u5207\u5355\u8bcd\u6216\u77ed\u8bed\u7684\u9875\u9762\u3002 \u8fd9\u4e9b\u901a\u5e38\u90fd\u975e\u5e38\u9002\u5408\u5236\u4f5c\u5185\u90e8\u94fe\u63a5\u3002 \u6211\u5df2\u7ecf\u5236\u4f5c\u4e86\u5927\u91cf\u7684\u5916\u94fe\u548c\u5185\u94fe\u4e86 \u8fdb\u5165 \u6b65\u9aa4 #7. \u6211\u8fd8\u6ca1\u6709\u5efa\u7acb\u8db3\u591f\u7684\u5916\u94fe\u548c\u5185\u94fe\u3002 \u9605\u8bfb\u6211\u4eec\u7684 9\u4e2a\u7b80\u5355\u7684\u94fe\u63a5\u5efa\u8bbe\u7b56\u7565 \uff0c\u4ee5\u53ca SEO\u5185\u90e8\u94fe\u63a5\u4f18\u5316\u5b9e\u6218\u6307\u5357 .","title":"\u6b65\u9aa4 #6 \u5efa\u7acb\u66f4\u591a\u5916\u94fe\u5e76\u6dfb\u52a0\u5185\u94fe"},{"location":"pages/affiliate/how-to-get-on-the-first-page-of-google/#\u6b65\u9aa4-7-\u4fdd\u6301\u8010\u5fc3","text":"\u4e0d\u5e78\u7684\u662f\uff0c\u8981\u5728\u8c37\u6b4c\u7684\u9996\u9875\u6392\u540d\u9700\u8981\u82b1\u8d39\u4e00\u4e9b\u65f6\u95f4\u3002 \u8981\u591a\u4e45\u5462\uff1f\u66f4\u5177\u6211\u4eec\u505a\u7684 \u9488\u5bf9\u4e24\u767e\u4e07\u5173\u952e\u8bcd\u7684\u7814\u7a76 \uff0c\u4e0d\u5230\u4e24\u5e74\u7684\u65f6\u95f4\uff0c\u8fd9\u8fd8\u662f\u7b2c10\u4f4d\u7684\u6392\u540d\u3002 \u9488\u5bf9\u7b2c\u4e00\u540d\uff0c\u5e73\u5747\u6392\u540d\u65f6\u95f4\u662f3\u5e74\u3002 \u4f46\u662f\uff0c\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u4f60\u9700\u89812\u20133\u5e74\u624d\u80fd\u6392\u540d\u3002\u6709\u4e9b\u9875\u9762\u7684\u6392\u540d\u8981\u6bd4\u8fd9\u5feb\u5f97\u591a\u3002\u5982\u679c\u4f60\u521b\u5efa\u6b63\u786e\u7684\u5185\u5bb9\u5e76\u5bf9SEO\u6709\u8d44\u6e90\u6295\u5165\uff0c\u90a3\u4e48\u5230\u8fbe\u9996\u9875\u7684\u901f\u5ea6\u53ef\u80fd\u4f1a\u6bd4\u5e73\u5747\u901f\u5ea6\u5feb\u5f97\u591a\u3002 \u6211\u6392\u540d\u5230\u4e86\u7b2c\u4e00\u9875\uff01 \u91cd\u590d\u4e0a\u8ff0\u8fc7\u7a0b\u4ee5\u83b7\u53d6\u66f4\u591a\u5173\u952e\u8bcd\u7684\u6392\u540d\uff0c\u4ee5\u83b7\u53d6\u66f4\u591a\u6d41\u91cf\u3002 \u6211\u7684\u7b2c\u4e00\u4e2a\u9875\u9762\u4f9d\u7136\u6ca1\u6709\u6392\u540d \u91cd\u590d \u6b65\u9aa4 #6.","title":"\u6b65\u9aa4 #7 \u4fdd\u6301\u8010\u5fc3"},{"location":"pages/affiliate/how-to-get-on-the-first-page-of-google/#\u4e3a\u4ec0\u4e48\u5728\u8c37\u6b4c\u9996\u9875\u4e0a\u6392\u540d\u5e76\u4e0d\u662f\u6700\u7ec8\u76ee\u6807","text":"\u4f60\u53ef\u4ee5\u8fd9\u4e2a\u56fe\uff1a \u8fd9\u663e\u793a\u4e86\u70ed\u95e8\u200b\u200b\u8c37\u6b4c\u641c\u7d22\u7ed3\u679c\u7684\u5e73\u5747\u70b9\u51fb\u7387\u3002\u4f60\u4f1a\u770b\u5230\uff0c\u7ecf\u8fc7\u524d\u51e0\u4e2a\u7ed3\u679c\uff0c\u70b9\u51fb\u7387\u5f88\u5feb\u5c31\u6d88\u5931\u4e86\u3002 \u540c\u65f6\u4f60\u53ef\u4ee5\u770b\u523070%\u7684\u70b9\u51fb\u7387\u90fd\u8d21\u732e\u7ed9\u4e86\u524d3\u540d\u3002 \u7531\u4e8e\u8fd9\u79cd\u5dee\u5f02\u7684\u6781\u7aef\u7a0b\u5ea6\uff0c\u6392\u540d\u7ed3\u679c\u4e0b\u534a\u90e8\u5206\u7684\u7f51\u9875\u4ec5\u83b7\u5f97\u5173\u952e\u8bcd\u70b9\u51fb\u91cf\u7684\u4e00\u5c0f\u90e8\u5206\u3002 \u4e3a\u4e86\u663e\u793a\u6392\u540d\u4e4b\u95f4\u70b9\u51fb\u7387\u7684\u5de8\u5927\u5dee\u5f02\uff0c\u4ee5\u4e0b\u662f\u6bcf\u6708\u641c\u7d22\u91cf\u4e3a10,000\u6b21\u7684\u5173\u952e\u8bcd\u5728\u9996\u9875\u4e0a\u6bcf\u4e2a\u7ed3\u679c\u7684\u5e73\u5747\u8bbf\u95ee\u91cf\uff1a Position Traffic 1 3,121 2 1,388 3 982 4 610 5 751 6 287 7 209 8 162 9 132 10 109 \u76f8\u5dee\u975e\u5e38\u5927\u3002 \u56e0\u6b64\uff0c\u5c3d\u7ba1\u5728\u8c37\u6b4c\u9996\u9875\u4e0a\u6392\u540d\u53ea\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u8d77\u70b9\uff0c\u4f46\u4f60\u9700\u8981\u66f4\u9ad8\u7684\u6392\u540d\u624d\u80fd\u83b7\u5f97\u66f4\u591a\u7684\u6d41\u91cf\u3002 \u63a8\u8350\u9605\u8bfb\uff1a \u5982\u4f55\u5728\u8c37\u6b4c\u4e2d\u6392\u540d\u66f4\u9ad8\uff086\u4e2a\u7b80\u5355\u7684\u6b65\u9aa4\uff09 \u4e13\u5bb6\u5efa\u8bae \u867d\u7136\u5e73\u5747\u6570\u5f88\u6709\u53c2\u8003\u4ef7\u503c\uff0c\u4f46\u70b9\u51fb\u6b21\u6570\u7684\u771f\u5b9e\u5206\u5e03\u53d6\u51b3\u4e8e\u641c\u7d22\u7684\u5173\u952e\u8bcd\u3002 \u5982\u679c\u4f60\u60f3\u67e5\u770b\u4f60\u7684\u5173\u952e\u8bcd\u6570\u636e\uff0c\u5c06\u5b83\u7c98\u8d34\u5230 Ahrefs Keywords Explorer \uff08\u5173\u952e\u8bcd\u5206\u6790\uff09\u4e2d\uff0c\u540c\u65f6\u8fdb\u5165 \u201cTraffic share by pages\uff08\u9875\u9762\u6d41\u91cf\u5206\u5e03\uff09\u201c\u62a5\u544a\uff0c\u5b83\u4f1a\u544a\u8bc9\u4f60\u6392\u540d\u9760\u524d\u9875\u9762\u5927\u81f4\u7684\u70b9\u51fb\u5206\u5e03\u60c5\u51b5\u3002 \u6211\u4eec\u53ef\u4ee5 \u201cbest protein powder\uff08\u6700\u597d\u7684\u86cb\u767d\u7c89\uff09\u201c\u8fd9\u4e2a\u8bcd\uff0c \u70b9\u51fb\u5206\u5e03\u57fa\u672c\u548c\u5e73\u5747\u503c\u662f\u4e00\u81f4\u7684\u3002 \u7136\u800c\u5bf9\u4e8e\u50cf \u201cGoogle Analytics\uff08\u8c37\u6b4c\u5206\u6790\uff09\u201c\u8fd9\u6837\u7684\u5173\u952e\u8bcd\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u7b2c\u4e00\u540d\u83b7\u5f97\u4e86\u5927\u91cf\u7684\u70b9\u51fb\uff1a \u53d1\u751f\u7684\u539f\u56e0\u5c31\u662f \u201cGoogle Analytics\uff08\u8c37\u6b4c\u5206\u6790\uff09\u201c\u662f\u4e00\u4e2a\u54c1\u724c\u8bcd\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u7528\u6237\u641c\u7d22\u8fd9\u4e2a\u8bcd\u65f6\u60f3\u627e\u7684\u5c31\u662f\u8fd9\u4e2a\u7279\u5b9a\u7684\u9875\u9762\u3002","title":"\u4e3a\u4ec0\u4e48\u5728\u8c37\u6b4c\u9996\u9875\u4e0a\u6392\u540d\u5e76\u4e0d\u662f\u6700\u7ec8\u76ee\u6807"},{"location":"pages/affiliate/how-to-get-on-the-first-page-of-google/#\u6700\u540e","text":"\u5728Google\u9996\u9875\u4e0a\u7684\u6392\u540d\u5e76\u4e0d\u662f\u4e00\u95e8\u7cbe\u51c6\u7684\u79d1\u5b66\u3002\u6ca1\u4eba\u786e\u5207\u77e5\u9053\u8c37\u6b4c\u7b97\u6cd5\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u56e0\u6b64\u6ca1\u6709\u4fdd\u8bc1\u6392\u540d\u7684\u516c\u5f0f\u3002\uff08\u522b\u4eba\u4e0d\u4f1a\u544a\u8bc9\u4f60\uff0c\u751a\u81f3\u6211\u4eec\u4e5f\u4e0d\u77e5\u9053\uff01\uff09 \u4e5f\u5c31\u662f\u8bf4\uff0c\u4ee5\u4e0a\u8fc7\u7a0b\u4e3b\u8981\u57fa\u4e8e\u6211\u4eec\u5728\u4f17\u591a\u5927\u89c4\u6a21\u7814\u7a76\u4e2d\u5f97\u51fa\u7684\u7ed3\u679c\u3002\u7814\u7a76\u548c\u7ecf\u9a8c\u662f\u68c0\u9a8c\u6211\u4eec\u7684 SEO\u7b56\u7565 \u662f\u5426\u7b26\u5408\u8c37\u6b4c\u542b\u7cca\u4e0d\u6e05\u7b97\u6cd5\u7684\u7684\u6700\u4f73\u505a\u6cd5\u3002 \u6709\u7591\u95ee\u5417\uff1f\u4f60\u53ef\u4ee5\u5728\u4e0b\u65b9\u7559\u8a00\uff0c\u6216\u8005\u5728 Twitter \u4e0a\u627e\u6211\u3002 \u51e1\u672c\u7f51\u6ce8\u660e\"\u6765\u6e90\uff1aXXX \"\u7684\u6587/\u56fe/\u89c6\u9891\u7b49\u7a3f\u4ef6\uff0c\u672c\u7f51\u8f6c\u8f7d\u51fa\u4e8e\u4f20\u9012\u66f4\u591a\u4fe1\u606f\u4e4b\u76ee\u7684\uff0c\u5e76\u4e0d\u610f\u5473\u7740\u8d5e\u540c\u5176\u89c2\u70b9\u6216\u8bc1\u5b9e\u5176\u5185\u5bb9\u7684\u771f\u5b9e\u6027\u3002\u5982\u6d89\u53ca\u4f5c\u54c1\u5185\u5bb9\u3001\u7248\u6743\u548c\u5176\u5b83\u95ee\u9898\uff0c\u8bf7\u4e0e\u672c\u7f51\u8054\u7cfb\uff0c\u6211\u4eec\u5c06\u5728\u7b2c\u4e00\u65f6\u95f4\u5220\u9664\u5185\u5bb9\uff01 \u4f5c\u8005: Joshua Hardwick \u6765\u6e90\uff1a https://ahrefs.com/blog/zh/how-to-get-on-the-first-page-of-google/","title":"\u6700\u540e"},{"location":"pages/affiliate/keyword-difficulty/","text":"\u5173\u952e\u8bcd\u96be\u5ea6\uff1a\u5982\u4f55\u786e\u8ba4\u4f60\u5728 Google \u83b7\u5f97\u6392\u540d\u7684\u673a\u4f1a \u00b6 \u627e\u5230\u90a3\u4e9b\u6392\u540d\u6709\u610f\u4e49\u7684\u5173\u952e\u8bcd\u5e76\u4e0d\u96be\uff0c\u96be\u7684\u662f\u9700\u8981\u4e86\u89e3\u53d6\u5f97\u8fd9\u4e9b\u6392\u540d\u7684\u4ee3\u4ef7\uff08\u5373\uff1a\u5173\u952e\u8bcd\u96be\u5ea6\uff08keyword difficulty\uff09\uff0c\u63a5\u7740\u5236\u5b9a\u76f8\u5e94\u7684 SEO\u7b56\u7565\uff0c\u5e76\u5206\u51fa\u4f18\u5148\u7ea7\u3002 \u6ca1\u6709\u4eba\u77e5\u9053 Google \u7a76\u7adf\u4f7f\u7528\u4e86\u54ea\u4e2a\u5177\u4f53\u7684\u516c\u5f0f\u6765\u4e3a\u7f51\u7ad9\u6392\u540d\u3002\u5373\u4f7f\u6709\u4eba\u77e5\u9053\uff0c\u4e5f\u65e0\u6cd5\u6539\u53d8\u6709\u4e9b\u5173\u952e\u8bcd\u7684\u6392\u540d\u96be\u5ea6\u9ad8\u4e8e\u5176\u4ed6\u5173\u952e\u8bcd\u7684\u4e8b\u5b9e\u3002\u8fd9\u4f7f\u5f97\u201c\u5173\u952e\u8bcd\u96be\u5ea6\u201d\u8fd9\u4e00\u6982\u5ff5\u6210\u4e3a SEO \u9886\u57df\u7684\u6838\u5fc3\u6311\u6218\u4e4b\u4e00\u3002 \u73b0\u5728\uff0c\u4e00\u4e9b\u8bfb\u8005\u5df2\u7ecf\u77e5\u9053\u4e86\u6211\u4eec\uff08Ahrefs\uff09\u6709\u4e00\u9879\u540d\u4e3a\u201c \u5173\u952e\u8bcd\u96be\u5ea6 \u201d\uff08Keyword Difficulty\uff09\u7684\u6307\u6807\uff0c\u6210\u5343\u4e0a\u4e07\u7684 SEO \u4ece\u4e1a\u8005\u5728\u5f00\u5c55\u5173\u952e\u8bcd\u8c03\u7814\u7684\u65f6\u5019\u90fd\u4f1a\u4f9d\u8d56\u8fd9\u9879\u6307\u6807\u3002 \u4f46\u540c\u65f6\uff0c\u6211\u4eec\u53d1\u73b0\u8bb8\u591a\u7528\u6237\u5bf9\u8fd9\u9879\u6307\u6807\u7684\u671f\u5f85\u592a\u5927\u4e86\u2026\u2026 \u56e0\u6b64\uff0c\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u4f1a\u89e3\u91ca\u5173\u952e\u8bcd\u96be\u5ea6\u7684\u4e00\u822c\u6982\u5ff5\uff08\u5373\uff1a\u5f53\u7ecf\u9a8c\u8001\u9053\u7684 SEO \u4e13\u4e1a\u4eba\u58eb\u5728\u4f30\u8ba1\u76ee\u6807\u5173\u952e\u8bcd\u5728 Google \u4e2d\u7684\u6392\u540d\u673a\u4f1a\u65f6\uff0c\u4f1a\u7279\u522b\u6ce8\u610f\u54ea\u4e9b\u4fe1\u53f7\uff09\uff0c\u4ee5\u53ca Ahrefs \u7684\u201c\u5173\u952e\u8bcd\u96be\u5ea6\u201d\u6307\u6807\u80fd\u63d0\u4f9b\u54ea\u4e9b\u5e2e\u52a9\u3002 \u91cd\u8981 \u4e0d\u8981\u628a\u201c\u5173\u952e\u8bcd\u96be\u5ea6\u201d\u548c Google \u5173\u952e\u8bcd\u89c4\u5212\u5e08 \u91cc\u7684\u201c \u5173\u952e\u8bcd\u7ade\u4e89 \u201d\uff08\u89c1\u4ee5\u4e0b\u622a\u56fe\uff09\u6df7\u6dc6\u4e86\u3002\u5173\u952e\u8bcd\u7ade\u4e89\u5c55\u793a\u4e86\u4e3a\u67d0\u4e00\u7279\u5b9a\u5173\u952e\u8bcd\u5e7f\u544a\u51fa\u4ef7\u7684\u5e7f\u544a\u4e3b\u6570\u91cf\u3002\u800c\u201c\u5173\u952e\u8bcd\u96be\u5ea6\u201d\u663e\u793a\u4e86\u53d6\u5f97\u8be5\u5173\u952e\u8bcd\u5728\u81ea\u7136\u641c\u7d22\u7ed3\u679c\u4e2d\u7684\u6392\u540d\u7684\u96be\u5ea6\u3002 \u5982\u4f55\u786e\u8ba4\u67d0\u4e2a\u5173\u952e\u8bcd\u7684\u6392\u540d\u96be\u5ea6 \u00b6 \u5927\u591a\u6570\u4e13\u4e1a\u4eba\u58eb\u901a\u8fc7\u5206\u6790\u5df2\u7ecf\u4e4b\u4e8e\u8be5\u5173\u952e\u8bcd\u53d6\u5f97\u6392\u540d\u7684\u7f51\u7ad9\u7684\u5df2\u77e5\u56e0\u7d20\uff0c\u6765\u627e\u51fa\u5b83\u4eec\u4e0e\u6392\u540d\u7684\u5173\u8054\u3002 \u8fd9\u4e9b\u56e0\u7d20\u5f52\u6839\u7ed3\u5e95\u65e0\u5916\u4e4e\u4ee5\u4e0b\u56db\u7c7b\uff1a \u7f51\u9875\u7684\u5185\u5bb9 \u641c\u7d22\u610f\u56fe \u6765\u81ea\u5176\u4ed6\u7f51\u7ad9\u7684\u94fe\u63a5 \u57df\u540d/ \u7f51\u7ad9\u7684\u6743\u5a01\u5ea6 \u6211\u5c06\u5728\u4e0b\u9762\u7684\u7ae0\u8282\u4e2d\u4e00\u4e00\u5c55\u5f00\u89e3\u6790\u8fd9\u4e9b\u5f71\u54cd\u56e0\u7d20\u3002\u4f46\u5728\u90a3\u4e4b\u524d\uff0c\u4f60\u9700\u8981\u8003\u8651\u4e00\u4e9b\u4e8b\u60c5\u3002 \u5728 SEO \u9886\u57df\u5b58\u5728\u7740\u51e0\u79cd\u4e0d\u540c\u7684\u601d\u60f3\u6d41\u6d3e\uff0c\u8fd9\u610f\u5473\u7740\u4e00\u4e9b SEO \u7684\u4e13\u4e1a\u4eba\u58eb\u4f1a\u5bf9\u4ee5\u4e0b\u7684\u9648\u8ff0\u548c\u60f3\u6cd5\u6301\u4e0d\u540c\u89c2\u70b9\u3002\u5bf9\u6b64\u6211\u5b8c\u5168\u80fd\u591f\u7406\u89e3\uff0c\u5e76\u4e14\uff0c\u6211\u9f13\u52b1\u4f60\u8ba4\u771f\u5730\u68c0\u67e5\u4f60\u53ef\u80fd\u4f1a\u78b0\u5230\u7684\u4e92\u65a5\u89c2\u70b9\u3002\u53ef\u80fd\u7684\u60c5\u51b5\u662f\u5176\u4e2d\u4e00\u4e2a\u6d41\u6d3e\u7684\u89c2\u70b9\u66f4\u80fd\u4e0e\u4f60\u4ea7\u751f\u5171\u9e23\u3002 \u73b0\u5728\uff0c\u6211\u4eec\u6765\u4ed4\u7ec6\u770b\u4e00\u4e0b\u524d\u9762\u63d0\u5230\u7684\u5f71\u54cd\u56e0\u7d20\u3002 1. \u7f51\u9875\u7684\u5185\u5bb9 \u00b6 Google \u4e0d\u4f1a\u4e3a\u65e0\u5173\u9875\u9762\u63d0\u4f9b\u6392\u540d\u3002\u90a3\u4e48\u5982\u4f55\u8ba9\u4f60\u7684\u7f51\u9875\u4e0e\u76ee\u6807\u5173\u952e\u8bcd\u76f8\u5173\u5462\uff1f \u6211\u5176\u5b9e\u6709\u4e00\u4e2a\u66f4\u597d\u7684\u95ee\u9898\uff1a \u5982\u4f55\u8ba9\u4f60\u7684\u7f51\u9875\u4e0e\u76ee\u6807\u5173\u952e\u8bcd\u65e0\u5173\u3002 \u4f8b\u8bc1\uff1a\u4e3a\u4e86\u53d6\u5f97\u201c 301 \u91cd\u5b9a\u5411 \u201d\uff08301 redirects\uff09\u8fd9\u4e2a\u5173\u952e\u8bcd\u7684\u6392\u540d\uff0c\u6211\u4eec\u6700\u8fd1\u53d1\u5e03\u4e86\u4e00\u7bc7\u5173\u4e8e 301 \u91cd\u5b9a\u5411\u7684\u6587\u7ae0\u3002\u56e0\u4e3a\u8fd9\u7bc7\u6587\u7ae0\u4e0e\u76ee\u6807\u5173\u952e\u8bcd\u7684\u8054\u7cfb\u975e\u5e38\u7d27\u5bc6\uff0c\u6839\u672c\u6ca1\u6709\u529e\u6cd5\u5728\u5199\u4f5c\u8fd9\u7bc7\u6587\u7ae0\u7684\u540c\u65f6\u8ba9\u5b83\u4e0e\u76ee\u6807\u5173\u952e\u8bcd\u65e0\u5173\u3002 \u660e\u767d\u6211\u7684\u610f\u601d\u4e86\u5417\uff1f \u5982\u679c\u4f60\u5728\u5199\u4e00\u7bc7\u6587\u7ae0\uff0c\u5e76\u4ee5\u67d0\u4e2a\u7279\u5b9a\u7684\u5173\u952e\u8bcd\u4e3a\u76ee\u6807\uff0c\u5b83\u5c06\u4e0d\u53ef\u907f\u514d\u5730\u4e0e\u8fd9\u4e2a\u5173\u952e\u8bcd\u76f8\u5173\u3002 \u53ef\u662f\uff0c\u5927\u591a\u6570 \u7ad9\u5185 SEO \u4f18\u5316\u5efa\u8bae\u90fd\u5305\u62ec\u8981\u5728\u9875\u9762\u7684\u4ee5\u4e0b\u5143\u7d20\u4e2d\u63d0\u53ca\u4f60\u7684\u76ee\u6807\u5173\u952e\u8bcd\u4ee5\u63d0\u9ad8\u5176\u5728 Google \u773c\u4e2d\u7684\u76f8\u5173\u5ea6\uff1a \u6807\u9898\u6807\u7b7e \uff08Title tag\uff09 \u7f51\u5740\u94fe\u63a5\uff08URL\uff09 \uff08\u4e00\u7ea7\uff09\u6807\u9898\uff08H1\uff09 \u524d\u90e8\u5185\u5bb9\uff08Early in content\uff09 \u4f46\u8fd9\u4e9b\u96be\u9053\u4e0d\u662f\u5df2\u77e5\u6761\u4ef6\u5417\uff1f\u96be\u9053\u4f60\u4e0d\u662f\u65e0\u8bba\u5982\u4f55\u90fd\u4f1a\u53bb\u505a\u8fd9\u4e9b\u64cd\u4f5c\u7684\u5417\uff1f \u4f8b\u5982\uff0c\u73b0\u5728\u5173\u4e8e\u201c\u5173\u952e\u8bcd\u96be\u5ea6\u201d\u8fd9\u4e2a\u8bdd\u9898\uff0c\u6211\u5df2\u7ecf\u5199\u4e86 500 \u5b57\u4e86\uff0c\u5c3d\u7ba1\u6211\u6ca1\u6709\u523b\u610f\u53bb\u505a\uff0c\u4f46\u662f\u6211\u5df2\u7ecf\u63d0\u53ca\u8fd9\u4e2a\u5173\u952e\u8bcd\u597d\u591a\u6b21\u4e86\u3002\u8fd9\u4e9b\u90fd\u662f\u81ea\u7136\u800c\u7136\u53d1\u751f\u7684\u554a\u3002 \u591a\u5e74\u4ee5\u524d\uff0c\u4e8b\u60c5\u662f\u4e0d\u4e00\u6837\u7684\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u6280\u5de7\u6765\u611a\u5f04 Google\u3002\u5982\u679c\u4f60\u60f3\u8981\u8d85\u8fc7\u7ade\u4e89\u5bf9\u624b\uff0c\u90a3\u4e48\u66f4\u9891\u7e41\u5730\u63d0\u53ca\u76ee\u6807\u5173\u952e\u8bcd\uff0c\u7528\u5173\u952e\u8bcd\u53d8\u4f53\u5145\u65a5\u6807\u9898\u6807\u7b7e\u662f\u53ef\u4ee5\u594f\u6548\u7684\u3002 \u8fd9\u6837\u7684\u5b9e\u8df5\u5982\u4eca\u5df2\u7ecf\u4e00\u53bb\u4e0d\u590d\u8fd4\u4e86\u3002\u73b0\u5728\u7684 Google \u5df2\u7ecf\u77e5\u9053\u5982\u4f55\u50cf\u4e0b\u9762\u8fd9\u6837\u800d\u82b1\u62db\u4e86\uff1a \u8fd9\u91cc\u7684\u4f8b\u5b50\u4e2d\uff0c\u201cguest writing\u201d \u8fd9\u4e2a\u5173\u952e\u8bcd\u5728\u5176\u6392\u540d\u7b2c\u4e00\u7ed3\u679c\u7684\u6807\u9898\u6807\u7b7e\u4e2d\u6ca1\u6709\u51fa\u73b0\u3002 \u7b49\u4e00\u4e0b\u2026\u2026 \u6574\u7bc7\u5185\u5bb9\u90fd\u6ca1\u6709\u63d0\u5230\u8fc7\u4e00\u6b21\u201cguest writing\u201d\u8fd9\u4e2a\u5173\u952e\u8bcd\u2026\u2026 \u663e\u7136\uff0cGoogle \u5df2\u7ecf\u806a\u660e\u5230\u53ef\u4ee5\u7406\u89e3\u540c\u4e49\u8bcd\u5e76\u4e14\u660e\u767d\u201dguest writing\u201d\u548c\u201cguest blogging\u201d\u5176\u5b9e\u8bf4\u7684\u662f\u4e00\u56de\u4e8b\u3002 \u4e8e\u662f\uff0c\u5982\u679c\u4f60\u89c9\u5f97\u9ad8\u6392\u540d\u7f51\u9875\u6807\u9898\u6807\u7b7e\u4e2d\u76ee\u6807\u5173\u952e\u8bcd\u7684\u7f3a\u5931\u610f\u5473\u7740\u8fd9\u4e2a\u5173\u952e\u8bcd\u7ade\u4e89\u4e0d\u6fc0\u70c8\uff0c\u90a3\u4f60\u5c31\u9519\u4e86\u3002 \u5728\u5206\u6790\u4e00\u4e2a\u5173\u952e\u8bcd\u7684\u65f6\u5019\uff0c\u4f60\u4e0d\u5e94\u8be5\u5c06\u6ce8\u610f\u529b\u653e\u5728\u8fd9\u4e2a\u5173\u952e\u8bcd\u5728\u76ee\u6807\u7f51\u7ad9\u7684\u6392\u5217\u5bc6\u5ea6\uff0c\u800c\u5e94\u8be5\u6df1\u6316\u4e00\u4e0b\uff0c\u770b\u770b\u8fd9\u4e9b\u5185\u5bb9\u662f\u51fa\u81ea\u5bf9\u76f8\u5173\u8bdd\u9898\u6709\u76f8\u5173\u80cc\u666f\u77e5\u8bc6\u4e14\u7406\u89e3\u826f\u597d\u7684\u4e13\u4e1a\u4eba\u58eb\u4e4b\u624b\uff0c\u8fd8\u662f\u4e00\u4e2a\u65f6\u85aa 3 \u7f8e\u91d1\u7684\u81ea\u7531\u804c\u4e1a\u5199\u624b\u62fc\u51d1\u8d77\u6765\u7684\u3002 \u4f60\u7684\u7ade\u4e89\u4f18\u52bf\u6765\u81ea\u4f60\u5185\u5bb9\u7684\u8d28\u91cf\u4ee5\u53ca\u5b83\u53ef\u4ee5\u4e3a\u8bfb\u8005\u521b\u9020\u7684\u4ef7\u503c\uff0c\u800c\u4e0d\u662f\u201c\u6709\u7b56\u7565\u7684\u5173\u952e\u8bcd\u5e03\u5c40\u201d\uff08strategic keyword placements\uff09\u3002 Tim\uff0c\u4f60\u7684\u610f\u601d\u662f\u4e0d\u662f Google \u5df2\u7ecf\u806a\u660e\u5230\u53ef\u4ee5\u901a\u8fc7\u9605\u8bfb\u7f51\u9875\u7684\u5185\u5bb9\u6765\u5206\u8fa8\u5b83\u662f\u4e00\u4e2a\u4e1a\u5185\u4eba\u58eb\u8fd8\u662f\u4e00\u4e2a\u968f\u673a\u7684\u5199\u624b\u5b8c\u6210\u4e86\u7684? \u4e0d\uff0c\u6211\u5f88\u786e\u5b9a Google \u8fd8\u4e0d\u80fd\u505a\u5230\u8fd9\u70b9\u3002\u5426\u5219\uff0cGoogle \u7684\u7b97\u6cd5\u4e5f\u4e0d\u4f1a\u8ba9\u4e00\u4e2a\u201c \u4e71\u6570\u5047\u6587\u201d\uff08lorem ipsum\uff09\u7f51\u7ad9\u7684\u6392\u540d\u8d85\u8fc7\u771f\u5b9e\u7684\u7f51\u7ad9 \u4e86\u3002 \u4f46\u662f\u6211\u76f8\u4fe1 Google \u7684\u7b97\u6cd5\u5df2\u7ecf\u878d\u5408\u4e86\u8db3\u591f\u7684\u56e0\u7d20\u6765\u201c \u5224\u5b9a\u201d\uff08guesstimate\uff09 \u7ed9\u5b9a\u5185\u5bb9\u7684\u6df1\u5ea6\u3001\u6743\u5a01\u5ea6\u548c\u53ef\u4fe1\u5ea6\u4e86\u3002 \u90a3\u4e48\u8bed\u4e49\u76f8\u5173\uff08LSI\uff09\u548c\u8bcd\u9891-\u9006\u6587\u672c\u9891\u7387\uff08TF-IDF\uff09\u8fd9\u4e9b\u56e0\u7d20\u5462\uff1f \u00b6 \u8fd9\u65f6\uff0c\u53ef\u80fd\u4f1a\u6709\u8bfb\u8005\u60f3\u77e5\u9053\u8fd9\u4eec\u600e\u4e48\u770b\u5f85\u90a3\u4e9b\u5ba3\u79f0\u53ef\u4ee5\u901a\u8fc7\u5411\u5185\u5bb9\u4e2d\u6dfb\u52a0\u9002\u91cf\u201c\u6b63\u786e\u201d\u7684\u5173\u952e\u8bcd\u6765\u5e2e\u4f60\u53d6\u5f97\u9ad8\u6392\u540d\u7684\u5de5\u5177\u3002 \u8fd9\u7c7b\u5de5\u5177\u4e00\u822c\u4f1a\u5ba3\u79f0\u4f7f\u7528\u4e86\u542c\u8d77\u6765\u5f88\u667a\u80fd\u7684\u6280\u672f\u2014\u2014\u5982\uff1a \u8bed\u4e49\u76f8\u5173\uff08LSI\uff09 \u548c \u9006\u6587\u672c\u9891\u7387\uff08TD-IDF\uff09 \u2014\u2014\u6765\u5e2e\u52a9\u4f60\u5b9e\u73b0\u63d0\u9ad8\u5173\u952e\u8bcd\u6392\u540d\u7684\u76ee\u6807\u3002 \u4f46\u662f\u5b9e\u9645\u60c5\u51b5\u662f\uff1a \u51e0\u4e4e\u53ef\u4ee5 \u786e\u8ba4 \u7684\u662f\uff0cGoogle \uff08\u4e3a RankBrain\uff09\u4f7f\u7528\u4e86\u5173\u952e\u8bcd\u77e2\u91cf\u6280\u672f\u548c\u65b9\u6cd5\uff0c\u4f46\u662f \u6ca1\u6709\u4efb\u4f55\u8bc1\u636e\u663e\u793a\u5b83\u4eec\u4f7f\u7528\u4e86\u8bed\u4e49\u76f8\u5173\u6280\u672f \u3002\u5b9e\u9645\u4e0a\uff0c\u5c31 LSI \u7684\u5de5\u4f5c\u539f\u7406\u800c\u8a00\uff0c\u6240\u6709\u7684\u8bc1\u636e\u90fd\u6307\u5411\u4e86\u76f8\u53cd\u7684\u65b9\u5411\u3002\u56e0\u6b64\u5b9e\u5728\u662f\u6ca1\u6709\u5fc5\u8981\u4f7f\u7528\u90a3\u4e9b LSI \u5173\u952e\u8bcd\u751f\u6210\u5668\u6765\u751f\u6210\u5173\u952e\u8bcd\u5e76\u63d2\u5165\u4f60\u7684\u5185\u5bb9\u3002 \u81f3\u4e8e\u8bcd\u9891\u2014\u9006\u6587\u672c\u9891\u7387\uff0cGoogle \u4f7f\u7528\u8fd9\u4e9b\u6280\u672f\u7684\u53ef\u80fd\u6027\u5012\u662f\u66f4\u5927\u4e00\u4e9b\uff0c\u4f46\u662f\u6211\u4eec\u7684\u89c2\u70b9\u4e0d\u4f1a\u6539\u53d8\u2026\u2026 \u5728 Ahrefs\uff0c\u6211\u4eec\u4e0d\u5efa\u8bae\u7528\u6237\u6c89\u8ff7\u4e8e\u8fd9\u4e9b\u542c\u8d77\u6765\u5f88\u9177\u70ab\u7684\u6982\u5ff5\u3002\u6211\u4eec\u89c9\u5f97\u521b\u4f5c\u4f18\u8d28\u7684\u5185\u5bb9\u548c\u826f\u597d\u7684\u7528\u6237\u4f53\u9a8c\u6bd4\u5176\u4ed6\u4efb\u4f55\u4e8b\u60c5\u90fd\u91cd\u8981\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u4e0d\u89c9\u5f97\u6709\u529e\u6cd5\u6765\u91cf\u5316\u4f60\u5185\u5bb9\u7684\u201c\u76f8\u5173\u6027\u5f97\u5206\u201d\uff0c\u5e76\u4e14\u901a\u8fc7\u6539\u5584\u8fd9\u4e00\u5f97\u5206\u6765\u63d0\u9ad8\u6392\u540d\uff0c\u5c24\u5176\u662f\u5728\u8003\u8651\u5230\u5728\u4e0b\u4e00\u7ae0\u8282\u6211\u5c06\u8ba8\u8bba\u7684\u201c\u641c\u7d22\uff08\u8005\uff09\u52a8\u673a\u201d\u7684\u65f6\u5019\u3002 \u5173\u952e\u8981\u70b9 \u5206\u6790\u9ad8\u6392\u540d\u7f51\u9875\u662f\uff0c\u4f60\u9700\u8981\u7740\u529b\u8bc4\u4f30\u5176\u5185\u5bb9\u7684\u6df1\u5ea6\u4ee5\u53ca\u603b\u4f53\u8d28\u91cf\uff0c\u800c\u4e0d\u662f\u5173\u6ce8\u90a3\u4e9b\u4f20\u7edf\u7684\u52a3\u8d28\u4f18\u5316\u6307\u6807\uff08\u5982\uff1a\u6807\u9898\u4e2d\u7684\u5173\u952e\u8bcd\u7b49\uff09\u3002\u4f60\u7684\u5de5\u4f5c\u662f\u521b\u4f5c\u6bd4\u90a3\u4e9b\u5df2\u7ecf\u6709\u6392\u540d\u7684\u7f51\u9875\u66f4\u9ad8\u8d28\u91cf\u7684\u7f51\u9875\uff0c\u800c\u4e0d\u662f\u201c\u66f4\u4f18\u5316\u201d\u7684\u9875\u9762\u3002 \u53e6\u5916\uff0c\u4e0d\u8981\u60f3\u7740\u4f7f\u7528\u67d0\u4e00\u201c\u8bc4\u5206\u201d\u53bb\u8861\u91cf\u7f51\u9875\u7684\u76f8\u5173\u5ea6\uff0c\u4e0d\u7ba1\u4f60\u4f7f\u7528\u4e86\u4f55\u79cd\u6280\u672f\u624b\u6bb5\uff0c\u90fd\u51e0\u4e4e\u4e0d\u4f1a\u662f Google \u6b63\u5728\u4f7f\u7528\u7684\u3002 2. \u641c\u7d22\uff08\u8005\uff09\u52a8\u673a \u00b6 \u4ee5\u4e0b\u662f Ahrefs \u4e4b\u4e8e \u201cbacklink checker\u201d \u8fd9\u4e00\u5173\u952e\u8bcd\u7684\u6392\u540d\u5386\u53f2\u60c5\u51b5\u3002\uff08\u6570\u636e\u6765\u81ea Ahrefs \u7f51\u7ad9\u5206\u6790 \uff09\u3002 2017 \u5e74 2 \u6708\uff0c\u6211\u4eec\u53d1\u5e03\u4e86\u4e00\u4e2a\u7740\u9646\u9875\uff0c\u76ee\u6807\u662f\u83b7\u5f97 \u201cbacklink checker\u201d \u8fd9\u4e00\u5173\u952e\u8bcd\u7684\u6392\u540d\u3002\u5728\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u63cf\u8ff0\u4e86 Ahrefs \u51fa\u8272\u7684\u5916\u94fe\u8c03\u7814\u7279\u6027\uff0c\u5c31\u76f8\u5173\u8bdd\u9898\u9488\u5bf9\u8fd9\u4e2a\u5173\u952e\u8bcd\u505a\u4e86\u5b8c\u7f8e\u201c\u4f18\u5316\u201d\u3002 \u6587\u7ae0\u53d1\u5e03\u51e0\u4e2a\u6708\u540e\uff0c\uff08\u5728 \u5de7\u5999\u7684\u5185\u90e8\u94fe\u63a5 \u52a0\u6301\u4e0b\uff09\u6211\u4eec\u7684\u9875\u9762\u722c\u5347\u5230\u4e86\u76ee\u6807\u5173\u952e\u8bcd\u6392\u540d\u7b2c 5 \u4f4d\u3002 \u6211\u4eec\u6b23\u559c\u82e5\u72c2\uff01 \u4f46\u597d\u666f\u4e0d\u957f\u3002\u51e0\u5929\u540e Google \u5f00\u59cb\u964d\u4f4e\u6211\u4eec\u7684\u6392\u540d\uff0c\u5f88\u5feb\u6211\u4eec\u88ab\u6324\u5230\u4e86\u7ed3\u679c\u9875\u9762\u7684\u7b2c\u4e8c\u9875\uff08\u5373\u6700\u4f73 \u85cf\u5c38 \u5730\uff09\u3002 \u4f5c\u4e3a\u201c\u4e13\u4e1a\u7684 SEO \u4ece\u4e1a\u8005\u201d\uff0c\u6211\u4eec\u628a\u81ea\u5df1\u77e5\u9053\u7684\u4f18\u5316\u8bc0\u7a8d\u7528\u4e86\u4e2a\u904d\u3002\u5305\u62ec\uff1a \u6539\u5584\u5185\u5bb9\u6587\u6848\uff1b \u4f18\u5316\u7f51\u9875\u52a0\u8f7d\u901f\u5ea6\uff1b \u63d0\u9ad8\u7f51\u9875\u5bf9\u79fb\u52a8\u7aef\u7684\u53cb\u597d\u7a0b\u5ea6\uff1b \u52aa\u529b\u83b7\u53d6\u9ad8\u8d28\u91cf\u7684\u5916\u94fe\uff1b \u2026\u2026 \u5373\u4fbf\u5982\u6b64\uff0c\u6211\u4eec\u82b1\u4e86\u6574\u6574\u4e00\u5e74\u65f6\u95f4\u624d\u56de\u5230\u7b2c 6 \u4f4d\u3002 \u6392\u540d\u5c31\u4ece\u6b64\u6b62\u6b65\u4e0d\u524d\u4e86\u3002 \u4e5f\u5c31\u662f\u5728\u90a3\u65f6\uff0c\u6211\u4eec\u610f\u8bc6\u5230\u4e86\u6240\u6709\u7684\u52aa\u529b\u90fd\u7784\u51c6\u4e86\u9519\u8bef\u7684\u65b9\u5411\u3002 \u4e3a\u4ec0\u4e48\u5462\uff1f\u56e0\u4e3a\u4e0d\u7ba1\u6211\u4eec\u5c06\u201c\u4f20\u7edf\u7684\u201dSEO \u56e0\u7d20\u6253\u78e8\u5f97\u591a\u4e48\u5b8c\u7f8e\uff0c\u6211\u4eec\u7684\u7740\u9646\u9875\u4f9d\u7136\u6ca1\u6709\u89e3\u51b3\u641c\u7d22\u52a8\u673a\u7684\u95ee\u9898\u3002\u9664\u4e86\u5728\u4e3a\u5de5\u5177\u7684 7 \u5929\u8bd5\u7528\u6253\u5e7f\u544a\u5916\uff0c\u8fd9\u4e2a\u9875\u9762\u5e76\u672a\u89e3\u51b3\u66f4\u591a\u95ee\u9898\u3002 \u76f8\u53cd\uff0c\u6240\u6709\u6392\u540d\u5728\u6211\u4eec\u4e4b\u524d\u7684\u9875\u9762\u90fd\u63d0\u4f9b\u4e86\u514d\u8d39\u7684\u5916\u94fe\u68c0\u67e5\u529f\u80fd\uff0c\u7528\u6237\u53ef\u80fd\u76f4\u63a5\u4f7f\u7528\u8fd9\u4e9b\u5de5\u5177\u67e5\u8be2\u5916\u94fe\uff0c\u4e0d\u9700\u8981\u6ce8\u518c\u8d26\u6237\uff0c\u4e5f\u4e0d\u9700\u8981\u63d0\u4f9b\u4fe1\u7528\u5361\u4fe1\u606f\u3002 \u6253\u8138\u4e86 \u3002 \u8fd9\u65f6\uff0c\u6211\u4eec\u51b3\u5b9a\u53d1\u5e03\u4e00\u6b3e\u5b8c\u5168\u514d\u8d39\u7684\u5916\u94fe\u68c0\u67e5\u5de5\u5177\u6765\u8fce\u5408\u641c\u7d22\u8005\u7684\u52a8\u673a\uff0c\u5b83\u6bd4\u90a3\u4e9b\u6392\u540d\u9ad8\u4e8e\u6211\u4eec\u7684\u5de5\u5177\u90fd\u8981\u597d\u7528\u5f88\u591a\u3002 \u8fd9\u5c31\u662f\u6211\u4eec\u4e0a\u7ebf\u7684\u514d\u8d39\u5916\u94fe\u68c0\u67e5\u5de5\u5177\u3002 \u4ec5\u7528\u4e86\u4e00\u5468\u65f6\u95f4\uff0c\u6211\u4eec\u7684\u7f51\u9875\u5c31\u6500\u5347\u81f3\u7b2c 1 \u540d\uff0c\u5e76\u4e14\u4ece\u90a3\u4ee5\u540e\u4e00\u76f4\u4fdd\u6301\u7b2c 1 \u7684\u5b9d\u5ea7\uff01\uff08\u5230\u76ee\u524d\u4e3a\u6b62\u5df2\u7ecf 6 \u4e2a\u6708\u5566\uff09\u3002 \u8fd9\u8fd8\u6ca1\u5b8c\u3002 \u6765\u770b\u770b\u5728\u8fce\u5408\u4e86\u641c\u7d22\u8005\u610f\u56fe\u540e\uff0c\u8fd9\u4e2a\u9875\u9762\u7684\u81ea\u7136\u6d41\u91cf\u548c\u5173\u952e\u8bcd\u6392\u540d\u60c5\u51b5\u5427\uff1a \u5dee\u4e0d\u591a\u63d0\u5347\u4e86 6 \u500d\uff01 \u4e3a\u4ec0\u4e48\u4f1a\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\u5462\uff1f Google \u4f3c\u4e4e\u6709\u529e\u6cd5\u5f04\u6e05\u695a\u7528\u6237\u5bf9\u641c\u7d22\u7ed3\u679c\u7684\u6ee1\u610f\u7a0b\u5ea6\u3002\u5177\u4f53\u662f\u600e\u4e48\u505a\u5230\u7684\u6211\u4eec\u4e0d\u5f97\u800c\u77e5\uff0c\u4f46\u662f\u50cf\u201c\u5f39\u7c27\u5355\u9ad8\u8df7\u201d\uff08pogo-sticking\uff09\uff0c\u201c \u9a7b\u7559\u65f6\u95f4 \u201d\uff08dwell time\uff09\u548c\u8df3\u51fa\u7387\uff08bounce rate\uff09\u53ef\u80fd\u4f1a\u4f5c\u4e3a\u53c2\u8003\u56e0\u7d20\u3002 \u65e0\u8bba\u5982\u4f55\uff1a\u5176\u4e2d\u7684\u5173\u952e\u70b9\u5728\u4e8e\uff1a\u53ea\u8981 Google \u8ba4\u4e3a\u7528\u6237\u5bf9\u67d0\u4e00\u4e2a\u7f51\u9875\u7684\u201c\u559c\u7231\u201d\u7a0b\u5ea6\u8d85\u8fc7\u5176\u4ed6\uff0c\u8fd9\u4e2a\u7f51\u9875\u7684\u6392\u540d\u5c31\u4f1a\u8f83\u9ad8\u3002 \u5728\u4e0a\u8ff0\u6211\u4eec\u81ea\u5df1\u7684\u4f8b\u5b50\u4e2d\uff0c\u641c\u7d22\u8005\u5bf9\u6211\u4eec\u63d0\u4f9b\u7684\u514d\u8d39\u5916\u94fe\u68c0\u67e5\u5de5\u5177\u4f3c\u4e4e\u975e\u5e38\u6ee1\u610f\uff0c\u4ee5\u81f4 Google \u7ed9\u4e86\u6211\u4eec\u8d8a\u6765\u8d8a\u591a\u76f8\u5173\u5173\u952e\u8bcd\u7684\u6392\u540d\uff0c\u9010\u6b65\u63d0\u5347\u4e86\u8fd9\u4e2a\u7f51\u9875\u7684\u603b\u4f53\u641c\u7d22\u6d41\u91cf\u3002 \u6211\u73b0\u5728\u975e\u5e38\u6709\u4fe1\u5fc3\uff0c\u5373\u4f7f\u6211\u4eec\u62ff\u6389\u8fd9\u4e2a\u7740\u9646\u9875 90% \u7684\u5185\u5bb9\uff0c\u5b83\u4f9d\u7136\u53ef\u4ee5\u7ee7\u7eed\u4fdd\u6301\u7b2c\u4e00\u7684\u4f4d\u7f6e\u3002\u7528\u6237\uff08\u5728\u641c\u7d22\u8fd9\u4e2a\u5173\u952e\u8bcd\u7684\u65f6\u5019\uff09\u4f3c\u4e4e\u53ea\u5173\u5fc3\u80fd\u5426\u627e\u5230\u514d\u8d39\u7684\u5916\u94fe\u68c0\u67e5\u5de5\u5177\uff0c\u5bf9\u4e8e\u5173\u4e8e\u6211\u4eec\u5de5\u5177\u6709\u591a\u68d2\u7684\u8ba8\u8bba\u5b8c\u5168\u4e0d\u611f\u5192\u3002 \u5173\u952e\u8981\u70b9 \u5206\u6790\u76ee\u6807\u5173\u952e\u8bcd\u7684\u9ad8\u6392\u540d\u7ed3\u679c\uff0c\u4ee5\u51b3\u5b9a\u4f60\u662f\u5426\u80fd\u63d0\u4f9b\u66f4\u597d\u5730\u8fce\u5408\u7528\u6237\u7684\u5185\u5bb9\u3002\u5982\u679c\u4e0d\u80fd\uff0c\u90a3\u4e48\u65e0\u8bba SEO \u5de5\u5177 \u7684\u7ed3\u679c\u5982\u4f55\uff0c\u8981\u505a\u8fd9\u4e2a\u5173\u952e\u8bcd\u7684\u6392\u540d\u5bf9\u4f60\u6765\u8bf4\u90fd\u592a\u96be\u4e86\u3002 \u7f16\u8005\u6ce8 \u4e86\u89e3 Google \u5bf9\u5173\u952e\u8bcd\u5f53\u524d\u6392\u540d\u72b6\u51b5\u662f\u5426\u6ee1\u610f\uff0c\u53ef\u4ee5\u67e5\u770b\u641c\u7d22\u5f15\u64ce\u7ed3\u679c\u9875\u9762\u7684\u6392\u540d\u5386\u53f2\u3002 \u4ee5\u4e0b\u662f Ahrefs \u5173\u952e\u8bcd\u5206\u6790 \u5de5\u5177\u5c55\u793a\u7684\u5173\u952e\u8bcd \u201cSEO tools\u201d \u7684\u5386\u53f2\u6392\u540d\u60c5\u51b5\u3002 \u8fd9\u4e94\u4e2a\u7ed3\u679c\u5df2\u7ecf\u5360\u636e\u5404\u81ea\u7684\u5f53\u524d\u4f4d\u7f6e\u6709\u4e00\u6bb5\u65f6\u95f4\u4e86\u3002\u6392\u540d\u51e0\u4e4e\u6ca1\u6709\u53d8\u5316\u3002 \u518d\u6765\u770b\u770b \u201cSEO forums\u201d \u8fd9\u4e2a\u5173\u952e\u8bcd\u7684\u641c\u7d22\u5f15\u64ce\u7ed3\u679c\u9875\u9762\u5386\u53f2\uff1a \u8fd9\u4e9b\u7ed3\u679c\u5728\u4e00\u5e74\u4e2d\u5c61\u6b21\u8fdb\u51fa\u524d 10 \u540d\u3002\u76f4\u5230\u6700\u8fd1\uff0cGoogle \u624d\u4f3c\u4e4e\u786e\u8ba4\u4e86\u6700\u8ba9\u7528\u6237\u6ee1\u610f\u7684\u7ed3\u679c\u3002 \u6df7\u4e71\u7684\u641c\u7d22\u5f15\u64ce\u7ed3\u679c\u9875\u9762\uff0c\u5728\u4e00\u4e9b SEO \u4e13\u4e1a\u4eba\u58eb\u773c\u4e2d\u662f\u83b7\u5f97\u6392\u540d\u7684\u597d\u673a\u4f1a\uff1a This SERP has opportunity written all over it pic.twitter.com/dZ5nj5rQ06 \u2014 nick eubanks (@nick_eubanks) April 20, 2019 \u539f\u56e0\u5728\u4e8e\uff0c\u5f88\u663e\u7136 Google \u5bf9\u5f53\u524d\u7684\u6392\u540d\u7ed3\u679c\u5e76\u4e0d\u6ee1\u610f\uff0c\u4e8e\u662f\u5b83\u9009\u62e9\u6bcf\u6b21\u90fd\u53ea\u8ba9\u5176\u4e2d\u7684\u67d0\u4e2a\u7ed3\u679c\u5728\u7b2c\u4e00\u7684\u4f4d\u7f6e\u5f85\u4e00\u5c0f\u4f1a\u513f\u3002\u8fd9\u65f6\uff0c\u5982\u679c\u4f60\u80fd\u51c6\u786e\u628a\u63e1\u7528\u6237\u7684\u641c\u7d22\u52a8\u673a\uff0c\u90a3\u4e48\u7b2c\u4e00\u7684\u4f4d\u7f6e\u5c31\u662f\u4f60\u7684\u4e86\u3002 \u4f46\u867d\u8bf4\u5982\u6b64\uff0c\u8981\u60f3\u5f81\u670d\u641c\u7d22\u5f15\u64ce\u7ed3\u679c\u9875\u9762\u8fd8\u662f\u5f88\u96be\u7684\u3002 \u56e0\u4e3a Google \u4e5f\u4e0d\u6e05\u695a\u7528\u6237\u7684\u641c\u7d22\u52a8\u673a\u662f\u4ec0\u4e48\uff0c\u5f88\u53ef\u80fd\u7684\u60c5\u51b5\u662f\uff0c\u4f60\u4e5f\u4e0d\u77e5\u9053\u3002\u8fd8\u6709\u4e00\u79cd\u53ef\u80fd\u662f\u641c\u7d22\u52a8\u673a\u603b\u662f\u5728\u4e0d\u65ad\u53d8\u5316\u4e4b\u4e2d\uff0c\u8fd9\u65f6\u8981\u53d6\u5f97\u957f\u5c3e\u5173\u952e\u8bcd\u7684\u6392\u540d\u51e0\u4e4e\u662f\u4e0d\u53ef\u80fd\u7684\u3002 3. \u5176\u4ed6\u7f51\u7ad9\u7684\u94fe\u63a5 \u00b6 \u6700\u8fd1\uff0c\u8ba9\u6211\u4eec\u4ece\u201c\u9ad8\u8d28\u91cf\u5185\u5bb9\u201d\u201c\u641c\u7d22\uff08\u8005\uff09\u52a8\u673a\u201d\u7b49\u62bd\u8c61\u6982\u5ff5\u5207\u6362\u5230\u975e\u5e38\u5bb9\u6613\u7406\u89e3\u7684\u6982\u5ff5\uff1a\u5916\u94fe\u3002 \u6765\u81ea\u5176\u4ed6\u7f51\u7ad9\u7684\u94fe\u63a5\u662f Google \u6392\u540d\u7b97\u6cd5\u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206\uff08\u53ef\u4ee5\u67e5\u770b\u6211\u7684 \u5173\u4e8e PageRank \u7684\u6587\u7ae0 \u4e86\u89e3\u66f4\u591a\u7ec6\u8282\uff09\u3002 Google \u5c06\u8fd9\u4e9b\u94fe\u63a5\u89c6\u4f5c\u5bf9\u4f60\u7f51\u7ad9\u7684\u6295\u7968\uff0c\u8fd9\u4e9b\u6295\u7968\u8005\u8ba4\u4e3a\u4f60\u7684\u7f51\u7ad9\u503c\u5f97\u66f4\u9ad8\u7684\u6392\u540d\u3002 \u5f53\u7136\uff0cGoogle \u7b97\u6cd5\u8003\u5bdf\u7684\u4e0d\u4ec5\u4ec5\u662f\u94fe\u63a5\u5230\u4f60\u7f51\u9875\u7684\u7f51\u7ad9\u6570\u91cf\uff0c\u5b83\u8003\u8651\u7684\u56e0\u7d20\u8981\u590d\u6742\u5f97\u591a\u3002\u94fe\u63a5\u7684\u201c\u8d28\u91cf\u201d\u4e5f\u975e\u5e38\u91cd\u8981\uff0c\u5176\u4ed6\u56e0\u7d20\u8fd8\u5305\u62ec\uff1a \u8be5\u7f51\u7ad9\u63d0\u4f9b\u7ed9\u5176\u4ed6\u7f51\u7ad9\u7684\u94fe\u63a5\u6570\u91cf\uff1b \u8be5\u94fe\u63a5\u5904\u4e8e\u8be5\u7f51\u7ad9\uff08\u7ed3\u6784\uff09\u7684\u6df1\u5ea6\uff1b \u8be5\u94fe\u63a5\u5b9e\u9645\u6240\u5904\u7684\u8bed\u5883\u4e0e \u951a\u6587\u672c \uff1b \u2026\u2026 \u4e0d\u5e78\u7684\u662f\uff0c\u8fd9\u4e9b\u53d8\u91cf\u4f7f\u5f97\u51c6\u786e\u8ba1\u7b97\u51fa Google \u773c\u4e2d\u9875\u9762\u6240\u8c13\u7684\u201c\u94fe\u63a5\u4ef7\u503c\u201d\u975e\u5e38\u56f0\u96be\u3002 \u5c3d\u7ba1\u5982\u6b64\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u4f60\u7684\u7f51\u9875\u4ece\u5176\u4ed6\u9875\u9762\u83b7\u5f97\u7684\u5916\u94fe\u8d8a\u591a\uff0c\u5728 Google \u4e2d\u7684\u6392\u540d\u4e5f\u5c31\u8d8a\u9ad8\u3002 \u6211\u4eec\u77e5\u9053\u8fd9\u4e00\u70b9\uff0c\u662f\u56e0\u4e3a\u6211\u4eec \u505a\u8fc7\u4e13\u95e8\u7814\u7a76 \uff0c\u4e14\u53d1\u73b0\u4e86\u5176\u4e2d\u6e05\u6670\u7684\u5173\u8054\u3002 \u4e0d\u96be\u53d1\u73b0\uff0c\u72ec\u7acb\u6307\u5165\u57df\u540d\uff08\u5373\uff1a\u6765\u81ea\u552f\u4e00\u7f51\u7ad9\u7684\u5916\u94fe\uff09\u6570\u91cf\u4e0e\u6392\u540d\u7684\u5173\u8054\u6027\u8981\u9ad8\u4e8e\u5916\u94fe\u603b\u6570\u3002 \u610f\u5373\uff1a\uff08\u5728\u5176\u4ed6\u6761\u4ef6\u4e00\u6837\u7684\u60c5\u51b5\u4e0b\uff09\uff0c\u6765\u81ea 10 \u4e2a\uff08\u4e0d\u540c\uff09\u7f51\u7ad9\u7684 10 \u6761\u94fe\u63a5\u8981\u6bd4\u6765\u81ea 1 \u4e2a\u7f51\u7ad9\u7684 10 \u6761\u94fe\u63a5\u5bf9\u6392\u540d\u7684\u4f5c\u7528\u66f4\u5927\u3002 \u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u5728\u8ba1\u7b97\u5173\u952e\u8bcd\u96be\u5ea6\uff08Keyword Difficulty, KD\uff09\u65f6\uff0c\u4f1a\u4f7f\u7528\u9ad8\u6392\u540d\u7f51\u9875\u6307\u5165\u57df\u540d\u7684\u52a0\u6743\u5747\u503c\u3002 \u5728\u4e0a\u9762\u7684\u622a\u56fe\u4e2d\uff0c\u4f60\u80fd\u770b\u5230 \u201cbacklink checker\u201d \u8fd9\u4e00\u5173\u952e\u8bcd\u7684\u96be\u5ea6\u4e3a 74\uff0c\u8fd9\u4e2a\u6570\u503c\u88ab\u5b9a\u4e49\u6210\u201c\u975e\u5e38\u56f0\u96be\u201d\uff08\u201dSuper hard\u201d\uff09\u3002\u5728\u8fd9\u4e2a\u6570\u503c\u7684\u4e0b\u65b9\uff0c\u6709\u4e00\u6761\u63d0\u793a\u4fe1\u606f\uff1a \u6211\u4eec\u4f30\u8ba1\u4f60\u9700\u8981\u6765\u81ea ~274 \u4e2a\u7f51\u7ad9\u7684\u94fe\u63a5\u624d\u80fd\u53d6\u5f97\u8fd9\u4e2a\u5173\u952e\u8bcd\u524d 10 \u7684\u6392\u540d\u3002 \u8fd9\u6761\u63d0\u793a\u4fe1\u606f\u662f\u7ecf\u8fc7\u6df1\u601d\u719f\u8651\u7684\u3002 \u73b0\u5728\u8ba9\u6211\u6765\u5206\u89e3\u4e00\u4e0b\uff1a \u201c \u6211\u4eec\u4f30\u8ba1\u2026\u2026\u201d\uff08\u201cWe estimate\u2026\u201d\uff09**\uff1a\u8fd9\u610f\u5473\u7740\u6211\u4eec\u5bf9\u63a5\u4e0b\u6765\u7684\u5224\u65ad\u5e76\u65e0 100% \u7684\u628a\u63e1\u3002\u5b83\u53ea\u662f\u4e00\u4e2a\u6709\u6839\u636e\u7684\u731c\u6d4b\u800c\u5df2\u3002 \u201c \u2026\u2026\u4f60\u9700\u8981\u6765\u81ea ~247 \u4e2a\u7f51\u7ad9\u7684\u94fe\u63a5\u201d\uff08\u201c\u2026you\u2019ll need backlinks from ~247 \u4e2a\u7f51\u7ad9\u2026\u201d\uff09**\uff1a\u8fd9\u91cc\u7684\u5173\u952e\u90e8\u5206\u662f\u6570\u5b57\u524d\u7684\u201c~\u201d\u6807\u5fd7\u3002\u5b83\u7684\u610f\u601d\u662f\u201c\u5927\u7ea6\u201d\u3002\u5373\u540e\u9762\u7684\u8fd9\u4e2a\u6570\u5b57\u5e76\u4e0d\u80fd\u89c6\u4f5c\u662f\u7cbe\u786e\u7684\u3002 \u201c \u2026\u2026\u8fd9\u4e2a\u5173\u952e\u8bcd\u524d 10 \u7684\u6392\u540d\u201d\uff08\u201c\u2026 to rank in top 10 for this keyword\u201d\uff09**\uff1a\u6211\u4eec\u4f30\u8ba1\u4f60\u9700\u8981\u8bf4\u670d\u8fd9\u4e48\u591a\u7f51\u7ad9\u4e3a\u4f60\u63d0\u4f9b\u94fe\u63a5\uff0c\u4f60\u624d\u6709\u53ef\u80fd\u83b7\u5f97\u524d 10 \u7684\u540d\u6b21\u3002\u4f46\u662f\u6211\u4eec\u4e0d\u80fd\u4fdd\u8bc1\u4f60\u80fd\u6392\u5230\u9996\u4f4d\u6216\u8005\u524d 5 \u540d\u3002 \u4e3a\u4ec0\u4e48\u6211\u4eec\u8fd9\u91cc\u7684\u7528\u8bcd\u5982\u6b64\u8c28\u614e\u5462\uff1f \u56e0\u4e3a\u6211\u4eec\u77e5\u9053\u5982\u679c\u4f60\u83b7\u5f97\u4e86\u548c\u5f53\u524d\u9ad8\u6392\u540d\u7f51\u9875\u4e00\u6837\u591a\u7684\u5916\u94fe\uff0c\u4f60\u7f51\u9875\u7684\u6392\u540d\u53ef\u80fd\u4f1a\u8dfb\u8eab\u4ed6\u4eec\u4e4b\u4e2d\u3002\u4f46\u5f53\u4f60\u4e00\u65e6\u8fdb\u5165\u7b2c\u4e00\u9875\uff0cGoogle \u5c31\u4f1a\u501f\u52a9\u5176\u4ed6\u7684\u201c\u6392\u540d\u4fe1\u53f7\u201d\u6765\u786e\u5b9a\u4f60\u7f51\u7ad9\u7684\u4f4d\u7f6e\uff08\u770b\u4e0a\u6587\u6211\u4eec\u7684\u201dbacklink checker\u201d\u7740\u9646\u9875\u5c31\u53ef\u4ee5\u77e5\u9053\uff09\u3002 \u521b\u7acb\u4e00\u4e2a\u53ef\u4ee5\u51c6\u786e\u9884\u6d4b\u83b7\u5f97\u9996\u4f4d\u6392\u540d\u7684\u96be\u5ea6\u5f97\u5206\uff08\u7cfb\u7edf\uff09\uff0c\u4e0e\u521b\u5efa\u4e00\u4e2a\u81ea\u5df1\u7684\u641c\u7d22\u5f15\u64ce\u4e00\u6837\u56f0\u96be\u3002 \u6b63\u5982\u6211\u4eec\u7684 CEO \u6700\u8fd1\u5728 Twitter \u5ba3\u5e03\u7684\u4e00\u6837\uff1a Ahrefs is working on general purpose search engine to compete with Google. Sounds crazy, right? But lets talk about two huge problems with Google which they will never want to fix: \u2014 Dmitry Gerasimenko (@botsbreeder) March 27, 2019 \u4f46\u662f\u5728\u6211\u4eec\u771f\u7684\u8fd9\u6837\u505a\uff08\u8fd9\u4e00\u5b9a\u4f1a\u9700\u8981\u4e00\u4e9b\u65f6\u95f4\uff09\u4e4b\u524d\uff0c\u6211\u4eec\u7684\u5173\u952e\u8bcd\u96be\u5ea6\u6307\u6807\u5c06\u7ee7\u7eed\u5b8c\u5168\u57fa\u4e8e\u94fe\u63a5\uff08\u6765\u751f\u6210\uff09\u3002 \u5173\u952e\u8981\u70b9 \u8fc7\u53bb\u51e0\u5e74\u7684\u5927\u91cf\u7814\u7a76\u663e\u793a\uff0c\u5916\u94fe\u5bf9\u6392\u540d\u7684\u5f71\u54cd\u7a0b\u5ea6\u8981\u5927\u4e8e\u5176\u4ed6\u4efb\u4f55\u56e0\u7d20\u3002\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u7684\u5173\u952e\u8bcd\u96be\u5ea6\u5f97\u5206\u53ea\u8003\u8651\u4e86\u6392\u540d\u524d 10 \u7f51\u7ad9\u7684\u5e73\u5747\u5916\u94fe\u6570\u91cf\uff0c\u8fd9\u6837\u7406\u89e3\u8d77\u6765\u4e5f\u975e\u5e38\u5bb9\u6613\u3002 \u4f46\u662f\uff0c\u4f60\u5e94\u8be5\u628a\u8fd9\u4e2a\u6570\u503c\u4f5c\u4e3a\u7814\u7a76\u7684\u7b2c\u4e00\u6b65\uff0c\u56e0\u4e3a\u8bf8\u5982\u641c\u7d22\uff08\u8005\uff09\u52a8\u673a\u548c\u5185\u5bb9\u8d28\u91cf\u4e5f\u4e0e\u6392\u540d\u606f\u606f\u76f8\u5173\u3002 \u7f16\u8005\u6ce8 \u65e2\u7136\u6211\u4eec\u5df2\u7ecf\u5728\u8ba8\u8bba Ahrefs \u7684\u5173\u952e\u8bcd\u96be\u5ea6\u6307\u6807\u4e86\uff0c\u73b0\u5728\u8ba9\u6211\u6765\u7b80\u5355\u56de\u7b54\u4e00\u4e0b\u4e0e\u4e4b\u76f8\u5173\u7684\u6700\u5e38\u89c1\u7684\u95ee\u9898\uff1a \u201c\u6211\u7684\u7f51\u7ad9\u5e94\u8be5\u4ee5\u600e\u6837\u7684\u5173\u952e\u8bcd\u96be\u5ea6\u4e3a\u76ee\u6807\uff1f\u201d Ahrefs \u7684\u5173\u952e\u8bcd\u96be\u5ea6\u6307\u6807\u95f4\u63a5\u53cd\u6620\u4e86\u8be5\u5173\u952e\u8bcd\u6392\u540d\u524d 10 \u7f51\u7ad9\u5916\u94fe\u6570\u91cf\u7684\u5747\u503c\u3002\u7279\u522b\u5730\uff1a KD 0 \u8868\u793a 0 \u4e2a\u6307\u5165\u57df\u540d KD 10 \u8868\u793a ~10 \u4e2a\u6307\u5165\u57df\u540d KD 20 \u8868\u793a ~20 \u4e2a\u6307\u5165\u57df\u540d KD 30 \u8868\u793a ~35 \u4e2a\u6307\u5165\u57df\u540d KD 40 \u8868\u793a ~55 \u4e2a\u6307\u5165\u57df\u540d KD 50 \u8868\u793a ~80 \u4e2a\u6307\u5165\u57df\u540d KD 60 \u8868\u793a ~130 \u4e2a\u6307\u5165\u57df\u540d KD 70 \u8868\u793a ~200 \u4e2a\u6307\u5165\u57df\u540d KD 80 \u8868\u793a ~350 \u4e2a\u6307\u5165\u57df\u540d KD 90 \u8868\u793a ~800 \u4e2a\u6307\u5165\u57df\u540d \u4e8e\u662f\u8fd9\u4e2a\u95ee\u9898\u7684\u7b54\u6848\u53ef\u4ee5\u5f52\u7ed3\u4e3a\uff1a\u4f60\u53ef\u4ee5\u4e3a\u7f51\u7ad9\u83b7\u53d6\u591a\u5c11\u4e2a\u5916\u94fe\u3002\u8981\u5927\u81f4\u4e86\u89e3\u8fd9\u4e00\u70b9\uff0c\u53ea\u9700\u8981\u5c06\u4f60\u7684\u57df\u540d\u7c98\u8d34\u8fdb Ahrefs \u7684 \u7f51\u7ad9\u5206\u6790 \u5de5\u5177\uff0c\u7136\u540e\u8fdb\u5165\u201c\u6309\u5916\u94fe\u6570\u91cf\u6392\u5e8f\u201d\u62a5\u544a\uff1a \u5728\u4e0a\u9762\u7684\u622a\u56fe\u4e2d\uff0c\u4f60\u4f1a\u53d1\u73b0\u6211\u4eec\u535a\u5ba2\u7684\u9996\u9875\u83b7\u5f97\u4e86\u6765\u81ea 957 \u4e2a\u4e0d\u540c\u7f51\u7ad9\uff08\u6307\u5165\u57df\u540d\uff09\u7684\u5916\u94fe\uff0c\u5176\u4e2d\u5916\u94fe\u6570\u91cf\u6700\u591a\u7684\u6587\u7ae0\u83b7\u5f97\u7684\u5916\u94fe\u5728 453 ~ 670 \u4e4b\u95f4\u3002 \u8fd9\u662f\u4e0d\u662f\u5c31\u610f\u5473\u7740\u6211\u4eec\u9009\u5b9a\u7684\u76ee\u6807\u5173\u952e\u8bcd\u7684\u96be\u5ea6\u5e94\u8be5\u4e3a ~90 \u5462\uff1f \u4e5f\u4e0d\u5c3d\u7136\u3002\u90a3 5 \u7bc7\u6587\u7ae0\u662f\u6211\u4eec\u5916\u94fe\u6700\u591a\u7684\u5185\u5bb9\u3002\u6211\u4eec\u5728\u5176\u4e2d\u6295\u5165\u4e86\u591a\u5e74\u7684\u8840\u3001\u6c57\u548c\u6cea\u624d\u83b7\u5f97\u4e86\u5982\u6b64\u591a\u7684\u5916\u94fe\u3002\u5982\u679c\u4f60\u5411\u4e0b\u6eda\u52a8\u62a5\u544a\uff0c\u4f1a\u53d1\u73b0\u6211\u4eec\u5927\u591a\u6570\u6587\u7ae0\u7684\u5916\u94fe\u6570\u91cf\u5c11\u4e8e 100\u3002\u56e0\u6b64\u6211\u4f1a\u8ba4\u4e3a\uff0c\u5bf9\u6211\u4eec\u6765\u8bf4\uff0c\u8f83\u4e3a\u5408\u7406\u7684\u5173\u952e\u8bcd\u96be\u5ea6\u4f1a\u5728 50 \u4ee5\u5185\u3002 \u50cf\u8fd9\u6837\u5206\u6790\u4f60\u7684\u7f51\u7ad9\uff0c\u770b\u770b\u4f60\u7684\u7f51\u9875\u83b7\u5f97\u4e86\u591a\u5c11\u5916\u94fe\u3002 4. \u57df\u540d\u6743\u5a01\u5ea6 \u00b6 \u57df\u540d\u6743\u5a01\u5ea6\u53ef\u80fd\u662f\u6240\u6709\u56e0\u7d20\u4e2d\u6700\u5bcc\u6709\u4e89\u8bae\u7684\u3002 \u867d\u7136\u5927\u90e8\u5206 SEO \u4e13\u4e1a\u4eba\u58eb\u90fd\u8ba4\u4e3a\uff1a\u5bf9\u6bcf\u4e2a\u7f51\u7ad9\u6765\u8bf4\uff0cGoogle \u90fd\u6709\u9488\u5bf9\u5168\u57df\u540d\u7684\u8d28\u91cf\u8bc4\u5206\uff0c\u8be5\u8bc4\u5206\u4f1a\u5f71\u54cd\u57df\u540d\u4e0b\u7684\u6bcf\u4e2a\u9875\u9762\uff0c\u4f46\u662f\u5f53 Google \u7684\u4ee3\u8868\u4eec\u88ab\u95ee\u53ca\u8fd9\u4e2a\u95ee\u9898\u65f6\uff0c\u4ed6\u4eec\u603b\u662f\u80fd\u6210\u529f\u5730\u56de\u907f\uff0c\u800c\u4e0d\u7ed9\u51fa\u76f4\u63a5\u7684\u7b54\u6848\u3002 \u4e0b\u9762\u5c31\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a Google \u7684 John Muller \u5728\u56de\u590d\u6211\u5173\u4e8e\u57df\u540d\u6743\u5a01\u5ea6\u7684\u63a8\u6587\u65f6\uff0c\u8868\u793a\u867d\u7136\u4ed6\u4eec\u867d\u7136\u6ca1\u6709\u91c7\u7528\u8fd9\u4e00\u6307\u6807\u672c\u8eab\uff0c\u4f46\u662f\u4ed6\u4eec\u6709\u65f6\u7684\u786e\u4f1a\u201c\u4ece\u66f4\u5e7f\u6cdb\u7684\u89d2\u5ea6\u770b\u95ee\u9898\u201d\uff08look at things a bit broader\uff09\u3002 We don\u2019t use domain authority. We generally try to have our metrics as granular as possible, sometimes that\u2019s not so easy, in which case we look at things a bit broader (eg, we\u2019ve talked about this in regards to some of the older quality updates). \u2014 \ud83c\udf4c John \ud83c\udf4c (@JohnMu) April 16, 2019 \u00af\\ (\u30c4) /\u00af \u4f46\u662f\u5982\u679c\u4f60\u95ee\u6211 Ahrefs \u5982\u4f55\u770b\u5f85\u57df\u540d\u6743\u5a01\u5ea6\u5bf9\u7f51\u9875\u6392\u540d\u7684\u5f71\u54cd\uff0c\u6211\u4f1a\u544a\u8bc9\u4f60\u4ee5\u4e0b\u4e09\u70b9\uff1a \u6211\u4eec\u8ba4\u4e3a Google \u6709\u65f6 \u4f1a\u5728\u641c\u7d22\u7ed3\u679c\u4e2d\u7ed9\u4e88\u201c\u5f3a\u52bf\u201d\u7f51\u7ad9\u7684\u9875\u9762\u4e00\u5b9a\u7684\u504f\u7231\u3002\u4f46\u662f\u8981\u60f3\u5206\u8fa8\u51fa\u8fd9\u79cd\u8fdb\u6b65\u662f\u6765\u81ea Google \u8425\u9500\u7f51\u7edc\u5185\u7684\u9ad8\u6743\u5a01\u5ea6\u7f51\u7ad9\uff0c\u8fd8\u662f\u6765\u81ea\u5176\u4ed6\u975e\u76f4\u63a5\u901a\u9053\u7684\u63f4\u52a9\uff0c\u8fd9\u51e0\u70b9\u9700\u8981\u8bf4\u6e05\u695a\u3002 \u6211\u4eec\u76f8\u4fe1\u201c\u5f3a\u52bf\u201d \u7f51\u7ad9\u5185\u94fe \u7684\u6709\u6548\u6027\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec\u8ba4\u4e3a\u6709\u7740\u201c\u5f3a\u52bf\u201d\u7f51\u9875\u7684\u7f51\u7ad9\u53ef\u4ee5\u901a\u8fc7\u5185\u94fe\u5411\u5176\u4ed6\u7f51\u9875\u8f93\u9001\u201c\u80fd\u91cf\u201d\uff0c\u4ee5\u5e2e\u52a9\u4ed6\u4eec\u5728 Google \u641c\u7d22\u7ed3\u679c\u9875\u9762\u53d6\u5f97\u66f4\u597d\u7684\u540d\u6b21\u3002 \u6211\u4eec\u76f8\u4fe1\u201c\u5f31\u52bf\u201d\u7f51\u7ad9\u7684\u9875\u9762\u53ef\u4ee5\u901a\u8fc7\u83b7\u5f97\u66f4\u591a\u9ad8\u8d28\u91cf\u7684\u5916\u94fe\u6765\u8d85\u8fc7\u201c\u5f3a\u52bf\u201d\u7f51\u7ad9\u7684\u6392\u540d\u3002 \u5728 Ahrefs\uff0c\u6211\u4eec\u6709\u7740\u81ea\u5df1\u7684\u201c\u57df\u540d\u6743\u5a01\u5ea6\u201d\u6307\u6807\uff0c\u53eb\u505a\u57df\u540d\u8bc4\u5206\uff08Domain Rating, DR\uff09\uff0c\u5f53\u5b83\u662f\u5b8c\u5168\u57fa\u4e8e\u94fe\u63a5\u7684\u3002 Google \u5728\u8861\u91cf\u201c\u57df\u540d\u6743\u5a01\u5ea6\u201d\u65f6\u5f88\u53ef\u80fd\u8003\u8651\u4e86\u94fe\u63a5\u4ee5\u5916\u7684\u56e0\u7d20\u3002 \u8bf4\u5230\u94fe\u63a5\u56e0\u7d20\u2026\u2026 \u51e0\u5e74\u4ee5\u524d\uff0c\u6211\u4eec\u5f00\u5c55\u4e86\u4e00\u9879\u76f8\u5173\u6027\u7814\u7a76\uff0c\u5206\u522b\u8003\u5bdf\u4e86\u7f51\u9875\u7ea7\u522b\u7684\u5916\u94fe\u56e0\u7d20\u548c\u57df\u540d\u7ea7\u522b\u7684\u5916\u94fe\u56e0\u7d20\uff1a \u7ed3\u8bba\uff1a\u7f51\u9875\u7ea7\u522b\u7684\u56e0\u7d20\u5bf9\u6392\u540d\u7684\u5f71\u54cd\u8981\u8fdc\u8fdc\u5927\u4e8e\u57df\u540d\u7ea7\u522b\u7684\u56e0\u7d20\u3002 \u8fd9\u4e5f\u8bc1\u5b9e\u4e86\u4e0a\u6587 John Mueller \u5728\u63a8\u6587\u4e2d\u7684\u9648\u8ff0\uff1aGoogle \u8bd5\u56fe\u5c3d\u53ef\u80fd\u5730\u7ec6\u5316\u6240\u91c7\u7528\u7684\u6307\u6807\u3002 \u5173\u952e\u8981\u70b9 \u6709\u7740\u201c\u9ad8\u6743\u5a01\u5ea6\u201d\u7684\u7f51\u7ad9\u5df2\u7ecf\u88ab\u4eba\u4eec\u719f\u77e5\u5e76\u4fe1\u4efb\uff0c\u4e5f\u81ea\u7136\u4f1a\u53bb\u70b9\u51fb\u3002 \u4f8b\u5982\uff0c\u5728\u4f60\u641c\u7d22\u65b0\u95fb\u7684\u65f6\u5019\uff0c\u4f60\u5f88\u53ef\u80fd\u4f1a\u53bb\u70b9\u51fb BBC \u6216 CNN\u2014\u2014\u800c\u4e0d\u662f\u4e00\u4e2a\u968f\u673a\u535a\u4e3b\u2014\u2014\u7684\u94fe\u63a5\u3002\u5728\u4f60\u641c\u7d22 SEO \u7684\u65f6\u5019\uff0c\u5f88\u53ef\u80fd\u4f1a\u53bb\u70b9\u51fb\u6765\u81ea Ahrefs, Moz, SEJ \u7b49\u7f51\u7ad9\u7684\u94fe\u63a5\u3002\u5f88\u660e\u663e Google \u7b97\u6cd5\u4f1a\u5411\u4eba\u4eec\u66f4\u6709\u53ef\u80fd\u70b9\u51fb\u7684\u7ed3\u679c\u503e\u659c\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u4f60\u7684\u7ec6\u5206\u9886\u57df\u7684\u641c\u7d22\u5f15\u64ce\u7ed3\u679c\u9875\u9762\u6709\u5f88\u591a\u201c\u5927\u4f6c\u201d\uff08big names\uff09\uff0c\u8981\u8dfb\u8eab\u5176\u4e2d\u5c06\u4f1a\u975e\u5e38\u56f0\u96be\uff0c\u4f46\u8fd9\u5e76\u975e\u5b8c\u5168\u4e0d\u53ef\u80fd\u3002\u6211\u4eec\u7684\u6570\u636e\u663e\u793a\uff1a\u201c\u5f31\u52bf\u201d\u57df\u540d\u4e2d\u201c\u5f3a\u52bf\u201d\u9875\u9762\uff08\u5373\u62e5\u6709\u8bb8\u591a\u9ad8\u8d28\u91cf\u5916\u94fe\u7684\u5185\u9875\uff09\u7684\u6392\u540d\u53ef\u4ee5\u8d85\u8fc7\u9ad8\u6743\u5a01\u5ea6\u57df\u540d\u4e2d\u7684\u7f51\u9875\uff0c\u9664\u975e\u641c\u7d22\u8005\u5728\u770b\u5230\u81ea\u5df1\u719f\u6089\u7684\u54c1\u724c\u65f6\uff0c\u5b8c\u5168\u6ca1\u6709\u70b9\u51fb\u4f60\u7684\u9875\u9762\u7684\u52a8\u673a\u3002 \u00b6 \u4e0d\u8981\u56de\u907f\u9ad8\u96be\u5ea6\u7684\u5173\u952e\u8bcd \u5927\u591a\u5173\u4e8e \u5173\u952e\u8bcd\u8c03\u7814 \u7684\u6587\u7ae0\u90fd\u4f1a\u544a\u8bc9\u4f60\u8981\u907f\u5f00\u9ad8\u96be\u5ea6\u7684\u5173\u952e\u8bcd\u800c\u9009\u62e9\u90a3\u4e9b\u641c\u7d22\u91cf\u8f83\u5927\u4e14\u6392\u540d\u96be\u5ea6\u8f83\u4f4e\u7684\u5173\u952e\u8bcd\u3002 \u8fd9\u5f88\u6709\u9053\u7406\u3002\u4f46\u73b0\u5b9e\u60c5\u51b5\u662f\uff0c\u8fd9\u6837\u7684\u5173\u952e\u8bcd\u5728\u4efb\u4f55\u7ec6\u5206\u9886\u57df\u91cc\u5c11\u4e4b\u53c8\u5c11\u3002\u56e0\u6b64\uff0c\u5f53\u4f60\u65e0\u6cd5\u627e\u51fa\u4ed6\u4eec\u65f6\uff0c\u5f88\u53ef\u80fd\u89c9\u5f97\u5173\u952e\u8bcd\u8c03\u7814\u5bf9\u4f60\u6765\u8bf4\u6ca1\u6709\u4efb\u4f55\u7528\u5904\u3002 \u8fd9\u79cd\u6001\u5ea6\u662f\u9519\u8bef\u7684\u3002 \u5173\u952e\u8bcd\u96be\u5ea6\u5e76\u4e0d\u662f\u8981\u963b\u6b62\u4f60\u4e89\u53d6\u67d0\u4e00\u5173\u952e\u8bcd\u7684\u9ad8\u6392\u540d\uff0c\u5b83\u7684\u76ee\u7684\u662f\u5e2e\u52a9\u4f60\u4f30\u7b97\u83b7\u5f97\u9ad8\u6392\u540d\u6240\u9700\u8981\u7684\u8d44\u6e90\u3002 \u5982\u679c\u83b7\u5f97\u67d0\u4e00\u5173\u952e\u8bcd\u7684\u6392\u540d\u5bf9\u4f60\u7684\u4e1a\u52a1\u6765\u8bf4\u81f3\u5173\u91cd\u8981\uff0c\u90a3\u4e48\u4e0d\u7ba1\u4ed8\u51fa\u4ec0\u4e48\u4ee3\u4ef7\uff0c\u4f60\u90fd\u5e94\u8be5\u5c3d\u529b\u4e89\u53d6\u3002 \u4e94\u5e74\u524d\uff0c\u5f53\u6211\u627f\u63a5 Ahrefs \u535a\u5ba2\u7684\u65f6\u5019\uff0c\u6211\u5e76\u6ca1\u6709\u53d1\u73b0\u8bb8\u591a\u53ef\u80fd\u201c\u7b80\u7b80\u5355\u5355\u201d\u5c31\u505a\u5230\u9ad8\u6392\u540d\u7684\u5173\u952e\u8bcd\u3002\u90a3\u4e9b\u6700\u597d\u7684\u5173\u952e\u8bcd\u5df2\u7ecf\u88ab\u6211\u4eec\u8fd9\u4e2a\u884c\u4e1a\u7684\u5927\u4f6c\u9738\u5360\u4e86\u3002 \u4f46\u662f\u6211\u4eec\u6765\u770b\u770b\u8fc7\u53bb\u4e94\u5e74\u95f4\u6211\u4eec\u7684\u641c\u7d22\u6d41\u91cf\u7684\u53d8\u5316\uff1a \u6211\u4eec\u5e76\u6ca1\u6709\u6311\u9009\u90a3\u4e9b\u4f4e\u96be\u5ea6\u7684\u5173\u952e\u8bcd\uff0c\u800c\u662f\u505a\u4e86\u76f8\u53cd\u7684\u4e8b\u60c5\uff0c\u6211\u4eec\u4ece\u4e00\u5f00\u59cb\u5c31\u548c\u4e1a\u754c\u5927\u4f6c\u4eec\u5c55\u5f00\u4e86\u9ad8\u7ade\u4e89\u5ea6\u5173\u952e\u8bcd\u7684\u4e89\u593a\u3002 \u8fd9\u4e9b\u6392\u540d\u662f\u4e0d\u662f\u7eb7\u81f3\u6c93\u6765\u5462\uff1f\u5b8c\u5168\u4e0d\u662f\u3002\u65e0\u8bba\u5982\u4f55\u6211\u4eec\u90fd\u4e0d\u662f\u4e00\u591c\u6210\u540d\uff0c\u90a3\u4e5f\u4ece\u6765\u4e0d\u662f\u6211\u4eec\u7684\u76ee\u6807\u3002 \u6211\u4eec\u7684\u76ee\u6807\u662f\u521b\u7acb SEO \u884c\u4e1a\u6700\u597d\u7684\u535a\u5ba2 \uff0c\u6211\u4eec\u77e5\u9053\u8fd9\u9700\u8981\u4ed8\u51fa\u65f6\u95f4\u3002 \u5728 SEO \u9886\u57df\uff0c\u77ed\u7ebf\u601d\u7ef4\u662f\u957f\u671f\u6392\u540d\u7684\u6700\u5927\u654c\u4eba\u3002 \u2026\u2026\u56e0\u6b64\uff0c\u4e0d\u8981\u56de\u907f\u90a3\u4e9b\u4f3c\u4e4e\u5f88\u96be\u7ade\u4e89\u7684\u5173\u952e\u8bcd\uff0c\u5b83\u4eec\u662f\u4f60\u4e1a\u52a1\u589e\u957f\u7684\u6f5c\u5728\u52a9\u63a8\u5668\u3002\ud83d\ude42 \u51e1\u672c\u7f51\u6ce8\u660e\"\u6765\u6e90\uff1aXXX \"\u7684\u6587/\u56fe/\u89c6\u9891\u7b49\u7a3f\u4ef6\uff0c\u672c\u7f51\u8f6c\u8f7d\u51fa\u4e8e\u4f20\u9012\u66f4\u591a\u4fe1\u606f\u4e4b\u76ee\u7684\uff0c\u5e76\u4e0d\u610f\u5473\u7740\u8d5e\u540c\u5176\u89c2\u70b9\u6216\u8bc1\u5b9e\u5176\u5185\u5bb9\u7684\u771f\u5b9e\u6027\u3002\u5982\u6d89\u53ca\u4f5c\u54c1\u5185\u5bb9\u3001\u7248\u6743\u548c\u5176\u5b83\u95ee\u9898\uff0c\u8bf7\u4e0e\u672c\u7f51\u8054\u7cfb\uff0c\u6211\u4eec\u5c06\u5728\u7b2c\u4e00\u65f6\u95f4\u5220\u9664\u5185\u5bb9\uff01 \u4f5c\u8005: Tim Soulo \u6765\u6e90\uff1a https://ahrefs.com/blog/zh/keyword-difficulty/","title":"\u5173\u952e\u8bcd\u96be\u5ea6\uff1a\u5982\u4f55\u786e\u8ba4\u4f60\u5728 Google \u83b7\u5f97\u6392\u540d\u7684\u673a\u4f1a"},{"location":"pages/affiliate/keyword-difficulty/#\u5173\u952e\u8bcd\u96be\u5ea6\u5982\u4f55\u786e\u8ba4\u4f60\u5728-Google-\u83b7\u5f97\u6392\u540d\u7684\u673a\u4f1a","text":"\u627e\u5230\u90a3\u4e9b\u6392\u540d\u6709\u610f\u4e49\u7684\u5173\u952e\u8bcd\u5e76\u4e0d\u96be\uff0c\u96be\u7684\u662f\u9700\u8981\u4e86\u89e3\u53d6\u5f97\u8fd9\u4e9b\u6392\u540d\u7684\u4ee3\u4ef7\uff08\u5373\uff1a\u5173\u952e\u8bcd\u96be\u5ea6\uff08keyword difficulty\uff09\uff0c\u63a5\u7740\u5236\u5b9a\u76f8\u5e94\u7684 SEO\u7b56\u7565\uff0c\u5e76\u5206\u51fa\u4f18\u5148\u7ea7\u3002 \u6ca1\u6709\u4eba\u77e5\u9053 Google \u7a76\u7adf\u4f7f\u7528\u4e86\u54ea\u4e2a\u5177\u4f53\u7684\u516c\u5f0f\u6765\u4e3a\u7f51\u7ad9\u6392\u540d\u3002\u5373\u4f7f\u6709\u4eba\u77e5\u9053\uff0c\u4e5f\u65e0\u6cd5\u6539\u53d8\u6709\u4e9b\u5173\u952e\u8bcd\u7684\u6392\u540d\u96be\u5ea6\u9ad8\u4e8e\u5176\u4ed6\u5173\u952e\u8bcd\u7684\u4e8b\u5b9e\u3002\u8fd9\u4f7f\u5f97\u201c\u5173\u952e\u8bcd\u96be\u5ea6\u201d\u8fd9\u4e00\u6982\u5ff5\u6210\u4e3a SEO \u9886\u57df\u7684\u6838\u5fc3\u6311\u6218\u4e4b\u4e00\u3002 \u73b0\u5728\uff0c\u4e00\u4e9b\u8bfb\u8005\u5df2\u7ecf\u77e5\u9053\u4e86\u6211\u4eec\uff08Ahrefs\uff09\u6709\u4e00\u9879\u540d\u4e3a\u201c \u5173\u952e\u8bcd\u96be\u5ea6 \u201d\uff08Keyword Difficulty\uff09\u7684\u6307\u6807\uff0c\u6210\u5343\u4e0a\u4e07\u7684 SEO \u4ece\u4e1a\u8005\u5728\u5f00\u5c55\u5173\u952e\u8bcd\u8c03\u7814\u7684\u65f6\u5019\u90fd\u4f1a\u4f9d\u8d56\u8fd9\u9879\u6307\u6807\u3002 \u4f46\u540c\u65f6\uff0c\u6211\u4eec\u53d1\u73b0\u8bb8\u591a\u7528\u6237\u5bf9\u8fd9\u9879\u6307\u6807\u7684\u671f\u5f85\u592a\u5927\u4e86\u2026\u2026 \u56e0\u6b64\uff0c\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u4f1a\u89e3\u91ca\u5173\u952e\u8bcd\u96be\u5ea6\u7684\u4e00\u822c\u6982\u5ff5\uff08\u5373\uff1a\u5f53\u7ecf\u9a8c\u8001\u9053\u7684 SEO \u4e13\u4e1a\u4eba\u58eb\u5728\u4f30\u8ba1\u76ee\u6807\u5173\u952e\u8bcd\u5728 Google \u4e2d\u7684\u6392\u540d\u673a\u4f1a\u65f6\uff0c\u4f1a\u7279\u522b\u6ce8\u610f\u54ea\u4e9b\u4fe1\u53f7\uff09\uff0c\u4ee5\u53ca Ahrefs \u7684\u201c\u5173\u952e\u8bcd\u96be\u5ea6\u201d\u6307\u6807\u80fd\u63d0\u4f9b\u54ea\u4e9b\u5e2e\u52a9\u3002 \u91cd\u8981 \u4e0d\u8981\u628a\u201c\u5173\u952e\u8bcd\u96be\u5ea6\u201d\u548c Google \u5173\u952e\u8bcd\u89c4\u5212\u5e08 \u91cc\u7684\u201c \u5173\u952e\u8bcd\u7ade\u4e89 \u201d\uff08\u89c1\u4ee5\u4e0b\u622a\u56fe\uff09\u6df7\u6dc6\u4e86\u3002\u5173\u952e\u8bcd\u7ade\u4e89\u5c55\u793a\u4e86\u4e3a\u67d0\u4e00\u7279\u5b9a\u5173\u952e\u8bcd\u5e7f\u544a\u51fa\u4ef7\u7684\u5e7f\u544a\u4e3b\u6570\u91cf\u3002\u800c\u201c\u5173\u952e\u8bcd\u96be\u5ea6\u201d\u663e\u793a\u4e86\u53d6\u5f97\u8be5\u5173\u952e\u8bcd\u5728\u81ea\u7136\u641c\u7d22\u7ed3\u679c\u4e2d\u7684\u6392\u540d\u7684\u96be\u5ea6\u3002","title":"\u5173\u952e\u8bcd\u96be\u5ea6\uff1a\u5982\u4f55\u786e\u8ba4\u4f60\u5728 Google \u83b7\u5f97\u6392\u540d\u7684\u673a\u4f1a"},{"location":"pages/affiliate/keyword-difficulty/#\u5982\u4f55\u786e\u8ba4\u67d0\u4e2a\u5173\u952e\u8bcd\u7684\u6392\u540d\u96be\u5ea6","text":"\u5927\u591a\u6570\u4e13\u4e1a\u4eba\u58eb\u901a\u8fc7\u5206\u6790\u5df2\u7ecf\u4e4b\u4e8e\u8be5\u5173\u952e\u8bcd\u53d6\u5f97\u6392\u540d\u7684\u7f51\u7ad9\u7684\u5df2\u77e5\u56e0\u7d20\uff0c\u6765\u627e\u51fa\u5b83\u4eec\u4e0e\u6392\u540d\u7684\u5173\u8054\u3002 \u8fd9\u4e9b\u56e0\u7d20\u5f52\u6839\u7ed3\u5e95\u65e0\u5916\u4e4e\u4ee5\u4e0b\u56db\u7c7b\uff1a \u7f51\u9875\u7684\u5185\u5bb9 \u641c\u7d22\u610f\u56fe \u6765\u81ea\u5176\u4ed6\u7f51\u7ad9\u7684\u94fe\u63a5 \u57df\u540d/ \u7f51\u7ad9\u7684\u6743\u5a01\u5ea6 \u6211\u5c06\u5728\u4e0b\u9762\u7684\u7ae0\u8282\u4e2d\u4e00\u4e00\u5c55\u5f00\u89e3\u6790\u8fd9\u4e9b\u5f71\u54cd\u56e0\u7d20\u3002\u4f46\u5728\u90a3\u4e4b\u524d\uff0c\u4f60\u9700\u8981\u8003\u8651\u4e00\u4e9b\u4e8b\u60c5\u3002 \u5728 SEO \u9886\u57df\u5b58\u5728\u7740\u51e0\u79cd\u4e0d\u540c\u7684\u601d\u60f3\u6d41\u6d3e\uff0c\u8fd9\u610f\u5473\u7740\u4e00\u4e9b SEO \u7684\u4e13\u4e1a\u4eba\u58eb\u4f1a\u5bf9\u4ee5\u4e0b\u7684\u9648\u8ff0\u548c\u60f3\u6cd5\u6301\u4e0d\u540c\u89c2\u70b9\u3002\u5bf9\u6b64\u6211\u5b8c\u5168\u80fd\u591f\u7406\u89e3\uff0c\u5e76\u4e14\uff0c\u6211\u9f13\u52b1\u4f60\u8ba4\u771f\u5730\u68c0\u67e5\u4f60\u53ef\u80fd\u4f1a\u78b0\u5230\u7684\u4e92\u65a5\u89c2\u70b9\u3002\u53ef\u80fd\u7684\u60c5\u51b5\u662f\u5176\u4e2d\u4e00\u4e2a\u6d41\u6d3e\u7684\u89c2\u70b9\u66f4\u80fd\u4e0e\u4f60\u4ea7\u751f\u5171\u9e23\u3002 \u73b0\u5728\uff0c\u6211\u4eec\u6765\u4ed4\u7ec6\u770b\u4e00\u4e0b\u524d\u9762\u63d0\u5230\u7684\u5f71\u54cd\u56e0\u7d20\u3002","title":"\u5982\u4f55\u786e\u8ba4\u67d0\u4e2a\u5173\u952e\u8bcd\u7684\u6392\u540d\u96be\u5ea6"},{"location":"pages/affiliate/keyword-difficulty/#1-\u7f51\u9875\u7684\u5185\u5bb9","text":"Google \u4e0d\u4f1a\u4e3a\u65e0\u5173\u9875\u9762\u63d0\u4f9b\u6392\u540d\u3002\u90a3\u4e48\u5982\u4f55\u8ba9\u4f60\u7684\u7f51\u9875\u4e0e\u76ee\u6807\u5173\u952e\u8bcd\u76f8\u5173\u5462\uff1f \u6211\u5176\u5b9e\u6709\u4e00\u4e2a\u66f4\u597d\u7684\u95ee\u9898\uff1a \u5982\u4f55\u8ba9\u4f60\u7684\u7f51\u9875\u4e0e\u76ee\u6807\u5173\u952e\u8bcd\u65e0\u5173\u3002 \u4f8b\u8bc1\uff1a\u4e3a\u4e86\u53d6\u5f97\u201c 301 \u91cd\u5b9a\u5411 \u201d\uff08301 redirects\uff09\u8fd9\u4e2a\u5173\u952e\u8bcd\u7684\u6392\u540d\uff0c\u6211\u4eec\u6700\u8fd1\u53d1\u5e03\u4e86\u4e00\u7bc7\u5173\u4e8e 301 \u91cd\u5b9a\u5411\u7684\u6587\u7ae0\u3002\u56e0\u4e3a\u8fd9\u7bc7\u6587\u7ae0\u4e0e\u76ee\u6807\u5173\u952e\u8bcd\u7684\u8054\u7cfb\u975e\u5e38\u7d27\u5bc6\uff0c\u6839\u672c\u6ca1\u6709\u529e\u6cd5\u5728\u5199\u4f5c\u8fd9\u7bc7\u6587\u7ae0\u7684\u540c\u65f6\u8ba9\u5b83\u4e0e\u76ee\u6807\u5173\u952e\u8bcd\u65e0\u5173\u3002 \u660e\u767d\u6211\u7684\u610f\u601d\u4e86\u5417\uff1f \u5982\u679c\u4f60\u5728\u5199\u4e00\u7bc7\u6587\u7ae0\uff0c\u5e76\u4ee5\u67d0\u4e2a\u7279\u5b9a\u7684\u5173\u952e\u8bcd\u4e3a\u76ee\u6807\uff0c\u5b83\u5c06\u4e0d\u53ef\u907f\u514d\u5730\u4e0e\u8fd9\u4e2a\u5173\u952e\u8bcd\u76f8\u5173\u3002 \u53ef\u662f\uff0c\u5927\u591a\u6570 \u7ad9\u5185 SEO \u4f18\u5316\u5efa\u8bae\u90fd\u5305\u62ec\u8981\u5728\u9875\u9762\u7684\u4ee5\u4e0b\u5143\u7d20\u4e2d\u63d0\u53ca\u4f60\u7684\u76ee\u6807\u5173\u952e\u8bcd\u4ee5\u63d0\u9ad8\u5176\u5728 Google \u773c\u4e2d\u7684\u76f8\u5173\u5ea6\uff1a \u6807\u9898\u6807\u7b7e \uff08Title tag\uff09 \u7f51\u5740\u94fe\u63a5\uff08URL\uff09 \uff08\u4e00\u7ea7\uff09\u6807\u9898\uff08H1\uff09 \u524d\u90e8\u5185\u5bb9\uff08Early in content\uff09 \u4f46\u8fd9\u4e9b\u96be\u9053\u4e0d\u662f\u5df2\u77e5\u6761\u4ef6\u5417\uff1f\u96be\u9053\u4f60\u4e0d\u662f\u65e0\u8bba\u5982\u4f55\u90fd\u4f1a\u53bb\u505a\u8fd9\u4e9b\u64cd\u4f5c\u7684\u5417\uff1f \u4f8b\u5982\uff0c\u73b0\u5728\u5173\u4e8e\u201c\u5173\u952e\u8bcd\u96be\u5ea6\u201d\u8fd9\u4e2a\u8bdd\u9898\uff0c\u6211\u5df2\u7ecf\u5199\u4e86 500 \u5b57\u4e86\uff0c\u5c3d\u7ba1\u6211\u6ca1\u6709\u523b\u610f\u53bb\u505a\uff0c\u4f46\u662f\u6211\u5df2\u7ecf\u63d0\u53ca\u8fd9\u4e2a\u5173\u952e\u8bcd\u597d\u591a\u6b21\u4e86\u3002\u8fd9\u4e9b\u90fd\u662f\u81ea\u7136\u800c\u7136\u53d1\u751f\u7684\u554a\u3002 \u591a\u5e74\u4ee5\u524d\uff0c\u4e8b\u60c5\u662f\u4e0d\u4e00\u6837\u7684\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u6280\u5de7\u6765\u611a\u5f04 Google\u3002\u5982\u679c\u4f60\u60f3\u8981\u8d85\u8fc7\u7ade\u4e89\u5bf9\u624b\uff0c\u90a3\u4e48\u66f4\u9891\u7e41\u5730\u63d0\u53ca\u76ee\u6807\u5173\u952e\u8bcd\uff0c\u7528\u5173\u952e\u8bcd\u53d8\u4f53\u5145\u65a5\u6807\u9898\u6807\u7b7e\u662f\u53ef\u4ee5\u594f\u6548\u7684\u3002 \u8fd9\u6837\u7684\u5b9e\u8df5\u5982\u4eca\u5df2\u7ecf\u4e00\u53bb\u4e0d\u590d\u8fd4\u4e86\u3002\u73b0\u5728\u7684 Google \u5df2\u7ecf\u77e5\u9053\u5982\u4f55\u50cf\u4e0b\u9762\u8fd9\u6837\u800d\u82b1\u62db\u4e86\uff1a \u8fd9\u91cc\u7684\u4f8b\u5b50\u4e2d\uff0c\u201cguest writing\u201d \u8fd9\u4e2a\u5173\u952e\u8bcd\u5728\u5176\u6392\u540d\u7b2c\u4e00\u7ed3\u679c\u7684\u6807\u9898\u6807\u7b7e\u4e2d\u6ca1\u6709\u51fa\u73b0\u3002 \u7b49\u4e00\u4e0b\u2026\u2026 \u6574\u7bc7\u5185\u5bb9\u90fd\u6ca1\u6709\u63d0\u5230\u8fc7\u4e00\u6b21\u201cguest writing\u201d\u8fd9\u4e2a\u5173\u952e\u8bcd\u2026\u2026 \u663e\u7136\uff0cGoogle \u5df2\u7ecf\u806a\u660e\u5230\u53ef\u4ee5\u7406\u89e3\u540c\u4e49\u8bcd\u5e76\u4e14\u660e\u767d\u201dguest writing\u201d\u548c\u201cguest blogging\u201d\u5176\u5b9e\u8bf4\u7684\u662f\u4e00\u56de\u4e8b\u3002 \u4e8e\u662f\uff0c\u5982\u679c\u4f60\u89c9\u5f97\u9ad8\u6392\u540d\u7f51\u9875\u6807\u9898\u6807\u7b7e\u4e2d\u76ee\u6807\u5173\u952e\u8bcd\u7684\u7f3a\u5931\u610f\u5473\u7740\u8fd9\u4e2a\u5173\u952e\u8bcd\u7ade\u4e89\u4e0d\u6fc0\u70c8\uff0c\u90a3\u4f60\u5c31\u9519\u4e86\u3002 \u5728\u5206\u6790\u4e00\u4e2a\u5173\u952e\u8bcd\u7684\u65f6\u5019\uff0c\u4f60\u4e0d\u5e94\u8be5\u5c06\u6ce8\u610f\u529b\u653e\u5728\u8fd9\u4e2a\u5173\u952e\u8bcd\u5728\u76ee\u6807\u7f51\u7ad9\u7684\u6392\u5217\u5bc6\u5ea6\uff0c\u800c\u5e94\u8be5\u6df1\u6316\u4e00\u4e0b\uff0c\u770b\u770b\u8fd9\u4e9b\u5185\u5bb9\u662f\u51fa\u81ea\u5bf9\u76f8\u5173\u8bdd\u9898\u6709\u76f8\u5173\u80cc\u666f\u77e5\u8bc6\u4e14\u7406\u89e3\u826f\u597d\u7684\u4e13\u4e1a\u4eba\u58eb\u4e4b\u624b\uff0c\u8fd8\u662f\u4e00\u4e2a\u65f6\u85aa 3 \u7f8e\u91d1\u7684\u81ea\u7531\u804c\u4e1a\u5199\u624b\u62fc\u51d1\u8d77\u6765\u7684\u3002 \u4f60\u7684\u7ade\u4e89\u4f18\u52bf\u6765\u81ea\u4f60\u5185\u5bb9\u7684\u8d28\u91cf\u4ee5\u53ca\u5b83\u53ef\u4ee5\u4e3a\u8bfb\u8005\u521b\u9020\u7684\u4ef7\u503c\uff0c\u800c\u4e0d\u662f\u201c\u6709\u7b56\u7565\u7684\u5173\u952e\u8bcd\u5e03\u5c40\u201d\uff08strategic keyword placements\uff09\u3002 Tim\uff0c\u4f60\u7684\u610f\u601d\u662f\u4e0d\u662f Google \u5df2\u7ecf\u806a\u660e\u5230\u53ef\u4ee5\u901a\u8fc7\u9605\u8bfb\u7f51\u9875\u7684\u5185\u5bb9\u6765\u5206\u8fa8\u5b83\u662f\u4e00\u4e2a\u4e1a\u5185\u4eba\u58eb\u8fd8\u662f\u4e00\u4e2a\u968f\u673a\u7684\u5199\u624b\u5b8c\u6210\u4e86\u7684? \u4e0d\uff0c\u6211\u5f88\u786e\u5b9a Google \u8fd8\u4e0d\u80fd\u505a\u5230\u8fd9\u70b9\u3002\u5426\u5219\uff0cGoogle \u7684\u7b97\u6cd5\u4e5f\u4e0d\u4f1a\u8ba9\u4e00\u4e2a\u201c \u4e71\u6570\u5047\u6587\u201d\uff08lorem ipsum\uff09\u7f51\u7ad9\u7684\u6392\u540d\u8d85\u8fc7\u771f\u5b9e\u7684\u7f51\u7ad9 \u4e86\u3002 \u4f46\u662f\u6211\u76f8\u4fe1 Google \u7684\u7b97\u6cd5\u5df2\u7ecf\u878d\u5408\u4e86\u8db3\u591f\u7684\u56e0\u7d20\u6765\u201c \u5224\u5b9a\u201d\uff08guesstimate\uff09 \u7ed9\u5b9a\u5185\u5bb9\u7684\u6df1\u5ea6\u3001\u6743\u5a01\u5ea6\u548c\u53ef\u4fe1\u5ea6\u4e86\u3002","title":"1. \u7f51\u9875\u7684\u5185\u5bb9"},{"location":"pages/affiliate/keyword-difficulty/#\u90a3\u4e48\u8bed\u4e49\u76f8\u5173LSI\u548c\u8bcd\u9891-\u9006\u6587\u672c\u9891\u7387TF-IDF\u8fd9\u4e9b\u56e0\u7d20\u5462","text":"\u8fd9\u65f6\uff0c\u53ef\u80fd\u4f1a\u6709\u8bfb\u8005\u60f3\u77e5\u9053\u8fd9\u4eec\u600e\u4e48\u770b\u5f85\u90a3\u4e9b\u5ba3\u79f0\u53ef\u4ee5\u901a\u8fc7\u5411\u5185\u5bb9\u4e2d\u6dfb\u52a0\u9002\u91cf\u201c\u6b63\u786e\u201d\u7684\u5173\u952e\u8bcd\u6765\u5e2e\u4f60\u53d6\u5f97\u9ad8\u6392\u540d\u7684\u5de5\u5177\u3002 \u8fd9\u7c7b\u5de5\u5177\u4e00\u822c\u4f1a\u5ba3\u79f0\u4f7f\u7528\u4e86\u542c\u8d77\u6765\u5f88\u667a\u80fd\u7684\u6280\u672f\u2014\u2014\u5982\uff1a \u8bed\u4e49\u76f8\u5173\uff08LSI\uff09 \u548c \u9006\u6587\u672c\u9891\u7387\uff08TD-IDF\uff09 \u2014\u2014\u6765\u5e2e\u52a9\u4f60\u5b9e\u73b0\u63d0\u9ad8\u5173\u952e\u8bcd\u6392\u540d\u7684\u76ee\u6807\u3002 \u4f46\u662f\u5b9e\u9645\u60c5\u51b5\u662f\uff1a \u51e0\u4e4e\u53ef\u4ee5 \u786e\u8ba4 \u7684\u662f\uff0cGoogle \uff08\u4e3a RankBrain\uff09\u4f7f\u7528\u4e86\u5173\u952e\u8bcd\u77e2\u91cf\u6280\u672f\u548c\u65b9\u6cd5\uff0c\u4f46\u662f \u6ca1\u6709\u4efb\u4f55\u8bc1\u636e\u663e\u793a\u5b83\u4eec\u4f7f\u7528\u4e86\u8bed\u4e49\u76f8\u5173\u6280\u672f \u3002\u5b9e\u9645\u4e0a\uff0c\u5c31 LSI \u7684\u5de5\u4f5c\u539f\u7406\u800c\u8a00\uff0c\u6240\u6709\u7684\u8bc1\u636e\u90fd\u6307\u5411\u4e86\u76f8\u53cd\u7684\u65b9\u5411\u3002\u56e0\u6b64\u5b9e\u5728\u662f\u6ca1\u6709\u5fc5\u8981\u4f7f\u7528\u90a3\u4e9b LSI \u5173\u952e\u8bcd\u751f\u6210\u5668\u6765\u751f\u6210\u5173\u952e\u8bcd\u5e76\u63d2\u5165\u4f60\u7684\u5185\u5bb9\u3002 \u81f3\u4e8e\u8bcd\u9891\u2014\u9006\u6587\u672c\u9891\u7387\uff0cGoogle \u4f7f\u7528\u8fd9\u4e9b\u6280\u672f\u7684\u53ef\u80fd\u6027\u5012\u662f\u66f4\u5927\u4e00\u4e9b\uff0c\u4f46\u662f\u6211\u4eec\u7684\u89c2\u70b9\u4e0d\u4f1a\u6539\u53d8\u2026\u2026 \u5728 Ahrefs\uff0c\u6211\u4eec\u4e0d\u5efa\u8bae\u7528\u6237\u6c89\u8ff7\u4e8e\u8fd9\u4e9b\u542c\u8d77\u6765\u5f88\u9177\u70ab\u7684\u6982\u5ff5\u3002\u6211\u4eec\u89c9\u5f97\u521b\u4f5c\u4f18\u8d28\u7684\u5185\u5bb9\u548c\u826f\u597d\u7684\u7528\u6237\u4f53\u9a8c\u6bd4\u5176\u4ed6\u4efb\u4f55\u4e8b\u60c5\u90fd\u91cd\u8981\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u4e0d\u89c9\u5f97\u6709\u529e\u6cd5\u6765\u91cf\u5316\u4f60\u5185\u5bb9\u7684\u201c\u76f8\u5173\u6027\u5f97\u5206\u201d\uff0c\u5e76\u4e14\u901a\u8fc7\u6539\u5584\u8fd9\u4e00\u5f97\u5206\u6765\u63d0\u9ad8\u6392\u540d\uff0c\u5c24\u5176\u662f\u5728\u8003\u8651\u5230\u5728\u4e0b\u4e00\u7ae0\u8282\u6211\u5c06\u8ba8\u8bba\u7684\u201c\u641c\u7d22\uff08\u8005\uff09\u52a8\u673a\u201d\u7684\u65f6\u5019\u3002 \u5173\u952e\u8981\u70b9 \u5206\u6790\u9ad8\u6392\u540d\u7f51\u9875\u662f\uff0c\u4f60\u9700\u8981\u7740\u529b\u8bc4\u4f30\u5176\u5185\u5bb9\u7684\u6df1\u5ea6\u4ee5\u53ca\u603b\u4f53\u8d28\u91cf\uff0c\u800c\u4e0d\u662f\u5173\u6ce8\u90a3\u4e9b\u4f20\u7edf\u7684\u52a3\u8d28\u4f18\u5316\u6307\u6807\uff08\u5982\uff1a\u6807\u9898\u4e2d\u7684\u5173\u952e\u8bcd\u7b49\uff09\u3002\u4f60\u7684\u5de5\u4f5c\u662f\u521b\u4f5c\u6bd4\u90a3\u4e9b\u5df2\u7ecf\u6709\u6392\u540d\u7684\u7f51\u9875\u66f4\u9ad8\u8d28\u91cf\u7684\u7f51\u9875\uff0c\u800c\u4e0d\u662f\u201c\u66f4\u4f18\u5316\u201d\u7684\u9875\u9762\u3002 \u53e6\u5916\uff0c\u4e0d\u8981\u60f3\u7740\u4f7f\u7528\u67d0\u4e00\u201c\u8bc4\u5206\u201d\u53bb\u8861\u91cf\u7f51\u9875\u7684\u76f8\u5173\u5ea6\uff0c\u4e0d\u7ba1\u4f60\u4f7f\u7528\u4e86\u4f55\u79cd\u6280\u672f\u624b\u6bb5\uff0c\u90fd\u51e0\u4e4e\u4e0d\u4f1a\u662f Google \u6b63\u5728\u4f7f\u7528\u7684\u3002","title":"\u90a3\u4e48\u8bed\u4e49\u76f8\u5173\uff08LSI\uff09\u548c\u8bcd\u9891-\u9006\u6587\u672c\u9891\u7387\uff08TF-IDF\uff09\u8fd9\u4e9b\u56e0\u7d20\u5462\uff1f"},{"location":"pages/affiliate/keyword-difficulty/#2-\u641c\u7d22\u8005\u52a8\u673a","text":"\u4ee5\u4e0b\u662f Ahrefs \u4e4b\u4e8e \u201cbacklink checker\u201d \u8fd9\u4e00\u5173\u952e\u8bcd\u7684\u6392\u540d\u5386\u53f2\u60c5\u51b5\u3002\uff08\u6570\u636e\u6765\u81ea Ahrefs \u7f51\u7ad9\u5206\u6790 \uff09\u3002 2017 \u5e74 2 \u6708\uff0c\u6211\u4eec\u53d1\u5e03\u4e86\u4e00\u4e2a\u7740\u9646\u9875\uff0c\u76ee\u6807\u662f\u83b7\u5f97 \u201cbacklink checker\u201d \u8fd9\u4e00\u5173\u952e\u8bcd\u7684\u6392\u540d\u3002\u5728\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u63cf\u8ff0\u4e86 Ahrefs \u51fa\u8272\u7684\u5916\u94fe\u8c03\u7814\u7279\u6027\uff0c\u5c31\u76f8\u5173\u8bdd\u9898\u9488\u5bf9\u8fd9\u4e2a\u5173\u952e\u8bcd\u505a\u4e86\u5b8c\u7f8e\u201c\u4f18\u5316\u201d\u3002 \u6587\u7ae0\u53d1\u5e03\u51e0\u4e2a\u6708\u540e\uff0c\uff08\u5728 \u5de7\u5999\u7684\u5185\u90e8\u94fe\u63a5 \u52a0\u6301\u4e0b\uff09\u6211\u4eec\u7684\u9875\u9762\u722c\u5347\u5230\u4e86\u76ee\u6807\u5173\u952e\u8bcd\u6392\u540d\u7b2c 5 \u4f4d\u3002 \u6211\u4eec\u6b23\u559c\u82e5\u72c2\uff01 \u4f46\u597d\u666f\u4e0d\u957f\u3002\u51e0\u5929\u540e Google \u5f00\u59cb\u964d\u4f4e\u6211\u4eec\u7684\u6392\u540d\uff0c\u5f88\u5feb\u6211\u4eec\u88ab\u6324\u5230\u4e86\u7ed3\u679c\u9875\u9762\u7684\u7b2c\u4e8c\u9875\uff08\u5373\u6700\u4f73 \u85cf\u5c38 \u5730\uff09\u3002 \u4f5c\u4e3a\u201c\u4e13\u4e1a\u7684 SEO \u4ece\u4e1a\u8005\u201d\uff0c\u6211\u4eec\u628a\u81ea\u5df1\u77e5\u9053\u7684\u4f18\u5316\u8bc0\u7a8d\u7528\u4e86\u4e2a\u904d\u3002\u5305\u62ec\uff1a \u6539\u5584\u5185\u5bb9\u6587\u6848\uff1b \u4f18\u5316\u7f51\u9875\u52a0\u8f7d\u901f\u5ea6\uff1b \u63d0\u9ad8\u7f51\u9875\u5bf9\u79fb\u52a8\u7aef\u7684\u53cb\u597d\u7a0b\u5ea6\uff1b \u52aa\u529b\u83b7\u53d6\u9ad8\u8d28\u91cf\u7684\u5916\u94fe\uff1b \u2026\u2026 \u5373\u4fbf\u5982\u6b64\uff0c\u6211\u4eec\u82b1\u4e86\u6574\u6574\u4e00\u5e74\u65f6\u95f4\u624d\u56de\u5230\u7b2c 6 \u4f4d\u3002 \u6392\u540d\u5c31\u4ece\u6b64\u6b62\u6b65\u4e0d\u524d\u4e86\u3002 \u4e5f\u5c31\u662f\u5728\u90a3\u65f6\uff0c\u6211\u4eec\u610f\u8bc6\u5230\u4e86\u6240\u6709\u7684\u52aa\u529b\u90fd\u7784\u51c6\u4e86\u9519\u8bef\u7684\u65b9\u5411\u3002 \u4e3a\u4ec0\u4e48\u5462\uff1f\u56e0\u4e3a\u4e0d\u7ba1\u6211\u4eec\u5c06\u201c\u4f20\u7edf\u7684\u201dSEO \u56e0\u7d20\u6253\u78e8\u5f97\u591a\u4e48\u5b8c\u7f8e\uff0c\u6211\u4eec\u7684\u7740\u9646\u9875\u4f9d\u7136\u6ca1\u6709\u89e3\u51b3\u641c\u7d22\u52a8\u673a\u7684\u95ee\u9898\u3002\u9664\u4e86\u5728\u4e3a\u5de5\u5177\u7684 7 \u5929\u8bd5\u7528\u6253\u5e7f\u544a\u5916\uff0c\u8fd9\u4e2a\u9875\u9762\u5e76\u672a\u89e3\u51b3\u66f4\u591a\u95ee\u9898\u3002 \u76f8\u53cd\uff0c\u6240\u6709\u6392\u540d\u5728\u6211\u4eec\u4e4b\u524d\u7684\u9875\u9762\u90fd\u63d0\u4f9b\u4e86\u514d\u8d39\u7684\u5916\u94fe\u68c0\u67e5\u529f\u80fd\uff0c\u7528\u6237\u53ef\u80fd\u76f4\u63a5\u4f7f\u7528\u8fd9\u4e9b\u5de5\u5177\u67e5\u8be2\u5916\u94fe\uff0c\u4e0d\u9700\u8981\u6ce8\u518c\u8d26\u6237\uff0c\u4e5f\u4e0d\u9700\u8981\u63d0\u4f9b\u4fe1\u7528\u5361\u4fe1\u606f\u3002 \u6253\u8138\u4e86 \u3002 \u8fd9\u65f6\uff0c\u6211\u4eec\u51b3\u5b9a\u53d1\u5e03\u4e00\u6b3e\u5b8c\u5168\u514d\u8d39\u7684\u5916\u94fe\u68c0\u67e5\u5de5\u5177\u6765\u8fce\u5408\u641c\u7d22\u8005\u7684\u52a8\u673a\uff0c\u5b83\u6bd4\u90a3\u4e9b\u6392\u540d\u9ad8\u4e8e\u6211\u4eec\u7684\u5de5\u5177\u90fd\u8981\u597d\u7528\u5f88\u591a\u3002 \u8fd9\u5c31\u662f\u6211\u4eec\u4e0a\u7ebf\u7684\u514d\u8d39\u5916\u94fe\u68c0\u67e5\u5de5\u5177\u3002 \u4ec5\u7528\u4e86\u4e00\u5468\u65f6\u95f4\uff0c\u6211\u4eec\u7684\u7f51\u9875\u5c31\u6500\u5347\u81f3\u7b2c 1 \u540d\uff0c\u5e76\u4e14\u4ece\u90a3\u4ee5\u540e\u4e00\u76f4\u4fdd\u6301\u7b2c 1 \u7684\u5b9d\u5ea7\uff01\uff08\u5230\u76ee\u524d\u4e3a\u6b62\u5df2\u7ecf 6 \u4e2a\u6708\u5566\uff09\u3002 \u8fd9\u8fd8\u6ca1\u5b8c\u3002 \u6765\u770b\u770b\u5728\u8fce\u5408\u4e86\u641c\u7d22\u8005\u610f\u56fe\u540e\uff0c\u8fd9\u4e2a\u9875\u9762\u7684\u81ea\u7136\u6d41\u91cf\u548c\u5173\u952e\u8bcd\u6392\u540d\u60c5\u51b5\u5427\uff1a \u5dee\u4e0d\u591a\u63d0\u5347\u4e86 6 \u500d\uff01 \u4e3a\u4ec0\u4e48\u4f1a\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\u5462\uff1f Google \u4f3c\u4e4e\u6709\u529e\u6cd5\u5f04\u6e05\u695a\u7528\u6237\u5bf9\u641c\u7d22\u7ed3\u679c\u7684\u6ee1\u610f\u7a0b\u5ea6\u3002\u5177\u4f53\u662f\u600e\u4e48\u505a\u5230\u7684\u6211\u4eec\u4e0d\u5f97\u800c\u77e5\uff0c\u4f46\u662f\u50cf\u201c\u5f39\u7c27\u5355\u9ad8\u8df7\u201d\uff08pogo-sticking\uff09\uff0c\u201c \u9a7b\u7559\u65f6\u95f4 \u201d\uff08dwell time\uff09\u548c\u8df3\u51fa\u7387\uff08bounce rate\uff09\u53ef\u80fd\u4f1a\u4f5c\u4e3a\u53c2\u8003\u56e0\u7d20\u3002 \u65e0\u8bba\u5982\u4f55\uff1a\u5176\u4e2d\u7684\u5173\u952e\u70b9\u5728\u4e8e\uff1a\u53ea\u8981 Google \u8ba4\u4e3a\u7528\u6237\u5bf9\u67d0\u4e00\u4e2a\u7f51\u9875\u7684\u201c\u559c\u7231\u201d\u7a0b\u5ea6\u8d85\u8fc7\u5176\u4ed6\uff0c\u8fd9\u4e2a\u7f51\u9875\u7684\u6392\u540d\u5c31\u4f1a\u8f83\u9ad8\u3002 \u5728\u4e0a\u8ff0\u6211\u4eec\u81ea\u5df1\u7684\u4f8b\u5b50\u4e2d\uff0c\u641c\u7d22\u8005\u5bf9\u6211\u4eec\u63d0\u4f9b\u7684\u514d\u8d39\u5916\u94fe\u68c0\u67e5\u5de5\u5177\u4f3c\u4e4e\u975e\u5e38\u6ee1\u610f\uff0c\u4ee5\u81f4 Google \u7ed9\u4e86\u6211\u4eec\u8d8a\u6765\u8d8a\u591a\u76f8\u5173\u5173\u952e\u8bcd\u7684\u6392\u540d\uff0c\u9010\u6b65\u63d0\u5347\u4e86\u8fd9\u4e2a\u7f51\u9875\u7684\u603b\u4f53\u641c\u7d22\u6d41\u91cf\u3002 \u6211\u73b0\u5728\u975e\u5e38\u6709\u4fe1\u5fc3\uff0c\u5373\u4f7f\u6211\u4eec\u62ff\u6389\u8fd9\u4e2a\u7740\u9646\u9875 90% \u7684\u5185\u5bb9\uff0c\u5b83\u4f9d\u7136\u53ef\u4ee5\u7ee7\u7eed\u4fdd\u6301\u7b2c\u4e00\u7684\u4f4d\u7f6e\u3002\u7528\u6237\uff08\u5728\u641c\u7d22\u8fd9\u4e2a\u5173\u952e\u8bcd\u7684\u65f6\u5019\uff09\u4f3c\u4e4e\u53ea\u5173\u5fc3\u80fd\u5426\u627e\u5230\u514d\u8d39\u7684\u5916\u94fe\u68c0\u67e5\u5de5\u5177\uff0c\u5bf9\u4e8e\u5173\u4e8e\u6211\u4eec\u5de5\u5177\u6709\u591a\u68d2\u7684\u8ba8\u8bba\u5b8c\u5168\u4e0d\u611f\u5192\u3002 \u5173\u952e\u8981\u70b9 \u5206\u6790\u76ee\u6807\u5173\u952e\u8bcd\u7684\u9ad8\u6392\u540d\u7ed3\u679c\uff0c\u4ee5\u51b3\u5b9a\u4f60\u662f\u5426\u80fd\u63d0\u4f9b\u66f4\u597d\u5730\u8fce\u5408\u7528\u6237\u7684\u5185\u5bb9\u3002\u5982\u679c\u4e0d\u80fd\uff0c\u90a3\u4e48\u65e0\u8bba SEO \u5de5\u5177 \u7684\u7ed3\u679c\u5982\u4f55\uff0c\u8981\u505a\u8fd9\u4e2a\u5173\u952e\u8bcd\u7684\u6392\u540d\u5bf9\u4f60\u6765\u8bf4\u90fd\u592a\u96be\u4e86\u3002 \u7f16\u8005\u6ce8 \u4e86\u89e3 Google \u5bf9\u5173\u952e\u8bcd\u5f53\u524d\u6392\u540d\u72b6\u51b5\u662f\u5426\u6ee1\u610f\uff0c\u53ef\u4ee5\u67e5\u770b\u641c\u7d22\u5f15\u64ce\u7ed3\u679c\u9875\u9762\u7684\u6392\u540d\u5386\u53f2\u3002 \u4ee5\u4e0b\u662f Ahrefs \u5173\u952e\u8bcd\u5206\u6790 \u5de5\u5177\u5c55\u793a\u7684\u5173\u952e\u8bcd \u201cSEO tools\u201d \u7684\u5386\u53f2\u6392\u540d\u60c5\u51b5\u3002 \u8fd9\u4e94\u4e2a\u7ed3\u679c\u5df2\u7ecf\u5360\u636e\u5404\u81ea\u7684\u5f53\u524d\u4f4d\u7f6e\u6709\u4e00\u6bb5\u65f6\u95f4\u4e86\u3002\u6392\u540d\u51e0\u4e4e\u6ca1\u6709\u53d8\u5316\u3002 \u518d\u6765\u770b\u770b \u201cSEO forums\u201d \u8fd9\u4e2a\u5173\u952e\u8bcd\u7684\u641c\u7d22\u5f15\u64ce\u7ed3\u679c\u9875\u9762\u5386\u53f2\uff1a \u8fd9\u4e9b\u7ed3\u679c\u5728\u4e00\u5e74\u4e2d\u5c61\u6b21\u8fdb\u51fa\u524d 10 \u540d\u3002\u76f4\u5230\u6700\u8fd1\uff0cGoogle \u624d\u4f3c\u4e4e\u786e\u8ba4\u4e86\u6700\u8ba9\u7528\u6237\u6ee1\u610f\u7684\u7ed3\u679c\u3002 \u6df7\u4e71\u7684\u641c\u7d22\u5f15\u64ce\u7ed3\u679c\u9875\u9762\uff0c\u5728\u4e00\u4e9b SEO \u4e13\u4e1a\u4eba\u58eb\u773c\u4e2d\u662f\u83b7\u5f97\u6392\u540d\u7684\u597d\u673a\u4f1a\uff1a This SERP has opportunity written all over it pic.twitter.com/dZ5nj5rQ06 \u2014 nick eubanks (@nick_eubanks) April 20, 2019 \u539f\u56e0\u5728\u4e8e\uff0c\u5f88\u663e\u7136 Google \u5bf9\u5f53\u524d\u7684\u6392\u540d\u7ed3\u679c\u5e76\u4e0d\u6ee1\u610f\uff0c\u4e8e\u662f\u5b83\u9009\u62e9\u6bcf\u6b21\u90fd\u53ea\u8ba9\u5176\u4e2d\u7684\u67d0\u4e2a\u7ed3\u679c\u5728\u7b2c\u4e00\u7684\u4f4d\u7f6e\u5f85\u4e00\u5c0f\u4f1a\u513f\u3002\u8fd9\u65f6\uff0c\u5982\u679c\u4f60\u80fd\u51c6\u786e\u628a\u63e1\u7528\u6237\u7684\u641c\u7d22\u52a8\u673a\uff0c\u90a3\u4e48\u7b2c\u4e00\u7684\u4f4d\u7f6e\u5c31\u662f\u4f60\u7684\u4e86\u3002 \u4f46\u867d\u8bf4\u5982\u6b64\uff0c\u8981\u60f3\u5f81\u670d\u641c\u7d22\u5f15\u64ce\u7ed3\u679c\u9875\u9762\u8fd8\u662f\u5f88\u96be\u7684\u3002 \u56e0\u4e3a Google \u4e5f\u4e0d\u6e05\u695a\u7528\u6237\u7684\u641c\u7d22\u52a8\u673a\u662f\u4ec0\u4e48\uff0c\u5f88\u53ef\u80fd\u7684\u60c5\u51b5\u662f\uff0c\u4f60\u4e5f\u4e0d\u77e5\u9053\u3002\u8fd8\u6709\u4e00\u79cd\u53ef\u80fd\u662f\u641c\u7d22\u52a8\u673a\u603b\u662f\u5728\u4e0d\u65ad\u53d8\u5316\u4e4b\u4e2d\uff0c\u8fd9\u65f6\u8981\u53d6\u5f97\u957f\u5c3e\u5173\u952e\u8bcd\u7684\u6392\u540d\u51e0\u4e4e\u662f\u4e0d\u53ef\u80fd\u7684\u3002","title":"2. \u641c\u7d22\uff08\u8005\uff09\u52a8\u673a"},{"location":"pages/affiliate/keyword-difficulty/#3-\u5176\u4ed6\u7f51\u7ad9\u7684\u94fe\u63a5","text":"\u6700\u8fd1\uff0c\u8ba9\u6211\u4eec\u4ece\u201c\u9ad8\u8d28\u91cf\u5185\u5bb9\u201d\u201c\u641c\u7d22\uff08\u8005\uff09\u52a8\u673a\u201d\u7b49\u62bd\u8c61\u6982\u5ff5\u5207\u6362\u5230\u975e\u5e38\u5bb9\u6613\u7406\u89e3\u7684\u6982\u5ff5\uff1a\u5916\u94fe\u3002 \u6765\u81ea\u5176\u4ed6\u7f51\u7ad9\u7684\u94fe\u63a5\u662f Google \u6392\u540d\u7b97\u6cd5\u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206\uff08\u53ef\u4ee5\u67e5\u770b\u6211\u7684 \u5173\u4e8e PageRank \u7684\u6587\u7ae0 \u4e86\u89e3\u66f4\u591a\u7ec6\u8282\uff09\u3002 Google \u5c06\u8fd9\u4e9b\u94fe\u63a5\u89c6\u4f5c\u5bf9\u4f60\u7f51\u7ad9\u7684\u6295\u7968\uff0c\u8fd9\u4e9b\u6295\u7968\u8005\u8ba4\u4e3a\u4f60\u7684\u7f51\u7ad9\u503c\u5f97\u66f4\u9ad8\u7684\u6392\u540d\u3002 \u5f53\u7136\uff0cGoogle \u7b97\u6cd5\u8003\u5bdf\u7684\u4e0d\u4ec5\u4ec5\u662f\u94fe\u63a5\u5230\u4f60\u7f51\u9875\u7684\u7f51\u7ad9\u6570\u91cf\uff0c\u5b83\u8003\u8651\u7684\u56e0\u7d20\u8981\u590d\u6742\u5f97\u591a\u3002\u94fe\u63a5\u7684\u201c\u8d28\u91cf\u201d\u4e5f\u975e\u5e38\u91cd\u8981\uff0c\u5176\u4ed6\u56e0\u7d20\u8fd8\u5305\u62ec\uff1a \u8be5\u7f51\u7ad9\u63d0\u4f9b\u7ed9\u5176\u4ed6\u7f51\u7ad9\u7684\u94fe\u63a5\u6570\u91cf\uff1b \u8be5\u94fe\u63a5\u5904\u4e8e\u8be5\u7f51\u7ad9\uff08\u7ed3\u6784\uff09\u7684\u6df1\u5ea6\uff1b \u8be5\u94fe\u63a5\u5b9e\u9645\u6240\u5904\u7684\u8bed\u5883\u4e0e \u951a\u6587\u672c \uff1b \u2026\u2026 \u4e0d\u5e78\u7684\u662f\uff0c\u8fd9\u4e9b\u53d8\u91cf\u4f7f\u5f97\u51c6\u786e\u8ba1\u7b97\u51fa Google \u773c\u4e2d\u9875\u9762\u6240\u8c13\u7684\u201c\u94fe\u63a5\u4ef7\u503c\u201d\u975e\u5e38\u56f0\u96be\u3002 \u5c3d\u7ba1\u5982\u6b64\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u4f60\u7684\u7f51\u9875\u4ece\u5176\u4ed6\u9875\u9762\u83b7\u5f97\u7684\u5916\u94fe\u8d8a\u591a\uff0c\u5728 Google \u4e2d\u7684\u6392\u540d\u4e5f\u5c31\u8d8a\u9ad8\u3002 \u6211\u4eec\u77e5\u9053\u8fd9\u4e00\u70b9\uff0c\u662f\u56e0\u4e3a\u6211\u4eec \u505a\u8fc7\u4e13\u95e8\u7814\u7a76 \uff0c\u4e14\u53d1\u73b0\u4e86\u5176\u4e2d\u6e05\u6670\u7684\u5173\u8054\u3002 \u4e0d\u96be\u53d1\u73b0\uff0c\u72ec\u7acb\u6307\u5165\u57df\u540d\uff08\u5373\uff1a\u6765\u81ea\u552f\u4e00\u7f51\u7ad9\u7684\u5916\u94fe\uff09\u6570\u91cf\u4e0e\u6392\u540d\u7684\u5173\u8054\u6027\u8981\u9ad8\u4e8e\u5916\u94fe\u603b\u6570\u3002 \u610f\u5373\uff1a\uff08\u5728\u5176\u4ed6\u6761\u4ef6\u4e00\u6837\u7684\u60c5\u51b5\u4e0b\uff09\uff0c\u6765\u81ea 10 \u4e2a\uff08\u4e0d\u540c\uff09\u7f51\u7ad9\u7684 10 \u6761\u94fe\u63a5\u8981\u6bd4\u6765\u81ea 1 \u4e2a\u7f51\u7ad9\u7684 10 \u6761\u94fe\u63a5\u5bf9\u6392\u540d\u7684\u4f5c\u7528\u66f4\u5927\u3002 \u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u5728\u8ba1\u7b97\u5173\u952e\u8bcd\u96be\u5ea6\uff08Keyword Difficulty, KD\uff09\u65f6\uff0c\u4f1a\u4f7f\u7528\u9ad8\u6392\u540d\u7f51\u9875\u6307\u5165\u57df\u540d\u7684\u52a0\u6743\u5747\u503c\u3002 \u5728\u4e0a\u9762\u7684\u622a\u56fe\u4e2d\uff0c\u4f60\u80fd\u770b\u5230 \u201cbacklink checker\u201d \u8fd9\u4e00\u5173\u952e\u8bcd\u7684\u96be\u5ea6\u4e3a 74\uff0c\u8fd9\u4e2a\u6570\u503c\u88ab\u5b9a\u4e49\u6210\u201c\u975e\u5e38\u56f0\u96be\u201d\uff08\u201dSuper hard\u201d\uff09\u3002\u5728\u8fd9\u4e2a\u6570\u503c\u7684\u4e0b\u65b9\uff0c\u6709\u4e00\u6761\u63d0\u793a\u4fe1\u606f\uff1a \u6211\u4eec\u4f30\u8ba1\u4f60\u9700\u8981\u6765\u81ea ~274 \u4e2a\u7f51\u7ad9\u7684\u94fe\u63a5\u624d\u80fd\u53d6\u5f97\u8fd9\u4e2a\u5173\u952e\u8bcd\u524d 10 \u7684\u6392\u540d\u3002 \u8fd9\u6761\u63d0\u793a\u4fe1\u606f\u662f\u7ecf\u8fc7\u6df1\u601d\u719f\u8651\u7684\u3002 \u73b0\u5728\u8ba9\u6211\u6765\u5206\u89e3\u4e00\u4e0b\uff1a \u201c \u6211\u4eec\u4f30\u8ba1\u2026\u2026\u201d\uff08\u201cWe estimate\u2026\u201d\uff09**\uff1a\u8fd9\u610f\u5473\u7740\u6211\u4eec\u5bf9\u63a5\u4e0b\u6765\u7684\u5224\u65ad\u5e76\u65e0 100% \u7684\u628a\u63e1\u3002\u5b83\u53ea\u662f\u4e00\u4e2a\u6709\u6839\u636e\u7684\u731c\u6d4b\u800c\u5df2\u3002 \u201c \u2026\u2026\u4f60\u9700\u8981\u6765\u81ea ~247 \u4e2a\u7f51\u7ad9\u7684\u94fe\u63a5\u201d\uff08\u201c\u2026you\u2019ll need backlinks from ~247 \u4e2a\u7f51\u7ad9\u2026\u201d\uff09**\uff1a\u8fd9\u91cc\u7684\u5173\u952e\u90e8\u5206\u662f\u6570\u5b57\u524d\u7684\u201c~\u201d\u6807\u5fd7\u3002\u5b83\u7684\u610f\u601d\u662f\u201c\u5927\u7ea6\u201d\u3002\u5373\u540e\u9762\u7684\u8fd9\u4e2a\u6570\u5b57\u5e76\u4e0d\u80fd\u89c6\u4f5c\u662f\u7cbe\u786e\u7684\u3002 \u201c \u2026\u2026\u8fd9\u4e2a\u5173\u952e\u8bcd\u524d 10 \u7684\u6392\u540d\u201d\uff08\u201c\u2026 to rank in top 10 for this keyword\u201d\uff09**\uff1a\u6211\u4eec\u4f30\u8ba1\u4f60\u9700\u8981\u8bf4\u670d\u8fd9\u4e48\u591a\u7f51\u7ad9\u4e3a\u4f60\u63d0\u4f9b\u94fe\u63a5\uff0c\u4f60\u624d\u6709\u53ef\u80fd\u83b7\u5f97\u524d 10 \u7684\u540d\u6b21\u3002\u4f46\u662f\u6211\u4eec\u4e0d\u80fd\u4fdd\u8bc1\u4f60\u80fd\u6392\u5230\u9996\u4f4d\u6216\u8005\u524d 5 \u540d\u3002 \u4e3a\u4ec0\u4e48\u6211\u4eec\u8fd9\u91cc\u7684\u7528\u8bcd\u5982\u6b64\u8c28\u614e\u5462\uff1f \u56e0\u4e3a\u6211\u4eec\u77e5\u9053\u5982\u679c\u4f60\u83b7\u5f97\u4e86\u548c\u5f53\u524d\u9ad8\u6392\u540d\u7f51\u9875\u4e00\u6837\u591a\u7684\u5916\u94fe\uff0c\u4f60\u7f51\u9875\u7684\u6392\u540d\u53ef\u80fd\u4f1a\u8dfb\u8eab\u4ed6\u4eec\u4e4b\u4e2d\u3002\u4f46\u5f53\u4f60\u4e00\u65e6\u8fdb\u5165\u7b2c\u4e00\u9875\uff0cGoogle \u5c31\u4f1a\u501f\u52a9\u5176\u4ed6\u7684\u201c\u6392\u540d\u4fe1\u53f7\u201d\u6765\u786e\u5b9a\u4f60\u7f51\u7ad9\u7684\u4f4d\u7f6e\uff08\u770b\u4e0a\u6587\u6211\u4eec\u7684\u201dbacklink checker\u201d\u7740\u9646\u9875\u5c31\u53ef\u4ee5\u77e5\u9053\uff09\u3002 \u521b\u7acb\u4e00\u4e2a\u53ef\u4ee5\u51c6\u786e\u9884\u6d4b\u83b7\u5f97\u9996\u4f4d\u6392\u540d\u7684\u96be\u5ea6\u5f97\u5206\uff08\u7cfb\u7edf\uff09\uff0c\u4e0e\u521b\u5efa\u4e00\u4e2a\u81ea\u5df1\u7684\u641c\u7d22\u5f15\u64ce\u4e00\u6837\u56f0\u96be\u3002 \u6b63\u5982\u6211\u4eec\u7684 CEO \u6700\u8fd1\u5728 Twitter \u5ba3\u5e03\u7684\u4e00\u6837\uff1a Ahrefs is working on general purpose search engine to compete with Google. Sounds crazy, right? But lets talk about two huge problems with Google which they will never want to fix: \u2014 Dmitry Gerasimenko (@botsbreeder) March 27, 2019 \u4f46\u662f\u5728\u6211\u4eec\u771f\u7684\u8fd9\u6837\u505a\uff08\u8fd9\u4e00\u5b9a\u4f1a\u9700\u8981\u4e00\u4e9b\u65f6\u95f4\uff09\u4e4b\u524d\uff0c\u6211\u4eec\u7684\u5173\u952e\u8bcd\u96be\u5ea6\u6307\u6807\u5c06\u7ee7\u7eed\u5b8c\u5168\u57fa\u4e8e\u94fe\u63a5\uff08\u6765\u751f\u6210\uff09\u3002 \u5173\u952e\u8981\u70b9 \u8fc7\u53bb\u51e0\u5e74\u7684\u5927\u91cf\u7814\u7a76\u663e\u793a\uff0c\u5916\u94fe\u5bf9\u6392\u540d\u7684\u5f71\u54cd\u7a0b\u5ea6\u8981\u5927\u4e8e\u5176\u4ed6\u4efb\u4f55\u56e0\u7d20\u3002\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u7684\u5173\u952e\u8bcd\u96be\u5ea6\u5f97\u5206\u53ea\u8003\u8651\u4e86\u6392\u540d\u524d 10 \u7f51\u7ad9\u7684\u5e73\u5747\u5916\u94fe\u6570\u91cf\uff0c\u8fd9\u6837\u7406\u89e3\u8d77\u6765\u4e5f\u975e\u5e38\u5bb9\u6613\u3002 \u4f46\u662f\uff0c\u4f60\u5e94\u8be5\u628a\u8fd9\u4e2a\u6570\u503c\u4f5c\u4e3a\u7814\u7a76\u7684\u7b2c\u4e00\u6b65\uff0c\u56e0\u4e3a\u8bf8\u5982\u641c\u7d22\uff08\u8005\uff09\u52a8\u673a\u548c\u5185\u5bb9\u8d28\u91cf\u4e5f\u4e0e\u6392\u540d\u606f\u606f\u76f8\u5173\u3002 \u7f16\u8005\u6ce8 \u65e2\u7136\u6211\u4eec\u5df2\u7ecf\u5728\u8ba8\u8bba Ahrefs \u7684\u5173\u952e\u8bcd\u96be\u5ea6\u6307\u6807\u4e86\uff0c\u73b0\u5728\u8ba9\u6211\u6765\u7b80\u5355\u56de\u7b54\u4e00\u4e0b\u4e0e\u4e4b\u76f8\u5173\u7684\u6700\u5e38\u89c1\u7684\u95ee\u9898\uff1a \u201c\u6211\u7684\u7f51\u7ad9\u5e94\u8be5\u4ee5\u600e\u6837\u7684\u5173\u952e\u8bcd\u96be\u5ea6\u4e3a\u76ee\u6807\uff1f\u201d Ahrefs \u7684\u5173\u952e\u8bcd\u96be\u5ea6\u6307\u6807\u95f4\u63a5\u53cd\u6620\u4e86\u8be5\u5173\u952e\u8bcd\u6392\u540d\u524d 10 \u7f51\u7ad9\u5916\u94fe\u6570\u91cf\u7684\u5747\u503c\u3002\u7279\u522b\u5730\uff1a KD 0 \u8868\u793a 0 \u4e2a\u6307\u5165\u57df\u540d KD 10 \u8868\u793a ~10 \u4e2a\u6307\u5165\u57df\u540d KD 20 \u8868\u793a ~20 \u4e2a\u6307\u5165\u57df\u540d KD 30 \u8868\u793a ~35 \u4e2a\u6307\u5165\u57df\u540d KD 40 \u8868\u793a ~55 \u4e2a\u6307\u5165\u57df\u540d KD 50 \u8868\u793a ~80 \u4e2a\u6307\u5165\u57df\u540d KD 60 \u8868\u793a ~130 \u4e2a\u6307\u5165\u57df\u540d KD 70 \u8868\u793a ~200 \u4e2a\u6307\u5165\u57df\u540d KD 80 \u8868\u793a ~350 \u4e2a\u6307\u5165\u57df\u540d KD 90 \u8868\u793a ~800 \u4e2a\u6307\u5165\u57df\u540d \u4e8e\u662f\u8fd9\u4e2a\u95ee\u9898\u7684\u7b54\u6848\u53ef\u4ee5\u5f52\u7ed3\u4e3a\uff1a\u4f60\u53ef\u4ee5\u4e3a\u7f51\u7ad9\u83b7\u53d6\u591a\u5c11\u4e2a\u5916\u94fe\u3002\u8981\u5927\u81f4\u4e86\u89e3\u8fd9\u4e00\u70b9\uff0c\u53ea\u9700\u8981\u5c06\u4f60\u7684\u57df\u540d\u7c98\u8d34\u8fdb Ahrefs \u7684 \u7f51\u7ad9\u5206\u6790 \u5de5\u5177\uff0c\u7136\u540e\u8fdb\u5165\u201c\u6309\u5916\u94fe\u6570\u91cf\u6392\u5e8f\u201d\u62a5\u544a\uff1a \u5728\u4e0a\u9762\u7684\u622a\u56fe\u4e2d\uff0c\u4f60\u4f1a\u53d1\u73b0\u6211\u4eec\u535a\u5ba2\u7684\u9996\u9875\u83b7\u5f97\u4e86\u6765\u81ea 957 \u4e2a\u4e0d\u540c\u7f51\u7ad9\uff08\u6307\u5165\u57df\u540d\uff09\u7684\u5916\u94fe\uff0c\u5176\u4e2d\u5916\u94fe\u6570\u91cf\u6700\u591a\u7684\u6587\u7ae0\u83b7\u5f97\u7684\u5916\u94fe\u5728 453 ~ 670 \u4e4b\u95f4\u3002 \u8fd9\u662f\u4e0d\u662f\u5c31\u610f\u5473\u7740\u6211\u4eec\u9009\u5b9a\u7684\u76ee\u6807\u5173\u952e\u8bcd\u7684\u96be\u5ea6\u5e94\u8be5\u4e3a ~90 \u5462\uff1f \u4e5f\u4e0d\u5c3d\u7136\u3002\u90a3 5 \u7bc7\u6587\u7ae0\u662f\u6211\u4eec\u5916\u94fe\u6700\u591a\u7684\u5185\u5bb9\u3002\u6211\u4eec\u5728\u5176\u4e2d\u6295\u5165\u4e86\u591a\u5e74\u7684\u8840\u3001\u6c57\u548c\u6cea\u624d\u83b7\u5f97\u4e86\u5982\u6b64\u591a\u7684\u5916\u94fe\u3002\u5982\u679c\u4f60\u5411\u4e0b\u6eda\u52a8\u62a5\u544a\uff0c\u4f1a\u53d1\u73b0\u6211\u4eec\u5927\u591a\u6570\u6587\u7ae0\u7684\u5916\u94fe\u6570\u91cf\u5c11\u4e8e 100\u3002\u56e0\u6b64\u6211\u4f1a\u8ba4\u4e3a\uff0c\u5bf9\u6211\u4eec\u6765\u8bf4\uff0c\u8f83\u4e3a\u5408\u7406\u7684\u5173\u952e\u8bcd\u96be\u5ea6\u4f1a\u5728 50 \u4ee5\u5185\u3002 \u50cf\u8fd9\u6837\u5206\u6790\u4f60\u7684\u7f51\u7ad9\uff0c\u770b\u770b\u4f60\u7684\u7f51\u9875\u83b7\u5f97\u4e86\u591a\u5c11\u5916\u94fe\u3002","title":"3. \u5176\u4ed6\u7f51\u7ad9\u7684\u94fe\u63a5"},{"location":"pages/affiliate/keyword-difficulty/#4-\u57df\u540d\u6743\u5a01\u5ea6","text":"\u57df\u540d\u6743\u5a01\u5ea6\u53ef\u80fd\u662f\u6240\u6709\u56e0\u7d20\u4e2d\u6700\u5bcc\u6709\u4e89\u8bae\u7684\u3002 \u867d\u7136\u5927\u90e8\u5206 SEO \u4e13\u4e1a\u4eba\u58eb\u90fd\u8ba4\u4e3a\uff1a\u5bf9\u6bcf\u4e2a\u7f51\u7ad9\u6765\u8bf4\uff0cGoogle \u90fd\u6709\u9488\u5bf9\u5168\u57df\u540d\u7684\u8d28\u91cf\u8bc4\u5206\uff0c\u8be5\u8bc4\u5206\u4f1a\u5f71\u54cd\u57df\u540d\u4e0b\u7684\u6bcf\u4e2a\u9875\u9762\uff0c\u4f46\u662f\u5f53 Google \u7684\u4ee3\u8868\u4eec\u88ab\u95ee\u53ca\u8fd9\u4e2a\u95ee\u9898\u65f6\uff0c\u4ed6\u4eec\u603b\u662f\u80fd\u6210\u529f\u5730\u56de\u907f\uff0c\u800c\u4e0d\u7ed9\u51fa\u76f4\u63a5\u7684\u7b54\u6848\u3002 \u4e0b\u9762\u5c31\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a Google \u7684 John Muller \u5728\u56de\u590d\u6211\u5173\u4e8e\u57df\u540d\u6743\u5a01\u5ea6\u7684\u63a8\u6587\u65f6\uff0c\u8868\u793a\u867d\u7136\u4ed6\u4eec\u867d\u7136\u6ca1\u6709\u91c7\u7528\u8fd9\u4e00\u6307\u6807\u672c\u8eab\uff0c\u4f46\u662f\u4ed6\u4eec\u6709\u65f6\u7684\u786e\u4f1a\u201c\u4ece\u66f4\u5e7f\u6cdb\u7684\u89d2\u5ea6\u770b\u95ee\u9898\u201d\uff08look at things a bit broader\uff09\u3002 We don\u2019t use domain authority. We generally try to have our metrics as granular as possible, sometimes that\u2019s not so easy, in which case we look at things a bit broader (eg, we\u2019ve talked about this in regards to some of the older quality updates). \u2014 \ud83c\udf4c John \ud83c\udf4c (@JohnMu) April 16, 2019 \u00af\\ (\u30c4) /\u00af \u4f46\u662f\u5982\u679c\u4f60\u95ee\u6211 Ahrefs \u5982\u4f55\u770b\u5f85\u57df\u540d\u6743\u5a01\u5ea6\u5bf9\u7f51\u9875\u6392\u540d\u7684\u5f71\u54cd\uff0c\u6211\u4f1a\u544a\u8bc9\u4f60\u4ee5\u4e0b\u4e09\u70b9\uff1a \u6211\u4eec\u8ba4\u4e3a Google \u6709\u65f6 \u4f1a\u5728\u641c\u7d22\u7ed3\u679c\u4e2d\u7ed9\u4e88\u201c\u5f3a\u52bf\u201d\u7f51\u7ad9\u7684\u9875\u9762\u4e00\u5b9a\u7684\u504f\u7231\u3002\u4f46\u662f\u8981\u60f3\u5206\u8fa8\u51fa\u8fd9\u79cd\u8fdb\u6b65\u662f\u6765\u81ea Google \u8425\u9500\u7f51\u7edc\u5185\u7684\u9ad8\u6743\u5a01\u5ea6\u7f51\u7ad9\uff0c\u8fd8\u662f\u6765\u81ea\u5176\u4ed6\u975e\u76f4\u63a5\u901a\u9053\u7684\u63f4\u52a9\uff0c\u8fd9\u51e0\u70b9\u9700\u8981\u8bf4\u6e05\u695a\u3002 \u6211\u4eec\u76f8\u4fe1\u201c\u5f3a\u52bf\u201d \u7f51\u7ad9\u5185\u94fe \u7684\u6709\u6548\u6027\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec\u8ba4\u4e3a\u6709\u7740\u201c\u5f3a\u52bf\u201d\u7f51\u9875\u7684\u7f51\u7ad9\u53ef\u4ee5\u901a\u8fc7\u5185\u94fe\u5411\u5176\u4ed6\u7f51\u9875\u8f93\u9001\u201c\u80fd\u91cf\u201d\uff0c\u4ee5\u5e2e\u52a9\u4ed6\u4eec\u5728 Google \u641c\u7d22\u7ed3\u679c\u9875\u9762\u53d6\u5f97\u66f4\u597d\u7684\u540d\u6b21\u3002 \u6211\u4eec\u76f8\u4fe1\u201c\u5f31\u52bf\u201d\u7f51\u7ad9\u7684\u9875\u9762\u53ef\u4ee5\u901a\u8fc7\u83b7\u5f97\u66f4\u591a\u9ad8\u8d28\u91cf\u7684\u5916\u94fe\u6765\u8d85\u8fc7\u201c\u5f3a\u52bf\u201d\u7f51\u7ad9\u7684\u6392\u540d\u3002 \u5728 Ahrefs\uff0c\u6211\u4eec\u6709\u7740\u81ea\u5df1\u7684\u201c\u57df\u540d\u6743\u5a01\u5ea6\u201d\u6307\u6807\uff0c\u53eb\u505a\u57df\u540d\u8bc4\u5206\uff08Domain Rating, DR\uff09\uff0c\u5f53\u5b83\u662f\u5b8c\u5168\u57fa\u4e8e\u94fe\u63a5\u7684\u3002 Google \u5728\u8861\u91cf\u201c\u57df\u540d\u6743\u5a01\u5ea6\u201d\u65f6\u5f88\u53ef\u80fd\u8003\u8651\u4e86\u94fe\u63a5\u4ee5\u5916\u7684\u56e0\u7d20\u3002 \u8bf4\u5230\u94fe\u63a5\u56e0\u7d20\u2026\u2026 \u51e0\u5e74\u4ee5\u524d\uff0c\u6211\u4eec\u5f00\u5c55\u4e86\u4e00\u9879\u76f8\u5173\u6027\u7814\u7a76\uff0c\u5206\u522b\u8003\u5bdf\u4e86\u7f51\u9875\u7ea7\u522b\u7684\u5916\u94fe\u56e0\u7d20\u548c\u57df\u540d\u7ea7\u522b\u7684\u5916\u94fe\u56e0\u7d20\uff1a \u7ed3\u8bba\uff1a\u7f51\u9875\u7ea7\u522b\u7684\u56e0\u7d20\u5bf9\u6392\u540d\u7684\u5f71\u54cd\u8981\u8fdc\u8fdc\u5927\u4e8e\u57df\u540d\u7ea7\u522b\u7684\u56e0\u7d20\u3002 \u8fd9\u4e5f\u8bc1\u5b9e\u4e86\u4e0a\u6587 John Mueller \u5728\u63a8\u6587\u4e2d\u7684\u9648\u8ff0\uff1aGoogle \u8bd5\u56fe\u5c3d\u53ef\u80fd\u5730\u7ec6\u5316\u6240\u91c7\u7528\u7684\u6307\u6807\u3002 \u5173\u952e\u8981\u70b9 \u6709\u7740\u201c\u9ad8\u6743\u5a01\u5ea6\u201d\u7684\u7f51\u7ad9\u5df2\u7ecf\u88ab\u4eba\u4eec\u719f\u77e5\u5e76\u4fe1\u4efb\uff0c\u4e5f\u81ea\u7136\u4f1a\u53bb\u70b9\u51fb\u3002 \u4f8b\u5982\uff0c\u5728\u4f60\u641c\u7d22\u65b0\u95fb\u7684\u65f6\u5019\uff0c\u4f60\u5f88\u53ef\u80fd\u4f1a\u53bb\u70b9\u51fb BBC \u6216 CNN\u2014\u2014\u800c\u4e0d\u662f\u4e00\u4e2a\u968f\u673a\u535a\u4e3b\u2014\u2014\u7684\u94fe\u63a5\u3002\u5728\u4f60\u641c\u7d22 SEO \u7684\u65f6\u5019\uff0c\u5f88\u53ef\u80fd\u4f1a\u53bb\u70b9\u51fb\u6765\u81ea Ahrefs, Moz, SEJ \u7b49\u7f51\u7ad9\u7684\u94fe\u63a5\u3002\u5f88\u660e\u663e Google \u7b97\u6cd5\u4f1a\u5411\u4eba\u4eec\u66f4\u6709\u53ef\u80fd\u70b9\u51fb\u7684\u7ed3\u679c\u503e\u659c\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u4f60\u7684\u7ec6\u5206\u9886\u57df\u7684\u641c\u7d22\u5f15\u64ce\u7ed3\u679c\u9875\u9762\u6709\u5f88\u591a\u201c\u5927\u4f6c\u201d\uff08big names\uff09\uff0c\u8981\u8dfb\u8eab\u5176\u4e2d\u5c06\u4f1a\u975e\u5e38\u56f0\u96be\uff0c\u4f46\u8fd9\u5e76\u975e\u5b8c\u5168\u4e0d\u53ef\u80fd\u3002\u6211\u4eec\u7684\u6570\u636e\u663e\u793a\uff1a\u201c\u5f31\u52bf\u201d\u57df\u540d\u4e2d\u201c\u5f3a\u52bf\u201d\u9875\u9762\uff08\u5373\u62e5\u6709\u8bb8\u591a\u9ad8\u8d28\u91cf\u5916\u94fe\u7684\u5185\u9875\uff09\u7684\u6392\u540d\u53ef\u4ee5\u8d85\u8fc7\u9ad8\u6743\u5a01\u5ea6\u57df\u540d\u4e2d\u7684\u7f51\u9875\uff0c\u9664\u975e\u641c\u7d22\u8005\u5728\u770b\u5230\u81ea\u5df1\u719f\u6089\u7684\u54c1\u724c\u65f6\uff0c\u5b8c\u5168\u6ca1\u6709\u70b9\u51fb\u4f60\u7684\u9875\u9762\u7684\u52a8\u673a\u3002","title":"4. \u57df\u540d\u6743\u5a01\u5ea6"},{"location":"pages/affiliate/keyword-difficulty/#_1","text":"\u4e0d\u8981\u56de\u907f\u9ad8\u96be\u5ea6\u7684\u5173\u952e\u8bcd \u5927\u591a\u5173\u4e8e \u5173\u952e\u8bcd\u8c03\u7814 \u7684\u6587\u7ae0\u90fd\u4f1a\u544a\u8bc9\u4f60\u8981\u907f\u5f00\u9ad8\u96be\u5ea6\u7684\u5173\u952e\u8bcd\u800c\u9009\u62e9\u90a3\u4e9b\u641c\u7d22\u91cf\u8f83\u5927\u4e14\u6392\u540d\u96be\u5ea6\u8f83\u4f4e\u7684\u5173\u952e\u8bcd\u3002 \u8fd9\u5f88\u6709\u9053\u7406\u3002\u4f46\u73b0\u5b9e\u60c5\u51b5\u662f\uff0c\u8fd9\u6837\u7684\u5173\u952e\u8bcd\u5728\u4efb\u4f55\u7ec6\u5206\u9886\u57df\u91cc\u5c11\u4e4b\u53c8\u5c11\u3002\u56e0\u6b64\uff0c\u5f53\u4f60\u65e0\u6cd5\u627e\u51fa\u4ed6\u4eec\u65f6\uff0c\u5f88\u53ef\u80fd\u89c9\u5f97\u5173\u952e\u8bcd\u8c03\u7814\u5bf9\u4f60\u6765\u8bf4\u6ca1\u6709\u4efb\u4f55\u7528\u5904\u3002 \u8fd9\u79cd\u6001\u5ea6\u662f\u9519\u8bef\u7684\u3002 \u5173\u952e\u8bcd\u96be\u5ea6\u5e76\u4e0d\u662f\u8981\u963b\u6b62\u4f60\u4e89\u53d6\u67d0\u4e00\u5173\u952e\u8bcd\u7684\u9ad8\u6392\u540d\uff0c\u5b83\u7684\u76ee\u7684\u662f\u5e2e\u52a9\u4f60\u4f30\u7b97\u83b7\u5f97\u9ad8\u6392\u540d\u6240\u9700\u8981\u7684\u8d44\u6e90\u3002 \u5982\u679c\u83b7\u5f97\u67d0\u4e00\u5173\u952e\u8bcd\u7684\u6392\u540d\u5bf9\u4f60\u7684\u4e1a\u52a1\u6765\u8bf4\u81f3\u5173\u91cd\u8981\uff0c\u90a3\u4e48\u4e0d\u7ba1\u4ed8\u51fa\u4ec0\u4e48\u4ee3\u4ef7\uff0c\u4f60\u90fd\u5e94\u8be5\u5c3d\u529b\u4e89\u53d6\u3002 \u4e94\u5e74\u524d\uff0c\u5f53\u6211\u627f\u63a5 Ahrefs \u535a\u5ba2\u7684\u65f6\u5019\uff0c\u6211\u5e76\u6ca1\u6709\u53d1\u73b0\u8bb8\u591a\u53ef\u80fd\u201c\u7b80\u7b80\u5355\u5355\u201d\u5c31\u505a\u5230\u9ad8\u6392\u540d\u7684\u5173\u952e\u8bcd\u3002\u90a3\u4e9b\u6700\u597d\u7684\u5173\u952e\u8bcd\u5df2\u7ecf\u88ab\u6211\u4eec\u8fd9\u4e2a\u884c\u4e1a\u7684\u5927\u4f6c\u9738\u5360\u4e86\u3002 \u4f46\u662f\u6211\u4eec\u6765\u770b\u770b\u8fc7\u53bb\u4e94\u5e74\u95f4\u6211\u4eec\u7684\u641c\u7d22\u6d41\u91cf\u7684\u53d8\u5316\uff1a \u6211\u4eec\u5e76\u6ca1\u6709\u6311\u9009\u90a3\u4e9b\u4f4e\u96be\u5ea6\u7684\u5173\u952e\u8bcd\uff0c\u800c\u662f\u505a\u4e86\u76f8\u53cd\u7684\u4e8b\u60c5\uff0c\u6211\u4eec\u4ece\u4e00\u5f00\u59cb\u5c31\u548c\u4e1a\u754c\u5927\u4f6c\u4eec\u5c55\u5f00\u4e86\u9ad8\u7ade\u4e89\u5ea6\u5173\u952e\u8bcd\u7684\u4e89\u593a\u3002 \u8fd9\u4e9b\u6392\u540d\u662f\u4e0d\u662f\u7eb7\u81f3\u6c93\u6765\u5462\uff1f\u5b8c\u5168\u4e0d\u662f\u3002\u65e0\u8bba\u5982\u4f55\u6211\u4eec\u90fd\u4e0d\u662f\u4e00\u591c\u6210\u540d\uff0c\u90a3\u4e5f\u4ece\u6765\u4e0d\u662f\u6211\u4eec\u7684\u76ee\u6807\u3002 \u6211\u4eec\u7684\u76ee\u6807\u662f\u521b\u7acb SEO \u884c\u4e1a\u6700\u597d\u7684\u535a\u5ba2 \uff0c\u6211\u4eec\u77e5\u9053\u8fd9\u9700\u8981\u4ed8\u51fa\u65f6\u95f4\u3002 \u5728 SEO \u9886\u57df\uff0c\u77ed\u7ebf\u601d\u7ef4\u662f\u957f\u671f\u6392\u540d\u7684\u6700\u5927\u654c\u4eba\u3002 \u2026\u2026\u56e0\u6b64\uff0c\u4e0d\u8981\u56de\u907f\u90a3\u4e9b\u4f3c\u4e4e\u5f88\u96be\u7ade\u4e89\u7684\u5173\u952e\u8bcd\uff0c\u5b83\u4eec\u662f\u4f60\u4e1a\u52a1\u589e\u957f\u7684\u6f5c\u5728\u52a9\u63a8\u5668\u3002\ud83d\ude42 \u51e1\u672c\u7f51\u6ce8\u660e\"\u6765\u6e90\uff1aXXX \"\u7684\u6587/\u56fe/\u89c6\u9891\u7b49\u7a3f\u4ef6\uff0c\u672c\u7f51\u8f6c\u8f7d\u51fa\u4e8e\u4f20\u9012\u66f4\u591a\u4fe1\u606f\u4e4b\u76ee\u7684\uff0c\u5e76\u4e0d\u610f\u5473\u7740\u8d5e\u540c\u5176\u89c2\u70b9\u6216\u8bc1\u5b9e\u5176\u5185\u5bb9\u7684\u771f\u5b9e\u6027\u3002\u5982\u6d89\u53ca\u4f5c\u54c1\u5185\u5bb9\u3001\u7248\u6743\u548c\u5176\u5b83\u95ee\u9898\uff0c\u8bf7\u4e0e\u672c\u7f51\u8054\u7cfb\uff0c\u6211\u4eec\u5c06\u5728\u7b2c\u4e00\u65f6\u95f4\u5220\u9664\u5185\u5bb9\uff01 \u4f5c\u8005: Tim Soulo \u6765\u6e90\uff1a https://ahrefs.com/blog/zh/keyword-difficulty/","title":""},{"location":"pages/affiliate/keywords-opportunities-with-google-trends-ahrefs/","text":"\u4f7f\u7528 Google Trend\u3001Python \u548c Ahrefs \u67e5\u627e\u5173\u952e\u5b57\u5546\u673a \u00b6 \u957f\u671f\u4ee5\u6765\uff0c Google Trend \u4e00\u76f4\u662f SEO \u7684\u4e00\u4e2a\u5f3a\u5927\u5de5\u5177\u3002\u4e86\u89e3\u5386\u53f2\u3001\u5f53\u524d\u548c\u9884\u6d4b\u672a\u6765\u8d8b\u52bf\uff0c\u8ba9\u6211\u4eec\u4e86\u89e3\u5b63\u8282\u6027\u548c\u4ee3\u9645\u4e8b\u4ef6\uff08\u5982\u51a0\u72b6\u75c5\u6bd2\uff09\u7b49\u30022019 \u5e74\u8c01\u4f1a\u60f3\u5230\u536b\u751f\u7eb8\u5728 2020 \u5e74 3 \u6708\u5728\u6f6e\u6d41\u4e2d\u8fbe\u5230 100\uff1f\u8c37\u6b4c\u8d8b\u52bf\u7684\u7f51\u9875\u754c\u9762\u662f\u8d85\u7ea7\u7528\u6237\u53cb\u597d\uff0c\u4f60\u53ef\u4ee5\u627e\u51fa\u5f88\u591a\uff0c\u4f46\u5b83\u53ea\u63d0\u4f9b\u4e0e\u60a8\u7684\u7f51\u7ad9\u8131\u79bb\u7684\u6570\u636e\u3002\u5982\u679c\u60a8\u53ef\u4ee5\u5f15\u5165\u4e00\u4e9b\u6392\u540d\u6570\u636e\u6765\u67e5\u627e\u8d8b\u52bf\u5173\u952e\u5b57\u7684\u7f51\u5740\u6392\u540d\uff0c\u90a3\u8be5\u6570\u636e\u4f1a\u5982\u4f55\u3002\u8fd9\u4e9b\u5c06\u662f\u60a8\u53ef\u4ee5\u5173\u6ce8\u73b0\u5728\u6216\u9884\u6d4b\u672a\u6765\u7684\u673a\u4f1a\u3002 \u8981\u6c42\u548c\u5047\u8bbe \u00b6 \u5b89\u88c5 Python 3 \u5e76\u7406\u89e3\u4e86\u57fa\u672c\u7684 Python \u8bed\u6cd5\uff08\u63a8\u8350Pandas\uff09 \u8bbf\u95ee Linux \u5b89\u88c5 Ubuntu \u6216 \u8c37\u6b4c Colab Ahrefs \u5e10\u6237 \u4e0b\u8f7d Ahrefs \u5173\u952e\u5b57\u6570\u636e \u00b6 \u767b\u5f55 ahrefs.com \u5355\u51fb\u5de6\u4fa7\u680f\u4e0a\u7684\"\u6709\u673a\u5173\u952e\u5b57\" \u5355\u51fb\u6570\u636e\u8868\u53f3\u4e0a\u53f3\u4fa7\u7684\"\u5bfc\u51fa\" \u9009\u62e9\"\u5b8c\u6574\u62a5\u544a\"\u548c UTF-8 \u683c\u5f0f \u5c06\u4e0b\u8f7d\u7684 csv \u91cd\u547d\u540d\u4e3a\u6392\u540d.csv \u542f\u52a8\u811a\u672c \u00b6 \u6211\u7684\u5efa\u8bae\u662f\u5f00\u53d1\u8fd9\u4e2a\u811a\u672c\u5728\u8c37\u6b4cColab\uff0c\u56e0\u4e3a\u6211\u4eec\u4f7f\u7528\u4e00\u4e2a\u7279\u5b9a\u7684Colab\u5e93\u548c\u6269\u5c55\u3002 \u9996\u5148\uff0c\u8ba9\u6211\u4eec\u5b89\u88c5\u6a21\u5757 pytrends \u8fd9\u5c06\u6709\u52a9\u4e8e\u6211\u4eec\u5229\u7528\u8c37\u6b4c\u8d8b\u52bf\u6570\u636e\u3002\u5982\u679c\u60a8\u4f7f\u7528\u7684\u662fColab\uff0c\u8bf7\u5148\u5728pp3\u4e4b\u524d\u653e\u4e00\u4e2a\u611f\u53f9\u53f7\uff0c\u6240\u4ee5\uff01pip3\u3002 pip3 install pytrends \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5bfc\u5165\u6240\u9700\u7684\u6a21\u5757\u3002 Pytrends \u4e0e Google Trend\u8fdb\u884c\u6c9f\u901a\u3002\u6765\u81eaPytrends\u7684\u6570\u636e\u662f JSON \uff0c Pandas \u4e00\u90e8\u5206\uff0c \u6240\u4ee5\u6211\u4eec\u9700\u8981 \u718a\u732b\u6765\u5904\u7406\u3002 \u811a\u672c \u5ef6\u8fdf\u7684\u65f6\u95f4\uff0c\u4ee5\u51cf\u5c11\u4e0e\u8c37\u6b4c\u8d8b\u52bf\u7684\u6469\u64e6\u3002 data_table Google \u6269\u5c55\u7684\u4e00\u90e8\u5206\uff0c\u60a8\u5c06\u5f88\u5feb\u52a0\u8f7d\uff0c\u4ee5\u5e2e\u52a9\u589e\u5f3a\u6570\u636e\u6846\u89c6\u89c9\u5bf9\u8c61\u3002\u663e\u7136\uff0c\u5982\u679c\u60a8\u4e0d\u5728 Google Colab \u4e2d\u8fd0\u884c\u6b64\u529f\u80fd\uff0c\u60a8\u53ef\u4ee5\u7701\u7565\u8be5\u6a21\u5757\u548c\u6269\u5c55\u3002 1 2 3 4 from pytrends.request import TrendReq import pandas as pd import time from google.colab import data_table \u5982\u679c\u60a8\u5728 Google Colab \u4e2d\u8fd0\u884c\u6b64\u5185\u5bb9\uff0c\u60a8\u9700\u8981\u4f7f\u7528\u5176\u6570\u636e\u8868\u6269\u5c55\u540d\uff0c\u8be5\u6269\u5c55\u5c06 Pandas \u6570\u636e\u5e27\u89c6\u89c9\u5bf9\u8c61\u589e\u5f3a\u4e3a\u7535\u5b50\u8868\u683c\u4e2d\u3002 1 %load_ext google.colab.data_table \u5206\u914d\u5173\u952e\u5b57\u5e76\u52a0\u8f7d Arefs \u6570\u636e \u00b6 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u53d8\u91cf\u6765\u5b58\u50a8\u6211\u4eec\u7684\u5173\u952e\u5b57\u3002\u8fd9\u662f\u6211\u4eec\u5c06\u641c\u7d22\u8c37\u6b4c\u8d8b\u52bf\u3002 1 keyword = \"dog collar\" \u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u5c06 Ahrefs \u5173\u952e\u5b57\u6570\u636e\u52a0\u8f7d\u5230\u540d\u4e3a rankdf \u7684\u718a\u732b \u6570\u636e\u5e27\u4e2d \u3002\u5982\u679c\u60a8\u4f7f\u7528\u7684\u662f Google Colab\uff0c\u4e0d\u8981\u5fd8\u8bb0\u4ece\u5de6\u4fa7\u680f\u6587\u4ef6\u4e0a\u4f20\u533a\u57df\u4e0a\u4f20\u6b64\u6587\u4ef6\u3002\u4e00\u65e6 csv \u5728\u6570\u636e\u5e27\u4e2d\uff0c\u6211\u4eec\u5e0c\u671b\u5220\u9664\uff08\u5220\u9664\uff09\u9664\u5173\u952e\u5b57\u548c URL \u5217\u7684\u6240\u6709 \u5185\u5bb9\u3002\u6211\u4eec\u7684 \u6392\u540d \u5c06\u53ea\u5305\u62ec\u8fd9\u4e24\u5217\u3002 1 2 3 rankdf = pd.read_csv('ranking.csv') rankdf.drop(['#', 'Position History','Position History Date','Volume','Difficulty','Traffic (desc)','CPC','Last Update','Page URL inside','SERP Features'], axis=1, inplace=True) \u914d\u7f6e pytrend \u6a21\u5757 \u00b6 \u662f\u65f6\u5019\u4f7f\u7528 pytrends \u6a21\u5757\u4e86 \u3002\u9996\u5148\uff0c\u6211\u4eec\u8c03\u7528 TredReq\uff08\uff09 \u51fd\u6570\uff0c\u5e76\u52a0\u8f7d \u5230 pytrends \u53d8\u91cf \u4e2d\u4f5c\u4e3a\u5bf9\u8c61\u3002\u7136\u540e\uff0c\u6211\u4eec kw_list \u8c03\u7528\u6709\u6548\u8d1f\u8f7d\u51fd\u6570\u7528\u4e8e\u641c\u7d22\u6570\u636e\u3002\u6b64\u53d8\u91cf\u5fc5\u987b\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u5373\u4f7f\u5728\u6b64\u811a\u672c\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u5176\u6210\u4e3a\u5355\u4e2a\u5217\u8868\u9879\u3002\u5176\u4ed6\u4eba\u53ef\u80fd\u4f1a\u968f\u610f\u5c06\u5176\u6269\u5c55\u5230\u591a\u4e2a\u5173\u952e\u5b57\u4e2d\u3002\u7136\u540e\uff0c\u6211\u4eec\u6784\u5efa\u53d1\u9001\u5230 Google \u8d8b\u52bf\u7684\u8bf7\u6c42\u3002 1 2 3 4 5 6 pytrends = TrendReq(hl='en-US', tz=360) kw_list = [] kw_list.append(keyword) pytrends.build_payload(kw_list, cat=0, timeframe='today 5-y', geo='', gprop='') \u8bbf\u95ee\u6211\u4eec\u5173\u952e\u5b57\u7684\u76f8\u5173\u4e3b\u9898 \u00b6 \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u8bbf\u95ee\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\u3002 \u5b8c\u6574\u7684\u6587\u4ef6\u5728\u8fd9\u91cc \u3002\u51fa\u4e8e\u6b64\u811a\u672c\u7684\u76ee\u7684\uff0c\u6211\u4eec\u5c06\u8bbf\u95ee \"\u76f8\u5173\u4e3b\u9898 \" \u548c \"\u76f8\u5173\u67e5\u8be2 \" \u7684\u6570\u636e \u3002\u9996\u5148\uff0c\u6211\u4eec\u5c06\u8bbf\u95ee [ \u76f8\u5173\u67e5\u8be2 ]\u3002\u6211\u4eec\u60f3\u8981\u7684\u5b50\u6570\u636e\u662f\" \u683c\u5f0f\u5316\u503c \"\uff0c \u8fd9\u662f\"topic_title\"\uff0c \u8fd9\u662f\u76f8\u5173\u5173\u952e\u5b57\u7206\u53d1 \u7684\u540d\u79f0\uff0c\u7136\u540e\"topic_type\"\uff0c \u5b83\u7ed9\u51fa\u4e86\u5173\u952e\u5b57\uff08 \u5b9e\u4f53 \uff09\u4e00\u4e2a\u7c7b\u522b\u3002 \u8981\u8bbf\u95ee\u6240\u6709\u8fd9\u4e9b\u5185\u5bb9\uff0c\u6211\u4eec\u9700\u8981\u6df1\u5165\u4e86\u89e3 gettopics \u5bf9\u8c61\u4e2d\u5305\u542b\u7684\u6570\u636e \uff0c\u5e76\u5c06\u5176\u5168\u90e8\u8f6c\u6362\u4e3a\u5217\u8868\u3002 \u6700\u540e\uff0c\u6211\u4eec\u8981\u5728 Try/\u4f8b\u5916\u4e2d\u5305\u88c5\u6570\u636e\u5206\u914d\uff0c \u56e0\u4e3a\u5982\u679c\u60a8\u5411 Google Trends \u53d1\u9001\u4e00\u4e2a\u5355\u8bcd\uff0c\u5176\u4e2d\u5b83\u4e0d\u8fd4\u56de\u6570\u636e\uff0c\u56e0\u4e3a\u53ef\u80fd\u8be5\u8bcd\u662f\u5047\u7684\u6216\u4e0d\u5f97\u4eba\u5fc3\u7684\uff0c\u56e0\u6b64\u5b83\u4f1a\u8fd4\u56de\u9519\u8bef\u3002\u6211\u4eec\u5c06\u5206\u914d\u4e00\u4e2a\u53d8\u91cf\u6765\u6807\u8bb0\u5982\u679c\u6ca1\u6709\u6570\u636e\uff0c\u8bf7\u7a0d\u540e\u4f7f\u7528\u3002 1 2 3 4 5 6 7 8 9 gettopics = pytrends.related_topics() stop = 0 try: breakout = list(gettopics.values())[0]['rising']['formattedValue'] title = list(gettopics.values())[0]['rising']['topic_title'] topic = list(gettopics.values())[0]['rising']['topic_type'] except: stop = 1 \u6211\u4eec\u4f7f\u7528 \u7684\u6a21\u5757 pytrend \u662f\u4e00\u4e2a\u975e\u5b98\u65b9\u7684 API\u3002\u8fd9\u610f\u5473\u7740\u6ca1\u6709\u5173\u4e8e\u5982\u4f55\u4e0e Google \u8d8b\u52bf\u6c9f\u901a\u7684\u5b98\u65b9\u6307\u5357\u3002\u5982\u679c\u6ee5\u7528\u5b83\u53ef\u80fd\u5bfc\u81f4\u8c37\u6b4c\u963b\u6b62\u4f60\u3002\u6211\u5f97\u5230 \"\u9000\u51fa\" \u54cd\u5e94\u5e76\u4e0d\u7f55\u89c1\uff0c \u8fd9\u610f\u5473\u7740\u6211\u9700\u8981\u7b49\u5f85\u51e0\u79d2\u949f\uff0c \u7136\u540e\u91cd\u8bd5\u3002\u4e3a\u4e86\u5e2e\u52a9\u6211\u4eec\u907f\u514d\u6ee5\u7528 API\uff0c\u6211\u4eec\u4f7f\u7528\u65f6\u95f4\u6a21\u5757\u5728\u811a\u672c\u5ef6\u8fdf\u4e2d\u6dfb\u52a0\u3002 \u8bbf\u95ee\u6211\u4eec\u5173\u952e\u5b57\u7684\u76f8\u5173\u67e5\u8be2 \u00b6 \u6211\u4eec\u5df2\u7ecf\u6709\u6211\u4eec\u7684 [\u76f8\u5173\u4e3b\u9898 ] \u6570\u636e\uff0c \u5b83\u73b0\u5728\u7684\u65f6\u95f4\u5f97\u5230 [ \u76f8\u5173\u67e5\u8be2] \u6570\u636e.\u8fd9\u4e2a\u8fc7\u7a0b\u7c7b\u4f3c\u4e8e\u6211\u4eec\u5df2\u7ecf\u4e3a [\u76f8\u5173\u4e3b\u9898 ] \u6240\u505a\u7684 \u3002\u6211\u4eec\u8981\u83b7\u53d6\u7684\u6570\u636e\u662f [ \u70ed\u95e8\u67e5\u8be2] \u548c [ \u4e0a\u5347\u67e5\u8be2 ]\u3002\u6211\u4eec\u6293\u4f4f\u8fd9\u4e24\u4e2a\uff0c\u4f46\u6b63\u5982\u60a8\u7a0d\u540e\u5c06\u770b\u5230\u7684\uff0c\u5bf9\u4e8e\u4e0e\u60a8\u52a0\u8f7d\u7684 CSV \u5339\u914d\u7684\u5173\u952e\u5b57\uff0c\u60a8\u53ea\u80fd\u4f7f\u7528\u5176\u4e2d\u4e00\u4e2a\u6765\u5339\u914d\u548c\u663e\u793a\u5728\u6700\u7ec8\u6570\u636e\u5e27\u4e2d\u3002 1 2 3 4 5 6 7 8 9 time.sleep(1) getqueries = pytrends.related_queries() try: top = list(getqueries.values())[0]['top']['query'] rising = list(getqueries.values())[0]['rising']['query'] except: stop = 1 \u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u6211\u4eec\u6709\u6211\u4eec\u6240\u6709\u7684\u6570\u636e\uff0c\u73b0\u5728\u6211\u4eec\u53ea\u9700\u8981\u628a\u5b83\u5f62\u6210\u6700\u7ec8\u7684\u6570\u636e\u6846\u67b6\uff0c\u6211\u4eec\u67e5\u770b\u3002\u5f00\u59cb\u6211\u4eec\u68c0\u67e5\u53d8\u91cf\u505c\u6b62\u662f\u5426\u7b49\u4e8e1\uff0c\u5982\u679c\u5b83\u8fd9\u6837\u505a\uff0c\u6253\u5370\u4e00\u6761\u6d88\u606f\u544a\u8bc9\u6211\u4eec\uff0c\u65e0\u8bba\u6211\u4eec\u4f7f\u7528\u4ec0\u4e48\u5173\u952e\u5b57\uff0c\u6ca1\u6709\u8db3\u591f\u7684\u6570\u636e\u8c37\u6b4c\u53d1\u9001\u7ed9\u6211\u4eec\uff0c\u6240\u4ee5\u6709\u4e00\u4e2a\u9519\u8bef\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u9700\u8981\u5c06\u6240\u6709\u6570\u636e\u6346\u7ed1\u5230\u53d8\u91cf\"\u6570\u636e \"\u4e2d \u3002\u76ee\u524d\uff0c\u5b83\u4eec\u90fd\u5728\u5355\u72ec\u7684\u5217\u8868\u53d8\u91cf\u4e2d\u3002\u4f60\u4f1a\u6ce8\u610f\u5230\u6211\u7701\u7565\u4e86 [ \u4e0a\u5347]\u3002 \u8fd9\u662f\u8fd9\u4e2a\u811a\u672c\u7684\u8981\u70b9\uff0c\u4f60\u9700\u8981\u9009\u62e9[ \u9876\u90e8]\u6216 [ \u4e0a\u5347 ]\u4f7f\u7528\uff0c\u5f53\u7136\uff0c\u4f60\u53ef\u4ee5\u6765\u56de\u5207\u6362\u3002\u8fd9\u662f\u56e0\u4e3a\uff0c\u65e0\u53ef\u5426\u8ba4\uff0c\u6211\u4e0d\u786e\u5b9a\u5982\u4f55\u5408\u5e76\u6570\u636e\u6846\uff0c\u5176\u4e2d ahrefs \u6570\u636e\u7684\u5173\u952e\u5b57\u5217\u4e0e\u6570\u636e\u5e27\u4e2d\u7684\u4e24\u5217\uff08\u9876\u90e8\u548c\u4e0a\u5347\uff09\u5339\u914d\u3002\u8ba9\u6211\u77e5\u9053\uff0c \u5982\u679c\u4f60\u77e5\u9053\uff01 \u5408\u5e76\u5217\u8868\u548c\u521b\u5efa\u4e3b\u6570\u636e\u5e27 \u00b6 \u6700\u540e\uff0c\u6211\u4eec\u4ece\u6211\u4eec\u521b\u5efa\u7684\u79f0\u4e3a\u6570\u636e\u7684\u4e3b\u5217\u8868\u4e2d\u521b\u5efa\u4e00\u4e2a\u6570\u636e\u6846\uff0c\u5e76\u547d\u540d\u5217\u3002 1 2 3 4 5 6 if stop == 1: print(\"No Top or Rising Trends Found. Try a diferent keyword\") data = list(zip(breakout,title,topic,top)) trendsdf = pd.DataFrame(data, columns = ['Breakout %','Related Keyword','Entity Label','Top Queries']) \u5408\u5e76\u8c37\u6b4c\u8d8b\u52bf\u548c Ahrefs \u6570\u636e\u6846\u67b6\u5728\u4e00\u8d77 \u00b6 \u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u6211\u4eec\u6709\u6211\u4eec\u7684\u6570\u636e\u6846\u67b6\u4e0e\u8c37\u6b4c\u8d8b\u52bf\u6570\u636e\u3002\u6211\u4eec\u73b0\u5728\u8981\u505a\u7684\u662f\u5c06\u6b64\u6570\u636e\u6846\u5408\u5e76\u5230\u6211\u4eec\u4f7f\u7528\u6b64\u811a\u672c\u5f00\u5934\u7684 Ahrefs CSV \u521b\u5efa\u7684\u6570\u636e\u5e27\u4e2d\uff0c\u8be5\u6570\u636e\u6846\u57fa\u4e8e Google \u8d8b\u52bf\u6570\u636e \u5e27\u4e2d\u7684\" \u70ed\u95e8\u67e5\u8be2\"\uff08\u6216\"\u4e0a\u5347\"\uff09\u5217\u4e2d\u7684 Ahrefs \u5173\u952e\u5b57\u5217\u6570\u636e\u5339\u914d\u6570\u636e\u3002\u6211\u4eec\u5c06\u4f7f\u7528 fillna\uff08\uff09 \u51fd\u6570 \u5c06\u4efb\u4f55 NaN \u503c\uff08\u65e0\u6570\u636e\uff09\u66ff\u6362\u4e3a\u660e\u663e\u7684\u53cc\u7092\u4f5c\u3002 \u5728\u5408\u5e76\u8fc7\u7a0b\u4e2d\uff0c\u6dfb\u52a0\u4e86 Ahrefs\" \u5173\u952e\u5b57 \"\u5217\uff0c \u4f46\u8fd9\u662f\"\u70ed\u95e8 \u67e5\u8be2\"\uff08\u6216\"\u4e0a\u5347\"\uff0c\u5982\u679c\u9009\u62e9\u4e86\uff09\u5217\u7684\u91cd\u590d\u9879\uff0c\u56e0\u6b64\u8ba9\u6211\u4eec\u5c06\u5176\u4ece\u6570\u636e\u5e27\u4e2d\u5220\u9664\u3002 1 2 mergedf = pd.merge(trendsdf, rankdf, left_on='Top Queries', right_on='Keyword', how='left').fillna(value='--') mergedf.drop(['Keyword'], axis=1, inplace=True) \u6211\u4eec\u73b0\u5728\u5728\u6700\u540e\u4e00\u6b65\uff01 \u5269\u4e0b\u7684\u5c31\u662f\u6253\u5370\u51fa\u5173\u952e\u5b57\uff0c\u4ee5\u9632\u5fd8\u8bb0\uff0c\u7136\u540e\u6253\u5370\u51fa\u6700\u7ec8\u7684\u6570\u636e\u6846\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u5c06\u5229\u7528\u6211\u4eec\u5728\u5f00\u5934\u6dfb\u52a0\u7684\u6269\u5c55\u3002\u6211\u4eec\u611f\u53d7\u5230\u4e86 \u6570\u636e\u8868\uff08\uff09\u7684\u6700\u7ec8 \u6570\u636e\u6846\u67b6\u548c\u5bbe\u679c\uff01\u968f\u610f\u8c03\u6574\u6bcf\u9875\u503c\u7684\u884c\u6570\uff08Google \u901a\u5e38\u8fd4\u56de 15-20 \u884c\uff09\uff0c\u5982\u679c\u60a8\u60f3\u8981\u5728\u5de6\u4fa7\u6dfb\u52a0\u7f16\u53f7\u7684\u884cinclude_index True \u3002\u5982\u679c\u60a8\u672a\u4f7f\u7528 Google Colab \u6216\u672a\u4f7f\u7528 data_table\uff0c\u8bf7 \u8f6c\u5230\u4e0b\u9762\u7684\u66ff\u4ee3\u4ee3\u7801\u3002 1 2 print(\"For Keyword: \" + kw_list[0]) data_table.DataTable(mergedf, include_index=False, num_rows_per_page=20) \u6700\u540e\u4e00\u6b65\u66ff\u4ee3\u65b9\u6848 \u00b6 \u8c03\u6574 head\uff08\uff09 \u4e2d\u7684\u6570\u5b57\uff0c\u4ee5\u663e\u793a\u8981\u663e\u793a\u7684\u884c\u6570\u3002 1 2 print(\"For Keyword: \" + kw_list[0]) mergedf.head(20) \u4e0b\u9762\u662f\u9884\u671f\u8f93\u51fa\u7684\u793a\u4f8b\u3002\u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4f7f\u7528\u4e86\u5ba0\u7269\u5e97\u7684 Ahrefs \u6570\u636e\u548c\u5173\u952e\u5b57\"\u72d7\u9886\"\u3002\u8bf7\u6ce8\u610f\uff0c\u5f69\u8272\u90e8\u5206\u662f\u76f8\u4e92\u76f8\u5173\u7684\u5217\uff0c\u5b83\u4eec\u9664\u4e86\u4f7f\u7528\u76f8\u540c\u7684\u5173\u952e\u5b57\u4ece Google \u8d8b\u52bf\u751f\u6210\u4ee5\u5916\u7684\u5176\u4ed6\u4ea4\u53c9\u5173\u8054\u3002 \u7ed3\u8bba \u00b6 \u8c37\u6b4c\u8d8b\u52bf\u4e00\u76f4\u662f\u8bbf\u95ee\u5386\u53f2\u8d8b\u52bf\u548c\u9884\u6d4b\u65b0\u8d8b\u52bf\u7684\u6709\u529b\u5de5\u5177\u3002\u80fd\u591f\u4ece API \u7684\u89d2\u5ea6\u5229\u7528\u4ed6\u4eec\u7684\u6570\u636e\uff0c\u8fd9\u4e3a\u5de8\u5927\u7684\u53ef\u80fd\u6027\u6253\u5f00\u4e86\u5927\u95e8\u3002\u672c\u6559\u7a0b\u63d0\u4f9b\u4e86\u4e00\u5c0f\u7247\u53ef\u4f9b\u60a8\u8bbf\u95ee\u7684\u6570\u636e\u548c\u4e00\u4e2a\u5947\u5f02\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u60a8\u53ef\u4ee5\u8f7b\u677e\u5730\u5c06\u5176\u6269\u5c55\u5230\u63a5\u53d7\u591a\u4e2a\u5173\u952e\u5b57\u3001\u5c06\u6570\u636e\u5b58\u50a8\u5728\u6570\u636e\u5e93\u4e2d\u3001\u6df7\u5408\u6765\u81ea\u5176\u4ed6\u6e90\u7684\u6570\u636e\u6216\u8bbf\u95ee\u5176\u4ed6\u6570\u636e\u533a\u57df\u3002 [\u67e5\u770b\u5168\u90e8]( https://importsem.com/author/dethfire/ \uff09 \u4f5c\u8005 Greg Bernhardt \u7684\u6700\u65b0\u5e16\u5b50 \u4f7f\u7528 Python \u521b\u5efa\u81ea\u5b9a\u4e49\u63a8\u7279\u63a8\u6587\u8b66\u62a5\u7cfb\u7edf 2020\u5e7412\u67088\u65e5 \u4f7f\u7528 Python \u67e5\u627e\u5173\u952e\u5b57\u7c7b\u522b\u7684\u641c\u7d22\u5377\u4e0a\u9650 2020\u5e7411\u67082\u65e5 \u5206\u6790\u722c\u7f51\u7684 PDF \u6587\u672c\u4f7f\u7528 Python \u7684 SEO 2020\u5e7410\u670821\u65e5 \u539f\u6587\u7ffb\u8bd1\u81ea\u7f51\u6587\uff0c\u4f5c\u8005: Greg Bernhardt \u539f\u6587: https://importsem.com/find-keyword-opportunities-with-google-trends-python-and-ahrefs/#abh_posts","title":"\u4f7f\u7528 Google Trend\u3001Python \u548c Ahrefs \u67e5\u627e\u5173\u952e\u5b57\u5546\u673a"},{"location":"pages/affiliate/keywords-opportunities-with-google-trends-ahrefs/#\u4f7f\u7528-Google-TrendPython-\u548c-Ahrefs-\u67e5\u627e\u5173\u952e\u5b57\u5546\u673a","text":"\u957f\u671f\u4ee5\u6765\uff0c Google Trend \u4e00\u76f4\u662f SEO \u7684\u4e00\u4e2a\u5f3a\u5927\u5de5\u5177\u3002\u4e86\u89e3\u5386\u53f2\u3001\u5f53\u524d\u548c\u9884\u6d4b\u672a\u6765\u8d8b\u52bf\uff0c\u8ba9\u6211\u4eec\u4e86\u89e3\u5b63\u8282\u6027\u548c\u4ee3\u9645\u4e8b\u4ef6\uff08\u5982\u51a0\u72b6\u75c5\u6bd2\uff09\u7b49\u30022019 \u5e74\u8c01\u4f1a\u60f3\u5230\u536b\u751f\u7eb8\u5728 2020 \u5e74 3 \u6708\u5728\u6f6e\u6d41\u4e2d\u8fbe\u5230 100\uff1f\u8c37\u6b4c\u8d8b\u52bf\u7684\u7f51\u9875\u754c\u9762\u662f\u8d85\u7ea7\u7528\u6237\u53cb\u597d\uff0c\u4f60\u53ef\u4ee5\u627e\u51fa\u5f88\u591a\uff0c\u4f46\u5b83\u53ea\u63d0\u4f9b\u4e0e\u60a8\u7684\u7f51\u7ad9\u8131\u79bb\u7684\u6570\u636e\u3002\u5982\u679c\u60a8\u53ef\u4ee5\u5f15\u5165\u4e00\u4e9b\u6392\u540d\u6570\u636e\u6765\u67e5\u627e\u8d8b\u52bf\u5173\u952e\u5b57\u7684\u7f51\u5740\u6392\u540d\uff0c\u90a3\u8be5\u6570\u636e\u4f1a\u5982\u4f55\u3002\u8fd9\u4e9b\u5c06\u662f\u60a8\u53ef\u4ee5\u5173\u6ce8\u73b0\u5728\u6216\u9884\u6d4b\u672a\u6765\u7684\u673a\u4f1a\u3002","title":"\u4f7f\u7528 Google Trend\u3001Python \u548c Ahrefs \u67e5\u627e\u5173\u952e\u5b57\u5546\u673a"},{"location":"pages/affiliate/keywords-opportunities-with-google-trends-ahrefs/#\u8981\u6c42\u548c\u5047\u8bbe","text":"\u5b89\u88c5 Python 3 \u5e76\u7406\u89e3\u4e86\u57fa\u672c\u7684 Python \u8bed\u6cd5\uff08\u63a8\u8350Pandas\uff09 \u8bbf\u95ee Linux \u5b89\u88c5 Ubuntu \u6216 \u8c37\u6b4c Colab Ahrefs \u5e10\u6237","title":"\u8981\u6c42\u548c\u5047\u8bbe"},{"location":"pages/affiliate/keywords-opportunities-with-google-trends-ahrefs/#\u4e0b\u8f7d-Ahrefs-\u5173\u952e\u5b57\u6570\u636e","text":"\u767b\u5f55 ahrefs.com \u5355\u51fb\u5de6\u4fa7\u680f\u4e0a\u7684\"\u6709\u673a\u5173\u952e\u5b57\" \u5355\u51fb\u6570\u636e\u8868\u53f3\u4e0a\u53f3\u4fa7\u7684\"\u5bfc\u51fa\" \u9009\u62e9\"\u5b8c\u6574\u62a5\u544a\"\u548c UTF-8 \u683c\u5f0f \u5c06\u4e0b\u8f7d\u7684 csv \u91cd\u547d\u540d\u4e3a\u6392\u540d.csv","title":"\u4e0b\u8f7d Ahrefs \u5173\u952e\u5b57\u6570\u636e"},{"location":"pages/affiliate/keywords-opportunities-with-google-trends-ahrefs/#\u542f\u52a8\u811a\u672c","text":"\u6211\u7684\u5efa\u8bae\u662f\u5f00\u53d1\u8fd9\u4e2a\u811a\u672c\u5728\u8c37\u6b4cColab\uff0c\u56e0\u4e3a\u6211\u4eec\u4f7f\u7528\u4e00\u4e2a\u7279\u5b9a\u7684Colab\u5e93\u548c\u6269\u5c55\u3002 \u9996\u5148\uff0c\u8ba9\u6211\u4eec\u5b89\u88c5\u6a21\u5757 pytrends \u8fd9\u5c06\u6709\u52a9\u4e8e\u6211\u4eec\u5229\u7528\u8c37\u6b4c\u8d8b\u52bf\u6570\u636e\u3002\u5982\u679c\u60a8\u4f7f\u7528\u7684\u662fColab\uff0c\u8bf7\u5148\u5728pp3\u4e4b\u524d\u653e\u4e00\u4e2a\u611f\u53f9\u53f7\uff0c\u6240\u4ee5\uff01pip3\u3002 pip3 install pytrends \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5bfc\u5165\u6240\u9700\u7684\u6a21\u5757\u3002 Pytrends \u4e0e Google Trend\u8fdb\u884c\u6c9f\u901a\u3002\u6765\u81eaPytrends\u7684\u6570\u636e\u662f JSON \uff0c Pandas \u4e00\u90e8\u5206\uff0c \u6240\u4ee5\u6211\u4eec\u9700\u8981 \u718a\u732b\u6765\u5904\u7406\u3002 \u811a\u672c \u5ef6\u8fdf\u7684\u65f6\u95f4\uff0c\u4ee5\u51cf\u5c11\u4e0e\u8c37\u6b4c\u8d8b\u52bf\u7684\u6469\u64e6\u3002 data_table Google \u6269\u5c55\u7684\u4e00\u90e8\u5206\uff0c\u60a8\u5c06\u5f88\u5feb\u52a0\u8f7d\uff0c\u4ee5\u5e2e\u52a9\u589e\u5f3a\u6570\u636e\u6846\u89c6\u89c9\u5bf9\u8c61\u3002\u663e\u7136\uff0c\u5982\u679c\u60a8\u4e0d\u5728 Google Colab \u4e2d\u8fd0\u884c\u6b64\u529f\u80fd\uff0c\u60a8\u53ef\u4ee5\u7701\u7565\u8be5\u6a21\u5757\u548c\u6269\u5c55\u3002 1 2 3 4 from pytrends.request import TrendReq import pandas as pd import time from google.colab import data_table \u5982\u679c\u60a8\u5728 Google Colab \u4e2d\u8fd0\u884c\u6b64\u5185\u5bb9\uff0c\u60a8\u9700\u8981\u4f7f\u7528\u5176\u6570\u636e\u8868\u6269\u5c55\u540d\uff0c\u8be5\u6269\u5c55\u5c06 Pandas \u6570\u636e\u5e27\u89c6\u89c9\u5bf9\u8c61\u589e\u5f3a\u4e3a\u7535\u5b50\u8868\u683c\u4e2d\u3002 1 %load_ext google.colab.data_table","title":"\u542f\u52a8\u811a\u672c"},{"location":"pages/affiliate/keywords-opportunities-with-google-trends-ahrefs/#\u5206\u914d\u5173\u952e\u5b57\u5e76\u52a0\u8f7d-Arefs-\u6570\u636e","text":"\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u53d8\u91cf\u6765\u5b58\u50a8\u6211\u4eec\u7684\u5173\u952e\u5b57\u3002\u8fd9\u662f\u6211\u4eec\u5c06\u641c\u7d22\u8c37\u6b4c\u8d8b\u52bf\u3002 1 keyword = \"dog collar\" \u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u5c06 Ahrefs \u5173\u952e\u5b57\u6570\u636e\u52a0\u8f7d\u5230\u540d\u4e3a rankdf \u7684\u718a\u732b \u6570\u636e\u5e27\u4e2d \u3002\u5982\u679c\u60a8\u4f7f\u7528\u7684\u662f Google Colab\uff0c\u4e0d\u8981\u5fd8\u8bb0\u4ece\u5de6\u4fa7\u680f\u6587\u4ef6\u4e0a\u4f20\u533a\u57df\u4e0a\u4f20\u6b64\u6587\u4ef6\u3002\u4e00\u65e6 csv \u5728\u6570\u636e\u5e27\u4e2d\uff0c\u6211\u4eec\u5e0c\u671b\u5220\u9664\uff08\u5220\u9664\uff09\u9664\u5173\u952e\u5b57\u548c URL \u5217\u7684\u6240\u6709 \u5185\u5bb9\u3002\u6211\u4eec\u7684 \u6392\u540d \u5c06\u53ea\u5305\u62ec\u8fd9\u4e24\u5217\u3002 1 2 3 rankdf = pd.read_csv('ranking.csv') rankdf.drop(['#', 'Position History','Position History Date','Volume','Difficulty','Traffic (desc)','CPC','Last Update','Page URL inside','SERP Features'], axis=1, inplace=True)","title":"\u5206\u914d\u5173\u952e\u5b57\u5e76\u52a0\u8f7d Arefs \u6570\u636e"},{"location":"pages/affiliate/keywords-opportunities-with-google-trends-ahrefs/#\u914d\u7f6e-pytrend-\u6a21\u5757","text":"\u662f\u65f6\u5019\u4f7f\u7528 pytrends \u6a21\u5757\u4e86 \u3002\u9996\u5148\uff0c\u6211\u4eec\u8c03\u7528 TredReq\uff08\uff09 \u51fd\u6570\uff0c\u5e76\u52a0\u8f7d \u5230 pytrends \u53d8\u91cf \u4e2d\u4f5c\u4e3a\u5bf9\u8c61\u3002\u7136\u540e\uff0c\u6211\u4eec kw_list \u8c03\u7528\u6709\u6548\u8d1f\u8f7d\u51fd\u6570\u7528\u4e8e\u641c\u7d22\u6570\u636e\u3002\u6b64\u53d8\u91cf\u5fc5\u987b\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u5373\u4f7f\u5728\u6b64\u811a\u672c\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u5176\u6210\u4e3a\u5355\u4e2a\u5217\u8868\u9879\u3002\u5176\u4ed6\u4eba\u53ef\u80fd\u4f1a\u968f\u610f\u5c06\u5176\u6269\u5c55\u5230\u591a\u4e2a\u5173\u952e\u5b57\u4e2d\u3002\u7136\u540e\uff0c\u6211\u4eec\u6784\u5efa\u53d1\u9001\u5230 Google \u8d8b\u52bf\u7684\u8bf7\u6c42\u3002 1 2 3 4 5 6 pytrends = TrendReq(hl='en-US', tz=360) kw_list = [] kw_list.append(keyword) pytrends.build_payload(kw_list, cat=0, timeframe='today 5-y', geo='', gprop='')","title":"\u914d\u7f6e pytrend \u6a21\u5757"},{"location":"pages/affiliate/keywords-opportunities-with-google-trends-ahrefs/#\u8bbf\u95ee\u6211\u4eec\u5173\u952e\u5b57\u7684\u76f8\u5173\u4e3b\u9898","text":"\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u8bbf\u95ee\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\u3002 \u5b8c\u6574\u7684\u6587\u4ef6\u5728\u8fd9\u91cc \u3002\u51fa\u4e8e\u6b64\u811a\u672c\u7684\u76ee\u7684\uff0c\u6211\u4eec\u5c06\u8bbf\u95ee \"\u76f8\u5173\u4e3b\u9898 \" \u548c \"\u76f8\u5173\u67e5\u8be2 \" \u7684\u6570\u636e \u3002\u9996\u5148\uff0c\u6211\u4eec\u5c06\u8bbf\u95ee [ \u76f8\u5173\u67e5\u8be2 ]\u3002\u6211\u4eec\u60f3\u8981\u7684\u5b50\u6570\u636e\u662f\" \u683c\u5f0f\u5316\u503c \"\uff0c \u8fd9\u662f\"topic_title\"\uff0c \u8fd9\u662f\u76f8\u5173\u5173\u952e\u5b57\u7206\u53d1 \u7684\u540d\u79f0\uff0c\u7136\u540e\"topic_type\"\uff0c \u5b83\u7ed9\u51fa\u4e86\u5173\u952e\u5b57\uff08 \u5b9e\u4f53 \uff09\u4e00\u4e2a\u7c7b\u522b\u3002 \u8981\u8bbf\u95ee\u6240\u6709\u8fd9\u4e9b\u5185\u5bb9\uff0c\u6211\u4eec\u9700\u8981\u6df1\u5165\u4e86\u89e3 gettopics \u5bf9\u8c61\u4e2d\u5305\u542b\u7684\u6570\u636e \uff0c\u5e76\u5c06\u5176\u5168\u90e8\u8f6c\u6362\u4e3a\u5217\u8868\u3002 \u6700\u540e\uff0c\u6211\u4eec\u8981\u5728 Try/\u4f8b\u5916\u4e2d\u5305\u88c5\u6570\u636e\u5206\u914d\uff0c \u56e0\u4e3a\u5982\u679c\u60a8\u5411 Google Trends \u53d1\u9001\u4e00\u4e2a\u5355\u8bcd\uff0c\u5176\u4e2d\u5b83\u4e0d\u8fd4\u56de\u6570\u636e\uff0c\u56e0\u4e3a\u53ef\u80fd\u8be5\u8bcd\u662f\u5047\u7684\u6216\u4e0d\u5f97\u4eba\u5fc3\u7684\uff0c\u56e0\u6b64\u5b83\u4f1a\u8fd4\u56de\u9519\u8bef\u3002\u6211\u4eec\u5c06\u5206\u914d\u4e00\u4e2a\u53d8\u91cf\u6765\u6807\u8bb0\u5982\u679c\u6ca1\u6709\u6570\u636e\uff0c\u8bf7\u7a0d\u540e\u4f7f\u7528\u3002 1 2 3 4 5 6 7 8 9 gettopics = pytrends.related_topics() stop = 0 try: breakout = list(gettopics.values())[0]['rising']['formattedValue'] title = list(gettopics.values())[0]['rising']['topic_title'] topic = list(gettopics.values())[0]['rising']['topic_type'] except: stop = 1 \u6211\u4eec\u4f7f\u7528 \u7684\u6a21\u5757 pytrend \u662f\u4e00\u4e2a\u975e\u5b98\u65b9\u7684 API\u3002\u8fd9\u610f\u5473\u7740\u6ca1\u6709\u5173\u4e8e\u5982\u4f55\u4e0e Google \u8d8b\u52bf\u6c9f\u901a\u7684\u5b98\u65b9\u6307\u5357\u3002\u5982\u679c\u6ee5\u7528\u5b83\u53ef\u80fd\u5bfc\u81f4\u8c37\u6b4c\u963b\u6b62\u4f60\u3002\u6211\u5f97\u5230 \"\u9000\u51fa\" \u54cd\u5e94\u5e76\u4e0d\u7f55\u89c1\uff0c \u8fd9\u610f\u5473\u7740\u6211\u9700\u8981\u7b49\u5f85\u51e0\u79d2\u949f\uff0c \u7136\u540e\u91cd\u8bd5\u3002\u4e3a\u4e86\u5e2e\u52a9\u6211\u4eec\u907f\u514d\u6ee5\u7528 API\uff0c\u6211\u4eec\u4f7f\u7528\u65f6\u95f4\u6a21\u5757\u5728\u811a\u672c\u5ef6\u8fdf\u4e2d\u6dfb\u52a0\u3002","title":"\u8bbf\u95ee\u6211\u4eec\u5173\u952e\u5b57\u7684\u76f8\u5173\u4e3b\u9898"},{"location":"pages/affiliate/keywords-opportunities-with-google-trends-ahrefs/#\u8bbf\u95ee\u6211\u4eec\u5173\u952e\u5b57\u7684\u76f8\u5173\u67e5\u8be2","text":"\u6211\u4eec\u5df2\u7ecf\u6709\u6211\u4eec\u7684 [\u76f8\u5173\u4e3b\u9898 ] \u6570\u636e\uff0c \u5b83\u73b0\u5728\u7684\u65f6\u95f4\u5f97\u5230 [ \u76f8\u5173\u67e5\u8be2] \u6570\u636e.\u8fd9\u4e2a\u8fc7\u7a0b\u7c7b\u4f3c\u4e8e\u6211\u4eec\u5df2\u7ecf\u4e3a [\u76f8\u5173\u4e3b\u9898 ] \u6240\u505a\u7684 \u3002\u6211\u4eec\u8981\u83b7\u53d6\u7684\u6570\u636e\u662f [ \u70ed\u95e8\u67e5\u8be2] \u548c [ \u4e0a\u5347\u67e5\u8be2 ]\u3002\u6211\u4eec\u6293\u4f4f\u8fd9\u4e24\u4e2a\uff0c\u4f46\u6b63\u5982\u60a8\u7a0d\u540e\u5c06\u770b\u5230\u7684\uff0c\u5bf9\u4e8e\u4e0e\u60a8\u52a0\u8f7d\u7684 CSV \u5339\u914d\u7684\u5173\u952e\u5b57\uff0c\u60a8\u53ea\u80fd\u4f7f\u7528\u5176\u4e2d\u4e00\u4e2a\u6765\u5339\u914d\u548c\u663e\u793a\u5728\u6700\u7ec8\u6570\u636e\u5e27\u4e2d\u3002 1 2 3 4 5 6 7 8 9 time.sleep(1) getqueries = pytrends.related_queries() try: top = list(getqueries.values())[0]['top']['query'] rising = list(getqueries.values())[0]['rising']['query'] except: stop = 1 \u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u6211\u4eec\u6709\u6211\u4eec\u6240\u6709\u7684\u6570\u636e\uff0c\u73b0\u5728\u6211\u4eec\u53ea\u9700\u8981\u628a\u5b83\u5f62\u6210\u6700\u7ec8\u7684\u6570\u636e\u6846\u67b6\uff0c\u6211\u4eec\u67e5\u770b\u3002\u5f00\u59cb\u6211\u4eec\u68c0\u67e5\u53d8\u91cf\u505c\u6b62\u662f\u5426\u7b49\u4e8e1\uff0c\u5982\u679c\u5b83\u8fd9\u6837\u505a\uff0c\u6253\u5370\u4e00\u6761\u6d88\u606f\u544a\u8bc9\u6211\u4eec\uff0c\u65e0\u8bba\u6211\u4eec\u4f7f\u7528\u4ec0\u4e48\u5173\u952e\u5b57\uff0c\u6ca1\u6709\u8db3\u591f\u7684\u6570\u636e\u8c37\u6b4c\u53d1\u9001\u7ed9\u6211\u4eec\uff0c\u6240\u4ee5\u6709\u4e00\u4e2a\u9519\u8bef\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u9700\u8981\u5c06\u6240\u6709\u6570\u636e\u6346\u7ed1\u5230\u53d8\u91cf\"\u6570\u636e \"\u4e2d \u3002\u76ee\u524d\uff0c\u5b83\u4eec\u90fd\u5728\u5355\u72ec\u7684\u5217\u8868\u53d8\u91cf\u4e2d\u3002\u4f60\u4f1a\u6ce8\u610f\u5230\u6211\u7701\u7565\u4e86 [ \u4e0a\u5347]\u3002 \u8fd9\u662f\u8fd9\u4e2a\u811a\u672c\u7684\u8981\u70b9\uff0c\u4f60\u9700\u8981\u9009\u62e9[ \u9876\u90e8]\u6216 [ \u4e0a\u5347 ]\u4f7f\u7528\uff0c\u5f53\u7136\uff0c\u4f60\u53ef\u4ee5\u6765\u56de\u5207\u6362\u3002\u8fd9\u662f\u56e0\u4e3a\uff0c\u65e0\u53ef\u5426\u8ba4\uff0c\u6211\u4e0d\u786e\u5b9a\u5982\u4f55\u5408\u5e76\u6570\u636e\u6846\uff0c\u5176\u4e2d ahrefs \u6570\u636e\u7684\u5173\u952e\u5b57\u5217\u4e0e\u6570\u636e\u5e27\u4e2d\u7684\u4e24\u5217\uff08\u9876\u90e8\u548c\u4e0a\u5347\uff09\u5339\u914d\u3002\u8ba9\u6211\u77e5\u9053\uff0c \u5982\u679c\u4f60\u77e5\u9053\uff01","title":"\u8bbf\u95ee\u6211\u4eec\u5173\u952e\u5b57\u7684\u76f8\u5173\u67e5\u8be2"},{"location":"pages/affiliate/keywords-opportunities-with-google-trends-ahrefs/#\u5408\u5e76\u5217\u8868\u548c\u521b\u5efa\u4e3b\u6570\u636e\u5e27","text":"\u6700\u540e\uff0c\u6211\u4eec\u4ece\u6211\u4eec\u521b\u5efa\u7684\u79f0\u4e3a\u6570\u636e\u7684\u4e3b\u5217\u8868\u4e2d\u521b\u5efa\u4e00\u4e2a\u6570\u636e\u6846\uff0c\u5e76\u547d\u540d\u5217\u3002 1 2 3 4 5 6 if stop == 1: print(\"No Top or Rising Trends Found. Try a diferent keyword\") data = list(zip(breakout,title,topic,top)) trendsdf = pd.DataFrame(data, columns = ['Breakout %','Related Keyword','Entity Label','Top Queries'])","title":"\u5408\u5e76\u5217\u8868\u548c\u521b\u5efa\u4e3b\u6570\u636e\u5e27"},{"location":"pages/affiliate/keywords-opportunities-with-google-trends-ahrefs/#\u5408\u5e76\u8c37\u6b4c\u8d8b\u52bf\u548c-Ahrefs-\u6570\u636e\u6846\u67b6\u5728\u4e00\u8d77","text":"\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u6211\u4eec\u6709\u6211\u4eec\u7684\u6570\u636e\u6846\u67b6\u4e0e\u8c37\u6b4c\u8d8b\u52bf\u6570\u636e\u3002\u6211\u4eec\u73b0\u5728\u8981\u505a\u7684\u662f\u5c06\u6b64\u6570\u636e\u6846\u5408\u5e76\u5230\u6211\u4eec\u4f7f\u7528\u6b64\u811a\u672c\u5f00\u5934\u7684 Ahrefs CSV \u521b\u5efa\u7684\u6570\u636e\u5e27\u4e2d\uff0c\u8be5\u6570\u636e\u6846\u57fa\u4e8e Google \u8d8b\u52bf\u6570\u636e \u5e27\u4e2d\u7684\" \u70ed\u95e8\u67e5\u8be2\"\uff08\u6216\"\u4e0a\u5347\"\uff09\u5217\u4e2d\u7684 Ahrefs \u5173\u952e\u5b57\u5217\u6570\u636e\u5339\u914d\u6570\u636e\u3002\u6211\u4eec\u5c06\u4f7f\u7528 fillna\uff08\uff09 \u51fd\u6570 \u5c06\u4efb\u4f55 NaN \u503c\uff08\u65e0\u6570\u636e\uff09\u66ff\u6362\u4e3a\u660e\u663e\u7684\u53cc\u7092\u4f5c\u3002 \u5728\u5408\u5e76\u8fc7\u7a0b\u4e2d\uff0c\u6dfb\u52a0\u4e86 Ahrefs\" \u5173\u952e\u5b57 \"\u5217\uff0c \u4f46\u8fd9\u662f\"\u70ed\u95e8 \u67e5\u8be2\"\uff08\u6216\"\u4e0a\u5347\"\uff0c\u5982\u679c\u9009\u62e9\u4e86\uff09\u5217\u7684\u91cd\u590d\u9879\uff0c\u56e0\u6b64\u8ba9\u6211\u4eec\u5c06\u5176\u4ece\u6570\u636e\u5e27\u4e2d\u5220\u9664\u3002 1 2 mergedf = pd.merge(trendsdf, rankdf, left_on='Top Queries', right_on='Keyword', how='left').fillna(value='--') mergedf.drop(['Keyword'], axis=1, inplace=True) \u6211\u4eec\u73b0\u5728\u5728\u6700\u540e\u4e00\u6b65\uff01 \u5269\u4e0b\u7684\u5c31\u662f\u6253\u5370\u51fa\u5173\u952e\u5b57\uff0c\u4ee5\u9632\u5fd8\u8bb0\uff0c\u7136\u540e\u6253\u5370\u51fa\u6700\u7ec8\u7684\u6570\u636e\u6846\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u5c06\u5229\u7528\u6211\u4eec\u5728\u5f00\u5934\u6dfb\u52a0\u7684\u6269\u5c55\u3002\u6211\u4eec\u611f\u53d7\u5230\u4e86 \u6570\u636e\u8868\uff08\uff09\u7684\u6700\u7ec8 \u6570\u636e\u6846\u67b6\u548c\u5bbe\u679c\uff01\u968f\u610f\u8c03\u6574\u6bcf\u9875\u503c\u7684\u884c\u6570\uff08Google \u901a\u5e38\u8fd4\u56de 15-20 \u884c\uff09\uff0c\u5982\u679c\u60a8\u60f3\u8981\u5728\u5de6\u4fa7\u6dfb\u52a0\u7f16\u53f7\u7684\u884cinclude_index True \u3002\u5982\u679c\u60a8\u672a\u4f7f\u7528 Google Colab \u6216\u672a\u4f7f\u7528 data_table\uff0c\u8bf7 \u8f6c\u5230\u4e0b\u9762\u7684\u66ff\u4ee3\u4ee3\u7801\u3002 1 2 print(\"For Keyword: \" + kw_list[0]) data_table.DataTable(mergedf, include_index=False, num_rows_per_page=20)","title":"\u5408\u5e76\u8c37\u6b4c\u8d8b\u52bf\u548c Ahrefs \u6570\u636e\u6846\u67b6\u5728\u4e00\u8d77"},{"location":"pages/affiliate/keywords-opportunities-with-google-trends-ahrefs/#\u6700\u540e\u4e00\u6b65\u66ff\u4ee3\u65b9\u6848","text":"\u8c03\u6574 head\uff08\uff09 \u4e2d\u7684\u6570\u5b57\uff0c\u4ee5\u663e\u793a\u8981\u663e\u793a\u7684\u884c\u6570\u3002 1 2 print(\"For Keyword: \" + kw_list[0]) mergedf.head(20) \u4e0b\u9762\u662f\u9884\u671f\u8f93\u51fa\u7684\u793a\u4f8b\u3002\u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4f7f\u7528\u4e86\u5ba0\u7269\u5e97\u7684 Ahrefs \u6570\u636e\u548c\u5173\u952e\u5b57\"\u72d7\u9886\"\u3002\u8bf7\u6ce8\u610f\uff0c\u5f69\u8272\u90e8\u5206\u662f\u76f8\u4e92\u76f8\u5173\u7684\u5217\uff0c\u5b83\u4eec\u9664\u4e86\u4f7f\u7528\u76f8\u540c\u7684\u5173\u952e\u5b57\u4ece Google \u8d8b\u52bf\u751f\u6210\u4ee5\u5916\u7684\u5176\u4ed6\u4ea4\u53c9\u5173\u8054\u3002","title":"\u6700\u540e\u4e00\u6b65\u66ff\u4ee3\u65b9\u6848"},{"location":"pages/affiliate/keywords-opportunities-with-google-trends-ahrefs/#\u7ed3\u8bba","text":"\u8c37\u6b4c\u8d8b\u52bf\u4e00\u76f4\u662f\u8bbf\u95ee\u5386\u53f2\u8d8b\u52bf\u548c\u9884\u6d4b\u65b0\u8d8b\u52bf\u7684\u6709\u529b\u5de5\u5177\u3002\u80fd\u591f\u4ece API \u7684\u89d2\u5ea6\u5229\u7528\u4ed6\u4eec\u7684\u6570\u636e\uff0c\u8fd9\u4e3a\u5de8\u5927\u7684\u53ef\u80fd\u6027\u6253\u5f00\u4e86\u5927\u95e8\u3002\u672c\u6559\u7a0b\u63d0\u4f9b\u4e86\u4e00\u5c0f\u7247\u53ef\u4f9b\u60a8\u8bbf\u95ee\u7684\u6570\u636e\u548c\u4e00\u4e2a\u5947\u5f02\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u60a8\u53ef\u4ee5\u8f7b\u677e\u5730\u5c06\u5176\u6269\u5c55\u5230\u63a5\u53d7\u591a\u4e2a\u5173\u952e\u5b57\u3001\u5c06\u6570\u636e\u5b58\u50a8\u5728\u6570\u636e\u5e93\u4e2d\u3001\u6df7\u5408\u6765\u81ea\u5176\u4ed6\u6e90\u7684\u6570\u636e\u6216\u8bbf\u95ee\u5176\u4ed6\u6570\u636e\u533a\u57df\u3002 [\u67e5\u770b\u5168\u90e8]( https://importsem.com/author/dethfire/ \uff09 \u4f5c\u8005 Greg Bernhardt \u7684\u6700\u65b0\u5e16\u5b50 \u4f7f\u7528 Python \u521b\u5efa\u81ea\u5b9a\u4e49\u63a8\u7279\u63a8\u6587\u8b66\u62a5\u7cfb\u7edf 2020\u5e7412\u67088\u65e5 \u4f7f\u7528 Python \u67e5\u627e\u5173\u952e\u5b57\u7c7b\u522b\u7684\u641c\u7d22\u5377\u4e0a\u9650 2020\u5e7411\u67082\u65e5 \u5206\u6790\u722c\u7f51\u7684 PDF \u6587\u672c\u4f7f\u7528 Python \u7684 SEO 2020\u5e7410\u670821\u65e5 \u539f\u6587\u7ffb\u8bd1\u81ea\u7f51\u6587\uff0c\u4f5c\u8005: Greg Bernhardt \u539f\u6587: https://importsem.com/find-keyword-opportunities-with-google-trends-python-and-ahrefs/#abh_posts","title":"\u7ed3\u8bba"},{"location":"pages/affiliate/long-tail-keywords-in-article/","text":"\u5982\u4f55\u505a\u597d\u957f\u5c3e\u5173\u952e\u8bcdSEO\u4f18\u5316 \u00b6 \u957f\u5c3e\u5173\u952e\u5b57seo\u4f18\u5316\u80fd\u6709\u6548\u63d0\u5347\u6211\u4eec\u9996\u9875\u76ee\u6807\u5173\u952e\u8bcd\u7684\u6392\u540d\uff0c\u6240\u4ee5\u957f\u5c3e\u5173\u952e\u5b57\u4f18\u5316\u662f\u6bcf\u4e2a\u7f51\u7ad9\u90fd\u8981\u505a\u7684\u4e8b\uff0c\u957f\u5c3e\u5173\u952e\u5b57\u4f18\u5316\u597d\u4e86\uff0c\u6211\u4eec\u7684\u7f51\u7ad9\u5c31\u4f1a\u6709\u5927\u91cf\u7684\u6d41\u91cf\uff0c\u6709\u6d41\u91cf\u5c31\u6709\u53ef\u80fd\u5e26\u6765\u8f6c\u5316\uff0c\u5355\u4e2a\u76ee\u6807\u5173\u952e\u8bcd\u5e26\u6765\u7684\u6d41\u91cf\u662f\u5f88\u5c0f\u7684\u3002\u5e0c\u671b\u628a\u957f\u5c3e\u5173\u952e\u8bcd\u505a\u5f97\u65e2\u7b80\u5355\u53c8\u96be\u3002\u56e0\u4e3a\uff0c\u4e00\u822c\u4e0d\u9700\u8981\u4e5f\u4e0d\u80fd\u505a\u6df1\u5165\u7684\u5173\u952e\u8bcd\u7814\u7a76\u548c\u6316\u6398\uff0c\u4e5f\u4e0d\u9700\u8981\u523b\u610f\u4f18\u5316\u7279\u5b9a\u7684\u957f\u5c3e\u5173\u952e\u8bcd\u3002\u56e0\u4e3a\u592a\u591a\u592a\u591a\uff0c\u53bb\u6d4f\u89c8\u641c\u7d22\u6b21\u6570\uff0c\u4e13\u95e8\u4eba\u5de5\u8c03\u6574\u7f51\u9875\u4f18\u5316\u662f\u884c\u4e0d\u901a\u7684\uff0c\u53ea\u80fd\u901a\u8fc7\u5927\u91cf\u6709\u6548\u7684\u5185\u5bb9\u548c\u7f51\u7ad9\u7ed3\u6784\u4e0a\u7684\u4f18\u5316\u6765\u4fdd\u8bc1\u7f51\u9875\u6536\u5f55\u3002\u53ea\u6709\u5173\u952e\u8bcd\u6316\u6398\u5f97\u597d\uff0c\u8bcd\u5e93\u5efa\u7acb\u5f97\u597d\uff0c\u7f51\u7ad9\u89c4\u6a21\u8db3\u591f\u5927\uff0c\u7f51\u7ad9\u7ed3\u6784\u5408\u7406\uff0c\u9875\u9762\u57fa\u672c\u4f18\u5316\uff0c\u957f\u5c3e\u8bcd\u6392\u540d\u624d\u80fd\u5168\u9762\u63d0\u5347\u3002 SEO\u4f18\u5316 \u4e00\u3001\u505a\u597d\u5173\u952e\u8bcd\u6316\u6398 \u5148\u5c06\u6316\u6398\u51fa\u7684\u957f\u5c3e\u5173\u952e\u5b57\u8fdb\u884c\u5206\u7c7b\uff0c\u8425\u9500\u578b\u5173\u952e\u5b57\u7528\u4e8e\u6587\u7ae0\u5185\u5bb9\u9875\uff0c\u76ee\u6807\u957f\u5c3e\u8bcd\u7528\u4e8e\u4ea7\u54c1\u9875\u9762\uff0c\u4e24\u8005\u7684\u533a\u522b\u5728\u4e8e\uff0c\u76ee\u6807\u957f\u5c3e\u8bcd\u7528\u6237\u7684\u641c\u7d22\u610f\u56fe\u975e\u5e38\u660e\u786e\uff0c\u5373\u60f3\u8981\u4e86\u89e3\u4ea7\u54c1\uff0c\u800c\u8425\u9500\u578b\u957f\u5c3e\u8bcd\u7528\u6237\u6ca1\u6709\u5f3a\u70c8\u7684\u9700\u6c42\uff0c\u53ef\u80fd\u53ea\u662f\u7a81\u7136\u95f4\u60f3\u8981\u521d\u6b65\u4e86\u89e3\u67d0\u4e2a\u4ea7\u54c1\u3002 \u4e8c\u3001\u957f\u5c3e\u5173\u952e\u8bcd\u5e03\u5c40 \u957f\u5c3e\u5b57\u578b\u5e03\u5c40\uff0c\u5c31\u50cf\u9996\u9875\u5b57\u578b\u5e03\u5c40\u4e00\u6837\uff0c\u6211\u4eec\u8981\u628a\u957f\u5c3e\u5b57\u578b\u5e03\u5c40\u653e\u5728\u6587\u7ae0\u5185\u9875\u7684\u6807\u9898\u3001\u63cf\u8ff0\u3001\u5173\u952e\u5b57\u4e0a\uff0c\u540c\u65f6\u5c3d\u91cf\u5728\u6587\u7ae0\u4e2d\u591a\u6b21\u51fa\u73b0\uff0c\u5207\u5fcc\u523b\u610f\u5806\u79ef\uff0c\u56e0\u4e3a\u641c\u7d22\u5f15\u64ce\u73b0\u5728\u975e\u5e38\u8ba8\u538c\u5173\u952e\u8bcd\u5806\u79ef\u884c\u4e3a\uff0c\u5f88\u5bb9\u6613\u4e8b\u4e0e\u613f\u8fdd\u3002\u5173\u952e\u8bcd\u51fa\u73b0\u6b21\u6570\u8d8a\u591a\uff0c\u9875\u9762\u5173\u952e\u8bcd\u7684\u5bc6\u5ea6\u8d8a\u5927\u3002 \u4e09\u3001\u5185\u5bb9\u53d1\u8868 \u505a\u5185\u5bb9\u7f16\u8f91\u65f6\uff0c\u8981\u5206\u6790\u957f\u5c3e\u5173\u952e\u8bcd\u7684\u6838\u5fc3\u9700\u6c42\uff0c\u4e00\u65b9\u9762\u53ef\u4ee5\u901a\u8fc7\u767e\u5ea6\u8fdb\u884c\u4e0b\u62c9\u548c\u76f8\u5173\u641c\u7d22\uff0c\u53e6\u4e00\u65b9\u9762\u53ef\u4ee5\u901a\u8fc7\u6392\u540d\u7ed3\u679c\u6765\u5224\u65ad\u7ade\u4e89\u7f51\u7ad9\u7684\u5185\u5bb9\u662f\u5982\u4f55\u5199\u51fa\u6765\u7684\uff0c\u65e2\u7136\u80fd\u6392\u4e0a\u53bb\uff0c\u80af\u5b9a\u6709\u4e00\u5b9a\u7684\u9053\u7406\u3002\u89e3\u6790\u7528\u6237\u662f\u5982\u4f55\u521b\u4f5c\u5185\u5bb9\u7684\uff0c\u6293\u4f4f\u7528\u6237\u7684\u54ea\u4e9b\u75db\u70b9\u3002\u6709\u4ec0\u4e48\u533a\u522b\u9700\u8981\u53bb\u505a\uff0c\u6709\u4ec0\u4e48\u533a\u522b\u9700\u8981\u53bb\u89e3\u51b3\uff0c\u6709\u4ec0\u4e48\u533a\u522b\u9700\u8981\u53bb\u505a\u56fe\u6587\u642d\u914d\u3002 \u8fd9\u4e2a\u6807\u9898\u8981\u5305\u542b\u957f\u5c3e\u5355\u8bcd \uff0c\u540c\u65f6\u7b26\u5408\u7528\u6237\u7684\u641c\u7d22\u4e60\u60ef\uff0c\u53ef\u4ee5\u6fc0\u53d1\u7528\u6237\u7684\u70b9\u51fb\u6b32\u671b\u3002 \u77ed\u6587\u4e2d\u7684\u7b2c\u4e00\u6bb5\u8981\u6709\u957f\u5c3e\u8bcd\uff0c\u53ef\u4ee5\u5bf9\u5b83\u8fdb\u884c\u52a0\u7c97\uff0c\u77ed\u6587\u7684\u4e2d\u95f4\u6bb5\u8981\u6709\u957f\u5c3e\u8bcd\uff0c\u77ed\u6587\u7684\u672b\u6bb5\u4e5f\u8981\u6709\u957f\u5c3e\u5173\u952e\u8bcd\u3002 \u81ea\u7136\u5730\u3001\u9002\u5f53\u5730\u51fa\u73b0\u957f\u5c3e\u6587\u5b57\uff0c\u4e0d\u4f1a\u5f71\u54cd\u7528\u6237\u7684\u6d4f\u89c8\u4f53\u9a8c\u3002 \u5728\u6587\u7ae0\u5185\u9875\u672b\u5c3e\u53ef\u4ee5\u6dfb\u52a0\u76f8\u5173\u7684\u63a8\u8350\u6587\u7ae0\uff0c\u4ee5\u51cf\u5c11\u7528\u6237\u7684\u8df3\u51fa\u7387\uff0c\u63a8\u8350\u7684\u6587\u7ae0\u8981\u4e0e\u672c\u6587\u76f8\u5173 \uff0c\u5bf9\u7528\u6237\u7684\u9700\u6c42\u8d77\u5230\u8865\u5145\u4f5c\u7528\u3002 \u56db\u3001\u505a\u597d\u5185\u5916\u8054\u63a5 \u7f51\u9875\u8981\u548c\u7f51\u9875\u4e00\u8d77\u505a\u5b9a\u4f4d\u6587\u5b57\uff0c\u5982\u679cA\u7f51\u9875\u51fa\u73b0\u4e86B\u7f51\u9875\u7684\u957f\u5c3e\u6587\u5b57\uff0c\u90a3\u4e48\u6211\u4eec\u5c06A\u7f51\u9875\u7684\u5b9a\u4f4d\u6587\u5b57\u52a0\u5230B\u7f51\u9875\u4e0a \uff0c\u8fd9\u6837\u5c31\u4f1a\u6709\u6743\u91cd\u4f20\u9012\u3002\u8fd1\u5e74\u6765\uff0c\u5916\u94fe\u6e20\u9053\u7684\u5efa\u8bbe\u96be\u5ea6\u8f83\u5927\uff0c\u5982\u679c\u6211\u4eec\u6709\u597d\u7684\u5916\u94fe\u6e20\u9053\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8d77\u6765\u6784\u5efa\u4e00\u4e9b\u91cd\u8981\u7684\u957f\u5c3e\u8bcd\uff0c\u901a\u8fc7\u5916\u94fe\u6295\u7968\u548c\u6743\u91cd\u4f20\u9012\u6765\u83b7\u5f97\u8fd9\u4e9b\u957f\u5c3e\u8bcd\u7684\u826f\u597d\u6392\u540d\u3002 \u4ec0\u4e48\u662f\u5b9a\u4f4d\u6587\u5b57\uff1f \u951a\u6587\u672c \uff08\u6709\u65f6\u79f0\u4e3a\u53ef\u70b9\u51fb \u6587\u672c t\uff09\u662f\u8d85\u94fe\u63a5\u7f16\u7801\u7684\u91cd\u8981\u90e8\u5206\uff0c\u8d85\u94fe\u63a5\u7f16\u7801\u5c06\u56fe\u50cf\u6216\u5355\u8bcd\u8fde\u63a5\u5230\u53e6\u4e00\u4e2a\u7f51\u9875\u6216\u9875\u9762\u7684\u4e00\u90e8\u5206\u3002 \u8d85\u94fe\u63a5\u5305\u542b\u5bf9\u7f51\u7edc\u51b2\u6d6a\u8005\u4e0d\u53ef\u89c1\u7684\u7f51\u7ad9\u5730\u5740\u4ee5\u53ca\u951a\u6587\u672c\uff0c\u8be5\u951a\u6587\u672c\u53ef\u89c1\uff0c\u5e76\u5411\u67e5\u770b\u8005\u663e\u793a\u94fe\u63a5\u7684\u94fe\u63a5\u4f4d\u7f6e\u3002 \u51e1\u672c\u7f51\u6ce8\u660e\"\u6765\u6e90\uff1aXXX \"\u7684\u6587/\u56fe/\u89c6\u9891\u7b49\u7a3f\u4ef6\uff0c\u672c\u7f51\u8f6c\u8f7d\u51fa\u4e8e\u4f20\u9012\u66f4\u591a\u4fe1\u606f\u4e4b\u76ee\u7684\uff0c\u5e76\u4e0d\u610f\u5473\u7740\u8d5e\u540c\u5176\u89c2\u70b9\u6216\u8bc1\u5b9e\u5176\u5185\u5bb9\u7684\u771f\u5b9e\u6027\u3002\u5982\u6d89\u53ca\u4f5c\u54c1\u5185\u5bb9\u3001\u7248\u6743\u548c\u5176\u5b83\u95ee\u9898\uff0c\u8bf7\u4e0e\u672c\u7f51\u8054\u7cfb\uff0c\u6211\u4eec\u5c06\u5728\u7b2c\u4e00\u65f6\u95f4\u5220\u9664\u5185\u5bb9\uff01 \u4f5c\u8005: \u6211\u662f\u94b1\u535a\u5ba2 \u6765\u6e90\uff1a https://www.woshiqian.com/post/48146.html","title":"\u957f\u5c3e\u8bcd\u4f18\u5316\u5165\u7f51\u9875"},{"location":"pages/affiliate/long-tail-keywords-in-article/#\u5982\u4f55\u505a\u597d\u957f\u5c3e\u5173\u952e\u8bcdSEO\u4f18\u5316","text":"\u957f\u5c3e\u5173\u952e\u5b57seo\u4f18\u5316\u80fd\u6709\u6548\u63d0\u5347\u6211\u4eec\u9996\u9875\u76ee\u6807\u5173\u952e\u8bcd\u7684\u6392\u540d\uff0c\u6240\u4ee5\u957f\u5c3e\u5173\u952e\u5b57\u4f18\u5316\u662f\u6bcf\u4e2a\u7f51\u7ad9\u90fd\u8981\u505a\u7684\u4e8b\uff0c\u957f\u5c3e\u5173\u952e\u5b57\u4f18\u5316\u597d\u4e86\uff0c\u6211\u4eec\u7684\u7f51\u7ad9\u5c31\u4f1a\u6709\u5927\u91cf\u7684\u6d41\u91cf\uff0c\u6709\u6d41\u91cf\u5c31\u6709\u53ef\u80fd\u5e26\u6765\u8f6c\u5316\uff0c\u5355\u4e2a\u76ee\u6807\u5173\u952e\u8bcd\u5e26\u6765\u7684\u6d41\u91cf\u662f\u5f88\u5c0f\u7684\u3002\u5e0c\u671b\u628a\u957f\u5c3e\u5173\u952e\u8bcd\u505a\u5f97\u65e2\u7b80\u5355\u53c8\u96be\u3002\u56e0\u4e3a\uff0c\u4e00\u822c\u4e0d\u9700\u8981\u4e5f\u4e0d\u80fd\u505a\u6df1\u5165\u7684\u5173\u952e\u8bcd\u7814\u7a76\u548c\u6316\u6398\uff0c\u4e5f\u4e0d\u9700\u8981\u523b\u610f\u4f18\u5316\u7279\u5b9a\u7684\u957f\u5c3e\u5173\u952e\u8bcd\u3002\u56e0\u4e3a\u592a\u591a\u592a\u591a\uff0c\u53bb\u6d4f\u89c8\u641c\u7d22\u6b21\u6570\uff0c\u4e13\u95e8\u4eba\u5de5\u8c03\u6574\u7f51\u9875\u4f18\u5316\u662f\u884c\u4e0d\u901a\u7684\uff0c\u53ea\u80fd\u901a\u8fc7\u5927\u91cf\u6709\u6548\u7684\u5185\u5bb9\u548c\u7f51\u7ad9\u7ed3\u6784\u4e0a\u7684\u4f18\u5316\u6765\u4fdd\u8bc1\u7f51\u9875\u6536\u5f55\u3002\u53ea\u6709\u5173\u952e\u8bcd\u6316\u6398\u5f97\u597d\uff0c\u8bcd\u5e93\u5efa\u7acb\u5f97\u597d\uff0c\u7f51\u7ad9\u89c4\u6a21\u8db3\u591f\u5927\uff0c\u7f51\u7ad9\u7ed3\u6784\u5408\u7406\uff0c\u9875\u9762\u57fa\u672c\u4f18\u5316\uff0c\u957f\u5c3e\u8bcd\u6392\u540d\u624d\u80fd\u5168\u9762\u63d0\u5347\u3002 SEO\u4f18\u5316 \u4e00\u3001\u505a\u597d\u5173\u952e\u8bcd\u6316\u6398 \u5148\u5c06\u6316\u6398\u51fa\u7684\u957f\u5c3e\u5173\u952e\u5b57\u8fdb\u884c\u5206\u7c7b\uff0c\u8425\u9500\u578b\u5173\u952e\u5b57\u7528\u4e8e\u6587\u7ae0\u5185\u5bb9\u9875\uff0c\u76ee\u6807\u957f\u5c3e\u8bcd\u7528\u4e8e\u4ea7\u54c1\u9875\u9762\uff0c\u4e24\u8005\u7684\u533a\u522b\u5728\u4e8e\uff0c\u76ee\u6807\u957f\u5c3e\u8bcd\u7528\u6237\u7684\u641c\u7d22\u610f\u56fe\u975e\u5e38\u660e\u786e\uff0c\u5373\u60f3\u8981\u4e86\u89e3\u4ea7\u54c1\uff0c\u800c\u8425\u9500\u578b\u957f\u5c3e\u8bcd\u7528\u6237\u6ca1\u6709\u5f3a\u70c8\u7684\u9700\u6c42\uff0c\u53ef\u80fd\u53ea\u662f\u7a81\u7136\u95f4\u60f3\u8981\u521d\u6b65\u4e86\u89e3\u67d0\u4e2a\u4ea7\u54c1\u3002 \u4e8c\u3001\u957f\u5c3e\u5173\u952e\u8bcd\u5e03\u5c40 \u957f\u5c3e\u5b57\u578b\u5e03\u5c40\uff0c\u5c31\u50cf\u9996\u9875\u5b57\u578b\u5e03\u5c40\u4e00\u6837\uff0c\u6211\u4eec\u8981\u628a\u957f\u5c3e\u5b57\u578b\u5e03\u5c40\u653e\u5728\u6587\u7ae0\u5185\u9875\u7684\u6807\u9898\u3001\u63cf\u8ff0\u3001\u5173\u952e\u5b57\u4e0a\uff0c\u540c\u65f6\u5c3d\u91cf\u5728\u6587\u7ae0\u4e2d\u591a\u6b21\u51fa\u73b0\uff0c\u5207\u5fcc\u523b\u610f\u5806\u79ef\uff0c\u56e0\u4e3a\u641c\u7d22\u5f15\u64ce\u73b0\u5728\u975e\u5e38\u8ba8\u538c\u5173\u952e\u8bcd\u5806\u79ef\u884c\u4e3a\uff0c\u5f88\u5bb9\u6613\u4e8b\u4e0e\u613f\u8fdd\u3002\u5173\u952e\u8bcd\u51fa\u73b0\u6b21\u6570\u8d8a\u591a\uff0c\u9875\u9762\u5173\u952e\u8bcd\u7684\u5bc6\u5ea6\u8d8a\u5927\u3002 \u4e09\u3001\u5185\u5bb9\u53d1\u8868 \u505a\u5185\u5bb9\u7f16\u8f91\u65f6\uff0c\u8981\u5206\u6790\u957f\u5c3e\u5173\u952e\u8bcd\u7684\u6838\u5fc3\u9700\u6c42\uff0c\u4e00\u65b9\u9762\u53ef\u4ee5\u901a\u8fc7\u767e\u5ea6\u8fdb\u884c\u4e0b\u62c9\u548c\u76f8\u5173\u641c\u7d22\uff0c\u53e6\u4e00\u65b9\u9762\u53ef\u4ee5\u901a\u8fc7\u6392\u540d\u7ed3\u679c\u6765\u5224\u65ad\u7ade\u4e89\u7f51\u7ad9\u7684\u5185\u5bb9\u662f\u5982\u4f55\u5199\u51fa\u6765\u7684\uff0c\u65e2\u7136\u80fd\u6392\u4e0a\u53bb\uff0c\u80af\u5b9a\u6709\u4e00\u5b9a\u7684\u9053\u7406\u3002\u89e3\u6790\u7528\u6237\u662f\u5982\u4f55\u521b\u4f5c\u5185\u5bb9\u7684\uff0c\u6293\u4f4f\u7528\u6237\u7684\u54ea\u4e9b\u75db\u70b9\u3002\u6709\u4ec0\u4e48\u533a\u522b\u9700\u8981\u53bb\u505a\uff0c\u6709\u4ec0\u4e48\u533a\u522b\u9700\u8981\u53bb\u89e3\u51b3\uff0c\u6709\u4ec0\u4e48\u533a\u522b\u9700\u8981\u53bb\u505a\u56fe\u6587\u642d\u914d\u3002 \u8fd9\u4e2a\u6807\u9898\u8981\u5305\u542b\u957f\u5c3e\u5355\u8bcd \uff0c\u540c\u65f6\u7b26\u5408\u7528\u6237\u7684\u641c\u7d22\u4e60\u60ef\uff0c\u53ef\u4ee5\u6fc0\u53d1\u7528\u6237\u7684\u70b9\u51fb\u6b32\u671b\u3002 \u77ed\u6587\u4e2d\u7684\u7b2c\u4e00\u6bb5\u8981\u6709\u957f\u5c3e\u8bcd\uff0c\u53ef\u4ee5\u5bf9\u5b83\u8fdb\u884c\u52a0\u7c97\uff0c\u77ed\u6587\u7684\u4e2d\u95f4\u6bb5\u8981\u6709\u957f\u5c3e\u8bcd\uff0c\u77ed\u6587\u7684\u672b\u6bb5\u4e5f\u8981\u6709\u957f\u5c3e\u5173\u952e\u8bcd\u3002 \u81ea\u7136\u5730\u3001\u9002\u5f53\u5730\u51fa\u73b0\u957f\u5c3e\u6587\u5b57\uff0c\u4e0d\u4f1a\u5f71\u54cd\u7528\u6237\u7684\u6d4f\u89c8\u4f53\u9a8c\u3002 \u5728\u6587\u7ae0\u5185\u9875\u672b\u5c3e\u53ef\u4ee5\u6dfb\u52a0\u76f8\u5173\u7684\u63a8\u8350\u6587\u7ae0\uff0c\u4ee5\u51cf\u5c11\u7528\u6237\u7684\u8df3\u51fa\u7387\uff0c\u63a8\u8350\u7684\u6587\u7ae0\u8981\u4e0e\u672c\u6587\u76f8\u5173 \uff0c\u5bf9\u7528\u6237\u7684\u9700\u6c42\u8d77\u5230\u8865\u5145\u4f5c\u7528\u3002 \u56db\u3001\u505a\u597d\u5185\u5916\u8054\u63a5 \u7f51\u9875\u8981\u548c\u7f51\u9875\u4e00\u8d77\u505a\u5b9a\u4f4d\u6587\u5b57\uff0c\u5982\u679cA\u7f51\u9875\u51fa\u73b0\u4e86B\u7f51\u9875\u7684\u957f\u5c3e\u6587\u5b57\uff0c\u90a3\u4e48\u6211\u4eec\u5c06A\u7f51\u9875\u7684\u5b9a\u4f4d\u6587\u5b57\u52a0\u5230B\u7f51\u9875\u4e0a \uff0c\u8fd9\u6837\u5c31\u4f1a\u6709\u6743\u91cd\u4f20\u9012\u3002\u8fd1\u5e74\u6765\uff0c\u5916\u94fe\u6e20\u9053\u7684\u5efa\u8bbe\u96be\u5ea6\u8f83\u5927\uff0c\u5982\u679c\u6211\u4eec\u6709\u597d\u7684\u5916\u94fe\u6e20\u9053\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8d77\u6765\u6784\u5efa\u4e00\u4e9b\u91cd\u8981\u7684\u957f\u5c3e\u8bcd\uff0c\u901a\u8fc7\u5916\u94fe\u6295\u7968\u548c\u6743\u91cd\u4f20\u9012\u6765\u83b7\u5f97\u8fd9\u4e9b\u957f\u5c3e\u8bcd\u7684\u826f\u597d\u6392\u540d\u3002 \u4ec0\u4e48\u662f\u5b9a\u4f4d\u6587\u5b57\uff1f \u951a\u6587\u672c \uff08\u6709\u65f6\u79f0\u4e3a\u53ef\u70b9\u51fb \u6587\u672c t\uff09\u662f\u8d85\u94fe\u63a5\u7f16\u7801\u7684\u91cd\u8981\u90e8\u5206\uff0c\u8d85\u94fe\u63a5\u7f16\u7801\u5c06\u56fe\u50cf\u6216\u5355\u8bcd\u8fde\u63a5\u5230\u53e6\u4e00\u4e2a\u7f51\u9875\u6216\u9875\u9762\u7684\u4e00\u90e8\u5206\u3002 \u8d85\u94fe\u63a5\u5305\u542b\u5bf9\u7f51\u7edc\u51b2\u6d6a\u8005\u4e0d\u53ef\u89c1\u7684\u7f51\u7ad9\u5730\u5740\u4ee5\u53ca\u951a\u6587\u672c\uff0c\u8be5\u951a\u6587\u672c\u53ef\u89c1\uff0c\u5e76\u5411\u67e5\u770b\u8005\u663e\u793a\u94fe\u63a5\u7684\u94fe\u63a5\u4f4d\u7f6e\u3002 \u51e1\u672c\u7f51\u6ce8\u660e\"\u6765\u6e90\uff1aXXX \"\u7684\u6587/\u56fe/\u89c6\u9891\u7b49\u7a3f\u4ef6\uff0c\u672c\u7f51\u8f6c\u8f7d\u51fa\u4e8e\u4f20\u9012\u66f4\u591a\u4fe1\u606f\u4e4b\u76ee\u7684\uff0c\u5e76\u4e0d\u610f\u5473\u7740\u8d5e\u540c\u5176\u89c2\u70b9\u6216\u8bc1\u5b9e\u5176\u5185\u5bb9\u7684\u771f\u5b9e\u6027\u3002\u5982\u6d89\u53ca\u4f5c\u54c1\u5185\u5bb9\u3001\u7248\u6743\u548c\u5176\u5b83\u95ee\u9898\uff0c\u8bf7\u4e0e\u672c\u7f51\u8054\u7cfb\uff0c\u6211\u4eec\u5c06\u5728\u7b2c\u4e00\u65f6\u95f4\u5220\u9664\u5185\u5bb9\uff01 \u4f5c\u8005: \u6211\u662f\u94b1\u535a\u5ba2 \u6765\u6e90\uff1a https://www.woshiqian.com/post/48146.html","title":"\u5982\u4f55\u505a\u597d\u957f\u5c3e\u5173\u952e\u8bcdSEO\u4f18\u5316"},{"location":"pages/affiliate/meta-description/","text":"\u5982\u4f55\u7f16\u5199\u5b8c\u7f8e\u7684\u5143\u63cf\u8ff0\uff1f \u00b6 HTML \u5c5e\u6027\uff0c\u7528\u4e8e\u63cf\u8ff0\u9875\u9762\u5185\u5bb9\u3002\u5b83\u53ef\u4ee5\u5728\u641c\u7d22\u7ed3\u679c\u4e2d\u4ee5\u6458\u5f55\u7684\u5f62\u5f0f\u51fa\u73b0\u5728 \u5143\u63cf\u8ff0\u662f\u4e00\u4e2a\u5c5e\u6027\uff0c\u7528\u4e8e\u63cf\u8ff0\u9875\u9762\u5185\u5bb9\u3002\u5b83\u53ef\u4ee5\u5728\u641c\u7d22\u7ed3\u679c\u4e2d\u4ee5\u6458\u5f55\u7684\u5f62\u5f0f\u51fa\u73b0\u5728 \u6807\u9898\u6807\u7b7e \u4e0b\u65b9\uff0c\u4ee5\u63d0\u4f9b\u66f4\u591a\u5185\u5bb9\u3002 \u4ee5\u4e0b\u662f\u4ee3\u7801\u6bb5\u7684\u5916\u89c2: 1 <meta name= \"description\" content= \"Site Explorer runs on a huge database of 12 trillion links and 402 million tracked keywords to give you the most complete SEO data about any website or URL.\"> \u867d\u7136\u5143\u63cf\u8ff0\u5c5e\u6027 \u4e0d\u662f\u4e00\u4e2a\u6392\u540d\u56e0\u7d20 \uff0c\u52a0\u4e4b Google \u4ec5\u6709 62.78\uff05 \u7684\u65f6\u95f4\u4f1a\u5728\u641c\u7d22\u7ed3\u679c\u4e2d\u663e\u793a\u5b83 \uff0c\u4f46\u5b83\u4ecd\u7136\u662f\u5185\u5bb9\u53d1\u5e03\u8005\u7ecf\u5e38\u9047\u5230\u7684 \u9875\u9762 SEO \u7684\u4e00\u90e8\u5206\u3002 \u5728\u672c\u6307\u5357\u4e2d\uff0c\u4f60\u5c06\u5b66\u4e60\u5982\u4f55\u5feb\u901f\u521b\u5efa\u51fa\u8272\u7684\u5143\u63cf\u8ff0\u4ee5\u53ca\u5982\u4f55\u6709\u6548\u5730\u5ba1\u6838\u5b83\u4eec\u3002\u4f46\u662f\u9996\u5148\uff0c\u8ba9\u6211\u6765\u89e3\u91ca\u4e00\u4e0b\uff0c\u4e3a\u4ec0\u4e48\u5143\u63cf\u8ff0\u5728 SEO \u4e2d\u770b\u8d77\u6765\u4e0d\u592a\u91cd\u8981\uff0c\u5374\u4ecd\u7136\u5f88\u91cd\u8981\u3002 \u4e3a\u4ec0\u4e48\u5143\u63cf\u8ff0\u4ecd\u7136\u5f88\u91cd\u8981 \u5982\u4f55\u7f16\u5199\u5143\u63cf\u8ff0 \u5982\u4f55\u5224\u65ad\u5143\u63cf\u8ff0\u521b\u5efa\u548c\u7f16\u8f91\u7684\u4f18\u5148\u7ea7 \u51fa\u8272\u7684\u5143\u63cf\u8ff0\u793a\u4f8b \u5143\u63cf\u8ff0\u4e3a\u4f55\u4ecd\u7136\u91cd\u8981 \u00b6 \u4e00\u4e2a\u5f15\u4eba\u5165\u80dc\u7684\u5143\u63cf\u8ff0\u4f1a\u5438\u5f15\u66f4\u591a\u4eba\u5728\u641c\u7d22\u7ed3\u679c\u4e2d\u70b9\u51fb\u4f60\u7684\u7f51\u7ad9\u3002 \u5373\u4f7f Google \u4ec5\u5728 37\uff05 \u7684\u65f6\u95f4 \u5185\u663e\u793a\u5143\u63cf\u8ff0\uff0c\u8fd9\u4e00\u70b9\u4e5f\u5f88\u91cd\u8981\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4f60\u7684\u9875\u9762\u6bcf\u6708\u83b7\u5f97 50,000 \u6b21\u8bbf\u95ee\u91cf\uff0cGoogle \u4f1a\u663e\u793a\u5e73\u5747 18,500 \u6b21\u8bbf\u95ee\u91cf\u7684\u5143\u63cf\u8ff0\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5373\u4f7f\u4f60\u7684\u9875\u9762\u70b9\u51fb\u7387\u53ea\u662f\u4ece 4\uff05 \u589e\u52a0\u5230 4.5\uff05\uff0c\u4e5f\u4f1a\u589e\u52a0\u8fd1 100 \u6b21\u70b9\u51fb\u91cf\u3002 \u56e0\u6b64\uff0c\u867d\u7136\u4f60\u4e0d\u5e94\u82b1\u592a\u591a\u7684\u65f6\u95f4\u5728\u5143\u63cf\u8ff0\u4e0a\uff0c\u4f46\u82b1\u4e00\u5206\u949f\u56de\u7b54\u9875\u9762\u4e2d\u7684\u4e00\u4e2a\u95ee\u9898\u8fd8\u662f\u503c\u5f97\u7684\uff1a \u8be5\u9875\u9762\u662f\u5426\u65e8\u5728\u63a8\u52a8\u81ea\u7136\u6d41\u91cf\uff1f \u662f\u5426\u6709\u53ef\u80fd\u5728\u793e\u4ea4\u5a92\u4f53\u4e0a\u5171\u4eab\u8be5\u9875\u9762\uff1f \u7b2c\u4e8c\u4e2a\u95ee\u9898\u53ef\u80fd\u9700\u8981\u4e00\u4e9b\u89e3\u91ca\u3002 \u4f60\u53ef\u4ee5\u770b\u5230\uff0c\u5f53\u4e00\u4e2a\u9875\u9762\u88ab\u5171\u4eab\u5728\u793e\u4ea4\u5a92\u4f53\u4e0a\u65f6\uff0c\u5b83\u4f1a\u4ece Open Graph meta tags \uff08\u5f00\u653e\u56fe\u5143\u6807\u8bb0\uff09\u4e2d\u63d0\u53d6\u63cf\u8ff0\u3002 \u4f46\u662f\uff0c\u5982\u679c\u4f60\u5c1a\u672a\u8bbe\u7f6e OG \u6216 Twitter \u63cf\u8ff0\uff0c\u5b83\u4f1a\u663e\u793a\u5143\u63cf\u8ff0\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u4f60\u53ea\u60f3\u8bbe\u7f6e\u5176\u4e2d\u4e00\u4e2a\u6807\u8bb0\uff0c\u5219\u5e94\u8bbe\u7f6e\u5143\u63cf\u8ff0\u3002 \u8fdb\u5165\u521b\u5efa\u8fc7\u7a0b.\u2026 \u5982\u4f55\u64b0\u5199\u5143\u63cf\u8ff0 \u00b6 \u8bf7\u6309\u7167\u4ee5\u4e0b\u4e94\u4e2a\u6b65\u9aa4\u5feb\u901f\u8f7b\u677e\u5730\u521b\u5efa\u4f60\u7684\u5143\u63cf\u8ff0\uff1a \u5c55\u5f00\u6807\u9898\u6807\u7b7e \u5339\u914d\u641c\u7d22\u610f\u56fe \u4f7f\u7528\u4e3b\u52a8\u8bed\u6001 \u7b80\u660e\u627c\u8981 \u90e8\u7f72\u5143\u63cf\u8ff0 \u73b0\u5728\u5f00\u59cb\u5427\u3002 1. \u5c55\u5f00\u6807\u9898\u6807\u7b7e \u00b6 \u59cb\u7ec8\u5c06\u63cf\u8ff0\u89c6\u4e3a\u5bf9 \u6807\u9898\u6807\u7b7e \u7684\u8865\u5145\u3002\u6807\u9898\u5e94\u8be5\u4f7f\u7528\u4e00\u4e9b\u4e3b\u9898\u76f8\u5173\u7684\u4e3b\u8981\u5173\u952e\u8bcd\u6765\u6982\u62ec\u9875\u9762\u3002\u5143\u63cf\u8ff0\u5219\u662f\u4e00\u4e2a\u8fdb\u4e00\u6b65\u8865\u5145\u5185\u5bb9\u7684\u673a\u4f1a\u3002 \u5728\u4e0a\u8ff0\u60c5\u51b5\u4e0b\uff0c\u7b80\u77ed\u7684\u63cf\u8ff0\u5373\u53ef\u6fc0\u53d1\u7528\u6237\u5355\u51fb \u6211\u4eec\u7684\u5931\u6548\u94fe\u63a5\u68c0\u67e5\u5668 \uff0c\u56e0\u4e3a\uff1a \u5b83\u68c0\u67e5\u9875\u9762\u548c\u7f51\u7ad9\u3002 \u5b83\u8003\u8651\u4e86\u5185\u90e8\u548c\u5916\u90e8\u94fe\u63a5\u3002 \u5de5\u5177\u901f\u5ea6\u5f88\u5feb\u3002 \u8fd9\u4e0d\u662f\u4e00\u4e2a\u5f15\u5bfc\u9677\u9631\uff1b\u4f60\u53ef\u4ee5\u76f4\u63a5\u5728\u9875\u9762\u4e0a\u4f7f\u7528\u5b83\u3002 \u4e0d\u7528\u62c5\u5fc3\u8fd9\u91cc\u7684\u5173\u952e\u8bcd\u592a\u591a\u4e86\u3002\u66f4\u91cd\u8981\u7684\u662f\uff0c\u4f60\u8981\u521b\u5efa\u4e00\u4e9b\u4e0e\u8bfb\u8005\u76f8\u5173\u5e76\u5438\u5f15\u70b9\u51fb\u7684\u5185\u5bb9\u3002\u5728\u9002\u5f53\u7684\u5730\u65b9\u4f7f\u7528\u4f60\u7684 USP\u3002 2. \u5339\u914d\u641c\u7d22\u610f\u56fe \u00b6 \u641c\u7d22\u610f\u56fe \u5c31\u662f\u4eba\u4eec\u201c\u4e3a\u4ec0\u4e48\u201d\u67e5\u8be2\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5927\u591a\u6570\u4eba\u5728\u641c\u7d22\u4f60\u7684\u4e3b\u8981\u5173\u952e\u8bcd\u65f6\u90fd\u5728\u5bfb\u627e\u4ec0\u4e48\uff1f \u4ed6\u4eec\u9700\u8981\u4ec0\u4e48\u4fe1\u606f\u5417\uff1f \u4ed6\u4eec\u60f3\u4e70\u4ec0\u4e48\u4e1c\u897f\u5417\uff1f \u4ed6\u4eec\u5728\u5bfb\u627e\u4e00\u4e2a\u7279\u5b9a\u7684\u7f51\u7ad9\u5417\uff1f \u4ed6\u4eec\u60f3\u5feb\u901f\u627e\u5230\u4e00\u4e2a\u95ee\u9898\u7684\u7b54\u6848\u5417\uff1f \u4f60\u53ef\u4ee5\u5c06\u641c\u7d22\u7ed3\u679c\u5f53\u4f5c\u4e00\u4e2a\u4ee3\u7406\u4eba\u3002 Google \u81f4\u529b\u4e8e\u4e3a\u641c\u7d22\u8005\u63d0\u4f9b\u6700\u76f8\u5173\u7684\u7ed3\u679c\uff0c\u56e0\u6b64\u8bf7\u5728\u6392\u540d\u9760\u524d\u7684\u9875\u9762\u7247\u6bb5\u4e2d\u5bfb\u627e\u5171\u6027\u3002 \u4f8b\u5982\uff0c\u51e0\u4e4e\u6240\u6709\u201c\u5143\u63cf\u8ff0\u201d\u7684\u7ed3\u679c\u90fd\u5728\u6458\u8981\u4e2d\u663e\u793a\u4e86\u5b9a\u4e49\u2026 \u2026\u2026\u6240\u4ee5\u6211\u4eec\u4e5f\u8981\u8fd9\u4e48\u505a\u3002 \u5176\u4ed6\u7684 SERP \u53ef\u80fd\u6ca1\u6709\u90a3\u4e48\u7b80\u5355\uff0c\u4f46\u662f\u4f60\u603b\u80fd\u627e\u5230\u4e00\u4e9b\u7ebf\u7d22\u3002\u6211\u4eec\u6765\u641c\u7d22\u770b\u770b\u201c\u5982\u4f55\u6253\u9886\u5e26\u201d\uff1a \u6240\u6709\u7684\u7247\u6bb5\u90fd\u8ba8\u8bba\u4e86\u4e0d\u540c\u7c7b\u578b\u7684\u9886\u7ed3\uff0c\u5e76\u4e14\u5927\u591a\u6570\u90fd\u63d0\u5230\u4e86\u5e16\u5b50\u4e2d\u5305\u542b\u9010\u6b65\u8bf4\u660e\u3002 \u8fd9\u544a\u8bc9\u6211\u4eec\u8fd9\u4e9b\u4e1c\u897f\u5bf9\u641c\u7d22\u8005\u53ef\u80fd\u5f88\u91cd\u8981\uff0c\u503c\u5f97\u5305\u542b\u5728\u5143\u63cf\u8ff0\u4e2d\u3002 \u8981\u6ce8\u610f\u5982\u201c\u7ad9\u7acb\u529e\u516c\u684c\u201d\u8fd9\u6837\u6709\u5176\u4ed6\u76ee\u7684\u7684 SERP\u3002 \u4f60\u53ef\u4ee5\u770b\u5230\u8fd9\u91cc\u6709\u5404\u79cd\u5404\u6837\u7684\u7ed3\u679c\u3002\u5176\u4e2d\u4e00\u4e9b\u662f\u8bc4\u8bba\u6700\u597d\u7684\u529e\u516c\u684c\u7684\u535a\u5ba2\u6587\u7ae0\uff0c\u8fd8\u6709\u4e00\u4e9b\u662f\u6765\u81ea\u7ebf\u4e0a\u5e97\u94fa\u7684\u4ea7\u54c1\u5206\u7c7b\u9875\u9762\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u5e94\u8be5\u4ece\u4e0e\u4f60\u53d1\u5e03\u7684\u5185\u5bb9\u7c7b\u578b\u6700\u63a5\u8fd1\u7684\u9875\u9762\u7247\u6bb5\u4e2d\u83b7\u53d6\u7075\u611f\u3002\u5982\u679c\u4f60\u5199\u8fc7\u4e00\u7bc7\u5173\u4e8e\u7acb\u5f0f\u529e\u516c\u684c\u7684\u535a\u5ba2\uff0c\u770b\u770b\u8fd9\u4e9b\u8bc4\u8bba\u5e76\u6bd4\u8f83\u8fd9\u4e9b\u6587\u7ae0\u3002\u5982\u679c\u4f60\u5df2\u7ecf\u521b\u5efa\u4e86\u4e00\u4e2a\u7535\u5b50\u5546\u52a1\u7c7b\u522b\u9875\u9762\uff0c\u8bf7\u67e5\u770b\u8fd9\u4e9b\u9875\u9762\u3002 3. \u4f7f\u7528\u4e3b\u52a8\u8bed\u6001 \u00b6 \u4e3b\u52a8\u8bed\u6001\u4f7f\u63cf\u8ff0\u66f4\u6e05\u6670\uff0c\u5e76\u53ef\u901a\u8fc7\u76f4\u63a5\u5bfb\u5740\u641c\u7d22\u8005\u6765\u5438\u5f15\u70b9\u51fb\u3002 \u4ee5\u4e0b\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a \u4f60\u53ef\u4ee5\u770b\u5230\uff0c\u5b83\u4ee5\u52a8\u8bcd\u5f00\u5934\uff0c\u5e76\u4f7f\u641c\u7d22\u8005\u6210\u4e3a\u53e5\u5b50\u7684\u4e3b\u8bed\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u662f\u641c\u7d22\u8005\u5728\u6267\u884c\u6b64\u64cd\u4f5c\u3002 \u73b0\u5728\u6765\u770b\u8fd9\u4e2a\uff1a \u4e0e\u7b2c\u4e00\u4e2a\u4f8b\u5b50\u76f8\u6bd4\uff0c\u5b83\u67af\u71e5\u4e14\u7f3a\u4e4f\u52a8\u529b\u3002\u8fd9\u662f\u56e0\u4e3a\u5b83\u662f\u7528\u88ab\u52a8\u8bed\u6001\u5199\u7684\u3002 \u5c0f\u63d0\u793a. \u6211\u5199\u4e86\u4e00\u4e2a\u8f83\u5dee\u7684\u4f8b\u5b50\u6765\u8bc1\u5b9e\u8fd9\u4e00\u89c2\u70b9\u3002 \u8fd9\u4e0d\u662f\u4e00\u4e2a\u771f\u5b9e\u7684\u63cf\u8ff0\u3002 \u5f53\u7136\uff0c\u7528\u4e3b\u52a8\u8bed\u6001\u5199\u5143\u63cf\u8ff0\u5e76\u4e0d\u603b\u662f\u660e\u667a\u7684\u3002\u4f8b\u5982\u5b83\u4e0d\u9002\u7528\u4e8e\u5b9a\u4e49\u6837\u5f0f\u7684\u63cf\u8ff0\u3002\u4f46\u4e00\u822c\u6765\u8bf4\uff0c\u88ab\u52a8\u8bed\u6001\u662f\u66f4\u597d\u7684\u9009\u62e9\u3002 \u70b9\u51fb \u6b64\u5904 \u4e86\u89e3\u66f4\u591a\u4e3b\u52a8\u548c\u88ab\u52a8\u8bed\u6001\u4e4b\u95f4\u7684\u533a\u522b 4. \u7b80\u660e\u627c\u8981 \u00b6 \u5143\u63cf\u8ff0\u4e0d\u662f\u7528\u6765\u8bb2\u6545\u4e8b\u7684\u3002 \u6bcf\u4e2a\u63aa\u8bcd\u90fd\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u6d4f\u89c8\u7ed3\u679c\u5feb\u901f\u51b3\u5b9a\u8981\u5355\u51fb\u7684\u5185\u5bb9\uff0c\u5e76\u4e14\u63cf\u8ff0\u4f1a\u5728\u4e00\u5b9a\u957f\u5ea6\u540e\u88ab\u622a\u65ad\u3002 \u76ee\u524d\uff0c\u8be5\u957f\u5ea6\u5728\u53f0\u5f0f\u673a\u4e0a\u4e3a 920px\uff08\u7ea6 160 \u4e2a\u5b57\u7b26\uff09\uff0c\u5728\u79fb\u52a8\u8bbe\u5907\u4e0a\u4e3a 680px\uff08\u7ea6 120\u4e2a \u5b57\u7b26\uff09\u3002 \u8ba9\u5b83\u4eec\u4fdd\u6301\u4e00\u5b9a\u957f\u5ea6\u7684\u6700\u4f73\u9009\u62e9\u662f\u4f7f\u7528 \u8fd9\u6837\u7684\u5de5\u5177 \uff0c\u6216\u4f7f\u7528\u50cf Yoast \u8fd9\u6837\u7684\u5185\u7f6e\u529f\u80fd\u7684 WordPress SEO\u63d2\u4ef6 \u3002 \u4e0d\u8bba\u662f\u9488\u5bf9\u79fb\u52a8\u7528\u6237\u8fd8\u662f\u53f0\u5f0f\u7528\u6237\uff0c\u4f60\u7684\u4f18\u5316\u6548\u679c\u6700\u597d\u53d6\u51b3\u4e8e\u4f60\u7684\u53d7\u4f17\u3002\u5982\u679c\u4f60\u901a\u5e38\u60f3\u4e3a\u53f0\u5f0f\u7528\u6237\u63d0\u4f9b\u66f4\u957f\u7684\u63cf\u8ff0\uff0c\u90a3\u4e48\u8bf7\u786e\u4fdd\u4ee5 \u00be \u7684\u7bc7\u5e45\u6765\u6293\u4f4f\u91cd\u70b9\uff0c\u8fd9\u6837\u5373\u4f7f\u662f\u79fb\u52a8\u7528\u6237\u4e5f\u80fd\u770b\u5230\u3002 \u8fd9\u91cc\u7684\u8981\u70b9\u662f\u4ec0\u4e48\uff1f \u4e3a\u7528\u6237\uff0c\u800c\u4e0d\u662f\u641c\u7d22\u5f15\u64ce\uff0c\u505a\u5230\u7b80\u6d01\u660e\u4e86\u3002 \u957f\u5ea6\u9650\u5236\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u63d0\u793a\uff0c\u63d0\u793a\u4f60\u8fd9\u4e2a\u63cf\u8ff0\u53ef\u80fd\u6709\u4e00\u4e9b\u4e0d\u5fc5\u8981\u7684\u63aa\u8bcd\u3002 5. \u90e8\u7f72\u5143\u63cf\u8ff0 \u00b6 \u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f CMS\uff0c\u8fd9\u975e\u5e38\u5bb9\u6613\u64cd\u4f5c\u3002\u5728 Wix\u3001Squarespace\u3001Shopify \u548c\u5176\u4ed6\u5927\u591a\u6570\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u4f60\u53ef\u4ee5\u5728\u540e\u7aef\u627e\u5230\u952e\u5165\u6216\u7c98\u8d34\u5143\u63cf\u8ff0\u7684\u4f4d\u7f6e\u3002 \u5728 WordPress \u4e2d\uff0c\u50cf Yoast \u548c RankMath \u8fd9\u6837\u7684\u63d2\u4ef6\u6dfb\u52a0\u4e86\u76f8\u540c\u7684\u529f\u80fd\u3002 \u5982\u679c\u4f60\u4f7f\u7528\u7684\u4e0d\u662f CMS\uff0c\u53ea\u9700\u5c06\u5143\u63cf\u8ff0\u6807\u8bb0\u7c98\u8d34\u5230 HTML \u4ee3\u7801\u7684 <head> \u90e8\u5206\u3002 \u4e13\u5bb6\u63d0\u793a \u5982\u679c\u4f60\u8981\u76f4\u63a5\u5c06\u5143\u63cf\u8ff0\u6dfb\u52a0\u5230\u4ee3\u7801\u4e2d\uff0c\u8bf7\u4e0d\u8981\u5728\u63cf\u8ff0\u4e2d\u4f7f\u7528\u5f15\u53f7\uff0c\u56e0\u4e3a\u8fd9\u6837\u4f1a\u7834\u574f\u4ee3\u7801\u3002\u76f8\u53cd\uff0c\u8bf7\u4f7f\u7528 HTML \" \u5b9e\u4f8b\uff0c\u5982\u4e0b\u6240\u793a\uff1a <meta name=\"description\" content=\"Just showing how to use &quot;quotation marks&quot; in meta description.\"> \u5982\u679c\u5728 CMS \u548c\u63d2\u4ef6\u4e2d\u6dfb\u52a0\u5143\u63cf\u8ff0\u65f6\u4f7f\u7528\u5f15\u53f7\uff0c\u5b83\u4eec\u901a\u5e38\u4f1a\u4e3a\u4f60\u5904\u7406 HTML \u8f6c\u7801\u3002 \u5982\u4f55\u4e3a\u5143\u63cf\u8ff0\u64b0\u5199\u548c\u7f16\u8f91\u5206\u51fa\u4f18\u5148\u7ea7 \u00b6 \u53d1\u5e03\u8fc7\u7a0b\u5e76\u4e0d\u662f\u552f\u4e00\u4e00\u4e2a\u9700\u8981\u8003\u8651\u5143\u63cf\u8ff0\u7684\u65f6\u5019\u3002\u4f60\u53ef\u80fd\u5df2\u7ecf\u6709\u4e00\u4e9b\u9519\u8bef\u7684\u5143\u63cf\u8ff0\u6216\u6839\u672c\u6ca1\u6709\u5143\u63cf\u8ff0\u7684\u9875\u9762\u3002 \u6ca1\u6709\u5fc5\u8981\u5ba1\u6838\u4f60\u6574\u4e2a\u7f51\u7ad9\u7684\u5143\u63cf\u8ff0\u3002\u76f8\u53cd\uff0c\u5e94\u8be5\u5173\u6ce8\u90a3\u4e9b\u641c\u7d22\u6d41\u91cf\u6700\u5927\u7684\u9875\u9762\u3002\u8fd9\u65f6\uff0c\u4e00\u4e2a\u66f4\u597d\u7684\u5143\u63cf\u8ff0\u53ef\u4ee5\u5e26\u6765\u771f\u6b63\u7684\u6539\u53d8\u3002 \u4f60\u53ef\u4ee5\u5728 Ahrefs \u7684\u7f51\u7ad9\u7ba1\u7406\u5de5\u5177 \u4e2d\u627e\u5230\u8fd9\u4e9b\u9875\u9762\u3002\u53ea\u9700\u6ce8\u518c\u4e00\u4e2a\u514d\u8d39\u5e10\u6237\uff0c\u4f7f\u7528 \u7f51\u7ad9\u8bca\u65ad \u8fd0\u884c\u722c\u7f51\uff0c\u7136\u540e\u8f6c\u5230 Page Explorer\uff08\u9875\u9762\u5206\u6790\uff09 \u5e76\u5e94\u7528\u4ee5\u4e0b\u7b5b\u9009\u5668\uff1a \u63a5\u4e0b\u6765\uff0c\u5355\u51fb\u201c Manage columns \u201d\uff08\u7ba1\u7406\u5217\uff09\u6309\u94ae\u5e76\u9009\u62e9\u201c Organic traffic \u201d\uff08\u81ea\u7136\u6d41\u91cf\uff09\u3001\u201c Meta description \u201d\uff08\u5143\u63cf\u8ff0\uff09\u548c\u201c Meta description length \u201d\uff08\u5143\u63cf\u8ff0\u957f\u5ea6\uff09\uff1a \u6700\u540e\uff0c\u6839\u636e\u9875\u9762\u7684\u81ea\u7136\u6d41\u91cf\u5bf9\u9875\u9762\u8fdb\u884c\u6392\u5e8f\uff1a \u73b0\u5728\uff0c\u4f60\u6b63\u5728\u67e5\u770b\u4f60\u6700\u91cd\u8981\u7684\u5143\u63cf\u8ff0\u3002\u68c0\u67e5\u90a3\u4e9b\u4e0d\u597d\u6216\u5b8c\u5168\u4e22\u5931\u7684\u63cf\u8ff0\u3002 \u867d\u7136\u6211\u63a8\u8350\u4f7f\u7528\u8fd9\u79cd\u201c\u5305\u7f57\u4e07\u8c61\u201d\u7684\u65b9\u6cd5\uff0c\u4f46\u4f60\u4e5f\u53ef\u4ee5\u9009\u62e9\u53ea\u68c0\u67e5\u7f3a\u5c11\u7684\u5143\u63cf\u8ff0\u3002\u90a3\u4f1a\u66f4\u7b80\u5355\uff0c\u56e0\u4e3a\u5b83\u4eec\u76f4\u63a5\u5728 \u9875\u9762 \u62a5\u544a\u4e2d\u62a5\u544a\u663e\u793a\uff1a \u5355\u51fb\u201c\u67e5\u770b\u53d7\u5f71\u54cd\u7684 URL \u201d\u6309\u94ae\u6253\u5f00\u62a5\u544a\uff0c\u5e76\u6309\u81ea\u7136\u6d41\u91cf\u5bf9\u9875\u9762\u8fdb\u884c\u6392\u5e8f\uff0c\u4ee5\u6b63\u786e\u786e\u5b9a\u4f18\u5148\u7ea7\uff1a \u8fd9\u662f\u4e00\u4e2a\u76f8\u5f53\u5bb9\u6613\u7684\u5ba1\u67e5\uff0c\u5bf9\u5427\uff1f\u518d\u6765\u70b9\u5199\u4f5c\u7075\u611f\u600e\u4e48\u6837\uff1f \u51fa\u8272\u7684\u5143\u63cf\u8ff0\u793a\u4f8b \u00b6 \u8ba9\u6211\u4eec\u7528\u4e00\u4e9b\u7cbe\u5fc3\u5236\u4f5c\u7684\u8de8\u884c\u4e1a\u548c\u641c\u7d22\u610f\u56fe\u7684\u5143\u63cf\u8ff0\u7684\u4f8b\u5b50\u6765\u603b\u7ed3\u4e00\u4e0b\u3002 1. Healthline \u00b6 \u5927\u591a\u6570\u641c\u7d22\u8005\u4f3c\u4e4e\u90fd\u5728\u8fd9\u91cc\u5bfb\u627e\u4e00\u4e2a\u5b9a\u4e49\uff0c\u6240\u4ee5\u8fd9\u5c31\u662f\u8be5\u5143\u63cf\u8ff0\u6240\u663e\u793a\u7684\u5185\u5bb9\u3002\u7136\u540e\uff0c\u5b83\u4f1a\u63d0\u793a\u8bfb\u8005\u5355\u51fb\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u7518\u6c28\u9178\u7684\u76ca\u5904\u3002\u8fd9\u5f88\u7b80\u5355\u9ad8\u6548\u3002 2. TimeOut \u00b6 \u6211\u4ee5\u4e3a\u6211\u4f1a\u5728\u641c\u7d22\u7ed3\u679c\u91cc\u770b\u5230\u597d\u574f\u53c2\u534a\u7684\u9644\u8fd1\u5730\u533a\u548c\u9152\u5e97\uff0c\u4f46\u7ed3\u679c\u4e3b\u8981\u96c6\u4e2d\u5728\u5e03\u62c9\u683c\u5730\u533a\uff0c\u5e76\u4e14\u6b64\u63cf\u8ff0\u4e0e\u610f\u56fe\u5b8c\u5168\u5339\u914d\u3002\u5b83\u4ee5\u7b80\u6d01\uff0c\u8f7b\u677e\u548c\u53ef\u884c\u7684\u65b9\u5f0f\u63d0\u4f9b\u4e86\u4e00\u79cd\u89e3\u51b3\u65b9\u6848\u3002\u63d0\u5230\u201c\u4e94\u4e2a\u6700\u597d\u7684\u201d\u793e\u533a\u4e5f\u544a\u8bc9\u641c\u7d22\u8005\u4eec\uff0c\u4ed6\u4eec\u4e0d\u9700\u82b1\u5f88\u591a\u65f6\u95f4\u9605\u8bfb\u5b83\u3002 3. Patagonia \u00b6 \u5728\u8fd9\u91cc\uff0c\u641c\u7d22\u8005\u6b63\u5728\u5bfb\u627e\u7279\u4ef7\u5546\u54c1\u3002\u6211\u6700\u521d\u559c\u6b22\u7d27\u6025\u4fe1\u53f7\uff1b\u5b83\u770b\u8d77\u6765\u6bd4\u8fd9\u4e9b\u8d8b\u52bf\u66f4\u5177\u539f\u521b\u6027\u4e14\u4fb5\u7565\u6027\u4e0d\u90a3\u4e48\u5f3a\u3002\u7136\u540e\uff0c\u4f60\u4f1a\u8fbe\u5230\u641c\u7d22\u7684\u76ee\u7684\uff0c\u6700\u540e\u770b\u5230 Patagonia \u7684\u72ec\u7279\u4e4b\u5904\uff1a\u652f\u6301\u53ef\u6301\u7eed\u6027\u548c\u4fdd\u62a4\u3002 4. Nordstrom \u00b6 \u8fd9\u662f\u641c\u7d22\u7ed3\u679c\u4e2d\u51fa\u8272\u7684\u7535\u5b50\u5546\u52a1\u7c7b\u522b\u9875\u9762\u7684\u7f29\u5f71\u3002 Nordstrom \u53ef\u80fd\u4f1a\u5728\u8fd9\u91cc\u5217\u51fa\u4ed6\u4eec\u6700\u53d7\u6b22\u8fce\u7684\u5916\u5957\u548c\u54c1\u724c\u3002\u514d\u8d39\u9001\u8d27\u4e5f\u53ef\u80fd\u662f\u8fd9\u4e9bSERP\u7684\u4e00\u4e2aUSP\uff0c\u56e0\u4e3a\u53ea\u6709\u4e00\u4e2a\u7ed3\u679c\u63d0\u5230\u4e86\u5b83\u3002 5. Shopify \u00b6 \u6211\u4eec\u7684\u6700\u540e\u4e00\u4e2a\u793a\u4f8b\u662f\u4e00\u4e2a\u4e3b\u9875\u3002\u8fd9\u662f\u5b83\u81ea\u5df1\u7684\u7c7b\u522b\uff0c\u56e0\u4e3a\u4f60\u5fc5\u987b\u53cd\u6620\u81ea\u5df1\u7684\u54c1\u724c\u548c\u6240\u505a\u7684\u4e8b\u3002 Shopify \u505a\u5f97\u5f88\u597d\u3002\u663e\u800c\u6613\u89c1\uff0c\u5b83\u4f1a\u63d0\u793a\u4f60\u514d\u8d39\u8bd5\u7528\u8be5\u670d\u52a1\u3002 \u6211\u5efa\u8bae\u4e3b\u9875\u662f\u4f60\u552f\u4e00\u4e00\u4e2a\u82b1\u66f4\u591a\u65f6\u95f4\u5728\u5143\u63cf\u8ff0\u4e0a\u7684\u9875\u9762\uff0c\u56e0\u4e3a\u5b83\u4e3b\u8981\u51fa\u73b0\u5728\u610f\u56fe\u660e\u786e\u7684\u54c1\u724c\u67e5\u8be2\u4e2d\u3002\u56e0\u6b64\uff0cGoogle \u66f4\u6709\u53ef\u80fd\u5728 SERP \u4e2d\u663e\u793a\u5176\u5143\u63cf\u8ff0\u3002 \u7ed3\u8bed \u00b6 \u5143\u63cf\u8ff0\u662f\u5927\u591a\u6570\u4eba\u8fdb\u5165 SEO \u9886\u57df\u65f6\u9047\u5230\u7684\u7b2c\u4e00\u4e2a\u4e3b\u9898\u4e4b\u4e00\u3002 \u5e78\u8fd0\u7684\u662f\uff0c\u5b83\u4e5f\u662f\u6700\u5bb9\u6613\u7406\u89e3\u548c\u638c\u63e1\u7684\u4e3b\u9898\uff0c\u56e0\u6b64\u4f60\u65e0\u9700\u82b1\u8d39\u592a\u591a\u65f6\u95f4\u3002 \u8bf7\u67e5\u770b\u6211\u4eec\u7684 \u53ef\u6267\u884c\u7684 SEO \u5c0f\u6280\u5de7\u5217\u8868 \uff0c\u67e5\u770b\u66f4\u591a\u9488\u5bf9 SEO \u7684\u64cd\u4f5c\u3002 \u6709\u4ec0\u4e48\u95ee\u9898\u5417\uff1f\u6765 Twitter \u8054\u7cfb\u6211 \u51e1\u672c\u7f51\u6ce8\u660e\"\u6765\u6e90\uff1aXXX \"\u7684\u6587/\u56fe/\u89c6\u9891\u7b49\u7a3f\u4ef6\uff0c\u672c\u7f51\u8f6c\u8f7d\u51fa\u4e8e\u4f20\u9012\u66f4\u591a\u4fe1\u606f\u4e4b\u76ee\u7684\uff0c\u5e76\u4e0d\u610f\u5473\u7740\u8d5e\u540c\u5176\u89c2\u70b9\u6216\u8bc1\u5b9e\u5176\u5185\u5bb9\u7684\u771f\u5b9e\u6027\u3002\u5982\u6d89\u53ca\u4f5c\u54c1\u5185\u5bb9\u3001\u7248\u6743\u548c\u5176\u5b83\u95ee\u9898\uff0c\u8bf7\u4e0e\u672c\u7f51\u8054\u7cfb\uff0c\u6211\u4eec\u5c06\u5728\u7b2c\u4e00\u65f6\u95f4\u5220\u9664\u5185\u5bb9\uff01 \u4f5c\u8005: Michal Pec\u00e1nek \u6765\u6e90\uff1a https://ahrefs.com/blog/zh/meta-description/","title":"\u5982\u4f55\u7f16\u5199\u5b8c\u7f8e\u7684\u5143\u63cf\u8ff0"},{"location":"pages/affiliate/meta-description/#\u5982\u4f55\u7f16\u5199\u5b8c\u7f8e\u7684\u5143\u63cf\u8ff0","text":"HTML \u5c5e\u6027\uff0c\u7528\u4e8e\u63cf\u8ff0\u9875\u9762\u5185\u5bb9\u3002\u5b83\u53ef\u4ee5\u5728\u641c\u7d22\u7ed3\u679c\u4e2d\u4ee5\u6458\u5f55\u7684\u5f62\u5f0f\u51fa\u73b0\u5728 \u5143\u63cf\u8ff0\u662f\u4e00\u4e2a\u5c5e\u6027\uff0c\u7528\u4e8e\u63cf\u8ff0\u9875\u9762\u5185\u5bb9\u3002\u5b83\u53ef\u4ee5\u5728\u641c\u7d22\u7ed3\u679c\u4e2d\u4ee5\u6458\u5f55\u7684\u5f62\u5f0f\u51fa\u73b0\u5728 \u6807\u9898\u6807\u7b7e \u4e0b\u65b9\uff0c\u4ee5\u63d0\u4f9b\u66f4\u591a\u5185\u5bb9\u3002 \u4ee5\u4e0b\u662f\u4ee3\u7801\u6bb5\u7684\u5916\u89c2: 1 <meta name= \"description\" content= \"Site Explorer runs on a huge database of 12 trillion links and 402 million tracked keywords to give you the most complete SEO data about any website or URL.\"> \u867d\u7136\u5143\u63cf\u8ff0\u5c5e\u6027 \u4e0d\u662f\u4e00\u4e2a\u6392\u540d\u56e0\u7d20 \uff0c\u52a0\u4e4b Google \u4ec5\u6709 62.78\uff05 \u7684\u65f6\u95f4\u4f1a\u5728\u641c\u7d22\u7ed3\u679c\u4e2d\u663e\u793a\u5b83 \uff0c\u4f46\u5b83\u4ecd\u7136\u662f\u5185\u5bb9\u53d1\u5e03\u8005\u7ecf\u5e38\u9047\u5230\u7684 \u9875\u9762 SEO \u7684\u4e00\u90e8\u5206\u3002 \u5728\u672c\u6307\u5357\u4e2d\uff0c\u4f60\u5c06\u5b66\u4e60\u5982\u4f55\u5feb\u901f\u521b\u5efa\u51fa\u8272\u7684\u5143\u63cf\u8ff0\u4ee5\u53ca\u5982\u4f55\u6709\u6548\u5730\u5ba1\u6838\u5b83\u4eec\u3002\u4f46\u662f\u9996\u5148\uff0c\u8ba9\u6211\u6765\u89e3\u91ca\u4e00\u4e0b\uff0c\u4e3a\u4ec0\u4e48\u5143\u63cf\u8ff0\u5728 SEO \u4e2d\u770b\u8d77\u6765\u4e0d\u592a\u91cd\u8981\uff0c\u5374\u4ecd\u7136\u5f88\u91cd\u8981\u3002 \u4e3a\u4ec0\u4e48\u5143\u63cf\u8ff0\u4ecd\u7136\u5f88\u91cd\u8981 \u5982\u4f55\u7f16\u5199\u5143\u63cf\u8ff0 \u5982\u4f55\u5224\u65ad\u5143\u63cf\u8ff0\u521b\u5efa\u548c\u7f16\u8f91\u7684\u4f18\u5148\u7ea7 \u51fa\u8272\u7684\u5143\u63cf\u8ff0\u793a\u4f8b","title":"\u5982\u4f55\u7f16\u5199\u5b8c\u7f8e\u7684\u5143\u63cf\u8ff0\uff1f"},{"location":"pages/affiliate/meta-description/#\u5143\u63cf\u8ff0\u4e3a\u4f55\u4ecd\u7136\u91cd\u8981","text":"\u4e00\u4e2a\u5f15\u4eba\u5165\u80dc\u7684\u5143\u63cf\u8ff0\u4f1a\u5438\u5f15\u66f4\u591a\u4eba\u5728\u641c\u7d22\u7ed3\u679c\u4e2d\u70b9\u51fb\u4f60\u7684\u7f51\u7ad9\u3002 \u5373\u4f7f Google \u4ec5\u5728 37\uff05 \u7684\u65f6\u95f4 \u5185\u663e\u793a\u5143\u63cf\u8ff0\uff0c\u8fd9\u4e00\u70b9\u4e5f\u5f88\u91cd\u8981\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4f60\u7684\u9875\u9762\u6bcf\u6708\u83b7\u5f97 50,000 \u6b21\u8bbf\u95ee\u91cf\uff0cGoogle \u4f1a\u663e\u793a\u5e73\u5747 18,500 \u6b21\u8bbf\u95ee\u91cf\u7684\u5143\u63cf\u8ff0\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5373\u4f7f\u4f60\u7684\u9875\u9762\u70b9\u51fb\u7387\u53ea\u662f\u4ece 4\uff05 \u589e\u52a0\u5230 4.5\uff05\uff0c\u4e5f\u4f1a\u589e\u52a0\u8fd1 100 \u6b21\u70b9\u51fb\u91cf\u3002 \u56e0\u6b64\uff0c\u867d\u7136\u4f60\u4e0d\u5e94\u82b1\u592a\u591a\u7684\u65f6\u95f4\u5728\u5143\u63cf\u8ff0\u4e0a\uff0c\u4f46\u82b1\u4e00\u5206\u949f\u56de\u7b54\u9875\u9762\u4e2d\u7684\u4e00\u4e2a\u95ee\u9898\u8fd8\u662f\u503c\u5f97\u7684\uff1a \u8be5\u9875\u9762\u662f\u5426\u65e8\u5728\u63a8\u52a8\u81ea\u7136\u6d41\u91cf\uff1f \u662f\u5426\u6709\u53ef\u80fd\u5728\u793e\u4ea4\u5a92\u4f53\u4e0a\u5171\u4eab\u8be5\u9875\u9762\uff1f \u7b2c\u4e8c\u4e2a\u95ee\u9898\u53ef\u80fd\u9700\u8981\u4e00\u4e9b\u89e3\u91ca\u3002 \u4f60\u53ef\u4ee5\u770b\u5230\uff0c\u5f53\u4e00\u4e2a\u9875\u9762\u88ab\u5171\u4eab\u5728\u793e\u4ea4\u5a92\u4f53\u4e0a\u65f6\uff0c\u5b83\u4f1a\u4ece Open Graph meta tags \uff08\u5f00\u653e\u56fe\u5143\u6807\u8bb0\uff09\u4e2d\u63d0\u53d6\u63cf\u8ff0\u3002 \u4f46\u662f\uff0c\u5982\u679c\u4f60\u5c1a\u672a\u8bbe\u7f6e OG \u6216 Twitter \u63cf\u8ff0\uff0c\u5b83\u4f1a\u663e\u793a\u5143\u63cf\u8ff0\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u4f60\u53ea\u60f3\u8bbe\u7f6e\u5176\u4e2d\u4e00\u4e2a\u6807\u8bb0\uff0c\u5219\u5e94\u8bbe\u7f6e\u5143\u63cf\u8ff0\u3002 \u8fdb\u5165\u521b\u5efa\u8fc7\u7a0b.\u2026","title":"\u5143\u63cf\u8ff0\u4e3a\u4f55\u4ecd\u7136\u91cd\u8981"},{"location":"pages/affiliate/meta-description/#\u5982\u4f55\u64b0\u5199\u5143\u63cf\u8ff0","text":"\u8bf7\u6309\u7167\u4ee5\u4e0b\u4e94\u4e2a\u6b65\u9aa4\u5feb\u901f\u8f7b\u677e\u5730\u521b\u5efa\u4f60\u7684\u5143\u63cf\u8ff0\uff1a \u5c55\u5f00\u6807\u9898\u6807\u7b7e \u5339\u914d\u641c\u7d22\u610f\u56fe \u4f7f\u7528\u4e3b\u52a8\u8bed\u6001 \u7b80\u660e\u627c\u8981 \u90e8\u7f72\u5143\u63cf\u8ff0 \u73b0\u5728\u5f00\u59cb\u5427\u3002","title":"\u5982\u4f55\u64b0\u5199\u5143\u63cf\u8ff0"},{"location":"pages/affiliate/meta-description/#1-\u5c55\u5f00\u6807\u9898\u6807\u7b7e","text":"\u59cb\u7ec8\u5c06\u63cf\u8ff0\u89c6\u4e3a\u5bf9 \u6807\u9898\u6807\u7b7e \u7684\u8865\u5145\u3002\u6807\u9898\u5e94\u8be5\u4f7f\u7528\u4e00\u4e9b\u4e3b\u9898\u76f8\u5173\u7684\u4e3b\u8981\u5173\u952e\u8bcd\u6765\u6982\u62ec\u9875\u9762\u3002\u5143\u63cf\u8ff0\u5219\u662f\u4e00\u4e2a\u8fdb\u4e00\u6b65\u8865\u5145\u5185\u5bb9\u7684\u673a\u4f1a\u3002 \u5728\u4e0a\u8ff0\u60c5\u51b5\u4e0b\uff0c\u7b80\u77ed\u7684\u63cf\u8ff0\u5373\u53ef\u6fc0\u53d1\u7528\u6237\u5355\u51fb \u6211\u4eec\u7684\u5931\u6548\u94fe\u63a5\u68c0\u67e5\u5668 \uff0c\u56e0\u4e3a\uff1a \u5b83\u68c0\u67e5\u9875\u9762\u548c\u7f51\u7ad9\u3002 \u5b83\u8003\u8651\u4e86\u5185\u90e8\u548c\u5916\u90e8\u94fe\u63a5\u3002 \u5de5\u5177\u901f\u5ea6\u5f88\u5feb\u3002 \u8fd9\u4e0d\u662f\u4e00\u4e2a\u5f15\u5bfc\u9677\u9631\uff1b\u4f60\u53ef\u4ee5\u76f4\u63a5\u5728\u9875\u9762\u4e0a\u4f7f\u7528\u5b83\u3002 \u4e0d\u7528\u62c5\u5fc3\u8fd9\u91cc\u7684\u5173\u952e\u8bcd\u592a\u591a\u4e86\u3002\u66f4\u91cd\u8981\u7684\u662f\uff0c\u4f60\u8981\u521b\u5efa\u4e00\u4e9b\u4e0e\u8bfb\u8005\u76f8\u5173\u5e76\u5438\u5f15\u70b9\u51fb\u7684\u5185\u5bb9\u3002\u5728\u9002\u5f53\u7684\u5730\u65b9\u4f7f\u7528\u4f60\u7684 USP\u3002","title":"1. \u5c55\u5f00\u6807\u9898\u6807\u7b7e"},{"location":"pages/affiliate/meta-description/#2-\u5339\u914d\u641c\u7d22\u610f\u56fe","text":"\u641c\u7d22\u610f\u56fe \u5c31\u662f\u4eba\u4eec\u201c\u4e3a\u4ec0\u4e48\u201d\u67e5\u8be2\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5927\u591a\u6570\u4eba\u5728\u641c\u7d22\u4f60\u7684\u4e3b\u8981\u5173\u952e\u8bcd\u65f6\u90fd\u5728\u5bfb\u627e\u4ec0\u4e48\uff1f \u4ed6\u4eec\u9700\u8981\u4ec0\u4e48\u4fe1\u606f\u5417\uff1f \u4ed6\u4eec\u60f3\u4e70\u4ec0\u4e48\u4e1c\u897f\u5417\uff1f \u4ed6\u4eec\u5728\u5bfb\u627e\u4e00\u4e2a\u7279\u5b9a\u7684\u7f51\u7ad9\u5417\uff1f \u4ed6\u4eec\u60f3\u5feb\u901f\u627e\u5230\u4e00\u4e2a\u95ee\u9898\u7684\u7b54\u6848\u5417\uff1f \u4f60\u53ef\u4ee5\u5c06\u641c\u7d22\u7ed3\u679c\u5f53\u4f5c\u4e00\u4e2a\u4ee3\u7406\u4eba\u3002 Google \u81f4\u529b\u4e8e\u4e3a\u641c\u7d22\u8005\u63d0\u4f9b\u6700\u76f8\u5173\u7684\u7ed3\u679c\uff0c\u56e0\u6b64\u8bf7\u5728\u6392\u540d\u9760\u524d\u7684\u9875\u9762\u7247\u6bb5\u4e2d\u5bfb\u627e\u5171\u6027\u3002 \u4f8b\u5982\uff0c\u51e0\u4e4e\u6240\u6709\u201c\u5143\u63cf\u8ff0\u201d\u7684\u7ed3\u679c\u90fd\u5728\u6458\u8981\u4e2d\u663e\u793a\u4e86\u5b9a\u4e49\u2026 \u2026\u2026\u6240\u4ee5\u6211\u4eec\u4e5f\u8981\u8fd9\u4e48\u505a\u3002 \u5176\u4ed6\u7684 SERP \u53ef\u80fd\u6ca1\u6709\u90a3\u4e48\u7b80\u5355\uff0c\u4f46\u662f\u4f60\u603b\u80fd\u627e\u5230\u4e00\u4e9b\u7ebf\u7d22\u3002\u6211\u4eec\u6765\u641c\u7d22\u770b\u770b\u201c\u5982\u4f55\u6253\u9886\u5e26\u201d\uff1a \u6240\u6709\u7684\u7247\u6bb5\u90fd\u8ba8\u8bba\u4e86\u4e0d\u540c\u7c7b\u578b\u7684\u9886\u7ed3\uff0c\u5e76\u4e14\u5927\u591a\u6570\u90fd\u63d0\u5230\u4e86\u5e16\u5b50\u4e2d\u5305\u542b\u9010\u6b65\u8bf4\u660e\u3002 \u8fd9\u544a\u8bc9\u6211\u4eec\u8fd9\u4e9b\u4e1c\u897f\u5bf9\u641c\u7d22\u8005\u53ef\u80fd\u5f88\u91cd\u8981\uff0c\u503c\u5f97\u5305\u542b\u5728\u5143\u63cf\u8ff0\u4e2d\u3002 \u8981\u6ce8\u610f\u5982\u201c\u7ad9\u7acb\u529e\u516c\u684c\u201d\u8fd9\u6837\u6709\u5176\u4ed6\u76ee\u7684\u7684 SERP\u3002 \u4f60\u53ef\u4ee5\u770b\u5230\u8fd9\u91cc\u6709\u5404\u79cd\u5404\u6837\u7684\u7ed3\u679c\u3002\u5176\u4e2d\u4e00\u4e9b\u662f\u8bc4\u8bba\u6700\u597d\u7684\u529e\u516c\u684c\u7684\u535a\u5ba2\u6587\u7ae0\uff0c\u8fd8\u6709\u4e00\u4e9b\u662f\u6765\u81ea\u7ebf\u4e0a\u5e97\u94fa\u7684\u4ea7\u54c1\u5206\u7c7b\u9875\u9762\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u5e94\u8be5\u4ece\u4e0e\u4f60\u53d1\u5e03\u7684\u5185\u5bb9\u7c7b\u578b\u6700\u63a5\u8fd1\u7684\u9875\u9762\u7247\u6bb5\u4e2d\u83b7\u53d6\u7075\u611f\u3002\u5982\u679c\u4f60\u5199\u8fc7\u4e00\u7bc7\u5173\u4e8e\u7acb\u5f0f\u529e\u516c\u684c\u7684\u535a\u5ba2\uff0c\u770b\u770b\u8fd9\u4e9b\u8bc4\u8bba\u5e76\u6bd4\u8f83\u8fd9\u4e9b\u6587\u7ae0\u3002\u5982\u679c\u4f60\u5df2\u7ecf\u521b\u5efa\u4e86\u4e00\u4e2a\u7535\u5b50\u5546\u52a1\u7c7b\u522b\u9875\u9762\uff0c\u8bf7\u67e5\u770b\u8fd9\u4e9b\u9875\u9762\u3002","title":"2. \u5339\u914d\u641c\u7d22\u610f\u56fe"},{"location":"pages/affiliate/meta-description/#3-\u4f7f\u7528\u4e3b\u52a8\u8bed\u6001","text":"\u4e3b\u52a8\u8bed\u6001\u4f7f\u63cf\u8ff0\u66f4\u6e05\u6670\uff0c\u5e76\u53ef\u901a\u8fc7\u76f4\u63a5\u5bfb\u5740\u641c\u7d22\u8005\u6765\u5438\u5f15\u70b9\u51fb\u3002 \u4ee5\u4e0b\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a \u4f60\u53ef\u4ee5\u770b\u5230\uff0c\u5b83\u4ee5\u52a8\u8bcd\u5f00\u5934\uff0c\u5e76\u4f7f\u641c\u7d22\u8005\u6210\u4e3a\u53e5\u5b50\u7684\u4e3b\u8bed\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u662f\u641c\u7d22\u8005\u5728\u6267\u884c\u6b64\u64cd\u4f5c\u3002 \u73b0\u5728\u6765\u770b\u8fd9\u4e2a\uff1a \u4e0e\u7b2c\u4e00\u4e2a\u4f8b\u5b50\u76f8\u6bd4\uff0c\u5b83\u67af\u71e5\u4e14\u7f3a\u4e4f\u52a8\u529b\u3002\u8fd9\u662f\u56e0\u4e3a\u5b83\u662f\u7528\u88ab\u52a8\u8bed\u6001\u5199\u7684\u3002 \u5c0f\u63d0\u793a. \u6211\u5199\u4e86\u4e00\u4e2a\u8f83\u5dee\u7684\u4f8b\u5b50\u6765\u8bc1\u5b9e\u8fd9\u4e00\u89c2\u70b9\u3002 \u8fd9\u4e0d\u662f\u4e00\u4e2a\u771f\u5b9e\u7684\u63cf\u8ff0\u3002 \u5f53\u7136\uff0c\u7528\u4e3b\u52a8\u8bed\u6001\u5199\u5143\u63cf\u8ff0\u5e76\u4e0d\u603b\u662f\u660e\u667a\u7684\u3002\u4f8b\u5982\u5b83\u4e0d\u9002\u7528\u4e8e\u5b9a\u4e49\u6837\u5f0f\u7684\u63cf\u8ff0\u3002\u4f46\u4e00\u822c\u6765\u8bf4\uff0c\u88ab\u52a8\u8bed\u6001\u662f\u66f4\u597d\u7684\u9009\u62e9\u3002 \u70b9\u51fb \u6b64\u5904 \u4e86\u89e3\u66f4\u591a\u4e3b\u52a8\u548c\u88ab\u52a8\u8bed\u6001\u4e4b\u95f4\u7684\u533a\u522b","title":"3. \u4f7f\u7528\u4e3b\u52a8\u8bed\u6001"},{"location":"pages/affiliate/meta-description/#4-\u7b80\u660e\u627c\u8981","text":"\u5143\u63cf\u8ff0\u4e0d\u662f\u7528\u6765\u8bb2\u6545\u4e8b\u7684\u3002 \u6bcf\u4e2a\u63aa\u8bcd\u90fd\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u6d4f\u89c8\u7ed3\u679c\u5feb\u901f\u51b3\u5b9a\u8981\u5355\u51fb\u7684\u5185\u5bb9\uff0c\u5e76\u4e14\u63cf\u8ff0\u4f1a\u5728\u4e00\u5b9a\u957f\u5ea6\u540e\u88ab\u622a\u65ad\u3002 \u76ee\u524d\uff0c\u8be5\u957f\u5ea6\u5728\u53f0\u5f0f\u673a\u4e0a\u4e3a 920px\uff08\u7ea6 160 \u4e2a\u5b57\u7b26\uff09\uff0c\u5728\u79fb\u52a8\u8bbe\u5907\u4e0a\u4e3a 680px\uff08\u7ea6 120\u4e2a \u5b57\u7b26\uff09\u3002 \u8ba9\u5b83\u4eec\u4fdd\u6301\u4e00\u5b9a\u957f\u5ea6\u7684\u6700\u4f73\u9009\u62e9\u662f\u4f7f\u7528 \u8fd9\u6837\u7684\u5de5\u5177 \uff0c\u6216\u4f7f\u7528\u50cf Yoast \u8fd9\u6837\u7684\u5185\u7f6e\u529f\u80fd\u7684 WordPress SEO\u63d2\u4ef6 \u3002 \u4e0d\u8bba\u662f\u9488\u5bf9\u79fb\u52a8\u7528\u6237\u8fd8\u662f\u53f0\u5f0f\u7528\u6237\uff0c\u4f60\u7684\u4f18\u5316\u6548\u679c\u6700\u597d\u53d6\u51b3\u4e8e\u4f60\u7684\u53d7\u4f17\u3002\u5982\u679c\u4f60\u901a\u5e38\u60f3\u4e3a\u53f0\u5f0f\u7528\u6237\u63d0\u4f9b\u66f4\u957f\u7684\u63cf\u8ff0\uff0c\u90a3\u4e48\u8bf7\u786e\u4fdd\u4ee5 \u00be \u7684\u7bc7\u5e45\u6765\u6293\u4f4f\u91cd\u70b9\uff0c\u8fd9\u6837\u5373\u4f7f\u662f\u79fb\u52a8\u7528\u6237\u4e5f\u80fd\u770b\u5230\u3002 \u8fd9\u91cc\u7684\u8981\u70b9\u662f\u4ec0\u4e48\uff1f \u4e3a\u7528\u6237\uff0c\u800c\u4e0d\u662f\u641c\u7d22\u5f15\u64ce\uff0c\u505a\u5230\u7b80\u6d01\u660e\u4e86\u3002 \u957f\u5ea6\u9650\u5236\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u63d0\u793a\uff0c\u63d0\u793a\u4f60\u8fd9\u4e2a\u63cf\u8ff0\u53ef\u80fd\u6709\u4e00\u4e9b\u4e0d\u5fc5\u8981\u7684\u63aa\u8bcd\u3002","title":"4. \u7b80\u660e\u627c\u8981"},{"location":"pages/affiliate/meta-description/#5-\u90e8\u7f72\u5143\u63cf\u8ff0","text":"\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f CMS\uff0c\u8fd9\u975e\u5e38\u5bb9\u6613\u64cd\u4f5c\u3002\u5728 Wix\u3001Squarespace\u3001Shopify \u548c\u5176\u4ed6\u5927\u591a\u6570\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u4f60\u53ef\u4ee5\u5728\u540e\u7aef\u627e\u5230\u952e\u5165\u6216\u7c98\u8d34\u5143\u63cf\u8ff0\u7684\u4f4d\u7f6e\u3002 \u5728 WordPress \u4e2d\uff0c\u50cf Yoast \u548c RankMath \u8fd9\u6837\u7684\u63d2\u4ef6\u6dfb\u52a0\u4e86\u76f8\u540c\u7684\u529f\u80fd\u3002 \u5982\u679c\u4f60\u4f7f\u7528\u7684\u4e0d\u662f CMS\uff0c\u53ea\u9700\u5c06\u5143\u63cf\u8ff0\u6807\u8bb0\u7c98\u8d34\u5230 HTML \u4ee3\u7801\u7684 <head> \u90e8\u5206\u3002 \u4e13\u5bb6\u63d0\u793a \u5982\u679c\u4f60\u8981\u76f4\u63a5\u5c06\u5143\u63cf\u8ff0\u6dfb\u52a0\u5230\u4ee3\u7801\u4e2d\uff0c\u8bf7\u4e0d\u8981\u5728\u63cf\u8ff0\u4e2d\u4f7f\u7528\u5f15\u53f7\uff0c\u56e0\u4e3a\u8fd9\u6837\u4f1a\u7834\u574f\u4ee3\u7801\u3002\u76f8\u53cd\uff0c\u8bf7\u4f7f\u7528 HTML \" \u5b9e\u4f8b\uff0c\u5982\u4e0b\u6240\u793a\uff1a <meta name=\"description\" content=\"Just showing how to use &quot;quotation marks&quot; in meta description.\"> \u5982\u679c\u5728 CMS \u548c\u63d2\u4ef6\u4e2d\u6dfb\u52a0\u5143\u63cf\u8ff0\u65f6\u4f7f\u7528\u5f15\u53f7\uff0c\u5b83\u4eec\u901a\u5e38\u4f1a\u4e3a\u4f60\u5904\u7406 HTML \u8f6c\u7801\u3002","title":"5. \u90e8\u7f72\u5143\u63cf\u8ff0"},{"location":"pages/affiliate/meta-description/#\u5982\u4f55\u4e3a\u5143\u63cf\u8ff0\u64b0\u5199\u548c\u7f16\u8f91\u5206\u51fa\u4f18\u5148\u7ea7","text":"\u53d1\u5e03\u8fc7\u7a0b\u5e76\u4e0d\u662f\u552f\u4e00\u4e00\u4e2a\u9700\u8981\u8003\u8651\u5143\u63cf\u8ff0\u7684\u65f6\u5019\u3002\u4f60\u53ef\u80fd\u5df2\u7ecf\u6709\u4e00\u4e9b\u9519\u8bef\u7684\u5143\u63cf\u8ff0\u6216\u6839\u672c\u6ca1\u6709\u5143\u63cf\u8ff0\u7684\u9875\u9762\u3002 \u6ca1\u6709\u5fc5\u8981\u5ba1\u6838\u4f60\u6574\u4e2a\u7f51\u7ad9\u7684\u5143\u63cf\u8ff0\u3002\u76f8\u53cd\uff0c\u5e94\u8be5\u5173\u6ce8\u90a3\u4e9b\u641c\u7d22\u6d41\u91cf\u6700\u5927\u7684\u9875\u9762\u3002\u8fd9\u65f6\uff0c\u4e00\u4e2a\u66f4\u597d\u7684\u5143\u63cf\u8ff0\u53ef\u4ee5\u5e26\u6765\u771f\u6b63\u7684\u6539\u53d8\u3002 \u4f60\u53ef\u4ee5\u5728 Ahrefs \u7684\u7f51\u7ad9\u7ba1\u7406\u5de5\u5177 \u4e2d\u627e\u5230\u8fd9\u4e9b\u9875\u9762\u3002\u53ea\u9700\u6ce8\u518c\u4e00\u4e2a\u514d\u8d39\u5e10\u6237\uff0c\u4f7f\u7528 \u7f51\u7ad9\u8bca\u65ad \u8fd0\u884c\u722c\u7f51\uff0c\u7136\u540e\u8f6c\u5230 Page Explorer\uff08\u9875\u9762\u5206\u6790\uff09 \u5e76\u5e94\u7528\u4ee5\u4e0b\u7b5b\u9009\u5668\uff1a \u63a5\u4e0b\u6765\uff0c\u5355\u51fb\u201c Manage columns \u201d\uff08\u7ba1\u7406\u5217\uff09\u6309\u94ae\u5e76\u9009\u62e9\u201c Organic traffic \u201d\uff08\u81ea\u7136\u6d41\u91cf\uff09\u3001\u201c Meta description \u201d\uff08\u5143\u63cf\u8ff0\uff09\u548c\u201c Meta description length \u201d\uff08\u5143\u63cf\u8ff0\u957f\u5ea6\uff09\uff1a \u6700\u540e\uff0c\u6839\u636e\u9875\u9762\u7684\u81ea\u7136\u6d41\u91cf\u5bf9\u9875\u9762\u8fdb\u884c\u6392\u5e8f\uff1a \u73b0\u5728\uff0c\u4f60\u6b63\u5728\u67e5\u770b\u4f60\u6700\u91cd\u8981\u7684\u5143\u63cf\u8ff0\u3002\u68c0\u67e5\u90a3\u4e9b\u4e0d\u597d\u6216\u5b8c\u5168\u4e22\u5931\u7684\u63cf\u8ff0\u3002 \u867d\u7136\u6211\u63a8\u8350\u4f7f\u7528\u8fd9\u79cd\u201c\u5305\u7f57\u4e07\u8c61\u201d\u7684\u65b9\u6cd5\uff0c\u4f46\u4f60\u4e5f\u53ef\u4ee5\u9009\u62e9\u53ea\u68c0\u67e5\u7f3a\u5c11\u7684\u5143\u63cf\u8ff0\u3002\u90a3\u4f1a\u66f4\u7b80\u5355\uff0c\u56e0\u4e3a\u5b83\u4eec\u76f4\u63a5\u5728 \u9875\u9762 \u62a5\u544a\u4e2d\u62a5\u544a\u663e\u793a\uff1a \u5355\u51fb\u201c\u67e5\u770b\u53d7\u5f71\u54cd\u7684 URL \u201d\u6309\u94ae\u6253\u5f00\u62a5\u544a\uff0c\u5e76\u6309\u81ea\u7136\u6d41\u91cf\u5bf9\u9875\u9762\u8fdb\u884c\u6392\u5e8f\uff0c\u4ee5\u6b63\u786e\u786e\u5b9a\u4f18\u5148\u7ea7\uff1a \u8fd9\u662f\u4e00\u4e2a\u76f8\u5f53\u5bb9\u6613\u7684\u5ba1\u67e5\uff0c\u5bf9\u5427\uff1f\u518d\u6765\u70b9\u5199\u4f5c\u7075\u611f\u600e\u4e48\u6837\uff1f","title":"\u5982\u4f55\u4e3a\u5143\u63cf\u8ff0\u64b0\u5199\u548c\u7f16\u8f91\u5206\u51fa\u4f18\u5148\u7ea7"},{"location":"pages/affiliate/meta-description/#\u51fa\u8272\u7684\u5143\u63cf\u8ff0\u793a\u4f8b","text":"\u8ba9\u6211\u4eec\u7528\u4e00\u4e9b\u7cbe\u5fc3\u5236\u4f5c\u7684\u8de8\u884c\u4e1a\u548c\u641c\u7d22\u610f\u56fe\u7684\u5143\u63cf\u8ff0\u7684\u4f8b\u5b50\u6765\u603b\u7ed3\u4e00\u4e0b\u3002","title":"\u51fa\u8272\u7684\u5143\u63cf\u8ff0\u793a\u4f8b"},{"location":"pages/affiliate/meta-description/#1-Healthline","text":"\u5927\u591a\u6570\u641c\u7d22\u8005\u4f3c\u4e4e\u90fd\u5728\u8fd9\u91cc\u5bfb\u627e\u4e00\u4e2a\u5b9a\u4e49\uff0c\u6240\u4ee5\u8fd9\u5c31\u662f\u8be5\u5143\u63cf\u8ff0\u6240\u663e\u793a\u7684\u5185\u5bb9\u3002\u7136\u540e\uff0c\u5b83\u4f1a\u63d0\u793a\u8bfb\u8005\u5355\u51fb\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u7518\u6c28\u9178\u7684\u76ca\u5904\u3002\u8fd9\u5f88\u7b80\u5355\u9ad8\u6548\u3002","title":"1. Healthline"},{"location":"pages/affiliate/meta-description/#2-TimeOut","text":"\u6211\u4ee5\u4e3a\u6211\u4f1a\u5728\u641c\u7d22\u7ed3\u679c\u91cc\u770b\u5230\u597d\u574f\u53c2\u534a\u7684\u9644\u8fd1\u5730\u533a\u548c\u9152\u5e97\uff0c\u4f46\u7ed3\u679c\u4e3b\u8981\u96c6\u4e2d\u5728\u5e03\u62c9\u683c\u5730\u533a\uff0c\u5e76\u4e14\u6b64\u63cf\u8ff0\u4e0e\u610f\u56fe\u5b8c\u5168\u5339\u914d\u3002\u5b83\u4ee5\u7b80\u6d01\uff0c\u8f7b\u677e\u548c\u53ef\u884c\u7684\u65b9\u5f0f\u63d0\u4f9b\u4e86\u4e00\u79cd\u89e3\u51b3\u65b9\u6848\u3002\u63d0\u5230\u201c\u4e94\u4e2a\u6700\u597d\u7684\u201d\u793e\u533a\u4e5f\u544a\u8bc9\u641c\u7d22\u8005\u4eec\uff0c\u4ed6\u4eec\u4e0d\u9700\u82b1\u5f88\u591a\u65f6\u95f4\u9605\u8bfb\u5b83\u3002","title":"2. TimeOut"},{"location":"pages/affiliate/meta-description/#3-Patagonia","text":"\u5728\u8fd9\u91cc\uff0c\u641c\u7d22\u8005\u6b63\u5728\u5bfb\u627e\u7279\u4ef7\u5546\u54c1\u3002\u6211\u6700\u521d\u559c\u6b22\u7d27\u6025\u4fe1\u53f7\uff1b\u5b83\u770b\u8d77\u6765\u6bd4\u8fd9\u4e9b\u8d8b\u52bf\u66f4\u5177\u539f\u521b\u6027\u4e14\u4fb5\u7565\u6027\u4e0d\u90a3\u4e48\u5f3a\u3002\u7136\u540e\uff0c\u4f60\u4f1a\u8fbe\u5230\u641c\u7d22\u7684\u76ee\u7684\uff0c\u6700\u540e\u770b\u5230 Patagonia \u7684\u72ec\u7279\u4e4b\u5904\uff1a\u652f\u6301\u53ef\u6301\u7eed\u6027\u548c\u4fdd\u62a4\u3002","title":"3. Patagonia"},{"location":"pages/affiliate/meta-description/#4-Nordstrom","text":"\u8fd9\u662f\u641c\u7d22\u7ed3\u679c\u4e2d\u51fa\u8272\u7684\u7535\u5b50\u5546\u52a1\u7c7b\u522b\u9875\u9762\u7684\u7f29\u5f71\u3002 Nordstrom \u53ef\u80fd\u4f1a\u5728\u8fd9\u91cc\u5217\u51fa\u4ed6\u4eec\u6700\u53d7\u6b22\u8fce\u7684\u5916\u5957\u548c\u54c1\u724c\u3002\u514d\u8d39\u9001\u8d27\u4e5f\u53ef\u80fd\u662f\u8fd9\u4e9bSERP\u7684\u4e00\u4e2aUSP\uff0c\u56e0\u4e3a\u53ea\u6709\u4e00\u4e2a\u7ed3\u679c\u63d0\u5230\u4e86\u5b83\u3002","title":"4. Nordstrom "},{"location":"pages/affiliate/meta-description/#5-Shopify","text":"\u6211\u4eec\u7684\u6700\u540e\u4e00\u4e2a\u793a\u4f8b\u662f\u4e00\u4e2a\u4e3b\u9875\u3002\u8fd9\u662f\u5b83\u81ea\u5df1\u7684\u7c7b\u522b\uff0c\u56e0\u4e3a\u4f60\u5fc5\u987b\u53cd\u6620\u81ea\u5df1\u7684\u54c1\u724c\u548c\u6240\u505a\u7684\u4e8b\u3002 Shopify \u505a\u5f97\u5f88\u597d\u3002\u663e\u800c\u6613\u89c1\uff0c\u5b83\u4f1a\u63d0\u793a\u4f60\u514d\u8d39\u8bd5\u7528\u8be5\u670d\u52a1\u3002 \u6211\u5efa\u8bae\u4e3b\u9875\u662f\u4f60\u552f\u4e00\u4e00\u4e2a\u82b1\u66f4\u591a\u65f6\u95f4\u5728\u5143\u63cf\u8ff0\u4e0a\u7684\u9875\u9762\uff0c\u56e0\u4e3a\u5b83\u4e3b\u8981\u51fa\u73b0\u5728\u610f\u56fe\u660e\u786e\u7684\u54c1\u724c\u67e5\u8be2\u4e2d\u3002\u56e0\u6b64\uff0cGoogle \u66f4\u6709\u53ef\u80fd\u5728 SERP \u4e2d\u663e\u793a\u5176\u5143\u63cf\u8ff0\u3002","title":"5. Shopify"},{"location":"pages/affiliate/meta-description/#\u7ed3\u8bed","text":"\u5143\u63cf\u8ff0\u662f\u5927\u591a\u6570\u4eba\u8fdb\u5165 SEO \u9886\u57df\u65f6\u9047\u5230\u7684\u7b2c\u4e00\u4e2a\u4e3b\u9898\u4e4b\u4e00\u3002 \u5e78\u8fd0\u7684\u662f\uff0c\u5b83\u4e5f\u662f\u6700\u5bb9\u6613\u7406\u89e3\u548c\u638c\u63e1\u7684\u4e3b\u9898\uff0c\u56e0\u6b64\u4f60\u65e0\u9700\u82b1\u8d39\u592a\u591a\u65f6\u95f4\u3002 \u8bf7\u67e5\u770b\u6211\u4eec\u7684 \u53ef\u6267\u884c\u7684 SEO \u5c0f\u6280\u5de7\u5217\u8868 \uff0c\u67e5\u770b\u66f4\u591a\u9488\u5bf9 SEO \u7684\u64cd\u4f5c\u3002 \u6709\u4ec0\u4e48\u95ee\u9898\u5417\uff1f\u6765 Twitter \u8054\u7cfb\u6211 \u51e1\u672c\u7f51\u6ce8\u660e\"\u6765\u6e90\uff1aXXX \"\u7684\u6587/\u56fe/\u89c6\u9891\u7b49\u7a3f\u4ef6\uff0c\u672c\u7f51\u8f6c\u8f7d\u51fa\u4e8e\u4f20\u9012\u66f4\u591a\u4fe1\u606f\u4e4b\u76ee\u7684\uff0c\u5e76\u4e0d\u610f\u5473\u7740\u8d5e\u540c\u5176\u89c2\u70b9\u6216\u8bc1\u5b9e\u5176\u5185\u5bb9\u7684\u771f\u5b9e\u6027\u3002\u5982\u6d89\u53ca\u4f5c\u54c1\u5185\u5bb9\u3001\u7248\u6743\u548c\u5176\u5b83\u95ee\u9898\uff0c\u8bf7\u4e0e\u672c\u7f51\u8054\u7cfb\uff0c\u6211\u4eec\u5c06\u5728\u7b2c\u4e00\u65f6\u95f4\u5220\u9664\u5185\u5bb9\uff01 \u4f5c\u8005: Michal Pec\u00e1nek \u6765\u6e90\uff1a https://ahrefs.com/blog/zh/meta-description/","title":"\u7ed3\u8bed"},{"location":"pages/affiliate/select-products-from-hottrend/","text":"Shopify\u72ec\u7acb\u7ad9\u7684\u51e0\u5957\u9009\u54c1\u65b9\u6cd5 \u00b6 1.\u5206\u4eab\u4e00\u4e9b\u6211\u5e73\u65f6\u5173\u6ce8\u7684\u70ed\u95e8\u52a8\u6001\u7684\u7f51\u7ad9/\u5e73\u53f0 (1)\u8c37\u6b4c\u8d8b\u52bf https://trends.google.com/trends/hottrends Google Trends\u7684Hot Trends \u80fd\u5b9e\u65f6\u770b\u5230\u5404\u56fd\u5404\u5730\u533a\u7684\u70ed\u95e8\u4ea7\u54c1\u548c\u8bdd\u9898\u3002\u4f60\u53ef\u4ee5\u4ece\u4e2d\u83b7\u53d6\u5230\u7075\u611f\u6216\u8005\u4e86\u89e3\u5230\u4eba\u4eec\u66f4\u613f\u610f\u82b1\u94b1\u5728\u54ea\u4e9b\u65b9\u9762? \u4ee5\u4e0b\u7528 API \u83b7\u53d6 Google Trend Hottrend RSS feed \u5217\u8868 GTrend.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 import feedparser import ssl #National Variables dict_nations = {'UNITED_STATES' : 'p1','ARGENTINA': 'p30', 'AUSTRALIA': 'p8', 'AUSTRIA': 'p44', 'BELGIUM': 'p41', 'BRAZIL': 'p18', 'CANADA': 'p13', 'CHILE': 'p38', 'COLOMBIA': 'p32', 'CZECHIA': 'p43', 'DENMARK': 'p49', 'EGYPT': 'p29', 'FINLAND': 'p50', 'FRANCE': 'p16', 'GERMANY': 'p15', 'GREECE': 'p48', 'HONG_KONG': 'p10', 'HUNGARY': 'p45', 'INDIA': 'p3', 'INDONESIA': 'p19', 'IRELAND': 'p54', 'ISRAEL': 'p6', 'ITALY': 'p27', 'JAPAN': 'p4', 'KENYA': 'p37', 'MALAYSIA': 'p34', 'MEXICO': 'p21', 'NETHERLANDS': 'p17', 'NEW_ZEALAND': 'p53', 'NIGERIA': 'p52', 'NORWAY': 'p51', 'PHILIPPINES': 'p25', 'POLAND': 'p31', 'PORTUGAL': 'p47', 'ROMANIA': 'p39', 'RUSSIA': 'p14', 'SAUDI_ARABIA': 'p36', 'SINGAPORE': 'p5', 'SOUTH_AFRICA': 'p40', 'SOUTH_KOREA': 'p23', 'SPAIN': 'p26', 'SWEDEN': 'p42', 'SWITZERLAND': 'p46', 'TAIWAN': 'p12', 'THAILAND': 'p33', 'TURKEY': 'p24', 'UKRAINE': 'p35', 'UNITED_KINGDOM': 'p9', 'VIETNAM': 'p28', } # EXAMPLE SEARCH SYNTAX # United States: # https://trends.google.com/trends/hottrends#pn=p1 # United States RSS: # https://trends.google.com/trends/hottrends/atom/feed?pn=p1 # United Kingdom: # https://trends.google.com/trends/hottrends#pn=p9 # United Kingdom RSS: # https://trends.google.com/trends/hottrends/atom/feed?pn=p9 TRENDING_URL = 'http://www.google.com/trends/hottrends/atom/feed?pn={}' def hot(feed_url): \"\"\"Returns a list of hit terms via google trends \"\"\" try: listing = feedparser.parse(feed_url)['entries'] trends = [item['title'] for item in listing] return trends except Exception as e: print('ERR hot terms failed!', str(e)) return None if __name__ == \"__main__\": if hasattr(ssl, '_create_unverified_context'): ssl._create_default_https_context = ssl._create_unverified_context print(hot(TRENDING_URL.format(dict_nations.get(\"UNITED_STATES\")))) (2)ubersuggest https://ubersuggest.io/ \u514d\u8d39\u7684\u5173\u952e\u8bcd\u5de5\u5177\uff0c\u7531\u6b64\u4f60\u53ef\u4ee5\u8bbe\u7f6e\u597d\u533a\u57df\u540e\u8f93\u5165\u5173\u952e\u4ea7\u54c1\uff0c\u4e86\u89e3\u5404\u56fd\u7684\u641c\u7d22\u4e60\u60ef\u3002 (3)trendhunter https://www.trendhunter.com/ \u8fd9\u4e2a\u7f51\u7ad9\u4e5f\u662f\u89c2\u5bdf\u6700\u65b0\u6d41\u884c\u8d8b\u52bf\u7684\u3002 (4)yahoo\u96c5\u864e https://www.yahoo.com/ \u7f51\u7ad9\u53f3\u4e0a\u89d2\u7684trending now\u4e5f\u662f\u4e00\u4e2a\u53d1\u73b0\u70ed\u70b9\uff0c\u70ed\u95e8\u4ea7\u54c1\u7684\u5730\u65b9\uff0c\u591a\u4e3a\u667a\u80fd\u7535\u5b50\u4ea7\u54c1\u3002 (5)\u5404\u5927\u7535\u5546\u5e73\u53f0\u70ed\u9500\u699c \u8fd8\u6709amazon/ebay/wish/Aliexpress\u8fd9\u4e9b\u5e73\u53f0\u7684\u70ed\u9500\u699c\uff0c\u4f60\u53ef\u4ee5\u627e\u56db\u9897\u661f\u8bc4\u9274\u7684\u4ea7\u54c1\uff0c\u53ef\u4ee5\u627e\u591a\u4eba\u8bc4\u8bba\u7684\u4ea7\u54c1\u3002 (6)kickstarter https://www.kickstarter.com/discover/ kickstarter\u4e0a\u7684\u53d1\u73b0\u9875\u9762 (7)walmart https://www.walmart.com/\u6c83\u5c14\u739b\u8d85\u5e02 \uff0c\u5173\u6ce8\u5b83\u7684banner\u548c\u4e0b\u680f\u7684Top Selling Pickup Products (8)thisiswhyimbroke https://www.thisiswhyimbroke.com/ \u5b83\u7684\u7ec6\u5206\u7c7b\u522b\u4e5f\u5f88\u5e9e\u5927 \u4ee5\u4e0a\u518d\u7ed3\u5408Facebook\u3001Instagram\u3001Youtube\u3001Pintest\u3001Google+\u4ee5\u53caLinkedIn\u7ed3\u5408\u81ea\u8eab\u8d44\u6e90\uff0c\u7ecf\u9a8c\u548c\u5174\u8da3\uff0c\u6c47\u603b\u51fa\u4ea7\u54c1\u6e05\u5355\uff0c\u518d\u9010\u4e00\u7b5b\u9009\u3002 2.\u5927\u6570\u636e\u7edf\u8ba1\u5bfb\u627e\u6f5c\u529b\u80a1 \u6570\u636e\u9009\u54c1\u5927\u5bb6\u4e0d\u964c\u751f\uff0c\u4f46\u662f\u5230\u5e95\u5982\u4f55\u7528\u6570\u636e\u9009\u54c1\uff0c\u8fd9\u5c31\u96be\u4e86\uff0c\u4e00\u7ec4\u6570\u636e\u5305\u542b\u7684\u4fe1\u606f\u7ed9\u4e0d\u540c\u7684\u4eba\u53ef\u4ee5\u5206\u6790\u51fa\u4e0d\u540c\u7684\u7ed3\u679c\uff0c\u6211\u4eec\u4ee5shopee\u5e73\u53f0\u4e3a\u4f8b\u6765\u8bf4\u3002 \u9996\u5148\u6570\u636e\u7684\u83b7\u5f97\u9014\u5f841\u3001\u5b98\u65b9\u5468\u62a52\u3001\u4e09\u65b9\u7edf\u8ba1\u5e73\u53f0 \u5b98\u65b9\u5468\u62a5\u76f4\u63a5\u660e\u4e86\u7684\u5c55\u793a\u4e86\u4ea7\u54c1\u9500\u552e\u6570\u636e\uff0c\u5173\u952e\u8bcd\u6570\u636e\uff0c\u53ef\u4f9b\u5356\u5bb6\u53c2\u8003\uff0c\u4f46\u66f4\u591a\u7684\u662f\u53c2\u8003\u8d8b\u52bf\uff0c\u4ece\u6218\u7565\u5c42\u9762\u4e0a\u628a\u63a7\u4ea7\u54c1\u65b9\u5411\uff0c\u5bf9\u6211\u4eec\u7684\u5b9e\u9645\u9009\u54c1\u8fc7\u7a0b\uff0c\u5f88\u96be\u4e0b\u624b\uff0c\u56e0\u4e3a\u4f60\u8ddf\u5356\uff0c\u4f60\u9700\u8981\u8003\u8651\u662f\u5426\u6709\u7ade\u4e89\u529b\uff0c\u4f60\u4e0d\u8ddf\u5356\uff0c\u4f60\u4e5f\u5f88\u96be\u5355\u9760\u6570\u636e\u7814\u7a76\u51fa\u6765\u76ee\u6807\u5e02\u573a\u5ba2\u6237\u7684\u5ba1\u7f8e\u7b49\u7ec6\u8282\u95ee\u9898\u3002\u8fd9\u65f6\u5019\uff0c\u4e09\u65b9\u6570\u636e\u5c31\u80fd\u5e2e\u4f60\u89e3\u51b3\u6218\u672f\u4e0a\u7684\u95ee\u9898\u3002 \u9996\u5148\u4e09\u65b9\u6570\u636e\u5e73\u53f0\u6709\u54ea\u4e9b\uff1f \u5f88\u591a\uff0c\u5728\u6b64\u7b80\u5355\u4e3e\u4f8b1\u3001\u6d77\u9e70\u6570\u636e2\u3001\u6dd8\u6570\u636e \u600e\u4e48\u8fdb\u5165\uff1f\u767e\u5ea6\u641c\u3002\u600e\u4e48\u4f7f\u7528\uff1f\u6211\u4eec\u6765\u770b\u770b\u53ef\u4ee5\u901a\u8fc7\u6570\u636e\u7814\u7a76\u70b9\u4ec0\u4e48\u51fa\u6765\u3002 \u4ee5\u6d77\u9e70\u6570\u636e\u4e3a\u4f8b \u56fe\u7247\u9875\u9762\u6709\u70b9\u5c0f\uff0c\u5177\u4f53\u5927\u5bb6\u53ef\u4ee5\u76f4\u63a5\u5b9e\u9645\u53bb\u770b\u4e00\u4e0b\uff0c\u6570\u636e\u662f\u4e0d\u6536\u8d39\u7684\uff0c\u5982\u679c\u4f60\u4e0d\u9700\u8981\u4f7f\u7528\u4ed6\u7684\u4e00\u4e9b\u9ad8\u7ea7\u529f\u80fd\u3002 \u6211\u4eec\u5207\u6362\u5230shopee\u5e73\u53f0\uff0c\u518d\u9009\u9a6c\u6765\u7ad9\uff0c\u8fd9\u65f6\u5019\u4f1a\u8df3\u51fa\u6765\u6240\u6709\u7684\u9a6c\u6765\u7ad9\u9500\u552e\u6570\u636e\uff0c\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u6392\u540d\uff0c\u67e5\u770b\u9a6c\u6765\u7ad9\u9500\u91cf\u6700\u9ad8\u7684\u4ea7\u54c1\u662f\u4ec0\u4e48\u3002 \u5f53\u7136\u5982\u679c\u4f60\u60f3\u901a\u8fc7\u6570\u636e\u9009\u54c1\u4f60\u53ef\u4ee5\u8fd9\u6837 \u9009\u62e9shopee\u5e73\u53f0\u6570\u636e\uff0c\u9009\u62e9\u9a6c\u6765\u7ad9\uff0c\u9009\u62e9\u53ea\u67e5\u770b\u8fd1\u4e00\u4e2a\u6708\u5185\u624d\u4e0a\u67b6\u7684\u4ea7\u54c1\uff0c\u9009\u62e9\u53ea\u67e5\u770b\u6d77\u5916\u5356\u5bb6\uff0c\u9009\u62e9\u9500\u91cf\u5927\u4e8e100\u3002\u8fd9\u4e2a\u65f6\u5019\u5728\u8fdb\u884c\u4e86\u8fd9\u4e48\u591a\u9644\u52a0\u6761\u4ef6\u540e\uff0c\u4f60\u770b\u5230\u4e86\u4ec0\u4e48\uff1f \u6ca1\u9519\uff0c\u5c31\u662f\u5e02\u573a\u7684\u6f5c\u529b\u7206\u6b3e\uff0c\u8fd9\u4e2a\u4ea7\u54c1\u5728\u521a\u521a\u4e0a\u67b6\u4e0d\u4e45\uff0c\u5c31\u80fd\u5355\u91cf\u76f4\u63a5\u98d9\u5347\uff0c\u660e\u663e\u7684\u53cd\u6620\u4e86\u5e02\u573a\u9700\u6c42\u589e\u957f\uff0c\u800c\u4e14\u7ade\u4e89\u4e0d\u5927\uff0c\u5426\u5219\u5982\u679c\u539f\u6765\u5c31\u6709\u5f88\u591a\u5356\u5bb6\u5356\uff0c\u4ed6\u600e\u4e48\u4f1a\u5728\u4e0a\u67b6\u4e00\u4e2a\u6708\u5c31\u5355\u91cf\u98d9\u5347\u5462\uff1f \u6570\u636e\u9009\u54c1\u73a9\u6cd5\u5f88\u591a\uff0c\u8fd9\u662f\u7559\u7ed9\u903b\u8f91\u80fd\u529b\u5f3a\u7684\u5356\u5bb6\u4f7f\u7528\u7684 3.\u5229\u57fa\u5e02\u573a\u6398\u7b2c\u4e00\u6876\u91d1 \u4ec0\u4e48\u53eb\u5229\u57fa\u5e02\u573a\uff1f \u5229\u57fa\u5e02\u573a\u662f\u6307\u7531\u5df2\u6709\u5e02\u573a\u7edd\u5bf9\u4f18\u52bf\u7684\u4f01\u4e1a\u6240\u5ffd\u7565\u7684\u67d0\u4e9b\u7ec6\u5206\u5e02\u573a\uff0c\u5e76\u4e14\u5728\u6b64\u5e02\u573a\u5c1a\u672a\u5b8c\u5584\u4f9b\u5e94\u670d\u52a1\uff0c\u4e00\u822c\u7531\u8f83\u5c0f\u7684\u4ea7\u54c1\u5e02\u573a\u5e76\u5177\u6709\u6301\u7eed\u53d1\u5c55\u6f5c\u529b\u4e2d\u4e00\u4e9b\u9700\u8981\u4f46\u5c1a\u672a\u88ab\u6ee1\u8db3\u7684\u65cf\u7fa4\u6d88\u8d39\u8005\u6240\u7ec4\u6210\u3002 \u90a3\u6211\u4eec\u5c31\u660e\u767d\u4e86\uff0c\u5173\u952e\u70b9\u4e24\u4e2a \u4e00\u662f\u7ec6\u5206\u5e02\u573a \u4e8c\u662f\u6709\u5e02\u573a\u9700\u6c42 \u90a3\u600e\u4e48\u6765\u5207\u4e2d\u5229\u57fa\u5e02\u573a\u5462\uff1f\u9760\u8111\u5b50! \u6bd4\u5982\u4f60\u53ef\u4ee5\u8fd9\u6837\u60f3 \u53f0\u6e7e\u5e02\u573a\u6bcd\u5a74\u7528\u54c1\u597d\u5356\uff0c\u6bcd\u5a74\u4ea7\u54c1\u6709\u4ec0\u4e48\uff1f \u7ae5\u88c5\uff0c\u73a9\u5177\uff0c\u5b55\u5987\u88c5\uff0c\u8fd8\u6709\u5462\uff1f \u5176\u5b9e\u8fd8\u6709\u5f88\u591a\uff0c\u65e2\u7136\u5b55\u5987\u88c5\u597d\u5356\u8bf4\u660e\u5b55\u5987\u591a\uff0c\u5b55\u5987\u9664\u4e86\u7a7f\u8863\u670d\u8fd8\u6709\u4e00\u5927\u5806\u9700\u6c42\u5427\uff1f \u6bd4\u5982\uff0c\u5b55\u5987\u9aa8\u76c6\u4fee\u590d\u4eea\u5b55\u5987\u9a6c\u6876\u4e13\u7528\u57ab\u4f60\u60f3\u4e0d\u5230\u7684\u4e1c\u897f\u5176\u5b9e\u5c31\u662f\u5229\u6da6\u6240\u5728 4.\u4e92\u8054\u7f51\u5305\u542b\u4e30\u5bcc\u7684\u60f3\u6cd5\u548c\u7075\u611f \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\u975e\u5e38\u5b9e\u7528\u7684\u4ea7\u54c1\u7075\u611f\u548c\u60f3\u6cd5\u3002\u4e0d\u8fc7\u5f53\u4f60\u9605\u8bfb\u65f6\uff0c\u8bf7\u786e\u4fdd\u4f60\u7684\u60f3\u6cd5\u8981\u8d85\u8d8a\u4ea7\u54c1\u672c\u8eab\u3002\u8fd9\u53ef\u80fd\u542c\u8d77\u6765\u5f88\u9648\u65e7\uff0c\u4f46\u662f\u7531\u4e8e\u5728\u6700\u5e38\u89c1\u548c\u53d7\u6b22\u8fce\u7684\u4ea7\u54c1\u7c7b\u522b\u4e2d\u7ade\u4e89\u6fc0\u70c8\uff0c\u9009\u62e9\u4e0d\u540c\u6216\u72ec\u7279\u7684\u89d2\u5ea6\u53ef\u80fd\u5bf9\u4f60\u7684\u6210\u529f\u66f4\u6709\u5e2e\u52a9\u3002\u5c3d\u91cf\u4e0d\u8981\u53ea\u770b\u4ea7\u54c1\uff0c\u800c\u662f\u770b\u770b\u4ea7\u54c1\u53ef\u4ee5\u4f7f\u7528\u7684\u65b0\u65b9\u5f0f\uff0c\u53ef\u4ee5\u60f3\u8c61\u7684\u65b0\u65b9\u6cd5\u548c\u65b0\u5e02\u573a\u3002 \u5217\u4e00\u4e2a\u6e05\u5355 \u5f53\u4f60\u9605\u8bfb\u672c\u6587\u65f6\uff0c\u8bf7\u51c6\u5907\u4e00\u5f20\u7eb8\uff0c\u6700\u597d\u5728\u7eb8\u4e0a\u6355\u83b7\u4f60\u6240\u6709\u60f3\u6cd5\u3002\u4e00\u65e6\u8bb0\u5f55\u4e86\u6240\u6709\u5934\u8111\u98ce\u66b4\u7684\u60f3\u6cd5\uff0c\u4f60\u7a0d\u540e\u5c06\u53ef\u4ee5\u56de\u60f3\u4f60\u5f53\u65f6\u7684\u60f3\u6cd5\uff0c\u5e76\u8fdb\u4e00\u6b65\u8bc4\u4f30\u4ed6\u4eec\u7684\u53ef\u884c\u6027\u548c\u5e02\u573a\u6f5c\u529b\u3002 \u4e00\uff0c\u4ece\u4f60\u9047\u5230\u6216\u8005\u60f3\u88ab\u89e3\u51b3\u7684\u95ee\u9898\u5f00\u59cb \u5728\u4f60\u5f00\u59cb\u4e3a\u4f60\u7684\u4ea7\u54c1\u641c\u7d22\u4e92\u8054\u7f51\u7684\u6df1\u5ea6\u548c\u5730\u7403\u7684\u5c3d\u5934\u4e4b\u524d\uff0c\u6700\u597d\u4ece\u4f60\u5df2\u7ecf\u62e5\u6709\u7684\u60f3\u6cd5\u5f00\u59cb\u3002 \u5982\u679c\u4f60\u50cf\u5927\u591a\u6570\u521b\u4e1a\u8005\u4e00\u6837\uff0c\u5df2\u7ecf\u6709\u4e00\u4e9b\u60f3\u6cd5\u4e86\uff0c\u6bd4\u5982\u4f60\u60f3\u5356\u7684\u4ea7\u54c1\u6216\u4ee5\u524d\u60f3\u8fc7\u7684\u4ea7\u54c1\u3002\u4e5f\u8bb8\u662f\u4f60\u591a\u5e74\u524d\u7684\u60f3\u6cd5\uff0c\u6216\u8005\u662f\u4f60\u5728\u751f\u6d3b\u4e2d\u9047\u5230\u95ee\u9898\uff0c\u4f46\u76ee\u524d\u8fd8\u6ca1\u6709\u5f88\u597d\u7684\u89e3\u51b3\u65b9\u6848\u3002\u5f53\u4f60\u5217\u6e05\u5355\u65f6\uff0c\u4ee5\u4e0b\u51e0\u4e2a\u95ee\u9898\u9700\u8981\u4f60\u601d\u8003\uff1a 1.\u4ec0\u4e48\u4ea7\u54c1\u6216\u884c\u4e1a\u4f60\u7279\u522b\u70ed\u8877\u6216\u8005\u6709\u5174\u8da3\uff1f 2\u4f60\u7684\u670b\u53cb\u70ed\u8877\u4e8e\u4ec0\u4e48\u4ea7\u54c1\u6216\u884c\u4e1a\uff1f 3\u4f60\u5728\u81ea\u5df1\u7684\u751f\u6d3b\u4e2d\u6709\u4ec0\u4e48\u75db\u70b9\u6216\u4ee4\u4eba\u6cae\u4e27\u7684\u7ecf\u5386\uff1f \u4e8c\uff0c\u672c\u5730\u793e\u533a\uff0c\u8bbe\u8eab\u5904\u5730 \u4f60\u8de8\u5883\u7535\u5546\u7684\u60f3\u6cd5\u53ef\u80fd\u4f1a\u6bd4\u60a8\u60f3\u8c61\u4e2d\u66f4\u63a5\u8fd1\u3002\u4f20\u7edf\u7684\u5b9e\u4f53\u5e97\u6bd4\u7535\u5546\u65f6\u95f4\u957f\u5f88\u591a\uff0c\u6240\u4ee5\u5b83\u53ef\u4ee5\u7ed9\u4f60\u5f88\u591a\u542f\u793a\u3002\u5728\u5b9e\u4f53\u96f6\u552e\u5e97\u91cc\u6ce8\u610f\u5f53\u5730\u7684\u8d8b\u52bf\u53ef\u80fd\u6709\u52a9\u4e8e\u6fc0\u53d1\u4f60\u5728\u7f51\u4e0a\u8d2d\u4e70\u5546\u54c1\u7684\u60f3\u6cd5\u3002\u5c1d\u8bd5\u82b1\u4e00\u4e2a\u4e0b\u5348\u65f6\u95f4\u770b\u770b\u793e\u533a\u5468\u56f4\uff0c\u6ce8\u610f\u662f\u5426\u6709\u65b0\u7684\u6216\u6709\u8da3\u7684\u96f6\u552e\u6982\u5ff5\u548c\u5546\u54c1\u663e\u793a\u3002 \u793e\u533a\u4ea7\u54c1\u7075\u611f\u7684\u53e6\u4e00\u4e2a\u91cd\u8981\u6765\u6e90\u53ef\u4ee5\u5f53\u5730\u7684\u62a5\u7eb8\uff0c\u8fd9\u4e9b\u62a5\u7eb8\u5f80\u5f80\u5177\u6709\u65b0\u7684\uff0c\u521b\u65b0\u7684\u548c\u672c\u5730\u6982\u5ff5\u7684\u4ea7\u54c1\u3002\u5f53\u4f60\u770b\u8fd9\u4e9b\u8d44\u6e90\u65f6\uff0c\u95ee\u95ee\u81ea\u5df1\u662f\u5426\u53ef\u4ee5\u53d8\u6210\u4e00\u4e2a\u5728\u7ebf\u7684\u673a\u4f1a\u3002 \u4e09\uff0c\u8de8\u5883\u7535\u5546\u6d88\u8d39\u8005\u8d8b\u52bf\u76f8\u5173\u7f51\u7ad9\u548c\u520a\u7269 \u5173\u6ce8\u8de8\u5883\u7535\u5546\u6d88\u8d39\u8005\u8d8b\u52bf\u7f51\u7ad9\u548c\u520a\u7269\u662f\u5f00\u59cb\u4e86\u89e3\u6d88\u8d39\u8005\u4ea7\u54c1\u53d1\u5c55\u65b9\u5411\u548c\u5176\u4ed6\u4f01\u4e1a\u5bb6\u5411\u5e02\u573a\u63a8\u51fa\u7684\u60f3\u6cd5\u7684\u4e00\u4e2a\u597d\u6e20\u9053\u3002 \u63a8\u8350\u51e0\u4e2a\u56fd\u5916\u7f51\u7ad9\uff1a http://trendwatching.com/ http://www.trendhunter.com/ https://www.springwise.com/ \u56db\uff0c\u884c\u4e1a\u9886\u5bfc\u9886\u8896 \u4f60\u53ef\u80fd\u4e0d\u77e5\u9053\u8981\u9500\u552e\u54ea\u4e9b\u4ea7\u54c1\uff0c\u4f46\u4e5f\u8bb8\u4f60\u77e5\u9053\u4f60\u60f3\u8981\u4ece\u4e8b\u7684\u884c\u4e1a\u6216\u5e02\u573a\u3002\u4f7f\u7528\u5404\u79cd\u5728\u7ebf\u5de5\u5177\uff0c\u60a8\u53ef\u4ee5\u53d1\u73b0\u5e76\u8ddf\u8e2a\u60a8\u611f\u5174\u8da3\u7684\u4ea7\u54c1\u5728\u884c\u4e1a\u4e2d\u7684\u5f71\u54cd\u529b\u3002\u901a\u8fc7\u793e\u4ea4\u5a92\u4f53\u5173\u6ce8\u884c\u4e1a\u9886\u5bfc\u9886\u8896\uff0c\u5173\u6ce8\u4ed6\u4eec\u793e\u4ea4\u5a92\u4f53\u53d1\u5e03\u7684\u4e00\u4e9b\u5185\u5bb9\uff0c\u6216\u8bb8\u53ef\u4ee5\u5e2e\u52a9\u4f60\u63ed\u5f00\u6216\u8005\u542f\u53d1\u4f60\u7684\u4e00\u4e9b\u65b0\u60f3\u6cd5\u3002 \u4e94\uff0c\u793e\u4ea4\u5a92\u4f53\u7f51\u7ad9 \u793e\u4ea4\u5a92\u4f53\u7f51\u7ad9\uff0c\u5982Pinterest\u53ef\u4ee5\u8bf4\u662f\u4e00\u4e9b\u4ea7\u54c1\u7684\u91d1\u77ff\u3002\u5728\u4e0a\u9762\u8bb8\u591a\u56fe\u50cf\u5305\u542b\u4e86\u6709\u8da3\u7684\uff0c\u65b0\u8d8b\u52bf\u7684\u6d88\u8d39\u8005\u4ea7\u54c1\u3002\u4f7f\u7528\u5185\u7f6e\u7684\u793e\u4ea4\u8baf\u53f7\uff0c\u6709\u65f6\u4f60\u53ef\u4ee5\u7acb\u5373\u611f\u53d7\u5230\u4ed6\u4eec\u7684\u53d7\u6b22\u8fce\u7a0b\u5ea6\u3002 \u8fd9\u53ef\u80fd\u662f\u4f60\u7684\u7b2c\u4e00\u4e2a\u7ebf\u7d22\uff0c\u5982\u679c\u6709\u4e00\u4e2a\u6709\u5e02\u573a\u7684\u4ea7\u54c1\u3002\u6bd4\u5982\uff1aFacebook,Instagram,Pinterest. \u516d\uff0c\u5728\u7ebf\u6d88\u8d39\u5e02\u573a \u4ea7\u54c1\u60f3\u6cd5\u7684\u53e6\u4e00\u4e2a\u4e30\u5bcc\u6765\u6e90\u662f\u5728\u7ebf\u6d88\u8d39\u8005\u5e02\u573a\u3002\u6570\u4ee5\u767e\u4e07\u8ba1\u7684\u4ea7\u54c1\u53ef\u80fd\u662f\u4f4e\u8c03\u7684\uff0c\u6240\u4ee5\u4f60\u53ef\u80fd\u60f3\u8981\u641c\u7d22\u4e00\u4e9b\u6d41\u884c\u548c\u70ed\u95e8\u7684\u7c7b\u76ee\uff0c\u5e76\u6269\u5c55\u5230\u5176\u4ed6\u6709\u8da3\u7684\u7c7b\u76ee\u3002\u53ef\u4ee5\u4ece\u4ee5\u4e0b\u7f51\u7ad9\u4e86\u89e3\u6d41\u884c\u548c\u70ed\u95e8\u7c7b\u76ee\uff1a eBay Popular\uff1aeBay\u4e0a\u6700\u53d7\u6b22\u8fce\u7684\u4e00\u4e9b\u4ea7\u54c1\u7c7b\u522b\u5217\u8868\u3002 eBay Watch Count\uff1a\u4e00\u79cd\u5728\u7ebf\u5de5\u5177\uff0c\u53ef\u4ee5\u6839\u636e\u6709\u591a\u5c11\u4eba\u201c\u67e5\u770b\u201d\u5217\u51faeBay\u4e0a\u6700\u53d7\u6b22\u8fce\u7684\u9879\u76ee\u3002 http://www.watchcount.com/ \u4e03\uff0c\u8bba\u575b\u793e\u533a Reddit\u662f\u6700\u5927\u7684\u793e\u4ea4\u5a92\u4f53\u65b0\u95fb\u805a\u5408\u5668\u3002\u5b83\u5c06\u81ea\u5df1\u63cf\u8ff0\u8d70\u5728\u4e92\u8054\u7f51\u7684\u6700\u524d\u7aef\uff0c\u662f\u975e\u5e38\u6709\u5f71\u54cd\u529b\u7684\u3002Reddit\u6709\u6570\u4ee5\u5343\u8ba1\u7684\u201csubreddits\uff08\u677f\u5757\uff09\u201d\uff0c\u5b83\u4eec\u662f\u9002\u5408\u4e8e\u4e0d\u540c\u7684\u4e3b\u9898\u548c\u5174\u8da3\u9886\u57df\u3002\u5728\u8fd9\u4e9b\u677f\u5757\u4e2d\uff0c\u4f60\u53ef\u4ee5\u627e\u5230\u5f88\u591a\u7075\u611f\u7684\u4ea7\u54c1\u60f3\u6cd5\u3002 \u5982\u679c\u60a8\u5bf9\u7279\u5b9a\u884c\u4e1a\u4ea7\u54c1\u7c7b\u76ee\u6709\u4e00\u4e2a\u60f3\u6cd5\uff0c\u90a3\u4e48\u503c\u5f97\u8fdb\u884c\u641c\u7d22\u5e76\u627e\u5230\u5408\u9002\u7684\u677f\u5757\u793e\u533a\u52a0\u5165\u5e76\u79ef\u6781\u878d\u5165\u5176\u4e2d\u3002","title":"Shopify\u72ec\u7acb\u7ad9\u7684\u51e0\u5957\u9009\u54c1\u65b9\u6cd5"},{"location":"pages/affiliate/select-products-from-hottrend/#Shopify\u72ec\u7acb\u7ad9\u7684\u51e0\u5957\u9009\u54c1\u65b9\u6cd5","text":"1.\u5206\u4eab\u4e00\u4e9b\u6211\u5e73\u65f6\u5173\u6ce8\u7684\u70ed\u95e8\u52a8\u6001\u7684\u7f51\u7ad9/\u5e73\u53f0 (1)\u8c37\u6b4c\u8d8b\u52bf https://trends.google.com/trends/hottrends Google Trends\u7684Hot Trends \u80fd\u5b9e\u65f6\u770b\u5230\u5404\u56fd\u5404\u5730\u533a\u7684\u70ed\u95e8\u4ea7\u54c1\u548c\u8bdd\u9898\u3002\u4f60\u53ef\u4ee5\u4ece\u4e2d\u83b7\u53d6\u5230\u7075\u611f\u6216\u8005\u4e86\u89e3\u5230\u4eba\u4eec\u66f4\u613f\u610f\u82b1\u94b1\u5728\u54ea\u4e9b\u65b9\u9762? \u4ee5\u4e0b\u7528 API \u83b7\u53d6 Google Trend Hottrend RSS feed \u5217\u8868 GTrend.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 import feedparser import ssl #National Variables dict_nations = {'UNITED_STATES' : 'p1','ARGENTINA': 'p30', 'AUSTRALIA': 'p8', 'AUSTRIA': 'p44', 'BELGIUM': 'p41', 'BRAZIL': 'p18', 'CANADA': 'p13', 'CHILE': 'p38', 'COLOMBIA': 'p32', 'CZECHIA': 'p43', 'DENMARK': 'p49', 'EGYPT': 'p29', 'FINLAND': 'p50', 'FRANCE': 'p16', 'GERMANY': 'p15', 'GREECE': 'p48', 'HONG_KONG': 'p10', 'HUNGARY': 'p45', 'INDIA': 'p3', 'INDONESIA': 'p19', 'IRELAND': 'p54', 'ISRAEL': 'p6', 'ITALY': 'p27', 'JAPAN': 'p4', 'KENYA': 'p37', 'MALAYSIA': 'p34', 'MEXICO': 'p21', 'NETHERLANDS': 'p17', 'NEW_ZEALAND': 'p53', 'NIGERIA': 'p52', 'NORWAY': 'p51', 'PHILIPPINES': 'p25', 'POLAND': 'p31', 'PORTUGAL': 'p47', 'ROMANIA': 'p39', 'RUSSIA': 'p14', 'SAUDI_ARABIA': 'p36', 'SINGAPORE': 'p5', 'SOUTH_AFRICA': 'p40', 'SOUTH_KOREA': 'p23', 'SPAIN': 'p26', 'SWEDEN': 'p42', 'SWITZERLAND': 'p46', 'TAIWAN': 'p12', 'THAILAND': 'p33', 'TURKEY': 'p24', 'UKRAINE': 'p35', 'UNITED_KINGDOM': 'p9', 'VIETNAM': 'p28', } # EXAMPLE SEARCH SYNTAX # United States: # https://trends.google.com/trends/hottrends#pn=p1 # United States RSS: # https://trends.google.com/trends/hottrends/atom/feed?pn=p1 # United Kingdom: # https://trends.google.com/trends/hottrends#pn=p9 # United Kingdom RSS: # https://trends.google.com/trends/hottrends/atom/feed?pn=p9 TRENDING_URL = 'http://www.google.com/trends/hottrends/atom/feed?pn={}' def hot(feed_url): \"\"\"Returns a list of hit terms via google trends \"\"\" try: listing = feedparser.parse(feed_url)['entries'] trends = [item['title'] for item in listing] return trends except Exception as e: print('ERR hot terms failed!', str(e)) return None if __name__ == \"__main__\": if hasattr(ssl, '_create_unverified_context'): ssl._create_default_https_context = ssl._create_unverified_context print(hot(TRENDING_URL.format(dict_nations.get(\"UNITED_STATES\")))) (2)ubersuggest https://ubersuggest.io/ \u514d\u8d39\u7684\u5173\u952e\u8bcd\u5de5\u5177\uff0c\u7531\u6b64\u4f60\u53ef\u4ee5\u8bbe\u7f6e\u597d\u533a\u57df\u540e\u8f93\u5165\u5173\u952e\u4ea7\u54c1\uff0c\u4e86\u89e3\u5404\u56fd\u7684\u641c\u7d22\u4e60\u60ef\u3002 (3)trendhunter https://www.trendhunter.com/ \u8fd9\u4e2a\u7f51\u7ad9\u4e5f\u662f\u89c2\u5bdf\u6700\u65b0\u6d41\u884c\u8d8b\u52bf\u7684\u3002 (4)yahoo\u96c5\u864e https://www.yahoo.com/ \u7f51\u7ad9\u53f3\u4e0a\u89d2\u7684trending now\u4e5f\u662f\u4e00\u4e2a\u53d1\u73b0\u70ed\u70b9\uff0c\u70ed\u95e8\u4ea7\u54c1\u7684\u5730\u65b9\uff0c\u591a\u4e3a\u667a\u80fd\u7535\u5b50\u4ea7\u54c1\u3002 (5)\u5404\u5927\u7535\u5546\u5e73\u53f0\u70ed\u9500\u699c \u8fd8\u6709amazon/ebay/wish/Aliexpress\u8fd9\u4e9b\u5e73\u53f0\u7684\u70ed\u9500\u699c\uff0c\u4f60\u53ef\u4ee5\u627e\u56db\u9897\u661f\u8bc4\u9274\u7684\u4ea7\u54c1\uff0c\u53ef\u4ee5\u627e\u591a\u4eba\u8bc4\u8bba\u7684\u4ea7\u54c1\u3002 (6)kickstarter https://www.kickstarter.com/discover/ kickstarter\u4e0a\u7684\u53d1\u73b0\u9875\u9762 (7)walmart https://www.walmart.com/\u6c83\u5c14\u739b\u8d85\u5e02 \uff0c\u5173\u6ce8\u5b83\u7684banner\u548c\u4e0b\u680f\u7684Top Selling Pickup Products (8)thisiswhyimbroke https://www.thisiswhyimbroke.com/ \u5b83\u7684\u7ec6\u5206\u7c7b\u522b\u4e5f\u5f88\u5e9e\u5927 \u4ee5\u4e0a\u518d\u7ed3\u5408Facebook\u3001Instagram\u3001Youtube\u3001Pintest\u3001Google+\u4ee5\u53caLinkedIn\u7ed3\u5408\u81ea\u8eab\u8d44\u6e90\uff0c\u7ecf\u9a8c\u548c\u5174\u8da3\uff0c\u6c47\u603b\u51fa\u4ea7\u54c1\u6e05\u5355\uff0c\u518d\u9010\u4e00\u7b5b\u9009\u3002 2.\u5927\u6570\u636e\u7edf\u8ba1\u5bfb\u627e\u6f5c\u529b\u80a1 \u6570\u636e\u9009\u54c1\u5927\u5bb6\u4e0d\u964c\u751f\uff0c\u4f46\u662f\u5230\u5e95\u5982\u4f55\u7528\u6570\u636e\u9009\u54c1\uff0c\u8fd9\u5c31\u96be\u4e86\uff0c\u4e00\u7ec4\u6570\u636e\u5305\u542b\u7684\u4fe1\u606f\u7ed9\u4e0d\u540c\u7684\u4eba\u53ef\u4ee5\u5206\u6790\u51fa\u4e0d\u540c\u7684\u7ed3\u679c\uff0c\u6211\u4eec\u4ee5shopee\u5e73\u53f0\u4e3a\u4f8b\u6765\u8bf4\u3002 \u9996\u5148\u6570\u636e\u7684\u83b7\u5f97\u9014\u5f841\u3001\u5b98\u65b9\u5468\u62a52\u3001\u4e09\u65b9\u7edf\u8ba1\u5e73\u53f0 \u5b98\u65b9\u5468\u62a5\u76f4\u63a5\u660e\u4e86\u7684\u5c55\u793a\u4e86\u4ea7\u54c1\u9500\u552e\u6570\u636e\uff0c\u5173\u952e\u8bcd\u6570\u636e\uff0c\u53ef\u4f9b\u5356\u5bb6\u53c2\u8003\uff0c\u4f46\u66f4\u591a\u7684\u662f\u53c2\u8003\u8d8b\u52bf\uff0c\u4ece\u6218\u7565\u5c42\u9762\u4e0a\u628a\u63a7\u4ea7\u54c1\u65b9\u5411\uff0c\u5bf9\u6211\u4eec\u7684\u5b9e\u9645\u9009\u54c1\u8fc7\u7a0b\uff0c\u5f88\u96be\u4e0b\u624b\uff0c\u56e0\u4e3a\u4f60\u8ddf\u5356\uff0c\u4f60\u9700\u8981\u8003\u8651\u662f\u5426\u6709\u7ade\u4e89\u529b\uff0c\u4f60\u4e0d\u8ddf\u5356\uff0c\u4f60\u4e5f\u5f88\u96be\u5355\u9760\u6570\u636e\u7814\u7a76\u51fa\u6765\u76ee\u6807\u5e02\u573a\u5ba2\u6237\u7684\u5ba1\u7f8e\u7b49\u7ec6\u8282\u95ee\u9898\u3002\u8fd9\u65f6\u5019\uff0c\u4e09\u65b9\u6570\u636e\u5c31\u80fd\u5e2e\u4f60\u89e3\u51b3\u6218\u672f\u4e0a\u7684\u95ee\u9898\u3002 \u9996\u5148\u4e09\u65b9\u6570\u636e\u5e73\u53f0\u6709\u54ea\u4e9b\uff1f \u5f88\u591a\uff0c\u5728\u6b64\u7b80\u5355\u4e3e\u4f8b1\u3001\u6d77\u9e70\u6570\u636e2\u3001\u6dd8\u6570\u636e \u600e\u4e48\u8fdb\u5165\uff1f\u767e\u5ea6\u641c\u3002\u600e\u4e48\u4f7f\u7528\uff1f\u6211\u4eec\u6765\u770b\u770b\u53ef\u4ee5\u901a\u8fc7\u6570\u636e\u7814\u7a76\u70b9\u4ec0\u4e48\u51fa\u6765\u3002 \u4ee5\u6d77\u9e70\u6570\u636e\u4e3a\u4f8b \u56fe\u7247\u9875\u9762\u6709\u70b9\u5c0f\uff0c\u5177\u4f53\u5927\u5bb6\u53ef\u4ee5\u76f4\u63a5\u5b9e\u9645\u53bb\u770b\u4e00\u4e0b\uff0c\u6570\u636e\u662f\u4e0d\u6536\u8d39\u7684\uff0c\u5982\u679c\u4f60\u4e0d\u9700\u8981\u4f7f\u7528\u4ed6\u7684\u4e00\u4e9b\u9ad8\u7ea7\u529f\u80fd\u3002 \u6211\u4eec\u5207\u6362\u5230shopee\u5e73\u53f0\uff0c\u518d\u9009\u9a6c\u6765\u7ad9\uff0c\u8fd9\u65f6\u5019\u4f1a\u8df3\u51fa\u6765\u6240\u6709\u7684\u9a6c\u6765\u7ad9\u9500\u552e\u6570\u636e\uff0c\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u6392\u540d\uff0c\u67e5\u770b\u9a6c\u6765\u7ad9\u9500\u91cf\u6700\u9ad8\u7684\u4ea7\u54c1\u662f\u4ec0\u4e48\u3002 \u5f53\u7136\u5982\u679c\u4f60\u60f3\u901a\u8fc7\u6570\u636e\u9009\u54c1\u4f60\u53ef\u4ee5\u8fd9\u6837 \u9009\u62e9shopee\u5e73\u53f0\u6570\u636e\uff0c\u9009\u62e9\u9a6c\u6765\u7ad9\uff0c\u9009\u62e9\u53ea\u67e5\u770b\u8fd1\u4e00\u4e2a\u6708\u5185\u624d\u4e0a\u67b6\u7684\u4ea7\u54c1\uff0c\u9009\u62e9\u53ea\u67e5\u770b\u6d77\u5916\u5356\u5bb6\uff0c\u9009\u62e9\u9500\u91cf\u5927\u4e8e100\u3002\u8fd9\u4e2a\u65f6\u5019\u5728\u8fdb\u884c\u4e86\u8fd9\u4e48\u591a\u9644\u52a0\u6761\u4ef6\u540e\uff0c\u4f60\u770b\u5230\u4e86\u4ec0\u4e48\uff1f \u6ca1\u9519\uff0c\u5c31\u662f\u5e02\u573a\u7684\u6f5c\u529b\u7206\u6b3e\uff0c\u8fd9\u4e2a\u4ea7\u54c1\u5728\u521a\u521a\u4e0a\u67b6\u4e0d\u4e45\uff0c\u5c31\u80fd\u5355\u91cf\u76f4\u63a5\u98d9\u5347\uff0c\u660e\u663e\u7684\u53cd\u6620\u4e86\u5e02\u573a\u9700\u6c42\u589e\u957f\uff0c\u800c\u4e14\u7ade\u4e89\u4e0d\u5927\uff0c\u5426\u5219\u5982\u679c\u539f\u6765\u5c31\u6709\u5f88\u591a\u5356\u5bb6\u5356\uff0c\u4ed6\u600e\u4e48\u4f1a\u5728\u4e0a\u67b6\u4e00\u4e2a\u6708\u5c31\u5355\u91cf\u98d9\u5347\u5462\uff1f \u6570\u636e\u9009\u54c1\u73a9\u6cd5\u5f88\u591a\uff0c\u8fd9\u662f\u7559\u7ed9\u903b\u8f91\u80fd\u529b\u5f3a\u7684\u5356\u5bb6\u4f7f\u7528\u7684 3.\u5229\u57fa\u5e02\u573a\u6398\u7b2c\u4e00\u6876\u91d1 \u4ec0\u4e48\u53eb\u5229\u57fa\u5e02\u573a\uff1f \u5229\u57fa\u5e02\u573a\u662f\u6307\u7531\u5df2\u6709\u5e02\u573a\u7edd\u5bf9\u4f18\u52bf\u7684\u4f01\u4e1a\u6240\u5ffd\u7565\u7684\u67d0\u4e9b\u7ec6\u5206\u5e02\u573a\uff0c\u5e76\u4e14\u5728\u6b64\u5e02\u573a\u5c1a\u672a\u5b8c\u5584\u4f9b\u5e94\u670d\u52a1\uff0c\u4e00\u822c\u7531\u8f83\u5c0f\u7684\u4ea7\u54c1\u5e02\u573a\u5e76\u5177\u6709\u6301\u7eed\u53d1\u5c55\u6f5c\u529b\u4e2d\u4e00\u4e9b\u9700\u8981\u4f46\u5c1a\u672a\u88ab\u6ee1\u8db3\u7684\u65cf\u7fa4\u6d88\u8d39\u8005\u6240\u7ec4\u6210\u3002 \u90a3\u6211\u4eec\u5c31\u660e\u767d\u4e86\uff0c\u5173\u952e\u70b9\u4e24\u4e2a \u4e00\u662f\u7ec6\u5206\u5e02\u573a \u4e8c\u662f\u6709\u5e02\u573a\u9700\u6c42 \u90a3\u600e\u4e48\u6765\u5207\u4e2d\u5229\u57fa\u5e02\u573a\u5462\uff1f\u9760\u8111\u5b50! \u6bd4\u5982\u4f60\u53ef\u4ee5\u8fd9\u6837\u60f3 \u53f0\u6e7e\u5e02\u573a\u6bcd\u5a74\u7528\u54c1\u597d\u5356\uff0c\u6bcd\u5a74\u4ea7\u54c1\u6709\u4ec0\u4e48\uff1f \u7ae5\u88c5\uff0c\u73a9\u5177\uff0c\u5b55\u5987\u88c5\uff0c\u8fd8\u6709\u5462\uff1f \u5176\u5b9e\u8fd8\u6709\u5f88\u591a\uff0c\u65e2\u7136\u5b55\u5987\u88c5\u597d\u5356\u8bf4\u660e\u5b55\u5987\u591a\uff0c\u5b55\u5987\u9664\u4e86\u7a7f\u8863\u670d\u8fd8\u6709\u4e00\u5927\u5806\u9700\u6c42\u5427\uff1f \u6bd4\u5982\uff0c\u5b55\u5987\u9aa8\u76c6\u4fee\u590d\u4eea\u5b55\u5987\u9a6c\u6876\u4e13\u7528\u57ab\u4f60\u60f3\u4e0d\u5230\u7684\u4e1c\u897f\u5176\u5b9e\u5c31\u662f\u5229\u6da6\u6240\u5728 4.\u4e92\u8054\u7f51\u5305\u542b\u4e30\u5bcc\u7684\u60f3\u6cd5\u548c\u7075\u611f \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\u975e\u5e38\u5b9e\u7528\u7684\u4ea7\u54c1\u7075\u611f\u548c\u60f3\u6cd5\u3002\u4e0d\u8fc7\u5f53\u4f60\u9605\u8bfb\u65f6\uff0c\u8bf7\u786e\u4fdd\u4f60\u7684\u60f3\u6cd5\u8981\u8d85\u8d8a\u4ea7\u54c1\u672c\u8eab\u3002\u8fd9\u53ef\u80fd\u542c\u8d77\u6765\u5f88\u9648\u65e7\uff0c\u4f46\u662f\u7531\u4e8e\u5728\u6700\u5e38\u89c1\u548c\u53d7\u6b22\u8fce\u7684\u4ea7\u54c1\u7c7b\u522b\u4e2d\u7ade\u4e89\u6fc0\u70c8\uff0c\u9009\u62e9\u4e0d\u540c\u6216\u72ec\u7279\u7684\u89d2\u5ea6\u53ef\u80fd\u5bf9\u4f60\u7684\u6210\u529f\u66f4\u6709\u5e2e\u52a9\u3002\u5c3d\u91cf\u4e0d\u8981\u53ea\u770b\u4ea7\u54c1\uff0c\u800c\u662f\u770b\u770b\u4ea7\u54c1\u53ef\u4ee5\u4f7f\u7528\u7684\u65b0\u65b9\u5f0f\uff0c\u53ef\u4ee5\u60f3\u8c61\u7684\u65b0\u65b9\u6cd5\u548c\u65b0\u5e02\u573a\u3002 \u5217\u4e00\u4e2a\u6e05\u5355 \u5f53\u4f60\u9605\u8bfb\u672c\u6587\u65f6\uff0c\u8bf7\u51c6\u5907\u4e00\u5f20\u7eb8\uff0c\u6700\u597d\u5728\u7eb8\u4e0a\u6355\u83b7\u4f60\u6240\u6709\u60f3\u6cd5\u3002\u4e00\u65e6\u8bb0\u5f55\u4e86\u6240\u6709\u5934\u8111\u98ce\u66b4\u7684\u60f3\u6cd5\uff0c\u4f60\u7a0d\u540e\u5c06\u53ef\u4ee5\u56de\u60f3\u4f60\u5f53\u65f6\u7684\u60f3\u6cd5\uff0c\u5e76\u8fdb\u4e00\u6b65\u8bc4\u4f30\u4ed6\u4eec\u7684\u53ef\u884c\u6027\u548c\u5e02\u573a\u6f5c\u529b\u3002 \u4e00\uff0c\u4ece\u4f60\u9047\u5230\u6216\u8005\u60f3\u88ab\u89e3\u51b3\u7684\u95ee\u9898\u5f00\u59cb \u5728\u4f60\u5f00\u59cb\u4e3a\u4f60\u7684\u4ea7\u54c1\u641c\u7d22\u4e92\u8054\u7f51\u7684\u6df1\u5ea6\u548c\u5730\u7403\u7684\u5c3d\u5934\u4e4b\u524d\uff0c\u6700\u597d\u4ece\u4f60\u5df2\u7ecf\u62e5\u6709\u7684\u60f3\u6cd5\u5f00\u59cb\u3002 \u5982\u679c\u4f60\u50cf\u5927\u591a\u6570\u521b\u4e1a\u8005\u4e00\u6837\uff0c\u5df2\u7ecf\u6709\u4e00\u4e9b\u60f3\u6cd5\u4e86\uff0c\u6bd4\u5982\u4f60\u60f3\u5356\u7684\u4ea7\u54c1\u6216\u4ee5\u524d\u60f3\u8fc7\u7684\u4ea7\u54c1\u3002\u4e5f\u8bb8\u662f\u4f60\u591a\u5e74\u524d\u7684\u60f3\u6cd5\uff0c\u6216\u8005\u662f\u4f60\u5728\u751f\u6d3b\u4e2d\u9047\u5230\u95ee\u9898\uff0c\u4f46\u76ee\u524d\u8fd8\u6ca1\u6709\u5f88\u597d\u7684\u89e3\u51b3\u65b9\u6848\u3002\u5f53\u4f60\u5217\u6e05\u5355\u65f6\uff0c\u4ee5\u4e0b\u51e0\u4e2a\u95ee\u9898\u9700\u8981\u4f60\u601d\u8003\uff1a 1.\u4ec0\u4e48\u4ea7\u54c1\u6216\u884c\u4e1a\u4f60\u7279\u522b\u70ed\u8877\u6216\u8005\u6709\u5174\u8da3\uff1f 2\u4f60\u7684\u670b\u53cb\u70ed\u8877\u4e8e\u4ec0\u4e48\u4ea7\u54c1\u6216\u884c\u4e1a\uff1f 3\u4f60\u5728\u81ea\u5df1\u7684\u751f\u6d3b\u4e2d\u6709\u4ec0\u4e48\u75db\u70b9\u6216\u4ee4\u4eba\u6cae\u4e27\u7684\u7ecf\u5386\uff1f \u4e8c\uff0c\u672c\u5730\u793e\u533a\uff0c\u8bbe\u8eab\u5904\u5730 \u4f60\u8de8\u5883\u7535\u5546\u7684\u60f3\u6cd5\u53ef\u80fd\u4f1a\u6bd4\u60a8\u60f3\u8c61\u4e2d\u66f4\u63a5\u8fd1\u3002\u4f20\u7edf\u7684\u5b9e\u4f53\u5e97\u6bd4\u7535\u5546\u65f6\u95f4\u957f\u5f88\u591a\uff0c\u6240\u4ee5\u5b83\u53ef\u4ee5\u7ed9\u4f60\u5f88\u591a\u542f\u793a\u3002\u5728\u5b9e\u4f53\u96f6\u552e\u5e97\u91cc\u6ce8\u610f\u5f53\u5730\u7684\u8d8b\u52bf\u53ef\u80fd\u6709\u52a9\u4e8e\u6fc0\u53d1\u4f60\u5728\u7f51\u4e0a\u8d2d\u4e70\u5546\u54c1\u7684\u60f3\u6cd5\u3002\u5c1d\u8bd5\u82b1\u4e00\u4e2a\u4e0b\u5348\u65f6\u95f4\u770b\u770b\u793e\u533a\u5468\u56f4\uff0c\u6ce8\u610f\u662f\u5426\u6709\u65b0\u7684\u6216\u6709\u8da3\u7684\u96f6\u552e\u6982\u5ff5\u548c\u5546\u54c1\u663e\u793a\u3002 \u793e\u533a\u4ea7\u54c1\u7075\u611f\u7684\u53e6\u4e00\u4e2a\u91cd\u8981\u6765\u6e90\u53ef\u4ee5\u5f53\u5730\u7684\u62a5\u7eb8\uff0c\u8fd9\u4e9b\u62a5\u7eb8\u5f80\u5f80\u5177\u6709\u65b0\u7684\uff0c\u521b\u65b0\u7684\u548c\u672c\u5730\u6982\u5ff5\u7684\u4ea7\u54c1\u3002\u5f53\u4f60\u770b\u8fd9\u4e9b\u8d44\u6e90\u65f6\uff0c\u95ee\u95ee\u81ea\u5df1\u662f\u5426\u53ef\u4ee5\u53d8\u6210\u4e00\u4e2a\u5728\u7ebf\u7684\u673a\u4f1a\u3002 \u4e09\uff0c\u8de8\u5883\u7535\u5546\u6d88\u8d39\u8005\u8d8b\u52bf\u76f8\u5173\u7f51\u7ad9\u548c\u520a\u7269 \u5173\u6ce8\u8de8\u5883\u7535\u5546\u6d88\u8d39\u8005\u8d8b\u52bf\u7f51\u7ad9\u548c\u520a\u7269\u662f\u5f00\u59cb\u4e86\u89e3\u6d88\u8d39\u8005\u4ea7\u54c1\u53d1\u5c55\u65b9\u5411\u548c\u5176\u4ed6\u4f01\u4e1a\u5bb6\u5411\u5e02\u573a\u63a8\u51fa\u7684\u60f3\u6cd5\u7684\u4e00\u4e2a\u597d\u6e20\u9053\u3002 \u63a8\u8350\u51e0\u4e2a\u56fd\u5916\u7f51\u7ad9\uff1a http://trendwatching.com/ http://www.trendhunter.com/ https://www.springwise.com/ \u56db\uff0c\u884c\u4e1a\u9886\u5bfc\u9886\u8896 \u4f60\u53ef\u80fd\u4e0d\u77e5\u9053\u8981\u9500\u552e\u54ea\u4e9b\u4ea7\u54c1\uff0c\u4f46\u4e5f\u8bb8\u4f60\u77e5\u9053\u4f60\u60f3\u8981\u4ece\u4e8b\u7684\u884c\u4e1a\u6216\u5e02\u573a\u3002\u4f7f\u7528\u5404\u79cd\u5728\u7ebf\u5de5\u5177\uff0c\u60a8\u53ef\u4ee5\u53d1\u73b0\u5e76\u8ddf\u8e2a\u60a8\u611f\u5174\u8da3\u7684\u4ea7\u54c1\u5728\u884c\u4e1a\u4e2d\u7684\u5f71\u54cd\u529b\u3002\u901a\u8fc7\u793e\u4ea4\u5a92\u4f53\u5173\u6ce8\u884c\u4e1a\u9886\u5bfc\u9886\u8896\uff0c\u5173\u6ce8\u4ed6\u4eec\u793e\u4ea4\u5a92\u4f53\u53d1\u5e03\u7684\u4e00\u4e9b\u5185\u5bb9\uff0c\u6216\u8bb8\u53ef\u4ee5\u5e2e\u52a9\u4f60\u63ed\u5f00\u6216\u8005\u542f\u53d1\u4f60\u7684\u4e00\u4e9b\u65b0\u60f3\u6cd5\u3002 \u4e94\uff0c\u793e\u4ea4\u5a92\u4f53\u7f51\u7ad9 \u793e\u4ea4\u5a92\u4f53\u7f51\u7ad9\uff0c\u5982Pinterest\u53ef\u4ee5\u8bf4\u662f\u4e00\u4e9b\u4ea7\u54c1\u7684\u91d1\u77ff\u3002\u5728\u4e0a\u9762\u8bb8\u591a\u56fe\u50cf\u5305\u542b\u4e86\u6709\u8da3\u7684\uff0c\u65b0\u8d8b\u52bf\u7684\u6d88\u8d39\u8005\u4ea7\u54c1\u3002\u4f7f\u7528\u5185\u7f6e\u7684\u793e\u4ea4\u8baf\u53f7\uff0c\u6709\u65f6\u4f60\u53ef\u4ee5\u7acb\u5373\u611f\u53d7\u5230\u4ed6\u4eec\u7684\u53d7\u6b22\u8fce\u7a0b\u5ea6\u3002 \u8fd9\u53ef\u80fd\u662f\u4f60\u7684\u7b2c\u4e00\u4e2a\u7ebf\u7d22\uff0c\u5982\u679c\u6709\u4e00\u4e2a\u6709\u5e02\u573a\u7684\u4ea7\u54c1\u3002\u6bd4\u5982\uff1aFacebook,Instagram,Pinterest. \u516d\uff0c\u5728\u7ebf\u6d88\u8d39\u5e02\u573a \u4ea7\u54c1\u60f3\u6cd5\u7684\u53e6\u4e00\u4e2a\u4e30\u5bcc\u6765\u6e90\u662f\u5728\u7ebf\u6d88\u8d39\u8005\u5e02\u573a\u3002\u6570\u4ee5\u767e\u4e07\u8ba1\u7684\u4ea7\u54c1\u53ef\u80fd\u662f\u4f4e\u8c03\u7684\uff0c\u6240\u4ee5\u4f60\u53ef\u80fd\u60f3\u8981\u641c\u7d22\u4e00\u4e9b\u6d41\u884c\u548c\u70ed\u95e8\u7684\u7c7b\u76ee\uff0c\u5e76\u6269\u5c55\u5230\u5176\u4ed6\u6709\u8da3\u7684\u7c7b\u76ee\u3002\u53ef\u4ee5\u4ece\u4ee5\u4e0b\u7f51\u7ad9\u4e86\u89e3\u6d41\u884c\u548c\u70ed\u95e8\u7c7b\u76ee\uff1a eBay Popular\uff1aeBay\u4e0a\u6700\u53d7\u6b22\u8fce\u7684\u4e00\u4e9b\u4ea7\u54c1\u7c7b\u522b\u5217\u8868\u3002 eBay Watch Count\uff1a\u4e00\u79cd\u5728\u7ebf\u5de5\u5177\uff0c\u53ef\u4ee5\u6839\u636e\u6709\u591a\u5c11\u4eba\u201c\u67e5\u770b\u201d\u5217\u51faeBay\u4e0a\u6700\u53d7\u6b22\u8fce\u7684\u9879\u76ee\u3002 http://www.watchcount.com/ \u4e03\uff0c\u8bba\u575b\u793e\u533a Reddit\u662f\u6700\u5927\u7684\u793e\u4ea4\u5a92\u4f53\u65b0\u95fb\u805a\u5408\u5668\u3002\u5b83\u5c06\u81ea\u5df1\u63cf\u8ff0\u8d70\u5728\u4e92\u8054\u7f51\u7684\u6700\u524d\u7aef\uff0c\u662f\u975e\u5e38\u6709\u5f71\u54cd\u529b\u7684\u3002Reddit\u6709\u6570\u4ee5\u5343\u8ba1\u7684\u201csubreddits\uff08\u677f\u5757\uff09\u201d\uff0c\u5b83\u4eec\u662f\u9002\u5408\u4e8e\u4e0d\u540c\u7684\u4e3b\u9898\u548c\u5174\u8da3\u9886\u57df\u3002\u5728\u8fd9\u4e9b\u677f\u5757\u4e2d\uff0c\u4f60\u53ef\u4ee5\u627e\u5230\u5f88\u591a\u7075\u611f\u7684\u4ea7\u54c1\u60f3\u6cd5\u3002 \u5982\u679c\u60a8\u5bf9\u7279\u5b9a\u884c\u4e1a\u4ea7\u54c1\u7c7b\u76ee\u6709\u4e00\u4e2a\u60f3\u6cd5\uff0c\u90a3\u4e48\u503c\u5f97\u8fdb\u884c\u641c\u7d22\u5e76\u627e\u5230\u5408\u9002\u7684\u677f\u5757\u793e\u533a\u52a0\u5165\u5e76\u79ef\u6781\u878d\u5165\u5176\u4e2d\u3002","title":"Shopify\u72ec\u7acb\u7ad9\u7684\u51e0\u5957\u9009\u54c1\u65b9\u6cd5"},{"location":"pages/affiliate/semantic-search/","text":"\u4ec0\u4e48\u662f\u8bed\u4e49\u641c\u7d22\uff1f\u5b83\u662f\u5982\u4f55\u5f71\u54cdSEO\u7684 \u00b6 \u4f60\u6709\u6ca1\u6709\u6ce8\u610f\u5230\uff0c\u73b0\u5728\u7684\u8c37\u6b4c\u51e0\u4e4e\u53ef\u4ee5\u5904\u7406\u4f60\u5411\u5b83\u629b\u51fa\u7684\u4efb\u4f55\u95ee\u9898\uff1f \u5c31\u5148\u770b\u770b\u8fd9\u4e2a\u67e5\u8be2\u7ed3\u679c\uff1a \u5c3d\u7ba1\u6ca1\u6709\u63d0\u53ca\u5c24\u8fbe\u7684\u540d\u5b57\uff0c\u4f46Google\u7406\u89e3\u4e86\u6211\u4eec\u5728\u8c08\u8bba\u8c01\uff0c\u4ee5\u53ca\u6211\u4eec\u60f3\u4e86\u89e3\u7684\u6709\u5173\u4ed6\u7684\u4fe1\u606f\u3002 \u5982\u679c\u6ca1\u6709\u8bed\u4e49\u641c\u7d22\uff0c\u5c31\u4e0d\u53ef\u80fd\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002 \u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u4f60\u5c06\u5b66\u4e60\u5230\uff1a - \u4ec0\u4e48\u662f\u8bed\u4e49\u641c\u7d22 - \u4e3a\u4ec0\u4e48\u8bf4\u8bed\u4e49\u641c\u7d22\u5f88\u91cd\u8981 - \u5728\u8bed\u4e49\u641c\u7d22\u4e2d\u53d1\u6325\u4f5c\u7528\u7684Google\u6280\u672f - \u5982\u4f55\u8c03\u6574\u4f60\u7684SEO\u4ee5\u9002\u5e94\u8bed\u4e49\u641c\u7d22 \u4ec0\u4e48\u662f\u8bed\u4e49\u641c\u7d22\uff1f \u00b6 \u8bed\u4e49\u641c\u7d22\u662f\u73b0\u4ee3\u641c\u7d22\u5f15\u64ce\u7528\u6765\u8fd4\u56de\u6700\u76f8\u5173\u641c\u7d22\u7ed3\u679c\u7684\u4e00\u79cd\u4fe1\u606f\u68c0\u7d22\u8fc7\u7a0b\u3002\u5b83\u4fa7\u91cd\u4e8e\u641c\u7d22\u67e5\u8be2\u80cc\u540e\u7684\u610f\u56fe\uff0c\u800c\u4e0d\u662f\u4f20\u7edf\u7684\u5173\u952e\u8bcd\u5339\u914d\u3002 \u8be5\u672f\u8bed\u6765\u81ea\u8bed\u8a00\u5b66\u7684\u4e00\u4e2a\u5206\u652f\uff0c\u79f0\u4e3a\u8bed\u4e49\u5b66\uff0c\u5b83\u6d89\u53ca\u5bf9\u610f\u56fe\u7684\u7814\u7a76\u3002 \u4e3a\u4ec0\u4e48\u8bf4\u8bed\u4e49\u641c\u7d22\u5f88\u91cd\u8981\uff1f \u00b6 \u5c3d\u7ba1\u6709\u65e0\u6570\u7684\u53d8\u91cf\u5728\u8d77\u4f5c\u7528\uff0c\u4f46\u662f\u8bed\u4e49\u641c\u7d22\u7684\u539f\u7406\uff0c\u4e3a\u4ec0\u4e48\u9700\u8981\u5b83\uff0c\u4ee5\u53ca\u5b83\u5982\u4f55\u88ab\u5f71\u54cd\uff0c\u662f\u5f88\u5bb9\u6613\u7406\u89e3\u7684\u3002 - \u7528\u6237\u4f7f\u7528\u7684\u8bed\u8a00\u5f80\u5f80\u4e0e\u6240\u9700\u5185\u5bb9\u4e0d\u4e00\u6837 - \u5f88\u591a\u641c\u7d22\u90fd\u5728\u65e0\u610f\u4e2d\u4ea7\u751f\u6b67\u4e49 - \u4e86\u89e3\u8bcd\u6c47\u5c42\u7ea7\u548c\u5b9e\u4f53\u5173\u7cfb\u7684\u9700\u8981 - \u53cd\u6620\u4e2a\u4eba\u5174\u8da3\u548c\u8d8b\u52bf\u7684\u9700\u8981 \u7528\u6237\u4f7f\u7528\u7684\u8bed\u8a00\u5f80\u5f80\u4e0e\u6240\u9700\u5185\u5bb9\u4e0d\u4e00\u6837 \u00b6 \u66f4\u7cdf\u7cd5\u7684\u662f\uff0c\u6211\u4eec\u6709\u65f6\u751a\u81f3\u4e0d\u77e5\u9053\u5982\u4f55\u6b63\u786e\u8868\u8fbe\u6211\u4eec\u60f3\u641c\u7d22\u7684\u662f\u4ec0\u4e48\u3002 \u6bd4\u65b9\u8bf4\uff0c\u4f60\u5728\u7535\u53f0\u91cc\u542c\u5230\u4e86\u4e00\u9996\u964c\u751f\u7684\u6b4c\u66f2\u3002\u4f60\u559c\u6b22\u5b83\uff0c\u4e8e\u662f\u5f00\u59cb\u5728Google\u4e0a\u968f\u673a\u641c\u7d22\u6b4c\u8bcd\uff0c\u76f4\u5230\u4f60\u7ec8\u4e8e\u627e\u5230\u5b83\u4e3a\u6b62\u3002 \u518d\u589e\u52a0\u4e00\u70b9\u590d\u6742\u7a0b\u5ea6\u7684\u8bdd\uff0c\u5c06\u4f60\u5728Google\u4e2d\u8f93\u5165\u7684\u5185\u5bb9\u4e0e\u5bf9Siri\uff0cAlexa\u6216Google\u667a\u80fd\u52a9\u7406\u7684\u8f93\u5165\u5185\u5bb9\u8fdb\u884c\u6bd4\u8f83\u3002 \u73b0\u5728\uff0c\u5173\u952e\u5b57\u5c31\u53d8\u6210\u4e86\u5bf9\u8bdd\u3002 \u8868\u8fbe\u540c\u4e00\u4e2a\u60f3\u6cd5\u7684\u65b9\u5f0f\u592a\u591a\u4e86\uff0c\u641c\u7d22\u5f15\u64ce\u9700\u8981\u5904\u7406\u6240\u6709\u8fd9\u4e9b\u65b9\u5f0f\u3002 \u641c\u7d22\u5f15\u64ce\u9700\u8981\u80fd\u591f\u6839\u636e\u4e24\u8005\u7684\u610f\u4e49\uff0c\u5c06\u5176\u7d22\u5f15\u4e2d\u7684\u5185\u5bb9\u4e0e\u4f60\u7684\u641c\u7d22\u67e5\u8be2\u8fdb\u884c\u5339\u914d\u3002 \u65e0\u8bba\u8fd9\u542c\u8d77\u6765\u591a\u4e48\u5177\u6709\u6311\u6218\u6027\uff0c\u8fd9\u4ec5\u4ec5\u662f\u4e2a\u5f00\u59cb\u3002 \u5f88\u591a\u641c\u7d22\u90fd\u5728\u65e0\u610f\u4e2d\u4ea7\u751f\u6b67\u4e49 \u00b6 \u5927\u7ea640% \u7684\u82f1\u8bed\u5355\u8bcd\u662f\u591a\u4e49\u8bcd\u2014\u2014\u5b83\u4eec\u6709\u4e24\u4e2a\u6216\u66f4\u591a\u7684\u542b\u4e49\u3002\u8fd9\u53ef\u4ee5\u8bf4\u662f\u8bed\u4e49\u641c\u7d22\u8981\u89e3\u51b3\u7684\u6700\u91cd\u5927\u7684\u6311\u6218\u3002 \u4f8b\u5982\uff0c\u4ec5\u5728\u7f8e\u56fd\uff0c\u5173\u952e\u8bcd \u201cpython \u201c\u7684\u6708\u641c\u7d22\u91cf\u5c31\u670953.3\u4e07\u6b21\uff1a \u5982\u679c\u6211\u66fe\u7ecf\u641c\u7d22\u8fc7 \u201cpython\u201d\uff0c\u6211\u5f88\u53ef\u80fd\u6307\u7684\u662f\u7f16\u7a0b\u8bed\u8a00\u3002\u4f46\u79d1\u6280\u884c\u4e1a\u4ee5\u5916\u7684\u4eba\u5f88\u53ef\u80fd\u4f1a\u60f3\u5230\u771f\u6b63\u7684\u87d2\u86c7\uff0c\u6216\u8005\u662f \u4f20\u5947\u7684\u82f1\u56fd\u559c\u5267\u56e2 \u3002 \u8fd9\u91cc\u7684\u95ee\u9898\u662f\uff0c\u5982\u679c\u6ca1\u6709\u4e0a\u4e0b\u6587\uff0c\u5355\u8bcd\u5f88\u5c11\u6709\u660e\u786e\u7684\u542b\u4e49\u3002\u5728\u591a\u4e49\u8bcd\u7684\u57fa\u7840\u4e0a\uff0c\u6709\u65e0\u6570\u7684\u540d\u8bcd\u4e5f\u53ef\u4ee5\u540c\u65f6\u662f\u5f62\u5bb9\u8bcd\uff0c\u52a8\u8bcd\uff0c\u6216\u8005\u4e24\u8005\u517c\u800c\u6709\u4e4b\u3002\u800c\u4e14\u6211\u4eec\u8fd8\u53ea\u662f\u5728\u8c08\u8bba\u5b57\u9762\u610f\u601d\u7684\u8303\u7574\u3002\u5982\u679c\u6211\u4eec\u6df1\u5165\u7814\u7a76\u5176\u63a8\u8bba\u7684\u8bdd\uff08\u8b6c\u5982\u8bbd\u523a\u7684\u65f6\u5019\uff09\uff0c\u5c31\u4f1a\u53d8\u5f97\u66f4\u52a0\u6709\u8da3\u3002 \u5728\u8bed\u4e49\u5b66\u4e2d\uff0c\u8bed\u5883\u5c31\u662f\u4e00\u5207\uff0c\u8fd9\u5c06\u4e3a\u6211\u4eec\u5f15\u51fa\u4e86\u63a5\u4e0b\u6765\u7684\u4e24\u70b9\u3002 \u4e86\u89e3\u8bcd\u6c47\u5c42\u7ea7\u548c\u5b9e\u4f53\u5173\u7cfb\u7684\u9700\u8981 \u00b6 \u8ba9\u6211\u4eec\u6765\u770b\u770b\u4ee5\u4e0b\u7684\u641c\u7d22\u67e5\u8be2\u548c\u70ed\u95e8\u641c\u7d22\u7ed3\u679c\uff1a \u8fd9\u786e\u5b9e\u975e\u5e38\u5389\u5bb3\u4e86\u3002 \u4ee5\u4e0b\u662fGoogle\u7406\u89e3\u6b64\u67e5\u8be2\u5fc5\u987b\u8981\u505a\u7684: \u5b83\u8981\u77e5\u9053\u201c\u4f34\u4fa3 \u201c\u662f\u6307\u59bb\u5b50/\u5973\u53cb/\u4e08\u592b/\u7537\u53cb/\u914d\u5076\u3002 \u4e86\u89e3\u5230\u6b27\u6bd4\u738b\u51fa\u73b0\u5728\u591a\u90e8\u7535\u5f71\u548c\u8fde\u7eed\u5267\u4e2d\uff0c\u7531\u4e0d\u540c\u7684\u6f14\u5458\u626e\u6f14\u3002 \u5efa\u7acb\u8054\u7cfb\u3002 \u4ee5\u53cd\u6620\u201c\u6b27\u6bd4\u738b\u201d\u6709\u6b67\u4e49\u7684\u65b9\u5f0f\u6765\u663e\u793a\u641c\u7d22\u7ed3\u679c\u3002 \u6211\u751a\u81f3\u65e0\u6cd5\u60f3\u8c61\uff0c\u5982\u679c\u6211\u57282010\u5e74\u6216\u66f4\u65e9\u7684\u65f6\u5019\u505a\u8fd9\u4e2a\u641c\u7d22\uff0c\u4f1a\u5f97\u5230\u4ec0\u4e48\u6837\u7684\u641c\u7d22\u7ed3\u679c\u3002 \u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u56de\u8fc7\u5934\u6765\u89e3\u91ca\u8fd9\u4e9b\u6982\u5ff5\u5427\u3002 \u8bcd\u6c47\u5c42\u7ea7 \u8bf4\u660e\u4e86\u5355\u8bcd\u4e4b\u95f4\u7684\u5173\u7cfb\u3002 \u4f34\u4fa3\u8fd9\u4e2a\u8bcd\u5bf9\u59bb\u5b50\uff0c\u7537\u53cb\uff0c\u914d\u5076\u548c\u5176\u4ed6\u8bcd\u6765\u8bf4\u662f\u4e0a\u4e00\u7ea7\u7684\uff08\u4e0a\u4f4d\u8bcd\uff09\u3002 \u5982\u524d\u6240\u8ff0\uff0c\u6211\u4eec\u7684\u67e5\u8be2\u901a\u5e38\u4e0e\u6240\u9700\u5185\u5bb9\u7684\u786e\u5207\u8bcd\u7ec4\u4e0d\u5339\u914d\u3002 \u77e5\u9053\u201c\u8d1f\u62c5\u5f97\u8d77\u201d\u662f\u4ecb\u4e8e\u4fbf\u5b9c\uff0c\u4e2d\u6863\u548c\u5408\u7406\u4ef7\u683c\u4e4b\u95f4\u7684\u4efb\u4f55\u4e8b\u7269\uff0c\u8fd9\u4e00\u70b9\u81f3\u5173\u91cd\u8981\u3002 \u5728\u6b64\u793a\u4f8b\u4e2d\uff0c \u5b9e\u4f53 \u662f\u7535\u5f71\u548c\u8fde\u7eed\u5267\u4e2d\u7684\u89d2\u8272\uff08\u6b27\u6bd4\u738b\uff09\uff0c\u5177\u6709\u7279\u5b9a\u5de5\u4f5c\u7684\u4eba\uff08\u6f14\u5458\uff09\u4ee5\u53ca\u4e0e\u4e4b\u76f8\u5173\u8054\u7684\u4eba\uff08\u4f34\u4fa3\uff09\u3002 \u901a\u5e38\uff0c\u5b9e\u4f53\u662f\u53ef\u4ee5\u660e\u786e\u8bc6\u522b\u7684\u5bf9\u8c61\u6216\u6982\u5ff5-\u901a\u5e38\u662f\u4eba\uff0c\u5730\u70b9\u548c\u4e8b\u7269\u3002 \u5982\u679c\u6240\u6709\u7684\u8fd9\u4e9b\u8bed\u8a00\u7684\u590d\u6742\u6027\u8fd8\u4e0d\u591f\u7684\u8bdd\uff0c\u6211\u4eec\u8fd8\u5fc5\u987b\u518d\u6df1\u5165\u4e00\u4e9b\u3002 \u53cd\u6620\u4e2a\u4eba\u5174\u8da3\u548c\u8d8b\u52bf\u7684\u9700\u8981 \u00b6 \u8ba9\u6211\u4eec\u56de\u5230\u201cpython\u201d\u7684\u4f8b\u5b50\u3002\u5982\u679c\u6211\u641c\u7d22\u8fd9\u4e2a\u8bcd\uff0c\u786e\u5b9e\u4f1a\u5f97\u5230\u6240\u6709\u4e0e\u7f16\u7a0b\u8bed\u8a00\u76f8\u5173\u7684\u7ed3\u679c\u3002 \u65e0\u8bba\u6211\u4eec\u591a\u4e48\u4e0d\u559c\u6b22\u4efb\u4f55\u4f7f\u7528\u6211\u4eec\u4e2a\u4eba\u6570\u636e\u7684\u65b9\u5f0f\uff0c\u81f3\u5c11\u8fd9\u5bf9\u641c\u7d22\u5f15\u64ce\u6765\u8bf4\u662f\u6709\u7528\u7684\u3002 Google\u7ed3\u5408 \u4e86\u6709\u9650\u7684\u6570\u636e\u548c\u4f60\u7684\u641c\u7d22\u5386\u53f2\uff0c\u4ee5\u63d0\u4f9b\u66f4\u51c6\u786e\u548c\u4e2a\u6027\u5316\u7684\u641c\u7d22\u7ed3\u679c\u3002 \u6211\u4eec\u90fd\u77e5\u9053\u8fd9\u4e00\u70b9\u3002\u53ea\u8981\u5728\u641c\u7d22\u680f\u4e2d\u8f93\u5165\u4efb\u4f55\u7c7b\u578b\u7684\u670d\u52a1\uff0c\u4f60\u5c31\u4f1a\u5f97\u5230\u672c\u5730\u5316\u7684\u7ed3\u679c\u3002 \u4f46\u66f4\u5438\u5f15\u4eba\u7684\u662f\uff0c\u8c37\u6b4c\u80fd\u591f\u6839\u636e\u52a8\u6001\u53d8\u5316\u7684 \u641c\u7d22\u610f\u56fe \u4e34\u65f6\u8c03\u6574\u641c\u7d22\u7ed3\u679c\u3002 \u4f8b\u5982\uff0c\u51a0\u72b6\u75c5\u6bd2\u4e0d\u662f\u4e00\u4e2a\u65b0\u540d\u8bcd\u3002 \u5b83\u4e00\u76f4\u662f\u4e00\u7ec4\u75c5\u6bd2\u7684\u540d\u79f0\u3002 \u4f46\u4f17\u6240\u5468\u77e5\uff0c\u641c\u7d22\u610f\u56fe\u57282020\u5e74\u521d\u8fc5\u901f\u6539\u53d8\u3002\u4eba\u4eec\u5f00\u59cb\u5bfb\u627e\u6709\u5173\u7279\u5b9a\u51a0\u72b6\u75c5\u6bd2\uff08SARS-CoV\u20112\uff09\u7684\u4fe1\u606f\uff0c\u56e0\u6b64\u5fc5\u987b\u5bf9 SERP \u8fdb\u884c\u76f8\u5e94\u7684\u8c03\u6574\u3002 \u4ece\u4e0a\u9762 \u201c\u51a0\u72b6\u75c5\u6bd2 \u201c\u7684SERP\u5386\u53f2\u4f4d\u7f6e\u4e2d\u53ef\u4ee5\u770b\u5230\uff0c\u76ee\u524d\u6392\u540d\u524d\u4e94\u7684\u641c\u7d22\u7ed3\u679c\u4e2d\uff0c\u6ca1\u6709\u4e00\u4e2a\u662f\u57282020\u5e74\u4e4b\u524d\u3002 \u5728\u5723\u8bde\u8282\u6216\u9ed1\u8272\u661f\u671f\u4e94\u7b49\u5927\u578b\u9500\u552e\u6d3b\u52a8\u671f\u95f4\uff0c\u4f60\u4f1a\u5728\u7535\u5b50\u5546\u52a1\u884c\u4e1a\u770b\u5230\u540c\u6837\u7684\u60c5\u51b5\u3002\u90a3\u6bb5\u65f6\u95f4\u7684\u641c\u7d22\u610f\u56fe\u662f\u5177\u6709\u9ad8\u5ea6\u4ea4\u6613\u6027\u7684\uff0c\u800c\u4eba\u4eec\u901a\u5e38\u53ef\u80fd\u66f4\u613f\u610f\u770b\u5230\u76f8\u5173\u7684\u6bd4\u8f83\u6216\u8bc4\u8bba\u3002 Google\u4e0d\u65ad\u63a8\u51fa\u7b97\u6cd5\u66f4\u65b0\u548c\u65b0\u6280\u672f\uff0c\u4ee5\u8fdb\u4e00\u6b65\u63d0\u9ad8\u5176\u7406\u89e3\u81ea\u7136\u8bed\u8a00\u548c\u641c\u7d22\u610f\u56fe\u7684\u80fd\u529b\u3002 \u52302020\u5e74\uff0c\u8bed\u4e49\u641c\u7d22\u53d1\u5c55\u5230\u4eca\u5929\u7684\u6210\u679c\uff0c\u4e00\u5171\u7ecf\u5386\u4e86\u56db\u4e2a\u91cd\u8981\u7684\u91cc\u7a0b\u7891\u3002 \u77e5\u8bc6\u56fe\u8c31 \u00b6 Google\u7684\u77e5\u8bc6\u56fe\u8c31 \u4e8e2012\u5e74\u53d1\u5e03\uff0c\u662f\u5b9e\u4f53\u53ca\u5b9e\u4f53\u4e4b\u95f4\u5173\u7cfb\u7684\u77e5\u8bc6\u5e93\u3002 \u4f60\u53ef\u4ee5\u60f3\u8c61\u5b83\u7684\u6837\u5b50\u5927\u6982\u662f\u8fd9\u6837\u7684-\u2014\u2014\u4f46\u5b9e\u9645\u4e0a\u6709 50\u4ebf\u4e2a\u5b9e\u4f53 \uff1a \u7b80\u800c\u8a00\u4e4b\uff0c\u8fd9\u662f\u4e00\u9879\u542f\u52a8\u5e76\u5b9e\u73b0\u4e86\u4ece\u5173\u952e\u5b57\u5339\u914d\u5230\u8bed\u4e49\u5339\u914d\u8f6c\u53d8\u7684\u6280\u672f\u3002 \u5411\u77e5\u8bc6\u56fe\u8c31\u63d0\u4f9b\u4fe1\u606f\u7684\u65b9\u6cd5\u4e3b\u8981\u6709\u4e24\u79cd\uff1a \u7ed3\u6784\u5316\u6570\u636e\uff08\u7a0d\u540e\u8be6\u8ff0\uff09 \u4ece\u6587\u672c\u4e2d\u63d0\u53d6\u5b9e\u4f53 \u5bf9\u4e8e\u7b2c\u4e8c\u70b9\uff0c\u641c\u7d22\u5f15\u64ce\u9700\u8981\u7406\u89e3\u81ea\u7136\u8bed\u8a00\u3002\u8fd9\u65f6\u5019\uff0c\u4e0b\u9762\u4e09\u4e2a\u7b97\u6cd5\u7684\u66f4\u65b0\u5c31\u4f1a\u53d1\u6325\u4f5c\u7528\u3002 \u8702\u9e1f\u7b97\u6cd5 \u00b6 \u65e9\u57282013\u5e74\uff0cGoogle\u63a8\u51fa\u4e86\u4e00\u4e2a\u540d\u4e3a Hummingbird\uff08\u8702\u9e1f\uff09 \u7684\u641c\u7d22\u7b97\u6cd5\uff0c\u4ee5\u8fd4\u56de\u66f4\u597d\u7684\u641c\u7d22\u7ed3\u679c\u3002 \u8fd9\u4e2a\u7b97\u6cd5\u5c24\u5176\u6709\u52a9\u4e8e\u5e94\u5bf9\u590d\u6742\u7684\u641c\u7d22\u67e5\u8be2\u3002 \u8702\u9e1f\u7b97\u6cd5\u662f\u7b2c\u4e00\u4e2a\u91cd\u5927\u66f4\u65b0\uff0c\u5b83\u66f4\u52a0\u5f3a\u8c03\u641c\u7d22\u8bf7\u6c42\u80cc\u540e\u7684\u610f\u56fe\uff0c\u800c\u975e\u5355\u4e2a\u5173\u952e\u8bcd\u3002 \u5b83\u6781\u901f\u50ac\u5316\u4e86\u201c\u4e3a\u8bdd\u9898\u800c\u521b\u4f5c\u5185\u5bb9\u201d\u7684\u70ed\u6f6e\uff0c\u800c\u4e0d\u662f\u201c\u4e3a\u5355\u4e2a\u5173\u952e\u8bcd\u800c\u5199\u4f5c\u201d\u3002 RankBrain\u7b97\u6cd5 \u00b6 \u5982\u679c\u4f60\u66fe\u7ecf\u9047\u5230\u8fc7\u201c\u6f5c\u5728\u8bed\u4e49\u7d22\u5f15\u201d\u6216 LSI\u5173\u952e\u8bcd \u8fd9\u4e00\u77ed\u8bed\uff0c\u53ef\u4ee5\u5ffd\u7565\u8fd9\u4e2a\u4e86\u3002 Google\u7528RankBrain\u7b97\u6cd5\u89e3\u51b3\u4e86LSI\u4ea7\u751f\u7684\u95ee\u9898\u3002 \u800c\u6211\u4eec\u524d\u9762\u5df2\u7ecf\u8ba8\u8bba\u8fc7\u8fd9\u4e2a\u95ee\u9898\u3002\u662f\u5173\u4e8e\u641c\u7d22\u8bf7\u6c42\u4e2d\u6240\u4f7f\u7528\u7684\u8bed\u8a00\u548c\u6240\u9700\u5185\u5bb9\u4e4b\u95f4\u7684\u4e0d\u5339\u914d\u3002 Google\u7684RankBrain\u91c7\u7528\u4e86\u4f18\u4e8eLSI\u7684\u6280\u672f\u3002\u901a\u4fd7\u5730\u8bf4\uff0c\u901a\u8fc7\u4f7f\u7528\u590d\u6742\u7684\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\uff0cRankBrain\u751a\u81f3\u53ef\u4ee5\u7406\u89e3\u4e0d\u719f\u6089\u7684\u5355\u8bcd\u548c\u77ed\u8bed\u7684\u542b\u4e49\u3002 \u800c\u8003\u8651\u5230 15%\u7684\u641c\u7d22\u8bf7\u6c42\u90fd\u662f\u65b0\u7684 \uff0c\u8fd9\u53ef\u662f\u4e00\u9879\u5de8\u5927\u7684\u5de5\u7a0b\u3002 \u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3aRankBrain\u662f\u8702\u9e1f\u7b97\u6cd5\u7684\u5347\u7ea7\u7248\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u72ec\u7acb\u7684\u641c\u7d22\u7b97\u6cd5\u3002\u5b83\u662f \u6700\u5f3a\u7684\u6392\u540d\u4fe1\u53f7 \u4e4b\u4e00\uff0c\u4f46\u4f60\u80fd\u4e3b\u52a8\u4e3a\u5176\u505a\u51fa\u7684\u4f18\u5316\uff0c\u4e5f\u5c31\u53ea\u6709 \u6ee1\u8db3\u641c\u7d22\u610f\u56fe \u4e86\u3002 BERT\u6a21\u578b \u00b6 \u57fa\u4e8eTransformer\u7684\u53cc\u5411\u7f16\u7801\u5668\u8868\u793a\uff08BERT\uff09\u8fd9\u4e00\u81ea\u7136\u8bed\u8a00\u8868\u793a\u6a21\u578b\uff0c\u662f\u5bf9\u8bed\u4e49\u641c\u7d22\u8fd0\u4f5c\u65b9\u5f0f\u7684\u6700\u65b0\u7684\u91cd\u5927\u5347\u7ea7\u3002\u81ea2019\u5e74\u5e95\u4ee5\u6765\uff0c\u5b83\u5f71\u54cd\u4e86\u5927\u7ea6 10%\u7684\u67e5\u8be2 \u3002 \u522b\u62c5\u5fc3\uff0c\u6211\u4e5f\u82b1\u4e86\u4e0d\u5c11\u65f6\u95f4\u624d\u4ec5\u4ec5\u8bb0\u5f97\u4f4fBERT\u4ee3\u8868\u4ec0\u4e48\u3002 \u4f60\u9700\u8981\u77e5\u9053\u7684\u662f\uff0cBERT\u53ef\u4ee5\u63d0\u9ad8\u5bf9\u957f\u800c\u590d\u6742\u7684\u53e5\u5b50\u4ee5\u53ca\u67e5\u8be2\u7684\u7406\u89e3\u3002\u5b83\u662f\u4e00\u79cd\u5904\u7406\u6b67\u4e49\u548c\u7ec6\u5fae\u5dee\u522b\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u56e0\u4e3a\u5b83\u529b\u56fe\u66f4\u597d\u5730\u7406\u89e3\u5355\u8bcd\u7684\u4e0a\u4e0b\u6587\u3002 \u867d\u7136\u4f60\u5e76\u4e0d\u80fd\u505a\u4ec0\u4e48\u4e8b\u60c5\u6765\u4f18\u5316BERT\u672c\u8eab\uff0c\u4f46\u7b80\u5355\u5730\u4e86\u89e3\u4e0b\u5b83\u7684\u542b\u4e49\u548c\u4f5c\u7528\u603b\u662f\u597d\u7684\u3002 \u5982\u4f55\u8c03\u6574\u4f60\u7684SEO\u4ee5\u9002\u5e94\u8bed\u4e49\u641c\u7d22 \u00b6 \u6211\u5df2\u7ecf\u5728\u6587\u7ae0\u4e2d\u629b\u51fa\u4e86\u4e0d\u5c11\u63d0\u793a\u548c\u6280\u5de7\u3002\u73b0\u5728\u6765\u70b9\u771f\u6b63\u6709\u5b9e\u64cd\u6027\u7684\u3002 1. \u76ee\u6807\u4e3b\u9898\uff0c\u800c\u975e\u5173\u952e\u8bcd \u00b6 \u5728\u8fc7\u53bb\u7684SEO\u65f6\u4ee3\uff0c\u4f60\u53ef\u4ee5\u7528\u5173\u4e8e\u540c\u4e00\u4e3b\u9898\u7684\u72ec\u7acb\u5185\u5bb9\u6765\u83b7\u5f97\u9ad8\u6392\u540d\uff0c\u4f46\u8fd9\u91cc\u9762\u5b9a\u4f4d\u7684\u5173\u952e\u8bcd\u4f1a\u7565\u6709\u4e0d\u540c\uff0c\u5982\u5173\u952e\u8bcd: open graph tags open graph meta tags og meta tags open graph tag what is open graph facebook open graph tags \u73b0\u5728\u7684\u60c5\u51b5\u5df2\u7ecf\u4e0d\u662f\u8fd9\u6837\u4e86\u3002Google\u73b0\u5728\u660e\u767d\uff0c\u6240\u6709\u8fd9\u4e9b\u5173\u952e\u8bcd\u641c\u7d22\u7684\u610f\u601d\u90fd\u5927\u540c\u5c0f\u5f02\uff0c\u5e76\u4e3a\u6240\u6709\u8fd9\u4e9b\u641c\u7d22\u53bb\u6392\u540d\u57fa\u672c\u76f8\u540c\u7684\u9875\u9762\u3002 \u5728\u521b\u5efa\u5185\u5bb9\u65f6\u8981\u7262\u8bb0\u8fd9\u4e00\u70b9\u3002\u6211\u4eec\u7684\u76ee\u7684\u4e0d\u518d\u662f\u53ea\u4e3a\u4e00\u4e2a\u5173\u952e\u8bcd\u6392\u540d\uff0c\u800c\u662f\u8981\u6df1\u5165\u5730\u63a2\u8ba8\u4e00\u4e2a\u4e3b\u9898\uff0c\u8fd9\u6837Google\u624d\u4f1a\u4e3a\u4f60\u7684\u9875\u9762\u6392\u540d\u5f88\u591a\u7c7b\u4f3c\u7684 \u957f\u5c3e\u5173\u952e\u8bcd \u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u5173\u4e8eOpen Graph\uff08\u5f00\u653e\u56fe\u8c31\uff09\u5143\u6807\u7b7e\u7684\u6587\u7ae0\u5728\u597d\u51e0\u767e\u4e2a\u5173\u952e\u8bcd\u4e2d\u6392\u540d\u5f88\u597d\u3002\u5176\u4e2d\u5f88\u591a\u662f\u641c\u7d22\u540c\u4e00\u4e8b\u7269\u7684\u4e0d\u540c\u65b9\u5f0f\uff0c\u4f46\u6709\u4e9b\u662f \u201cog:title\u201d\u3001\u201cog url \u201c\u548c \u201cog:image \u201c\u8fd9\u6837\u7684\u5b50\u8bdd\u9898\u3002 \u6211\u4eec\u4e4b\u6240\u4ee5\u80fd\u591f\u5728\u8fd9\u4e9b\u5173\u952e\u8bcd\u4e0b\u83b7\u5f97\u6392\u540d\uff0c\u662f\u56e0\u4e3a\u6211\u4eec\u5199\u4e86\u4e00\u7bc7\u5173\u4e8e\u8fd9\u4e2a\u4e3b\u9898\u7684\u6df1\u5ea6\u6587\u7ae0\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u5173\u4e8e\u4e00\u4e2a\u5173\u952e\u8bcd\u3002 \u60f3\u77e5\u9053\u53ef\u4ee5\u5199\u4e9b\u4ec0\u4e48\u5b50\u8bdd\u9898\u7684\u8bdd\uff0c\u8fd9\u91cc\u6709\u4e2a\u4e0d\u9519\u7684\u529e\u6cd5\uff1a\u5728\u8fd9\u4efd\u62a5\u544a\u91cc\u627e\u5230\u8fd9\u4e2a\u8bdd\u9898\u4e0b\u7684\u70ed\u95e8\u9875\u9762\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u60a8\u60f3\u5199\u4e00\u7bc7\u6709\u5173\u79cd\u690d\u82a6\u7b0b\u7684\u6587\u7ae0\u3002 \u5982\u679c\u5c06\u201c\u79cd\u690d\u82a6\u7b0b\u201d\u7684\u6392\u540d\u9760\u524d\u9875\u9762\u653e\u5230Ahrefs\u7684 \u7f51\u7ad9\u5206\u6790 \u5e76\u67e5\u770b\u5176 \u81ea\u7136\u641c\u7d22\u5173\u952e\u8bcd \u62a5\u544a\uff0c\u5c31\u4f1a\u770b\u5230\u8fd9\u4e2a\u9875\u9762\u5728\u8fd9\u4e9b\u5173\u952e\u8bcd\u4e0b\u90fd\u83b7\u5f97\u4e86\u6392\u540d\uff0c\u5176\u4e2d\u5305\u62ec\uff1a \u82a6\u7b0b\u9700\u8981\u79cd\u690d\u591a\u6df1 \u82a6\u7b0b\u79cd\u690d\u6761\u4ef6 \u4ec0\u4e48\u65f6\u5019\u79cd\u690d\u82a6\u7b0b \u82a6\u7b0b\u7684\u6700\u4f73\u79cd\u690d\u5730 \u5982\u4f55\u6536\u5272\u82a6\u7b0b \u5982\u4f55\u62a4\u7406\u82a6\u7b0b \u5982\u679c\u4f60\u60f3\u901a\u8fc7\u521b\u4f5c\u4e00\u7bc7\u6df1\u5ea6\u7684\u8d34\u6587\u6765\u83b7\u53d6\u5c3d\u53ef\u80fd\u591a\u7684\u81ea\u7136\u6d41\u91cf\uff0c\u90a3\u4e48\u6240\u6709\u8fd9\u4e9b\u5b50\u8bdd\u9898\u90fd\u4f1a\u662f\u4f60\u5e94\u8be5\u63d0\u53ca\u7684\u3002 \u4e0d\u8fc7\u8981\u5c0f\u5fc3\u3002 \u9488\u5bf9\u7279\u5b9a\u4e3b\u9898\u5e76\u4e0d\u610f\u5473\u7740\u4f60\u5e94\u8be5\u6db5\u76d6\u4e0e\u8be5\u4e3b\u9898\u76f8\u5173\u7684\u6240\u6709\u5185\u5bb9\uff0c\u4e5f\u4e0d\u5fc5\u592a\u6df1\u5165\u3002 \u4ee5\u672c\u6587\u4e3a\u4f8b\u3002 \u6211\u53ef\u4ee5\u82b1\u5341\u51e0\u4e2a\u5c0f\u65f6\u6765\u7814\u7a76\u81ea\u7136\u8bed\u8a00\u5904\u7406\u6a21\u5f0f\u5e76\u6df1\u5165\u7814\u7a76\u8bed\u4e49\u641c\u7d22\u7684\u6280\u672f\u3002 \u4f46\u6211\u6ca1\u6709\u8fd9\u4e48\u505a\uff0c\u56e0\u4e3a\u5176\u5b9e\u5927\u591a\u6570\u4eba\u90fd\u4e0d\u5173\u5fc3\u8fd9\u4e2a\u8bdd\u9898\u3002 \u8fd9\u5c31\u5f15\u51fa\u4e86\u4e0b\u4e00\u70b9\u3002 2. \u8bc4\u4f30\u641c\u7d22\u610f\u56fe \u00b6 \u4f60\u8fd8\u662f\u53ef\u4ee5\u56f4\u7ed5\u67d0\u4e2a\u4e3b\u9898\u6765\u53d1\u5e03\u5185\u5bb9\uff0c\u5373\u4f7f\u8fd9\u4e2a\u4e3b\u9898\u662f\u4e0d\u7b26\u5408\u641c\u7d22\u610f\u56fe\u7684\u3002 \u5047\u8bbe\u4f60\u662f\u4e00\u540d\u8425\u9500\u6570\u636e\u6781\u5ba2\uff0c\u53d1\u73b0\u4e86\u201cSEO\u62a5\u544a\u201d\u8fd9\u4e2a\u4e0d\u9519\u7684\u8bdd\u9898\u3002 \u81ea\u7136\u5730\uff0c\u4f60\u4f1a\u5e0c\u671b\u5206\u4eab\u5236\u4f5c\u6700\u4f73SEO\u62a5\u544a\u6240\u9700\u8981\u7684\u4e1c\u897f\u3002 \u56e0\u6b64\uff0c\u4f60\u4f1a\u60f3\u5230\u201c\u5229\u7528\u641c\u7d22\u8bf7\u6c42\u6765\u521b\u5efa\u6700\u4f73SEO\u62a5\u544a\u201d\u4e4b\u7c7b\u7684\u5185\u5bb9\u3002 \u786e\u5b9e\uff0c\u8fd9\u53ef\u80fd\u662f\u6700\u7ec8\u80fd\u9020\u5c31\u6700\u4f73SEO\u62a5\u544a\u7684\u5185\u5bb9\u3002 \u4f46\u662f\uff0c\u5927\u591a\u6570\u641c\u7d22\u6b64\u4e3b\u9898\u7684\u4eba\u4e0d\u719f\u6089\u8bb8\u591a Google\u8868\u683c\u529f\u80fd \u3002 \u4ed6\u4eec\u53ea\u662f\u60f3\u627e\u5230\u4e00\u4e9b\u53ef\u4ee5\u5e2e\u52a9\u4ed6\u4eec\u5b8c\u6210\u5de5\u4f5c\u7684\u5de5\u5177\uff1a \u6240\u4ee5\uff0c\u5728\u4f60\u5f00\u59cb\u52fe\u52d2\u65b0\u5185\u5bb9\u4e4b\u524d\uff0c\u5148\u770b\u770b\u6392\u540d\u9760\u524d\u7684\u9875\u9762\uff0c\u63a8\u65ad\u4e3b\u9898\u7684\u641c\u7d22\u610f\u56fe\u3002 \u63a8\u8350\u9605\u8bfb\uff1a \u641c\u7d22\u610f\u56fe\uff1a \u4e00\u4e2a\u5341\u5206\u91cd\u8981\u53c8\u7ecf\u5e38\u88ab\u5ffd\u7565\u7684\u201c\u6392\u540d\u8981\u7d20\u201d 3. \u4f7f\u7528\u8bed\u4e49HTML \u00b6 \u5728\u6211\u4eec\u8fd8\u6ca1\u6cd5\u7528\u4e0a\u8bed\u4e49\u641c\u7d22\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4e0d\u5f97\u5df2\u8981\u8f6c\u5411\u8bed\u4e49\u7f51(Sematic Web)\u3002 \u4e07\u7ef4\u7f51\uff08www\uff09\u7684\u539f\u59cb\u6982\u5ff5\u53ef\u4ee5\u89e3\u91ca\u4e3a\u6ca1\u6709\u660e\u786e\u542b\u4e49\u7684\u3001\u6807\u51c6\u5316\u7684\u3001\u4e92\u76f8\u94fe\u63a5\u7684\u6587\u6863\u3002 \u7136\u800c\u73b0\u5728\uff0c\u663e\u7136\u6211\u4eec\u9700\u8981\u201c\u542b\u4e49\u201d\u3002 \u8fd9\u5f97\u4ece\u4f60\u7684\u57fa\u672cHTML\u5f00\u59cb\u8bf4\u8d77\u3002 \u6211\u4eec\u5148\u6765\u6bd4\u8f83\u4ee5\u4e0b\u7684HTML\u5143\u7d20\uff1a \u8bed\u4e49HTML\u4e3a\u4ee3\u7801\u589e\u52a0\u4e86\u542b\u4e49\uff0c\u56e0\u6b64\u673a\u5668\u53ef\u4ee5\u8bc6\u522b\u5bfc\u822a\u6a21\u5757\uff0c\u9875\u7709\uff0c\u9875\u811a\uff0c\u8868\u683c\u6216\u89c6\u9891\u3002 HTML5\u5219\u63d0\u4f9b\u4e86\u6700\u591a\u7684\u8bed\u4e49\u5143\u7d20\uff0c\u5927\u591a\u6570\u73b0\u4ee3CMS\u4e3b\u9898\u90fd\u4f1a\u4f7f\u7528\u8fd9\u4e9b\u5143\u7d20\u3002\u5982\u679c\u4f60\u8fd8\u6ca1\u6709\u7684\u8bdd\uff0c\u901a\u5e38\u4e00\u4e2a\u63d2\u4ef6\u5c31\u53ef\u4ee5\u6dfb\u52a0\u597d\u3002 \u4f46\u662f\u8bed\u4e49HTML\u4ecd\u7136\u975e\u5e38\u6709\u9650\u3002 \u867d\u7136\u5b83\u6709\u6307\u793a\u51fa\u6765\uff1a\u201c\u8fd9\u662f\u4e00\u4e2a\u8868\u683c\uff0c\u8fd9\u662f\u4e00\u4e2a\u9875\u811a\u201d\uff0c\u4f46\u5b83\u6ca1\u529e\u6cd5\u5b9e\u9645\u5185\u5bb9\u7684\u542b\u4e49\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u9700\u8981\u628a\u8fd9\u4e9b\u6807\u8bb0\u7ed3\u6784\u5316\uff08schema\uff09\u3002 4. \u4f7f\u7528Scheme\u6807\u8bb0 \u00b6 Schema\u6807\u8bb0\u662f\u6807\u8bb0\u4f60\u7684\u7f51\u9875\u7684\u53e6\u4e00\u79cd\u65b9\u5f0f\u3002\u5b83\u4e5f\u88ab\u79f0\u4e3a \u7ed3\u6784\u5316\u6570\u636e \uff0c\u53ef\u4ee5\u8bf4\u662f\u7f51\u7edc\u7684\u4e00\u4e2a\u901a\u7528\u8bed\u4e49\u6846\u67b6\u3002 Schema.org.cn\u8bcd\u6c47\u8868 \u5305\u542b\u4e0e\u5c5e\u6027\u76f8\u5173\u8054\u7684\u6570\u767e\u79cdschema\u6807\u8bb0\u7c7b\u578b\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u6765\u6807\u8bb0\u4f60\u7684\u5185\u5bb9\uff0c\u8ba9Google\u65e0\u9700\u590d\u6742\u7684\u7b97\u6cd5\u5373\u53ef\u8f7b\u677e\u7406\u89e3\u3002 \u4f8b\u5982\uff0cGoogle\u4f1a\u66f4\u5bb9\u6613\u4ece\u8fd9\u6837\u7684\u7ed3\u6784\u5316\u5185\u5bb9\u4e2d\u63d0\u53d6\u542b\u4e49: 1 2 \u70f9\u996a\u65f6\u95f4\uff1a20\u5206\u949f \u5361\u8def\u91cc\uff1a80 \u8fd9\u6bd4\u76f4\u63a5\u4ece\u539f\u6587\u4e2d\u63d0\u53d6\u542b\u4e49\u5bb9\u6613\u591a\u4e86\uff1a 1 \u5236\u4f5c\u714e\u997c\u9700\u898120\u5206\u949f\u3002 \u66f4\u7406\u60f3\u7684\u662f\uff0c\u8fd9\u4e9b\u662f\u4f4e\u70ed\u91cf\u7684\u714e\u997c\u2014\u2014\u6bcf\u4efd\u7ea680\u5361\u8def\u91cc\u3002 \u8fd9\u6837\u4e00\u6765\uff0c\u5f53\u7528\u6237\u60f3\u77e5\u9053\u505a\u4e00\u5757\u714e\u997c\u9700\u8981\u591a\u957f\u65f6\u95f4\uff0c\u6216\u8005\u5b83\u6709\u591a\u5c11\u5361\u8def\u91cc\u65f6\uff0cGoogle\u53ef\u4ee5\u4ee5\u6700\u4f73\u7684\u65b9\u5f0f\u63d0\u4f9b\u4fe1\u606f\u3002 \u5ef6\u4f38\u9605\u8bfb \u00b6 \u7ed3\u6784\u5316\u6570\u636e\u662f\u4ec0\u4e48\uff1f\u4ee5\u53ca\u4e3a\u4ec0\u4e48\u8981\u8df5\u884c\u5b83\uff1f \u4e30\u5bcc\u7f51\u9875\u6458\u8981\u662f\u4ec0\u4e48\u4ee5\u53ca\u5982\u4f55\u5728\u641c\u7d22\u7ed3\u679c\u4e2d\u83b7\u5f97? 5. \u6253\u9020\u81ea\u5df1\u7684\u54c1\u724c\uff0c\u6210\u4e3a\u77e5\u8bc6\u56fe\u8c31\u5b9e\u4f53 \u00b6 \u8fd9\u4e2a\u6807\u9898\u4e0d\u9700\u8981\u8fc7\u591a\u89e3\u91ca\u4e86\uff0c\u521a\u624d\u6211\u4eec\u5df2\u7ecf\u8ba8\u8bba\u8fc7\u5b9e\u4f53\uff0c\u6240\u4ee5\u6211\u5efa\u8bae\u4f60\u53ef\u4ee5\u770b\u4e00\u4e0b\u8fd9\u7bc7 \u6df1\u5165\u4e86\u89e3\u77e5\u8bc6\u56fe\u8c31\u7684\u6587\u7ae0 \u3002 \u5728\u6240\u6709\u5173\u4e8e\u8c03\u6574\u4f60\u7684SEO\u4ee5\u9002\u5e94\u8bed\u4e49\u641c\u7d22\u7684\u6280\u5de7\u4e2d\uff0c\u8fd9\u4e2a\u662f\u6700\u96be\u5b9e\u73b0\u7684\u3002\u56e0\u4e3a\u8fd9\u9700\u8981\u957f\u671f\u575a\u6301\u54c1\u724c\u5efa\u8bbe\uff0c\u5e76\u4e14\u540c\u65f6\u8fd0\u7528\u5176\u4ed6\u6240\u6709\u6280\u5de7\u624d\u80fd\u591f\u505a\u5230\u3002 6. \u901a\u8fc7\u94fe\u63a5\u5efa\u7acb\u76f8\u5173\u6027 \u00b6 \u94fe\u63a5\u662f\u5386\u53f2\u4e0a\u6700\u65e9\u7684\u76f8\u5173\u6027\u6307\u6807\u4e4b\u4e00\u3002 \u5982\u679c\u6587\u6863A\u94fe\u63a5\u5230\u6587\u6863B\uff0c\u5219\u5b83\u4eec\u5c31\u53ef\u80fd\u88ab\u89c6\u4e3a\u76f8\u5173\u3002 \u5728\u76f8\u5173\u9875\u9762\u6709\u4f7f\u7528\u81ea\u7136 \u951a\u6587\u672c \u7684 \u7ad9\u5185\u94fe\u63a5 \u548c \u7ad9\u5916\u94fe\u63a5 \u90fd\u53ef\u4ee5\u5e2e\u52a9Google\u5f04\u6e05\u4f60\u7684\u5185\u5bb9\u2014\u2014\u751a\u81f3\u5728\u5904\u7406\u5185\u5bb9\u4e4b\u524d\u3002 \u5ef6\u4f38\u9605\u8bfb \u00b6 \u65b0\u624b\u53cb\u597d\u7684\u94fe\u63a5\u5efa\u8bbe\u6307\u5357 \u5982\u4f55\u83b7\u53d6\u5916\u94fe\uff1a7\u79cd\u4e0d\u9700\u8981\u65b0\u5185\u5bb9\u7684\u7b56\u7565 \u8d44\u6e90\u9875\u9762\u94fe\u63a5\u6784\u5efa\uff1a\u4f60\u552f\u4e00\u9700\u8981\u7684\u6307\u5357 9\u4e2a\u7b80\u5355\u7684\u94fe\u63a5\u5efa\u8bbe\u7b56\u7565 \u6700\u540e\u7684\u601d\u8003 \u00b6 \u8bed\u4e49\u641c\u7d22\u5df2\u7136\u6539\u53d8\u4e86\u6574\u4e2a\u5185\u5bb9\u751f\u6001\u7cfb\u7edf\u3002\u7528\u6237\u53ef\u4ee5\u83b7\u5f97\u66f4\u591a\u76f8\u5173\u7684\u3001\u6709\u4ef7\u503c\u7684\u5185\u5bb9\uff0c\u800c\u8fd9\u4e5f\u4fc3\u4f7f\u4e86\u53d1\u5e03\u8005\u64b0\u5199\u8fd9\u6837\u7684\u5185\u5bb9\u3002 \u867d\u7136\u6d89\u53ca\u5230\u590d\u6742\u7684\u6280\u672f\u548c\u7b97\u6cd5\uff0c\u4f46\u8bed\u4e49\u641c\u7d22\u7684\u539f\u7406\u5f88\u5bb9\u6613\u7406\u89e3\u3002\u73b0\u5728\uff0c\u4f60\u5e94\u8be5\u51c6\u5907\u597d\u505a\u51fa\u4efb\u4f55\u5fc5\u8981\u7684\u6539\u53d8\uff0c\u8ba9\u4f60\u7684SEO\u7b56\u7565\u4fdd\u6301\u5728\u524d\u6cbf\u6c34\u5e73\u3002 \u5173\u4e8e\u8bed\u4e49\u641c\u7d22\uff0c\u4f60\u8fd8\u6709\u4ec0\u4e48\u95ee\u9898\u6216\u610f\u89c1\u5417\uff1f\u8bf7\u5728 Twitter \u4e0a\u4e0e\u6211\u4ea4\u6d41\u3002 \u5982\u679c\u4f60\u60f3\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u8bed\u4e49\u641c\u7d22\u7684\u6280\u672f\u95ee\u9898\uff0c\u8bf7\u5173\u6ce8 Dawn Anderson \u5e76\u67e5\u770b\u5979\u7684 \u6f14\u8bb2 \u3002 \u51e1\u672c\u7f51\u6ce8\u660e\"\u6765\u6e90\uff1aXXX \"\u7684\u6587/\u56fe/\u89c6\u9891\u7b49\u7a3f\u4ef6\uff0c\u672c\u7f51\u8f6c\u8f7d\u51fa\u4e8e\u4f20\u9012\u66f4\u591a\u4fe1\u606f\u4e4b\u76ee\u7684\uff0c\u5e76\u4e0d\u610f\u5473\u7740\u8d5e\u540c\u5176\u89c2\u70b9\u6216\u8bc1\u5b9e\u5176\u5185\u5bb9\u7684\u771f\u5b9e\u6027\u3002\u5982\u6d89\u53ca\u4f5c\u54c1\u5185\u5bb9\u3001\u7248\u6743\u548c\u5176\u5b83\u95ee\u9898\uff0c\u8bf7\u4e0e\u672c\u7f51\u8054\u7cfb\uff0c\u6211\u4eec\u5c06\u5728\u7b2c\u4e00\u65f6\u95f4\u5220\u9664\u5185\u5bb9\uff01 \u4f5c\u8005: Michal Pec\u00e1nek, Ahrefs\u7684\u8425\u9500\u4e13\u5bb6\u548c\u5185\u5bb9\u521b\u4f5c\u8005 \u6765\u6e90\uff1a https://ahrefs.com/blog/zh/semantic-search/","title":"\u4ec0\u4e48\u662f\u8bed\u4e49\u641c\u7d22\uff1f\u5b83\u662f\u5982\u4f55\u5f71\u54cdSEO\u7684"},{"location":"pages/affiliate/semantic-search/#\u4ec0\u4e48\u662f\u8bed\u4e49\u641c\u7d22\u5b83\u662f\u5982\u4f55\u5f71\u54cdSEO\u7684","text":"\u4f60\u6709\u6ca1\u6709\u6ce8\u610f\u5230\uff0c\u73b0\u5728\u7684\u8c37\u6b4c\u51e0\u4e4e\u53ef\u4ee5\u5904\u7406\u4f60\u5411\u5b83\u629b\u51fa\u7684\u4efb\u4f55\u95ee\u9898\uff1f \u5c31\u5148\u770b\u770b\u8fd9\u4e2a\u67e5\u8be2\u7ed3\u679c\uff1a \u5c3d\u7ba1\u6ca1\u6709\u63d0\u53ca\u5c24\u8fbe\u7684\u540d\u5b57\uff0c\u4f46Google\u7406\u89e3\u4e86\u6211\u4eec\u5728\u8c08\u8bba\u8c01\uff0c\u4ee5\u53ca\u6211\u4eec\u60f3\u4e86\u89e3\u7684\u6709\u5173\u4ed6\u7684\u4fe1\u606f\u3002 \u5982\u679c\u6ca1\u6709\u8bed\u4e49\u641c\u7d22\uff0c\u5c31\u4e0d\u53ef\u80fd\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002 \u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u4f60\u5c06\u5b66\u4e60\u5230\uff1a - \u4ec0\u4e48\u662f\u8bed\u4e49\u641c\u7d22 - \u4e3a\u4ec0\u4e48\u8bf4\u8bed\u4e49\u641c\u7d22\u5f88\u91cd\u8981 - \u5728\u8bed\u4e49\u641c\u7d22\u4e2d\u53d1\u6325\u4f5c\u7528\u7684Google\u6280\u672f - \u5982\u4f55\u8c03\u6574\u4f60\u7684SEO\u4ee5\u9002\u5e94\u8bed\u4e49\u641c\u7d22","title":"\u4ec0\u4e48\u662f\u8bed\u4e49\u641c\u7d22\uff1f\u5b83\u662f\u5982\u4f55\u5f71\u54cdSEO\u7684"},{"location":"pages/affiliate/semantic-search/#\u4ec0\u4e48\u662f\u8bed\u4e49\u641c\u7d22","text":"\u8bed\u4e49\u641c\u7d22\u662f\u73b0\u4ee3\u641c\u7d22\u5f15\u64ce\u7528\u6765\u8fd4\u56de\u6700\u76f8\u5173\u641c\u7d22\u7ed3\u679c\u7684\u4e00\u79cd\u4fe1\u606f\u68c0\u7d22\u8fc7\u7a0b\u3002\u5b83\u4fa7\u91cd\u4e8e\u641c\u7d22\u67e5\u8be2\u80cc\u540e\u7684\u610f\u56fe\uff0c\u800c\u4e0d\u662f\u4f20\u7edf\u7684\u5173\u952e\u8bcd\u5339\u914d\u3002 \u8be5\u672f\u8bed\u6765\u81ea\u8bed\u8a00\u5b66\u7684\u4e00\u4e2a\u5206\u652f\uff0c\u79f0\u4e3a\u8bed\u4e49\u5b66\uff0c\u5b83\u6d89\u53ca\u5bf9\u610f\u56fe\u7684\u7814\u7a76\u3002","title":"\u4ec0\u4e48\u662f\u8bed\u4e49\u641c\u7d22\uff1f"},{"location":"pages/affiliate/semantic-search/#\u4e3a\u4ec0\u4e48\u8bf4\u8bed\u4e49\u641c\u7d22\u5f88\u91cd\u8981","text":"\u5c3d\u7ba1\u6709\u65e0\u6570\u7684\u53d8\u91cf\u5728\u8d77\u4f5c\u7528\uff0c\u4f46\u662f\u8bed\u4e49\u641c\u7d22\u7684\u539f\u7406\uff0c\u4e3a\u4ec0\u4e48\u9700\u8981\u5b83\uff0c\u4ee5\u53ca\u5b83\u5982\u4f55\u88ab\u5f71\u54cd\uff0c\u662f\u5f88\u5bb9\u6613\u7406\u89e3\u7684\u3002 - \u7528\u6237\u4f7f\u7528\u7684\u8bed\u8a00\u5f80\u5f80\u4e0e\u6240\u9700\u5185\u5bb9\u4e0d\u4e00\u6837 - \u5f88\u591a\u641c\u7d22\u90fd\u5728\u65e0\u610f\u4e2d\u4ea7\u751f\u6b67\u4e49 - \u4e86\u89e3\u8bcd\u6c47\u5c42\u7ea7\u548c\u5b9e\u4f53\u5173\u7cfb\u7684\u9700\u8981 - \u53cd\u6620\u4e2a\u4eba\u5174\u8da3\u548c\u8d8b\u52bf\u7684\u9700\u8981","title":"\u4e3a\u4ec0\u4e48\u8bf4\u8bed\u4e49\u641c\u7d22\u5f88\u91cd\u8981\uff1f"},{"location":"pages/affiliate/semantic-search/#\u7528\u6237\u4f7f\u7528\u7684\u8bed\u8a00\u5f80\u5f80\u4e0e\u6240\u9700\u5185\u5bb9\u4e0d\u4e00\u6837","text":"\u66f4\u7cdf\u7cd5\u7684\u662f\uff0c\u6211\u4eec\u6709\u65f6\u751a\u81f3\u4e0d\u77e5\u9053\u5982\u4f55\u6b63\u786e\u8868\u8fbe\u6211\u4eec\u60f3\u641c\u7d22\u7684\u662f\u4ec0\u4e48\u3002 \u6bd4\u65b9\u8bf4\uff0c\u4f60\u5728\u7535\u53f0\u91cc\u542c\u5230\u4e86\u4e00\u9996\u964c\u751f\u7684\u6b4c\u66f2\u3002\u4f60\u559c\u6b22\u5b83\uff0c\u4e8e\u662f\u5f00\u59cb\u5728Google\u4e0a\u968f\u673a\u641c\u7d22\u6b4c\u8bcd\uff0c\u76f4\u5230\u4f60\u7ec8\u4e8e\u627e\u5230\u5b83\u4e3a\u6b62\u3002 \u518d\u589e\u52a0\u4e00\u70b9\u590d\u6742\u7a0b\u5ea6\u7684\u8bdd\uff0c\u5c06\u4f60\u5728Google\u4e2d\u8f93\u5165\u7684\u5185\u5bb9\u4e0e\u5bf9Siri\uff0cAlexa\u6216Google\u667a\u80fd\u52a9\u7406\u7684\u8f93\u5165\u5185\u5bb9\u8fdb\u884c\u6bd4\u8f83\u3002 \u73b0\u5728\uff0c\u5173\u952e\u5b57\u5c31\u53d8\u6210\u4e86\u5bf9\u8bdd\u3002 \u8868\u8fbe\u540c\u4e00\u4e2a\u60f3\u6cd5\u7684\u65b9\u5f0f\u592a\u591a\u4e86\uff0c\u641c\u7d22\u5f15\u64ce\u9700\u8981\u5904\u7406\u6240\u6709\u8fd9\u4e9b\u65b9\u5f0f\u3002 \u641c\u7d22\u5f15\u64ce\u9700\u8981\u80fd\u591f\u6839\u636e\u4e24\u8005\u7684\u610f\u4e49\uff0c\u5c06\u5176\u7d22\u5f15\u4e2d\u7684\u5185\u5bb9\u4e0e\u4f60\u7684\u641c\u7d22\u67e5\u8be2\u8fdb\u884c\u5339\u914d\u3002 \u65e0\u8bba\u8fd9\u542c\u8d77\u6765\u591a\u4e48\u5177\u6709\u6311\u6218\u6027\uff0c\u8fd9\u4ec5\u4ec5\u662f\u4e2a\u5f00\u59cb\u3002","title":"\u7528\u6237\u4f7f\u7528\u7684\u8bed\u8a00\u5f80\u5f80\u4e0e\u6240\u9700\u5185\u5bb9\u4e0d\u4e00\u6837"},{"location":"pages/affiliate/semantic-search/#\u5f88\u591a\u641c\u7d22\u90fd\u5728\u65e0\u610f\u4e2d\u4ea7\u751f\u6b67\u4e49","text":"\u5927\u7ea640% \u7684\u82f1\u8bed\u5355\u8bcd\u662f\u591a\u4e49\u8bcd\u2014\u2014\u5b83\u4eec\u6709\u4e24\u4e2a\u6216\u66f4\u591a\u7684\u542b\u4e49\u3002\u8fd9\u53ef\u4ee5\u8bf4\u662f\u8bed\u4e49\u641c\u7d22\u8981\u89e3\u51b3\u7684\u6700\u91cd\u5927\u7684\u6311\u6218\u3002 \u4f8b\u5982\uff0c\u4ec5\u5728\u7f8e\u56fd\uff0c\u5173\u952e\u8bcd \u201cpython \u201c\u7684\u6708\u641c\u7d22\u91cf\u5c31\u670953.3\u4e07\u6b21\uff1a \u5982\u679c\u6211\u66fe\u7ecf\u641c\u7d22\u8fc7 \u201cpython\u201d\uff0c\u6211\u5f88\u53ef\u80fd\u6307\u7684\u662f\u7f16\u7a0b\u8bed\u8a00\u3002\u4f46\u79d1\u6280\u884c\u4e1a\u4ee5\u5916\u7684\u4eba\u5f88\u53ef\u80fd\u4f1a\u60f3\u5230\u771f\u6b63\u7684\u87d2\u86c7\uff0c\u6216\u8005\u662f \u4f20\u5947\u7684\u82f1\u56fd\u559c\u5267\u56e2 \u3002 \u8fd9\u91cc\u7684\u95ee\u9898\u662f\uff0c\u5982\u679c\u6ca1\u6709\u4e0a\u4e0b\u6587\uff0c\u5355\u8bcd\u5f88\u5c11\u6709\u660e\u786e\u7684\u542b\u4e49\u3002\u5728\u591a\u4e49\u8bcd\u7684\u57fa\u7840\u4e0a\uff0c\u6709\u65e0\u6570\u7684\u540d\u8bcd\u4e5f\u53ef\u4ee5\u540c\u65f6\u662f\u5f62\u5bb9\u8bcd\uff0c\u52a8\u8bcd\uff0c\u6216\u8005\u4e24\u8005\u517c\u800c\u6709\u4e4b\u3002\u800c\u4e14\u6211\u4eec\u8fd8\u53ea\u662f\u5728\u8c08\u8bba\u5b57\u9762\u610f\u601d\u7684\u8303\u7574\u3002\u5982\u679c\u6211\u4eec\u6df1\u5165\u7814\u7a76\u5176\u63a8\u8bba\u7684\u8bdd\uff08\u8b6c\u5982\u8bbd\u523a\u7684\u65f6\u5019\uff09\uff0c\u5c31\u4f1a\u53d8\u5f97\u66f4\u52a0\u6709\u8da3\u3002 \u5728\u8bed\u4e49\u5b66\u4e2d\uff0c\u8bed\u5883\u5c31\u662f\u4e00\u5207\uff0c\u8fd9\u5c06\u4e3a\u6211\u4eec\u5f15\u51fa\u4e86\u63a5\u4e0b\u6765\u7684\u4e24\u70b9\u3002","title":"\u5f88\u591a\u641c\u7d22\u90fd\u5728\u65e0\u610f\u4e2d\u4ea7\u751f\u6b67\u4e49"},{"location":"pages/affiliate/semantic-search/#\u4e86\u89e3\u8bcd\u6c47\u5c42\u7ea7\u548c\u5b9e\u4f53\u5173\u7cfb\u7684\u9700\u8981","text":"\u8ba9\u6211\u4eec\u6765\u770b\u770b\u4ee5\u4e0b\u7684\u641c\u7d22\u67e5\u8be2\u548c\u70ed\u95e8\u641c\u7d22\u7ed3\u679c\uff1a \u8fd9\u786e\u5b9e\u975e\u5e38\u5389\u5bb3\u4e86\u3002 \u4ee5\u4e0b\u662fGoogle\u7406\u89e3\u6b64\u67e5\u8be2\u5fc5\u987b\u8981\u505a\u7684: \u5b83\u8981\u77e5\u9053\u201c\u4f34\u4fa3 \u201c\u662f\u6307\u59bb\u5b50/\u5973\u53cb/\u4e08\u592b/\u7537\u53cb/\u914d\u5076\u3002 \u4e86\u89e3\u5230\u6b27\u6bd4\u738b\u51fa\u73b0\u5728\u591a\u90e8\u7535\u5f71\u548c\u8fde\u7eed\u5267\u4e2d\uff0c\u7531\u4e0d\u540c\u7684\u6f14\u5458\u626e\u6f14\u3002 \u5efa\u7acb\u8054\u7cfb\u3002 \u4ee5\u53cd\u6620\u201c\u6b27\u6bd4\u738b\u201d\u6709\u6b67\u4e49\u7684\u65b9\u5f0f\u6765\u663e\u793a\u641c\u7d22\u7ed3\u679c\u3002 \u6211\u751a\u81f3\u65e0\u6cd5\u60f3\u8c61\uff0c\u5982\u679c\u6211\u57282010\u5e74\u6216\u66f4\u65e9\u7684\u65f6\u5019\u505a\u8fd9\u4e2a\u641c\u7d22\uff0c\u4f1a\u5f97\u5230\u4ec0\u4e48\u6837\u7684\u641c\u7d22\u7ed3\u679c\u3002 \u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u56de\u8fc7\u5934\u6765\u89e3\u91ca\u8fd9\u4e9b\u6982\u5ff5\u5427\u3002 \u8bcd\u6c47\u5c42\u7ea7 \u8bf4\u660e\u4e86\u5355\u8bcd\u4e4b\u95f4\u7684\u5173\u7cfb\u3002 \u4f34\u4fa3\u8fd9\u4e2a\u8bcd\u5bf9\u59bb\u5b50\uff0c\u7537\u53cb\uff0c\u914d\u5076\u548c\u5176\u4ed6\u8bcd\u6765\u8bf4\u662f\u4e0a\u4e00\u7ea7\u7684\uff08\u4e0a\u4f4d\u8bcd\uff09\u3002 \u5982\u524d\u6240\u8ff0\uff0c\u6211\u4eec\u7684\u67e5\u8be2\u901a\u5e38\u4e0e\u6240\u9700\u5185\u5bb9\u7684\u786e\u5207\u8bcd\u7ec4\u4e0d\u5339\u914d\u3002 \u77e5\u9053\u201c\u8d1f\u62c5\u5f97\u8d77\u201d\u662f\u4ecb\u4e8e\u4fbf\u5b9c\uff0c\u4e2d\u6863\u548c\u5408\u7406\u4ef7\u683c\u4e4b\u95f4\u7684\u4efb\u4f55\u4e8b\u7269\uff0c\u8fd9\u4e00\u70b9\u81f3\u5173\u91cd\u8981\u3002 \u5728\u6b64\u793a\u4f8b\u4e2d\uff0c \u5b9e\u4f53 \u662f\u7535\u5f71\u548c\u8fde\u7eed\u5267\u4e2d\u7684\u89d2\u8272\uff08\u6b27\u6bd4\u738b\uff09\uff0c\u5177\u6709\u7279\u5b9a\u5de5\u4f5c\u7684\u4eba\uff08\u6f14\u5458\uff09\u4ee5\u53ca\u4e0e\u4e4b\u76f8\u5173\u8054\u7684\u4eba\uff08\u4f34\u4fa3\uff09\u3002 \u901a\u5e38\uff0c\u5b9e\u4f53\u662f\u53ef\u4ee5\u660e\u786e\u8bc6\u522b\u7684\u5bf9\u8c61\u6216\u6982\u5ff5-\u901a\u5e38\u662f\u4eba\uff0c\u5730\u70b9\u548c\u4e8b\u7269\u3002 \u5982\u679c\u6240\u6709\u7684\u8fd9\u4e9b\u8bed\u8a00\u7684\u590d\u6742\u6027\u8fd8\u4e0d\u591f\u7684\u8bdd\uff0c\u6211\u4eec\u8fd8\u5fc5\u987b\u518d\u6df1\u5165\u4e00\u4e9b\u3002","title":"\u4e86\u89e3\u8bcd\u6c47\u5c42\u7ea7\u548c\u5b9e\u4f53\u5173\u7cfb\u7684\u9700\u8981"},{"location":"pages/affiliate/semantic-search/#\u53cd\u6620\u4e2a\u4eba\u5174\u8da3\u548c\u8d8b\u52bf\u7684\u9700\u8981","text":"\u8ba9\u6211\u4eec\u56de\u5230\u201cpython\u201d\u7684\u4f8b\u5b50\u3002\u5982\u679c\u6211\u641c\u7d22\u8fd9\u4e2a\u8bcd\uff0c\u786e\u5b9e\u4f1a\u5f97\u5230\u6240\u6709\u4e0e\u7f16\u7a0b\u8bed\u8a00\u76f8\u5173\u7684\u7ed3\u679c\u3002 \u65e0\u8bba\u6211\u4eec\u591a\u4e48\u4e0d\u559c\u6b22\u4efb\u4f55\u4f7f\u7528\u6211\u4eec\u4e2a\u4eba\u6570\u636e\u7684\u65b9\u5f0f\uff0c\u81f3\u5c11\u8fd9\u5bf9\u641c\u7d22\u5f15\u64ce\u6765\u8bf4\u662f\u6709\u7528\u7684\u3002 Google\u7ed3\u5408 \u4e86\u6709\u9650\u7684\u6570\u636e\u548c\u4f60\u7684\u641c\u7d22\u5386\u53f2\uff0c\u4ee5\u63d0\u4f9b\u66f4\u51c6\u786e\u548c\u4e2a\u6027\u5316\u7684\u641c\u7d22\u7ed3\u679c\u3002 \u6211\u4eec\u90fd\u77e5\u9053\u8fd9\u4e00\u70b9\u3002\u53ea\u8981\u5728\u641c\u7d22\u680f\u4e2d\u8f93\u5165\u4efb\u4f55\u7c7b\u578b\u7684\u670d\u52a1\uff0c\u4f60\u5c31\u4f1a\u5f97\u5230\u672c\u5730\u5316\u7684\u7ed3\u679c\u3002 \u4f46\u66f4\u5438\u5f15\u4eba\u7684\u662f\uff0c\u8c37\u6b4c\u80fd\u591f\u6839\u636e\u52a8\u6001\u53d8\u5316\u7684 \u641c\u7d22\u610f\u56fe \u4e34\u65f6\u8c03\u6574\u641c\u7d22\u7ed3\u679c\u3002 \u4f8b\u5982\uff0c\u51a0\u72b6\u75c5\u6bd2\u4e0d\u662f\u4e00\u4e2a\u65b0\u540d\u8bcd\u3002 \u5b83\u4e00\u76f4\u662f\u4e00\u7ec4\u75c5\u6bd2\u7684\u540d\u79f0\u3002 \u4f46\u4f17\u6240\u5468\u77e5\uff0c\u641c\u7d22\u610f\u56fe\u57282020\u5e74\u521d\u8fc5\u901f\u6539\u53d8\u3002\u4eba\u4eec\u5f00\u59cb\u5bfb\u627e\u6709\u5173\u7279\u5b9a\u51a0\u72b6\u75c5\u6bd2\uff08SARS-CoV\u20112\uff09\u7684\u4fe1\u606f\uff0c\u56e0\u6b64\u5fc5\u987b\u5bf9 SERP \u8fdb\u884c\u76f8\u5e94\u7684\u8c03\u6574\u3002 \u4ece\u4e0a\u9762 \u201c\u51a0\u72b6\u75c5\u6bd2 \u201c\u7684SERP\u5386\u53f2\u4f4d\u7f6e\u4e2d\u53ef\u4ee5\u770b\u5230\uff0c\u76ee\u524d\u6392\u540d\u524d\u4e94\u7684\u641c\u7d22\u7ed3\u679c\u4e2d\uff0c\u6ca1\u6709\u4e00\u4e2a\u662f\u57282020\u5e74\u4e4b\u524d\u3002 \u5728\u5723\u8bde\u8282\u6216\u9ed1\u8272\u661f\u671f\u4e94\u7b49\u5927\u578b\u9500\u552e\u6d3b\u52a8\u671f\u95f4\uff0c\u4f60\u4f1a\u5728\u7535\u5b50\u5546\u52a1\u884c\u4e1a\u770b\u5230\u540c\u6837\u7684\u60c5\u51b5\u3002\u90a3\u6bb5\u65f6\u95f4\u7684\u641c\u7d22\u610f\u56fe\u662f\u5177\u6709\u9ad8\u5ea6\u4ea4\u6613\u6027\u7684\uff0c\u800c\u4eba\u4eec\u901a\u5e38\u53ef\u80fd\u66f4\u613f\u610f\u770b\u5230\u76f8\u5173\u7684\u6bd4\u8f83\u6216\u8bc4\u8bba\u3002 Google\u4e0d\u65ad\u63a8\u51fa\u7b97\u6cd5\u66f4\u65b0\u548c\u65b0\u6280\u672f\uff0c\u4ee5\u8fdb\u4e00\u6b65\u63d0\u9ad8\u5176\u7406\u89e3\u81ea\u7136\u8bed\u8a00\u548c\u641c\u7d22\u610f\u56fe\u7684\u80fd\u529b\u3002 \u52302020\u5e74\uff0c\u8bed\u4e49\u641c\u7d22\u53d1\u5c55\u5230\u4eca\u5929\u7684\u6210\u679c\uff0c\u4e00\u5171\u7ecf\u5386\u4e86\u56db\u4e2a\u91cd\u8981\u7684\u91cc\u7a0b\u7891\u3002","title":"\u53cd\u6620\u4e2a\u4eba\u5174\u8da3\u548c\u8d8b\u52bf\u7684\u9700\u8981"},{"location":"pages/affiliate/semantic-search/#\u77e5\u8bc6\u56fe\u8c31","text":"Google\u7684\u77e5\u8bc6\u56fe\u8c31 \u4e8e2012\u5e74\u53d1\u5e03\uff0c\u662f\u5b9e\u4f53\u53ca\u5b9e\u4f53\u4e4b\u95f4\u5173\u7cfb\u7684\u77e5\u8bc6\u5e93\u3002 \u4f60\u53ef\u4ee5\u60f3\u8c61\u5b83\u7684\u6837\u5b50\u5927\u6982\u662f\u8fd9\u6837\u7684-\u2014\u2014\u4f46\u5b9e\u9645\u4e0a\u6709 50\u4ebf\u4e2a\u5b9e\u4f53 \uff1a \u7b80\u800c\u8a00\u4e4b\uff0c\u8fd9\u662f\u4e00\u9879\u542f\u52a8\u5e76\u5b9e\u73b0\u4e86\u4ece\u5173\u952e\u5b57\u5339\u914d\u5230\u8bed\u4e49\u5339\u914d\u8f6c\u53d8\u7684\u6280\u672f\u3002 \u5411\u77e5\u8bc6\u56fe\u8c31\u63d0\u4f9b\u4fe1\u606f\u7684\u65b9\u6cd5\u4e3b\u8981\u6709\u4e24\u79cd\uff1a \u7ed3\u6784\u5316\u6570\u636e\uff08\u7a0d\u540e\u8be6\u8ff0\uff09 \u4ece\u6587\u672c\u4e2d\u63d0\u53d6\u5b9e\u4f53 \u5bf9\u4e8e\u7b2c\u4e8c\u70b9\uff0c\u641c\u7d22\u5f15\u64ce\u9700\u8981\u7406\u89e3\u81ea\u7136\u8bed\u8a00\u3002\u8fd9\u65f6\u5019\uff0c\u4e0b\u9762\u4e09\u4e2a\u7b97\u6cd5\u7684\u66f4\u65b0\u5c31\u4f1a\u53d1\u6325\u4f5c\u7528\u3002","title":"\u77e5\u8bc6\u56fe\u8c31"},{"location":"pages/affiliate/semantic-search/#\u8702\u9e1f\u7b97\u6cd5","text":"\u65e9\u57282013\u5e74\uff0cGoogle\u63a8\u51fa\u4e86\u4e00\u4e2a\u540d\u4e3a Hummingbird\uff08\u8702\u9e1f\uff09 \u7684\u641c\u7d22\u7b97\u6cd5\uff0c\u4ee5\u8fd4\u56de\u66f4\u597d\u7684\u641c\u7d22\u7ed3\u679c\u3002 \u8fd9\u4e2a\u7b97\u6cd5\u5c24\u5176\u6709\u52a9\u4e8e\u5e94\u5bf9\u590d\u6742\u7684\u641c\u7d22\u67e5\u8be2\u3002 \u8702\u9e1f\u7b97\u6cd5\u662f\u7b2c\u4e00\u4e2a\u91cd\u5927\u66f4\u65b0\uff0c\u5b83\u66f4\u52a0\u5f3a\u8c03\u641c\u7d22\u8bf7\u6c42\u80cc\u540e\u7684\u610f\u56fe\uff0c\u800c\u975e\u5355\u4e2a\u5173\u952e\u8bcd\u3002 \u5b83\u6781\u901f\u50ac\u5316\u4e86\u201c\u4e3a\u8bdd\u9898\u800c\u521b\u4f5c\u5185\u5bb9\u201d\u7684\u70ed\u6f6e\uff0c\u800c\u4e0d\u662f\u201c\u4e3a\u5355\u4e2a\u5173\u952e\u8bcd\u800c\u5199\u4f5c\u201d\u3002","title":"\u8702\u9e1f\u7b97\u6cd5"},{"location":"pages/affiliate/semantic-search/#RankBrain\u7b97\u6cd5","text":"\u5982\u679c\u4f60\u66fe\u7ecf\u9047\u5230\u8fc7\u201c\u6f5c\u5728\u8bed\u4e49\u7d22\u5f15\u201d\u6216 LSI\u5173\u952e\u8bcd \u8fd9\u4e00\u77ed\u8bed\uff0c\u53ef\u4ee5\u5ffd\u7565\u8fd9\u4e2a\u4e86\u3002 Google\u7528RankBrain\u7b97\u6cd5\u89e3\u51b3\u4e86LSI\u4ea7\u751f\u7684\u95ee\u9898\u3002 \u800c\u6211\u4eec\u524d\u9762\u5df2\u7ecf\u8ba8\u8bba\u8fc7\u8fd9\u4e2a\u95ee\u9898\u3002\u662f\u5173\u4e8e\u641c\u7d22\u8bf7\u6c42\u4e2d\u6240\u4f7f\u7528\u7684\u8bed\u8a00\u548c\u6240\u9700\u5185\u5bb9\u4e4b\u95f4\u7684\u4e0d\u5339\u914d\u3002 Google\u7684RankBrain\u91c7\u7528\u4e86\u4f18\u4e8eLSI\u7684\u6280\u672f\u3002\u901a\u4fd7\u5730\u8bf4\uff0c\u901a\u8fc7\u4f7f\u7528\u590d\u6742\u7684\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\uff0cRankBrain\u751a\u81f3\u53ef\u4ee5\u7406\u89e3\u4e0d\u719f\u6089\u7684\u5355\u8bcd\u548c\u77ed\u8bed\u7684\u542b\u4e49\u3002 \u800c\u8003\u8651\u5230 15%\u7684\u641c\u7d22\u8bf7\u6c42\u90fd\u662f\u65b0\u7684 \uff0c\u8fd9\u53ef\u662f\u4e00\u9879\u5de8\u5927\u7684\u5de5\u7a0b\u3002 \u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3aRankBrain\u662f\u8702\u9e1f\u7b97\u6cd5\u7684\u5347\u7ea7\u7248\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u72ec\u7acb\u7684\u641c\u7d22\u7b97\u6cd5\u3002\u5b83\u662f \u6700\u5f3a\u7684\u6392\u540d\u4fe1\u53f7 \u4e4b\u4e00\uff0c\u4f46\u4f60\u80fd\u4e3b\u52a8\u4e3a\u5176\u505a\u51fa\u7684\u4f18\u5316\uff0c\u4e5f\u5c31\u53ea\u6709 \u6ee1\u8db3\u641c\u7d22\u610f\u56fe \u4e86\u3002","title":"RankBrain\u7b97\u6cd5"},{"location":"pages/affiliate/semantic-search/#BERT\u6a21\u578b","text":"\u57fa\u4e8eTransformer\u7684\u53cc\u5411\u7f16\u7801\u5668\u8868\u793a\uff08BERT\uff09\u8fd9\u4e00\u81ea\u7136\u8bed\u8a00\u8868\u793a\u6a21\u578b\uff0c\u662f\u5bf9\u8bed\u4e49\u641c\u7d22\u8fd0\u4f5c\u65b9\u5f0f\u7684\u6700\u65b0\u7684\u91cd\u5927\u5347\u7ea7\u3002\u81ea2019\u5e74\u5e95\u4ee5\u6765\uff0c\u5b83\u5f71\u54cd\u4e86\u5927\u7ea6 10%\u7684\u67e5\u8be2 \u3002 \u522b\u62c5\u5fc3\uff0c\u6211\u4e5f\u82b1\u4e86\u4e0d\u5c11\u65f6\u95f4\u624d\u4ec5\u4ec5\u8bb0\u5f97\u4f4fBERT\u4ee3\u8868\u4ec0\u4e48\u3002 \u4f60\u9700\u8981\u77e5\u9053\u7684\u662f\uff0cBERT\u53ef\u4ee5\u63d0\u9ad8\u5bf9\u957f\u800c\u590d\u6742\u7684\u53e5\u5b50\u4ee5\u53ca\u67e5\u8be2\u7684\u7406\u89e3\u3002\u5b83\u662f\u4e00\u79cd\u5904\u7406\u6b67\u4e49\u548c\u7ec6\u5fae\u5dee\u522b\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u56e0\u4e3a\u5b83\u529b\u56fe\u66f4\u597d\u5730\u7406\u89e3\u5355\u8bcd\u7684\u4e0a\u4e0b\u6587\u3002 \u867d\u7136\u4f60\u5e76\u4e0d\u80fd\u505a\u4ec0\u4e48\u4e8b\u60c5\u6765\u4f18\u5316BERT\u672c\u8eab\uff0c\u4f46\u7b80\u5355\u5730\u4e86\u89e3\u4e0b\u5b83\u7684\u542b\u4e49\u548c\u4f5c\u7528\u603b\u662f\u597d\u7684\u3002","title":"BERT\u6a21\u578b"},{"location":"pages/affiliate/semantic-search/#\u5982\u4f55\u8c03\u6574\u4f60\u7684SEO\u4ee5\u9002\u5e94\u8bed\u4e49\u641c\u7d22","text":"\u6211\u5df2\u7ecf\u5728\u6587\u7ae0\u4e2d\u629b\u51fa\u4e86\u4e0d\u5c11\u63d0\u793a\u548c\u6280\u5de7\u3002\u73b0\u5728\u6765\u70b9\u771f\u6b63\u6709\u5b9e\u64cd\u6027\u7684\u3002","title":"\u5982\u4f55\u8c03\u6574\u4f60\u7684SEO\u4ee5\u9002\u5e94\u8bed\u4e49\u641c\u7d22"},{"location":"pages/affiliate/semantic-search/#1-\u76ee\u6807\u4e3b\u9898\u800c\u975e\u5173\u952e\u8bcd","text":"\u5728\u8fc7\u53bb\u7684SEO\u65f6\u4ee3\uff0c\u4f60\u53ef\u4ee5\u7528\u5173\u4e8e\u540c\u4e00\u4e3b\u9898\u7684\u72ec\u7acb\u5185\u5bb9\u6765\u83b7\u5f97\u9ad8\u6392\u540d\uff0c\u4f46\u8fd9\u91cc\u9762\u5b9a\u4f4d\u7684\u5173\u952e\u8bcd\u4f1a\u7565\u6709\u4e0d\u540c\uff0c\u5982\u5173\u952e\u8bcd: open graph tags open graph meta tags og meta tags open graph tag what is open graph facebook open graph tags \u73b0\u5728\u7684\u60c5\u51b5\u5df2\u7ecf\u4e0d\u662f\u8fd9\u6837\u4e86\u3002Google\u73b0\u5728\u660e\u767d\uff0c\u6240\u6709\u8fd9\u4e9b\u5173\u952e\u8bcd\u641c\u7d22\u7684\u610f\u601d\u90fd\u5927\u540c\u5c0f\u5f02\uff0c\u5e76\u4e3a\u6240\u6709\u8fd9\u4e9b\u641c\u7d22\u53bb\u6392\u540d\u57fa\u672c\u76f8\u540c\u7684\u9875\u9762\u3002 \u5728\u521b\u5efa\u5185\u5bb9\u65f6\u8981\u7262\u8bb0\u8fd9\u4e00\u70b9\u3002\u6211\u4eec\u7684\u76ee\u7684\u4e0d\u518d\u662f\u53ea\u4e3a\u4e00\u4e2a\u5173\u952e\u8bcd\u6392\u540d\uff0c\u800c\u662f\u8981\u6df1\u5165\u5730\u63a2\u8ba8\u4e00\u4e2a\u4e3b\u9898\uff0c\u8fd9\u6837Google\u624d\u4f1a\u4e3a\u4f60\u7684\u9875\u9762\u6392\u540d\u5f88\u591a\u7c7b\u4f3c\u7684 \u957f\u5c3e\u5173\u952e\u8bcd \u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u5173\u4e8eOpen Graph\uff08\u5f00\u653e\u56fe\u8c31\uff09\u5143\u6807\u7b7e\u7684\u6587\u7ae0\u5728\u597d\u51e0\u767e\u4e2a\u5173\u952e\u8bcd\u4e2d\u6392\u540d\u5f88\u597d\u3002\u5176\u4e2d\u5f88\u591a\u662f\u641c\u7d22\u540c\u4e00\u4e8b\u7269\u7684\u4e0d\u540c\u65b9\u5f0f\uff0c\u4f46\u6709\u4e9b\u662f \u201cog:title\u201d\u3001\u201cog url \u201c\u548c \u201cog:image \u201c\u8fd9\u6837\u7684\u5b50\u8bdd\u9898\u3002 \u6211\u4eec\u4e4b\u6240\u4ee5\u80fd\u591f\u5728\u8fd9\u4e9b\u5173\u952e\u8bcd\u4e0b\u83b7\u5f97\u6392\u540d\uff0c\u662f\u56e0\u4e3a\u6211\u4eec\u5199\u4e86\u4e00\u7bc7\u5173\u4e8e\u8fd9\u4e2a\u4e3b\u9898\u7684\u6df1\u5ea6\u6587\u7ae0\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u5173\u4e8e\u4e00\u4e2a\u5173\u952e\u8bcd\u3002 \u60f3\u77e5\u9053\u53ef\u4ee5\u5199\u4e9b\u4ec0\u4e48\u5b50\u8bdd\u9898\u7684\u8bdd\uff0c\u8fd9\u91cc\u6709\u4e2a\u4e0d\u9519\u7684\u529e\u6cd5\uff1a\u5728\u8fd9\u4efd\u62a5\u544a\u91cc\u627e\u5230\u8fd9\u4e2a\u8bdd\u9898\u4e0b\u7684\u70ed\u95e8\u9875\u9762\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u60a8\u60f3\u5199\u4e00\u7bc7\u6709\u5173\u79cd\u690d\u82a6\u7b0b\u7684\u6587\u7ae0\u3002 \u5982\u679c\u5c06\u201c\u79cd\u690d\u82a6\u7b0b\u201d\u7684\u6392\u540d\u9760\u524d\u9875\u9762\u653e\u5230Ahrefs\u7684 \u7f51\u7ad9\u5206\u6790 \u5e76\u67e5\u770b\u5176 \u81ea\u7136\u641c\u7d22\u5173\u952e\u8bcd \u62a5\u544a\uff0c\u5c31\u4f1a\u770b\u5230\u8fd9\u4e2a\u9875\u9762\u5728\u8fd9\u4e9b\u5173\u952e\u8bcd\u4e0b\u90fd\u83b7\u5f97\u4e86\u6392\u540d\uff0c\u5176\u4e2d\u5305\u62ec\uff1a \u82a6\u7b0b\u9700\u8981\u79cd\u690d\u591a\u6df1 \u82a6\u7b0b\u79cd\u690d\u6761\u4ef6 \u4ec0\u4e48\u65f6\u5019\u79cd\u690d\u82a6\u7b0b \u82a6\u7b0b\u7684\u6700\u4f73\u79cd\u690d\u5730 \u5982\u4f55\u6536\u5272\u82a6\u7b0b \u5982\u4f55\u62a4\u7406\u82a6\u7b0b \u5982\u679c\u4f60\u60f3\u901a\u8fc7\u521b\u4f5c\u4e00\u7bc7\u6df1\u5ea6\u7684\u8d34\u6587\u6765\u83b7\u53d6\u5c3d\u53ef\u80fd\u591a\u7684\u81ea\u7136\u6d41\u91cf\uff0c\u90a3\u4e48\u6240\u6709\u8fd9\u4e9b\u5b50\u8bdd\u9898\u90fd\u4f1a\u662f\u4f60\u5e94\u8be5\u63d0\u53ca\u7684\u3002 \u4e0d\u8fc7\u8981\u5c0f\u5fc3\u3002 \u9488\u5bf9\u7279\u5b9a\u4e3b\u9898\u5e76\u4e0d\u610f\u5473\u7740\u4f60\u5e94\u8be5\u6db5\u76d6\u4e0e\u8be5\u4e3b\u9898\u76f8\u5173\u7684\u6240\u6709\u5185\u5bb9\uff0c\u4e5f\u4e0d\u5fc5\u592a\u6df1\u5165\u3002 \u4ee5\u672c\u6587\u4e3a\u4f8b\u3002 \u6211\u53ef\u4ee5\u82b1\u5341\u51e0\u4e2a\u5c0f\u65f6\u6765\u7814\u7a76\u81ea\u7136\u8bed\u8a00\u5904\u7406\u6a21\u5f0f\u5e76\u6df1\u5165\u7814\u7a76\u8bed\u4e49\u641c\u7d22\u7684\u6280\u672f\u3002 \u4f46\u6211\u6ca1\u6709\u8fd9\u4e48\u505a\uff0c\u56e0\u4e3a\u5176\u5b9e\u5927\u591a\u6570\u4eba\u90fd\u4e0d\u5173\u5fc3\u8fd9\u4e2a\u8bdd\u9898\u3002 \u8fd9\u5c31\u5f15\u51fa\u4e86\u4e0b\u4e00\u70b9\u3002","title":"1. \u76ee\u6807\u4e3b\u9898\uff0c\u800c\u975e\u5173\u952e\u8bcd"},{"location":"pages/affiliate/semantic-search/#2-\u8bc4\u4f30\u641c\u7d22\u610f\u56fe","text":"\u4f60\u8fd8\u662f\u53ef\u4ee5\u56f4\u7ed5\u67d0\u4e2a\u4e3b\u9898\u6765\u53d1\u5e03\u5185\u5bb9\uff0c\u5373\u4f7f\u8fd9\u4e2a\u4e3b\u9898\u662f\u4e0d\u7b26\u5408\u641c\u7d22\u610f\u56fe\u7684\u3002 \u5047\u8bbe\u4f60\u662f\u4e00\u540d\u8425\u9500\u6570\u636e\u6781\u5ba2\uff0c\u53d1\u73b0\u4e86\u201cSEO\u62a5\u544a\u201d\u8fd9\u4e2a\u4e0d\u9519\u7684\u8bdd\u9898\u3002 \u81ea\u7136\u5730\uff0c\u4f60\u4f1a\u5e0c\u671b\u5206\u4eab\u5236\u4f5c\u6700\u4f73SEO\u62a5\u544a\u6240\u9700\u8981\u7684\u4e1c\u897f\u3002 \u56e0\u6b64\uff0c\u4f60\u4f1a\u60f3\u5230\u201c\u5229\u7528\u641c\u7d22\u8bf7\u6c42\u6765\u521b\u5efa\u6700\u4f73SEO\u62a5\u544a\u201d\u4e4b\u7c7b\u7684\u5185\u5bb9\u3002 \u786e\u5b9e\uff0c\u8fd9\u53ef\u80fd\u662f\u6700\u7ec8\u80fd\u9020\u5c31\u6700\u4f73SEO\u62a5\u544a\u7684\u5185\u5bb9\u3002 \u4f46\u662f\uff0c\u5927\u591a\u6570\u641c\u7d22\u6b64\u4e3b\u9898\u7684\u4eba\u4e0d\u719f\u6089\u8bb8\u591a Google\u8868\u683c\u529f\u80fd \u3002 \u4ed6\u4eec\u53ea\u662f\u60f3\u627e\u5230\u4e00\u4e9b\u53ef\u4ee5\u5e2e\u52a9\u4ed6\u4eec\u5b8c\u6210\u5de5\u4f5c\u7684\u5de5\u5177\uff1a \u6240\u4ee5\uff0c\u5728\u4f60\u5f00\u59cb\u52fe\u52d2\u65b0\u5185\u5bb9\u4e4b\u524d\uff0c\u5148\u770b\u770b\u6392\u540d\u9760\u524d\u7684\u9875\u9762\uff0c\u63a8\u65ad\u4e3b\u9898\u7684\u641c\u7d22\u610f\u56fe\u3002 \u63a8\u8350\u9605\u8bfb\uff1a \u641c\u7d22\u610f\u56fe\uff1a \u4e00\u4e2a\u5341\u5206\u91cd\u8981\u53c8\u7ecf\u5e38\u88ab\u5ffd\u7565\u7684\u201c\u6392\u540d\u8981\u7d20\u201d","title":"2. \u8bc4\u4f30\u641c\u7d22\u610f\u56fe"},{"location":"pages/affiliate/semantic-search/#3-\u4f7f\u7528\u8bed\u4e49HTML","text":"\u5728\u6211\u4eec\u8fd8\u6ca1\u6cd5\u7528\u4e0a\u8bed\u4e49\u641c\u7d22\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4e0d\u5f97\u5df2\u8981\u8f6c\u5411\u8bed\u4e49\u7f51(Sematic Web)\u3002 \u4e07\u7ef4\u7f51\uff08www\uff09\u7684\u539f\u59cb\u6982\u5ff5\u53ef\u4ee5\u89e3\u91ca\u4e3a\u6ca1\u6709\u660e\u786e\u542b\u4e49\u7684\u3001\u6807\u51c6\u5316\u7684\u3001\u4e92\u76f8\u94fe\u63a5\u7684\u6587\u6863\u3002 \u7136\u800c\u73b0\u5728\uff0c\u663e\u7136\u6211\u4eec\u9700\u8981\u201c\u542b\u4e49\u201d\u3002 \u8fd9\u5f97\u4ece\u4f60\u7684\u57fa\u672cHTML\u5f00\u59cb\u8bf4\u8d77\u3002 \u6211\u4eec\u5148\u6765\u6bd4\u8f83\u4ee5\u4e0b\u7684HTML\u5143\u7d20\uff1a \u8bed\u4e49HTML\u4e3a\u4ee3\u7801\u589e\u52a0\u4e86\u542b\u4e49\uff0c\u56e0\u6b64\u673a\u5668\u53ef\u4ee5\u8bc6\u522b\u5bfc\u822a\u6a21\u5757\uff0c\u9875\u7709\uff0c\u9875\u811a\uff0c\u8868\u683c\u6216\u89c6\u9891\u3002 HTML5\u5219\u63d0\u4f9b\u4e86\u6700\u591a\u7684\u8bed\u4e49\u5143\u7d20\uff0c\u5927\u591a\u6570\u73b0\u4ee3CMS\u4e3b\u9898\u90fd\u4f1a\u4f7f\u7528\u8fd9\u4e9b\u5143\u7d20\u3002\u5982\u679c\u4f60\u8fd8\u6ca1\u6709\u7684\u8bdd\uff0c\u901a\u5e38\u4e00\u4e2a\u63d2\u4ef6\u5c31\u53ef\u4ee5\u6dfb\u52a0\u597d\u3002 \u4f46\u662f\u8bed\u4e49HTML\u4ecd\u7136\u975e\u5e38\u6709\u9650\u3002 \u867d\u7136\u5b83\u6709\u6307\u793a\u51fa\u6765\uff1a\u201c\u8fd9\u662f\u4e00\u4e2a\u8868\u683c\uff0c\u8fd9\u662f\u4e00\u4e2a\u9875\u811a\u201d\uff0c\u4f46\u5b83\u6ca1\u529e\u6cd5\u5b9e\u9645\u5185\u5bb9\u7684\u542b\u4e49\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u9700\u8981\u628a\u8fd9\u4e9b\u6807\u8bb0\u7ed3\u6784\u5316\uff08schema\uff09\u3002","title":"3. \u4f7f\u7528\u8bed\u4e49HTML"},{"location":"pages/affiliate/semantic-search/#4-\u4f7f\u7528Scheme\u6807\u8bb0","text":"Schema\u6807\u8bb0\u662f\u6807\u8bb0\u4f60\u7684\u7f51\u9875\u7684\u53e6\u4e00\u79cd\u65b9\u5f0f\u3002\u5b83\u4e5f\u88ab\u79f0\u4e3a \u7ed3\u6784\u5316\u6570\u636e \uff0c\u53ef\u4ee5\u8bf4\u662f\u7f51\u7edc\u7684\u4e00\u4e2a\u901a\u7528\u8bed\u4e49\u6846\u67b6\u3002 Schema.org.cn\u8bcd\u6c47\u8868 \u5305\u542b\u4e0e\u5c5e\u6027\u76f8\u5173\u8054\u7684\u6570\u767e\u79cdschema\u6807\u8bb0\u7c7b\u578b\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u6765\u6807\u8bb0\u4f60\u7684\u5185\u5bb9\uff0c\u8ba9Google\u65e0\u9700\u590d\u6742\u7684\u7b97\u6cd5\u5373\u53ef\u8f7b\u677e\u7406\u89e3\u3002 \u4f8b\u5982\uff0cGoogle\u4f1a\u66f4\u5bb9\u6613\u4ece\u8fd9\u6837\u7684\u7ed3\u6784\u5316\u5185\u5bb9\u4e2d\u63d0\u53d6\u542b\u4e49: 1 2 \u70f9\u996a\u65f6\u95f4\uff1a20\u5206\u949f \u5361\u8def\u91cc\uff1a80 \u8fd9\u6bd4\u76f4\u63a5\u4ece\u539f\u6587\u4e2d\u63d0\u53d6\u542b\u4e49\u5bb9\u6613\u591a\u4e86\uff1a 1 \u5236\u4f5c\u714e\u997c\u9700\u898120\u5206\u949f\u3002 \u66f4\u7406\u60f3\u7684\u662f\uff0c\u8fd9\u4e9b\u662f\u4f4e\u70ed\u91cf\u7684\u714e\u997c\u2014\u2014\u6bcf\u4efd\u7ea680\u5361\u8def\u91cc\u3002 \u8fd9\u6837\u4e00\u6765\uff0c\u5f53\u7528\u6237\u60f3\u77e5\u9053\u505a\u4e00\u5757\u714e\u997c\u9700\u8981\u591a\u957f\u65f6\u95f4\uff0c\u6216\u8005\u5b83\u6709\u591a\u5c11\u5361\u8def\u91cc\u65f6\uff0cGoogle\u53ef\u4ee5\u4ee5\u6700\u4f73\u7684\u65b9\u5f0f\u63d0\u4f9b\u4fe1\u606f\u3002","title":"4. \u4f7f\u7528Scheme\u6807\u8bb0"},{"location":"pages/affiliate/semantic-search/#\u5ef6\u4f38\u9605\u8bfb","text":"\u7ed3\u6784\u5316\u6570\u636e\u662f\u4ec0\u4e48\uff1f\u4ee5\u53ca\u4e3a\u4ec0\u4e48\u8981\u8df5\u884c\u5b83\uff1f \u4e30\u5bcc\u7f51\u9875\u6458\u8981\u662f\u4ec0\u4e48\u4ee5\u53ca\u5982\u4f55\u5728\u641c\u7d22\u7ed3\u679c\u4e2d\u83b7\u5f97?","title":"\u5ef6\u4f38\u9605\u8bfb"},{"location":"pages/affiliate/semantic-search/#5-\u6253\u9020\u81ea\u5df1\u7684\u54c1\u724c\u6210\u4e3a\u77e5\u8bc6\u56fe\u8c31\u5b9e\u4f53","text":"\u8fd9\u4e2a\u6807\u9898\u4e0d\u9700\u8981\u8fc7\u591a\u89e3\u91ca\u4e86\uff0c\u521a\u624d\u6211\u4eec\u5df2\u7ecf\u8ba8\u8bba\u8fc7\u5b9e\u4f53\uff0c\u6240\u4ee5\u6211\u5efa\u8bae\u4f60\u53ef\u4ee5\u770b\u4e00\u4e0b\u8fd9\u7bc7 \u6df1\u5165\u4e86\u89e3\u77e5\u8bc6\u56fe\u8c31\u7684\u6587\u7ae0 \u3002 \u5728\u6240\u6709\u5173\u4e8e\u8c03\u6574\u4f60\u7684SEO\u4ee5\u9002\u5e94\u8bed\u4e49\u641c\u7d22\u7684\u6280\u5de7\u4e2d\uff0c\u8fd9\u4e2a\u662f\u6700\u96be\u5b9e\u73b0\u7684\u3002\u56e0\u4e3a\u8fd9\u9700\u8981\u957f\u671f\u575a\u6301\u54c1\u724c\u5efa\u8bbe\uff0c\u5e76\u4e14\u540c\u65f6\u8fd0\u7528\u5176\u4ed6\u6240\u6709\u6280\u5de7\u624d\u80fd\u591f\u505a\u5230\u3002","title":"5. \u6253\u9020\u81ea\u5df1\u7684\u54c1\u724c\uff0c\u6210\u4e3a\u77e5\u8bc6\u56fe\u8c31\u5b9e\u4f53"},{"location":"pages/affiliate/semantic-search/#6-\u901a\u8fc7\u94fe\u63a5\u5efa\u7acb\u76f8\u5173\u6027","text":"\u94fe\u63a5\u662f\u5386\u53f2\u4e0a\u6700\u65e9\u7684\u76f8\u5173\u6027\u6307\u6807\u4e4b\u4e00\u3002 \u5982\u679c\u6587\u6863A\u94fe\u63a5\u5230\u6587\u6863B\uff0c\u5219\u5b83\u4eec\u5c31\u53ef\u80fd\u88ab\u89c6\u4e3a\u76f8\u5173\u3002 \u5728\u76f8\u5173\u9875\u9762\u6709\u4f7f\u7528\u81ea\u7136 \u951a\u6587\u672c \u7684 \u7ad9\u5185\u94fe\u63a5 \u548c \u7ad9\u5916\u94fe\u63a5 \u90fd\u53ef\u4ee5\u5e2e\u52a9Google\u5f04\u6e05\u4f60\u7684\u5185\u5bb9\u2014\u2014\u751a\u81f3\u5728\u5904\u7406\u5185\u5bb9\u4e4b\u524d\u3002","title":"6. \u901a\u8fc7\u94fe\u63a5\u5efa\u7acb\u76f8\u5173\u6027"},{"location":"pages/affiliate/semantic-search/#\u5ef6\u4f38\u9605\u8bfb_1","text":"\u65b0\u624b\u53cb\u597d\u7684\u94fe\u63a5\u5efa\u8bbe\u6307\u5357 \u5982\u4f55\u83b7\u53d6\u5916\u94fe\uff1a7\u79cd\u4e0d\u9700\u8981\u65b0\u5185\u5bb9\u7684\u7b56\u7565 \u8d44\u6e90\u9875\u9762\u94fe\u63a5\u6784\u5efa\uff1a\u4f60\u552f\u4e00\u9700\u8981\u7684\u6307\u5357 9\u4e2a\u7b80\u5355\u7684\u94fe\u63a5\u5efa\u8bbe\u7b56\u7565","title":"\u5ef6\u4f38\u9605\u8bfb"},{"location":"pages/affiliate/semantic-search/#\u6700\u540e\u7684\u601d\u8003","text":"\u8bed\u4e49\u641c\u7d22\u5df2\u7136\u6539\u53d8\u4e86\u6574\u4e2a\u5185\u5bb9\u751f\u6001\u7cfb\u7edf\u3002\u7528\u6237\u53ef\u4ee5\u83b7\u5f97\u66f4\u591a\u76f8\u5173\u7684\u3001\u6709\u4ef7\u503c\u7684\u5185\u5bb9\uff0c\u800c\u8fd9\u4e5f\u4fc3\u4f7f\u4e86\u53d1\u5e03\u8005\u64b0\u5199\u8fd9\u6837\u7684\u5185\u5bb9\u3002 \u867d\u7136\u6d89\u53ca\u5230\u590d\u6742\u7684\u6280\u672f\u548c\u7b97\u6cd5\uff0c\u4f46\u8bed\u4e49\u641c\u7d22\u7684\u539f\u7406\u5f88\u5bb9\u6613\u7406\u89e3\u3002\u73b0\u5728\uff0c\u4f60\u5e94\u8be5\u51c6\u5907\u597d\u505a\u51fa\u4efb\u4f55\u5fc5\u8981\u7684\u6539\u53d8\uff0c\u8ba9\u4f60\u7684SEO\u7b56\u7565\u4fdd\u6301\u5728\u524d\u6cbf\u6c34\u5e73\u3002 \u5173\u4e8e\u8bed\u4e49\u641c\u7d22\uff0c\u4f60\u8fd8\u6709\u4ec0\u4e48\u95ee\u9898\u6216\u610f\u89c1\u5417\uff1f\u8bf7\u5728 Twitter \u4e0a\u4e0e\u6211\u4ea4\u6d41\u3002 \u5982\u679c\u4f60\u60f3\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u8bed\u4e49\u641c\u7d22\u7684\u6280\u672f\u95ee\u9898\uff0c\u8bf7\u5173\u6ce8 Dawn Anderson \u5e76\u67e5\u770b\u5979\u7684 \u6f14\u8bb2 \u3002 \u51e1\u672c\u7f51\u6ce8\u660e\"\u6765\u6e90\uff1aXXX \"\u7684\u6587/\u56fe/\u89c6\u9891\u7b49\u7a3f\u4ef6\uff0c\u672c\u7f51\u8f6c\u8f7d\u51fa\u4e8e\u4f20\u9012\u66f4\u591a\u4fe1\u606f\u4e4b\u76ee\u7684\uff0c\u5e76\u4e0d\u610f\u5473\u7740\u8d5e\u540c\u5176\u89c2\u70b9\u6216\u8bc1\u5b9e\u5176\u5185\u5bb9\u7684\u771f\u5b9e\u6027\u3002\u5982\u6d89\u53ca\u4f5c\u54c1\u5185\u5bb9\u3001\u7248\u6743\u548c\u5176\u5b83\u95ee\u9898\uff0c\u8bf7\u4e0e\u672c\u7f51\u8054\u7cfb\uff0c\u6211\u4eec\u5c06\u5728\u7b2c\u4e00\u65f6\u95f4\u5220\u9664\u5185\u5bb9\uff01 \u4f5c\u8005: Michal Pec\u00e1nek, Ahrefs\u7684\u8425\u9500\u4e13\u5bb6\u548c\u5185\u5bb9\u521b\u4f5c\u8005 \u6765\u6e90\uff1a https://ahrefs.com/blog/zh/semantic-search/","title":"\u6700\u540e\u7684\u601d\u8003"},{"location":"pages/affiliate/seo-backlink-website-directories/","text":"\u7f51\u7ad9\u5206\u7c7b\u76ee\u5f55\u5916\u94fe\u63a8\u5e7f\u5de5\u5177, \u9ad8\u8d28\u91cf\u5916\u94fe\u6765\u6e90\u548c\u6280\u5de7 \u00b6 \u7f51\u7ad9\u5206\u7c7b\u76ee\u5f55\uff0c\u53c8\u79f0\u805a\u5408\u76ee\u5f55\uff0c\u662f\u5c06\u5404\u884c\u5404\u4e1a\u7f51\u7ad9\u6309\u7167\u4e0d\u540c\u7684\u5206\u7c7b\u7531\u4eba\u5de5\u8fdb\u884c\u5f52\u7c7b\u7684\u7f51\u7ad9\u5217\u8868\u7684\u7ec4\u5408\u3002\u6240\u4ee5\u805a\u5408\u76ee\u5f55\u4e5f\u53ef\u8bf4\u662f\u7f51\u5740\u5bfc\u822a\u7f51\u7ad9\u7684\u4e00\u79cd\uff0c\u53ea\u662f\u66f4\u52a0\u7ec6\u5316\u548c\u8be6\u7ec6\u4e86\uff0c\u5bf9\u6bcf\u4e2a\u7f51\u7ad9\u90fd\u9644\u6709\u7f51\u7ad9\u7684\u5185\u5bb9\u8bf4\u660e\u6216\u4e3b\u9898\u4ecb\u7ecd\u3002\u7531\u4e8e\u5168\u662f\u4eba\u5de5\u7f16\u8f91\u5e76\u5ba1\u6838\u7684\uff0c\u76f8\u5bf9\u4e8e\u641c\u7d22\u5f15\u64ce\u6765\u8bf4\u5177\u6709\u66f4\u9ad8\u7684\u53ef\u4fe1\u5ea6\u3002\u5927\u591a\u6570\u505a\u7f51\u7ad9\u63a8\u5e7f\u7684\u7ad9\u957f\u670b\u53cb\u57fa\u672c\u90fd\u4f1a\u5230\u4e00\u4e9b\u77e5\u540d\u7684\u805a\u5408\u76ee\u5f55\u63d0\u4ea4\u81ea\u5df1\u7684\u7f51\u7ad9\u3002 \u53bb\u54ea\u91cc\u627e\u7f51\u7ad9\u5206\u7c7b\u76ee\u5f55\u7f51\u7ad9\u8d44\u6e90\u5462\uff1f\u6700\u7b80\u5355\u7684\u529e\u6cd5\u5c31\u662f\u76f4\u63a5\u5728\u4e00\u4e9b\u641c\u7d22\u5f15\u64ce\u4e0a\u76f4\u63a5\u641c\u7d22\u4e0e\u7f51\u7ad9\u76ee\u5f55\u3001\u805a\u5408\u76ee\u5f55\u548c\u5206\u7c7b\u76ee\u5f55\u76f8\u5173\u7684\u5173\u952e\u8bcd\u3002\u5f53\u7136\uff0c\u8fd9\u6837\u641c\u7d22\u8fd4\u56de\u7684\u7f51\u7ad9\u6570\u80af\u5b9a\u5f88\u591a\uff0c\u8981\u4ece\u4e2d\u7f29\u5c0f\u76ee\u6807\u6311\u9009\u51fa\u4e00\u5c0f\u90e8\u5206\u8fdb\u884c\u63d0\u4ea4\u3002\u8fd8\u6709\u53e6\u4e00\u79cd\u65b9\u6cd5\u5c31\u662f\u67e5\u770b\u7ade\u4e89\u5bf9\u624b\u4e00\u822c\u5728\u90a3\u4e9b\u76ee\u5f55\u88ab\u6536\u5f55\uff0c\u901a\u8fc7\u67e5\u8be2\u53ef\u4ee5\u76f4\u63a5\u4ece\u5916\u90e8\u94fe\u63a5\u627e\u5230\u3002\u76ee\u524d\u6bd4\u8f83\u77e5\u540d\u7684\u805a\u5408\u76ee\u5f55\u7f51\u7ad9\u6709\uff1a\u4e9a\u9a6c\u900a\u5206\u7c7b\u76ee\u5f55\u3001\u4f18\u9009\u7f51\u7ad9\u76ee\u5f55\u3001\u6dd8\u7ad9\u5206\u7c7b\u76ee\u5f55\u3001\u63a8\u4f18\u7f51\u7ad9\u76ee\u5f55\u3001\u7ad9\u957f\u76ee\u5f55\u3001\u5fae\u9875\u7f51\u7ad9\u76ee\u5f55\u548c\u58f9\u7f51\u5206\u7c7b\u76ee\u5f55\u7b49\u7b49\u3002 \u786e\u5b9a\u4e86\u8981\u63d0\u4ea4\u7684\u805a\u5408\u76ee\u5f55\u540e\uff0c\u8fd8\u8981\u6b63\u786e\u9009\u62e9\u5411\u54ea\u4e00\u4e2a\u5206\u7c7b\u63d0\u4ea4\u7f51\u7ad9\u3002\u63d0\u4ea4\u7f51\u7ad9\u76ee\u5f55\u4e00\u5b9a\u8981\u6309\u7167\u4e00\u5b9a\u7684\u5206\u7c7b\u529e\u6cd5\u628a\u6536\u5f55\u7684\u7f51\u7ad9\u653e\u5728\u9002\u5f53\u7684\u76ee\u5f55\u5206\u7c7b\u4e0b\u9762\uff0c\u800c\u8fd9\u91cc\u7684\u76ee\u5f55\u662f\u6307\u7f51\u7ad9\u7684\u7f51\u5740\u3001\u6807\u9898\u7b49\u7b49\u7684\u4e00\u4e9b\u8d44\u6599\u3002\u4e00\u822c\u6bcf\u4e2a\u805a\u5408\u76ee\u5f55\u7f51\u7ad9\u5728\u9875\u9762\u7684\u5e95\u90e8\u90fd\u8bbe\u6709\u201c\u63d0\u4ea4\u7f51\u5740\u201d\uff0c\u201c\u65b0\u7ad9\u767b\u9646\u201d\u6216\u201c\u7533\u8bf7\u6536\u5f55\u201d\u7b49\u7c7b\u4f3c\u540d\u79f0\u7684\u94fe\u63a5\uff0c\u5404\u4e2a\u76ee\u5f55\u4f1a\u6709\u6240\u4e0d\u540c\u3002\u4f46\u662f\u529f\u80fd\u90fd\u662f\u4e00\u6837\u7684\uff0c\u90fd\u662f\u4e13\u95e8\u7528\u6765\u63a5\u53d7\u65b0\u7ad9\u7684\u63d0\u4ea4\u548c\u7533\u8bf7\u3002\u4f60\u53ef\u4ee5\u76f4\u63a5\u5f88\u65b9\u4fbf\u7684\u901a\u8fc7\u8be5\u9875\u9762\u6765\u63d0\u4ea4\u7533\u8bf7\uff0c\u5982\u679c\u9700\u8981\u6ce8\u518c\u7528\u6237\u540d\u4ec0\u4e48\u7684\u4e5f\u6309\u7167\u8981\u6c42\u6ce8\u518c\u5c31\u597d\u4e86\uff0c\u4f46\u5fc5\u987b\u6ce8\u610f\u4ed4\u7ec6\u586b\u5199\u6bcf\u4e00\u9879\u8d44\u6599\u3002\u6bd4\u5982\u201c\u7533\u8bf7\u7f51\u7ad9\u7684\u540d\u79f0\u4e0d\u8981\u8d85\u8fc710\u4e2a\u4e2d\u6587\u5b57\u201d\uff0c\u5927\u5bb6\u5c31\u5c3d\u91cf\u4e0d\u8981\u53bb\u8d85\u8d8a\u8fd9\u4e2a\u6781\u9650\u3002\u5982\u679c\u4e00\u4e9b\u7f51\u7ad9\u9700\u8981\u5728\u63d0\u4ea4\u7f51\u5740\u524d\u52a0\u9996\u9875\u94fe\u63a5\u7684\u8bdd\u5c31\u5148\u52a0\u4e0a\uff0c\u4ee5\u4fdd\u8bc1\u7f51\u5740\u7684\u987a\u5229\u63d0\u4ea4\u3002 \u6210\u529f\u63d0\u4ea4\u5230\u805a\u5408\u76ee\u5f55\u540e\uff0c\u5c31\u9700\u8981\u5927\u5bb6\u8010\u5fc3\u7684\u53bb\u7b49\u5f85\u4e86\u3002\u8fd9\u4e2a\u65f6\u95f4\u6bb5\u4e00\u822c\u4f1a\u63a7\u5236\u57281\u4e2a\u6708\u5185\uff0c\u5982\u679c\u6ca1\u80fd\u6536\u5f55\u5efa\u8bae\u57283\u4e2a\u6708\u540e\u518d\u53bb\u63d0\u4ea4\u3002\u5927\u5bb6\u4e5f\u53ef\u4ee5\u5c1d\u8bd5\u901a\u8fc7\u7f51\u7ad9\u4e0a\u7684\u8054\u7cfb\u65b9\u5f0f\u4e0e\u7f16\u8f91\u6c9f\u901a\uff0c\u8ba4\u771f\u503e\u542c\u522b\u4eba\u7684\u5efa\u8bae\uff0c\u4e5f\u53ef\u77e5\u9053\u522b\u4eba\u662f\u5982\u4f55\u8bc4\u4ef7\u81ea\u5df1\u7f51\u7ad9\u7684\u3002\u73b0\u5728\u5f88\u591a\u4e2d\u6587\u7684\u7f51\u7ad9\u76ee\u5f55\u90fd\u4f1a\u8981\u6c42\u5148\u7ed9\u5bf9\u65b9\u7f51\u7ad9\u505a\u4e00\u4e2a\u53cb\u60c5\u94fe\u63a5\uff0c\u624d\u4f1a\u6279\u51c6\u6536\u5f55\u8fd9\u4e2a\u7f51\u7ad9\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\u6211\u4eec\u5e94\u8be5\u81ea\u5df1\u505a\u4e00\u4e2a\u51b3\u5b9a\u662f\u5426\u9700\u8981\u4e3a\u5bf9\u65b9\u505a\u4e00\u4e2a\u53cb\u94fe\uff0c\u56e0\u4e3a\u8fd9\u79cd\u60c5\u51b5\u5b9e\u9645\u4e0a\u5c31\u548c\u53e6\u5916\u4e00\u4e2a\u7f51\u7ad9\u4ea4\u6362\u4e00\u53cb\u94fe\u6ca1\u6709\u4ec0\u4e48\u533a\u522b\uff0c\u867d\u7136\u5bf9\u65b9\u7684\u6743\u91cd\u6bd4\u8f83\u9ad8\u3002\u4f46\u7ed9\u4f60\u7684\u4e5f\u53ea\u662f\u4e00\u4e2a\u5185\u9875\uff0c\u5f53\u7136\u4ece\u6d41\u91cf\u4e0a\u6765\u8bb2\uff0c\u8fd8\u662f\u6709\u4e00\u4e9b\u6548\u679c\u7684\u3002 \u5728\u7f51\u7edc\u7ade\u4e89\u65e5\u76ca\u52a0\u5267\u7684\u4eca\u5929\uff0c\u5229\u7528\u597d\u4e86\u5206\u7c7b\u76ee\u5f55\u8fd9\u79cd\u5de5\u5177\uff0c\u7f51\u7ad9\u63a8\u5e7f\u7684\u5de5\u4f5c\u76f8\u4fe1\u4f1a\u66f4\u52a0\u7684\u6e38\u5203\u6709\u4f59\uff0c\u6700\u5c11\u7b97\u662f\u591a\u4e86\u4e00\u4e2a\u63a8\u5e7f\u7f51\u7ad9\u7684\u9014\u5f84\u548c\u65b9\u6cd5\u5427\u3002\u5404\u4f4d\u7ad9\u957f\u6709\u673a\u4f1a\u4e0d\u59a8\u4e5f\u53bb\u5c1d\u8bd5\u4e00\u4e0b\u63d0\u4ea4\u7f51\u7ad9\u5230\u805a\u5408\u76ee\u5f55\u8fd9\u79cd\u65b9\u6cd5\uff0c\u5b9e\u8df5\u624d\u662f\u68c0\u9a8c\u771f\u7406\u7684\u552f\u4e00\u6807\u51c6\uff01 \u4e09\u79cd\u9ad8\u8d28\u91cf\u5916\u94fe\u6765\u6e90\u548c\u6280\u5de7 \u00b6 \u7b2c\u4e00\uff1a\u5206\u4eab\u5185\u5bb9\u662f\u9ad8\u8d28\u91cf\u6765\u6e90 \u5185\u5bb9\u5c31\u662f\u5916\u94fe\u7684\u6838\u5fc3\u90e8\u5206\uff0c\u5185\u5bb9\u7684\u597d\u574f\u662f\u76f4\u63a5\u8861\u91cf\u5916\u94fe\u7684\u6807\u51c6\u4e4b\u4e00\uff0c\u5185\u5bb9\u80fd\u591f\u548c\u7528\u6237\u8fdb\u884c\u4ea4\u6d41\uff0c\u4fe1\u606f\u4ef7\u503c\u8d8a\u9ad8\u7684\u624d\u80fd\u52fe\u8d77\u7528\u6237\u7ee7\u7eed\u9605\u8bfb\u7684\u6b32\u671b\uff0c\u53ea\u6709\u9ad8\u8d28\u91cf\u5185\u5bb9\u5206\u4eab\u51fa\u53bb\u5728\u5f97\u5230\u8ba4\u53ef\u7684\u540c\u65f6\u522b\u4eba\u624d\u4f1a\u5e2e\u4f60\u5206\u4eab\u548c\u4f20\u64ad\uff0c\u8fd9\u6837\u5c31\u662f\u81ea\u7136\u7684\u589e\u52a0\u6d41\u91cf\u548c\u5916\u94fe\u3002 \u7b2c\u4e8c\uff1a\u5de5\u5177\u4f7f\u7528\u548c\u5206\u4eab\u662f\u9ad8\u8d28\u91cf\u5916\u94fe\u6765\u6e90 \u5de5\u5177\u5206\u4eab\u5bf9\u4e8e\u5916\u94fe\u6765\u8bf4\u662f\u975e\u5e38\u660e\u663e\u7684\uff0c\u5982\u679c\u5de5\u5177\u662f\u514d\u8d39\u7684\u76f8\u4fe1\u4e00\u5b9a\u4f1a\u6709\u5f88\u591a\u4eba\u4e3a\u4f60\u4f20\u64ad\uff0c\u8fd9\u6837\u7684\u8bdd\u5c31\u5f97\u5230\u5916\u94fe\u4e86\u3002\u4f8b\u5982\u767e\u5ea6\u7ad9\u957f\u5de5\u5177\u5c31\u662f\u5f15\u5bfc\u522b\u4eba\u53bb\u4f7f\u7528\uff0c\u540c\u65f6\u5728\u4f7f\u7528\u7684\u8fc7\u7a0b\u4e2d\u5c31\u88ab\u4f20\u64ad\u4e86\uff0c\u8fd9\u6837\u5c31\u4f1a\u6709\u8d8a\u6765\u8d8a\u591a\u7684\u4eba\u77e5\u9053\u7ad9\u957f\u94fe\u8fd9\u4e2a\u5de5\u5177\uff0c\u767e\u5ea6\u4e5f\u5bf9\u8fd9\u4e9b\u5de5\u5177\u8fdb\u884c\u4e0d\u65ad\u7684\u6539\u8fdb\uff0c\u8ba9\u5de5\u5177\u66f4\u52a0\u5b8c\u5584\u7528\u6237\u4f53\u9a8c\uff0c\u5176\u5b9e\u8fd9\u4e5f\u662f\u5728\u5206\u4eab\u81ea\u5df1\u7684\u5de5\u5177\uff0c\u6211\u4eec\u5728\u4f7f\u7528\u7684\u8fc7\u7a0b\u4e2d\u4e5f\u5c31\u4e0d\u77e5\u4e0d\u89c9\u7684\u5728\u4f20\u64ad\u4e86\uff0c\u5916\u94fe\u4e5f\u5c31\u8ddf\u7740\u591a\u4e86\u8d77\u6765\u3002 \u7b2c\u4e09\uff1a\u521b\u610f\u5206\u4eab\u9ad8\u8d28\u91cf\u5916\u94fe\u6765\u6e90 \u521b\u610f\u5bf9\u4e8e\u6bcf\u4e2a\u4eba\u6765\u8bf4\u90fd\u662f\u975e\u5e38\u5b9d\u8d35\u7684\u8d22\u5bcc\uff0c\u56e0\u6b64\u4e5f\u6709\u5f88\u591a\u4eba\u4e0d\u613f\u8f7b\u6613\u5206\u4eab\u51fa\u6765\uff0c\u56e0\u4e3a\u5c71\u5be8\u6284\u88ad\u592a\u5389\u5bb3\u4e86\uff0c\u53ef\u80fd\u4f60\u4eca\u5929\u5206\u4eab\u51fa\u6765\u7684\u4e1c\u897f\u660e\u5929\u4f1a\u6709\u65e0\u6570\u4e2a\u76d7\u7248\u7684\u51fa\u73b0\uff0c\u7136\u800c\u4f60\u7684\u521b\u610f\u4e5f\u4f1a\u8ddf\u7740\u70df\u6d88\u4e91\u6563\u4e86\u3002\u5176\u5b9e\u6211\u4eec\u4e0d\u5fc5\u62c5\u5fc3\u8fd9\u4e2a\uff0c\u56e0\u4e3a\u6284\u88ad\u8005\u5e76\u4e0d\u4f1a\u628a\u4f60\u7684\u521b\u610f\u601d\u60f3\u76d7\u8d70\uff0c\u800c\u8fd9\u5bf9\u4e8e\u6211\u4eec\u6765\u8bf4\u5df2\u7ecf\u8fbe\u5230\u589e\u957f\u5916\u94fe\u7684\u4f5c\u7528\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u6ca1\u6709\u5fc5\u8981\u5bb3\u6015\u8fd9\u4e2a\u3002","title":"SEO\u4e4b\u7f51\u7ad9\u5206\u7c7b\u76ee\u5f55\u5916\u94fe\u63a8\u5e7f\u5de5\u5177, \u9ad8\u8d28\u91cf\u5916\u94fe\u6765\u6e90\u548c\u6280\u5de7"},{"location":"pages/affiliate/seo-backlink-website-directories/#\u7f51\u7ad9\u5206\u7c7b\u76ee\u5f55\u5916\u94fe\u63a8\u5e7f\u5de5\u5177-\u9ad8\u8d28\u91cf\u5916\u94fe\u6765\u6e90\u548c\u6280\u5de7","text":"\u7f51\u7ad9\u5206\u7c7b\u76ee\u5f55\uff0c\u53c8\u79f0\u805a\u5408\u76ee\u5f55\uff0c\u662f\u5c06\u5404\u884c\u5404\u4e1a\u7f51\u7ad9\u6309\u7167\u4e0d\u540c\u7684\u5206\u7c7b\u7531\u4eba\u5de5\u8fdb\u884c\u5f52\u7c7b\u7684\u7f51\u7ad9\u5217\u8868\u7684\u7ec4\u5408\u3002\u6240\u4ee5\u805a\u5408\u76ee\u5f55\u4e5f\u53ef\u8bf4\u662f\u7f51\u5740\u5bfc\u822a\u7f51\u7ad9\u7684\u4e00\u79cd\uff0c\u53ea\u662f\u66f4\u52a0\u7ec6\u5316\u548c\u8be6\u7ec6\u4e86\uff0c\u5bf9\u6bcf\u4e2a\u7f51\u7ad9\u90fd\u9644\u6709\u7f51\u7ad9\u7684\u5185\u5bb9\u8bf4\u660e\u6216\u4e3b\u9898\u4ecb\u7ecd\u3002\u7531\u4e8e\u5168\u662f\u4eba\u5de5\u7f16\u8f91\u5e76\u5ba1\u6838\u7684\uff0c\u76f8\u5bf9\u4e8e\u641c\u7d22\u5f15\u64ce\u6765\u8bf4\u5177\u6709\u66f4\u9ad8\u7684\u53ef\u4fe1\u5ea6\u3002\u5927\u591a\u6570\u505a\u7f51\u7ad9\u63a8\u5e7f\u7684\u7ad9\u957f\u670b\u53cb\u57fa\u672c\u90fd\u4f1a\u5230\u4e00\u4e9b\u77e5\u540d\u7684\u805a\u5408\u76ee\u5f55\u63d0\u4ea4\u81ea\u5df1\u7684\u7f51\u7ad9\u3002 \u53bb\u54ea\u91cc\u627e\u7f51\u7ad9\u5206\u7c7b\u76ee\u5f55\u7f51\u7ad9\u8d44\u6e90\u5462\uff1f\u6700\u7b80\u5355\u7684\u529e\u6cd5\u5c31\u662f\u76f4\u63a5\u5728\u4e00\u4e9b\u641c\u7d22\u5f15\u64ce\u4e0a\u76f4\u63a5\u641c\u7d22\u4e0e\u7f51\u7ad9\u76ee\u5f55\u3001\u805a\u5408\u76ee\u5f55\u548c\u5206\u7c7b\u76ee\u5f55\u76f8\u5173\u7684\u5173\u952e\u8bcd\u3002\u5f53\u7136\uff0c\u8fd9\u6837\u641c\u7d22\u8fd4\u56de\u7684\u7f51\u7ad9\u6570\u80af\u5b9a\u5f88\u591a\uff0c\u8981\u4ece\u4e2d\u7f29\u5c0f\u76ee\u6807\u6311\u9009\u51fa\u4e00\u5c0f\u90e8\u5206\u8fdb\u884c\u63d0\u4ea4\u3002\u8fd8\u6709\u53e6\u4e00\u79cd\u65b9\u6cd5\u5c31\u662f\u67e5\u770b\u7ade\u4e89\u5bf9\u624b\u4e00\u822c\u5728\u90a3\u4e9b\u76ee\u5f55\u88ab\u6536\u5f55\uff0c\u901a\u8fc7\u67e5\u8be2\u53ef\u4ee5\u76f4\u63a5\u4ece\u5916\u90e8\u94fe\u63a5\u627e\u5230\u3002\u76ee\u524d\u6bd4\u8f83\u77e5\u540d\u7684\u805a\u5408\u76ee\u5f55\u7f51\u7ad9\u6709\uff1a\u4e9a\u9a6c\u900a\u5206\u7c7b\u76ee\u5f55\u3001\u4f18\u9009\u7f51\u7ad9\u76ee\u5f55\u3001\u6dd8\u7ad9\u5206\u7c7b\u76ee\u5f55\u3001\u63a8\u4f18\u7f51\u7ad9\u76ee\u5f55\u3001\u7ad9\u957f\u76ee\u5f55\u3001\u5fae\u9875\u7f51\u7ad9\u76ee\u5f55\u548c\u58f9\u7f51\u5206\u7c7b\u76ee\u5f55\u7b49\u7b49\u3002 \u786e\u5b9a\u4e86\u8981\u63d0\u4ea4\u7684\u805a\u5408\u76ee\u5f55\u540e\uff0c\u8fd8\u8981\u6b63\u786e\u9009\u62e9\u5411\u54ea\u4e00\u4e2a\u5206\u7c7b\u63d0\u4ea4\u7f51\u7ad9\u3002\u63d0\u4ea4\u7f51\u7ad9\u76ee\u5f55\u4e00\u5b9a\u8981\u6309\u7167\u4e00\u5b9a\u7684\u5206\u7c7b\u529e\u6cd5\u628a\u6536\u5f55\u7684\u7f51\u7ad9\u653e\u5728\u9002\u5f53\u7684\u76ee\u5f55\u5206\u7c7b\u4e0b\u9762\uff0c\u800c\u8fd9\u91cc\u7684\u76ee\u5f55\u662f\u6307\u7f51\u7ad9\u7684\u7f51\u5740\u3001\u6807\u9898\u7b49\u7b49\u7684\u4e00\u4e9b\u8d44\u6599\u3002\u4e00\u822c\u6bcf\u4e2a\u805a\u5408\u76ee\u5f55\u7f51\u7ad9\u5728\u9875\u9762\u7684\u5e95\u90e8\u90fd\u8bbe\u6709\u201c\u63d0\u4ea4\u7f51\u5740\u201d\uff0c\u201c\u65b0\u7ad9\u767b\u9646\u201d\u6216\u201c\u7533\u8bf7\u6536\u5f55\u201d\u7b49\u7c7b\u4f3c\u540d\u79f0\u7684\u94fe\u63a5\uff0c\u5404\u4e2a\u76ee\u5f55\u4f1a\u6709\u6240\u4e0d\u540c\u3002\u4f46\u662f\u529f\u80fd\u90fd\u662f\u4e00\u6837\u7684\uff0c\u90fd\u662f\u4e13\u95e8\u7528\u6765\u63a5\u53d7\u65b0\u7ad9\u7684\u63d0\u4ea4\u548c\u7533\u8bf7\u3002\u4f60\u53ef\u4ee5\u76f4\u63a5\u5f88\u65b9\u4fbf\u7684\u901a\u8fc7\u8be5\u9875\u9762\u6765\u63d0\u4ea4\u7533\u8bf7\uff0c\u5982\u679c\u9700\u8981\u6ce8\u518c\u7528\u6237\u540d\u4ec0\u4e48\u7684\u4e5f\u6309\u7167\u8981\u6c42\u6ce8\u518c\u5c31\u597d\u4e86\uff0c\u4f46\u5fc5\u987b\u6ce8\u610f\u4ed4\u7ec6\u586b\u5199\u6bcf\u4e00\u9879\u8d44\u6599\u3002\u6bd4\u5982\u201c\u7533\u8bf7\u7f51\u7ad9\u7684\u540d\u79f0\u4e0d\u8981\u8d85\u8fc710\u4e2a\u4e2d\u6587\u5b57\u201d\uff0c\u5927\u5bb6\u5c31\u5c3d\u91cf\u4e0d\u8981\u53bb\u8d85\u8d8a\u8fd9\u4e2a\u6781\u9650\u3002\u5982\u679c\u4e00\u4e9b\u7f51\u7ad9\u9700\u8981\u5728\u63d0\u4ea4\u7f51\u5740\u524d\u52a0\u9996\u9875\u94fe\u63a5\u7684\u8bdd\u5c31\u5148\u52a0\u4e0a\uff0c\u4ee5\u4fdd\u8bc1\u7f51\u5740\u7684\u987a\u5229\u63d0\u4ea4\u3002 \u6210\u529f\u63d0\u4ea4\u5230\u805a\u5408\u76ee\u5f55\u540e\uff0c\u5c31\u9700\u8981\u5927\u5bb6\u8010\u5fc3\u7684\u53bb\u7b49\u5f85\u4e86\u3002\u8fd9\u4e2a\u65f6\u95f4\u6bb5\u4e00\u822c\u4f1a\u63a7\u5236\u57281\u4e2a\u6708\u5185\uff0c\u5982\u679c\u6ca1\u80fd\u6536\u5f55\u5efa\u8bae\u57283\u4e2a\u6708\u540e\u518d\u53bb\u63d0\u4ea4\u3002\u5927\u5bb6\u4e5f\u53ef\u4ee5\u5c1d\u8bd5\u901a\u8fc7\u7f51\u7ad9\u4e0a\u7684\u8054\u7cfb\u65b9\u5f0f\u4e0e\u7f16\u8f91\u6c9f\u901a\uff0c\u8ba4\u771f\u503e\u542c\u522b\u4eba\u7684\u5efa\u8bae\uff0c\u4e5f\u53ef\u77e5\u9053\u522b\u4eba\u662f\u5982\u4f55\u8bc4\u4ef7\u81ea\u5df1\u7f51\u7ad9\u7684\u3002\u73b0\u5728\u5f88\u591a\u4e2d\u6587\u7684\u7f51\u7ad9\u76ee\u5f55\u90fd\u4f1a\u8981\u6c42\u5148\u7ed9\u5bf9\u65b9\u7f51\u7ad9\u505a\u4e00\u4e2a\u53cb\u60c5\u94fe\u63a5\uff0c\u624d\u4f1a\u6279\u51c6\u6536\u5f55\u8fd9\u4e2a\u7f51\u7ad9\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\u6211\u4eec\u5e94\u8be5\u81ea\u5df1\u505a\u4e00\u4e2a\u51b3\u5b9a\u662f\u5426\u9700\u8981\u4e3a\u5bf9\u65b9\u505a\u4e00\u4e2a\u53cb\u94fe\uff0c\u56e0\u4e3a\u8fd9\u79cd\u60c5\u51b5\u5b9e\u9645\u4e0a\u5c31\u548c\u53e6\u5916\u4e00\u4e2a\u7f51\u7ad9\u4ea4\u6362\u4e00\u53cb\u94fe\u6ca1\u6709\u4ec0\u4e48\u533a\u522b\uff0c\u867d\u7136\u5bf9\u65b9\u7684\u6743\u91cd\u6bd4\u8f83\u9ad8\u3002\u4f46\u7ed9\u4f60\u7684\u4e5f\u53ea\u662f\u4e00\u4e2a\u5185\u9875\uff0c\u5f53\u7136\u4ece\u6d41\u91cf\u4e0a\u6765\u8bb2\uff0c\u8fd8\u662f\u6709\u4e00\u4e9b\u6548\u679c\u7684\u3002 \u5728\u7f51\u7edc\u7ade\u4e89\u65e5\u76ca\u52a0\u5267\u7684\u4eca\u5929\uff0c\u5229\u7528\u597d\u4e86\u5206\u7c7b\u76ee\u5f55\u8fd9\u79cd\u5de5\u5177\uff0c\u7f51\u7ad9\u63a8\u5e7f\u7684\u5de5\u4f5c\u76f8\u4fe1\u4f1a\u66f4\u52a0\u7684\u6e38\u5203\u6709\u4f59\uff0c\u6700\u5c11\u7b97\u662f\u591a\u4e86\u4e00\u4e2a\u63a8\u5e7f\u7f51\u7ad9\u7684\u9014\u5f84\u548c\u65b9\u6cd5\u5427\u3002\u5404\u4f4d\u7ad9\u957f\u6709\u673a\u4f1a\u4e0d\u59a8\u4e5f\u53bb\u5c1d\u8bd5\u4e00\u4e0b\u63d0\u4ea4\u7f51\u7ad9\u5230\u805a\u5408\u76ee\u5f55\u8fd9\u79cd\u65b9\u6cd5\uff0c\u5b9e\u8df5\u624d\u662f\u68c0\u9a8c\u771f\u7406\u7684\u552f\u4e00\u6807\u51c6\uff01","title":"\u7f51\u7ad9\u5206\u7c7b\u76ee\u5f55\u5916\u94fe\u63a8\u5e7f\u5de5\u5177, \u9ad8\u8d28\u91cf\u5916\u94fe\u6765\u6e90\u548c\u6280\u5de7"},{"location":"pages/affiliate/seo-backlink-website-directories/#\u4e09\u79cd\u9ad8\u8d28\u91cf\u5916\u94fe\u6765\u6e90\u548c\u6280\u5de7","text":"\u7b2c\u4e00\uff1a\u5206\u4eab\u5185\u5bb9\u662f\u9ad8\u8d28\u91cf\u6765\u6e90 \u5185\u5bb9\u5c31\u662f\u5916\u94fe\u7684\u6838\u5fc3\u90e8\u5206\uff0c\u5185\u5bb9\u7684\u597d\u574f\u662f\u76f4\u63a5\u8861\u91cf\u5916\u94fe\u7684\u6807\u51c6\u4e4b\u4e00\uff0c\u5185\u5bb9\u80fd\u591f\u548c\u7528\u6237\u8fdb\u884c\u4ea4\u6d41\uff0c\u4fe1\u606f\u4ef7\u503c\u8d8a\u9ad8\u7684\u624d\u80fd\u52fe\u8d77\u7528\u6237\u7ee7\u7eed\u9605\u8bfb\u7684\u6b32\u671b\uff0c\u53ea\u6709\u9ad8\u8d28\u91cf\u5185\u5bb9\u5206\u4eab\u51fa\u53bb\u5728\u5f97\u5230\u8ba4\u53ef\u7684\u540c\u65f6\u522b\u4eba\u624d\u4f1a\u5e2e\u4f60\u5206\u4eab\u548c\u4f20\u64ad\uff0c\u8fd9\u6837\u5c31\u662f\u81ea\u7136\u7684\u589e\u52a0\u6d41\u91cf\u548c\u5916\u94fe\u3002 \u7b2c\u4e8c\uff1a\u5de5\u5177\u4f7f\u7528\u548c\u5206\u4eab\u662f\u9ad8\u8d28\u91cf\u5916\u94fe\u6765\u6e90 \u5de5\u5177\u5206\u4eab\u5bf9\u4e8e\u5916\u94fe\u6765\u8bf4\u662f\u975e\u5e38\u660e\u663e\u7684\uff0c\u5982\u679c\u5de5\u5177\u662f\u514d\u8d39\u7684\u76f8\u4fe1\u4e00\u5b9a\u4f1a\u6709\u5f88\u591a\u4eba\u4e3a\u4f60\u4f20\u64ad\uff0c\u8fd9\u6837\u7684\u8bdd\u5c31\u5f97\u5230\u5916\u94fe\u4e86\u3002\u4f8b\u5982\u767e\u5ea6\u7ad9\u957f\u5de5\u5177\u5c31\u662f\u5f15\u5bfc\u522b\u4eba\u53bb\u4f7f\u7528\uff0c\u540c\u65f6\u5728\u4f7f\u7528\u7684\u8fc7\u7a0b\u4e2d\u5c31\u88ab\u4f20\u64ad\u4e86\uff0c\u8fd9\u6837\u5c31\u4f1a\u6709\u8d8a\u6765\u8d8a\u591a\u7684\u4eba\u77e5\u9053\u7ad9\u957f\u94fe\u8fd9\u4e2a\u5de5\u5177\uff0c\u767e\u5ea6\u4e5f\u5bf9\u8fd9\u4e9b\u5de5\u5177\u8fdb\u884c\u4e0d\u65ad\u7684\u6539\u8fdb\uff0c\u8ba9\u5de5\u5177\u66f4\u52a0\u5b8c\u5584\u7528\u6237\u4f53\u9a8c\uff0c\u5176\u5b9e\u8fd9\u4e5f\u662f\u5728\u5206\u4eab\u81ea\u5df1\u7684\u5de5\u5177\uff0c\u6211\u4eec\u5728\u4f7f\u7528\u7684\u8fc7\u7a0b\u4e2d\u4e5f\u5c31\u4e0d\u77e5\u4e0d\u89c9\u7684\u5728\u4f20\u64ad\u4e86\uff0c\u5916\u94fe\u4e5f\u5c31\u8ddf\u7740\u591a\u4e86\u8d77\u6765\u3002 \u7b2c\u4e09\uff1a\u521b\u610f\u5206\u4eab\u9ad8\u8d28\u91cf\u5916\u94fe\u6765\u6e90 \u521b\u610f\u5bf9\u4e8e\u6bcf\u4e2a\u4eba\u6765\u8bf4\u90fd\u662f\u975e\u5e38\u5b9d\u8d35\u7684\u8d22\u5bcc\uff0c\u56e0\u6b64\u4e5f\u6709\u5f88\u591a\u4eba\u4e0d\u613f\u8f7b\u6613\u5206\u4eab\u51fa\u6765\uff0c\u56e0\u4e3a\u5c71\u5be8\u6284\u88ad\u592a\u5389\u5bb3\u4e86\uff0c\u53ef\u80fd\u4f60\u4eca\u5929\u5206\u4eab\u51fa\u6765\u7684\u4e1c\u897f\u660e\u5929\u4f1a\u6709\u65e0\u6570\u4e2a\u76d7\u7248\u7684\u51fa\u73b0\uff0c\u7136\u800c\u4f60\u7684\u521b\u610f\u4e5f\u4f1a\u8ddf\u7740\u70df\u6d88\u4e91\u6563\u4e86\u3002\u5176\u5b9e\u6211\u4eec\u4e0d\u5fc5\u62c5\u5fc3\u8fd9\u4e2a\uff0c\u56e0\u4e3a\u6284\u88ad\u8005\u5e76\u4e0d\u4f1a\u628a\u4f60\u7684\u521b\u610f\u601d\u60f3\u76d7\u8d70\uff0c\u800c\u8fd9\u5bf9\u4e8e\u6211\u4eec\u6765\u8bf4\u5df2\u7ecf\u8fbe\u5230\u589e\u957f\u5916\u94fe\u7684\u4f5c\u7528\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u6ca1\u6709\u5fc5\u8981\u5bb3\u6015\u8fd9\u4e2a\u3002","title":"\u4e09\u79cd\u9ad8\u8d28\u91cf\u5916\u94fe\u6765\u6e90\u548c\u6280\u5de7"},{"location":"pages/affiliate/seo_competitor_analyze/","text":"\u5982\u4f55\u56f4\u7ed5 SEO \u5f00\u5c55\u7ade\u4e89\u5bf9\u624b\u5206\u6790 [\u5305\u542b\u5206\u6790\u6a21\u677f] \u00b6 \u5982\u679c\u4f60\u6253\u7b97\u5efa\u7acb\u5168\u65b0\u7684\u7535\u5546\u72ec\u7acb\u7ad9\uff0c\u6216\u8005\u5df2\u7ecf\u538c\u5026\u4e86\u5728\u81ea\u7136\u641c\u7d22\u4e2d\u4e0d\u65ad\u5730\u8f93\u7ed9\u7ade\u4e89\u5bf9\u624b\uff0c\u90a3\u4e48\u4f60\u5c31\u6709\u5fc5\u8981\u57fa\u4e8e\u641c\u7d22\u5f15\u64ce\u4f18\u5316\u5f00\u5c55\u4e00\u6b21\u7ade\u4e89\u5bf9\u624b\u5206\u6790\u4e86\u3002 \u7ade\u4e89\u5bf9\u624b\u7684\u6570\u636e\u5bf9\u4f60\u6765\u8bf4\u7b80\u76f4\u5c31\u662f\u4e00\u5ea7\u91d1\u77ff\uff0c\u5b83\u4eec\u53ef\u4ee5\u4ece\u5404\u4e2a\u65b9\u9762\u5bf9\u4f60\u7684 SEO\u7b56\u7565\u63d0\u4f9b\u6307\u5bfc\uff0c\u5e2e\u52a9\u63d0\u5347\u4f60\u7ad9\u70b9\u7684\u81ea\u7136\u6d41\u91cf\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u5f00\u5c55\u57fa\u4e8e SEO\u7684\u7ade\u4e89\u5bf9\u624b\u5206\u6790\u53ef\u4ee5\u5e2e\u52a9\u4f60\uff1a \u4e86\u89e3\u6240\u5728\u884c\u4e1a\u7684\u8fd0\u4f5c\u89c4\u5219\uff1b \u627e\u5230\u7ade\u4e89\u5bf9\u624b\u7684\u5f31\u70b9\uff0c\u5e76\u52a0\u4ee5\u5229\u7528\uff1b \u627e\u5230\u7ade\u4e89\u5bf9\u624b\u7684\u5f3a\u9879\uff0c\u5e76\u52a0\u4ee5\u590d\u5236\uff1b \u7406\u89e3\u9700\u8981\u5f00\u5c55\u7684 SEO\u76f8\u5173\u5de5\u4f5c\uff0c\u5e76\u5206\u51fa\u4f18\u5148\u7ea7\uff1b \u4e86\u89e3\u5728\u641c\u7d22\u5f15\u64ce\u7ed3\u679c\u9875\u9762\uff08Search Engine Result Page, SERP\uff09\u8d85\u8d8a\u7ade\u4e89\u5bf9\u624b\u7684\u96be\u5ea6\u3002 \u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u865a\u6784\u4e86\u4e00\u6b3e\u4fe1\u606f\u56fe\u8868\u8bbe\u8ba1\u5de5\u5177\uff08infographic design tool\uff09\u2014\u2014 Minimagraphic.com\uff0c\u5e76\u5c06\u4ee5\u6b64\u4e3a\u4f8b\uff0c\u4ecb\u7ecd\u4e00\u5957\u57fa\u4e8e SEO \u5f00\u5c55\u7ade\u4e89\u5bf9\u624b\u5206\u6790\u7684\u6807\u51c6\u6d41\u7a0b\u3002 \u6211\u4eec\u8fd8\u4e3a\u5927\u5bb6\u51c6\u5907\u4e86\u4e00\u4e2a\u7528\u4e8e\u7ade\u4e89\u5bf9\u624b\u5206\u6790\u7684\u8868\u683c\u6a21\u677f\uff0c\u76f8\u4fe1\u5728\u4e3a\u81ea\u5df1\u7684\u7f51\u7ad9\u505a\u7ade\u4e89\u5bf9\u624b\u5206\u6790\u7684\u65f6\u5019\uff0c\u5b83\u80fd\u6d3e\u4e0a\u7528\u573a\u3002 \u73b0\u5728\u5f00\u59cb \u00b6 \u56f4\u7ed5 SEO \u5f00\u5c55\u7ade\u4e89\u5bf9\u624b\u5206\u6790\uff0c\u4f60\u9700\u8981\u4ee5\u4e0b\u4e24\u4ef6\u5175\u5668\uff1a 1. Ahrefs SEO \u5de5\u5177\u96c6 2. Google \u8868\u683c\uff08Google Sheets\uff09 \u6a21\u677f\uff08\u91cd\u8981\uff1a\u62f7\u8d1d\u540e\u518d\u4f7f\u7528\uff01\uff09 \u4e3a\u4e86\u9632\u6b62\u4ee5\u4e0b\u7684\u8bf4\u660e\u6709\u4e0d\u6e05\u695a\u7684\u5730\u65b9\uff08\u5e0c\u671b\u4e0d\u4f1a\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\uff09\uff0c\u6709\u5fc5\u8981\u5c06\u9488\u5bf9\u6211\u4eec\u5047\u60f3\u7ad9\u70b9\u7684\u5b8c\u6210\u7248\u8868\u683c\u4e5f\u4e00\u8d77\u62f7\u8d1d\u4e86\u3002 \u5b8c\u6210\u4e86\u7684\uff08\u7ade\u4e89\u5bf9\u624b\u5206\u6790\uff09\u8868\u683c \u5728\u6b64 \u3002 \u51c6\u5907\u597d\u4e86\u5417\uff1f\u6211\u4eec\u5f00\u59cb\uff01 1. \u8bc6\u522b\u7ade\u4e89\u5bf9\u624b \u00b6 \u5728\u5f00\u5c55\u5404\u9879\u5de5\u4f5c\u4e4b\u524d\uff0c\u9700\u8981\u786e\u8ba4\u6211\u4eec\u7684\u4e3b\u8981\u7ade\u4e89\u5bf9\u624b\u3002 \u5b83\u4eec\u662f\u81ea\u7136\u641c\u7d22\u4e2d\u4e4b\u4e8e\u76ee\u6807\u5173\u952e\u8bcd\u4e0e\u6211\u4eec\u4e89\u593a\u6392\u540d\u7684\u7f51\u7ad9\u3002 \u5c31\u6211\u4eec\u5047\u60f3\u7684\u4fe1\u606f\u56fe\u8868\u8bbe\u8ba1\u5de5\u5177\u800c\u8a00\uff0c\u7acb\u523b\u6d6e\u73b0\u5728\u8111\u6d77\u7684\u7ade\u4e89\u5bf9\u624b\u6709\uff1aCanva\uff0cPiktochart\uff0cInfogram\uff0ceasel.ly \u548c Visme\u3002\u7136\u800c\uff0c\u6211\u4eec\u5728\u81ea\u7136\u641c\u7d22\u677f\u5757\u7684\u7ade\u4e89\u8005\u53ef\u80fd\u5e76\u4e0d\u76f4\u63a5\u6784\u6210\u4e1a\u52a1\u7ade\u4e89\u3002 \u6211\u4eec\u5148\u6765\u770b\u770b\u6f5c\u5728\u7528\u6237\u641c\u7d22\u76f8\u5173\u670d\u52a1\u65f6\u53ef\u80fd\u4f1a\u4f7f\u7528\u7684\u77ed\u8bed\u3002 \u6211\u4eec\u8d77\u521d\u89c9\u5f97\u4f1a\u662f\u201cinfographic design tool\u201c\u4e4b\u7c7b\u7684\u8bcd\uff0c\u4f46\u662f\u5f53\u6211\u4eec\u5728 Ahrefs \u7684 \u5173\u952e\u8bcd\u5206\u6790 \uff08Keywords Explorer\uff09\u5de5\u5177\u4e2d\u68c0\u7d22\u7684\u65f6\u5019\uff0c\u53d1\u73b0\u8fd9\u4e2a\u731c\u60f3\u597d\u50cf\u9519\u4e86\uff0c\u8be5\u77ed\u8bed\u5728 Google \u4e2d\u5e76\u6ca1\u6709\u641c\u7d22\u91cf\u3002 \u6253\u5f00\u5171\u540c\u6392\u540d\u77ed\u8bed\uff08Also rank for\uff09\u62a5\u544a\uff0c \u6211\u4eec\u6765\u770b\u770b\u662f\u5426\u80fd\u627e\u5230\u66f4\u597d\u7684\u5173\u952e\u8bcd\u3002 \u770b\u8d77\u6765\u4eba\u4eec\u5728\u641c\u7d22\u8fd9\u7c7b\u5de5\u5177\u65f6\uff0c\u7528\u7684\u6700\u591a\u7684\u8bcd\u662f\u201cinfographic maker\u201d\u3002 \u73b0\u5728\u8ba9\u6211\u4eec\u5207\u6362\u5230 SERP \u6982\u89c8\uff08SERP overview\uff09 \u62a5\u544a\uff0c\u770b\u770b\u8fd9\u4e2a\u5173\u952e\u8bcd\u6392\u540d\u524d 5 \u7684\u7ed3\u679c\u3002 \u5982\u679c\u4f60\u8fd8\u4e0d\u662f Ahrefs \u7684\u7528\u6237\uff0c\u53ef\u4ee5\u8bd5\u8bd5\u5728 Google \u4e2d\u641c\u7d22\u8fd9\u4e2a\u5173\u952e\u8bcd\uff1a \u770b\u8d77\u6765\u6211\u4eec\u6700\u4e3b\u8981\u7684 5 \u4e2a \u7ade\u4e89\u5bf9\u624b\u662f\uff1aPiktochart\uff0cVenngage\uff0cCanva\uff0cVisme \u548c Infogram\u3002 \u6709\u8da3\u7684\u662f\uff0cEasel.ly \u5e76\u4e0d\u591f\u683c\uff08\u6210\u4e3a\u6211\u4eec\u7684\u7ade\u4e89\u5bf9\u624b\uff09\uff0c\u56e0\u4e3a\u5728\u6392\u540d\u524d 10 \u7684\u7ed3\u679c\u4e2d\u6ca1\u6709\u53d1\u73b0\u5b83\u7684\u8eab\u5f71\u3002 \u5c31\u8fd9\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u4e0d\u80fd\u4f9d\u8d56\u76f4\u89c9\u786e\u8ba4\u76f4\u63a5\u7684\u540c\u4e1a\u7ade\u4e89\u5bf9\u624b\u3002\u518d\u91cd\u7533\u4e00\u904d\uff0c\u4ece SEO \u89d2\u5ea6\uff0c\u4ed6\u4eec\u5e76\u4e0d\u603b\u662f\u4f60\u7684\u7ade\u4e89\u5bf9\u624b\u3002 \u4e3e\u4e00\u4e2a\u66f4\u751f\u52a8\u7684\u4f8b\u5b50\uff0c\u5047\u8bbe\u4f60\u5728\u4e00\u5ea7\u5c0f\u9547\u4e2d\u7ecf\u8425\u4e00\u5bb6\u8089\u5e97\u3002\u8def\u8fb9\u53e6\u5916\u4e00\u5bb6\u8089\u5e97\u53ef\u80fd\u8ba9\u4f60\u5bdd\u98df\u96be\u5b89\u3002\u7136\u800c\u5c31 SEO \u800c\u8a00\uff0c\u4ed6\u4eec\u5e76\u4e0d\u6784\u6210\u4efb\u4f55\u5a01\u80c1\uff0c\u56e0\u4e3a\u4ed6\u4eec\u751a\u81f3\u8fde\u7f51\u7ad9\u90fd\u6ca1\u6709\u3002 \u6211\u4eec\u5c06\u8fd9 5 \u4e2a\u7ade\u4e89\u5bf9\u624b\uff08\u7684\u54c1\u724c\u548c\u57df\u540d\uff09\u586b\u5165\u5206\u6790\u8868\u683c\u3002 \u4e13\u4e1a\u63d0\u793a \u5982\u679c\u4f60\u60f3\u627e\u51fa\u535a\u5ba2\u6216\u8005\u7535\u5546\u7f51\u7ad9\u7684\u7ade\u4e89\u5bf9\u624b\uff0c\u5c31\u5355\u4e00\u5173\u952e\u8bcd\u627e\u51fa\u6392\u540d\u524d\u5217\u7684\u7f51\u7ad9\u53ef\u80fd\u5e76\u4e0d\u662f\u6700\u597d\u7684\u505a\u6cd5\u3002 \u4f60\u5f88\u53ef\u80fd\u9700\u8981\u9488\u5bf9\u8bb8\u591a\u9875\u9762\u7684\u591a\u4e2a\u4e3b\u9898\u6807\u7684\u6210\u767e\u4e0a\u5343\u4e2a\u5173\u952e\u8bcd\u3002 \u6240\u4ee5\u4f60\u9700\u8981\u66f4\u5168\u9762\u5730\u5ba1\u89c6\u4f60\u7684\u7ade\u4e89\u5bf9\u624b\u3002 \u4e3a\u6b64\uff0c\u4f60\u9700\u8981\u7528\u5230 Ahrefs \u7f51\u7ad9\u5206\u6790 \uff08Site Explorer\uff09\u4e2d\u7684 \u7ade\u4e89\u57df\u540d\uff08Competing Domains\uff09 \u62a5\u544a\u3002 \u7f51\u7ad9\u5206\u6790 > \u8f93\u5165\u4f60\u7684\u57df\u540d > \u81ea\u7136\u641c\u7d22 > \u7ade\u4e89\u57df\u540d (Site Explorer > enter your domain > Organic search > Competing domains) 2. \u5206\u6790\u7ade\u4e89\u683c\u5c40 \u00b6 \u63a5\u7740\uff0c\u6211\u4eec\u9700\u8981\u9e1f\u77b0\u6574\u4f53\u7ade\u4e89\u6001\u52bf\u3002 \u6211\u4eec\u6240\u5728\u884c\u4e1a\u7684\u7ade\u4e89\u683c\u5c40\u53ef\u80fd\u76d8\u6839\u9519\u8282\uff0c\u901a\u8fc7\u6293\u53d6\u5173\u952e\u6570\u636e\u548c\u4e00\u4e9b SEO \u6307\u6807 \u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u66f4\u597d\u7406\u89e3\u3002 \u4f7f\u7528 Ahrefs \u6279\u91cf\u5206\u6790 \uff08Batch Analysis\uff09\u5de5\u5177\uff0c\u6211\u4eec\u53ef\u4ee5\u4e00\u6b21\u6027\u6293\u53d6\u591a\u4e2a\u7ade\u4e89\u5bf9\u624b\u7684\u76f8\u5173\u6570\u636e\u548c\u6307\u6807\u3002 \u6279\u91cf\u5206\u6790 > \u8f93\u5165\u591a\u4e2a\u7ade\u4e89\u5bf9\u624b\u7684\u57df\u540d > \u5206\u6790 (Batch Analysis > Enter competitors\u2019 domains > Analyze) \u6279\u91cf\u5206\u6790\u5de5\u5177\u53ef\u4ee5\u7ed9\u51fa\u6bcf\u4e2a\u7f51\u7ad9\u7684\u5927\u91cf\u6709\u7528\u6570\u636e \uff0c\u4f46\u73b0\u5728\u6211\u4eec\u6700\u611f\u5174\u8da3\u7684\u662f\uff1a \u57df\u540d\u8bc4\u5206 \uff08Domain Rating, DR \uff09 * Ahrefs \u6392\u540d \uff08Ahrefs Rank, AR \uff09 * \u6307\u5165\u57df\u540d\u6570\u91cf * \u81ea\u7136\u641c\u7d22\u6d41\u91cf\u4f30\u503c * \u300e\u6709\u6392\u540d\u300f\u7684\u5173\u952e\u8bcd\u6570\u91cf\u4f30\u503c \u6211\u4eec\u5c06\u8fd9\u4e9b\u6570\u636e\u7c98\u8d34\u8fdb\u6a21\u677f\u8868\u683c\u3002 \u63a5\u7740\u6df1\u5165\u7406\u89e3\u4e00\u4e0b\u8fd9\u4e9b SEO \u6307\u6807\uff1a \u57df\u540d\u8bc4\u5206\uff08Domain Rating, DR\uff09 : \u8f83\u9ad8\u7684\u57df\u540d\u8bc4\u5206\u5f80\u5f80\u610f\u5473\u7740\u624e\u5b9e\u7684\u5916\u94fe\u57fa\u7840\u3002\u5728\u7406\u89e3\u8fd9\u9879\u6307\u6807\u65f6\uff0c\u4e0d\u8981\u628a\u5b83\u5f53\u6210\u4e00\u4e2a\u7edd\u5bf9\u503c\uff0c\u800c\u5e94\u4ece\u76f8\u5bf9\u7684\u89d2\u5ea6\u5224\u65ad\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u7f51\u7ad9\u7684 DR \u4e3a 30\uff0c\u800c\u7ade\u4e89\u5bf9\u624b\u7684 DR \u4e3a 50\uff0c\u90a3\u5bf9\u624b\u53ea\u662f\u6bd4\u4f60\u9ad8\u51fa\u4e86\u4e00\u4e9b\uff1b\u5982\u679c\u4f60\u7f51\u7ad9\u7684 DR \u4e3a 30\uff0c\u800c\u7ade\u4e89\u5bf9\u624b\u7684 DR \u53bb\u5230\u4e86 90\uff0c\u8fd9\u5c31\u597d\u6bd4\u62ff\u4f60\u7684\u5c0f\u5356\u94fa\u548c\u6c83\u5c14\u739b (Walmart) \u6297\u8861\u2014\u2014\u9192\u9192\uff0c\u4f60\u6839\u672c\u4e0d\u662f\u4ed6\u4eec\u7684\u5bf9\u624b\u3002 Ahrefs \u6392\u540d\uff08Ahrefs Ranking, AR\uff09 : \u7f51\u7ad9\u7684 Ahrefs \u6392\u540d\u8d8a\u9ad8\uff08\u6570\u503c\u8d8a\u5c0f\uff09\uff0c\u610f\u5473\u7740\u7f51\u7ad9\u7684\u6574\u4f53\u7d20\u8d28\u8d8a\u9ad8\u3002\u4f5c\u4e3a\u548c DR \u7c7b\u4f3c\u7684\u7efc\u5408\u6027\u6307\u6807\uff0cAR \u8003\u5bdf\u7684\u7f51\u7ad9\u6307\u6807\u66f4\u52a0\u7ec6\u81f4\u3002\u4f8b\u5982\uff0c\u5f53\u4f60\u9762\u5bf9\u4e24\u5bb6 DR \u540c\u4e3a 33 \u7684\u7ade\u4e89\u5bf9\u624b\u65f6\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u53c2\u8003 AR \u6765\u786e\u5b9a\u54ea\u4e2a\u66f4\u5f3a\u4e00\u4e9b\u3002 \u6307\u5165\u57df\u540d\uff08Referring domains\uff09 : \u4e00\u4e2a\u7f51\u7ad9\u7684\u6307\u5165\u57df\u540d\u8d8a\u591a\uff0c\u7f51\u7ad9\u7684\u6743\u5a01\u5ea6\u5c31\u8d8a\u9ad8\u3002\u5f53\u7136\u8fd9\u91cc\u6709\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u524d\u63d0\uff1a\u8fd9\u4e9b\u6307\u5165\u57df\u540d\u63d0\u4f9b\u7684\u94fe\u63a5\u8d28\u91cf\u5fc5\u987b\u826f\u597d\u3002\u6ce8\u610f\uff1a\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u9700\u8981\u540c\u65f6\u53c2\u8003\u50cf DR \u8fd9\u6837\u7684\u7efc\u5408\u6307\u6807\uff0c\u56e0\u4e3a\u5b83\u4f1a\u540c\u65f6\u5c06\u5916\u94fe\u7684\u6570\u91cf\u548c\u8d28\u91cf\u8003\u8651\u5728\u5185\u3002 \u300e\u6709\u6392\u540d\u300f\u7684\u5173\u952e\u8bcd\u6570\u91cf\u4f30\u503c : \u663e\u800c\u6613\u89c1\uff0c\u81ea\u7136\u641c\u7d22\u6d41\u91cf\u8d8a\u5927\uff0c\u300e\u6709\u6392\u540d\u7684\u300f\u5173\u952e\u8bcd\u6570\u91cf\u8d8a\u591a\uff0c\u7f51\u7ad9\u5728\u81ea\u7136\u641c\u7d22\u677f\u5757\u7684\u8868\u73b0\u5c31\u8d8a\u597d\u3002 \u7b80\u5355\u6765\u8bf4\uff0c\u4f60\u548c\u7ade\u4e89\u5bf9\u624b\u5728\u8fd9\u4e9b\u6570\u636e\u4e0a\u7684\u5dee\u8ddd\u8d8a\u5927\uff0c\u4f60\u9700\u8981\u505a\u7684\u5de5\u4f5c\u5c31\u8d8a\u591a\u3002 \u4f46\u662f\uff0c\u8fd9\u4e9b\u9759\u6001\u7684\u91cf\u5316\u6307\u6807 \u5e76\u6ca1\u6709\u63ed\u793a \u7ade\u4e89\u5bf9\u624b\u5728 SEO \u65b9\u9762\u7684\u52a8\u6001\u8fdb\u5c55\u3002 \u5c0f\u7b14\u8bb0 \u6211\u4eec\u5c06\u5728\u63a5\u4e0b\u6765\u7684 03\u300104 \u548c 05 \u7ae0\u8282\u6df1\u5165\u7814\u7a76\u7ade\u4e89\u5bf9\u624b\u7684\u94fe\u63a5\u60c5\u51b5\u3002 3. \u7814\u7a76\u7ade\u4e89\u5bf9\u624b\u7684\u5916\u94fe\u589e\u957f \u00b6 \u5728 \u5206\u6790\u4e86 ~9.3 \u4ebf\u7f51\u9875 \u540e\uff0c\u6211\u4eec\u786e\u8ba4\u5916\u94fe\u662f\u4e00\u4e2a\u660e\u786e\u7684 SEO \u6392\u540d\u56e0\u7d20\u3002 \u5c0f\u63d0\u793a. \u8fd9\u662f\u76f8\u5173\u6027\u7814\u7a76\u7684\u7ed3\u679c\uff0c\u5b83\u5e76\u4e0d\u80fd\u8bc1\u660e\uff08\u4e24\u8005\u4e4b\u95f4\u7684\uff09\u56e0\u679c\u5173\u7cfb\u3002 \u8fd9\u662f\u76f8\u5173\u6027\u7814\u7a76\u7684\u7ed3\u679c\uff0c\u5b83\u5e76\u4e0d\u80fd\u8bc1\u660e\uff08\u4e24\u8005\u4e4b\u95f4\u7684\uff09\u56e0\u679c\u5173\u7cfb\u3002 \u56e0\u6b64\u6211\u4eec\u9700\u8981\u66f4\u591a\u5730\u4e86\u89e3\u7ade\u4e89\u5bf9\u624b\u5728\u94fe\u63a5\u5efa\u8bbe\u65b9\u9762\u6240\u505a\u7684\u5de5\u4f5c\u3002 \u5148\u6765\u770b\u770b\u7ade\u4e89\u5bf9\u624b\u6307\u5165\u57df\u540d\u7684\u589e\u957f\u901f\u5ea6\uff0c\u8fd9\u53ef\u4ee5\u4e3a\u6211\u4eec\u81ea\u5df1\u7684\u94fe\u63a5\u5efa\u8bbe\u5de5\u4f5c\u63d0\u4f9b\u4e00\u4e2a\u7c97\u7565\u7684\u76ee\u6807\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u9700\u8981\u7528\u5230 Ahrefs \u7684 \u7f51\u7ad9\u5206\u6790 \uff08Site Explorer\uff09\u5de5\u5177\u3002 \u7f51\u7ad9\u5206\u6790 > \u8f93\u5165\u57df\u540d > \u6982\u89c8 > \u6307\u5165\u57df\u540d\u66f2\u7ebf > \u8bbe\u7f6e\u65f6\u95f4\u6bb5\u4e3a\u300e1 \u5e74\u300f (Site Explorer > Enter domain > Overview > Referring Domains graph > Set to \u2018One Year\u2019) \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u7ade\u4e89\u5bf9\u624b\uff0c\u6211\u4eec\u4f1a\u7528\u4ed6\u4eec\u5f53\u524d\u7684\u6307\u5165\u57df\u540d\u6570\u91cf\u51cf\u53bb\u4e00\u5e74\u524d\u7684\u6570\u91cf\uff0c\u7136\u540e\u9664\u4ee5 12\uff0c\u8fd9\u6837\u5b9e\u9645\u4e0a\u662f\u5f97\u5230\u4e86\u6bcf\u4e2a\u6708\u7684\u57df\u540d\u53d8\u5316\u5747\u503c\u3002 Visme \u7684\u8ba1\u7b97\u7ed3\u679c\u5982\u4e0b\uff1a (7,603 \u2014 5,599) / 12 = 167 \u4e2a\uff08\u5e73\u5747\uff09\u6708\u5ea6\u65b0\u589e\u6307\u5165\u57df\u540d \u5c0f\u63d0\u793a. \u4ee5\u4e0a\u6570\u503c\u53cd\u6620\u4e86\u6307\u5165\u57df\u540d\u6570\u91cf\u7684\u7d2f\u79ef\uff08cumulative\uff09\u589e\u957f/\u4e0b\u964d\u60c5\u51b5\u3002\u4f8b\u5982\uff0c\u67d0\u7ade\u4e89\u5bf9\u624b\u4e00\u4e2a\u6708\u5185\u65b0\u83b7\u5f97\u4e86 100 \u4e2a \u6307\u5165\u57df\u540d\uff0c\u4f46\u662f\u4e22\u5931\u4e86 10 \u4e2a \uff08\u5df2\u6709\u7684\uff09\u6307\u5165\u57df\u540d\uff0c\u90a3\u4e48\u5b83\u7d2f\u79ef\u589e\u957f\u4e86 90 \u4e2a \u6307\u5165\u57df\u540d\u3002 \u4ee5\u4e0a\u6570\u503c\u53cd\u6620\u4e86\u6307\u5165\u57df\u540d\u6570\u91cf\u7684\u7d2f\u79ef\uff08cumulative\uff09\u589e\u957f/\u4e0b\u964d\u60c5\u51b5\u3002\u4f8b\u5982\uff0c\u67d0\u7ade\u4e89\u5bf9\u624b\u4e00\u4e2a\u6708\u5185\u65b0\u83b7\u5f97\u4e86\u6307\u5165\u57df\u540d\uff0c\u4f46\u662f\u4e22\u5931\u4e86\uff08\u5df2\u6709\u7684\uff09\u6307\u5165\u57df\u540d\uff0c\u90a3\u4e48\u5b83\u7d2f\u79ef\u589e\u957f\u4e86\u6307\u5165\u57df\u540d\u3002 \u6211\u4eec\u63a5\u7740\u6765\u770b\u5176\u4ed6\u51e0\u4e2a\u7ade\u4e89\u5bf9\u624b\u7684\u5916\u94fe\u53d8\u5316\u8d8b\u52bf\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec\u60f3\u8981\u77e5\u9053\u7ade\u4e89\u5bf9\u624b\u7684\u5916\u94fe\u53d8\u5316\u5206\u5e03\u662f\u8fde\u7eed\u7684\u8fd8\u662f\u8df3\u8dc3\u7684\uff0c\u662f\u589e\u957f\u8fd8\u662f\u4e0b\u964d\u3002 \u4ee5\u4e0b\u662f Venngage \u7684\u56fe\u8868\uff0c\u4e0d\u96be\u53d1\u73b0\uff0c\u9664\u4e86 2019 \u5e74\u521d\u7684\u4e00\u6b21\u5c0f\u5e45\u8df3\u8dc3\uff0c\u8be5\u7f51\u7ad9\u7684\u6307\u5165\u57df\u540d\u589e\u957f\u8fd8\u662f\u76f8\u5bf9\u8fde\u7eed\u7684\u3002 \u8fd9\u79cd\u8df3\u8dc3\u53ef\u80fd\u662f\u81ea\u7136\u53d1\u751f\u7684\uff0c\u4e5f\u53ef\u80fd\u662f\u957f\u671f\u5916\u94fe\u5efa\u8bbe\u5de5\u4f5c\u7684\u4e00\u4e2a\u526f\u4ea7\u54c1\u3002 \u4e0d\u7ba1\u662f\u54ea\u79cd\u60c5\u51b5\uff0c\u5728\u6211\u4eec\u505a\u5b8c\u57fa\u672c\u7684\u7ade\u4e89\u5bf9\u624b\u5206\u6790\u540e\uff0c\u90fd\u503c\u5f97\u6839\u636e\u8fd9 \u4e24 \u7bc7\u6587\u7ae0 \u5bf9\u5176\u94fe\u63a5\u5206\u5e03\u5c55\u5f00\u66f4\u7ec6\u81f4\u7684\u7814\u7a76\u3002 Piktochart \u7684\u6307\u5165\u57df\u540d\u6570\u91cf\u53d8\u5316\u8f83 Venngage \u5c31\u663e\u5f97\u66f4\u52a0\u4e0d\u8fde\u7eed\u4e86\u3002 \u53bb\u5e74\u4e94\u516d\u6708\u4efd\uff0c\u4ed6\u4eec\u7684\u7f51\u7ad9\u7ecf\u5386\u4e86\u300e\u66f2\u68cd\u7403\u6746\u300f\u5f0f\u7684\u589e\u957f\uff0c\u8fd9\u53ef\u80fd\u56e0\u4e3a\u7f51\u7ad9\u4e0a\u7684\u67d0\u5219\u5185\u5bb9\u8868\u73b0\u4f18\u5f02\uff0c\u53ef\u80fd\u662f\u5230\u4e86\u5916\u94fe\u5efa\u8bbe\u5de5\u4f5c\u7684\u6536\u5272\u671f\u3002\u5f53\u7136\uff0c\u8fd9\u4e5f\u6709\u53ef\u80fd\u662f\u56e0\u4e3a\u906d\u53d7\u4e86 \u8d1f\u9762 SEO \u653b\u51fb\u3002 \u5982\u679c\u60f3\u77e5\u9053\u786e\u51ff\u7684\u7b54\u6848\uff0c\u6211\u4eec\u53ef\u4ee5\u67e5\u770b\u65b0\u589e\u6307\u5165\u57df\u540d\uff08New Referring Domains\uff09\u62a5\u544a\u3002 \u7f51\u7ad9\u5206\u6790 > \u6307\u5165\u57df\u540d > \u65b0\u589e > \u9009\u62e9\u67e5\u770b\u90a3\u6bb5\u65f6\u95f4\u7684\u6570\u636e (Site Explorer > Referring domains > New> use the data range to filter for that period\uff09 \u5982\u679c\u5927\u90e8\u5206\u7684\u57df\u540d\u770b\u8d77\u6765\u50cf\u662f\u5783\u573e\u7f51\u7ad9\uff0c\u5219\u76ee\u6807\u7f51\u7ad9\u7591\u4f3c \u906d\u53d7\u8d1f\u9762 SEO \u653b\u51fb \u3002\uff08\u63d0\u793a\uff1a\u4f60\u53ef\u4ee5\u901a\u8fc7\u67e5\u770b\u540c\u4e00\u65f6\u671f\u7684\u65b0\u589e\u5916\u94fe\u62a5\u544a\u8fdb\u884c\u786e\u8ba4\u3002\uff09 \u5982\u679c\u5927\u90e8\u5206\u7684\u94fe\u63a5\u90fd\u6307\u5411\u540c\u4e00\u7f51\u9875\uff0c\u5219\u5f88\u53ef\u80fd\u662f \u76ee\u6807\u7f51\u7ad9\u7684\u8fd9\u5219\u5185\u5bb9\u70ed\u5ea6\u8f83\u9ad8 \uff08\u5438\u5f15\u4e86\u5927\u91cf\u5916\u94fe\uff09\u3002\u5982\u679c\u8fd9\u4e2a\u6ce2\u5cf0\u662f\u8fd1\u671f\u51fa\u73b0\u7684\uff0c\u90a3\u4e48\u53ef\u4ee5\u901a\u8fc7\u7f51\u7ad9\u5206\u6790\uff08Site Explorer\uff09\u5de5\u5177\u4e2d\u7684\u6700\u4f73\u94fe\u63a5\u589e\u957f\uff08Best by Link Growth\uff09\u62a5\u544a\u8bc6\u522b\u51fa\u8fd9\u5219\u4f18\u8d28\u7684\u5185\u5bb9\u3002 \u5982\u679c\u4f60\u53d1\u73b0\u5927\u91cf\u5916\u94fe\u6e90\u81ea\u67d0\u4e00\u7c7b\u7279\u5b9a\u5185\u5bb9\u2014\u2014\u5982\uff1a\u5ba2\u5ea7\u535a\u5ba2\u3001\u8d44\u6e90\u9875\u9762\u7b49\uff0c\u90a3\u4e48\u5f88\u53ef\u80fd\u662f \u5916\u94fe\u5efa\u8bbe\u7684\u52aa\u529b \u5728\u67d0\u4e00\u65f6\u95f4\u70b9\u5f97\u5230\u4e86\u56de\u62a5\u3002 \u597d\u4e86\uff0c\u73b0\u5728\u6211\u4eec\u5c06\u6bcf\u4e2a\u7ade\u4e89\u5bf9\u624b\u7684\u76f8\u5173\u6570\u636e\u586b\u5165\u6a21\u677f\u8868\u683c\u3002 4. \u627e\u51fa\u7ade\u4e89\u5bf9\u624b\u7f51\u7ad9\u7684\u300e\u94c1\u7c89\u300f \u00b6 \u6240\u8c13\u7ade\u4e89\u5bf9\u624b\u7f51\u7ad9\u7684\u300e\u94c1\u7c89\u300f\uff0c\u5c31\u662f\u90a3\u4e9b\u5728\u591a\u79cd\u573a\u5408\u5411\u7ade\u4e89\u5bf9\u624b\u63d0\u4f9b\u5916\u94fe\u7684\u4eba\u513f~ \u6211\u4eec\u4e5f\u4f1a\u60f3\u8981\u548c\u4ed6\u4eec\u5efa\u7acb\u8054\u7cfb\uff0c\u56e0\u4e3a\u6211\u4eec\u548c\u7ade\u4e89\u5bf9\u624b\u8eab\u5904\u540c\u4e00\u884c\u4e1a\uff0c\u800c\u4e14\u8fd9\u4e9b\u4eba\u4e60\u60ef\u4e8e\u5411\u4ed6\u4eec\u4e2d\u610f\u7684\u7f51\u7ad9\u63d0\u4f9b\u5916\u94fe\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 Ahrefs \u7f51\u7ad9\u5206\u6790 \uff08Site Explorer\uff09\u7684\u6307\u5165\u57df\u540d\uff08Referring Domains\uff09\u62a5\u544a\u627e\u51fa\u8fd9\u4e9b\u4eba\u3002 \u7f51\u7ad9\u5206\u6790 > \u6307\u5165\u57df\u540d > \u6dfb\u52a0 \u201cDofollow\u201d \u8fc7\u6ee4\u6761\u4ef6 > \u6309\u6307\u5411\u7ade\u4e89\u5bf9\u624b\u7684\u94fe\u63a5\u6570\u91cf / Dofollow \u94fe\u63a5\u6570\u91cf\uff08\u4ece\u5927\u5230\u5c0f\uff09\u6392\u5e8f (Site Explorer > Referring Domains > add a \u201cDofollow\u201d filter > sort by \u201clinks to target / dofollow\u201d\uff09 \u8ba9\u6211\u4eec\u6d4f\u89c8\u4e00\u4e0b\u8fd9\u4e2a\u5217\u8868\uff0c\u627e\u51fa\u91cc\u9762\u7684\u884c\u4e1a\u535a\u5ba2\u3002 \u770b\uff0c\u627e\u5230\u4e00\u4e2a Canva \u7684\u94c1\u7c89\uff1a \u8fd9\u65f6\u6211\u4eec\u70b9\u51fb\u90a3\u4e2a\u5411\u4e0b\u7684\u7bad\u5934\u25bc\uff0c\u5c31\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u7ad9\u70b9\u7684\u8bb8\u591a\u535a\u6587\u5927\u91cf\u94fe\u5411 Canva\u3002 \u82b1 5 \u79d2\u949f\u89c2\u5bdf\u4f60\u5c31\u80fd\u77e5\u9053\uff0c\u8fd9\u5176\u5b9e\u662f\u4e00\u4f4d\u540d\u66f0 Elaine \u7684\u5973\u6027\u535a\u4e3b\u7684\u4e2a\u4eba\u535a\u5ba2\uff0c\u5979\u7edd\u5bf9\u662f\u6211\u4eec\u60f3\u8981\u5efa\u7acb\u8054\u7cfb\u5e76\u4e14\u4ecb\u7ecd\u4ea7\u54c1\u7684\u4eba\u3002 \u6211\u4eec\u9700\u8981\u4e3a\u6bcf\u4e2a\u7ade\u4e89\u5bf9\u624b\u627e\u51fa 5 \u4f4d\u300e\u94c1\u7c89\u300f\uff0c\u5e76\u628a\u4ed6\u4eec\u7684\u4fe1\u606f\u8bb0\u5165\u6a21\u677f\u8868\u683c\u3002 5. \u627e\u51fa\u5931\u6548\u9875\u9762 \u00b6 \u4f60\u542c\u8bf4\u8fc7\u8c1a\u8bed\u300e\u4e00\u4e2a\u4eba\u7684\u5783\u573e\uff0c\u662f\u53e6\u4e00\u4e2a\u4eba\u7684\u8d22\u5bcc\u300f\u5417\uff1f \u7f51\u7edc\u8bed\u5883\u4e0b\u4ea6\u662f\u5982\u6b64\u3002 \u6240\u4ee5\u73b0\u5728\u6211\u4eec\u8981\u53bb\u7ade\u4e89\u5bf9\u624b\u7684\u7f51\u7ad9\u627e\u4e00\u79cd\u7279\u522b\u7684\u300e\u5783\u573e\u300f\uff1a\u5931\u6548\u9875\u9762\u3002 \u8fd9\u91cc\u9700\u8981\u7528\u5230 Ahrefs \u7f51\u7ad9\u5206\u6790 \uff08Site Explorer\uff09\u5de5\u5177\u4e2d\u7684\u6700\u4f73\u94fe\u63a5\uff08Best by Links\uff09\u62a5\u544a\u3002 \u7f51\u7ad9\u5206\u6790 > \u8f93\u5165\u7ade\u4e89\u5bf9\u624b\u57df\u540d > \u6700\u4f73\u94fe\u63a5 > \u6dfb\u52a0\u300e404 \u672a\u627e\u5230\u300f\u8fc7\u6ee4\u6761\u4ef6 > \u6309\u6307\u5165\u57df\u540d\u6570\u91cf\uff08\u4ece\u591a\u5230\u5c11\uff09\u6392\u5e8f (Site Explorer > enter competitor\u2019s domain > Best by links > add a \u201c404 not found\u201d filter >sort by the Referring domains column (high to low)) \u5c0f\u63d0\u793a. \u8fd9\u91cc\u6211\u4eec\u67e5\u770b\u7684\u662f\u4e00\u4e2a\u5b50\u57df\u540d\u7684\u5185\u5bb9\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u53ea\u67e5\u770b\u90a3\u4e9b\u5931\u6548\u7684\u4fe1\u606f\u7c7b\u9875\u9762\u5566\u3002 \u8fd9\u91cc\u6211\u4eec\u67e5\u770b\u7684\u662f\u4e00\u4e2a\u5b50\u57df\u540d\u7684\u5185\u5bb9\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u53ea\u67e5\u770b\u90a3\u4e9b\u5931\u6548\u7684\u4fe1\u606f\u7c7b\u9875\u9762\u5566\u3002 \u5982\u679c\u6211\u4eec\u53ef\u4ee5\u627e\u51fa\u7ade\u4e89\u5bf9\u624b\u7f51\u7ad9\u4e0a\u7684\u5931\u6548\u9875\u9762\uff0c\u8fd9\u4e9b\u9875\u9762\u62e5\u6709\u4e00\u4e9b\u5916\u94fe\uff0c\u5e76\u4e14\u4e0e\u6211\u4eec\u7684\u4e1a\u52a1\u6709\u67d0\u4e9b\u5173\u8054\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u597d\u597d\u5229\u7528\u4e00\u4e0b\u4e86\uff1a \u5f04\u6e05\u695a\u8fd9\u4e9b\u9875\u9762\u5931\u6548\u524d\u5305\u542b\u7684\u5185\u5bb9\uff1b \u53d1\u5e03\u4e00\u4e9b\u7c7b\u4f3c\u7684\u5185\u5bb9\uff0c\u4f46\u662f\u8981\u505a\u5230\u66f4\u597d\uff1b \u627e\u51fa\u5931\u6548\u9875\u9762\u7684\u6240\u6709\u5916\u94fe\u3010\u53ef\u4ee5\u4f7f\u7528 Ahrefs \u7f51\u7ad9\u5206\u6790 \uff08Site Explorer\uff09\u4e2d\u7684 \u5916\u94fe \uff08Backlinks\uff09\u62a5\u544a\u3011\uff1b \u8054\u7cfb\u8fd9\u4e9b\u7f51\u7ad9\u6240\u6709\u8005\uff0c\u8981\u6c42\u4ed6\u4eec\u6362\u6389\u6b7b\u94fe\u63a5\uff0c\u8f6c\u800c\u6307\u5411\u6211\u4eec\u521b\u5efa\u7684\u65b0\u5185\u5bb9\u3002 \u73b0\u5728\uff0c\u6211\u4eec\u7684\u91cd\u70b9\u662f\u7ade\u4e89\u5206\u6790\uff0c\u4e0d\u662f\u94fe\u63a5\u5efa\u8bbe\uff0c\u6211\u4eec\u5148\u628a 5 \u4e2a\u7ade\u4e89\u5bf9\u624b\u7684\u5931\u6548\u9875\u9762\u52a0\u5165\u5206\u6790\u8868\u683c\u3002 \u5c0f\u7b14\u8bb0 \u63a5\u4e0b\u6765\u7684 06\u300107 \u548c 08 \u7ae0\u8282\u5c06\u7740\u91cd\u8ba8\u8bba\u81ea\u7136\u6d41\u91cf\u3002 6. \u7814\u7a76\u7ade\u4e89\u5bf9\u624b\u7f51\u7ad9\uff08\u81ea\u7136\u641c\u7d22\uff09\u6d41\u91cf\u5728\u5404\u56fd\u7684\u5206\u5e03 \u00b6 \u77e5\u9053\u4e86\u7ade\u4e89\u5bf9\u624b\u7f51\u7ad9\u6d41\u91cf\u7684\u56fd\u5bb6\u5206\u5e03\uff0c\u4e5f\u5c31\u77e5\u9053\u4e86\u884c\u4e1a\u7684\u673a\u4f1a\u6240\u5728\u3002 \u8fd9\u91cc\uff0c\u6211\u4eec\u9700\u8981\u7528\u5230 Ahrefs \u7684 \u7f51\u7ad9\u5206\u6790 \uff08Site Explorer\uff09\u5de5\u5177\u3002 \u7f51\u7ad9\u5206\u6790 > \u8f93\u5165\u7ade\u4e89\u5bf9\u624b\u57df\u540d > \u6982\u89c8 > \u81ea\u7136\u641c\u7d22\u9009\u9879\u5361 (Site Explorer > enter competitor\u2019s domain > Overview > Organic search tab) \u6211\u4eec\u628a\u6392\u540d\u524d 5 \u7684\u56fd\u5bb6\u4ee5\u53ca\u4ed6\u4eec\u7684\u6d41\u91cf\u4efd\u989d\u586b\u5165\u5206\u6790\u8868\u683c\u3002 \u63a5\u7740\u5bf9\u5176\u4ed6 4 \u4e2a\u7ade\u4e89\u5bf9\u624b\u7f51\u7ad9\u4e5f\u6267\u884c\u540c\u6837\u7684\u64cd\u4f5c\uff1a \u770b\u8d77\u6765\u7f8e\u56fd\u662f\u8be5\u884c\u4e1a\u6d41\u91cf\u673a\u4f1a\u6700\u5927\u7684\u5e02\u573a\uff0c\u6211\u4eec\u7684\u7ade\u4e89\u5bf9\u624b\u5e73\u5747\u6709 ~31% \u7684\u6d41\u91cf\u6765\u81ea\u7f8e\u56fd\u3002 \u5176\u4ed6\u8bf4\u82f1\u8bed\u7684\u56fd\u5bb6\u2014\u2014\u5982\u82f1\u56fd\u548c\u52a0\u62ff\u5927\u2014\u2014\u4e5f\u6709\u4e00\u4e9b\u673a\u4f1a\u3002 \u4e8e\u662f\u6211\u4eec\u73b0\u5728\u5c31\u77e5\u9053\u4e86\uff0c\u5e94\u8be5\u628a\u5185\u5bb9\u521b\u4f5c\u7684\u91cd\u5fc3\u653e\u5728\u8fd9\u4e9b\u56fd\u5bb6\uff0c\u4ed6\u4eec\u540c\u65f6\u4e5f\u662f\u641c\u7d22\u91cf\u6700\u5927\u7684\u533a\u57df\u3002\u8fd9\u4e0d\u8db3\u4e3a\u5947\u3002 \u6b64\u5916\uff0c\u62c9\u7f8e\u548c\u4e9a\u6d32\u5e02\u573a\u4f3c\u4e4e\u4e5f\u6709\u4e00\u4e9b\u6d41\u91cf\u6f5c\u529b\uff0c\u6211\u4eec\u4e0d\u7531\u5730\u60f3\uff1a\u6216\u8bb8\u6211\u4eec\u5e94\u8be5\u628a\u8fd9\u4e2a\u5047\u60f3\uff08\u4ea7\u54c1\uff09\u7684\u7740\u9646\u9875\u7ffb\u8bd1\u6210\u897f\u73ed\u7259\u8bed\uff0c\u5370\u5ea6\u8bed\u6216\u8005\u5370\u5c3c\u8bed\uff1f \u6211\u4eec\u751a\u81f3\u5e94\u8be5\u53d1\u5e03\u4e00\u4e2a\u591a\u8bed\u79cd\u7684\u535a\u5ba2\u6765\u6700\u5927\u5316\u6765\u81ea\u8fd9\u4e9b\u56fd\u5bb6\u7684\u6d41\u91cf\u3002 \u5728 Ahrefs \u6211\u4eec\u5c31\u662f\u8fd9\u4e48\u505a\u7684\uff0c\u6211\u4eec\u73b0\u5728\u5f00\u8bbe\u4e86 \u897f\u8bed \u548c \u4e2d\u6587\u535a\u5ba2 \u3002 \u6211\u4eec\u6709\u8bb8\u591a\u7740\u9646\u9875\u4e5f\u652f\u6301\u4ee5\u591a\u8bed\u8a00\u663e\u793a\u3002 \u4e13\u4e1a\u63d0\u793a \u5355\u770b\u81ea\u7136\u641c\u7d22\u6d41\u91cf\u7684\u6570\u5b57\u6709\u65f6\u53ef\u80fd\u4f1a\u53d7\u5230\u8bef\u5bfc\uff0c\u56e0\u4e3a\u6d41\u91cf\u591a\u5c11\u5e76\u4e0d\u603b\u80fd\u4ee3\u8868\u6d41\u91cf\u4ef7\u503c\u3002 \u6bd4\u5982\uff0cVismeI \u4ece\u82f1\u56fd\u548c\u58a8\u897f\u54e5\u83b7\u5f97\u7684\u6d41\u91cf\u5dee\u4e0d\u591a\u3002 \u4f46\u662f\u628a\u8fd9\u4e24\u4e2a\u56fd\u5bb6\uff08\u82f1\u56fd vs. \u58a8\u897f\u54e5\uff09\u7684\u6d41\u91cf\u4ef7\u503c\u4e00\u6bd4\u2026\u2026 \u82f1\u56fd\u7684\u6d41\u91cf\u4ef7\u503c\u6bd4\u58a8\u897f\u54e5\u9ad8 7 \u500d\u591a\uff01 \u6240\u4ee5\u4f18\u5148\u63a8\u8fdb\u82f1\u56fd\u7684\u6d41\u91cf\u589e\u957f\u6bd4\u8f83\u8bf4\u7684\u901a\u3002 \u70b9\u51fb \u8fd9\u91cc \u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u6211\u4eec\u8ba1\u7b97\u6d41\u91cf\u4ef7\u503c\u7684\u65b9\u6cd5\u3002 7. \u76d1\u89c6\u7ade\u4e89\u5bf9\u624b\u7f51\u7ad9\u7684\u81ea\u7136\u641c\u7d22\u5173\u952e\u8bcd \u00b6 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053\u54ea\u4e9b\u5173\u952e\u8bcd\u6b63\u5728\u4e3a\u7ade\u4e89\u5bf9\u624b\u7684\u7f51\u7ad9\u8f93\u9001\u6d41\u91cf\u3002 \u5bf9\u6bcf\u4e2a\u7ade\u4e89\u5bf9\u624b\u7684\u57df\u540d\u751f\u6210 \u81ea\u7136\u641c\u7d22\u5173\u952e\u8bcd\uff08Organic Keywords\uff09 \u62a5\u544a\u5373\u53ef\u3002 \u7f51\u7ad9\u5206\u6790 > \u8f93\u5165\u7ade\u4e89\u5bf9\u624b\u57df\u540d > \u81ea\u7136\u641c\u7d22 > \u81ea\u7136\u641c\u7d22\u5173\u952e\u8bcd (Site Explorer > enter competitor\u2019s domain > Organic search > Organic keywords) \u4ece\u4e0a\u56fe\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u76ee\u524d visme.co \u5728\u7f8e\u56fd\u4e4b\u4e8e 133,667 \u4e2a\u5173\u952e\u8bcd\u6709\u6392\u540d\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c \u81ea\u7136\u641c\u7d22\u5173\u952e\u8bcd \u62a5\u544a\u5c55\u793a\u7684\u662f\u81ea\u7136\u641c\u7d22\u6d41\u91cf\u6700\u5927\u7684\u56fd\u5bb6\u7684\u5173\u952e\u8bcd\u6392\u540d\u3002\u8fd9\u6ca1\u95ee\u9898\uff0c\u4f46\u662f\u5982\u679c\u4f60\u60f3\u8981\u770b\u53e6\u4e00\u4e2a\u56fd\u5bb6\u7684\u5173\u952e\u8bcd\u6d41\u91cf\u6570\u636e\uff0c\u53ef\u4ee5\u70b9\u51fb\u300e\u66f4\u591a\u300f\uff08More\u25bc\uff09\u6309\u94ae\uff0c\u5e76\u4ece\u6211\u4eec \u6570\u636e\u5e93 \u4e2d\u7684 150 \u591a\u4e2a\u56fd\u5bb6\u4e2d\u8fdb\u884c\u9009\u62e9\u3002 \u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u6311\u51fa\u4e00\u4e9b\u300e\u80a5\u6c83\u300f\u7684\u5173\u952e\u8bcd\u8fdb\u884c\u6807\u7684\u4e86\u3002 \u8bf8\u5982 \u201cinfographic maker\u201d, \u201cinfographic creator\u201d \u7b49\u5173\u952e\u8bcd\u4e00\u4e0b\u5c31\u6620\u5165\u4e86\u773c\u5e18\u3002\u5f53\u7136\uff0c\u5176\u4e2d\u8fd8\u6709\u5f88\u591a\u65e0\u5173\u7684\u5173\u952e\u8bcd\u5728\u6405\u6d51\u6c34\u3002 \u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u300e\u6392\u9664\u300f\uff08exclude\uff09\u529f\u80fd\uff0c\u8fc7\u6ee4\u6389\u6240\u6709\u7684\u54c1\u724c\u8bcd\u3002 \u540c\u65f6\u6211\u8fd8\u4f1a\u8fc7\u6ee4\u51fa\u7ade\u4e89\u5bf9\u624b\u6392\u540d\u8fdb\u5165 SERP \u7b2c\u4e00\u9875\uff081~10 \u540d\uff09\u7684\u5173\u952e\u8bcd\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u53ea\u770b\u5230\u6700\u6700\u76f8\u5173\u7684\u5173\u952e\u8bcd\u3002 \u8fd9\u91cc\u6211\u4eec\u4e0d\u4f1a\u4ecb\u7ecd\u8fc7\u4e8e\u590d\u6742\u7684\u5185\u5bb9\u3002\u53ea\u662f\u5c06\u6700\u76f8\u5173\u7684\u3001\u975e\u54c1\u724c\u540d\u7684\u3001\u8f93\u9001\u6d41\u91cf\u6700\u591a\u7684\u524d 5 \u4e2a\u5173\u952e\u8bcd\u548c\u5b83\u4eec\u7684\u6708\u5ea6\u641c\u7d22\u91cf\u5206\u522b\u8bb0\u5f55\u5728\u4e86\u5404\u4e2a\u7ade\u4e89\u5bf9\u624b\u7684\u540d\u4e0b\uff1a \u5176\u4e2d\u7684\u4e00\u4e9b\u5173\u952e\u8bcd\u4e0e\u6211\u4eec\u7f51\u7ad9\u7684\u4e3b\u9875\u975e\u5e38\u5339\u914d\uff0c\u800c\u53e6\u5916\u4e00\u4e9b\u5219\u66f4\u9002\u5408\u535a\u6587\u3010\u5982\uff1a\u300e\u4fe1\u606f\u56fe\u8868\u662f\u4ec0\u4e48\uff1f\u300f\uff08what is an infographic?\uff09\u3011\u3002 \u5c0f\u63d0\u793a. \u5982\u679c\u4f60\u4e00\u8def\u770b\u5230\u8fd9\u91cc\uff0c\u53ea\u662f\u60f3\u4e3a\u7f51\u7ad9\u4e3b\u9875\u627e\u51fa\u4e00\u4e9b\u5173\u952e\u8bcd\u7684\u63d0\u793a\uff0c\u90a3\u4e48\u53ef\u4ee5\u5728\u7f51\u7ad9\u5206\u6790\uff08Site Explorer\uff09\u5de5\u5177\u4e2d\u5c06\u57df\u540d\uff08\u201d .domain/ \u201d\uff09\u6a21\u5f0f\u66ff\u6362\u4e3a\u94fe\u63a5\uff08\u201c URL \u201d\uff09\u6a21\u5f0f\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u4f60\u5c31\u53ef\u4ee5\u53ea\u770b\u4e0e\u7f51\u7ad9\u4e3b\u9875\u76f8\u5173\u7684\u5173\u952e\u8bcd\u5efa\u8bae\u4e86\u3002\u4f46\u662f\u4f9d\u7136\u522b\u5fd8\u4e86\u628a\u54c1\u724c\u8bcd\u4ece\u62a5\u544a\u4e2d\u8fc7\u6ee4\u6389\u3002 \u5982\u679c\u4f60\u4e00\u8def\u770b\u5230\u8fd9\u91cc\uff0c\u53ea\u662f\u60f3\u4e3a\u7f51\u7ad9\u4e3b\u9875\u627e\u51fa\u4e00\u4e9b\u5173\u952e\u8bcd\u7684\u63d0\u793a\uff0c\u90a3\u4e48\u53ef\u4ee5\u5728\u7f51\u7ad9\u5206\u6790\uff08Site Explorer\uff09\u5de5\u5177\u4e2d\u5c06\u57df\u540d\uff08\u201d .domain/ \u201d\uff09\u6a21\u5f0f\u66ff\u6362\u4e3a\u94fe\u63a5\uff08\u201c\u201d\uff09\u6a21\u5f0f\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u4f60\u5c31\u53ef\u4ee5\u53ea\u770b\u4e0e\u7f51\u7ad9\u4e3b\u9875\u76f8\u5173\u7684\u5173\u952e\u8bcd\u5efa\u8bae\u4e86\u3002\u4f46\u662f\u4f9d\u7136\u522b\u5fd8\u4e86\u628a\u54c1\u724c\u8bcd\u4ece\u62a5\u544a\u4e2d\u8fc7\u6ee4\u6389\u3002 \u4e13\u4e1a\u63d0\u793a \u6211\u4eec\u8bb0\u5f55\u5728\u6848\u7684\u5173\u952e\u8bcd\u4e2d\uff0c\u6709\u4e00\u4e9b\u7684 \u5173\u952e\u8bcd\uff08\u7684\u6392\u540d\uff09\u96be\u5ea6 \uff08Keyword Difficulty\uff09\u9887\u9ad8\u3002\u8fd9\u610f\u5473\u7740\u5982\u679c\u6ca1\u6709\u5145\u5206\u7684\u5916\u94fe\u652f\u6301\uff0c\u63d0\u5347\u8fd9\u4e9b\u5173\u952e\u8bcd\u7684\u6392\u540d\u4f1a\u975e\u5e38\u56f0\u96be\u3002 \u6bd4\u5982\uff0c\u201cinfographic maker\u201d \u7684\u5173\u952e\u8bcd\u96be\u5ea6\u9ad8\u8fbe 73\u2026\u2026 \u9700\u8981\u6765\u81ea\u5927\u7ea6 ~235 \u4e2a\u6307\u5165\u57df\u540d\u7684\u5916\u94fe\u624d\u80fd\u6324\u8fdb SERP \u524d 10\u3002 \u63a8\u8350\u9605\u8bfb \uff1a \u6211\u4eec\u5982\u4f55\u8ba1\u7b97\u5173\u952e\u8bcd\u96be\u5ea6 \u3002 \u6211\u4eec\u6682\u65f6\u8fd8\u4e0d\u592a\u5173\u5fc3\u8fd9\u9879\u6307\u6807\uff0c\u6bd5\u7adf\u6211\u4eec\u8981\u627e\u5bfb\u7684\u6b63\u662f\u8fd9\u4e9b\u300e\u7ec8\u6781\u76ee\u6807\u300f\u5173\u952e\u8bcd\u3002 \u5982\u679c\u4f60\u503e\u5411\u4e8e\u627e\u51fa\u90a3\u4e9b\u6392\u540d\u6709\u673a\u4f1a\u5728\u4e2d\u77ed\u671f\u6324\u8fdb SERP \u524d 10 \u7684\u5173\u952e\u8bcd\uff0c\u53ef\u4ee5\u628a\u90a3\u4e9b\u96be\u5ea6\u8f83\u4f4e\u7684\u5173\u952e\u8bcd\u8fc7\u6ee4\u51fa\u6765\u3002 8. \u76d1\u89c6\u7ade\u4e89\u5bf9\u624b\u7684\u7cbe\u9009\u6458\u8981 \u00b6 \u5728\u5206\u6790\u7ade\u4e89\u5bf9\u624b\u81ea\u7136\u641c\u7d22\u6d41\u91cf\u7684\u65f6\u5019\uff0c\u8fd8\u6709\u4e00\u70b9\u9700\u8981\u6ce8\u610f\uff1a \u6392\u540d\u5173\u952e\u8bcd\u7684 SERP \u7279\u6027\u3002 \u6839\u636e \u6211\u4eec\u7684\u7814\u7a76 \uff0c~12% \u7684\u641c\u7d22\u4f1a\u89e6\u53d1\u300e\u7cbe\u9009\u6458\u8981\u300f\uff08Featured Snippet\uff09\u7279\u6027\u3002 \u7cbe\u9009\u6458\u8981\u5360\u636e\u4e86 SERP \u7b2c\u4e00\u9875 ~9% \u7684\u70b9\u51fb\u91cf\u3002 \u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5148\u5c06\u91cd\u70b9\u653e\u5728\u7ade\u4e89\u5bf9\u624b\u7684\u7cbe\u9009\u6458\u8981\u4e0a\u3002 \u9996\u5148\uff0c\u6211\u4eec\u8981\u77e5\u9053\u7ade\u4e89\u5bf9\u624b\u62e5\u6709\u54ea\u4e9b\u7cbe\u9009\u6458\u8981\uff0c\u5bf9\u5e94\u7684\u641c\u7d22\u77ed\u8bed\u662f\u4ec0\u4e48\u3002\u8fd9\u65f6\u9700\u8981\u7528\u5230 Ahrefs \u7684 \u7f51\u7ad9\u5206\u6790 \uff08Site Explorer\uff09\u5de5\u5177\u3002 \u7f51\u7ad9\u5206\u6790 > \u8f93\u5165\u7ade\u4e89\u5bf9\u624b\u57df\u540d > \u81ea\u7136\u641c\u7d22 > \u81ea\u7136\u641c\u7d22\u5173\u952e\u8bcd > SERP \u7279\u6027\u8fc7\u6ee4 > \u7cbe\u9009\u6458\u8981 > \u4ec5\u94fe\u5411\u76ee\u6807 (Site Explorer > enter competitor\u2019s domain > Organic search > Organic keywords > SERP features filter > Featured snippets > Only linking to target) Piktochart \u73b0\u5728\u7f8e\u56fd\u62e5\u6709 87 \u5219\u7cbe\u9009\u6458\u8981\uff0c\u4e3a\u7f51\u7ad9\u8f93\u9001\u4e86\u4e0d\u5c11\u6d41\u91cf\u3002 Visme \u62e5\u6709\u5dee\u4e0d\u591a 216 \u5219\u7cbe\u9009\u6458\u8981\u3002 \u6211\u4eec\u628a\u8fd9\u4e9b\u6570\u5b57\u5206\u522b\u586b\u5165\u5bf9\u5e94\u7684\u7ade\u4e89\u5bf9\u624b\u540d\u4e0b\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u5982\u679c\u7ade\u4e89\u5bf9\u624b\u80fd\u83b7\u5f97\u5f88\u591a\u7cbe\u9009\u6458\u8981\uff0c\u90a3\u4e48\u6211\u4eec\u4e5f\u4f1a\u6709\u540c\u6837\u7684\u673a\u4f1a\u3002 \u5229\u7528\u8be5\u7279\u6027\u83b7\u53d6\u81ea\u7136\u641c\u7d22\u6d41\u91cf\u751a\u81f3\u66f4\u52a0\u7b80\u5355\uff0c\u56e0\u4e3a\u5e76\u4e0d\u603b\u662f\u6392\u540d\u7b2c 1 \u7684\u7ed3\u679c\u9875\u9762\u62e5\u6709\u7cbe\u9009\u6458\u8981\u7248\u4f4d\u3002 \u4e8b\u5b9e\u4e0a\uff0c52% \u7684\u7cbe\u9009\u6458\u8981\u6765\u81ea\u6392\u540d 2~5 \u7684\u7ed3\u679c\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u5373\u4f7f\u67d0\u5173\u952e\u8bcd\u7684 SERP \u7ade\u4e89\u76f8\u5f53\u6fc0\u70c8\uff0c\u53ea\u8981\u6211\u4eec\u6324\u8fdb\u524d 5 \u540d\uff0c\u4f9d\u7136\u6709\u673a\u4f1a\u83b7\u5f97\u7cbe\u9009\u6458\u8981\u7248\u4f4d\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5373\u4f7f\u67d0\u5173\u952e\u8bcd\u7684 SERP \u7ade\u4e89\u76f8\u5f53\u6fc0\u70c8\uff0c\u53ea\u8981\u6211\u4eec\u6324\u8fdb\u524d 5 \u540d\uff0c\u4f9d\u7136\u6709\u673a\u4f1a\u83b7\u5f97\u7cbe\u9009\u6458\u8981\u7248\u4f4d\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5373\u4f7f\u67d0\u5173\u952e\u8bcd\u7684 SERP \u7ade\u4e89\u76f8\u5f53\u6fc0\u70c8\uff0c\u53ea\u8981\u6211\u4eec\u6324\u8fdb\u524d 5 \u540d\uff0c\u4f9d\u7136\u6709\u673a\u4f1a\u83b7\u5f97\u7cbe\u9009\u6458\u8981\u7248\u4f4d\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u5373\u4f7f\u67d0\u5173\u952e\u8bcd\u7684 SERP \u7ade\u4e89\u76f8\u5f53\u6fc0\u70c8\uff0c\u53ea\u8981\u6211\u4eec\u6324\u8fdb\u524d 5 \u540d\uff0c\u4f9d\u7136\u6709\u673a\u4f1a\u83b7\u5f97\u7cbe\u9009\u6458\u8981\u7248\u4f4d\u3002 \u63a8\u8350\u9605\u8bfb \uff1a \u5982\u4f55\u5bfb\u627e\u7cbe\u9009\u6458\u8981\uff08\u5f97\u5230\u66f4\u591a\u7684\u641c\u7d22\u6d41\u91cf\uff09 \u5c0f\u7b14\u8bb0 \u6211\u4eec\u5c06\u5728\u63a5\u4e0b\u6765\u7684 09\u300110 \u548c 11 \u7ae0\u8282\u6df1\u5165\u7814\u7a76\u7ade\u4e89\u5bf9\u624b\u7684\u5185\u5bb9\u3002 9. \u5185\u5bb9\u5dee\u8ddd \u00b6 \u5185\u5bb9\u5dee\u8ddd\u6307\u7ade\u4e89\u5bf9\u624b\u7684\u7f51\u7ad9\u300e\u6709\u6392\u540d\u300f\uff0c\u800c\u4f60\u7684\u7f51\u7ad9\u300e\u6ca1\u6709\u6392\u540d\u300f\u7684\u5173\u952e\u8bcd\u3002 \u65e0\u9700\u8d58\u8ff0\uff0c\u4f60\u9700\u8981\u586b\u8865\u8fd9\u4e00\u5dee\u8ddd\u3002 \u9996\u5148\u53ef\u4ee5\u4f7f\u7528 Ahrefs \u7684 \u5185\u5bb9\u5dee\u8ddd\u5206\u6790 \uff08Content Gap\uff09\u5de5\u5177\u627e\u51fa\u8fd9\u4e9b\u5dee\u8ddd\u3002 \u7f51\u7ad9\u5206\u6790 > \u8f93\u5165\u4f60\u7684\u57df\u540d > \u5185\u5bb9\u5dee\u8ddd\u5206\u6790 (Site Explorer > enter your domain > Content Gap) \u4f60\u4f1a\u53d1\u73b0\u6211\u4eec\u7684\u57df\u540d\u5df2\u7ecf\u51fa\u73b0\u5728 \u4f46\u662f\u4ee5\u4e0b\u76ee\u6807\u672a\u53d6\u5f97\u76f8\u5173\u5173\u952e\u8bcd\u7684\u6392\u540d\uff08But the following target doesn\u2019t rank for\uff09\u5b57\u6bb5\u4e86\u3002 \u73b0\u5728\u6211\u4eec\u9700\u8981\u5c06\u7ade\u4e89\u5bf9\u624b\u7684\u57df\u540d\u586b\u5165\u5176\u4ed6\u5b57\u6bb5\u3002 \u8fd9\u91cc\u6211\u4eec\u8bbe\u7f6e\u6210\u5c55\u793a\u4ee5\u4e0b\u6240\u6709 \u76ee\u6807\u90fd\u6709\u6392\u540d\u7684\u5173\u952e\u8bcd \uff08Show keywords that all of the below targets rank for\uff09,\u5e76\u52fe\u9009\u81f3\u5c11\u6709\u4e00\u4e2a\u76ee\u6807\u7684\u5173\u952e\u8bcd\u6392\u540d\u8fdb\u5165\u524d 10\uff08at least one of the targets should rank in the top 10\uff09\u9009\u9879\u3002 \u4ee5\u4e0a\u5c31\u662f\u62a5\u544a\u8fd4\u56de\u7684\u7ed3\u679c\uff0c\u4f60\u4f1a\u53d1\u73b0\u5176\u4e2d\u6709\u4e0d\u5c11\u9ad8\u5ea6\u76f8\u5173\u7684\u5173\u952e\u8bcd\u3002 \u5c0f\u63d0\u793a. \u5982\u679c\u4f60\u6ca1\u6709\u53d1\u73b0\u4efb\u4f55\u76f8\u5173\u7684\u5173\u952e\u8bcd\uff0c\u53ef\u4ee5\u7a0d\u5fae\u653e\u5bbd\u8bbe\u7f6e\uff0c\u9009\u62e9\u76ee\u6807\u4e2d\u7684\u4e24\u4e2a\u3001\u4e09\u4e2a\u6216\u8005\u56db\u4e2a\u90fd\u6709\u6392\u540d\u7684\u5173\u952e\u8bcd\uff0c\u800c\u4e0d\u8981\u9009\u62e9\u6240\u6709\u76ee\u6807\u90fd\u6709\u6392\u540d\u7684\u5173\u952e\u8bcd\u3002 \u5982\u679c\u4f60\u6ca1\u6709\u53d1\u73b0\u4efb\u4f55\u76f8\u5173\u7684\u5173\u952e\u8bcd\uff0c\u53ef\u4ee5\u7a0d\u5fae\u653e\u5bbd\u8bbe\u7f6e\uff0c\u9009\u62e9\u76ee\u6807\u4e2d\u7684\u4e24\u4e2a\u3001\u4e09\u4e2a\u6216\u8005\u56db\u4e2a\u90fd\u6709\u6392\u540d\u7684\u5173\u952e\u8bcd\uff0c\u800c\u4e0d\u8981\u9009\u62e9\u6240\u6709\u76ee\u6807\u90fd\u6709\u6392\u540d\u7684\u5173\u952e\u8bcd\u3002 \u6211\u4eec\u8d44\u6e90\u6709\u9650\uff0c\u6807\u7684\u6240\u6709\u8fd9\u4e9b\u5173\u952e\u8bcd\u53bb\u505a\u6392\u540d\u663e\u7136\u662f\u4e0d\u53ef\u80fd\u7684\u3002 \u4e8e\u662f\u6211\u4eec\u9700\u8981\u8bbe\u7f6e\u4e00\u4e9b\u8fc7\u6ee4\u6761\u4ef6\uff0c\u5c06\u641c\u7d22\u91cf\u8f83\u5927\u3001\u6392\u540d\u96be\u5ea6\u5c5e\u4e8e\u4e2d\u4f4e\u6c34\u5e73\u7684\u5173\u952e\u8bcd\u673a\u4f1a\u627e\u51fa\u6765\u3002 \u8f83\u4f4e\u7684\u96be\u5ea6\u5f97\u5206\u610f\u5473\u7740\u53d6\u5f97\u8fd9\u4e9b\u5173\u952e\u8bcd\u7684\u6392\u540d\u76f8\u5bf9\u5bb9\u6613\uff0c\u800c\u53ef\u89c2\u7684\u641c\u7d22\u91cf\u610f\u5473\u7740\u53d6\u5f97\u8fd9\u4e9b\u6392\u540d\u53ef\u4ee5\u6709\u6548\u63d0\u632f\u7f51\u7ad9\u7684\u81ea\u7136\u641c\u7d22\u6d41\u91cf\u3002 \u53ef\u662f\uff0c\u5176\u4e2d\u6709\u4e9b\u5173\u952e\u8bcd\u5df2\u7ecf\u51fa\u73b0\u5728\u4e86\u6211\u4eec\u4e4b\u524d\u7684\u5206\u6790\u7ed3\u679c\u4e2d\u3002 \u6240\u4ee5\u8fd9\u91cc\u6211\u4eec\u53ea\u5c06\u6700\u76f8\u5173\u7684\u65b0\u5173\u952e\u8bcd\u6dfb\u52a0\u8fdb\u5206\u6790\u8868\u683c\u3002 10. \u627e\u51fa\u7ade\u4e89\u5bf9\u624b\u7684\u70ed\u95e8\u5185\u5bb9 \u00b6 \u5173\u952e\u8bcd\u8c03\u7814 \u4f9d\u7136\u662f SEO \u6700\u91cd\u8981\u7684\u5de5\u4f5c\u4e4b\u4e00\uff0c\u4f46\u662f\u73b0\u5728\uff0c\u8c37\u6b4c\u5bf9\u641c\u7d22\u610f\u56fe\u7684\u7406\u89e3\u53ef\u4ee5\u8bf4\u6bd4\u4ee5\u5f80\u4efb\u4f55\u65f6\u5019\u90fd\u597d\u3002 \u6b63\u56e0\u5982\u6b64\uff0c\u67d0\u4e9b\u7f51\u9875\u624d\u53ef\u4ee5\u8f7b\u6613\u5730\u53d6\u5f97\u6210\u767e\u4e0a\u5343\u4e2a\u957f\u5c3e\u5173\u952e\u8bcd\u7684\u6392\u540d\u3002 \u627e\u51fa\u7ade\u4e89\u5bf9\u624b\u7684\u70ed\u95e8\u9875\u9762\uff0c\u6211\u4eec\u5c31\u80fd\u5f04\u6e05\u695a\u4ed6\u4eec\u7684\u54ea\u4e9b\u6587\u7ae0\uff1a \u53d6\u5f97\u4e86\u5927\u91cf\u5173\u952e\u8bcd\u7684\u6392\u540d\uff1b \u652b\u53d6\u4e86\u5927\u91cf\u7684\u6d41\u91cf\u3002 \u63a5\u7740\u6211\u4eec\u5c31\u53ef\u4ee5\u56f4\u7ed5\u8fd9\u4e9b\u5305\u7f57\u4e07\u8c61\u7684\u8bdd\u9898\u64b0\u5199\u5185\u5bb9\uff0c\u8d5a\u53d6\u4e00\u4e9b \u957f\u5c3e\u5173\u952e\u8bcd \u6d41\u91cf\u3002 \u8fd9\u65f6\uff0c\u4f60\u9700\u8981\u4f7f\u7528 Ahrefs \u7f51\u7ad9\u5206\u6790 \uff08Site Explorer\uff09\u4e2d\u7684\u70ed\u95e8\u9875\u9762\uff08Top Pages\uff09\u62a5\u544a\u3002 \u6ce8\u610f\uff0c\u8fd9\u91cc\u6211\u4eec\u66f4\u611f\u5174\u8da3\u7684\u662f\u627e\u51fa\u535a\u5ba2\u6587\u7ae0\uff0c\u56e0\u6b64\u5f85\u5206\u6790\u7684\u5e94\u8be5\u662f\u7ade\u4e89\u5bf9\u624b\u7f51\u7ad9\u7684\u535a\u5ba2\u76ee\u5f55\u94fe\u63a5/\u5b50\u57df\u540d\uff0c\u800c\u975e\u6839\u57df\u540d\u3002 \u7f51\u7ad9\u5206\u6790 > \u8f93\u5165\u7ade\u4e89\u5bf9\u624b\u7684\u57df\u540d > \u9009\u62e9\u300e\u524d\u7f00\u300f\u6a21\u5f0f > \u70ed\u95e8\u9875\u9762 (Site Explorer > enter competitor\u2019s domain > select \u201cprefix\u201d mode > Top pages) \u4e13\u4e1a\u63d0\u793a \u4e0d\u77e5\u9053\u7ade\u4e89\u5bf9\u624b\u7684\u535a\u5ba2\u5730\u5740\uff1f \u53ef\u4ee5\u5728\u7f51\u7ad9\u5206\u6790\uff08Site Explorer\uff09\u5de5\u5177\u7684 \u70ed\u95e8\u5b50\u76ee\u5f55\uff08Top subfolders\uff09 \u62a5\u544a\u4e2d\u5bfb\u627e\u535a\u5ba2\u8def\u5f84\u3002 \u5982\u679c\u627e\u4e0d\u5230\uff0c\u53ef\u4ee5\u5207\u6362\u5230 \u70ed\u95e8\u5b50\u57df\u540d\uff08Top subdomains\uff09 \u62a5\u544a\u3002\u6709\u4e9b\u7f51\u7ad9\u5c06\u535a\u5ba2\u8bbe\u7acb\u5728\u5b50\u57df\u540d\u4e0a\u3002 \u65e0\u8bba\u662f\u5728\u5b50\u76ee\u5f55\u8fd8\u662f\u5b50\u57df\u540d\uff0c\u535a\u5ba2\u5360\u636e\u7684\u7f51\u7ad9\u6d41\u91cf\u4efd\u989d\uff08%\uff09\u90fd\u5e94\u8be5\u5728\u4e24\u4f4d\u6570\u3002\u5982\u679c\u4e0d\u8db3\u4e24\u4f4d\u6570\uff0c\u5f88\u53ef\u80fd\u7ade\u4e89\u5bf9\u624b\u7684\u535a\u6587\u5e76\u4e0d\u662f\u6309\u7167\u5b50\u76ee\u5f55/\u5b50\u57df\u540d\u7684\u94fe\u63a5\u7ed3\u6784\u653e\u7f6e\u7684\u3002 \u8fd9\u65f6\uff0c\u4f60\u8fd8\u662f\u5e94\u8be5\u9009\u7528\u57df\u540d\u5206\u6790\u3002 \u5728\u62a5\u544a\u4e2d\uff0c\u6211\u4eec\u6ce8\u610f\u5230\u81ea\u7136\u641c\u7d22\u6d41\u91cf\u6700\u5927\u7684\u9875\u9762\u5f80\u5f80\u6709\u7740\u5927\u91cf\u7684\u6307\u5165\u57df\u540d\u3002\u8fd9\u4e0d\u8db3\u4e3a\u5947\uff0c\u6bd5\u7adf\u5916\u94fe\u662f\u91cd\u8981\u7684\u6392\u540d\u5f71\u54cd\u56e0\u7d20\u3002 \u6211\u4eec\u6765\u6d4f\u89c8\u4e00\u4e0b\u6bcf\u4e2a\u7ade\u4e89\u5bf9\u624b\u7684\u62a5\u544a\uff0c\u7279\u522b\u6ce8\u610f\u57df\u540d\u8bc4\u7ea7\u90a3\u4e00\u5217\u3002 \u6211\u4eec\u8981\u627e\u7684\u662f\u90a3\u4e9b\u6d41\u91cf\u5f88\u5927\u4f46\u662f\u6307\u5165\u57df\u540d\u6570\u91cf\u8f83\u5c11\u7684\u9875\u9762\uff0c\u56e0\u4e3a\u8981\u4e0e\u8fd9\u4e9b\u9875\u9762\u7ade\u4e89\u5173\u952e\u8bcd\u6392\u540d\u76f8\u5bf9\u7b80\u5355\u3002 \u6211\u4eec\u4ece\u6bcf\u4e2a\u7ade\u4e89\u5bf9\u624b\u7684\u7f51\u7ad9\u6311\u9009\u51fa\u4e86 5 \u4e2a\u6700\u76f8\u5173\u7684\u9875\u9762\uff0c\u8fde\u540c\u5b83\u4eec\u7684\u6d41\u91cf\u6570\u636e\u4e00\u8d77\u586b\u5165\u5206\u6790\u8868\u683c\u3002 \u5c0f\u63d0\u793a. \u5982\u679c\u4f60\u60f3\u77e5\u9053\u8fd9\u4e9b\u70ed\u95f9\u9875\u9762\u4e4b\u4e8e\u54ea\u4e9b\u5173\u952e\u8bcd\u6709\u6392\u540d\uff0c\u53ef\u80fd\u70b9\u51fb\u5173\u952e\u8bcd\u5217\u7ed3\u679c\u53f3\u4fa7\u7684\u5411\u4e0b\u7bad\u5934\u25bc\u3002 \u5982\u679c\u4f60\u60f3\u77e5\u9053\u8fd9\u4e9b\u70ed\u95f9\u9875\u9762\u4e4b\u4e8e\u54ea\u4e9b\u5173\u952e\u8bcd\u6709\u6392\u540d\uff0c\u53ef\u80fd\u70b9\u51fb\u5173\u952e\u8bcd\u5217\u7ed3\u679c\u53f3\u4fa7\u7684\u5411\u4e0b\u7bad\u5934\u25bc\u3002 11. \u627e\u51fa\u7ade\u4e89\u5bf9\u624b\u7f51\u7ad9\u5916\u94fe\u6700\u591a\u7684\u5185\u5bb9 \u00b6 \u6211\u4eec\u4ece\u6bcf\u4e2a\u7ade\u4e89\u5bf9\u624b\u7684\u7f51\u7ad9\u6311\u9009\u51fa\u4e86 5 \u4e2a\u6700\u76f8\u5173\u7684\u9875\u9762\uff0c\u8fde\u540c\u5b83\u4eec\u7684\u6d41\u91cf\u6570\u636e\u4e00\u8d77\u586b\u5165\u5206\u6790\u8868\u683c\u3002 \u94fe\u63a5\u610f\u5473\u7740\u63a8\u8350\uff0c\u610f\u5473\u7740\u53e3\u7891\uff0c \u8fdb\u800c\u610f\u5473\u7740 \u66f4\u591a\u7684\u81ea\u7136\u641c\u7d22\u6d41\u91cf\u3002 \u6240\u4ee5\u6211\u4eec\u77e5\u9053\u9700\u8981\u5efa\u8bbe\u94fe\u63a5\uff0c\u53ef\u662f\u5e94\u8be5\u4ece\u4f55\u5f00\u59cb\u5462\uff1f \u7b54\u6848\u5f88\u7b80\u5355\uff0c\u4ece\u5bf9\u7ade\u4e89\u5bf9\u624b\u594f\u6548\u7684\u7b56\u7565\u5f00\u59cb\u3002 Ahrefs \u7f51\u7ad9\u5206\u6790 \uff08Site Explorer\uff09\u5de5\u5177\u4e2d\u7684 \u6700\u4f73\u94fe\u63a5\uff08Best by links\uff09 \u62a5\u544a\u53ef\u4ee5\u5c55\u793a\u7ade\u4e89\u5bf9\u624b\u6536\u83b7\u6700\u591a\u5916\u94fe\u7684\u5185\u5bb9\u3002\u5982\u679c\u8fd9\u5bf9\u4ed6\u4eec\u7ba1\u7528\uff0c\u90a3\u4eec\u76f8\u4f3c\u7684\u505a\u6cd5\u4e5f\u540c\u6837\u9002\u7528\u4e8e\u6211\u4eec\u3002 \u7f51\u7ad9\u5206\u6790 > \u8f93\u5165\u7ade\u4e89\u5bf9\u624b\u535a\u5ba2\u5730\u5740\uff08\u5b50\u76ee\u5f55/\u5b50\u57df\u540d\uff09> \u81ea\u7136\u641c\u7d22 > \u6700\u4f73\u94fe\u63a5 (Site Explorer > enter competitor\u2019s blog subfolder/subdomain > Organic search > Best by links) \u5c0f\u63d0\u793a. \u5982\u679c\u5f85\u5206\u6790\u7684\u7ade\u4e89\u5bf9\u624b\u7684\u535a\u5ba2\u6ca1\u6709\u653e\u7f6e\u5728\u5b50\u57df\u540d\uff08\u5982\uff1ablog.domain.com/\u2026\uff09\u6216\u5b50\u76ee\u5f55\uff08\u5982\uff1adomain.com/blog/\u2026\uff09\u4e0b\uff0c\u4f7f\u7528\u4ed6\u4eec\u7684\u6839\u57df\u540d\u5373\u53ef\u3002\u4f60\u53ea\u9700\u8981\u5728\u6d4f\u89c8\u62a5\u544a\u7684\u65f6\u5019\u66f4\u52a0\u6ce8\u610f\u5c31\u53ef\u4ee5\u4e86\u3002 \u5982\u679c\u5f85\u5206\u6790\u7684\u7ade\u4e89\u5bf9\u624b\u7684\u535a\u5ba2\u6ca1\u6709\u653e\u7f6e\u5728\u5b50\u57df\u540d\uff08\u5982\uff1ablog.domain.com/\u2026\uff09\u6216\u5b50\u76ee\u5f55\uff08\u5982\uff1adomain.com/blog/\u2026\uff09\u4e0b\uff0c\u4f7f\u7528\u4ed6\u4eec\u7684\u6839\u57df\u540d\u5373\u53ef\u3002\u4f60\u53ea\u9700\u8981\u5728\u6d4f\u89c8\u62a5\u544a\u7684\u65f6\u5019\u66f4\u52a0\u6ce8\u610f\u5c31\u53ef\u4ee5\u4e86\u3002 \u6211\u4eec\u4ece\u62a5\u544a\u4e2d\u627e\u51fa\u4e86\u7ade\u4e89\u5bf9\u624b\u6700\u76f8\u5173\u7684 5 \u4e2a\u70ed\u300e\u94fe\u300f\u9875\u9762\u7684\u94fe\u63a5\uff0c\u8fde\u540c\u6bcf\u4e2a\u9875\u9762\u7684\u6307\u5165\u57df\u540d\u6570\u91cf\u53ca\u5176\u5185\u5bb9\u300e\u7c7b\u578b\u300f\uff0c\u5206\u522b\u586b\u5165\u4e86\u5206\u6790\u8868\u683c\u5404\u7ade\u4e89\u5bf9\u624b\u7684\u540d\u4e0b\u3002 \u54ea\u79cd\u5f62\u5f0f\u7684\u5185\u5bb9\u5bf9\u7ade\u4e89\u5bf9\u624b\u594f\u6548\uff0c\u54ea\u7c7b\u5f62\u5f0f\u7684\u5185\u5bb9\u53d7\u5230\u8fd9\u4e2a\u884c\u4e1a\u7684\u9752\u7750\uff0c\u7aa5\u4e00\u8868\u800c\u77e5\u5168\u8c8c\u3002 \u4f8b\u5982\uff0cVenngage \u6536\u83b7\u5916\u94fe\u6700\u591a\u7684\u5185\u5bb9\u4e2d\uff0c\u6761\u5217\u5f0f\u6587\u7ae0\uff08listicles\uff09\u5360\u4e86 60%\uff0cVisme \u7684\u60c5\u51b5\u4e5f\u76f8\u4f3c\u3002 \u5c0f\u63d0\u793a. \u5e76\u975e\u6240\u6709\u7684\u7ec6\u5206\u9886\u57df\u90fd\u662f\u5982\u6b64\u3002\u4f60\u53ef\u80fd\u4f1a\u53d1\u73b0\u53e6\u5916\u4e00\u79cd\u5f62\u5f0f\u7684\u5185\u5bb9\u5728\u4f60\u6240\u5904\u7684\u5782\u76f4\u9886\u57df\u66f4\u52a0\u6d41\u884c\u3002 \u5e76\u975e\u6240\u6709\u7684\u7ec6\u5206\u9886\u57df\u90fd\u662f\u5982\u6b64\u3002\u4f60\u53ef\u80fd\u4f1a\u53d1\u73b0\u53e6\u5916\u4e00\u79cd\u5f62\u5f0f\u7684\u5185\u5bb9\u5728\u4f60\u6240\u5904\u7684\u5782\u76f4\u9886\u57df\u66f4\u52a0\u6d41\u884c\u3002 \u6240\u4ee5\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u5916\u94fe\uff0c\u6839\u636e\u5206\u6790\u7ed3\u679c\u521b\u4f5c\u67d0\u4e00\u79cd\u6d41\u884c\u5f62\u5f0f\u7684\u5185\u5bb9\u53ef\u80fd\u662f\u503c\u5f97\u6295\u5165\u7684\u52a8\u4f5c\u3002 \u53e6\u5916\u4e00\u65b9\u9762\uff0c\u5dee\u8ddd\u4e5f\u4ee3\u8868\u4e86\u673a\u4f1a\u3002 \u4f8b\u5982\uff0cCanva \u83b7\u5f97\u4e86\u8bb8\u591a\u6307\u5411\u957f\u6587\u7684\u94fe\u63a5\u3002\u8fd9\u4e9b\u5185\u5bb9\u53ef\u4ee5\u7b80\u5316\u6210\u4e00\u5f20\u4fe1\u606f\u56fe\u8868\uff0c\u8fd9\u6837\u751a\u81f3\u53ef\u80fd\u5438\u5f15\u66f4\u591a\u7684\u94fe\u63a5\u3002 \u6211\u4eec\u8fd8\u80fd\u4f7f\u7528\u6240\u8c13\u7684 \u300e\u6469\u5929\u5927\u697c\u300f\u6280\u672f \uff08the \u2018skyscraper\u2019 technique\uff09\u6765\u5438\u5f15\u5916\u94fe\uff1a \u521b\u5efa\u76f8\u4f3c\u4f46\u66f4\u4e3a\u4f18\u8d28\u7684\u5185\u5bb9\uff1b \u5c55\u793a\u7ed9\u90a3\u4e9b\u5411\u7ade\u4e89\u5bf9\u624b\u63d0\u4f9b\u5916\u94fe\u7684\u7f51\u7ad9\u8d1f\u8d23\u4eba\uff1b \u8981\u6c42\u4ed6\u4eec\u6362\u6389\u94fe\u63a5\uff0c\u6307\u5411\u6211\u4eec\u65b0\u521b\u4f5c\u7684\u66f4\u4f18\u8d28\u7684\u5185\u5bb9\u3002 \u5982\u679c\u4f60\u60f3\u77e5\u9053\u5982\u4f55\u627e\u5230\u4e3a\u7ade\u4e89\u5bf9\u624b\u63d0\u4f9b\u5916\u94fe\u7684\u7f51\u7ad9\uff0c\u53ea\u9700\u8981\u70b9\u51fb\u6307\u5165\u57df\u540d\u4e00\u5217\u4e2d\u7684\u6570\u5b57\uff0c\u4f60\u5c31\u80fd\u770b\u5230\u6240\u6709\u6307\u5411\u8be5\u9875\u9762\u7684\u7f51\u7ad9\u4e86\u3002 \u6362\u8a00\u4e4b\uff0c\u6211\u4eec\u7684\u7ade\u4e89\u5bf9\u624b\u63d0\u4f9b\u4e86\u4e00\u4efd\u524d\u666f\uff08\u6f5c\u5728\u5916\u94fe\u5efa\u8bbe\u673a\u4f1a\uff09\u6e05\u5355\u7ed9\u6211\u4eec\u3002\ud83d\ude09 \u5c0f\u7b14\u8bb0 \u6211\u4eec\u5c06\u5728\u63a5\u4e0b\u6765\u7684 12 \u548c 13 \u7ae0\u8282\u6df1\u5165\u7814\u7a76\u7ade\u4e89\u5bf9\u624b\u7684 PPC\uff08Pay Per Click\uff0c\u6bcf\u6b21\u70b9\u51fb\u4ed8\u8d39\uff09 \u5e7f\u544a\u60c5\u51b5\u3002 12. \u627e\u51fa\u7ade\u4e89\u5bf9\u624b\u7684PPC\u5173\u952e\u8bcd \u00b6 \u6362\u8a00\u4e4b\uff0c\u6211\u4eec\u7684\u7ade\u4e89\u5bf9\u624b\u63d0\u4f9b\u4e86\u4e00\u4efd\u524d\u666f\uff08\u6f5c\u5728\u5916\u94fe\u5efa\u8bbe\u673a\u4f1a\uff09\u6e05\u5355\u7ed9\u6211\u4eec\u3002\ud83d\ude09 \u5236\u5b9a SEO \u7b56\u7565\u65f6\uff0c\u5206\u6790\u7ade\u4e89\u5bf9\u624b\u7684 PPC \u6d3b\u52a8\u5c06\u8d77\u5230\u610f\u60f3\u4e0d\u5230\u7684\u6548\u679c\u3002 \u539f\u56e0\u5f88\u7b80\u5355\uff1a\u5982\u679c\u4ed6\u4eec\u613f\u610f\u4e3a\u67d0\u4e2a\u5173\u952e\u8bcd\u6d41\u91cf\u652f\u4ed8\u8d39\u7528\uff08\u7ed9 Google\uff09\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5173\u952e\u8bcd\u5f88\u53ef\u80fd\u610f\u5473\u7740\u5229\u6da6\u3002 \u4f7f\u7528 Ahrefs \u7f51\u7ad9\u5206\u6790 \uff08Site Explorer\uff09\u5de5\u5177\u7684 PPC \u5173\u952e\u8bcd\uff08PPC keywords\uff09 \u62a5\u544a\uff0c\u53ef\u80fd\u627e\u51fa\u7ade\u4e89\u5bf9\u624b\u7684 PPC \u6295\u653e\u5173\u952e\u8bcd\u3002 \u7f51\u7ad9\u5206\u6790 > \u8f93\u5165\u7ade\u4e89\u5bf9\u624b\u57df\u540d > \u4ed8\u8d39\u641c\u7d22 > PPC \u5173\u952e\u8bcd (Site Explorer > enter competitor\u2019s domain > Paid search > PPC keywords) \u770b\u8d77\u6765 Venngage \u6b63\u5728\u4e3a\u5927\u91cf\u4fe1\u606f\u56fe\u8868\u76f8\u5173\u7684\u641c\u7d22\u77ed\u8bed\u51fa\u4ef7\u3002 \u8fd9\u8ba9\u6211\u60f3\u5230\u53e6\u5916\u4e00\u70b9\uff1a \u67e5\u770b\u7ade\u4e89\u5bf9\u624b\u7684 PPC \u5e7f\u544a\u6570\u636e\u53ef\u4ee5\u5c55\u793a\u4f4e\u641c\u7d22\u91cf\u3001\u9ad8\u8f6c\u5316\u7387\u7684\u5173\u952e\u8bcd\uff0c\u800c\u8fd9\u4e9b\u5173\u952e\u8bcd\u5728\u6211\u4eec\u5f00\u5c55 \u5173\u952e\u8bcd\u8c03\u7814 \u7684\u65f6\u5019\u662f\u5f88\u5bb9\u6613\u88ab\u5ffd\u89c6\u7684\u3002 \u4f8b\u5982\uff0c\u5c31\u8f6c\u5316\u7387\u800c\u8a00\uff0c\u50cf\u201cmake an infographic online\u201d\uff0870 \u6b21\u641c\u7d22/\u6708\uff09\u8fd9\u6837\u7684\u5173\u952e\u8bcd\u53ef\u80fd\u6bd4\u201cfree infographic creator\u201d\uff08600 \u6b21\u641c\u7d22/\u6708\uff09\u8fd9\u6837\u7684\u5173\u952e\u8bcd\u9ad8\u5f88\u591a\u3002 \u5982\u679c\u4e00\u4e2a 70 \u6b21\u641c\u7d22/\u6708 \u7684\u5173\u952e\u8bcd\u7684\u8f6c\u5316\u7387\u4e3a 20%\uff0c\u4e00\u4e2a 600 \u6b21\u641c\u7d22/\u6708 \u7684\u5173\u952e\u8bcd\u8f6c\u5316\u7387\u4e3a 2%\uff0c\u4f60\u8ba4\u4e3a\u505a\u54ea\u4e2a\u5173\u952e\u8bcd\u7684\u6392\u540d\u66f4\u6709\u610f\u4e49\u5462\uff1f \u4f60\u5e94\u8be5\u5df2\u7ecf\u8ba1\u7b97\u51fa\u7ed3\u679c\u4e86\u3002\u90a3\u4e2a\u4f4e\u641c\u7d22\u91cf\u7684\u5173\u952e\u8bcd\u53ef\u4ee5\u6700\u7ec8\u4e3a\u4f60\u5e26\u6765\u66f4\u591a\u9500\u552e\u989d\u3002 \u56e0\u6b64\uff0c\u9075\u5faa\u8fd9\u4e2a\u903b\u8f91\uff0c\u6211\u4eec\u4ece\u6bcf\u4e2a\u7ade\u4e89\u5bf9\u624b\u51fa\u4ef7\u7684\u5173\u952e\u8bcd\u4e2d\u6311\u9009\u51fa\u4e86 5 \u4e2a\uff0c\u5206\u522b\u586b\u5165\u4e86\u6bcf\u4e2a\u7ade\u4e89\u5bf9\u624b\u7684\u540d\u4e0b\u3002\u6211\u4eec\u6709\u610f\u6311\u9009\u4e86\u90a3\u4e9b\u5728\u6211\u4eec\u770b\u6765\u8f6c\u5316\u7387\u4f1a\u6bd4\u8f83\u9ad8\u7684\u5173\u952e\u8bcd\u3002 \u514d\u8d23\u58f0\u660e \uff1a\u8bf7\u5bf9\u8fd9\u79cd\u65b9\u6cd5\u6301\u4fdd\u7559\u6001\u5ea6\u3002\u7ade\u4e89\u5bf9\u624b\u5728\u67d0\u4e9b\u5173\u952e\u8bcd\u4e0a\u9762\u7838\u94b1\u6295 PPC \u5e76\u4e0d\u610f\u5473\u7740\u4ed6\u4eec\u77e5\u9053\u81ea\u5df1\u5728\u505a\u4ec0\u4e48\u3002\u5728\u4f60\u503e\u6ce8\u6240\u6709\u7b79\u7801\u505a\u5173\u952e\u8bcd\u6392\u540d\u4e4b\u524d\uff0c\u4e0d\u59a8\u5148\u7528 PPC \u6d4b\u8bd5\u4e00\u4e0b\u8fd9\u4e9b\u5173\u952e\u8bcd\u7684\u8f6c\u5316\u7387\u7b49\u6307\u6807\u3002 13. \u5b66\u4e60\u7ade\u4e89\u5bf9\u624b\u7684PPC\u5e7f\u544a\uff08\u6587\u6848\uff09 \u00b6 \u67e5\u770b\u7ade\u4e89\u5bf9\u624b\u7684 PPC \u5e7f\u544a\u6587\u6848\u6709\u52a9\u4e8e\u6211\u4eec\u64b0\u5199\u5143\u6807\u9898\u548c\u5143\u63cf\u8ff0\u4fe1\u606f\uff0c\u4ee5\u63d0\u9ad8\u70b9\u51fb\u7387\u3002 \u56e0\u4e3a\u4ed6\u4eec\u6b63\u5728\u5f80\u5173\u952e\u8bcd\u6295\u5165\u771f\u91d1\u767d\u94f6\uff0c\u800c Google \u4f1a\u56e0\u4e3a\u5e7f\u544a\u6587\u6848\u7684\u76f8\u5173\u6027\u800c\u51cf\u5c11\u5b9e\u9645\u7684\u5e7f\u544a\u652f\u51fa\uff08\u4ee5\u8d44\u9f13\u52b1\uff09\u3002 \u4e3a\u4e86\u5229\u76ca\uff0c\u4ed6\u4eec\u4f1a\u7ede\u5c3d\u8111\u6c41\u64b0\u5199\u9ad8\u5ea6\u76f8\u5173\u7684\u5e7f\u544a\u6587\u6848\u3002 \u6211\u4eec\u518d\u6b21\u6253\u5f00 PPC \u5173\u952e\u8bcd\u62a5\u544a \uff0c\u770b\u770b\u7ade\u4e89\u5bf9\u624b\u662f\u5982\u4f55\u7ed9 \u201cinfographic maker\u201d \u8fd9\u4e2a\u5173\u952e\u8bcd\u64b0\u5199\u5e7f\u544a\u6587\u6848\u7684\uff1a \u7f51\u7ad9\u5206\u6790> \u8f93\u5165\u7ade\u4e89\u5bf9\u624b\u57df\u540d > \u4ed8\u8d39\u641c\u7d22 > PPC \u5173\u952e\u8bcd (Site Explorer > enter competitor\u2019s domain > Paid search > PPC keywords) \u8981\u9884\u89c8\u67d0\u4e2a\u5173\u952e\u8bcd\u7684\u5e7f\u544a\uff08\u6587\u6848\uff09\uff0c\u53ea\u9700\u8981\u5c06\u9f20\u6807\u60ac\u505c\u5728 \u201cAd\u201d\uff08\u5e7f\u544a\uff09\u56fe\u6807\u4e0a\u3002 \u4ed6\u4eec\u4f7f\u7528\u4e86 speed \u548c simplicity \u7b49\u5b57\u773c\u6765\u5438\u5f15\u70b9\u51fb\u3002 \u8fd9\u4e9b\u5185\u5bb9\u90fd\u662f\u53ef\u4ee5\u4e3a\u6211\u4eec\u6240\u7528\u7684\u3002\u4f8b\u5982\u5c06\u5176\u6574\u5408\u8fdb\u81ea\u5df1\u7f51\u9875\u7684\u5143\u6807\u9898\u548c\u63cf\u8ff0\u4e2d\uff0c\u4ece\u800c\u5438\u5f15\u66f4\u591a\u81ea\u7136\u641c\u7d22\u6d41\u91cf\u3002 \u63a8\u8350\u9605\u8bfb \uff1a \u5982\u4f55\u64b0\u5199\u5b8c\u7f8e\u7684 SEO \u6807\u9898\u6807\u7b7e\uff08\u6211\u4eec\u7684 4 \u6b65\u6d41\u7a0b\uff09 \u7ed3\u8bed \u00b6 \u4ee5\u4e0a\u6240\u6709\u5176\u5b9e\u53ea\u662f SEO \u7ade\u4e89\u5bf9\u624b\u5206\u6790\u7684\u51b0\u5c71\u4e00\u89d2\u3002 \u5982\u679c\u4f60\u5bf9 Ahrefs \u5f88\u719f\u6089\uff0c\u5c31\u4e00\u5b9a\u77e5\u9053\u5979\u8fd8\u80fd\u751f\u6210\u5927\u91cf\u989d\u5916\u7684\u62a5\u544a\uff0c\u4ece\u4e2d\u4f60\u53ef\u4ee5\u7ee7\u7eed\u6df1\u6316\uff0c\u4ece\u800c\u66f4\u5168\u9762\u5730\u638c\u63e1\u7ade\u4e89\u5bf9\u624b\u6574\u4f53\u7684\u8425\u9500\u3001\u5185\u5bb9\u548c \u94fe\u63a5\u5efa\u8bbe\u7b56\u7565 \u3002 \u6211\u4eec\u6709\u4ec0\u4e48\u5efa\u8bae\uff1f\u6267\u884c\u4e0a\u8ff0\u6b65\u9aa4\uff0c\u7136\u540e\u5c1d\u8bd5 Ahrefs \u7684\u5176\u4ed6\u62a5\u544a\u529f\u80fd\uff08\u751a\u81f3\u4e00\u4e9b\u5176\u4ed6\u7684\u7ade\u4e89\u5bf9\u624b\u5206\u6790\u5de5\u5177\uff09\uff0c\u7528\u4ee5\u63a2\u7d22\u4efb\u4f55\u4f60\u611f\u5174\u8da3\u7684\u9886\u57df\u3002 https://www.youtube.com/watch?v=_oU8lclN114 \u6700\u540e\uff0c\u5982\u679c\u4f60\u60f3\u81ea\u5df1\u4e5f\u6309\u7740\u8fd9\u79cd\u65b9\u6cd5\u505a\u4e00\u4e0b\u7ade\u4e89\u5bf9\u624b\u5206\u6790\uff0c \u8fd9\u91cc \u662f\u6211\u4eec\u7684\u8868\u683c\u6a21\u677f\uff08\u8fd9\u7bc7\u6307\u5357\u4e2d\u6240\u4f7f\u7528\u7684\u8868\u683c\uff09\u3002","title":"\u56f4\u7ed5SEO\u5f00\u5c55\u7ade\u4e89\u5bf9\u624b\u5206\u6790"},{"location":"pages/affiliate/seo_competitor_analyze/#\u5982\u4f55\u56f4\u7ed5-SEO-\u5f00\u5c55\u7ade\u4e89\u5bf9\u624b\u5206\u6790-\u5305\u542b\u5206\u6790\u6a21\u677f","text":"\u5982\u679c\u4f60\u6253\u7b97\u5efa\u7acb\u5168\u65b0\u7684\u7535\u5546\u72ec\u7acb\u7ad9\uff0c\u6216\u8005\u5df2\u7ecf\u538c\u5026\u4e86\u5728\u81ea\u7136\u641c\u7d22\u4e2d\u4e0d\u65ad\u5730\u8f93\u7ed9\u7ade\u4e89\u5bf9\u624b\uff0c\u90a3\u4e48\u4f60\u5c31\u6709\u5fc5\u8981\u57fa\u4e8e\u641c\u7d22\u5f15\u64ce\u4f18\u5316\u5f00\u5c55\u4e00\u6b21\u7ade\u4e89\u5bf9\u624b\u5206\u6790\u4e86\u3002 \u7ade\u4e89\u5bf9\u624b\u7684\u6570\u636e\u5bf9\u4f60\u6765\u8bf4\u7b80\u76f4\u5c31\u662f\u4e00\u5ea7\u91d1\u77ff\uff0c\u5b83\u4eec\u53ef\u4ee5\u4ece\u5404\u4e2a\u65b9\u9762\u5bf9\u4f60\u7684 SEO\u7b56\u7565\u63d0\u4f9b\u6307\u5bfc\uff0c\u5e2e\u52a9\u63d0\u5347\u4f60\u7ad9\u70b9\u7684\u81ea\u7136\u6d41\u91cf\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u5f00\u5c55\u57fa\u4e8e SEO\u7684\u7ade\u4e89\u5bf9\u624b\u5206\u6790\u53ef\u4ee5\u5e2e\u52a9\u4f60\uff1a \u4e86\u89e3\u6240\u5728\u884c\u4e1a\u7684\u8fd0\u4f5c\u89c4\u5219\uff1b \u627e\u5230\u7ade\u4e89\u5bf9\u624b\u7684\u5f31\u70b9\uff0c\u5e76\u52a0\u4ee5\u5229\u7528\uff1b \u627e\u5230\u7ade\u4e89\u5bf9\u624b\u7684\u5f3a\u9879\uff0c\u5e76\u52a0\u4ee5\u590d\u5236\uff1b \u7406\u89e3\u9700\u8981\u5f00\u5c55\u7684 SEO\u76f8\u5173\u5de5\u4f5c\uff0c\u5e76\u5206\u51fa\u4f18\u5148\u7ea7\uff1b \u4e86\u89e3\u5728\u641c\u7d22\u5f15\u64ce\u7ed3\u679c\u9875\u9762\uff08Search Engine Result Page, SERP\uff09\u8d85\u8d8a\u7ade\u4e89\u5bf9\u624b\u7684\u96be\u5ea6\u3002 \u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u865a\u6784\u4e86\u4e00\u6b3e\u4fe1\u606f\u56fe\u8868\u8bbe\u8ba1\u5de5\u5177\uff08infographic design tool\uff09\u2014\u2014 Minimagraphic.com\uff0c\u5e76\u5c06\u4ee5\u6b64\u4e3a\u4f8b\uff0c\u4ecb\u7ecd\u4e00\u5957\u57fa\u4e8e SEO \u5f00\u5c55\u7ade\u4e89\u5bf9\u624b\u5206\u6790\u7684\u6807\u51c6\u6d41\u7a0b\u3002 \u6211\u4eec\u8fd8\u4e3a\u5927\u5bb6\u51c6\u5907\u4e86\u4e00\u4e2a\u7528\u4e8e\u7ade\u4e89\u5bf9\u624b\u5206\u6790\u7684\u8868\u683c\u6a21\u677f\uff0c\u76f8\u4fe1\u5728\u4e3a\u81ea\u5df1\u7684\u7f51\u7ad9\u505a\u7ade\u4e89\u5bf9\u624b\u5206\u6790\u7684\u65f6\u5019\uff0c\u5b83\u80fd\u6d3e\u4e0a\u7528\u573a\u3002","title":"\u5982\u4f55\u56f4\u7ed5 SEO \u5f00\u5c55\u7ade\u4e89\u5bf9\u624b\u5206\u6790 [\u5305\u542b\u5206\u6790\u6a21\u677f]"},{"location":"pages/affiliate/seo_competitor_analyze/#\u73b0\u5728\u5f00\u59cb","text":"\u56f4\u7ed5 SEO \u5f00\u5c55\u7ade\u4e89\u5bf9\u624b\u5206\u6790\uff0c\u4f60\u9700\u8981\u4ee5\u4e0b\u4e24\u4ef6\u5175\u5668\uff1a 1. Ahrefs SEO \u5de5\u5177\u96c6 2. Google \u8868\u683c\uff08Google Sheets\uff09 \u6a21\u677f\uff08\u91cd\u8981\uff1a\u62f7\u8d1d\u540e\u518d\u4f7f\u7528\uff01\uff09 \u4e3a\u4e86\u9632\u6b62\u4ee5\u4e0b\u7684\u8bf4\u660e\u6709\u4e0d\u6e05\u695a\u7684\u5730\u65b9\uff08\u5e0c\u671b\u4e0d\u4f1a\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\uff09\uff0c\u6709\u5fc5\u8981\u5c06\u9488\u5bf9\u6211\u4eec\u5047\u60f3\u7ad9\u70b9\u7684\u5b8c\u6210\u7248\u8868\u683c\u4e5f\u4e00\u8d77\u62f7\u8d1d\u4e86\u3002 \u5b8c\u6210\u4e86\u7684\uff08\u7ade\u4e89\u5bf9\u624b\u5206\u6790\uff09\u8868\u683c \u5728\u6b64 \u3002 \u51c6\u5907\u597d\u4e86\u5417\uff1f\u6211\u4eec\u5f00\u59cb\uff01","title":"\u73b0\u5728\u5f00\u59cb"},{"location":"pages/affiliate/seo_competitor_analyze/#1-\u8bc6\u522b\u7ade\u4e89\u5bf9\u624b","text":"\u5728\u5f00\u5c55\u5404\u9879\u5de5\u4f5c\u4e4b\u524d\uff0c\u9700\u8981\u786e\u8ba4\u6211\u4eec\u7684\u4e3b\u8981\u7ade\u4e89\u5bf9\u624b\u3002 \u5b83\u4eec\u662f\u81ea\u7136\u641c\u7d22\u4e2d\u4e4b\u4e8e\u76ee\u6807\u5173\u952e\u8bcd\u4e0e\u6211\u4eec\u4e89\u593a\u6392\u540d\u7684\u7f51\u7ad9\u3002 \u5c31\u6211\u4eec\u5047\u60f3\u7684\u4fe1\u606f\u56fe\u8868\u8bbe\u8ba1\u5de5\u5177\u800c\u8a00\uff0c\u7acb\u523b\u6d6e\u73b0\u5728\u8111\u6d77\u7684\u7ade\u4e89\u5bf9\u624b\u6709\uff1aCanva\uff0cPiktochart\uff0cInfogram\uff0ceasel.ly \u548c Visme\u3002\u7136\u800c\uff0c\u6211\u4eec\u5728\u81ea\u7136\u641c\u7d22\u677f\u5757\u7684\u7ade\u4e89\u8005\u53ef\u80fd\u5e76\u4e0d\u76f4\u63a5\u6784\u6210\u4e1a\u52a1\u7ade\u4e89\u3002 \u6211\u4eec\u5148\u6765\u770b\u770b\u6f5c\u5728\u7528\u6237\u641c\u7d22\u76f8\u5173\u670d\u52a1\u65f6\u53ef\u80fd\u4f1a\u4f7f\u7528\u7684\u77ed\u8bed\u3002 \u6211\u4eec\u8d77\u521d\u89c9\u5f97\u4f1a\u662f\u201cinfographic design tool\u201c\u4e4b\u7c7b\u7684\u8bcd\uff0c\u4f46\u662f\u5f53\u6211\u4eec\u5728 Ahrefs \u7684 \u5173\u952e\u8bcd\u5206\u6790 \uff08Keywords Explorer\uff09\u5de5\u5177\u4e2d\u68c0\u7d22\u7684\u65f6\u5019\uff0c\u53d1\u73b0\u8fd9\u4e2a\u731c\u60f3\u597d\u50cf\u9519\u4e86\uff0c\u8be5\u77ed\u8bed\u5728 Google \u4e2d\u5e76\u6ca1\u6709\u641c\u7d22\u91cf\u3002 \u6253\u5f00\u5171\u540c\u6392\u540d\u77ed\u8bed\uff08Also rank for\uff09\u62a5\u544a\uff0c \u6211\u4eec\u6765\u770b\u770b\u662f\u5426\u80fd\u627e\u5230\u66f4\u597d\u7684\u5173\u952e\u8bcd\u3002 \u770b\u8d77\u6765\u4eba\u4eec\u5728\u641c\u7d22\u8fd9\u7c7b\u5de5\u5177\u65f6\uff0c\u7528\u7684\u6700\u591a\u7684\u8bcd\u662f\u201cinfographic maker\u201d\u3002 \u73b0\u5728\u8ba9\u6211\u4eec\u5207\u6362\u5230 SERP \u6982\u89c8\uff08SERP overview\uff09 \u62a5\u544a\uff0c\u770b\u770b\u8fd9\u4e2a\u5173\u952e\u8bcd\u6392\u540d\u524d 5 \u7684\u7ed3\u679c\u3002 \u5982\u679c\u4f60\u8fd8\u4e0d\u662f Ahrefs \u7684\u7528\u6237\uff0c\u53ef\u4ee5\u8bd5\u8bd5\u5728 Google \u4e2d\u641c\u7d22\u8fd9\u4e2a\u5173\u952e\u8bcd\uff1a \u770b\u8d77\u6765\u6211\u4eec\u6700\u4e3b\u8981\u7684 5 \u4e2a \u7ade\u4e89\u5bf9\u624b\u662f\uff1aPiktochart\uff0cVenngage\uff0cCanva\uff0cVisme \u548c Infogram\u3002 \u6709\u8da3\u7684\u662f\uff0cEasel.ly \u5e76\u4e0d\u591f\u683c\uff08\u6210\u4e3a\u6211\u4eec\u7684\u7ade\u4e89\u5bf9\u624b\uff09\uff0c\u56e0\u4e3a\u5728\u6392\u540d\u524d 10 \u7684\u7ed3\u679c\u4e2d\u6ca1\u6709\u53d1\u73b0\u5b83\u7684\u8eab\u5f71\u3002 \u5c31\u8fd9\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u4e0d\u80fd\u4f9d\u8d56\u76f4\u89c9\u786e\u8ba4\u76f4\u63a5\u7684\u540c\u4e1a\u7ade\u4e89\u5bf9\u624b\u3002\u518d\u91cd\u7533\u4e00\u904d\uff0c\u4ece SEO \u89d2\u5ea6\uff0c\u4ed6\u4eec\u5e76\u4e0d\u603b\u662f\u4f60\u7684\u7ade\u4e89\u5bf9\u624b\u3002 \u4e3e\u4e00\u4e2a\u66f4\u751f\u52a8\u7684\u4f8b\u5b50\uff0c\u5047\u8bbe\u4f60\u5728\u4e00\u5ea7\u5c0f\u9547\u4e2d\u7ecf\u8425\u4e00\u5bb6\u8089\u5e97\u3002\u8def\u8fb9\u53e6\u5916\u4e00\u5bb6\u8089\u5e97\u53ef\u80fd\u8ba9\u4f60\u5bdd\u98df\u96be\u5b89\u3002\u7136\u800c\u5c31 SEO \u800c\u8a00\uff0c\u4ed6\u4eec\u5e76\u4e0d\u6784\u6210\u4efb\u4f55\u5a01\u80c1\uff0c\u56e0\u4e3a\u4ed6\u4eec\u751a\u81f3\u8fde\u7f51\u7ad9\u90fd\u6ca1\u6709\u3002 \u6211\u4eec\u5c06\u8fd9 5 \u4e2a\u7ade\u4e89\u5bf9\u624b\uff08\u7684\u54c1\u724c\u548c\u57df\u540d\uff09\u586b\u5165\u5206\u6790\u8868\u683c\u3002 \u4e13\u4e1a\u63d0\u793a \u5982\u679c\u4f60\u60f3\u627e\u51fa\u535a\u5ba2\u6216\u8005\u7535\u5546\u7f51\u7ad9\u7684\u7ade\u4e89\u5bf9\u624b\uff0c\u5c31\u5355\u4e00\u5173\u952e\u8bcd\u627e\u51fa\u6392\u540d\u524d\u5217\u7684\u7f51\u7ad9\u53ef\u80fd\u5e76\u4e0d\u662f\u6700\u597d\u7684\u505a\u6cd5\u3002 \u4f60\u5f88\u53ef\u80fd\u9700\u8981\u9488\u5bf9\u8bb8\u591a\u9875\u9762\u7684\u591a\u4e2a\u4e3b\u9898\u6807\u7684\u6210\u767e\u4e0a\u5343\u4e2a\u5173\u952e\u8bcd\u3002 \u6240\u4ee5\u4f60\u9700\u8981\u66f4\u5168\u9762\u5730\u5ba1\u89c6\u4f60\u7684\u7ade\u4e89\u5bf9\u624b\u3002 \u4e3a\u6b64\uff0c\u4f60\u9700\u8981\u7528\u5230 Ahrefs \u7f51\u7ad9\u5206\u6790 \uff08Site Explorer\uff09\u4e2d\u7684 \u7ade\u4e89\u57df\u540d\uff08Competing Domains\uff09 \u62a5\u544a\u3002 \u7f51\u7ad9\u5206\u6790 > \u8f93\u5165\u4f60\u7684\u57df\u540d > \u81ea\u7136\u641c\u7d22 > \u7ade\u4e89\u57df\u540d (Site Explorer > enter your domain > Organic search > Competing domains)","title":"1. \u8bc6\u522b\u7ade\u4e89\u5bf9\u624b"},{"location":"pages/affiliate/seo_competitor_analyze/#2-\u5206\u6790\u7ade\u4e89\u683c\u5c40","text":"\u63a5\u7740\uff0c\u6211\u4eec\u9700\u8981\u9e1f\u77b0\u6574\u4f53\u7ade\u4e89\u6001\u52bf\u3002 \u6211\u4eec\u6240\u5728\u884c\u4e1a\u7684\u7ade\u4e89\u683c\u5c40\u53ef\u80fd\u76d8\u6839\u9519\u8282\uff0c\u901a\u8fc7\u6293\u53d6\u5173\u952e\u6570\u636e\u548c\u4e00\u4e9b SEO \u6307\u6807 \u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u66f4\u597d\u7406\u89e3\u3002 \u4f7f\u7528 Ahrefs \u6279\u91cf\u5206\u6790 \uff08Batch Analysis\uff09\u5de5\u5177\uff0c\u6211\u4eec\u53ef\u4ee5\u4e00\u6b21\u6027\u6293\u53d6\u591a\u4e2a\u7ade\u4e89\u5bf9\u624b\u7684\u76f8\u5173\u6570\u636e\u548c\u6307\u6807\u3002 \u6279\u91cf\u5206\u6790 > \u8f93\u5165\u591a\u4e2a\u7ade\u4e89\u5bf9\u624b\u7684\u57df\u540d > \u5206\u6790 (Batch Analysis > Enter competitors\u2019 domains > Analyze) \u6279\u91cf\u5206\u6790\u5de5\u5177\u53ef\u4ee5\u7ed9\u51fa\u6bcf\u4e2a\u7f51\u7ad9\u7684\u5927\u91cf\u6709\u7528\u6570\u636e \uff0c\u4f46\u73b0\u5728\u6211\u4eec\u6700\u611f\u5174\u8da3\u7684\u662f\uff1a \u57df\u540d\u8bc4\u5206 \uff08Domain Rating, DR \uff09 * Ahrefs \u6392\u540d \uff08Ahrefs Rank, AR \uff09 * \u6307\u5165\u57df\u540d\u6570\u91cf * \u81ea\u7136\u641c\u7d22\u6d41\u91cf\u4f30\u503c * \u300e\u6709\u6392\u540d\u300f\u7684\u5173\u952e\u8bcd\u6570\u91cf\u4f30\u503c \u6211\u4eec\u5c06\u8fd9\u4e9b\u6570\u636e\u7c98\u8d34\u8fdb\u6a21\u677f\u8868\u683c\u3002 \u63a5\u7740\u6df1\u5165\u7406\u89e3\u4e00\u4e0b\u8fd9\u4e9b SEO \u6307\u6807\uff1a \u57df\u540d\u8bc4\u5206\uff08Domain Rating, DR\uff09 : \u8f83\u9ad8\u7684\u57df\u540d\u8bc4\u5206\u5f80\u5f80\u610f\u5473\u7740\u624e\u5b9e\u7684\u5916\u94fe\u57fa\u7840\u3002\u5728\u7406\u89e3\u8fd9\u9879\u6307\u6807\u65f6\uff0c\u4e0d\u8981\u628a\u5b83\u5f53\u6210\u4e00\u4e2a\u7edd\u5bf9\u503c\uff0c\u800c\u5e94\u4ece\u76f8\u5bf9\u7684\u89d2\u5ea6\u5224\u65ad\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u7f51\u7ad9\u7684 DR \u4e3a 30\uff0c\u800c\u7ade\u4e89\u5bf9\u624b\u7684 DR \u4e3a 50\uff0c\u90a3\u5bf9\u624b\u53ea\u662f\u6bd4\u4f60\u9ad8\u51fa\u4e86\u4e00\u4e9b\uff1b\u5982\u679c\u4f60\u7f51\u7ad9\u7684 DR \u4e3a 30\uff0c\u800c\u7ade\u4e89\u5bf9\u624b\u7684 DR \u53bb\u5230\u4e86 90\uff0c\u8fd9\u5c31\u597d\u6bd4\u62ff\u4f60\u7684\u5c0f\u5356\u94fa\u548c\u6c83\u5c14\u739b (Walmart) \u6297\u8861\u2014\u2014\u9192\u9192\uff0c\u4f60\u6839\u672c\u4e0d\u662f\u4ed6\u4eec\u7684\u5bf9\u624b\u3002 Ahrefs \u6392\u540d\uff08Ahrefs Ranking, AR\uff09 : \u7f51\u7ad9\u7684 Ahrefs \u6392\u540d\u8d8a\u9ad8\uff08\u6570\u503c\u8d8a\u5c0f\uff09\uff0c\u610f\u5473\u7740\u7f51\u7ad9\u7684\u6574\u4f53\u7d20\u8d28\u8d8a\u9ad8\u3002\u4f5c\u4e3a\u548c DR \u7c7b\u4f3c\u7684\u7efc\u5408\u6027\u6307\u6807\uff0cAR \u8003\u5bdf\u7684\u7f51\u7ad9\u6307\u6807\u66f4\u52a0\u7ec6\u81f4\u3002\u4f8b\u5982\uff0c\u5f53\u4f60\u9762\u5bf9\u4e24\u5bb6 DR \u540c\u4e3a 33 \u7684\u7ade\u4e89\u5bf9\u624b\u65f6\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u53c2\u8003 AR \u6765\u786e\u5b9a\u54ea\u4e2a\u66f4\u5f3a\u4e00\u4e9b\u3002 \u6307\u5165\u57df\u540d\uff08Referring domains\uff09 : \u4e00\u4e2a\u7f51\u7ad9\u7684\u6307\u5165\u57df\u540d\u8d8a\u591a\uff0c\u7f51\u7ad9\u7684\u6743\u5a01\u5ea6\u5c31\u8d8a\u9ad8\u3002\u5f53\u7136\u8fd9\u91cc\u6709\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u524d\u63d0\uff1a\u8fd9\u4e9b\u6307\u5165\u57df\u540d\u63d0\u4f9b\u7684\u94fe\u63a5\u8d28\u91cf\u5fc5\u987b\u826f\u597d\u3002\u6ce8\u610f\uff1a\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u9700\u8981\u540c\u65f6\u53c2\u8003\u50cf DR \u8fd9\u6837\u7684\u7efc\u5408\u6307\u6807\uff0c\u56e0\u4e3a\u5b83\u4f1a\u540c\u65f6\u5c06\u5916\u94fe\u7684\u6570\u91cf\u548c\u8d28\u91cf\u8003\u8651\u5728\u5185\u3002 \u300e\u6709\u6392\u540d\u300f\u7684\u5173\u952e\u8bcd\u6570\u91cf\u4f30\u503c : \u663e\u800c\u6613\u89c1\uff0c\u81ea\u7136\u641c\u7d22\u6d41\u91cf\u8d8a\u5927\uff0c\u300e\u6709\u6392\u540d\u7684\u300f\u5173\u952e\u8bcd\u6570\u91cf\u8d8a\u591a\uff0c\u7f51\u7ad9\u5728\u81ea\u7136\u641c\u7d22\u677f\u5757\u7684\u8868\u73b0\u5c31\u8d8a\u597d\u3002 \u7b80\u5355\u6765\u8bf4\uff0c\u4f60\u548c\u7ade\u4e89\u5bf9\u624b\u5728\u8fd9\u4e9b\u6570\u636e\u4e0a\u7684\u5dee\u8ddd\u8d8a\u5927\uff0c\u4f60\u9700\u8981\u505a\u7684\u5de5\u4f5c\u5c31\u8d8a\u591a\u3002 \u4f46\u662f\uff0c\u8fd9\u4e9b\u9759\u6001\u7684\u91cf\u5316\u6307\u6807 \u5e76\u6ca1\u6709\u63ed\u793a \u7ade\u4e89\u5bf9\u624b\u5728 SEO \u65b9\u9762\u7684\u52a8\u6001\u8fdb\u5c55\u3002 \u5c0f\u7b14\u8bb0 \u6211\u4eec\u5c06\u5728\u63a5\u4e0b\u6765\u7684 03\u300104 \u548c 05 \u7ae0\u8282\u6df1\u5165\u7814\u7a76\u7ade\u4e89\u5bf9\u624b\u7684\u94fe\u63a5\u60c5\u51b5\u3002","title":"2. \u5206\u6790\u7ade\u4e89\u683c\u5c40"},{"location":"pages/affiliate/seo_competitor_analyze/#3-\u7814\u7a76\u7ade\u4e89\u5bf9\u624b\u7684\u5916\u94fe\u589e\u957f","text":"\u5728 \u5206\u6790\u4e86 ~9.3 \u4ebf\u7f51\u9875 \u540e\uff0c\u6211\u4eec\u786e\u8ba4\u5916\u94fe\u662f\u4e00\u4e2a\u660e\u786e\u7684 SEO \u6392\u540d\u56e0\u7d20\u3002 \u5c0f\u63d0\u793a. \u8fd9\u662f\u76f8\u5173\u6027\u7814\u7a76\u7684\u7ed3\u679c\uff0c\u5b83\u5e76\u4e0d\u80fd\u8bc1\u660e\uff08\u4e24\u8005\u4e4b\u95f4\u7684\uff09\u56e0\u679c\u5173\u7cfb\u3002 \u8fd9\u662f\u76f8\u5173\u6027\u7814\u7a76\u7684\u7ed3\u679c\uff0c\u5b83\u5e76\u4e0d\u80fd\u8bc1\u660e\uff08\u4e24\u8005\u4e4b\u95f4\u7684\uff09\u56e0\u679c\u5173\u7cfb\u3002 \u56e0\u6b64\u6211\u4eec\u9700\u8981\u66f4\u591a\u5730\u4e86\u89e3\u7ade\u4e89\u5bf9\u624b\u5728\u94fe\u63a5\u5efa\u8bbe\u65b9\u9762\u6240\u505a\u7684\u5de5\u4f5c\u3002 \u5148\u6765\u770b\u770b\u7ade\u4e89\u5bf9\u624b\u6307\u5165\u57df\u540d\u7684\u589e\u957f\u901f\u5ea6\uff0c\u8fd9\u53ef\u4ee5\u4e3a\u6211\u4eec\u81ea\u5df1\u7684\u94fe\u63a5\u5efa\u8bbe\u5de5\u4f5c\u63d0\u4f9b\u4e00\u4e2a\u7c97\u7565\u7684\u76ee\u6807\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u9700\u8981\u7528\u5230 Ahrefs \u7684 \u7f51\u7ad9\u5206\u6790 \uff08Site Explorer\uff09\u5de5\u5177\u3002 \u7f51\u7ad9\u5206\u6790 > \u8f93\u5165\u57df\u540d > \u6982\u89c8 > \u6307\u5165\u57df\u540d\u66f2\u7ebf > \u8bbe\u7f6e\u65f6\u95f4\u6bb5\u4e3a\u300e1 \u5e74\u300f (Site Explorer > Enter domain > Overview > Referring Domains graph > Set to \u2018One Year\u2019) \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u7ade\u4e89\u5bf9\u624b\uff0c\u6211\u4eec\u4f1a\u7528\u4ed6\u4eec\u5f53\u524d\u7684\u6307\u5165\u57df\u540d\u6570\u91cf\u51cf\u53bb\u4e00\u5e74\u524d\u7684\u6570\u91cf\uff0c\u7136\u540e\u9664\u4ee5 12\uff0c\u8fd9\u6837\u5b9e\u9645\u4e0a\u662f\u5f97\u5230\u4e86\u6bcf\u4e2a\u6708\u7684\u57df\u540d\u53d8\u5316\u5747\u503c\u3002 Visme \u7684\u8ba1\u7b97\u7ed3\u679c\u5982\u4e0b\uff1a (7,603 \u2014 5,599) / 12 = 167 \u4e2a\uff08\u5e73\u5747\uff09\u6708\u5ea6\u65b0\u589e\u6307\u5165\u57df\u540d \u5c0f\u63d0\u793a. \u4ee5\u4e0a\u6570\u503c\u53cd\u6620\u4e86\u6307\u5165\u57df\u540d\u6570\u91cf\u7684\u7d2f\u79ef\uff08cumulative\uff09\u589e\u957f/\u4e0b\u964d\u60c5\u51b5\u3002\u4f8b\u5982\uff0c\u67d0\u7ade\u4e89\u5bf9\u624b\u4e00\u4e2a\u6708\u5185\u65b0\u83b7\u5f97\u4e86 100 \u4e2a \u6307\u5165\u57df\u540d\uff0c\u4f46\u662f\u4e22\u5931\u4e86 10 \u4e2a \uff08\u5df2\u6709\u7684\uff09\u6307\u5165\u57df\u540d\uff0c\u90a3\u4e48\u5b83\u7d2f\u79ef\u589e\u957f\u4e86 90 \u4e2a \u6307\u5165\u57df\u540d\u3002 \u4ee5\u4e0a\u6570\u503c\u53cd\u6620\u4e86\u6307\u5165\u57df\u540d\u6570\u91cf\u7684\u7d2f\u79ef\uff08cumulative\uff09\u589e\u957f/\u4e0b\u964d\u60c5\u51b5\u3002\u4f8b\u5982\uff0c\u67d0\u7ade\u4e89\u5bf9\u624b\u4e00\u4e2a\u6708\u5185\u65b0\u83b7\u5f97\u4e86\u6307\u5165\u57df\u540d\uff0c\u4f46\u662f\u4e22\u5931\u4e86\uff08\u5df2\u6709\u7684\uff09\u6307\u5165\u57df\u540d\uff0c\u90a3\u4e48\u5b83\u7d2f\u79ef\u589e\u957f\u4e86\u6307\u5165\u57df\u540d\u3002 \u6211\u4eec\u63a5\u7740\u6765\u770b\u5176\u4ed6\u51e0\u4e2a\u7ade\u4e89\u5bf9\u624b\u7684\u5916\u94fe\u53d8\u5316\u8d8b\u52bf\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec\u60f3\u8981\u77e5\u9053\u7ade\u4e89\u5bf9\u624b\u7684\u5916\u94fe\u53d8\u5316\u5206\u5e03\u662f\u8fde\u7eed\u7684\u8fd8\u662f\u8df3\u8dc3\u7684\uff0c\u662f\u589e\u957f\u8fd8\u662f\u4e0b\u964d\u3002 \u4ee5\u4e0b\u662f Venngage \u7684\u56fe\u8868\uff0c\u4e0d\u96be\u53d1\u73b0\uff0c\u9664\u4e86 2019 \u5e74\u521d\u7684\u4e00\u6b21\u5c0f\u5e45\u8df3\u8dc3\uff0c\u8be5\u7f51\u7ad9\u7684\u6307\u5165\u57df\u540d\u589e\u957f\u8fd8\u662f\u76f8\u5bf9\u8fde\u7eed\u7684\u3002 \u8fd9\u79cd\u8df3\u8dc3\u53ef\u80fd\u662f\u81ea\u7136\u53d1\u751f\u7684\uff0c\u4e5f\u53ef\u80fd\u662f\u957f\u671f\u5916\u94fe\u5efa\u8bbe\u5de5\u4f5c\u7684\u4e00\u4e2a\u526f\u4ea7\u54c1\u3002 \u4e0d\u7ba1\u662f\u54ea\u79cd\u60c5\u51b5\uff0c\u5728\u6211\u4eec\u505a\u5b8c\u57fa\u672c\u7684\u7ade\u4e89\u5bf9\u624b\u5206\u6790\u540e\uff0c\u90fd\u503c\u5f97\u6839\u636e\u8fd9 \u4e24 \u7bc7\u6587\u7ae0 \u5bf9\u5176\u94fe\u63a5\u5206\u5e03\u5c55\u5f00\u66f4\u7ec6\u81f4\u7684\u7814\u7a76\u3002 Piktochart \u7684\u6307\u5165\u57df\u540d\u6570\u91cf\u53d8\u5316\u8f83 Venngage \u5c31\u663e\u5f97\u66f4\u52a0\u4e0d\u8fde\u7eed\u4e86\u3002 \u53bb\u5e74\u4e94\u516d\u6708\u4efd\uff0c\u4ed6\u4eec\u7684\u7f51\u7ad9\u7ecf\u5386\u4e86\u300e\u66f2\u68cd\u7403\u6746\u300f\u5f0f\u7684\u589e\u957f\uff0c\u8fd9\u53ef\u80fd\u56e0\u4e3a\u7f51\u7ad9\u4e0a\u7684\u67d0\u5219\u5185\u5bb9\u8868\u73b0\u4f18\u5f02\uff0c\u53ef\u80fd\u662f\u5230\u4e86\u5916\u94fe\u5efa\u8bbe\u5de5\u4f5c\u7684\u6536\u5272\u671f\u3002\u5f53\u7136\uff0c\u8fd9\u4e5f\u6709\u53ef\u80fd\u662f\u56e0\u4e3a\u906d\u53d7\u4e86 \u8d1f\u9762 SEO \u653b\u51fb\u3002 \u5982\u679c\u60f3\u77e5\u9053\u786e\u51ff\u7684\u7b54\u6848\uff0c\u6211\u4eec\u53ef\u4ee5\u67e5\u770b\u65b0\u589e\u6307\u5165\u57df\u540d\uff08New Referring Domains\uff09\u62a5\u544a\u3002 \u7f51\u7ad9\u5206\u6790 > \u6307\u5165\u57df\u540d > \u65b0\u589e > \u9009\u62e9\u67e5\u770b\u90a3\u6bb5\u65f6\u95f4\u7684\u6570\u636e (Site Explorer > Referring domains > New> use the data range to filter for that period\uff09 \u5982\u679c\u5927\u90e8\u5206\u7684\u57df\u540d\u770b\u8d77\u6765\u50cf\u662f\u5783\u573e\u7f51\u7ad9\uff0c\u5219\u76ee\u6807\u7f51\u7ad9\u7591\u4f3c \u906d\u53d7\u8d1f\u9762 SEO \u653b\u51fb \u3002\uff08\u63d0\u793a\uff1a\u4f60\u53ef\u4ee5\u901a\u8fc7\u67e5\u770b\u540c\u4e00\u65f6\u671f\u7684\u65b0\u589e\u5916\u94fe\u62a5\u544a\u8fdb\u884c\u786e\u8ba4\u3002\uff09 \u5982\u679c\u5927\u90e8\u5206\u7684\u94fe\u63a5\u90fd\u6307\u5411\u540c\u4e00\u7f51\u9875\uff0c\u5219\u5f88\u53ef\u80fd\u662f \u76ee\u6807\u7f51\u7ad9\u7684\u8fd9\u5219\u5185\u5bb9\u70ed\u5ea6\u8f83\u9ad8 \uff08\u5438\u5f15\u4e86\u5927\u91cf\u5916\u94fe\uff09\u3002\u5982\u679c\u8fd9\u4e2a\u6ce2\u5cf0\u662f\u8fd1\u671f\u51fa\u73b0\u7684\uff0c\u90a3\u4e48\u53ef\u4ee5\u901a\u8fc7\u7f51\u7ad9\u5206\u6790\uff08Site Explorer\uff09\u5de5\u5177\u4e2d\u7684\u6700\u4f73\u94fe\u63a5\u589e\u957f\uff08Best by Link Growth\uff09\u62a5\u544a\u8bc6\u522b\u51fa\u8fd9\u5219\u4f18\u8d28\u7684\u5185\u5bb9\u3002 \u5982\u679c\u4f60\u53d1\u73b0\u5927\u91cf\u5916\u94fe\u6e90\u81ea\u67d0\u4e00\u7c7b\u7279\u5b9a\u5185\u5bb9\u2014\u2014\u5982\uff1a\u5ba2\u5ea7\u535a\u5ba2\u3001\u8d44\u6e90\u9875\u9762\u7b49\uff0c\u90a3\u4e48\u5f88\u53ef\u80fd\u662f \u5916\u94fe\u5efa\u8bbe\u7684\u52aa\u529b \u5728\u67d0\u4e00\u65f6\u95f4\u70b9\u5f97\u5230\u4e86\u56de\u62a5\u3002 \u597d\u4e86\uff0c\u73b0\u5728\u6211\u4eec\u5c06\u6bcf\u4e2a\u7ade\u4e89\u5bf9\u624b\u7684\u76f8\u5173\u6570\u636e\u586b\u5165\u6a21\u677f\u8868\u683c\u3002","title":"3. \u7814\u7a76\u7ade\u4e89\u5bf9\u624b\u7684\u5916\u94fe\u589e\u957f"},{"location":"pages/affiliate/seo_competitor_analyze/#4-\u627e\u51fa\u7ade\u4e89\u5bf9\u624b\u7f51\u7ad9\u7684\u94c1\u7c89","text":"\u6240\u8c13\u7ade\u4e89\u5bf9\u624b\u7f51\u7ad9\u7684\u300e\u94c1\u7c89\u300f\uff0c\u5c31\u662f\u90a3\u4e9b\u5728\u591a\u79cd\u573a\u5408\u5411\u7ade\u4e89\u5bf9\u624b\u63d0\u4f9b\u5916\u94fe\u7684\u4eba\u513f~ \u6211\u4eec\u4e5f\u4f1a\u60f3\u8981\u548c\u4ed6\u4eec\u5efa\u7acb\u8054\u7cfb\uff0c\u56e0\u4e3a\u6211\u4eec\u548c\u7ade\u4e89\u5bf9\u624b\u8eab\u5904\u540c\u4e00\u884c\u4e1a\uff0c\u800c\u4e14\u8fd9\u4e9b\u4eba\u4e60\u60ef\u4e8e\u5411\u4ed6\u4eec\u4e2d\u610f\u7684\u7f51\u7ad9\u63d0\u4f9b\u5916\u94fe\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 Ahrefs \u7f51\u7ad9\u5206\u6790 \uff08Site Explorer\uff09\u7684\u6307\u5165\u57df\u540d\uff08Referring Domains\uff09\u62a5\u544a\u627e\u51fa\u8fd9\u4e9b\u4eba\u3002 \u7f51\u7ad9\u5206\u6790 > \u6307\u5165\u57df\u540d > \u6dfb\u52a0 \u201cDofollow\u201d \u8fc7\u6ee4\u6761\u4ef6 > \u6309\u6307\u5411\u7ade\u4e89\u5bf9\u624b\u7684\u94fe\u63a5\u6570\u91cf / Dofollow \u94fe\u63a5\u6570\u91cf\uff08\u4ece\u5927\u5230\u5c0f\uff09\u6392\u5e8f (Site Explorer > Referring Domains > add a \u201cDofollow\u201d filter > sort by \u201clinks to target / dofollow\u201d\uff09 \u8ba9\u6211\u4eec\u6d4f\u89c8\u4e00\u4e0b\u8fd9\u4e2a\u5217\u8868\uff0c\u627e\u51fa\u91cc\u9762\u7684\u884c\u4e1a\u535a\u5ba2\u3002 \u770b\uff0c\u627e\u5230\u4e00\u4e2a Canva \u7684\u94c1\u7c89\uff1a \u8fd9\u65f6\u6211\u4eec\u70b9\u51fb\u90a3\u4e2a\u5411\u4e0b\u7684\u7bad\u5934\u25bc\uff0c\u5c31\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u7ad9\u70b9\u7684\u8bb8\u591a\u535a\u6587\u5927\u91cf\u94fe\u5411 Canva\u3002 \u82b1 5 \u79d2\u949f\u89c2\u5bdf\u4f60\u5c31\u80fd\u77e5\u9053\uff0c\u8fd9\u5176\u5b9e\u662f\u4e00\u4f4d\u540d\u66f0 Elaine \u7684\u5973\u6027\u535a\u4e3b\u7684\u4e2a\u4eba\u535a\u5ba2\uff0c\u5979\u7edd\u5bf9\u662f\u6211\u4eec\u60f3\u8981\u5efa\u7acb\u8054\u7cfb\u5e76\u4e14\u4ecb\u7ecd\u4ea7\u54c1\u7684\u4eba\u3002 \u6211\u4eec\u9700\u8981\u4e3a\u6bcf\u4e2a\u7ade\u4e89\u5bf9\u624b\u627e\u51fa 5 \u4f4d\u300e\u94c1\u7c89\u300f\uff0c\u5e76\u628a\u4ed6\u4eec\u7684\u4fe1\u606f\u8bb0\u5165\u6a21\u677f\u8868\u683c\u3002","title":"4. \u627e\u51fa\u7ade\u4e89\u5bf9\u624b\u7f51\u7ad9\u7684\u300e\u94c1\u7c89\u300f"},{"location":"pages/affiliate/seo_competitor_analyze/#5-\u627e\u51fa\u5931\u6548\u9875\u9762","text":"\u4f60\u542c\u8bf4\u8fc7\u8c1a\u8bed\u300e\u4e00\u4e2a\u4eba\u7684\u5783\u573e\uff0c\u662f\u53e6\u4e00\u4e2a\u4eba\u7684\u8d22\u5bcc\u300f\u5417\uff1f \u7f51\u7edc\u8bed\u5883\u4e0b\u4ea6\u662f\u5982\u6b64\u3002 \u6240\u4ee5\u73b0\u5728\u6211\u4eec\u8981\u53bb\u7ade\u4e89\u5bf9\u624b\u7684\u7f51\u7ad9\u627e\u4e00\u79cd\u7279\u522b\u7684\u300e\u5783\u573e\u300f\uff1a\u5931\u6548\u9875\u9762\u3002 \u8fd9\u91cc\u9700\u8981\u7528\u5230 Ahrefs \u7f51\u7ad9\u5206\u6790 \uff08Site Explorer\uff09\u5de5\u5177\u4e2d\u7684\u6700\u4f73\u94fe\u63a5\uff08Best by Links\uff09\u62a5\u544a\u3002 \u7f51\u7ad9\u5206\u6790 > \u8f93\u5165\u7ade\u4e89\u5bf9\u624b\u57df\u540d > \u6700\u4f73\u94fe\u63a5 > \u6dfb\u52a0\u300e404 \u672a\u627e\u5230\u300f\u8fc7\u6ee4\u6761\u4ef6 > \u6309\u6307\u5165\u57df\u540d\u6570\u91cf\uff08\u4ece\u591a\u5230\u5c11\uff09\u6392\u5e8f (Site Explorer > enter competitor\u2019s domain > Best by links > add a \u201c404 not found\u201d filter >sort by the Referring domains column (high to low)) \u5c0f\u63d0\u793a. \u8fd9\u91cc\u6211\u4eec\u67e5\u770b\u7684\u662f\u4e00\u4e2a\u5b50\u57df\u540d\u7684\u5185\u5bb9\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u53ea\u67e5\u770b\u90a3\u4e9b\u5931\u6548\u7684\u4fe1\u606f\u7c7b\u9875\u9762\u5566\u3002 \u8fd9\u91cc\u6211\u4eec\u67e5\u770b\u7684\u662f\u4e00\u4e2a\u5b50\u57df\u540d\u7684\u5185\u5bb9\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u53ea\u67e5\u770b\u90a3\u4e9b\u5931\u6548\u7684\u4fe1\u606f\u7c7b\u9875\u9762\u5566\u3002 \u5982\u679c\u6211\u4eec\u53ef\u4ee5\u627e\u51fa\u7ade\u4e89\u5bf9\u624b\u7f51\u7ad9\u4e0a\u7684\u5931\u6548\u9875\u9762\uff0c\u8fd9\u4e9b\u9875\u9762\u62e5\u6709\u4e00\u4e9b\u5916\u94fe\uff0c\u5e76\u4e14\u4e0e\u6211\u4eec\u7684\u4e1a\u52a1\u6709\u67d0\u4e9b\u5173\u8054\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u597d\u597d\u5229\u7528\u4e00\u4e0b\u4e86\uff1a \u5f04\u6e05\u695a\u8fd9\u4e9b\u9875\u9762\u5931\u6548\u524d\u5305\u542b\u7684\u5185\u5bb9\uff1b \u53d1\u5e03\u4e00\u4e9b\u7c7b\u4f3c\u7684\u5185\u5bb9\uff0c\u4f46\u662f\u8981\u505a\u5230\u66f4\u597d\uff1b \u627e\u51fa\u5931\u6548\u9875\u9762\u7684\u6240\u6709\u5916\u94fe\u3010\u53ef\u4ee5\u4f7f\u7528 Ahrefs \u7f51\u7ad9\u5206\u6790 \uff08Site Explorer\uff09\u4e2d\u7684 \u5916\u94fe \uff08Backlinks\uff09\u62a5\u544a\u3011\uff1b \u8054\u7cfb\u8fd9\u4e9b\u7f51\u7ad9\u6240\u6709\u8005\uff0c\u8981\u6c42\u4ed6\u4eec\u6362\u6389\u6b7b\u94fe\u63a5\uff0c\u8f6c\u800c\u6307\u5411\u6211\u4eec\u521b\u5efa\u7684\u65b0\u5185\u5bb9\u3002 \u73b0\u5728\uff0c\u6211\u4eec\u7684\u91cd\u70b9\u662f\u7ade\u4e89\u5206\u6790\uff0c\u4e0d\u662f\u94fe\u63a5\u5efa\u8bbe\uff0c\u6211\u4eec\u5148\u628a 5 \u4e2a\u7ade\u4e89\u5bf9\u624b\u7684\u5931\u6548\u9875\u9762\u52a0\u5165\u5206\u6790\u8868\u683c\u3002 \u5c0f\u7b14\u8bb0 \u63a5\u4e0b\u6765\u7684 06\u300107 \u548c 08 \u7ae0\u8282\u5c06\u7740\u91cd\u8ba8\u8bba\u81ea\u7136\u6d41\u91cf\u3002","title":"5. \u627e\u51fa\u5931\u6548\u9875\u9762"},{"location":"pages/affiliate/seo_competitor_analyze/#6-\u7814\u7a76\u7ade\u4e89\u5bf9\u624b\u7f51\u7ad9\u81ea\u7136\u641c\u7d22\u6d41\u91cf\u5728\u5404\u56fd\u7684\u5206\u5e03","text":"\u77e5\u9053\u4e86\u7ade\u4e89\u5bf9\u624b\u7f51\u7ad9\u6d41\u91cf\u7684\u56fd\u5bb6\u5206\u5e03\uff0c\u4e5f\u5c31\u77e5\u9053\u4e86\u884c\u4e1a\u7684\u673a\u4f1a\u6240\u5728\u3002 \u8fd9\u91cc\uff0c\u6211\u4eec\u9700\u8981\u7528\u5230 Ahrefs \u7684 \u7f51\u7ad9\u5206\u6790 \uff08Site Explorer\uff09\u5de5\u5177\u3002 \u7f51\u7ad9\u5206\u6790 > \u8f93\u5165\u7ade\u4e89\u5bf9\u624b\u57df\u540d > \u6982\u89c8 > \u81ea\u7136\u641c\u7d22\u9009\u9879\u5361 (Site Explorer > enter competitor\u2019s domain > Overview > Organic search tab) \u6211\u4eec\u628a\u6392\u540d\u524d 5 \u7684\u56fd\u5bb6\u4ee5\u53ca\u4ed6\u4eec\u7684\u6d41\u91cf\u4efd\u989d\u586b\u5165\u5206\u6790\u8868\u683c\u3002 \u63a5\u7740\u5bf9\u5176\u4ed6 4 \u4e2a\u7ade\u4e89\u5bf9\u624b\u7f51\u7ad9\u4e5f\u6267\u884c\u540c\u6837\u7684\u64cd\u4f5c\uff1a \u770b\u8d77\u6765\u7f8e\u56fd\u662f\u8be5\u884c\u4e1a\u6d41\u91cf\u673a\u4f1a\u6700\u5927\u7684\u5e02\u573a\uff0c\u6211\u4eec\u7684\u7ade\u4e89\u5bf9\u624b\u5e73\u5747\u6709 ~31% \u7684\u6d41\u91cf\u6765\u81ea\u7f8e\u56fd\u3002 \u5176\u4ed6\u8bf4\u82f1\u8bed\u7684\u56fd\u5bb6\u2014\u2014\u5982\u82f1\u56fd\u548c\u52a0\u62ff\u5927\u2014\u2014\u4e5f\u6709\u4e00\u4e9b\u673a\u4f1a\u3002 \u4e8e\u662f\u6211\u4eec\u73b0\u5728\u5c31\u77e5\u9053\u4e86\uff0c\u5e94\u8be5\u628a\u5185\u5bb9\u521b\u4f5c\u7684\u91cd\u5fc3\u653e\u5728\u8fd9\u4e9b\u56fd\u5bb6\uff0c\u4ed6\u4eec\u540c\u65f6\u4e5f\u662f\u641c\u7d22\u91cf\u6700\u5927\u7684\u533a\u57df\u3002\u8fd9\u4e0d\u8db3\u4e3a\u5947\u3002 \u6b64\u5916\uff0c\u62c9\u7f8e\u548c\u4e9a\u6d32\u5e02\u573a\u4f3c\u4e4e\u4e5f\u6709\u4e00\u4e9b\u6d41\u91cf\u6f5c\u529b\uff0c\u6211\u4eec\u4e0d\u7531\u5730\u60f3\uff1a\u6216\u8bb8\u6211\u4eec\u5e94\u8be5\u628a\u8fd9\u4e2a\u5047\u60f3\uff08\u4ea7\u54c1\uff09\u7684\u7740\u9646\u9875\u7ffb\u8bd1\u6210\u897f\u73ed\u7259\u8bed\uff0c\u5370\u5ea6\u8bed\u6216\u8005\u5370\u5c3c\u8bed\uff1f \u6211\u4eec\u751a\u81f3\u5e94\u8be5\u53d1\u5e03\u4e00\u4e2a\u591a\u8bed\u79cd\u7684\u535a\u5ba2\u6765\u6700\u5927\u5316\u6765\u81ea\u8fd9\u4e9b\u56fd\u5bb6\u7684\u6d41\u91cf\u3002 \u5728 Ahrefs \u6211\u4eec\u5c31\u662f\u8fd9\u4e48\u505a\u7684\uff0c\u6211\u4eec\u73b0\u5728\u5f00\u8bbe\u4e86 \u897f\u8bed \u548c \u4e2d\u6587\u535a\u5ba2 \u3002 \u6211\u4eec\u6709\u8bb8\u591a\u7740\u9646\u9875\u4e5f\u652f\u6301\u4ee5\u591a\u8bed\u8a00\u663e\u793a\u3002 \u4e13\u4e1a\u63d0\u793a \u5355\u770b\u81ea\u7136\u641c\u7d22\u6d41\u91cf\u7684\u6570\u5b57\u6709\u65f6\u53ef\u80fd\u4f1a\u53d7\u5230\u8bef\u5bfc\uff0c\u56e0\u4e3a\u6d41\u91cf\u591a\u5c11\u5e76\u4e0d\u603b\u80fd\u4ee3\u8868\u6d41\u91cf\u4ef7\u503c\u3002 \u6bd4\u5982\uff0cVismeI \u4ece\u82f1\u56fd\u548c\u58a8\u897f\u54e5\u83b7\u5f97\u7684\u6d41\u91cf\u5dee\u4e0d\u591a\u3002 \u4f46\u662f\u628a\u8fd9\u4e24\u4e2a\u56fd\u5bb6\uff08\u82f1\u56fd vs. \u58a8\u897f\u54e5\uff09\u7684\u6d41\u91cf\u4ef7\u503c\u4e00\u6bd4\u2026\u2026 \u82f1\u56fd\u7684\u6d41\u91cf\u4ef7\u503c\u6bd4\u58a8\u897f\u54e5\u9ad8 7 \u500d\u591a\uff01 \u6240\u4ee5\u4f18\u5148\u63a8\u8fdb\u82f1\u56fd\u7684\u6d41\u91cf\u589e\u957f\u6bd4\u8f83\u8bf4\u7684\u901a\u3002 \u70b9\u51fb \u8fd9\u91cc \u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u6211\u4eec\u8ba1\u7b97\u6d41\u91cf\u4ef7\u503c\u7684\u65b9\u6cd5\u3002","title":"6. \u7814\u7a76\u7ade\u4e89\u5bf9\u624b\u7f51\u7ad9\uff08\u81ea\u7136\u641c\u7d22\uff09\u6d41\u91cf\u5728\u5404\u56fd\u7684\u5206\u5e03"},{"location":"pages/affiliate/seo_competitor_analyze/#7-\u76d1\u89c6\u7ade\u4e89\u5bf9\u624b\u7f51\u7ad9\u7684\u81ea\u7136\u641c\u7d22\u5173\u952e\u8bcd","text":"\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053\u54ea\u4e9b\u5173\u952e\u8bcd\u6b63\u5728\u4e3a\u7ade\u4e89\u5bf9\u624b\u7684\u7f51\u7ad9\u8f93\u9001\u6d41\u91cf\u3002 \u5bf9\u6bcf\u4e2a\u7ade\u4e89\u5bf9\u624b\u7684\u57df\u540d\u751f\u6210 \u81ea\u7136\u641c\u7d22\u5173\u952e\u8bcd\uff08Organic Keywords\uff09 \u62a5\u544a\u5373\u53ef\u3002 \u7f51\u7ad9\u5206\u6790 > \u8f93\u5165\u7ade\u4e89\u5bf9\u624b\u57df\u540d > \u81ea\u7136\u641c\u7d22 > \u81ea\u7136\u641c\u7d22\u5173\u952e\u8bcd (Site Explorer > enter competitor\u2019s domain > Organic search > Organic keywords) \u4ece\u4e0a\u56fe\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u76ee\u524d visme.co \u5728\u7f8e\u56fd\u4e4b\u4e8e 133,667 \u4e2a\u5173\u952e\u8bcd\u6709\u6392\u540d\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c \u81ea\u7136\u641c\u7d22\u5173\u952e\u8bcd \u62a5\u544a\u5c55\u793a\u7684\u662f\u81ea\u7136\u641c\u7d22\u6d41\u91cf\u6700\u5927\u7684\u56fd\u5bb6\u7684\u5173\u952e\u8bcd\u6392\u540d\u3002\u8fd9\u6ca1\u95ee\u9898\uff0c\u4f46\u662f\u5982\u679c\u4f60\u60f3\u8981\u770b\u53e6\u4e00\u4e2a\u56fd\u5bb6\u7684\u5173\u952e\u8bcd\u6d41\u91cf\u6570\u636e\uff0c\u53ef\u4ee5\u70b9\u51fb\u300e\u66f4\u591a\u300f\uff08More\u25bc\uff09\u6309\u94ae\uff0c\u5e76\u4ece\u6211\u4eec \u6570\u636e\u5e93 \u4e2d\u7684 150 \u591a\u4e2a\u56fd\u5bb6\u4e2d\u8fdb\u884c\u9009\u62e9\u3002 \u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u6311\u51fa\u4e00\u4e9b\u300e\u80a5\u6c83\u300f\u7684\u5173\u952e\u8bcd\u8fdb\u884c\u6807\u7684\u4e86\u3002 \u8bf8\u5982 \u201cinfographic maker\u201d, \u201cinfographic creator\u201d \u7b49\u5173\u952e\u8bcd\u4e00\u4e0b\u5c31\u6620\u5165\u4e86\u773c\u5e18\u3002\u5f53\u7136\uff0c\u5176\u4e2d\u8fd8\u6709\u5f88\u591a\u65e0\u5173\u7684\u5173\u952e\u8bcd\u5728\u6405\u6d51\u6c34\u3002 \u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u300e\u6392\u9664\u300f\uff08exclude\uff09\u529f\u80fd\uff0c\u8fc7\u6ee4\u6389\u6240\u6709\u7684\u54c1\u724c\u8bcd\u3002 \u540c\u65f6\u6211\u8fd8\u4f1a\u8fc7\u6ee4\u51fa\u7ade\u4e89\u5bf9\u624b\u6392\u540d\u8fdb\u5165 SERP \u7b2c\u4e00\u9875\uff081~10 \u540d\uff09\u7684\u5173\u952e\u8bcd\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u53ea\u770b\u5230\u6700\u6700\u76f8\u5173\u7684\u5173\u952e\u8bcd\u3002 \u8fd9\u91cc\u6211\u4eec\u4e0d\u4f1a\u4ecb\u7ecd\u8fc7\u4e8e\u590d\u6742\u7684\u5185\u5bb9\u3002\u53ea\u662f\u5c06\u6700\u76f8\u5173\u7684\u3001\u975e\u54c1\u724c\u540d\u7684\u3001\u8f93\u9001\u6d41\u91cf\u6700\u591a\u7684\u524d 5 \u4e2a\u5173\u952e\u8bcd\u548c\u5b83\u4eec\u7684\u6708\u5ea6\u641c\u7d22\u91cf\u5206\u522b\u8bb0\u5f55\u5728\u4e86\u5404\u4e2a\u7ade\u4e89\u5bf9\u624b\u7684\u540d\u4e0b\uff1a \u5176\u4e2d\u7684\u4e00\u4e9b\u5173\u952e\u8bcd\u4e0e\u6211\u4eec\u7f51\u7ad9\u7684\u4e3b\u9875\u975e\u5e38\u5339\u914d\uff0c\u800c\u53e6\u5916\u4e00\u4e9b\u5219\u66f4\u9002\u5408\u535a\u6587\u3010\u5982\uff1a\u300e\u4fe1\u606f\u56fe\u8868\u662f\u4ec0\u4e48\uff1f\u300f\uff08what is an infographic?\uff09\u3011\u3002 \u5c0f\u63d0\u793a. \u5982\u679c\u4f60\u4e00\u8def\u770b\u5230\u8fd9\u91cc\uff0c\u53ea\u662f\u60f3\u4e3a\u7f51\u7ad9\u4e3b\u9875\u627e\u51fa\u4e00\u4e9b\u5173\u952e\u8bcd\u7684\u63d0\u793a\uff0c\u90a3\u4e48\u53ef\u4ee5\u5728\u7f51\u7ad9\u5206\u6790\uff08Site Explorer\uff09\u5de5\u5177\u4e2d\u5c06\u57df\u540d\uff08\u201d .domain/ \u201d\uff09\u6a21\u5f0f\u66ff\u6362\u4e3a\u94fe\u63a5\uff08\u201c URL \u201d\uff09\u6a21\u5f0f\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u4f60\u5c31\u53ef\u4ee5\u53ea\u770b\u4e0e\u7f51\u7ad9\u4e3b\u9875\u76f8\u5173\u7684\u5173\u952e\u8bcd\u5efa\u8bae\u4e86\u3002\u4f46\u662f\u4f9d\u7136\u522b\u5fd8\u4e86\u628a\u54c1\u724c\u8bcd\u4ece\u62a5\u544a\u4e2d\u8fc7\u6ee4\u6389\u3002 \u5982\u679c\u4f60\u4e00\u8def\u770b\u5230\u8fd9\u91cc\uff0c\u53ea\u662f\u60f3\u4e3a\u7f51\u7ad9\u4e3b\u9875\u627e\u51fa\u4e00\u4e9b\u5173\u952e\u8bcd\u7684\u63d0\u793a\uff0c\u90a3\u4e48\u53ef\u4ee5\u5728\u7f51\u7ad9\u5206\u6790\uff08Site Explorer\uff09\u5de5\u5177\u4e2d\u5c06\u57df\u540d\uff08\u201d .domain/ \u201d\uff09\u6a21\u5f0f\u66ff\u6362\u4e3a\u94fe\u63a5\uff08\u201c\u201d\uff09\u6a21\u5f0f\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u4f60\u5c31\u53ef\u4ee5\u53ea\u770b\u4e0e\u7f51\u7ad9\u4e3b\u9875\u76f8\u5173\u7684\u5173\u952e\u8bcd\u5efa\u8bae\u4e86\u3002\u4f46\u662f\u4f9d\u7136\u522b\u5fd8\u4e86\u628a\u54c1\u724c\u8bcd\u4ece\u62a5\u544a\u4e2d\u8fc7\u6ee4\u6389\u3002 \u4e13\u4e1a\u63d0\u793a \u6211\u4eec\u8bb0\u5f55\u5728\u6848\u7684\u5173\u952e\u8bcd\u4e2d\uff0c\u6709\u4e00\u4e9b\u7684 \u5173\u952e\u8bcd\uff08\u7684\u6392\u540d\uff09\u96be\u5ea6 \uff08Keyword Difficulty\uff09\u9887\u9ad8\u3002\u8fd9\u610f\u5473\u7740\u5982\u679c\u6ca1\u6709\u5145\u5206\u7684\u5916\u94fe\u652f\u6301\uff0c\u63d0\u5347\u8fd9\u4e9b\u5173\u952e\u8bcd\u7684\u6392\u540d\u4f1a\u975e\u5e38\u56f0\u96be\u3002 \u6bd4\u5982\uff0c\u201cinfographic maker\u201d \u7684\u5173\u952e\u8bcd\u96be\u5ea6\u9ad8\u8fbe 73\u2026\u2026 \u9700\u8981\u6765\u81ea\u5927\u7ea6 ~235 \u4e2a\u6307\u5165\u57df\u540d\u7684\u5916\u94fe\u624d\u80fd\u6324\u8fdb SERP \u524d 10\u3002 \u63a8\u8350\u9605\u8bfb \uff1a \u6211\u4eec\u5982\u4f55\u8ba1\u7b97\u5173\u952e\u8bcd\u96be\u5ea6 \u3002 \u6211\u4eec\u6682\u65f6\u8fd8\u4e0d\u592a\u5173\u5fc3\u8fd9\u9879\u6307\u6807\uff0c\u6bd5\u7adf\u6211\u4eec\u8981\u627e\u5bfb\u7684\u6b63\u662f\u8fd9\u4e9b\u300e\u7ec8\u6781\u76ee\u6807\u300f\u5173\u952e\u8bcd\u3002 \u5982\u679c\u4f60\u503e\u5411\u4e8e\u627e\u51fa\u90a3\u4e9b\u6392\u540d\u6709\u673a\u4f1a\u5728\u4e2d\u77ed\u671f\u6324\u8fdb SERP \u524d 10 \u7684\u5173\u952e\u8bcd\uff0c\u53ef\u4ee5\u628a\u90a3\u4e9b\u96be\u5ea6\u8f83\u4f4e\u7684\u5173\u952e\u8bcd\u8fc7\u6ee4\u51fa\u6765\u3002","title":"7. \u76d1\u89c6\u7ade\u4e89\u5bf9\u624b\u7f51\u7ad9\u7684\u81ea\u7136\u641c\u7d22\u5173\u952e\u8bcd"},{"location":"pages/affiliate/seo_competitor_analyze/#8-\u76d1\u89c6\u7ade\u4e89\u5bf9\u624b\u7684\u7cbe\u9009\u6458\u8981","text":"\u5728\u5206\u6790\u7ade\u4e89\u5bf9\u624b\u81ea\u7136\u641c\u7d22\u6d41\u91cf\u7684\u65f6\u5019\uff0c\u8fd8\u6709\u4e00\u70b9\u9700\u8981\u6ce8\u610f\uff1a \u6392\u540d\u5173\u952e\u8bcd\u7684 SERP \u7279\u6027\u3002 \u6839\u636e \u6211\u4eec\u7684\u7814\u7a76 \uff0c~12% \u7684\u641c\u7d22\u4f1a\u89e6\u53d1\u300e\u7cbe\u9009\u6458\u8981\u300f\uff08Featured Snippet\uff09\u7279\u6027\u3002 \u7cbe\u9009\u6458\u8981\u5360\u636e\u4e86 SERP \u7b2c\u4e00\u9875 ~9% \u7684\u70b9\u51fb\u91cf\u3002 \u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5148\u5c06\u91cd\u70b9\u653e\u5728\u7ade\u4e89\u5bf9\u624b\u7684\u7cbe\u9009\u6458\u8981\u4e0a\u3002 \u9996\u5148\uff0c\u6211\u4eec\u8981\u77e5\u9053\u7ade\u4e89\u5bf9\u624b\u62e5\u6709\u54ea\u4e9b\u7cbe\u9009\u6458\u8981\uff0c\u5bf9\u5e94\u7684\u641c\u7d22\u77ed\u8bed\u662f\u4ec0\u4e48\u3002\u8fd9\u65f6\u9700\u8981\u7528\u5230 Ahrefs \u7684 \u7f51\u7ad9\u5206\u6790 \uff08Site Explorer\uff09\u5de5\u5177\u3002 \u7f51\u7ad9\u5206\u6790 > \u8f93\u5165\u7ade\u4e89\u5bf9\u624b\u57df\u540d > \u81ea\u7136\u641c\u7d22 > \u81ea\u7136\u641c\u7d22\u5173\u952e\u8bcd > SERP \u7279\u6027\u8fc7\u6ee4 > \u7cbe\u9009\u6458\u8981 > \u4ec5\u94fe\u5411\u76ee\u6807 (Site Explorer > enter competitor\u2019s domain > Organic search > Organic keywords > SERP features filter > Featured snippets > Only linking to target) Piktochart \u73b0\u5728\u7f8e\u56fd\u62e5\u6709 87 \u5219\u7cbe\u9009\u6458\u8981\uff0c\u4e3a\u7f51\u7ad9\u8f93\u9001\u4e86\u4e0d\u5c11\u6d41\u91cf\u3002 Visme \u62e5\u6709\u5dee\u4e0d\u591a 216 \u5219\u7cbe\u9009\u6458\u8981\u3002 \u6211\u4eec\u628a\u8fd9\u4e9b\u6570\u5b57\u5206\u522b\u586b\u5165\u5bf9\u5e94\u7684\u7ade\u4e89\u5bf9\u624b\u540d\u4e0b\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u5982\u679c\u7ade\u4e89\u5bf9\u624b\u80fd\u83b7\u5f97\u5f88\u591a\u7cbe\u9009\u6458\u8981\uff0c\u90a3\u4e48\u6211\u4eec\u4e5f\u4f1a\u6709\u540c\u6837\u7684\u673a\u4f1a\u3002 \u5229\u7528\u8be5\u7279\u6027\u83b7\u53d6\u81ea\u7136\u641c\u7d22\u6d41\u91cf\u751a\u81f3\u66f4\u52a0\u7b80\u5355\uff0c\u56e0\u4e3a\u5e76\u4e0d\u603b\u662f\u6392\u540d\u7b2c 1 \u7684\u7ed3\u679c\u9875\u9762\u62e5\u6709\u7cbe\u9009\u6458\u8981\u7248\u4f4d\u3002 \u4e8b\u5b9e\u4e0a\uff0c52% \u7684\u7cbe\u9009\u6458\u8981\u6765\u81ea\u6392\u540d 2~5 \u7684\u7ed3\u679c\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u5373\u4f7f\u67d0\u5173\u952e\u8bcd\u7684 SERP \u7ade\u4e89\u76f8\u5f53\u6fc0\u70c8\uff0c\u53ea\u8981\u6211\u4eec\u6324\u8fdb\u524d 5 \u540d\uff0c\u4f9d\u7136\u6709\u673a\u4f1a\u83b7\u5f97\u7cbe\u9009\u6458\u8981\u7248\u4f4d\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5373\u4f7f\u67d0\u5173\u952e\u8bcd\u7684 SERP \u7ade\u4e89\u76f8\u5f53\u6fc0\u70c8\uff0c\u53ea\u8981\u6211\u4eec\u6324\u8fdb\u524d 5 \u540d\uff0c\u4f9d\u7136\u6709\u673a\u4f1a\u83b7\u5f97\u7cbe\u9009\u6458\u8981\u7248\u4f4d\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5373\u4f7f\u67d0\u5173\u952e\u8bcd\u7684 SERP \u7ade\u4e89\u76f8\u5f53\u6fc0\u70c8\uff0c\u53ea\u8981\u6211\u4eec\u6324\u8fdb\u524d 5 \u540d\uff0c\u4f9d\u7136\u6709\u673a\u4f1a\u83b7\u5f97\u7cbe\u9009\u6458\u8981\u7248\u4f4d\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u5373\u4f7f\u67d0\u5173\u952e\u8bcd\u7684 SERP \u7ade\u4e89\u76f8\u5f53\u6fc0\u70c8\uff0c\u53ea\u8981\u6211\u4eec\u6324\u8fdb\u524d 5 \u540d\uff0c\u4f9d\u7136\u6709\u673a\u4f1a\u83b7\u5f97\u7cbe\u9009\u6458\u8981\u7248\u4f4d\u3002 \u63a8\u8350\u9605\u8bfb \uff1a \u5982\u4f55\u5bfb\u627e\u7cbe\u9009\u6458\u8981\uff08\u5f97\u5230\u66f4\u591a\u7684\u641c\u7d22\u6d41\u91cf\uff09 \u5c0f\u7b14\u8bb0 \u6211\u4eec\u5c06\u5728\u63a5\u4e0b\u6765\u7684 09\u300110 \u548c 11 \u7ae0\u8282\u6df1\u5165\u7814\u7a76\u7ade\u4e89\u5bf9\u624b\u7684\u5185\u5bb9\u3002","title":"8. \u76d1\u89c6\u7ade\u4e89\u5bf9\u624b\u7684\u7cbe\u9009\u6458\u8981"},{"location":"pages/affiliate/seo_competitor_analyze/#9-\u5185\u5bb9\u5dee\u8ddd","text":"\u5185\u5bb9\u5dee\u8ddd\u6307\u7ade\u4e89\u5bf9\u624b\u7684\u7f51\u7ad9\u300e\u6709\u6392\u540d\u300f\uff0c\u800c\u4f60\u7684\u7f51\u7ad9\u300e\u6ca1\u6709\u6392\u540d\u300f\u7684\u5173\u952e\u8bcd\u3002 \u65e0\u9700\u8d58\u8ff0\uff0c\u4f60\u9700\u8981\u586b\u8865\u8fd9\u4e00\u5dee\u8ddd\u3002 \u9996\u5148\u53ef\u4ee5\u4f7f\u7528 Ahrefs \u7684 \u5185\u5bb9\u5dee\u8ddd\u5206\u6790 \uff08Content Gap\uff09\u5de5\u5177\u627e\u51fa\u8fd9\u4e9b\u5dee\u8ddd\u3002 \u7f51\u7ad9\u5206\u6790 > \u8f93\u5165\u4f60\u7684\u57df\u540d > \u5185\u5bb9\u5dee\u8ddd\u5206\u6790 (Site Explorer > enter your domain > Content Gap) \u4f60\u4f1a\u53d1\u73b0\u6211\u4eec\u7684\u57df\u540d\u5df2\u7ecf\u51fa\u73b0\u5728 \u4f46\u662f\u4ee5\u4e0b\u76ee\u6807\u672a\u53d6\u5f97\u76f8\u5173\u5173\u952e\u8bcd\u7684\u6392\u540d\uff08But the following target doesn\u2019t rank for\uff09\u5b57\u6bb5\u4e86\u3002 \u73b0\u5728\u6211\u4eec\u9700\u8981\u5c06\u7ade\u4e89\u5bf9\u624b\u7684\u57df\u540d\u586b\u5165\u5176\u4ed6\u5b57\u6bb5\u3002 \u8fd9\u91cc\u6211\u4eec\u8bbe\u7f6e\u6210\u5c55\u793a\u4ee5\u4e0b\u6240\u6709 \u76ee\u6807\u90fd\u6709\u6392\u540d\u7684\u5173\u952e\u8bcd \uff08Show keywords that all of the below targets rank for\uff09,\u5e76\u52fe\u9009\u81f3\u5c11\u6709\u4e00\u4e2a\u76ee\u6807\u7684\u5173\u952e\u8bcd\u6392\u540d\u8fdb\u5165\u524d 10\uff08at least one of the targets should rank in the top 10\uff09\u9009\u9879\u3002 \u4ee5\u4e0a\u5c31\u662f\u62a5\u544a\u8fd4\u56de\u7684\u7ed3\u679c\uff0c\u4f60\u4f1a\u53d1\u73b0\u5176\u4e2d\u6709\u4e0d\u5c11\u9ad8\u5ea6\u76f8\u5173\u7684\u5173\u952e\u8bcd\u3002 \u5c0f\u63d0\u793a. \u5982\u679c\u4f60\u6ca1\u6709\u53d1\u73b0\u4efb\u4f55\u76f8\u5173\u7684\u5173\u952e\u8bcd\uff0c\u53ef\u4ee5\u7a0d\u5fae\u653e\u5bbd\u8bbe\u7f6e\uff0c\u9009\u62e9\u76ee\u6807\u4e2d\u7684\u4e24\u4e2a\u3001\u4e09\u4e2a\u6216\u8005\u56db\u4e2a\u90fd\u6709\u6392\u540d\u7684\u5173\u952e\u8bcd\uff0c\u800c\u4e0d\u8981\u9009\u62e9\u6240\u6709\u76ee\u6807\u90fd\u6709\u6392\u540d\u7684\u5173\u952e\u8bcd\u3002 \u5982\u679c\u4f60\u6ca1\u6709\u53d1\u73b0\u4efb\u4f55\u76f8\u5173\u7684\u5173\u952e\u8bcd\uff0c\u53ef\u4ee5\u7a0d\u5fae\u653e\u5bbd\u8bbe\u7f6e\uff0c\u9009\u62e9\u76ee\u6807\u4e2d\u7684\u4e24\u4e2a\u3001\u4e09\u4e2a\u6216\u8005\u56db\u4e2a\u90fd\u6709\u6392\u540d\u7684\u5173\u952e\u8bcd\uff0c\u800c\u4e0d\u8981\u9009\u62e9\u6240\u6709\u76ee\u6807\u90fd\u6709\u6392\u540d\u7684\u5173\u952e\u8bcd\u3002 \u6211\u4eec\u8d44\u6e90\u6709\u9650\uff0c\u6807\u7684\u6240\u6709\u8fd9\u4e9b\u5173\u952e\u8bcd\u53bb\u505a\u6392\u540d\u663e\u7136\u662f\u4e0d\u53ef\u80fd\u7684\u3002 \u4e8e\u662f\u6211\u4eec\u9700\u8981\u8bbe\u7f6e\u4e00\u4e9b\u8fc7\u6ee4\u6761\u4ef6\uff0c\u5c06\u641c\u7d22\u91cf\u8f83\u5927\u3001\u6392\u540d\u96be\u5ea6\u5c5e\u4e8e\u4e2d\u4f4e\u6c34\u5e73\u7684\u5173\u952e\u8bcd\u673a\u4f1a\u627e\u51fa\u6765\u3002 \u8f83\u4f4e\u7684\u96be\u5ea6\u5f97\u5206\u610f\u5473\u7740\u53d6\u5f97\u8fd9\u4e9b\u5173\u952e\u8bcd\u7684\u6392\u540d\u76f8\u5bf9\u5bb9\u6613\uff0c\u800c\u53ef\u89c2\u7684\u641c\u7d22\u91cf\u610f\u5473\u7740\u53d6\u5f97\u8fd9\u4e9b\u6392\u540d\u53ef\u4ee5\u6709\u6548\u63d0\u632f\u7f51\u7ad9\u7684\u81ea\u7136\u641c\u7d22\u6d41\u91cf\u3002 \u53ef\u662f\uff0c\u5176\u4e2d\u6709\u4e9b\u5173\u952e\u8bcd\u5df2\u7ecf\u51fa\u73b0\u5728\u4e86\u6211\u4eec\u4e4b\u524d\u7684\u5206\u6790\u7ed3\u679c\u4e2d\u3002 \u6240\u4ee5\u8fd9\u91cc\u6211\u4eec\u53ea\u5c06\u6700\u76f8\u5173\u7684\u65b0\u5173\u952e\u8bcd\u6dfb\u52a0\u8fdb\u5206\u6790\u8868\u683c\u3002","title":"9. \u5185\u5bb9\u5dee\u8ddd"},{"location":"pages/affiliate/seo_competitor_analyze/#10-\u627e\u51fa\u7ade\u4e89\u5bf9\u624b\u7684\u70ed\u95e8\u5185\u5bb9","text":"\u5173\u952e\u8bcd\u8c03\u7814 \u4f9d\u7136\u662f SEO \u6700\u91cd\u8981\u7684\u5de5\u4f5c\u4e4b\u4e00\uff0c\u4f46\u662f\u73b0\u5728\uff0c\u8c37\u6b4c\u5bf9\u641c\u7d22\u610f\u56fe\u7684\u7406\u89e3\u53ef\u4ee5\u8bf4\u6bd4\u4ee5\u5f80\u4efb\u4f55\u65f6\u5019\u90fd\u597d\u3002 \u6b63\u56e0\u5982\u6b64\uff0c\u67d0\u4e9b\u7f51\u9875\u624d\u53ef\u4ee5\u8f7b\u6613\u5730\u53d6\u5f97\u6210\u767e\u4e0a\u5343\u4e2a\u957f\u5c3e\u5173\u952e\u8bcd\u7684\u6392\u540d\u3002 \u627e\u51fa\u7ade\u4e89\u5bf9\u624b\u7684\u70ed\u95e8\u9875\u9762\uff0c\u6211\u4eec\u5c31\u80fd\u5f04\u6e05\u695a\u4ed6\u4eec\u7684\u54ea\u4e9b\u6587\u7ae0\uff1a \u53d6\u5f97\u4e86\u5927\u91cf\u5173\u952e\u8bcd\u7684\u6392\u540d\uff1b \u652b\u53d6\u4e86\u5927\u91cf\u7684\u6d41\u91cf\u3002 \u63a5\u7740\u6211\u4eec\u5c31\u53ef\u4ee5\u56f4\u7ed5\u8fd9\u4e9b\u5305\u7f57\u4e07\u8c61\u7684\u8bdd\u9898\u64b0\u5199\u5185\u5bb9\uff0c\u8d5a\u53d6\u4e00\u4e9b \u957f\u5c3e\u5173\u952e\u8bcd \u6d41\u91cf\u3002 \u8fd9\u65f6\uff0c\u4f60\u9700\u8981\u4f7f\u7528 Ahrefs \u7f51\u7ad9\u5206\u6790 \uff08Site Explorer\uff09\u4e2d\u7684\u70ed\u95e8\u9875\u9762\uff08Top Pages\uff09\u62a5\u544a\u3002 \u6ce8\u610f\uff0c\u8fd9\u91cc\u6211\u4eec\u66f4\u611f\u5174\u8da3\u7684\u662f\u627e\u51fa\u535a\u5ba2\u6587\u7ae0\uff0c\u56e0\u6b64\u5f85\u5206\u6790\u7684\u5e94\u8be5\u662f\u7ade\u4e89\u5bf9\u624b\u7f51\u7ad9\u7684\u535a\u5ba2\u76ee\u5f55\u94fe\u63a5/\u5b50\u57df\u540d\uff0c\u800c\u975e\u6839\u57df\u540d\u3002 \u7f51\u7ad9\u5206\u6790 > \u8f93\u5165\u7ade\u4e89\u5bf9\u624b\u7684\u57df\u540d > \u9009\u62e9\u300e\u524d\u7f00\u300f\u6a21\u5f0f > \u70ed\u95e8\u9875\u9762 (Site Explorer > enter competitor\u2019s domain > select \u201cprefix\u201d mode > Top pages) \u4e13\u4e1a\u63d0\u793a \u4e0d\u77e5\u9053\u7ade\u4e89\u5bf9\u624b\u7684\u535a\u5ba2\u5730\u5740\uff1f \u53ef\u4ee5\u5728\u7f51\u7ad9\u5206\u6790\uff08Site Explorer\uff09\u5de5\u5177\u7684 \u70ed\u95e8\u5b50\u76ee\u5f55\uff08Top subfolders\uff09 \u62a5\u544a\u4e2d\u5bfb\u627e\u535a\u5ba2\u8def\u5f84\u3002 \u5982\u679c\u627e\u4e0d\u5230\uff0c\u53ef\u4ee5\u5207\u6362\u5230 \u70ed\u95e8\u5b50\u57df\u540d\uff08Top subdomains\uff09 \u62a5\u544a\u3002\u6709\u4e9b\u7f51\u7ad9\u5c06\u535a\u5ba2\u8bbe\u7acb\u5728\u5b50\u57df\u540d\u4e0a\u3002 \u65e0\u8bba\u662f\u5728\u5b50\u76ee\u5f55\u8fd8\u662f\u5b50\u57df\u540d\uff0c\u535a\u5ba2\u5360\u636e\u7684\u7f51\u7ad9\u6d41\u91cf\u4efd\u989d\uff08%\uff09\u90fd\u5e94\u8be5\u5728\u4e24\u4f4d\u6570\u3002\u5982\u679c\u4e0d\u8db3\u4e24\u4f4d\u6570\uff0c\u5f88\u53ef\u80fd\u7ade\u4e89\u5bf9\u624b\u7684\u535a\u6587\u5e76\u4e0d\u662f\u6309\u7167\u5b50\u76ee\u5f55/\u5b50\u57df\u540d\u7684\u94fe\u63a5\u7ed3\u6784\u653e\u7f6e\u7684\u3002 \u8fd9\u65f6\uff0c\u4f60\u8fd8\u662f\u5e94\u8be5\u9009\u7528\u57df\u540d\u5206\u6790\u3002 \u5728\u62a5\u544a\u4e2d\uff0c\u6211\u4eec\u6ce8\u610f\u5230\u81ea\u7136\u641c\u7d22\u6d41\u91cf\u6700\u5927\u7684\u9875\u9762\u5f80\u5f80\u6709\u7740\u5927\u91cf\u7684\u6307\u5165\u57df\u540d\u3002\u8fd9\u4e0d\u8db3\u4e3a\u5947\uff0c\u6bd5\u7adf\u5916\u94fe\u662f\u91cd\u8981\u7684\u6392\u540d\u5f71\u54cd\u56e0\u7d20\u3002 \u6211\u4eec\u6765\u6d4f\u89c8\u4e00\u4e0b\u6bcf\u4e2a\u7ade\u4e89\u5bf9\u624b\u7684\u62a5\u544a\uff0c\u7279\u522b\u6ce8\u610f\u57df\u540d\u8bc4\u7ea7\u90a3\u4e00\u5217\u3002 \u6211\u4eec\u8981\u627e\u7684\u662f\u90a3\u4e9b\u6d41\u91cf\u5f88\u5927\u4f46\u662f\u6307\u5165\u57df\u540d\u6570\u91cf\u8f83\u5c11\u7684\u9875\u9762\uff0c\u56e0\u4e3a\u8981\u4e0e\u8fd9\u4e9b\u9875\u9762\u7ade\u4e89\u5173\u952e\u8bcd\u6392\u540d\u76f8\u5bf9\u7b80\u5355\u3002 \u6211\u4eec\u4ece\u6bcf\u4e2a\u7ade\u4e89\u5bf9\u624b\u7684\u7f51\u7ad9\u6311\u9009\u51fa\u4e86 5 \u4e2a\u6700\u76f8\u5173\u7684\u9875\u9762\uff0c\u8fde\u540c\u5b83\u4eec\u7684\u6d41\u91cf\u6570\u636e\u4e00\u8d77\u586b\u5165\u5206\u6790\u8868\u683c\u3002 \u5c0f\u63d0\u793a. \u5982\u679c\u4f60\u60f3\u77e5\u9053\u8fd9\u4e9b\u70ed\u95f9\u9875\u9762\u4e4b\u4e8e\u54ea\u4e9b\u5173\u952e\u8bcd\u6709\u6392\u540d\uff0c\u53ef\u80fd\u70b9\u51fb\u5173\u952e\u8bcd\u5217\u7ed3\u679c\u53f3\u4fa7\u7684\u5411\u4e0b\u7bad\u5934\u25bc\u3002 \u5982\u679c\u4f60\u60f3\u77e5\u9053\u8fd9\u4e9b\u70ed\u95f9\u9875\u9762\u4e4b\u4e8e\u54ea\u4e9b\u5173\u952e\u8bcd\u6709\u6392\u540d\uff0c\u53ef\u80fd\u70b9\u51fb\u5173\u952e\u8bcd\u5217\u7ed3\u679c\u53f3\u4fa7\u7684\u5411\u4e0b\u7bad\u5934\u25bc\u3002","title":"10. \u627e\u51fa\u7ade\u4e89\u5bf9\u624b\u7684\u70ed\u95e8\u5185\u5bb9"},{"location":"pages/affiliate/seo_competitor_analyze/#11-\u627e\u51fa\u7ade\u4e89\u5bf9\u624b\u7f51\u7ad9\u5916\u94fe\u6700\u591a\u7684\u5185\u5bb9","text":"\u6211\u4eec\u4ece\u6bcf\u4e2a\u7ade\u4e89\u5bf9\u624b\u7684\u7f51\u7ad9\u6311\u9009\u51fa\u4e86 5 \u4e2a\u6700\u76f8\u5173\u7684\u9875\u9762\uff0c\u8fde\u540c\u5b83\u4eec\u7684\u6d41\u91cf\u6570\u636e\u4e00\u8d77\u586b\u5165\u5206\u6790\u8868\u683c\u3002 \u94fe\u63a5\u610f\u5473\u7740\u63a8\u8350\uff0c\u610f\u5473\u7740\u53e3\u7891\uff0c \u8fdb\u800c\u610f\u5473\u7740 \u66f4\u591a\u7684\u81ea\u7136\u641c\u7d22\u6d41\u91cf\u3002 \u6240\u4ee5\u6211\u4eec\u77e5\u9053\u9700\u8981\u5efa\u8bbe\u94fe\u63a5\uff0c\u53ef\u662f\u5e94\u8be5\u4ece\u4f55\u5f00\u59cb\u5462\uff1f \u7b54\u6848\u5f88\u7b80\u5355\uff0c\u4ece\u5bf9\u7ade\u4e89\u5bf9\u624b\u594f\u6548\u7684\u7b56\u7565\u5f00\u59cb\u3002 Ahrefs \u7f51\u7ad9\u5206\u6790 \uff08Site Explorer\uff09\u5de5\u5177\u4e2d\u7684 \u6700\u4f73\u94fe\u63a5\uff08Best by links\uff09 \u62a5\u544a\u53ef\u4ee5\u5c55\u793a\u7ade\u4e89\u5bf9\u624b\u6536\u83b7\u6700\u591a\u5916\u94fe\u7684\u5185\u5bb9\u3002\u5982\u679c\u8fd9\u5bf9\u4ed6\u4eec\u7ba1\u7528\uff0c\u90a3\u4eec\u76f8\u4f3c\u7684\u505a\u6cd5\u4e5f\u540c\u6837\u9002\u7528\u4e8e\u6211\u4eec\u3002 \u7f51\u7ad9\u5206\u6790 > \u8f93\u5165\u7ade\u4e89\u5bf9\u624b\u535a\u5ba2\u5730\u5740\uff08\u5b50\u76ee\u5f55/\u5b50\u57df\u540d\uff09> \u81ea\u7136\u641c\u7d22 > \u6700\u4f73\u94fe\u63a5 (Site Explorer > enter competitor\u2019s blog subfolder/subdomain > Organic search > Best by links) \u5c0f\u63d0\u793a. \u5982\u679c\u5f85\u5206\u6790\u7684\u7ade\u4e89\u5bf9\u624b\u7684\u535a\u5ba2\u6ca1\u6709\u653e\u7f6e\u5728\u5b50\u57df\u540d\uff08\u5982\uff1ablog.domain.com/\u2026\uff09\u6216\u5b50\u76ee\u5f55\uff08\u5982\uff1adomain.com/blog/\u2026\uff09\u4e0b\uff0c\u4f7f\u7528\u4ed6\u4eec\u7684\u6839\u57df\u540d\u5373\u53ef\u3002\u4f60\u53ea\u9700\u8981\u5728\u6d4f\u89c8\u62a5\u544a\u7684\u65f6\u5019\u66f4\u52a0\u6ce8\u610f\u5c31\u53ef\u4ee5\u4e86\u3002 \u5982\u679c\u5f85\u5206\u6790\u7684\u7ade\u4e89\u5bf9\u624b\u7684\u535a\u5ba2\u6ca1\u6709\u653e\u7f6e\u5728\u5b50\u57df\u540d\uff08\u5982\uff1ablog.domain.com/\u2026\uff09\u6216\u5b50\u76ee\u5f55\uff08\u5982\uff1adomain.com/blog/\u2026\uff09\u4e0b\uff0c\u4f7f\u7528\u4ed6\u4eec\u7684\u6839\u57df\u540d\u5373\u53ef\u3002\u4f60\u53ea\u9700\u8981\u5728\u6d4f\u89c8\u62a5\u544a\u7684\u65f6\u5019\u66f4\u52a0\u6ce8\u610f\u5c31\u53ef\u4ee5\u4e86\u3002 \u6211\u4eec\u4ece\u62a5\u544a\u4e2d\u627e\u51fa\u4e86\u7ade\u4e89\u5bf9\u624b\u6700\u76f8\u5173\u7684 5 \u4e2a\u70ed\u300e\u94fe\u300f\u9875\u9762\u7684\u94fe\u63a5\uff0c\u8fde\u540c\u6bcf\u4e2a\u9875\u9762\u7684\u6307\u5165\u57df\u540d\u6570\u91cf\u53ca\u5176\u5185\u5bb9\u300e\u7c7b\u578b\u300f\uff0c\u5206\u522b\u586b\u5165\u4e86\u5206\u6790\u8868\u683c\u5404\u7ade\u4e89\u5bf9\u624b\u7684\u540d\u4e0b\u3002 \u54ea\u79cd\u5f62\u5f0f\u7684\u5185\u5bb9\u5bf9\u7ade\u4e89\u5bf9\u624b\u594f\u6548\uff0c\u54ea\u7c7b\u5f62\u5f0f\u7684\u5185\u5bb9\u53d7\u5230\u8fd9\u4e2a\u884c\u4e1a\u7684\u9752\u7750\uff0c\u7aa5\u4e00\u8868\u800c\u77e5\u5168\u8c8c\u3002 \u4f8b\u5982\uff0cVenngage \u6536\u83b7\u5916\u94fe\u6700\u591a\u7684\u5185\u5bb9\u4e2d\uff0c\u6761\u5217\u5f0f\u6587\u7ae0\uff08listicles\uff09\u5360\u4e86 60%\uff0cVisme \u7684\u60c5\u51b5\u4e5f\u76f8\u4f3c\u3002 \u5c0f\u63d0\u793a. \u5e76\u975e\u6240\u6709\u7684\u7ec6\u5206\u9886\u57df\u90fd\u662f\u5982\u6b64\u3002\u4f60\u53ef\u80fd\u4f1a\u53d1\u73b0\u53e6\u5916\u4e00\u79cd\u5f62\u5f0f\u7684\u5185\u5bb9\u5728\u4f60\u6240\u5904\u7684\u5782\u76f4\u9886\u57df\u66f4\u52a0\u6d41\u884c\u3002 \u5e76\u975e\u6240\u6709\u7684\u7ec6\u5206\u9886\u57df\u90fd\u662f\u5982\u6b64\u3002\u4f60\u53ef\u80fd\u4f1a\u53d1\u73b0\u53e6\u5916\u4e00\u79cd\u5f62\u5f0f\u7684\u5185\u5bb9\u5728\u4f60\u6240\u5904\u7684\u5782\u76f4\u9886\u57df\u66f4\u52a0\u6d41\u884c\u3002 \u6240\u4ee5\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u5916\u94fe\uff0c\u6839\u636e\u5206\u6790\u7ed3\u679c\u521b\u4f5c\u67d0\u4e00\u79cd\u6d41\u884c\u5f62\u5f0f\u7684\u5185\u5bb9\u53ef\u80fd\u662f\u503c\u5f97\u6295\u5165\u7684\u52a8\u4f5c\u3002 \u53e6\u5916\u4e00\u65b9\u9762\uff0c\u5dee\u8ddd\u4e5f\u4ee3\u8868\u4e86\u673a\u4f1a\u3002 \u4f8b\u5982\uff0cCanva \u83b7\u5f97\u4e86\u8bb8\u591a\u6307\u5411\u957f\u6587\u7684\u94fe\u63a5\u3002\u8fd9\u4e9b\u5185\u5bb9\u53ef\u4ee5\u7b80\u5316\u6210\u4e00\u5f20\u4fe1\u606f\u56fe\u8868\uff0c\u8fd9\u6837\u751a\u81f3\u53ef\u80fd\u5438\u5f15\u66f4\u591a\u7684\u94fe\u63a5\u3002 \u6211\u4eec\u8fd8\u80fd\u4f7f\u7528\u6240\u8c13\u7684 \u300e\u6469\u5929\u5927\u697c\u300f\u6280\u672f \uff08the \u2018skyscraper\u2019 technique\uff09\u6765\u5438\u5f15\u5916\u94fe\uff1a \u521b\u5efa\u76f8\u4f3c\u4f46\u66f4\u4e3a\u4f18\u8d28\u7684\u5185\u5bb9\uff1b \u5c55\u793a\u7ed9\u90a3\u4e9b\u5411\u7ade\u4e89\u5bf9\u624b\u63d0\u4f9b\u5916\u94fe\u7684\u7f51\u7ad9\u8d1f\u8d23\u4eba\uff1b \u8981\u6c42\u4ed6\u4eec\u6362\u6389\u94fe\u63a5\uff0c\u6307\u5411\u6211\u4eec\u65b0\u521b\u4f5c\u7684\u66f4\u4f18\u8d28\u7684\u5185\u5bb9\u3002 \u5982\u679c\u4f60\u60f3\u77e5\u9053\u5982\u4f55\u627e\u5230\u4e3a\u7ade\u4e89\u5bf9\u624b\u63d0\u4f9b\u5916\u94fe\u7684\u7f51\u7ad9\uff0c\u53ea\u9700\u8981\u70b9\u51fb\u6307\u5165\u57df\u540d\u4e00\u5217\u4e2d\u7684\u6570\u5b57\uff0c\u4f60\u5c31\u80fd\u770b\u5230\u6240\u6709\u6307\u5411\u8be5\u9875\u9762\u7684\u7f51\u7ad9\u4e86\u3002 \u6362\u8a00\u4e4b\uff0c\u6211\u4eec\u7684\u7ade\u4e89\u5bf9\u624b\u63d0\u4f9b\u4e86\u4e00\u4efd\u524d\u666f\uff08\u6f5c\u5728\u5916\u94fe\u5efa\u8bbe\u673a\u4f1a\uff09\u6e05\u5355\u7ed9\u6211\u4eec\u3002\ud83d\ude09 \u5c0f\u7b14\u8bb0 \u6211\u4eec\u5c06\u5728\u63a5\u4e0b\u6765\u7684 12 \u548c 13 \u7ae0\u8282\u6df1\u5165\u7814\u7a76\u7ade\u4e89\u5bf9\u624b\u7684 PPC\uff08Pay Per Click\uff0c\u6bcf\u6b21\u70b9\u51fb\u4ed8\u8d39\uff09 \u5e7f\u544a\u60c5\u51b5\u3002","title":"11. \u627e\u51fa\u7ade\u4e89\u5bf9\u624b\u7f51\u7ad9\u5916\u94fe\u6700\u591a\u7684\u5185\u5bb9"},{"location":"pages/affiliate/seo_competitor_analyze/#12-\u627e\u51fa\u7ade\u4e89\u5bf9\u624b\u7684PPC\u5173\u952e\u8bcd","text":"\u6362\u8a00\u4e4b\uff0c\u6211\u4eec\u7684\u7ade\u4e89\u5bf9\u624b\u63d0\u4f9b\u4e86\u4e00\u4efd\u524d\u666f\uff08\u6f5c\u5728\u5916\u94fe\u5efa\u8bbe\u673a\u4f1a\uff09\u6e05\u5355\u7ed9\u6211\u4eec\u3002\ud83d\ude09 \u5236\u5b9a SEO \u7b56\u7565\u65f6\uff0c\u5206\u6790\u7ade\u4e89\u5bf9\u624b\u7684 PPC \u6d3b\u52a8\u5c06\u8d77\u5230\u610f\u60f3\u4e0d\u5230\u7684\u6548\u679c\u3002 \u539f\u56e0\u5f88\u7b80\u5355\uff1a\u5982\u679c\u4ed6\u4eec\u613f\u610f\u4e3a\u67d0\u4e2a\u5173\u952e\u8bcd\u6d41\u91cf\u652f\u4ed8\u8d39\u7528\uff08\u7ed9 Google\uff09\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5173\u952e\u8bcd\u5f88\u53ef\u80fd\u610f\u5473\u7740\u5229\u6da6\u3002 \u4f7f\u7528 Ahrefs \u7f51\u7ad9\u5206\u6790 \uff08Site Explorer\uff09\u5de5\u5177\u7684 PPC \u5173\u952e\u8bcd\uff08PPC keywords\uff09 \u62a5\u544a\uff0c\u53ef\u80fd\u627e\u51fa\u7ade\u4e89\u5bf9\u624b\u7684 PPC \u6295\u653e\u5173\u952e\u8bcd\u3002 \u7f51\u7ad9\u5206\u6790 > \u8f93\u5165\u7ade\u4e89\u5bf9\u624b\u57df\u540d > \u4ed8\u8d39\u641c\u7d22 > PPC \u5173\u952e\u8bcd (Site Explorer > enter competitor\u2019s domain > Paid search > PPC keywords) \u770b\u8d77\u6765 Venngage \u6b63\u5728\u4e3a\u5927\u91cf\u4fe1\u606f\u56fe\u8868\u76f8\u5173\u7684\u641c\u7d22\u77ed\u8bed\u51fa\u4ef7\u3002 \u8fd9\u8ba9\u6211\u60f3\u5230\u53e6\u5916\u4e00\u70b9\uff1a \u67e5\u770b\u7ade\u4e89\u5bf9\u624b\u7684 PPC \u5e7f\u544a\u6570\u636e\u53ef\u4ee5\u5c55\u793a\u4f4e\u641c\u7d22\u91cf\u3001\u9ad8\u8f6c\u5316\u7387\u7684\u5173\u952e\u8bcd\uff0c\u800c\u8fd9\u4e9b\u5173\u952e\u8bcd\u5728\u6211\u4eec\u5f00\u5c55 \u5173\u952e\u8bcd\u8c03\u7814 \u7684\u65f6\u5019\u662f\u5f88\u5bb9\u6613\u88ab\u5ffd\u89c6\u7684\u3002 \u4f8b\u5982\uff0c\u5c31\u8f6c\u5316\u7387\u800c\u8a00\uff0c\u50cf\u201cmake an infographic online\u201d\uff0870 \u6b21\u641c\u7d22/\u6708\uff09\u8fd9\u6837\u7684\u5173\u952e\u8bcd\u53ef\u80fd\u6bd4\u201cfree infographic creator\u201d\uff08600 \u6b21\u641c\u7d22/\u6708\uff09\u8fd9\u6837\u7684\u5173\u952e\u8bcd\u9ad8\u5f88\u591a\u3002 \u5982\u679c\u4e00\u4e2a 70 \u6b21\u641c\u7d22/\u6708 \u7684\u5173\u952e\u8bcd\u7684\u8f6c\u5316\u7387\u4e3a 20%\uff0c\u4e00\u4e2a 600 \u6b21\u641c\u7d22/\u6708 \u7684\u5173\u952e\u8bcd\u8f6c\u5316\u7387\u4e3a 2%\uff0c\u4f60\u8ba4\u4e3a\u505a\u54ea\u4e2a\u5173\u952e\u8bcd\u7684\u6392\u540d\u66f4\u6709\u610f\u4e49\u5462\uff1f \u4f60\u5e94\u8be5\u5df2\u7ecf\u8ba1\u7b97\u51fa\u7ed3\u679c\u4e86\u3002\u90a3\u4e2a\u4f4e\u641c\u7d22\u91cf\u7684\u5173\u952e\u8bcd\u53ef\u4ee5\u6700\u7ec8\u4e3a\u4f60\u5e26\u6765\u66f4\u591a\u9500\u552e\u989d\u3002 \u56e0\u6b64\uff0c\u9075\u5faa\u8fd9\u4e2a\u903b\u8f91\uff0c\u6211\u4eec\u4ece\u6bcf\u4e2a\u7ade\u4e89\u5bf9\u624b\u51fa\u4ef7\u7684\u5173\u952e\u8bcd\u4e2d\u6311\u9009\u51fa\u4e86 5 \u4e2a\uff0c\u5206\u522b\u586b\u5165\u4e86\u6bcf\u4e2a\u7ade\u4e89\u5bf9\u624b\u7684\u540d\u4e0b\u3002\u6211\u4eec\u6709\u610f\u6311\u9009\u4e86\u90a3\u4e9b\u5728\u6211\u4eec\u770b\u6765\u8f6c\u5316\u7387\u4f1a\u6bd4\u8f83\u9ad8\u7684\u5173\u952e\u8bcd\u3002 \u514d\u8d23\u58f0\u660e \uff1a\u8bf7\u5bf9\u8fd9\u79cd\u65b9\u6cd5\u6301\u4fdd\u7559\u6001\u5ea6\u3002\u7ade\u4e89\u5bf9\u624b\u5728\u67d0\u4e9b\u5173\u952e\u8bcd\u4e0a\u9762\u7838\u94b1\u6295 PPC \u5e76\u4e0d\u610f\u5473\u7740\u4ed6\u4eec\u77e5\u9053\u81ea\u5df1\u5728\u505a\u4ec0\u4e48\u3002\u5728\u4f60\u503e\u6ce8\u6240\u6709\u7b79\u7801\u505a\u5173\u952e\u8bcd\u6392\u540d\u4e4b\u524d\uff0c\u4e0d\u59a8\u5148\u7528 PPC \u6d4b\u8bd5\u4e00\u4e0b\u8fd9\u4e9b\u5173\u952e\u8bcd\u7684\u8f6c\u5316\u7387\u7b49\u6307\u6807\u3002","title":"12. \u627e\u51fa\u7ade\u4e89\u5bf9\u624b\u7684PPC\u5173\u952e\u8bcd"},{"location":"pages/affiliate/seo_competitor_analyze/#13-\u5b66\u4e60\u7ade\u4e89\u5bf9\u624b\u7684PPC\u5e7f\u544a\u6587\u6848","text":"\u67e5\u770b\u7ade\u4e89\u5bf9\u624b\u7684 PPC \u5e7f\u544a\u6587\u6848\u6709\u52a9\u4e8e\u6211\u4eec\u64b0\u5199\u5143\u6807\u9898\u548c\u5143\u63cf\u8ff0\u4fe1\u606f\uff0c\u4ee5\u63d0\u9ad8\u70b9\u51fb\u7387\u3002 \u56e0\u4e3a\u4ed6\u4eec\u6b63\u5728\u5f80\u5173\u952e\u8bcd\u6295\u5165\u771f\u91d1\u767d\u94f6\uff0c\u800c Google \u4f1a\u56e0\u4e3a\u5e7f\u544a\u6587\u6848\u7684\u76f8\u5173\u6027\u800c\u51cf\u5c11\u5b9e\u9645\u7684\u5e7f\u544a\u652f\u51fa\uff08\u4ee5\u8d44\u9f13\u52b1\uff09\u3002 \u4e3a\u4e86\u5229\u76ca\uff0c\u4ed6\u4eec\u4f1a\u7ede\u5c3d\u8111\u6c41\u64b0\u5199\u9ad8\u5ea6\u76f8\u5173\u7684\u5e7f\u544a\u6587\u6848\u3002 \u6211\u4eec\u518d\u6b21\u6253\u5f00 PPC \u5173\u952e\u8bcd\u62a5\u544a \uff0c\u770b\u770b\u7ade\u4e89\u5bf9\u624b\u662f\u5982\u4f55\u7ed9 \u201cinfographic maker\u201d \u8fd9\u4e2a\u5173\u952e\u8bcd\u64b0\u5199\u5e7f\u544a\u6587\u6848\u7684\uff1a \u7f51\u7ad9\u5206\u6790> \u8f93\u5165\u7ade\u4e89\u5bf9\u624b\u57df\u540d > \u4ed8\u8d39\u641c\u7d22 > PPC \u5173\u952e\u8bcd (Site Explorer > enter competitor\u2019s domain > Paid search > PPC keywords) \u8981\u9884\u89c8\u67d0\u4e2a\u5173\u952e\u8bcd\u7684\u5e7f\u544a\uff08\u6587\u6848\uff09\uff0c\u53ea\u9700\u8981\u5c06\u9f20\u6807\u60ac\u505c\u5728 \u201cAd\u201d\uff08\u5e7f\u544a\uff09\u56fe\u6807\u4e0a\u3002 \u4ed6\u4eec\u4f7f\u7528\u4e86 speed \u548c simplicity \u7b49\u5b57\u773c\u6765\u5438\u5f15\u70b9\u51fb\u3002 \u8fd9\u4e9b\u5185\u5bb9\u90fd\u662f\u53ef\u4ee5\u4e3a\u6211\u4eec\u6240\u7528\u7684\u3002\u4f8b\u5982\u5c06\u5176\u6574\u5408\u8fdb\u81ea\u5df1\u7f51\u9875\u7684\u5143\u6807\u9898\u548c\u63cf\u8ff0\u4e2d\uff0c\u4ece\u800c\u5438\u5f15\u66f4\u591a\u81ea\u7136\u641c\u7d22\u6d41\u91cf\u3002 \u63a8\u8350\u9605\u8bfb \uff1a \u5982\u4f55\u64b0\u5199\u5b8c\u7f8e\u7684 SEO \u6807\u9898\u6807\u7b7e\uff08\u6211\u4eec\u7684 4 \u6b65\u6d41\u7a0b\uff09","title":"13. \u5b66\u4e60\u7ade\u4e89\u5bf9\u624b\u7684PPC\u5e7f\u544a\uff08\u6587\u6848\uff09"},{"location":"pages/affiliate/seo_competitor_analyze/#\u7ed3\u8bed","text":"\u4ee5\u4e0a\u6240\u6709\u5176\u5b9e\u53ea\u662f SEO \u7ade\u4e89\u5bf9\u624b\u5206\u6790\u7684\u51b0\u5c71\u4e00\u89d2\u3002 \u5982\u679c\u4f60\u5bf9 Ahrefs \u5f88\u719f\u6089\uff0c\u5c31\u4e00\u5b9a\u77e5\u9053\u5979\u8fd8\u80fd\u751f\u6210\u5927\u91cf\u989d\u5916\u7684\u62a5\u544a\uff0c\u4ece\u4e2d\u4f60\u53ef\u4ee5\u7ee7\u7eed\u6df1\u6316\uff0c\u4ece\u800c\u66f4\u5168\u9762\u5730\u638c\u63e1\u7ade\u4e89\u5bf9\u624b\u6574\u4f53\u7684\u8425\u9500\u3001\u5185\u5bb9\u548c \u94fe\u63a5\u5efa\u8bbe\u7b56\u7565 \u3002 \u6211\u4eec\u6709\u4ec0\u4e48\u5efa\u8bae\uff1f\u6267\u884c\u4e0a\u8ff0\u6b65\u9aa4\uff0c\u7136\u540e\u5c1d\u8bd5 Ahrefs \u7684\u5176\u4ed6\u62a5\u544a\u529f\u80fd\uff08\u751a\u81f3\u4e00\u4e9b\u5176\u4ed6\u7684\u7ade\u4e89\u5bf9\u624b\u5206\u6790\u5de5\u5177\uff09\uff0c\u7528\u4ee5\u63a2\u7d22\u4efb\u4f55\u4f60\u611f\u5174\u8da3\u7684\u9886\u57df\u3002 https://www.youtube.com/watch?v=_oU8lclN114 \u6700\u540e\uff0c\u5982\u679c\u4f60\u60f3\u81ea\u5df1\u4e5f\u6309\u7740\u8fd9\u79cd\u65b9\u6cd5\u505a\u4e00\u4e0b\u7ade\u4e89\u5bf9\u624b\u5206\u6790\uff0c \u8fd9\u91cc \u662f\u6211\u4eec\u7684\u8868\u683c\u6a21\u677f\uff08\u8fd9\u7bc7\u6307\u5357\u4e2d\u6240\u4f7f\u7528\u7684\u8868\u683c\uff09\u3002","title":"\u7ed3\u8bed"},{"location":"pages/affiliate/submit-website-to-search-engines/","text":"\u5982\u4f55\u628a\u7f51\u7ad9\u63d0\u4ea4\u7ed9\u641c\u7d22\u5f15\u64ce\uff1f\uff08\u5728\u7279\u5b9a\u60c5\u51b5\u4e0d\u9700\u8981\u63d0\u4ea4\uff09 \u00b6 \u5982\u679c\u641c\u7d22\u5f15\u64ce\u6ca1\u6709\u770b\u5230\u3001\u770b\u8fc7\u4f60\u7684\u7f51\u7ad9\uff0c\u90a3\u4e48\u4f60\u7684\u7f51\u7ad9\u4e0d\u662f\u4e0d\u53ef\u80fd\u53c2\u4e0e\u6392\u540d\uff0c\u800c\u662f\u80af\u5b9a\u4e0d\u53ef\u80fd\u53c2\u4e0e\u6392\u540d\u3002 \u5b9e\u9645\u4e0a\uff1a\u641c\u7d22\u5f15\u64ce\u9700\u8981\u65f6\u95f4\u6765\u53d1\u73b0\uff08\u548c \u7d22\u5f15 \uff09\u65b0\u7f51\u7ad9\u3002 \u8fd9\u610f\u5473\u7740\uff0c\u5982\u679c\u4f60\u5728Google\u4e2d\u641c\u7d22\u4e24\u5929\u524d\u4e0a\u7ebf\u7684\u7f51\u7ad9\uff0c\u4f60\u5f88\u53ef\u80fd\u4f1a\u5f88\u5931\u671b\u3002\u56e0\u4e3a\uff0c10\u6b21\u4e2d\u67099\u6b21\uff0c\u4f60\u53ef\u80fd\u4ec0\u4e48\u90fd\u627e\u4e0d\u5230\u3002 \u7136\u800c\uff0c\u5373\u4f7f\u5728\u4e0a\u7ebf\u51e0\u5468\u540e\uff0c\u4f60\u4ecd\u7136\u53ef\u80fd\u65e0\u6cd5\u5728Google\uff0cBing\u548cYahoo\u4e2d\u770b\u5230\u4f60\u7684\u7f51\u7ad9\u3002\u8fd9\u4e9b\u641c\u7d22\u5f15\u64ce\u5408\u8ba1\uff0c\u5360\u4e86\u6574\u4e2a\u4e2a \u641c\u7d22\u5e02\u573a\u4efd\u989d\u768496\uff05 \u3002 \u5982\u679c\u4f60\u662f\u4e0a\u8ff0\u8fd9\u6837\u7684\u60c5\u51b5\uff0c\u540c\u65f6\uff0c\u4f60\u6025\u9700\u5982\u4f55\u628a\u7f51\u7ad9\u63d0\u4ea4\u7ed9\u5bf9\u5e94\u641c\u7d22\u5f15\u64ce\u7684\u77e5\u8bc6\uff0c\u90a3\u4e48\u8fd9\u7bc7\u6587\u7ae0\u4f1a\u975e\u5e38\u9002\u5408\u4f60\u3002\u4ee5\u4e0b\u662f\u6211\u4eec\u5c06\u5728\u672c\u6587\u4e2d\u8ba8\u8bba\u7684\u5185\u5bb9\uff1a \u5982\u4f55\u5c06\u7f51\u7ad9\u63d0\u4ea4\u7ed9Google\uff0cBing\u548cYahoo; \u5982\u4f55\u786e\u4fdd\u5b83\u5b9e\u9645\u88ab\u7d22\u5f15\uff08\u4ee5\u53ca\u5982\u679c\u4e0d\u662f\uff0c\u8be5\u600e\u4e48\u505a\uff09; \u4e3a\u4ec0\u4e48\u8981\u5c06\u63d0\u4ea4\u7ed9\u8c37\u6b4c\u4e0d\u7b49\u4e8e\u6392\u540d\uff08\u4ee5\u53ca\u5982\u4f55\u89e3\u51b3\u6b64\u95ee\u9898\uff09 \u4f46\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u89e3\u51b3\u57282018\u5e74\u8bb8\u591a\u4eba\u666e\u904d\u9047\u5230\u7684\u95ee\u9898.\u2026. \u4f60\u771f\u7684\u9700\u8981\u628a\u4f60\u7684URL\u63d0\u4ea4\u7ed9\u641c\u7d22\u5f15\u64ce\u4e48\uff1f \u00b6 \u5176\u5b9eGoogle\u548c\u5176\u4ed6\u641c\u7d22\u5f15\u64ce\u7684\u5185\u5bb9\u6784\u5efa\u5e76\u4e0d\u4f9d\u8d56\u4e8e\u63d0\u4ea4\uff0c\u8fd9\u5c31\u662f\u5b83\u4eec\u4e3a\u4ec0\u4e48\u4e3b\u52a8 \u6293\u53d6 \u5404\u79cd\u7f51\u7ad9\u7684\u539f\u56e0\u3002 \u4e0d\u719f\u6089\u6293\u53d6\uff1f\u6293\u53d6\u5c31\u662f\uff0c\u5f53\u641c\u7d22\u5f15\u64ce\u5728\u7f51\u7ad9\u4e0a\u627e\u5230\u65b0\u94fe\u63a5\u65f6\uff0c\u4f1a\u968f\u540e\u201c\u5173\u6ce8\u201d\u8fd9\u4e9b\u94fe\u63a5\u9875\u9762\u3002\u5982\u679c\u65b0\u53d1\u73b0\u7684\u94fe\u63a5\u9875\u9762\u4e0a\u6709\u6709\u4ef7\u503c\u7684\u5185\u5bb9\u65f6\uff0c\u5c31\u5c06\u8be5\u9875\u9762\u5c06\u6dfb\u52a0\u5230\u7d22\u5f15\u4e2d\u3002 Matt Cutts\u5728\u8fd9\u4e2a \u89c6\u9891 \u4e2d\u89e3\u91ca\u4e86\u66f4\u591a\u6293\u53d6\u548c\u7d22\u5f15\u7684\u539f\u7406\uff1a https://www.youtube.com/watch?v=BNHR6IQJGZs \u540c\u65f6\u8c37\u6b4c\u8fd8\u4f1a\u52a8\u8fc7\u5176\u5b83\u7684\u9014\u5f84\u4e86\u89e3\u6700\u65b0\u7684\u4fe1\u606f\uff0c\u6bd4\u5982\u8bf4Chrome\u6d4f\u89c8\u5668\u7684\u94fe\u63a5\u8f93\u5165\uff0c\u4ee5\u53ca\u57df\u540d\u6ce8\u518c\u6570\u636e\u3002\u8c37\u6b4c\u4f1a\u4e0d\u65ad\u7684\u4e3a\u7528\u6237\u5bfb\u627e\u6700\u65b0\u6700\u6709\u6548\u7684\u9875\u9762\u3002 \u5c0f\u63d0\u793a \u6709\u4e9b\u65f6\u5019SEO\u4f1a\u5bf9\u6b64\u6709\u4e9b\u504f\u6267\uff0c\u4e8e\u662f\u4e4e\u5c31\u6709\u4e86\u50cf \u8fd9\u4e2a \u548c \u8fd9\u4e2a \u7684\u7814\u7a76\u3002 \u603b\u800c\u8a00\u4e4b\uff0c\u8fd9\u610f\u5473\u7740\u641c\u7d22\u5f15\u64ce\u975e\u5e38\u5584\u4e8e\u53d1\u73b0\u65b0\u7f51\u7ad9\u548c\u7f51\u9875\u3002\u5f53\u7136\uff0c\u524d\u63d0\u662f\u8fd9\u4e9b\u9875\u9762\u662f\u4ece\u7f51\u7edc\u4e0a\u7684\u67d0\u4e2a\u5730\u65b9\u80fd\u591f\u627e\u5230\u7684\u3002 \uff08\u6211\u4eec\u7a0d\u540e\u4f1a\u8be6\u7ec6\u8ba8\u8bba\u94fe\u63a5\u7684\u91cd\u8981\u6027\uff01\uff09 \u4e3a\u4ec0\u4e48\u4f60\u4ecd\u7136\u5e94\u8be5\u5c06\u4f60\u7684\u7f51\u7ad9\u63d0\u4ea4\u7ed9\u641c\u7d22\u5f15\u64ce? \u00b6 \u4ee5\u4e0b\u662f\u624b\u52a8\u63d0\u4ea4\u4ecd\u7136\u662f\u201c\u91cd\u8981\u201d\u7684\u51e0\u4e2a\u539f\u56e0\uff1a \u505a\u4e86\u6bd4\u4e0d\u505a\u8981\u597d \u3002\u8ba9\u6211\u4eec\u9762\u5bf9\u73b0\u5b9e\uff0c\u65e0\u8bba\u4f60\u662f\u5426\u9009\u62e9\u624b\u52a8\u63d0\u4ea4\uff0c\u641c\u7d22\u5f15\u64ce\u90fd\u53ef\u80fd\u627e\u5230\u4f60\u7684\u7f51\u7ad9\u3002\u4f46\u201c\u53ef\u80fd\u201d\u8db3\u591f\u597d\u5417\uff1f\u63d0\u4ea4\u4f60\u7684\u7f51\u7ad9\u53ea\u9700\u8981\u4e00\u4e24\u5206\u949f\u3002\u90a3\u4e48\u4e3a\u4ec0\u4e48\u8981\u5192\u8fd9\u4e2a\u98ce\u9669\u5462\uff1f \u641c\u7d22\u5f15\u64ce\u65e0\u6cd5\u901a\u8fc7\u6293\u53d6\u6765\u627e\u51fa\u6240\u6709\u5185\u5bb9 \u3002\u5982\u679c\u4f60\u901a\u8fc7\u4e0b\u9762\u8ba8\u8bba\u7684\u65b9\u6cd5\u63d0\u4ea4\u4f60\u7684\u7f51\u7ad9\uff0c\u5c06\u6709\u673a\u4f1a\u5411Google\u548cBing\u63d0\u4f9b\u6709\u5173\u7f51\u7ad9\u7684\u4e00\u4e9b\u6709\u7528\u7684\u9875\u9762\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u544a\u8bc9\u641c\u7d22\u5f15\u64ce\u6bcf\u4e2a\u9875\u9762\u7684\u91cd\u8981\u7a0b\u5ea6\u3002\u641c\u7d22\u5f15\u64ce\u8718\u86db\u662f\u65e0\u6cd5\u5355\u72ec\u722c\u884c\u83b7\u53d6\u6b64\u4fe1\u606f\u3002 \u63d0\u4ea4\u6709\u52a9\u4e8e\u6539\u5584\u4f60\u7684\u7f51\u7ad9 \u3002 Google\u548cBing\u5404\u81ea\u4f1a\u901a\u8fc7\u5b83\u4eec\u7684\u62a5\u544a\u544a\u77e5\u4f60\u94fe\u63a5\u7684\u6293\u53d6\u60c5\u51b5\uff08\u7a0d\u540e\u4f1a\u8be6\u7ec6\u4ecb\u7ecd\uff01\uff09\u3002\u540c\u65f6\uff0c\u8fd8\u6709\u5404\u79cd\u7528\u4e8e\u6d4b\u8bd5\u4f60\u7f51\u9875\u7684\u5de5\u5177\uff0c\u5982\u679c\u4f60\u7684\u7f51\u7ad9\u4e0a\u51fa\u73b0\u6f5c\u5728\u95ee\u9898\u6216\u9519\u8bef\uff0c\u641c\u7d22\u5f15\u64ce\u90fd\u4f1a\u63d0\u9192\u4f60\u3002 \u8bdd\u867d\u5982\u6b64\uff0c\u4f46\u8bf7\u6ce8\u610f\uff0c\u5c06\u4f60\u7684\u7f51\u7ad9\u63d0\u4ea4\u7ed9Google\uff0c\u5e76\u5c06\u5176\u7f16\u5165\u7d22\u5f15\u53ea\u662f\u4f18\u5316\u7684\u4e00\u4e2a\u73af\u8282\u3002\u771f\u6b63\u7684\u56f0\u96be\u5728\u4e8e\u63d0\u9ad8\u4f60\u7684\u5173\u952e\u8bcd\u6392\u540d\u3002 \u4e0d\u8fc7\u4e0d\u7528\u62c5\u5fc3\uff0c\u8fd9\u4e2a\u6587\u7ae0\u4e2d\u6211\u4eec\u4f1a\u7ed9\u4e88\u4e00\u4e9b\u8fd9\u4e2a\u65b9\u9762\u7684\u5efa\u8bae\u3002 \u522b\u7740\u6025\uff0c\u6211\u4eec\u6162\u6162\u6765\u3002 \u5982\u4f55\u628a\u4f60\u7684\u7f51\u5740\u63d0\u4ea4\u7ed9\u8c37\u6b4c\uff1f \u00b6 \u5411Google\uff08\u548c\u5176\u4ed6\u641c\u7d22\u5f15\u64ce\uff09\u63d0\u4ea4\u7f51\u7ad9\u975e\u5e38\u5bb9\u6613\u3002 \u53ea\u9700\u89c2\u770b\u6211\u4eec\u7684\u89c6\u9891\u6559\u7a0b\uff0c\u6216\u6309\u7167\u4e0b\u9762\u7684\u4e66\u9762\u6b65\u9aa4\u64cd\u4f5c\u5373\u53ef\u3002 https://youtube.com/watch?v=H2a6H5vOKOk Google\u4e8e2018\u5e747\u6708 \u505c\u6b62\u4e86\u7f51\u5740\u63d0\u4ea4\u5de5\u5177 \u3002\u73b0\u5728\uff0c\u63d0\u4ea4\u7f51\u7ad9\u7684\u552f\u4e00\u65b9\u6cd5\u662f\u5728 Google Search Console \uff08\u8c37\u6b4c\u7ad9\u957f\u5de5\u5177\uff09\u4e2d\u6dfb\u52a0\u4f60\u7684Sitemap\uff08\u7f51\u7ad9\u5730\u56fe\uff09\u3002 \u4ec0\u4e48\u662fSitemap\uff08\u7f51\u7ad9\u5730\u56fe\uff09\uff1f \u7f51\u7ad9\u5730\u56fe\u662f\u4e00\u4e2a\u80fd\u5217\u51fa\u7f51\u7ad9\u4e0a\u6240\u6709\u9875\u9762\u7684\u6587\u4ef6\u3002 \u5b83\u901a\u5e38\u662f\u4e00\u4e2aXML\u6587\u4ef6\uff0c\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a \u8fd9\u4e2a\u662f\u4e00\u4e2a\u6700\u5e38\u89c1\u7684\u7f51\u7ad9\u5730\u56fe\uff0c\u5217\u51fa\u4e86\u6211\u7684\u535a\u5ba2\u4e2d\u6240\u6709\u7684\u5e16\u5b50\u3002 \u4f60\u7684\u7f51\u7ad9\u5730\u56fe\u901a\u5e38\u53ef\u4ee5\u7684\u901a\u8fc7 yourdomain.com/sitemap.xml \u8fd9\u6837\u7684\u65b9\u5f0f\u8fdb\u884c\u8bbf\u95ee\u3002\u5982\u679c\u4f60\u8bbf\u95ee\u4e0d\u4e86\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7 yourdomain.com/robots.txt \u67e5\u770b\u4e0b\u4f60\u7684 robots.txt \u6587\u4ef6\u3002\u901a\u5e38\u8fd9\u91cc\u4f1a\u663e\u793a\u4f60\u7684\u7f51\u7ad9\u5730\u56fe\u5730\u5740\u3002 \u6ca1\u6709\u7f51\u7ad9\u5730\u56fe? \u4f60\u9700\u8981\u5236\u4f5c\u4e00\u4e2a\u3002 \u6709\u51e0\u79cd\u65b9\u5f0f\u90fd\u53ef\u4ee5\u505a\u7f51\u7ad9\u5730\u56fe\u3002\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662fWordpress\u7a0b\u5e8f\uff08\u6216\u8005\u662f\u5176\u5b83\u7684CMS\uff09\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u4f7f\u7528\u5bf9\u5e94\u7684\u63d2\u4ef6\u6765\u751f\u6210\u7f51\u7ad9\u5730\u56fe\u3002\u6211\u4eec\u63a8\u8350\u4f7f\u7528 Yoast SEO\u63d2\u4ef6 \u3002\u5bf9\u4e8e\u9759\u6001\u7684\u7f51\u7ad9\u6765\u8bf4\uff0c\u53ef\u80fd \u8fd9\u4e2a\u7f51\u7ad9\u5730\u56fe\u5de5\u5177 \u4f1a\u66f4\u52a0\u7684\u9002\u5408\u3002\u5982\u679c\u4f60\u559c\u6b22\u624b\u52a8\u7684\u65b9\u6cd5\u53bb\u505a\u7f51\u7ad9\u5730\u56fe\uff0c\u4f60\u53ef\u4ee5\u53c2\u8003 \u8fd9\u4e2a\u6559\u7a0b \u53bb\u4f7f\u7528 Screamingfrog\u5de5\u5177\u3002 \u627e\u5230\u4e86\u4f60\u7684\u7f51\u7ad9\u5730\u56fe\uff1f\u975e\u5e38\u597d\uff0c\u73b0\u5728\u4f60\u53ea\u9700\u8981\u628a\u7f51\u7ad9\u5730\u56fe\u901a\u8fc7 Search Console \u63d0\u4ea4\u7ed9\u641c\u7d22\u5f15\u64ce\u3002 Search Console > select your property > Sitemaps > paste in your sitemap URL > hit \u201csubmit\u201d \u641c\u7d22\u63a7\u5236\u53f0>\u9009\u62e9\u4f60\u7684\u7f51\u7ad9>\u7ad9\u70b9\u5730\u56fe>\u7c98\u8d34\u4f60\u7684\u7ad9\u70b9\u5730\u56fe\u7f51\u5740>\u70b9\u51fb\u201c\u63d0\u4ea4\u201d \u5c0f\u63d0\u793a \uff1a\u4f60\u9700\u8981\u9a8c\u8bc1 Google Webmaster Tools \uff08\u8c37\u6b4c\u7ad9\u957f\u5de5\u5177\uff09\u4e4b\u540e\u624d\u53ef\u4ee5\u4f7f\u7528\u7f51\u7ad9\u5730\u56fe\u63d0\u4ea4\u529f\u80fd\u3002\u5982\u679c\u4f60\u6ca1\u6709\u9a8c\u8bc1\u8fc7\uff0c\u8bf7\u770b\u4e0b\u8fd9\u4e2a \u6559\u7a0b \u3002 \u8bf7\u6ce8\u610f\uff0c\u8fd9\u91cc\u6211\u4f7f\u7528\u7684\u662f\u65b0\u7248\u672c\u7684\u8c37\u6b4c\u7ad9\u957f\u5de5\u5177\uff0c\u4e0b\u9762\u662f\u65e7\u7248\u7684\u63d0\u4ea4\u6d41\u7a0b\u3002 Search Console > select your property > Crawl > Sitemaps > Add/test sitemap > paste in your sitemap URL > hit \u201csubmit\u201d \u641c\u7d22\u63a7\u5236\u53f0 > \u9009\u62e9\u4f60\u7684\u7f51\u7ad9 > \u6293\u53d6 > \u7ad9\u70b9\u5730\u56fe > \u6dfb\u52a0/\u6d4b\u8bd5\u7ad9\u70b9\u5730\u56fe > \u7c98\u8d34\u4f60\u7684\u7ad9\u70b9\u5730\u56fe\u7f51\u5740> \u70b9\u51fb\u201c\u63d0\u4ea4\u201d \u5982\u679c\u4f60\u6709\u591a\u4e2a\u7f51\u7ad9\u5730\u56fe\uff08\u6bd4\u5982\u4f60\u4f7f\u7528 Yoast\u63d2\u4ef6 \u7684\u65f6\u5019\uff09\u53ea\u9700\u8981\u91cd\u590d\u521a\u624d\u7684\u64cd\u4f5c\u5c31\u53ef\u4ee5\u3002 \u5982\u679c\u4f60\u53ea\u60f3\u63d0\u4ea4\u5355\u4e2a\u7f51\u5740\u7ed9\u641c\u7d22\u5f15\u64ce \u00b6 \u8c37\u6b4c\u4e4b\u524d\u662f\u63d0\u4f9b\u8fc7\u4e00\u4e2a\u63d0\u4ea4\u5355\u4e00\u7f51\u5740\u7684\u529f\u80fd\u7684\uff0c\u4f46\u662f\u57282018\u5e74\u7684\u65f6\u5019\u8fd9\u4e2a\u529f\u80fd\u5df2\u7ecf\u4e0d\u518d\u4f7f\u7528\u4e86\u3002 \u4f46\u662f\uff0c\u4f60\u4f9d\u7136\u53ef\u4ee5\u4f7f\u7528\u65e7\u7248\u7684\u8c37\u6b4c\u7ad9\u957f\u5de5\u5177\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7 Fetch as Google \uff08\u6a21\u62df\u8c37\u6b4c\u6293\u53d6\uff09\u529f\u80fd\uff0c\u6765\u63d0\u4ea4\u4f60\u7684\u5355\u4e2a\u9875\u9762\u7f51\u5740\u3002\u4e0b\u9762\u662f\u6b65\u9aa4\u3002 Search Console > Crawl > Fetch as Google > paste in your URL > Fetch \u641c\u7d22\u63a7\u5236\u53f0>\u6293\u53d6>\u6293\u53d6\u4e3aGoogle>\u7c98\u8d34\u5230\u4f60\u7684\u7f51\u5740>\u6293\u53d6 \u7136\u540e\u4f60\u5f97\u70b9\u51fb Request indexing\uff08\u8bf7\u6c42\u7d22\u5f15\uff09\u6309\u94ae\u3002\u70b9\u51fb\u4e4b\u540e\u4f1a\u5f39\u51fa\u4e00\u4e2a\u4e0b\u65b9\u8fd9\u6837\u7684\u5f39\u7a97\u3002 \u52fe\u9009 I\u2019m not a robot\uff08\u4f60\u4e0d\u662f\u673a\u5668\u4eba\uff09\u9009\u9879\uff0c\u7136\u540e\u9009\u62e9\u662f\u5426\u8981Google\u6293\u53d6\u6b64\u7f51\u5740\uff0c\u6216\u8005\u662f\u6b64\u7f51\u5740\u4ee5\u53ca\u5b83\u7684\u8df3\u8f6c\u94fe\u63a5\u3002 \u8fd9\u6837\uff0c\u63d0\u4ea4\u5c31\u5b8c\u6210\u4e86\u3002 \u4f46\u662f\u5728 \u65b0\u7684Search Console \u4e2d\u5462\uff1f \u4f60\u8fd8\u80fd\u8fd9\u6837\u5417\uff1f \u8c37\u6b4c\u4f3c\u4e4e\u5df2\u7ecf\u5220\u9664\u4e86 Fetch as Google\uff08\u6a21\u62df\u8c37\u6b4c\u6293\u53d6\uff09\u5de5\u5177\uff0c\u66ff\u6362\u6210\u4e86 URL inspection tool \uff08URL\u68c0\u67e5\u5de5\u5177\uff09\u3002 \u8fd9\u4e2a\u5de5\u5177\u7684\u4e3b\u8981\u76ee\u7684\u662f\u68c0\u67e5URL\u6240\u51fa\u73b0\u7684\u95ee\u9898\u3002\u540c\u65f6\uff0c\u5f53\u4f60\u9009\u62e9\u91cd\u65b0\u6293\u53d6\u7684\u65f6\u5019\uff0c\u5b83\u5728\u7684\u4e91\u8fd0\u884c\u539f\u7406\u5176\u5b9e\u548c\u6a21\u62df\u8c37\u6b4c\u6293\u53d6\u529f\u80fd\u662f\u4e00\u6837\u7684\u3002 \u95ee\u9898\u5728\u4e8e\uff0c\u662f\u8c37\u6b4c\u5728\u5173\u4e8e\u4f7f\u7528\u8fd9\u4e2a \u5de5\u5177\u7684\u8bf4\u660e \u4e0a\u5e76\u6ca1\u6709\u592a\u591a\u7684\u7528\u5904\u3002\u4e0b\u65b9\u5c31\u662f\u8c37\u6b4c\u7ed9\u51fa\u7684\u8bf4\u660e\u3002 \u63d0\u4ea4URL\uff0c\u5e76\u8981\u6c42\u7d22\u5f15\uff1a \u4f7f\u7528 Inspect the URL (URL\u68c0\u67e5\u5de5\u5177\uff09 \u68c0\u67e5URL\u3002 \u9009\u62e9 Request indexing \uff08\u8bf7\u6c42\u7d22\u5f15\uff09 \u8be5\u5de5\u5177\u5c06\u5bf9URL\u8fd0\u884c\u5b9e\u65f6\u6d4b\u8bd5\uff0c\u4ee5\u67e5\u770b\u5b83\u662f\u5426\u6709\u4efb\u4f55\u660e\u663e\u7684\u7d22\u5f15\u95ee\u9898\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u9875\u9762\u5c06\u6392\u961f\u7b49\u5f85\u7d22\u5f15\u3002 \u5982\u679c\u8be5\u5de5\u5177\u53d1\u73b0\u9875\u9762\u6709\u95ee\u9898\uff0c\u4f60\u9700\u8981\u5c1d\u8bd5\u53bb\u4fee\u590d\u8fd9\u4e9b\u95ee\u9898\u3002 URL\u68c0\u67e5\u5f88\u5bb9\u6613\u627e\u5230\uff0c\u4f46\u662f\u5c31\u662f\u627e\u4e0d\u5230\u8bf7\u6c42\u7d22\u5f15\u7684\u6309\u94ae\u3002 \u6240\u4ee5\uff0c\u73b0\u5728\u6211\u4eec\u4e0d\u786e\u5b9a\u8fd9\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002 \u4f46\u662f\uff0c\u8fd9\u4e2a\u5de5\u5177\u4ecd\u5904\u4e8e\u6d4b\u8bd5\u9636\u6bb5\uff0cGoogle\u53ef\u80fd\u4f1a\u5728\u4ee5\u540e\u6dfb\u8fd9\u4e2a\u529f\u80fd\u6309\u94ae\u3002 \u4f46\u662f\uff0c\u5c31\u76ee\u524d\u800c\u8a00\uff0c\u4f60\u5e94\u8be5\u575a\u6301\u4f7f\u7528\u65e7\u7248Search Console\u4e2d\u7684 Fetch as Google\uff08\u6a21\u62df\u8c37\u6b4c\u6293\u53d6\uff09\u5de5\u5177\u3002 \u5982\u4f55\u5411Bing\uff08\u5fc5\u5e94\uff09\u548cYahoo\uff08\u96c5\u864e\uff09\u641c\u7d22\u5f15\u64ce\u63d0\u4ea4\u4f60\u7684\u7f51\u7ad9 \u00b6 \u548c\u8c37\u6b4c\u4e0d\u540c\u7684\u662f\uff0cBing\u4f9d\u7136\u6709 \u516c\u5f00\u7684URL\u63d0\u4ea4\u5de5\u5177 \u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u5de5\u5177\uff0c\u5728\u51e0\u79d2\u949f\u5185\u5411Bing\u63d0\u4ea4\u4efb\u4f55\u7f51\u7ad9\uff08\u5404\u79cd\u7f51\u7ad9\u90fd\u884c\uff09\u3002 \u53ea\u9700\u7c98\u8d34\u4e3b\u9875\u7f51\u5740\uff0c\u586b\u5199\u9a8c\u8bc1\u7801\u5e76\u70b9\u51fb\u63d0\u4ea4\u5373\u53ef\u3002 \u4f46\u662f\uff0c\u8fd9\u79cd\u65b9\u6cd5\u6211\u4eec\u5e76\u4e0d\u63a8\u8350\u3002\u6211\u4eec\u5efa\u8bae\u4f7f\u7528 Bing Webmaster Tools \uff08Bing\u7ad9\u957f\u5de5\u5177\uff09\u4e2d\u7684\u7f51\u7ad9\u63d0\u4ea4\u529f\u80fd\u3002 Webmaster Tools > \u201cadd your site\u201d > fill in the form > hit \u201csubmit\u201d \u7f51\u7ad9\u7ad9\u957f\u5de5\u5177>\u6dfb\u52a0\u4f60\u7684\u7f51\u7ad9>\u586b\u5199\u8868\u5355>\u70b9\u51fb\u201c\u63d0\u4ea4\u201d\u6309\u94ae \u5982\u679c\u8981\u5c06\u7f51\u7ad9\u63d0\u4ea4\u7ed9Yahoo\uff0c\u4f60\u4e0d\u9700\u8981\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\uff0c Bing\u652f\u6301Yahoo\u7684\u7d22\u5f15 \u3002 \u901a\u8fc7\u63d0\u4ea4Bing\uff0c\u4f60\u7684\u7f51\u7ad9\u5c06\u81ea\u52a8\u63d0\u4ea4\u7ed9Yahoo\u641c\u7d22\u5f15\u64ce\u3002 \u5c0f\u63d0\u793a \u5c0f\u63d0\u793a\uff1a\u4f60\u7684\u7f51\u7ad9\u5728\u4e2d\u56fd\u6709\u53d7\u4f17\u4e48\uff1f\u4f60\u53ef\u4ee5\u63d0\u4ea4\u4f60\u7684\u7f51\u7ad9\u5230Baidu\uff08 76%+\u7684\u641c\u7d22\u5f15\u64ce\u5e02\u573a\u4efd\u989d \uff09\u3002\u5982\u679c\u6ca1\u6709\u7684\u8bdd\uff0c\u90a3\u4e48\u4f60\u53ea\u9700\u8981\u63d0\u4ea4Google\uff0cBing\u548cYahoo\u5c31\u53ef\u4ee5\u4e86\u3002\u6211\u4eec\u8fd9\u4e2a\u6587\u7ae0\u4e0d\u4f1a\u9488\u5bf9Baidu\u53bb\u6240\uff0c\u4f46\u662f\u8fd9\u91cc\u662f \u63d0\u4ea4\u767e\u5ea6\u641c\u7d22\u5f15\u64ce\u7684\u6559\u7a0b \u3002 \u5982\u4f55\u68c0\u67e5\u7f51\u7ad9\u662f\u5426\u88ab\u7d22\u5f15 \u00b6 \u4f7f\u7528\u5728\u8c37\u6b4c\u4f7f\u7528site\u9ad8\u7ea7\u641c\u7d22\u529f\u80fd\uff0c\u5c31\u80fd\u591f\u68c0\u6d4b\u4f60\u7684\u7f51\u5740\u662f\u5426\u5907\u7d22\u5f15\u3002 \u8fd9\u91cc\u662f\u9ad8\u7ea7\u641c\u7d22\u7684\u4ee3\u7801\uff1a site:yourdomain.com/page-to-check/ \u540c\u65f6\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7Site+\u4f60\u7684\u4e3b\u57df\u540d\u53bb\u67e5\u770b\u6574\u4f53\u7684\u7d22\u5f15\u60c5\u51b5\u3002 \u5c0f\u63d0\u793a \u8fd9\u79cd\u65b9\u5f0f\u5728\u8c37\u6b4c\u548c\u5fc5\u5e94\u641c\u7d22\u5f15\u64ce\u91cc\u90fd\u6709\u6548\u3002 \u6ca1\u6709\u7ed3\u679c\uff1f\u90a3\u4e48\u4f60\u7684\u7f51\u7ad9\u6216\u7f51\u9875\u53ef\u80fd\u5c1a\u672a\u7f16\u5165\u7d22\u5f15\u3002 \u5982\u679c\uff0c\u5728\u4f60\u516c\u5f00\u7f51\u7ad9\u540e\u7684\u51e0\u5929\u6ca1\u6709\u6570\u636e\uff0c\u8bf7\u4e0d\u8981\u62c5\u5fc3\u3002 \u4f46\u662f\uff0c\u5982\u679c\u5728\u4e00\u5468\u6216\u4e24\u5468\u4e4b\u540e\u4ecd\u672a\u7f16\u5165\u7d22\u5f15\uff0c\u90a3\u4e48\u4f60\u7684\u7f51\u7ad9\u53ef\u80fd\u5b58\u5728\u95ee\u9898\u3002 \u540c\u65f6\uff0c\u4f60\u8fd8\u53ef\u4ee5\u5728Google Search Console\uff08\u8c37\u6b4c\u7ad9\u957f\u5de5\u5177\uff09\u4e2d\u67e5\u770b\u7f51\u7ad9\u7684\u7d22\u5f15\u72b6\u6001\u3002 \u4f46\u662f\uff0c\u53ea\u6709\u65b0\u7684Google Search Console\u624d\u4f1a\u663e\u793a\u7d22\u5f15\u9875\u9762\u5217\u8868\u3002 Search Console > Status > Index Coverage \u641c\u7d22\u63a7\u5236\u53f0>\u72b6\u6001>\u7d22\u5f15\u8986\u76d6\u7387 \u8f6c\u5230 Valid\uff08\u6709\u6548\uff09\u6807\u7b7e\uff0c\u7136\u540e\u9009\u62e9 Indexed, not submitted in sitemap\uff08\u5df2\u5efa\u7acb\u7d22\u5f15\uff0c\u672a\u5728\u7ad9\u70b9\u5730\u56fe\u4e2d\u63d0\u4ea4\uff09\u6216 Submitted and indexed\uff08\u5df2\u63d0\u4ea4\u5e76\u5df2\u7f16\u5165\u7d22\u5f15\uff09\uff0c\u4ee5\u67e5\u770bGoogle\u7d22\u5f15\u4e2d\u7684\u9875\u9762URL\u5217\u8868\u3002 \u5c0f\u63d0\u793a \u4f60\u4e5f\u53ef\u4ee5\u5728Bing\u7ad9\u957f\u5de5\u5177\u4e2d\u8fdb\u884c\u76f8\u540c\u7684\u64cd\u4f5c\u3002 \u5982\u679c\u7f51\u7ad9\u3001\u7f51\u9875\u4e0d\u7d22\u5f15\u7684\u8bdd\u600e\u4e48\u529e \u00b6 \u5982\u679c\u4f60\u901a\u8fc7\u6570\u636e\u5f97\u51fa\u7ed3\u8bba\u662f\uff0c\u7f51\u7ad9\u6216\u7f51\u9875\u6ca1\u6709\u7f16\u5165\u7d22\u5f15\u3002\u90a3\u4e48\uff0c\u4f60\u9700\u8981\u5f04\u6e05\u695a\u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837\u3002 \u4ee5\u4e0b\u662f\u53ef\u80fd\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\u7684\u4e00\u4e9b\u5e38\u89c1\u539f\u56e0\uff0c\u4ee5\u53ca\u4e00\u4e9b\u89e3\u51b3\u65b9\u6848\uff1a \u8be5\u7f51\u9875\u6709\u4e00\u4e2anoindex\u6807\u7b7e \u8fd9\u544a\u8bc9\u8c37\u6b4c\u548c\u5176\u4ed6\u641c\u7d22\u5f15\u64ce\u4e0d\u8981\u7d22\u5f15\u5f53\u524d\u9875\u9762\u3002\u4f60\u53ef\u4ee5\u68c0\u67e5\u7f51\u9875\u4e0a\u662f\u5426\u5b58\u5728noindex\u6807\u8bb0\uff0c\u7136\u540e\u53ef\u4ee5\u901a\u8fc7\u5728\u9875\u9762\u7684HTML\u4e2d\u641c\u7d22noindex\u6807\u8bb0\uff0c\u6765\u627e\u5230\u9700\u8981\u5220\u9664\u7684\u6807\u8bb0\u4f4d\u7f6e\uff08\u5982\u679c\u9700\u8981\uff09\u3002\u8fd9\u91cc\u6709\u5173\u4e8e noindex\u6807\u7b7e\u7684\u66f4\u591a\u4fe1\u606f ; robots.txt\u6587\u4ef6\u5728\u963b\u6b62\u7d22\u5f15 \u6bcf\u4e2a\u7f51\u7ad9\u90fd\u6709\u5176\u4e2d\u4e00\u4e2aRobot.txt\u3002\u5b83\u4e3a\u8718\u86db\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u8981\u9075\u5faa\u7684\u89c4\u5219\uff0c\u4f8b\u5982\u5176\u4e2d\u89c4\u5b9a\u4e86\u8718\u86db\u5141\u8bb8/\u4e0d\u5141\u8bb8\u6293\u53d6\u7684\u9875\u9762\u4ee5\u53ca\u53ef\u4ee5\u7d22\u5f15/\u4e0d\u80fd\u7d22\u5f15\u7684\u9875\u9762\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528Google\u7684 Robots Testing Tool \uff08\u8718\u86db\u6d4b\u8bd5\u5de5\u5177\uff09\u68c0\u67e5robots.txt\u4e2d\u662f\u5426\u963b\u6b62\u4e86\u76ee\u6807\u7f51\u5740\u3002\u53ea\u9700\u8f93\u5165\u4e00\u4e2aURL\uff0c\u5b83\u5c31\u4f1a\u663e\u793a\u5f53\u524d\u94fe\u63a5\u662f\u5426\u88ab\u5141\u8bb8\u6216\u963b\u6b62\u3002 .htaccess\u6587\u4ef6\u963b\u6b62\u7d22\u5f15 \u8fd9\u662f\u5728\u57fa\u4e8eApache\u7684Web\u670d\u52a1\u5668\u4e0a\u8fd0\u884c\u7684\u7f51\u7ad9\u7684\u914d\u7f6e\u6587\u4ef6\uff08 \u5927\u7ea6\u5360\u6240\u6709\u7ad9\u70b9\u768446\uff05 \uff09\u3002\u5982\u679c\u4f60\u7684.htaccess\u6587\u4ef6\u5305\u542b\u5934\u90e8\u4fe1\u606f\uff1aX\u2011Robots-Tag \u201cnoindex\uff0cnofollow\u201d\uff0c\u5219\u5e94\u5c06\u5176\u5220\u9664\uff0c\u5141\u8bb8\u8c37\u6b4c\u8718\u86db\u6293\u53d6\u4f60\u7684\u7f51\u5740\u5e76\u7d22\u5f15\u3002 \u5c0f\u63d0\u793a \u5982\u679c\u4e0a\u65b9\u68c0\u6d4b\u6ca1\u6709\u4efb\u4f55\u95ee\u9898\u7684\u8bdd\u3002\u90a3\u4e48\u5f88\u53ef\u80fd\u662f\u56e0\u4e3a\u5f53\u524d\u9875\u9762\u63d0\u4f9b\u7684\u5185\u5bb9\u8d28\u91cf\u8fc7\u4f4e\u3002\u540c\u65f6\uff0c\u4e5f\u610f\u5473\u7740\u4f60\u7684\u7f51\u7ad9\u6709\u4e00\u4e9b\u6280\u672f\u95ee\u9898\uff0c\u53ef\u80fd\u4f60\u9700\u8981\u62db\u8058\u4e00\u4e2a SEO\u6280\u672f \u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 \u540c\u65f6\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 URL inspection tool \uff08URL\u68c0\u67e5\u5de5\u5177\uff09\u3002 Search Console > URL inspection > enter page URL > hit enter \u641c\u7d22\u63a7\u5236\u53f0 > URL\u68c0\u67e5 > \u8f93\u5165\u9875\u9762UR L> \u6309\u56de\u8f66\u952e \u4f60\u53ef\u4ee5\u770b\u5230\u8fd9\u4e2a\u9875\u9762\u5e76\u6ca1\u6709\u88ab\u7d22\u5f15\uff0c\u4e3a\u4ec0\u4e48\u5462\uff1f \u5411\u4e0b\u6eda\u52a8\uff0c\u8c37\u6b4c\u4f1a\u63d0\u4f9b\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u3002 \u8fd9\u4e2a\u9875\u9762\u4e0d\u7d22\u5f15\u662f\u56e0\u4e3a\u6709\u4e00\u4e2a301\u91cd\u5b9a\u5411\u548c canonical tag\uff08\u89c4\u8303\u6807\u7b7e\uff09\u5b58\u5728\u3002 \u9762\u5bf9Canonical\u8fd9\u6837\u95ee\u9898\u4f60\u4e0d\u9700\u8981\u62c5\u5fc3\u3002\u4f46\u662f\u5982\u679c\u8c37\u6b4c\u8fd4\u56de\u4e00\u4e9b\u771f\u6b63\u7684\u7d22\u5f15\u95ee\u9898\uff0c\u4f60\u53ef\u80fd\u5c31\u9700\u8981\u9488\u5bf9\u95ee\u9898\u8fdb\u884c\u4fee\u6539\uff0c\u5e76\u8ba9\u81ea\u5df1\u7684\u9875\u9762\u7d22\u5f15\u3002 \u5c0f\u63d0\u793a \u4f60\u53ef\u4ee5\u5728 \u8fd9\u91cc \u627e\u5230\u4e00\u4e9b\u4e0d\u88ab\u7d22\u5f15\u7684\u539f\u56e0\u5217\u8868\u3002 \u4e3a\u4ec0\u4e48\u63d0\u4ea4\u7f51\u7ad9\u4e0d\u7b49\u4e8e\u7f51\u7ad9\u53c2\u4e0e\u6392\u540d\uff08\u4ee5\u53ca\u5982\u4f55\u4fee\u590d\uff09 \u00b6 \u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u8c37\u6b4c\u641c\u7d22\u4f1a\u8fd4\u56de\u6210\u5343\u4e0a\u4e07\u7684\u641c\u7d22\u7ed3\u679c\u3002 \u4f46\u662f\u5927\u591a\u6570\u4eba\u57fa\u672c\u4e0a\u90fd\u505c\u7559\u5728\u641c\u7d22\u7684\u7b2c\u4e00\u9875\u3002\u8fd9\u610f\u5473\u7740\u6392\u540d\u8d85\u8fc7\u4f4d\u7f6e\uff0310\u7684\u9875\u9762\uff0c\u51e0\u4e4e\u662f\u6ca1\u6709\u6d41\u91cf\u7684\u3002 \u51fa\u4e8e\u8fd9\u4e2a\u539f\u56e0\uff0c\u88ab\u7d22\u5f15\u5e76\u4e0d\u4e00\u5b9a\u610f\u5473\u7740\u7528\u6237\u5c06\u80fd\u591f\u627e\u5230\u4f60\u7684\u7f51\u7ad9\u3002 \u5982\u679c\u60a8\u60f3\u8981\u81ea\u7136\u6d41\u91cf\uff0c\u5c31\u9700\u8981\u6392\u5728\u7b2c\u4e00\u9875\uff08\u7406\u60f3\u60c5\u51b5\u4e0b\u662f\u5728\u524d3\u4e2a\u7ed3\u679c\u4e2d\uff09\u3002 \u4f60\u600e\u4e48\u505a\u5230\u8fd9\u4e00\u70b9\uff1f \u8fd9\u5f88\u590d\u6742\uff0c\u4f46\u4f60\u80af\u5b9a\u9700\u8981\u7684\u4e00\u4ef6\u4e8b\u662f \u53cd\u5411\u94fe\u63a5 \u3002 Google\u4f1a\u7edf\u8ba1\u53cd\u5411\u94fe\u63a5\u7684\u6570\u91cf\u3002 \u56e0\u6b64\uff0c\u5f53\u4ed6\u4eec\u5728\u540c\u4e00\u4e3b\u9898\u4e0a\u5448\u73b0\u4e24\u4e2a\u6216\u66f4\u591a\u9875\u9762\u53c2\u4e0e\u6392\u540d\u65f6\uff0c\u53cd\u5411\u94fe\u63a5\u8d8a\u591a\u7684\u9875\u9762\u66f4\u5bb9\u6613\u53c2\u4e0e\u4f18\u8d28\u7684\u6392\u540d\u3002 \u8bd1\u8005\u6ce8 \u5176\u5b9e\u8fd9\u79cd\u8bf4\u6cd5\u5e76\u4e0d\u79d1\u5b66\u3002 \u6211\u4eec\u7edd\u5bf9\u4e0d\u4f1a\u8bf4\u5177\u6709\u66f4\u591a\u53cd\u5411\u94fe\u63a5\u7684\u9875\u9762\u80af\u5b9a\u53ef\u4ee5\u53c2\u4e0e\u4f18\u8d28\u6392\u540d\u3002 \u4f46\u662f\u8bdd\u867d\u5982\u6b64\uff0c\u5f53\u6211\u4eec\u7814\u7a76\u4e86\u8fd110\u4ebf\u4e2a\u7f51\u9875\u65f6\uff0c\u6211\u4eec\u53d1\u73b0\u7f51\u9875\u7684 Referring Domains\uff08\u5f15\u7528\u57df\u6570\u91cf\uff09\u4e0e\u5176\u6574\u4f53\u6536\u5230\u7684Google\u641c\u7d22\u6d41\u91cf\u6570\u91cf\u662f\u6709\u4e00\u5b9a\u76f8\u5173\u6027\u7684\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528Ahefs\u4e2d Keywords Explorer \u62a5\u544a\u7684 SERP overview \uff08SERO\u603b\u89c8\u62a5\u544a\uff09\u90e8\u5206\u770b\u5230\u6392\u540d\u524d\u534110\u7684\u9875\u9762\u5206\u522b\u83b7\u5f97\u4e86\u591a\u5c11\u94fe\u63a5\u3002 Keywords Explorer > enter the keyword you want to rank for > SERP overview \u5173\u952e\u5b57\u8d44\u6e90\u7ba1\u7406\u5668>\u8f93\u5165\u60a8\u8981\u4e3a\u5176\u6392\u540d\u7684\u5173\u952e\u5b57> SERP\u6982\u8ff0 \u8fd9\u53ef\u4ee5\u8ba9\u4f60\u5927\u81f4\u4e86\u89e3\u9996\u9875\u6392\u540d\u53ef\u80fd\u9700\u8981\u591a\u5c11\u53cd\u5411\u94fe\u63a5\u3002 \uff08\u540c\u65f6\u4f60\u8fd8\u53ef\u4ee5\u67e5\u770b\u6211\u4eec\u7684\u5173\u952e\u5b57\u96be\u5ea6\u5206\u6570\uff0c\u4ee5\u83b7\u5f97\u76f8\u5173\u4fe1\u606f\u3002\uff09 \u4f46\u5e76\u975e\u5168\u4f9d\u9760\u94fe\u63a5\u3002\u4f60\u8fd8\u9700\u8981\u786e\u4fdd\u4f60\u7684\u9875\u9762\u4f18\u5316\u5230\u4f4d\uff0c\u5e76\u786e\u4fdd\u5173\u952e\u5b57\u5b9a\u4f4d\u51c6\u786e\u3002 \u4ee5\u4e0b\u662f\u4e00\u4e9b\u53ef\u4ee5\u5e2e\u52a9\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u7684\u6587\u7ae0\u3002 \u66f4\u591a\u9605\u8bfb\uff1a \u65b0\u624b\u53cb\u597d\u7684\u94fe\u63a5\u5efa\u8bbe\u6307\u5357 \u4e22\u5931\u94fe\u63a5\u5efa\u8bbe\u7684\u7b80\u5355\uff08\u5b8c\u6574\uff09\u6307\u5357 \u5982\u4f55\u4f7f\u7528TRUST\u516c\u5f0f\u83b7\u5f97\u9ad8\u8d28\u91cf\u7684\u53cd\u5411\u94fe\u63a5[\u6848\u4f8b\u7814\u7a76] \u89e3\u6790Linkbait\uff1a\u5982\u4f55\u521b\u5efa\u5438\u5f15\u53cd\u5411\u94fe\u63a5\u7684\u5185\u5bb9 7\u79cd\u53ef\u884c\u7684\u65b9\u6cd5\u6765\u641c\u522e\u7ade\u4e89\u5bf9\u624b\u7684\u53cd\u5411\u94fe\u63a5 \u9875\u9762SEO\uff1a\u4e00\u4e2a\uff082\u767e\u4e07\u5173\u952e\u5b57\uff09\u6570\u636e\u5206\u6790 \u5982\u4f55\u505aSEO\u7684\u5173\u952e\u8bcd\u7814\u7a76 \u5982\u4f55\u8861\u91cf\u5173\u952e\u5b57\u96be\u5ea6\uff0c\u627e\u5230\u6700\u5bb9\u6613\u6392\u540d\u7684\u5173\u952e\u8bcd \u5bfb\u627e\u5177\u6709\u5e9e\u5927\u6d41\u91cf\u6f5c\u529b\u7684\u672a\u5f00\u53d1\u5173\u952e\u5b57\u76844\u79cd\u65b9\u6cd5 \u957f\u5c3e\u5173\u952e\u8bcd\uff1a\u5982\u4f55\u4ece\u201c\u4e0d\u53d7\u6b22\u8fce\u7684\u201d\u641c\u7d22\u4e2d\u83b7\u5f97\u5927\u6d41\u91cf \u4e3a\u4ec0\u4e48\u4e0d\u80fd\u76f2\u76ee\u4fe1\u4efb\u5173\u952e\u5b57\u641c\u7d22\u91cf\u8fdb\u884c\u6d41\u91cf\u4f30\u7b97 \u6700\u540e\u603b\u7ed3 \u00b6 \u5373\u4f7f\u4f60\u6ca1\u6709\u63d0\u4ea4\u4f60\u7684\u7f51\u7ad9\uff0cGoogle\u4e5f\u53ef\u80fd\u4f1a\u627e\u5230\u4f60\u7684\u7f51\u5740\u3002 Bing\u548c\u5176\u4ed6\u641c\u7d22\u5f15\u64ce\u4e5f\u662f\u5982\u6b64\u3002 \u8bdd\u867d\u5982\u6b64\uff0c\u6211\u4eec\u4ecd\u5efa\u8bae\u60a8\u4f7f\u7528\u4e0a\u8ff0\u7f51\u7ad9\u5730\u56fe\u65b9\u6cd5\uff0c\u624b\u52a8\u63d0\u4ea4\u4f60\u7684\u7f51\u7ad9\u3002 \u4e3a\u4ec0\u4e48\uff1f \u56e0\u4e3a\u5219\u53ef\u4ee5\u4e3aGoogle\u548cBing\u63d0\u4f9b\u4e86\u6709\u5173\u7f51\u7ad9\u7684\u989d\u5916\u4fe1\u606f\uff0c\u5e76\u4e14\u4f5c\u4e3a\u56de\u62a5\uff0c\u4ed6\u4eec\u4f1a\u4e3a\u4f60\u63d0\u4f9b\u66f4\u591a\u7684\u6570\u636e\u3002 \u5bf9\u4e8e\u505a\u8fc7\u9875\u9762\u66f4\u65b0\u7684\uff0c\u540c\u6837\u503c\u5f97\u91cd\u65b0\u63d0\u4ea4\u3002 \u4f46\u8bf7\u8bb0\u4f4f\uff0c\u83b7\u53d6\u7d22\u5f15\u53ea\u662f\u4f18\u5316\u7684\u4e00\u90e8\u5206\u3002 \u4e0d\u5728SEO\u5de5\u4f5c\u4e2d \u6295\u5165 \uff0c\u662f\u4e0d\u4f1a\u6709\u56de\u62a5\u7684\u3002 \u51e1\u672c\u7f51\u6ce8\u660e\"\u6765\u6e90\uff1aXXX \"\u7684\u6587/\u56fe/\u89c6\u9891\u7b49\u7a3f\u4ef6\uff0c\u672c\u7f51\u8f6c\u8f7d\u51fa\u4e8e\u4f20\u9012\u66f4\u591a\u4fe1\u606f\u4e4b\u76ee\u7684\uff0c\u5e76\u4e0d\u610f\u5473\u7740\u8d5e\u540c\u5176\u89c2\u70b9\u6216\u8bc1\u5b9e\u5176\u5185\u5bb9\u7684\u771f\u5b9e\u6027\u3002\u5982\u6d89\u53ca\u4f5c\u54c1\u5185\u5bb9\u3001\u7248\u6743\u548c\u5176\u5b83\u95ee\u9898\uff0c\u8bf7\u4e0e\u672c\u7f51\u8054\u7cfb\uff0c\u6211\u4eec\u5c06\u5728\u7b2c\u4e00\u65f6\u95f4\u5220\u9664\u5185\u5bb9\uff01 \u4f5c\u8005: Joshua Hardwick \u6765\u6e90\uff1a https://ahrefs.com/blog/zh/submit-website-to-search-engines/","title":"\u5982\u4f55\u628a\u7f51\u7ad9\u63d0\u4ea4\u7ed9\u641c\u7d22\u5f15\u64ce"},{"location":"pages/affiliate/submit-website-to-search-engines/#\u5982\u4f55\u628a\u7f51\u7ad9\u63d0\u4ea4\u7ed9\u641c\u7d22\u5f15\u64ce\u5728\u7279\u5b9a\u60c5\u51b5\u4e0d\u9700\u8981\u63d0\u4ea4","text":"\u5982\u679c\u641c\u7d22\u5f15\u64ce\u6ca1\u6709\u770b\u5230\u3001\u770b\u8fc7\u4f60\u7684\u7f51\u7ad9\uff0c\u90a3\u4e48\u4f60\u7684\u7f51\u7ad9\u4e0d\u662f\u4e0d\u53ef\u80fd\u53c2\u4e0e\u6392\u540d\uff0c\u800c\u662f\u80af\u5b9a\u4e0d\u53ef\u80fd\u53c2\u4e0e\u6392\u540d\u3002 \u5b9e\u9645\u4e0a\uff1a\u641c\u7d22\u5f15\u64ce\u9700\u8981\u65f6\u95f4\u6765\u53d1\u73b0\uff08\u548c \u7d22\u5f15 \uff09\u65b0\u7f51\u7ad9\u3002 \u8fd9\u610f\u5473\u7740\uff0c\u5982\u679c\u4f60\u5728Google\u4e2d\u641c\u7d22\u4e24\u5929\u524d\u4e0a\u7ebf\u7684\u7f51\u7ad9\uff0c\u4f60\u5f88\u53ef\u80fd\u4f1a\u5f88\u5931\u671b\u3002\u56e0\u4e3a\uff0c10\u6b21\u4e2d\u67099\u6b21\uff0c\u4f60\u53ef\u80fd\u4ec0\u4e48\u90fd\u627e\u4e0d\u5230\u3002 \u7136\u800c\uff0c\u5373\u4f7f\u5728\u4e0a\u7ebf\u51e0\u5468\u540e\uff0c\u4f60\u4ecd\u7136\u53ef\u80fd\u65e0\u6cd5\u5728Google\uff0cBing\u548cYahoo\u4e2d\u770b\u5230\u4f60\u7684\u7f51\u7ad9\u3002\u8fd9\u4e9b\u641c\u7d22\u5f15\u64ce\u5408\u8ba1\uff0c\u5360\u4e86\u6574\u4e2a\u4e2a \u641c\u7d22\u5e02\u573a\u4efd\u989d\u768496\uff05 \u3002 \u5982\u679c\u4f60\u662f\u4e0a\u8ff0\u8fd9\u6837\u7684\u60c5\u51b5\uff0c\u540c\u65f6\uff0c\u4f60\u6025\u9700\u5982\u4f55\u628a\u7f51\u7ad9\u63d0\u4ea4\u7ed9\u5bf9\u5e94\u641c\u7d22\u5f15\u64ce\u7684\u77e5\u8bc6\uff0c\u90a3\u4e48\u8fd9\u7bc7\u6587\u7ae0\u4f1a\u975e\u5e38\u9002\u5408\u4f60\u3002\u4ee5\u4e0b\u662f\u6211\u4eec\u5c06\u5728\u672c\u6587\u4e2d\u8ba8\u8bba\u7684\u5185\u5bb9\uff1a \u5982\u4f55\u5c06\u7f51\u7ad9\u63d0\u4ea4\u7ed9Google\uff0cBing\u548cYahoo; \u5982\u4f55\u786e\u4fdd\u5b83\u5b9e\u9645\u88ab\u7d22\u5f15\uff08\u4ee5\u53ca\u5982\u679c\u4e0d\u662f\uff0c\u8be5\u600e\u4e48\u505a\uff09; \u4e3a\u4ec0\u4e48\u8981\u5c06\u63d0\u4ea4\u7ed9\u8c37\u6b4c\u4e0d\u7b49\u4e8e\u6392\u540d\uff08\u4ee5\u53ca\u5982\u4f55\u89e3\u51b3\u6b64\u95ee\u9898\uff09 \u4f46\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u89e3\u51b3\u57282018\u5e74\u8bb8\u591a\u4eba\u666e\u904d\u9047\u5230\u7684\u95ee\u9898.\u2026.","title":"\u5982\u4f55\u628a\u7f51\u7ad9\u63d0\u4ea4\u7ed9\u641c\u7d22\u5f15\u64ce\uff1f\uff08\u5728\u7279\u5b9a\u60c5\u51b5\u4e0d\u9700\u8981\u63d0\u4ea4\uff09"},{"location":"pages/affiliate/submit-website-to-search-engines/#\u4f60\u771f\u7684\u9700\u8981\u628a\u4f60\u7684URL\u63d0\u4ea4\u7ed9\u641c\u7d22\u5f15\u64ce\u4e48","text":"\u5176\u5b9eGoogle\u548c\u5176\u4ed6\u641c\u7d22\u5f15\u64ce\u7684\u5185\u5bb9\u6784\u5efa\u5e76\u4e0d\u4f9d\u8d56\u4e8e\u63d0\u4ea4\uff0c\u8fd9\u5c31\u662f\u5b83\u4eec\u4e3a\u4ec0\u4e48\u4e3b\u52a8 \u6293\u53d6 \u5404\u79cd\u7f51\u7ad9\u7684\u539f\u56e0\u3002 \u4e0d\u719f\u6089\u6293\u53d6\uff1f\u6293\u53d6\u5c31\u662f\uff0c\u5f53\u641c\u7d22\u5f15\u64ce\u5728\u7f51\u7ad9\u4e0a\u627e\u5230\u65b0\u94fe\u63a5\u65f6\uff0c\u4f1a\u968f\u540e\u201c\u5173\u6ce8\u201d\u8fd9\u4e9b\u94fe\u63a5\u9875\u9762\u3002\u5982\u679c\u65b0\u53d1\u73b0\u7684\u94fe\u63a5\u9875\u9762\u4e0a\u6709\u6709\u4ef7\u503c\u7684\u5185\u5bb9\u65f6\uff0c\u5c31\u5c06\u8be5\u9875\u9762\u5c06\u6dfb\u52a0\u5230\u7d22\u5f15\u4e2d\u3002 Matt Cutts\u5728\u8fd9\u4e2a \u89c6\u9891 \u4e2d\u89e3\u91ca\u4e86\u66f4\u591a\u6293\u53d6\u548c\u7d22\u5f15\u7684\u539f\u7406\uff1a https://www.youtube.com/watch?v=BNHR6IQJGZs \u540c\u65f6\u8c37\u6b4c\u8fd8\u4f1a\u52a8\u8fc7\u5176\u5b83\u7684\u9014\u5f84\u4e86\u89e3\u6700\u65b0\u7684\u4fe1\u606f\uff0c\u6bd4\u5982\u8bf4Chrome\u6d4f\u89c8\u5668\u7684\u94fe\u63a5\u8f93\u5165\uff0c\u4ee5\u53ca\u57df\u540d\u6ce8\u518c\u6570\u636e\u3002\u8c37\u6b4c\u4f1a\u4e0d\u65ad\u7684\u4e3a\u7528\u6237\u5bfb\u627e\u6700\u65b0\u6700\u6709\u6548\u7684\u9875\u9762\u3002 \u5c0f\u63d0\u793a \u6709\u4e9b\u65f6\u5019SEO\u4f1a\u5bf9\u6b64\u6709\u4e9b\u504f\u6267\uff0c\u4e8e\u662f\u4e4e\u5c31\u6709\u4e86\u50cf \u8fd9\u4e2a \u548c \u8fd9\u4e2a \u7684\u7814\u7a76\u3002 \u603b\u800c\u8a00\u4e4b\uff0c\u8fd9\u610f\u5473\u7740\u641c\u7d22\u5f15\u64ce\u975e\u5e38\u5584\u4e8e\u53d1\u73b0\u65b0\u7f51\u7ad9\u548c\u7f51\u9875\u3002\u5f53\u7136\uff0c\u524d\u63d0\u662f\u8fd9\u4e9b\u9875\u9762\u662f\u4ece\u7f51\u7edc\u4e0a\u7684\u67d0\u4e2a\u5730\u65b9\u80fd\u591f\u627e\u5230\u7684\u3002 \uff08\u6211\u4eec\u7a0d\u540e\u4f1a\u8be6\u7ec6\u8ba8\u8bba\u94fe\u63a5\u7684\u91cd\u8981\u6027\uff01\uff09","title":"\u4f60\u771f\u7684\u9700\u8981\u628a\u4f60\u7684URL\u63d0\u4ea4\u7ed9\u641c\u7d22\u5f15\u64ce\u4e48\uff1f"},{"location":"pages/affiliate/submit-website-to-search-engines/#\u4e3a\u4ec0\u4e48\u4f60\u4ecd\u7136\u5e94\u8be5\u5c06\u4f60\u7684\u7f51\u7ad9\u63d0\u4ea4\u7ed9\u641c\u7d22\u5f15\u64ce","text":"\u4ee5\u4e0b\u662f\u624b\u52a8\u63d0\u4ea4\u4ecd\u7136\u662f\u201c\u91cd\u8981\u201d\u7684\u51e0\u4e2a\u539f\u56e0\uff1a \u505a\u4e86\u6bd4\u4e0d\u505a\u8981\u597d \u3002\u8ba9\u6211\u4eec\u9762\u5bf9\u73b0\u5b9e\uff0c\u65e0\u8bba\u4f60\u662f\u5426\u9009\u62e9\u624b\u52a8\u63d0\u4ea4\uff0c\u641c\u7d22\u5f15\u64ce\u90fd\u53ef\u80fd\u627e\u5230\u4f60\u7684\u7f51\u7ad9\u3002\u4f46\u201c\u53ef\u80fd\u201d\u8db3\u591f\u597d\u5417\uff1f\u63d0\u4ea4\u4f60\u7684\u7f51\u7ad9\u53ea\u9700\u8981\u4e00\u4e24\u5206\u949f\u3002\u90a3\u4e48\u4e3a\u4ec0\u4e48\u8981\u5192\u8fd9\u4e2a\u98ce\u9669\u5462\uff1f \u641c\u7d22\u5f15\u64ce\u65e0\u6cd5\u901a\u8fc7\u6293\u53d6\u6765\u627e\u51fa\u6240\u6709\u5185\u5bb9 \u3002\u5982\u679c\u4f60\u901a\u8fc7\u4e0b\u9762\u8ba8\u8bba\u7684\u65b9\u6cd5\u63d0\u4ea4\u4f60\u7684\u7f51\u7ad9\uff0c\u5c06\u6709\u673a\u4f1a\u5411Google\u548cBing\u63d0\u4f9b\u6709\u5173\u7f51\u7ad9\u7684\u4e00\u4e9b\u6709\u7528\u7684\u9875\u9762\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u544a\u8bc9\u641c\u7d22\u5f15\u64ce\u6bcf\u4e2a\u9875\u9762\u7684\u91cd\u8981\u7a0b\u5ea6\u3002\u641c\u7d22\u5f15\u64ce\u8718\u86db\u662f\u65e0\u6cd5\u5355\u72ec\u722c\u884c\u83b7\u53d6\u6b64\u4fe1\u606f\u3002 \u63d0\u4ea4\u6709\u52a9\u4e8e\u6539\u5584\u4f60\u7684\u7f51\u7ad9 \u3002 Google\u548cBing\u5404\u81ea\u4f1a\u901a\u8fc7\u5b83\u4eec\u7684\u62a5\u544a\u544a\u77e5\u4f60\u94fe\u63a5\u7684\u6293\u53d6\u60c5\u51b5\uff08\u7a0d\u540e\u4f1a\u8be6\u7ec6\u4ecb\u7ecd\uff01\uff09\u3002\u540c\u65f6\uff0c\u8fd8\u6709\u5404\u79cd\u7528\u4e8e\u6d4b\u8bd5\u4f60\u7f51\u9875\u7684\u5de5\u5177\uff0c\u5982\u679c\u4f60\u7684\u7f51\u7ad9\u4e0a\u51fa\u73b0\u6f5c\u5728\u95ee\u9898\u6216\u9519\u8bef\uff0c\u641c\u7d22\u5f15\u64ce\u90fd\u4f1a\u63d0\u9192\u4f60\u3002 \u8bdd\u867d\u5982\u6b64\uff0c\u4f46\u8bf7\u6ce8\u610f\uff0c\u5c06\u4f60\u7684\u7f51\u7ad9\u63d0\u4ea4\u7ed9Google\uff0c\u5e76\u5c06\u5176\u7f16\u5165\u7d22\u5f15\u53ea\u662f\u4f18\u5316\u7684\u4e00\u4e2a\u73af\u8282\u3002\u771f\u6b63\u7684\u56f0\u96be\u5728\u4e8e\u63d0\u9ad8\u4f60\u7684\u5173\u952e\u8bcd\u6392\u540d\u3002 \u4e0d\u8fc7\u4e0d\u7528\u62c5\u5fc3\uff0c\u8fd9\u4e2a\u6587\u7ae0\u4e2d\u6211\u4eec\u4f1a\u7ed9\u4e88\u4e00\u4e9b\u8fd9\u4e2a\u65b9\u9762\u7684\u5efa\u8bae\u3002 \u522b\u7740\u6025\uff0c\u6211\u4eec\u6162\u6162\u6765\u3002","title":"\u4e3a\u4ec0\u4e48\u4f60\u4ecd\u7136\u5e94\u8be5\u5c06\u4f60\u7684\u7f51\u7ad9\u63d0\u4ea4\u7ed9\u641c\u7d22\u5f15\u64ce?"},{"location":"pages/affiliate/submit-website-to-search-engines/#\u5982\u4f55\u628a\u4f60\u7684\u7f51\u5740\u63d0\u4ea4\u7ed9\u8c37\u6b4c","text":"\u5411Google\uff08\u548c\u5176\u4ed6\u641c\u7d22\u5f15\u64ce\uff09\u63d0\u4ea4\u7f51\u7ad9\u975e\u5e38\u5bb9\u6613\u3002 \u53ea\u9700\u89c2\u770b\u6211\u4eec\u7684\u89c6\u9891\u6559\u7a0b\uff0c\u6216\u6309\u7167\u4e0b\u9762\u7684\u4e66\u9762\u6b65\u9aa4\u64cd\u4f5c\u5373\u53ef\u3002 https://youtube.com/watch?v=H2a6H5vOKOk Google\u4e8e2018\u5e747\u6708 \u505c\u6b62\u4e86\u7f51\u5740\u63d0\u4ea4\u5de5\u5177 \u3002\u73b0\u5728\uff0c\u63d0\u4ea4\u7f51\u7ad9\u7684\u552f\u4e00\u65b9\u6cd5\u662f\u5728 Google Search Console \uff08\u8c37\u6b4c\u7ad9\u957f\u5de5\u5177\uff09\u4e2d\u6dfb\u52a0\u4f60\u7684Sitemap\uff08\u7f51\u7ad9\u5730\u56fe\uff09\u3002 \u4ec0\u4e48\u662fSitemap\uff08\u7f51\u7ad9\u5730\u56fe\uff09\uff1f \u7f51\u7ad9\u5730\u56fe\u662f\u4e00\u4e2a\u80fd\u5217\u51fa\u7f51\u7ad9\u4e0a\u6240\u6709\u9875\u9762\u7684\u6587\u4ef6\u3002 \u5b83\u901a\u5e38\u662f\u4e00\u4e2aXML\u6587\u4ef6\uff0c\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a \u8fd9\u4e2a\u662f\u4e00\u4e2a\u6700\u5e38\u89c1\u7684\u7f51\u7ad9\u5730\u56fe\uff0c\u5217\u51fa\u4e86\u6211\u7684\u535a\u5ba2\u4e2d\u6240\u6709\u7684\u5e16\u5b50\u3002 \u4f60\u7684\u7f51\u7ad9\u5730\u56fe\u901a\u5e38\u53ef\u4ee5\u7684\u901a\u8fc7 yourdomain.com/sitemap.xml \u8fd9\u6837\u7684\u65b9\u5f0f\u8fdb\u884c\u8bbf\u95ee\u3002\u5982\u679c\u4f60\u8bbf\u95ee\u4e0d\u4e86\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7 yourdomain.com/robots.txt \u67e5\u770b\u4e0b\u4f60\u7684 robots.txt \u6587\u4ef6\u3002\u901a\u5e38\u8fd9\u91cc\u4f1a\u663e\u793a\u4f60\u7684\u7f51\u7ad9\u5730\u56fe\u5730\u5740\u3002 \u6ca1\u6709\u7f51\u7ad9\u5730\u56fe? \u4f60\u9700\u8981\u5236\u4f5c\u4e00\u4e2a\u3002 \u6709\u51e0\u79cd\u65b9\u5f0f\u90fd\u53ef\u4ee5\u505a\u7f51\u7ad9\u5730\u56fe\u3002\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662fWordpress\u7a0b\u5e8f\uff08\u6216\u8005\u662f\u5176\u5b83\u7684CMS\uff09\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u4f7f\u7528\u5bf9\u5e94\u7684\u63d2\u4ef6\u6765\u751f\u6210\u7f51\u7ad9\u5730\u56fe\u3002\u6211\u4eec\u63a8\u8350\u4f7f\u7528 Yoast SEO\u63d2\u4ef6 \u3002\u5bf9\u4e8e\u9759\u6001\u7684\u7f51\u7ad9\u6765\u8bf4\uff0c\u53ef\u80fd \u8fd9\u4e2a\u7f51\u7ad9\u5730\u56fe\u5de5\u5177 \u4f1a\u66f4\u52a0\u7684\u9002\u5408\u3002\u5982\u679c\u4f60\u559c\u6b22\u624b\u52a8\u7684\u65b9\u6cd5\u53bb\u505a\u7f51\u7ad9\u5730\u56fe\uff0c\u4f60\u53ef\u4ee5\u53c2\u8003 \u8fd9\u4e2a\u6559\u7a0b \u53bb\u4f7f\u7528 Screamingfrog\u5de5\u5177\u3002 \u627e\u5230\u4e86\u4f60\u7684\u7f51\u7ad9\u5730\u56fe\uff1f\u975e\u5e38\u597d\uff0c\u73b0\u5728\u4f60\u53ea\u9700\u8981\u628a\u7f51\u7ad9\u5730\u56fe\u901a\u8fc7 Search Console \u63d0\u4ea4\u7ed9\u641c\u7d22\u5f15\u64ce\u3002 Search Console > select your property > Sitemaps > paste in your sitemap URL > hit \u201csubmit\u201d \u641c\u7d22\u63a7\u5236\u53f0>\u9009\u62e9\u4f60\u7684\u7f51\u7ad9>\u7ad9\u70b9\u5730\u56fe>\u7c98\u8d34\u4f60\u7684\u7ad9\u70b9\u5730\u56fe\u7f51\u5740>\u70b9\u51fb\u201c\u63d0\u4ea4\u201d \u5c0f\u63d0\u793a \uff1a\u4f60\u9700\u8981\u9a8c\u8bc1 Google Webmaster Tools \uff08\u8c37\u6b4c\u7ad9\u957f\u5de5\u5177\uff09\u4e4b\u540e\u624d\u53ef\u4ee5\u4f7f\u7528\u7f51\u7ad9\u5730\u56fe\u63d0\u4ea4\u529f\u80fd\u3002\u5982\u679c\u4f60\u6ca1\u6709\u9a8c\u8bc1\u8fc7\uff0c\u8bf7\u770b\u4e0b\u8fd9\u4e2a \u6559\u7a0b \u3002 \u8bf7\u6ce8\u610f\uff0c\u8fd9\u91cc\u6211\u4f7f\u7528\u7684\u662f\u65b0\u7248\u672c\u7684\u8c37\u6b4c\u7ad9\u957f\u5de5\u5177\uff0c\u4e0b\u9762\u662f\u65e7\u7248\u7684\u63d0\u4ea4\u6d41\u7a0b\u3002 Search Console > select your property > Crawl > Sitemaps > Add/test sitemap > paste in your sitemap URL > hit \u201csubmit\u201d \u641c\u7d22\u63a7\u5236\u53f0 > \u9009\u62e9\u4f60\u7684\u7f51\u7ad9 > \u6293\u53d6 > \u7ad9\u70b9\u5730\u56fe > \u6dfb\u52a0/\u6d4b\u8bd5\u7ad9\u70b9\u5730\u56fe > \u7c98\u8d34\u4f60\u7684\u7ad9\u70b9\u5730\u56fe\u7f51\u5740> \u70b9\u51fb\u201c\u63d0\u4ea4\u201d \u5982\u679c\u4f60\u6709\u591a\u4e2a\u7f51\u7ad9\u5730\u56fe\uff08\u6bd4\u5982\u4f60\u4f7f\u7528 Yoast\u63d2\u4ef6 \u7684\u65f6\u5019\uff09\u53ea\u9700\u8981\u91cd\u590d\u521a\u624d\u7684\u64cd\u4f5c\u5c31\u53ef\u4ee5\u3002","title":"\u5982\u4f55\u628a\u4f60\u7684\u7f51\u5740\u63d0\u4ea4\u7ed9\u8c37\u6b4c\uff1f"},{"location":"pages/affiliate/submit-website-to-search-engines/#\u5982\u679c\u4f60\u53ea\u60f3\u63d0\u4ea4\u5355\u4e2a\u7f51\u5740\u7ed9\u641c\u7d22\u5f15\u64ce","text":"\u8c37\u6b4c\u4e4b\u524d\u662f\u63d0\u4f9b\u8fc7\u4e00\u4e2a\u63d0\u4ea4\u5355\u4e00\u7f51\u5740\u7684\u529f\u80fd\u7684\uff0c\u4f46\u662f\u57282018\u5e74\u7684\u65f6\u5019\u8fd9\u4e2a\u529f\u80fd\u5df2\u7ecf\u4e0d\u518d\u4f7f\u7528\u4e86\u3002 \u4f46\u662f\uff0c\u4f60\u4f9d\u7136\u53ef\u4ee5\u4f7f\u7528\u65e7\u7248\u7684\u8c37\u6b4c\u7ad9\u957f\u5de5\u5177\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7 Fetch as Google \uff08\u6a21\u62df\u8c37\u6b4c\u6293\u53d6\uff09\u529f\u80fd\uff0c\u6765\u63d0\u4ea4\u4f60\u7684\u5355\u4e2a\u9875\u9762\u7f51\u5740\u3002\u4e0b\u9762\u662f\u6b65\u9aa4\u3002 Search Console > Crawl > Fetch as Google > paste in your URL > Fetch \u641c\u7d22\u63a7\u5236\u53f0>\u6293\u53d6>\u6293\u53d6\u4e3aGoogle>\u7c98\u8d34\u5230\u4f60\u7684\u7f51\u5740>\u6293\u53d6 \u7136\u540e\u4f60\u5f97\u70b9\u51fb Request indexing\uff08\u8bf7\u6c42\u7d22\u5f15\uff09\u6309\u94ae\u3002\u70b9\u51fb\u4e4b\u540e\u4f1a\u5f39\u51fa\u4e00\u4e2a\u4e0b\u65b9\u8fd9\u6837\u7684\u5f39\u7a97\u3002 \u52fe\u9009 I\u2019m not a robot\uff08\u4f60\u4e0d\u662f\u673a\u5668\u4eba\uff09\u9009\u9879\uff0c\u7136\u540e\u9009\u62e9\u662f\u5426\u8981Google\u6293\u53d6\u6b64\u7f51\u5740\uff0c\u6216\u8005\u662f\u6b64\u7f51\u5740\u4ee5\u53ca\u5b83\u7684\u8df3\u8f6c\u94fe\u63a5\u3002 \u8fd9\u6837\uff0c\u63d0\u4ea4\u5c31\u5b8c\u6210\u4e86\u3002 \u4f46\u662f\u5728 \u65b0\u7684Search Console \u4e2d\u5462\uff1f \u4f60\u8fd8\u80fd\u8fd9\u6837\u5417\uff1f \u8c37\u6b4c\u4f3c\u4e4e\u5df2\u7ecf\u5220\u9664\u4e86 Fetch as Google\uff08\u6a21\u62df\u8c37\u6b4c\u6293\u53d6\uff09\u5de5\u5177\uff0c\u66ff\u6362\u6210\u4e86 URL inspection tool \uff08URL\u68c0\u67e5\u5de5\u5177\uff09\u3002 \u8fd9\u4e2a\u5de5\u5177\u7684\u4e3b\u8981\u76ee\u7684\u662f\u68c0\u67e5URL\u6240\u51fa\u73b0\u7684\u95ee\u9898\u3002\u540c\u65f6\uff0c\u5f53\u4f60\u9009\u62e9\u91cd\u65b0\u6293\u53d6\u7684\u65f6\u5019\uff0c\u5b83\u5728\u7684\u4e91\u8fd0\u884c\u539f\u7406\u5176\u5b9e\u548c\u6a21\u62df\u8c37\u6b4c\u6293\u53d6\u529f\u80fd\u662f\u4e00\u6837\u7684\u3002 \u95ee\u9898\u5728\u4e8e\uff0c\u662f\u8c37\u6b4c\u5728\u5173\u4e8e\u4f7f\u7528\u8fd9\u4e2a \u5de5\u5177\u7684\u8bf4\u660e \u4e0a\u5e76\u6ca1\u6709\u592a\u591a\u7684\u7528\u5904\u3002\u4e0b\u65b9\u5c31\u662f\u8c37\u6b4c\u7ed9\u51fa\u7684\u8bf4\u660e\u3002 \u63d0\u4ea4URL\uff0c\u5e76\u8981\u6c42\u7d22\u5f15\uff1a \u4f7f\u7528 Inspect the URL (URL\u68c0\u67e5\u5de5\u5177\uff09 \u68c0\u67e5URL\u3002 \u9009\u62e9 Request indexing \uff08\u8bf7\u6c42\u7d22\u5f15\uff09 \u8be5\u5de5\u5177\u5c06\u5bf9URL\u8fd0\u884c\u5b9e\u65f6\u6d4b\u8bd5\uff0c\u4ee5\u67e5\u770b\u5b83\u662f\u5426\u6709\u4efb\u4f55\u660e\u663e\u7684\u7d22\u5f15\u95ee\u9898\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u9875\u9762\u5c06\u6392\u961f\u7b49\u5f85\u7d22\u5f15\u3002 \u5982\u679c\u8be5\u5de5\u5177\u53d1\u73b0\u9875\u9762\u6709\u95ee\u9898\uff0c\u4f60\u9700\u8981\u5c1d\u8bd5\u53bb\u4fee\u590d\u8fd9\u4e9b\u95ee\u9898\u3002 URL\u68c0\u67e5\u5f88\u5bb9\u6613\u627e\u5230\uff0c\u4f46\u662f\u5c31\u662f\u627e\u4e0d\u5230\u8bf7\u6c42\u7d22\u5f15\u7684\u6309\u94ae\u3002 \u6240\u4ee5\uff0c\u73b0\u5728\u6211\u4eec\u4e0d\u786e\u5b9a\u8fd9\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002 \u4f46\u662f\uff0c\u8fd9\u4e2a\u5de5\u5177\u4ecd\u5904\u4e8e\u6d4b\u8bd5\u9636\u6bb5\uff0cGoogle\u53ef\u80fd\u4f1a\u5728\u4ee5\u540e\u6dfb\u8fd9\u4e2a\u529f\u80fd\u6309\u94ae\u3002 \u4f46\u662f\uff0c\u5c31\u76ee\u524d\u800c\u8a00\uff0c\u4f60\u5e94\u8be5\u575a\u6301\u4f7f\u7528\u65e7\u7248Search Console\u4e2d\u7684 Fetch as Google\uff08\u6a21\u62df\u8c37\u6b4c\u6293\u53d6\uff09\u5de5\u5177\u3002","title":"\u5982\u679c\u4f60\u53ea\u60f3\u63d0\u4ea4\u5355\u4e2a\u7f51\u5740\u7ed9\u641c\u7d22\u5f15\u64ce"},{"location":"pages/affiliate/submit-website-to-search-engines/#\u5982\u4f55\u5411Bing\u5fc5\u5e94\u548cYahoo\u96c5\u864e\u641c\u7d22\u5f15\u64ce\u63d0\u4ea4\u4f60\u7684\u7f51\u7ad9","text":"\u548c\u8c37\u6b4c\u4e0d\u540c\u7684\u662f\uff0cBing\u4f9d\u7136\u6709 \u516c\u5f00\u7684URL\u63d0\u4ea4\u5de5\u5177 \u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u5de5\u5177\uff0c\u5728\u51e0\u79d2\u949f\u5185\u5411Bing\u63d0\u4ea4\u4efb\u4f55\u7f51\u7ad9\uff08\u5404\u79cd\u7f51\u7ad9\u90fd\u884c\uff09\u3002 \u53ea\u9700\u7c98\u8d34\u4e3b\u9875\u7f51\u5740\uff0c\u586b\u5199\u9a8c\u8bc1\u7801\u5e76\u70b9\u51fb\u63d0\u4ea4\u5373\u53ef\u3002 \u4f46\u662f\uff0c\u8fd9\u79cd\u65b9\u6cd5\u6211\u4eec\u5e76\u4e0d\u63a8\u8350\u3002\u6211\u4eec\u5efa\u8bae\u4f7f\u7528 Bing Webmaster Tools \uff08Bing\u7ad9\u957f\u5de5\u5177\uff09\u4e2d\u7684\u7f51\u7ad9\u63d0\u4ea4\u529f\u80fd\u3002 Webmaster Tools > \u201cadd your site\u201d > fill in the form > hit \u201csubmit\u201d \u7f51\u7ad9\u7ad9\u957f\u5de5\u5177>\u6dfb\u52a0\u4f60\u7684\u7f51\u7ad9>\u586b\u5199\u8868\u5355>\u70b9\u51fb\u201c\u63d0\u4ea4\u201d\u6309\u94ae \u5982\u679c\u8981\u5c06\u7f51\u7ad9\u63d0\u4ea4\u7ed9Yahoo\uff0c\u4f60\u4e0d\u9700\u8981\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\uff0c Bing\u652f\u6301Yahoo\u7684\u7d22\u5f15 \u3002 \u901a\u8fc7\u63d0\u4ea4Bing\uff0c\u4f60\u7684\u7f51\u7ad9\u5c06\u81ea\u52a8\u63d0\u4ea4\u7ed9Yahoo\u641c\u7d22\u5f15\u64ce\u3002 \u5c0f\u63d0\u793a \u5c0f\u63d0\u793a\uff1a\u4f60\u7684\u7f51\u7ad9\u5728\u4e2d\u56fd\u6709\u53d7\u4f17\u4e48\uff1f\u4f60\u53ef\u4ee5\u63d0\u4ea4\u4f60\u7684\u7f51\u7ad9\u5230Baidu\uff08 76%+\u7684\u641c\u7d22\u5f15\u64ce\u5e02\u573a\u4efd\u989d \uff09\u3002\u5982\u679c\u6ca1\u6709\u7684\u8bdd\uff0c\u90a3\u4e48\u4f60\u53ea\u9700\u8981\u63d0\u4ea4Google\uff0cBing\u548cYahoo\u5c31\u53ef\u4ee5\u4e86\u3002\u6211\u4eec\u8fd9\u4e2a\u6587\u7ae0\u4e0d\u4f1a\u9488\u5bf9Baidu\u53bb\u6240\uff0c\u4f46\u662f\u8fd9\u91cc\u662f \u63d0\u4ea4\u767e\u5ea6\u641c\u7d22\u5f15\u64ce\u7684\u6559\u7a0b \u3002","title":"\u5982\u4f55\u5411Bing\uff08\u5fc5\u5e94\uff09\u548cYahoo\uff08\u96c5\u864e\uff09\u641c\u7d22\u5f15\u64ce\u63d0\u4ea4\u4f60\u7684\u7f51\u7ad9"},{"location":"pages/affiliate/submit-website-to-search-engines/#\u5982\u4f55\u68c0\u67e5\u7f51\u7ad9\u662f\u5426\u88ab\u7d22\u5f15","text":"\u4f7f\u7528\u5728\u8c37\u6b4c\u4f7f\u7528site\u9ad8\u7ea7\u641c\u7d22\u529f\u80fd\uff0c\u5c31\u80fd\u591f\u68c0\u6d4b\u4f60\u7684\u7f51\u5740\u662f\u5426\u5907\u7d22\u5f15\u3002 \u8fd9\u91cc\u662f\u9ad8\u7ea7\u641c\u7d22\u7684\u4ee3\u7801\uff1a site:yourdomain.com/page-to-check/ \u540c\u65f6\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7Site+\u4f60\u7684\u4e3b\u57df\u540d\u53bb\u67e5\u770b\u6574\u4f53\u7684\u7d22\u5f15\u60c5\u51b5\u3002 \u5c0f\u63d0\u793a \u8fd9\u79cd\u65b9\u5f0f\u5728\u8c37\u6b4c\u548c\u5fc5\u5e94\u641c\u7d22\u5f15\u64ce\u91cc\u90fd\u6709\u6548\u3002 \u6ca1\u6709\u7ed3\u679c\uff1f\u90a3\u4e48\u4f60\u7684\u7f51\u7ad9\u6216\u7f51\u9875\u53ef\u80fd\u5c1a\u672a\u7f16\u5165\u7d22\u5f15\u3002 \u5982\u679c\uff0c\u5728\u4f60\u516c\u5f00\u7f51\u7ad9\u540e\u7684\u51e0\u5929\u6ca1\u6709\u6570\u636e\uff0c\u8bf7\u4e0d\u8981\u62c5\u5fc3\u3002 \u4f46\u662f\uff0c\u5982\u679c\u5728\u4e00\u5468\u6216\u4e24\u5468\u4e4b\u540e\u4ecd\u672a\u7f16\u5165\u7d22\u5f15\uff0c\u90a3\u4e48\u4f60\u7684\u7f51\u7ad9\u53ef\u80fd\u5b58\u5728\u95ee\u9898\u3002 \u540c\u65f6\uff0c\u4f60\u8fd8\u53ef\u4ee5\u5728Google Search Console\uff08\u8c37\u6b4c\u7ad9\u957f\u5de5\u5177\uff09\u4e2d\u67e5\u770b\u7f51\u7ad9\u7684\u7d22\u5f15\u72b6\u6001\u3002 \u4f46\u662f\uff0c\u53ea\u6709\u65b0\u7684Google Search Console\u624d\u4f1a\u663e\u793a\u7d22\u5f15\u9875\u9762\u5217\u8868\u3002 Search Console > Status > Index Coverage \u641c\u7d22\u63a7\u5236\u53f0>\u72b6\u6001>\u7d22\u5f15\u8986\u76d6\u7387 \u8f6c\u5230 Valid\uff08\u6709\u6548\uff09\u6807\u7b7e\uff0c\u7136\u540e\u9009\u62e9 Indexed, not submitted in sitemap\uff08\u5df2\u5efa\u7acb\u7d22\u5f15\uff0c\u672a\u5728\u7ad9\u70b9\u5730\u56fe\u4e2d\u63d0\u4ea4\uff09\u6216 Submitted and indexed\uff08\u5df2\u63d0\u4ea4\u5e76\u5df2\u7f16\u5165\u7d22\u5f15\uff09\uff0c\u4ee5\u67e5\u770bGoogle\u7d22\u5f15\u4e2d\u7684\u9875\u9762URL\u5217\u8868\u3002 \u5c0f\u63d0\u793a \u4f60\u4e5f\u53ef\u4ee5\u5728Bing\u7ad9\u957f\u5de5\u5177\u4e2d\u8fdb\u884c\u76f8\u540c\u7684\u64cd\u4f5c\u3002","title":"\u5982\u4f55\u68c0\u67e5\u7f51\u7ad9\u662f\u5426\u88ab\u7d22\u5f15"},{"location":"pages/affiliate/submit-website-to-search-engines/#\u5982\u679c\u7f51\u7ad9\u7f51\u9875\u4e0d\u7d22\u5f15\u7684\u8bdd\u600e\u4e48\u529e","text":"\u5982\u679c\u4f60\u901a\u8fc7\u6570\u636e\u5f97\u51fa\u7ed3\u8bba\u662f\uff0c\u7f51\u7ad9\u6216\u7f51\u9875\u6ca1\u6709\u7f16\u5165\u7d22\u5f15\u3002\u90a3\u4e48\uff0c\u4f60\u9700\u8981\u5f04\u6e05\u695a\u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837\u3002 \u4ee5\u4e0b\u662f\u53ef\u80fd\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\u7684\u4e00\u4e9b\u5e38\u89c1\u539f\u56e0\uff0c\u4ee5\u53ca\u4e00\u4e9b\u89e3\u51b3\u65b9\u6848\uff1a \u8be5\u7f51\u9875\u6709\u4e00\u4e2anoindex\u6807\u7b7e \u8fd9\u544a\u8bc9\u8c37\u6b4c\u548c\u5176\u4ed6\u641c\u7d22\u5f15\u64ce\u4e0d\u8981\u7d22\u5f15\u5f53\u524d\u9875\u9762\u3002\u4f60\u53ef\u4ee5\u68c0\u67e5\u7f51\u9875\u4e0a\u662f\u5426\u5b58\u5728noindex\u6807\u8bb0\uff0c\u7136\u540e\u53ef\u4ee5\u901a\u8fc7\u5728\u9875\u9762\u7684HTML\u4e2d\u641c\u7d22noindex\u6807\u8bb0\uff0c\u6765\u627e\u5230\u9700\u8981\u5220\u9664\u7684\u6807\u8bb0\u4f4d\u7f6e\uff08\u5982\u679c\u9700\u8981\uff09\u3002\u8fd9\u91cc\u6709\u5173\u4e8e noindex\u6807\u7b7e\u7684\u66f4\u591a\u4fe1\u606f ; robots.txt\u6587\u4ef6\u5728\u963b\u6b62\u7d22\u5f15 \u6bcf\u4e2a\u7f51\u7ad9\u90fd\u6709\u5176\u4e2d\u4e00\u4e2aRobot.txt\u3002\u5b83\u4e3a\u8718\u86db\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u8981\u9075\u5faa\u7684\u89c4\u5219\uff0c\u4f8b\u5982\u5176\u4e2d\u89c4\u5b9a\u4e86\u8718\u86db\u5141\u8bb8/\u4e0d\u5141\u8bb8\u6293\u53d6\u7684\u9875\u9762\u4ee5\u53ca\u53ef\u4ee5\u7d22\u5f15/\u4e0d\u80fd\u7d22\u5f15\u7684\u9875\u9762\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528Google\u7684 Robots Testing Tool \uff08\u8718\u86db\u6d4b\u8bd5\u5de5\u5177\uff09\u68c0\u67e5robots.txt\u4e2d\u662f\u5426\u963b\u6b62\u4e86\u76ee\u6807\u7f51\u5740\u3002\u53ea\u9700\u8f93\u5165\u4e00\u4e2aURL\uff0c\u5b83\u5c31\u4f1a\u663e\u793a\u5f53\u524d\u94fe\u63a5\u662f\u5426\u88ab\u5141\u8bb8\u6216\u963b\u6b62\u3002 .htaccess\u6587\u4ef6\u963b\u6b62\u7d22\u5f15 \u8fd9\u662f\u5728\u57fa\u4e8eApache\u7684Web\u670d\u52a1\u5668\u4e0a\u8fd0\u884c\u7684\u7f51\u7ad9\u7684\u914d\u7f6e\u6587\u4ef6\uff08 \u5927\u7ea6\u5360\u6240\u6709\u7ad9\u70b9\u768446\uff05 \uff09\u3002\u5982\u679c\u4f60\u7684.htaccess\u6587\u4ef6\u5305\u542b\u5934\u90e8\u4fe1\u606f\uff1aX\u2011Robots-Tag \u201cnoindex\uff0cnofollow\u201d\uff0c\u5219\u5e94\u5c06\u5176\u5220\u9664\uff0c\u5141\u8bb8\u8c37\u6b4c\u8718\u86db\u6293\u53d6\u4f60\u7684\u7f51\u5740\u5e76\u7d22\u5f15\u3002 \u5c0f\u63d0\u793a \u5982\u679c\u4e0a\u65b9\u68c0\u6d4b\u6ca1\u6709\u4efb\u4f55\u95ee\u9898\u7684\u8bdd\u3002\u90a3\u4e48\u5f88\u53ef\u80fd\u662f\u56e0\u4e3a\u5f53\u524d\u9875\u9762\u63d0\u4f9b\u7684\u5185\u5bb9\u8d28\u91cf\u8fc7\u4f4e\u3002\u540c\u65f6\uff0c\u4e5f\u610f\u5473\u7740\u4f60\u7684\u7f51\u7ad9\u6709\u4e00\u4e9b\u6280\u672f\u95ee\u9898\uff0c\u53ef\u80fd\u4f60\u9700\u8981\u62db\u8058\u4e00\u4e2a SEO\u6280\u672f \u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 \u540c\u65f6\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 URL inspection tool \uff08URL\u68c0\u67e5\u5de5\u5177\uff09\u3002 Search Console > URL inspection > enter page URL > hit enter \u641c\u7d22\u63a7\u5236\u53f0 > URL\u68c0\u67e5 > \u8f93\u5165\u9875\u9762UR L> \u6309\u56de\u8f66\u952e \u4f60\u53ef\u4ee5\u770b\u5230\u8fd9\u4e2a\u9875\u9762\u5e76\u6ca1\u6709\u88ab\u7d22\u5f15\uff0c\u4e3a\u4ec0\u4e48\u5462\uff1f \u5411\u4e0b\u6eda\u52a8\uff0c\u8c37\u6b4c\u4f1a\u63d0\u4f9b\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u3002 \u8fd9\u4e2a\u9875\u9762\u4e0d\u7d22\u5f15\u662f\u56e0\u4e3a\u6709\u4e00\u4e2a301\u91cd\u5b9a\u5411\u548c canonical tag\uff08\u89c4\u8303\u6807\u7b7e\uff09\u5b58\u5728\u3002 \u9762\u5bf9Canonical\u8fd9\u6837\u95ee\u9898\u4f60\u4e0d\u9700\u8981\u62c5\u5fc3\u3002\u4f46\u662f\u5982\u679c\u8c37\u6b4c\u8fd4\u56de\u4e00\u4e9b\u771f\u6b63\u7684\u7d22\u5f15\u95ee\u9898\uff0c\u4f60\u53ef\u80fd\u5c31\u9700\u8981\u9488\u5bf9\u95ee\u9898\u8fdb\u884c\u4fee\u6539\uff0c\u5e76\u8ba9\u81ea\u5df1\u7684\u9875\u9762\u7d22\u5f15\u3002 \u5c0f\u63d0\u793a \u4f60\u53ef\u4ee5\u5728 \u8fd9\u91cc \u627e\u5230\u4e00\u4e9b\u4e0d\u88ab\u7d22\u5f15\u7684\u539f\u56e0\u5217\u8868\u3002","title":"\u5982\u679c\u7f51\u7ad9\u3001\u7f51\u9875\u4e0d\u7d22\u5f15\u7684\u8bdd\u600e\u4e48\u529e"},{"location":"pages/affiliate/submit-website-to-search-engines/#\u4e3a\u4ec0\u4e48\u63d0\u4ea4\u7f51\u7ad9\u4e0d\u7b49\u4e8e\u7f51\u7ad9\u53c2\u4e0e\u6392\u540d\u4ee5\u53ca\u5982\u4f55\u4fee\u590d","text":"\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u8c37\u6b4c\u641c\u7d22\u4f1a\u8fd4\u56de\u6210\u5343\u4e0a\u4e07\u7684\u641c\u7d22\u7ed3\u679c\u3002 \u4f46\u662f\u5927\u591a\u6570\u4eba\u57fa\u672c\u4e0a\u90fd\u505c\u7559\u5728\u641c\u7d22\u7684\u7b2c\u4e00\u9875\u3002\u8fd9\u610f\u5473\u7740\u6392\u540d\u8d85\u8fc7\u4f4d\u7f6e\uff0310\u7684\u9875\u9762\uff0c\u51e0\u4e4e\u662f\u6ca1\u6709\u6d41\u91cf\u7684\u3002 \u51fa\u4e8e\u8fd9\u4e2a\u539f\u56e0\uff0c\u88ab\u7d22\u5f15\u5e76\u4e0d\u4e00\u5b9a\u610f\u5473\u7740\u7528\u6237\u5c06\u80fd\u591f\u627e\u5230\u4f60\u7684\u7f51\u7ad9\u3002 \u5982\u679c\u60a8\u60f3\u8981\u81ea\u7136\u6d41\u91cf\uff0c\u5c31\u9700\u8981\u6392\u5728\u7b2c\u4e00\u9875\uff08\u7406\u60f3\u60c5\u51b5\u4e0b\u662f\u5728\u524d3\u4e2a\u7ed3\u679c\u4e2d\uff09\u3002 \u4f60\u600e\u4e48\u505a\u5230\u8fd9\u4e00\u70b9\uff1f \u8fd9\u5f88\u590d\u6742\uff0c\u4f46\u4f60\u80af\u5b9a\u9700\u8981\u7684\u4e00\u4ef6\u4e8b\u662f \u53cd\u5411\u94fe\u63a5 \u3002 Google\u4f1a\u7edf\u8ba1\u53cd\u5411\u94fe\u63a5\u7684\u6570\u91cf\u3002 \u56e0\u6b64\uff0c\u5f53\u4ed6\u4eec\u5728\u540c\u4e00\u4e3b\u9898\u4e0a\u5448\u73b0\u4e24\u4e2a\u6216\u66f4\u591a\u9875\u9762\u53c2\u4e0e\u6392\u540d\u65f6\uff0c\u53cd\u5411\u94fe\u63a5\u8d8a\u591a\u7684\u9875\u9762\u66f4\u5bb9\u6613\u53c2\u4e0e\u4f18\u8d28\u7684\u6392\u540d\u3002 \u8bd1\u8005\u6ce8 \u5176\u5b9e\u8fd9\u79cd\u8bf4\u6cd5\u5e76\u4e0d\u79d1\u5b66\u3002 \u6211\u4eec\u7edd\u5bf9\u4e0d\u4f1a\u8bf4\u5177\u6709\u66f4\u591a\u53cd\u5411\u94fe\u63a5\u7684\u9875\u9762\u80af\u5b9a\u53ef\u4ee5\u53c2\u4e0e\u4f18\u8d28\u6392\u540d\u3002 \u4f46\u662f\u8bdd\u867d\u5982\u6b64\uff0c\u5f53\u6211\u4eec\u7814\u7a76\u4e86\u8fd110\u4ebf\u4e2a\u7f51\u9875\u65f6\uff0c\u6211\u4eec\u53d1\u73b0\u7f51\u9875\u7684 Referring Domains\uff08\u5f15\u7528\u57df\u6570\u91cf\uff09\u4e0e\u5176\u6574\u4f53\u6536\u5230\u7684Google\u641c\u7d22\u6d41\u91cf\u6570\u91cf\u662f\u6709\u4e00\u5b9a\u76f8\u5173\u6027\u7684\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528Ahefs\u4e2d Keywords Explorer \u62a5\u544a\u7684 SERP overview \uff08SERO\u603b\u89c8\u62a5\u544a\uff09\u90e8\u5206\u770b\u5230\u6392\u540d\u524d\u534110\u7684\u9875\u9762\u5206\u522b\u83b7\u5f97\u4e86\u591a\u5c11\u94fe\u63a5\u3002 Keywords Explorer > enter the keyword you want to rank for > SERP overview \u5173\u952e\u5b57\u8d44\u6e90\u7ba1\u7406\u5668>\u8f93\u5165\u60a8\u8981\u4e3a\u5176\u6392\u540d\u7684\u5173\u952e\u5b57> SERP\u6982\u8ff0 \u8fd9\u53ef\u4ee5\u8ba9\u4f60\u5927\u81f4\u4e86\u89e3\u9996\u9875\u6392\u540d\u53ef\u80fd\u9700\u8981\u591a\u5c11\u53cd\u5411\u94fe\u63a5\u3002 \uff08\u540c\u65f6\u4f60\u8fd8\u53ef\u4ee5\u67e5\u770b\u6211\u4eec\u7684\u5173\u952e\u5b57\u96be\u5ea6\u5206\u6570\uff0c\u4ee5\u83b7\u5f97\u76f8\u5173\u4fe1\u606f\u3002\uff09 \u4f46\u5e76\u975e\u5168\u4f9d\u9760\u94fe\u63a5\u3002\u4f60\u8fd8\u9700\u8981\u786e\u4fdd\u4f60\u7684\u9875\u9762\u4f18\u5316\u5230\u4f4d\uff0c\u5e76\u786e\u4fdd\u5173\u952e\u5b57\u5b9a\u4f4d\u51c6\u786e\u3002 \u4ee5\u4e0b\u662f\u4e00\u4e9b\u53ef\u4ee5\u5e2e\u52a9\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u7684\u6587\u7ae0\u3002 \u66f4\u591a\u9605\u8bfb\uff1a \u65b0\u624b\u53cb\u597d\u7684\u94fe\u63a5\u5efa\u8bbe\u6307\u5357 \u4e22\u5931\u94fe\u63a5\u5efa\u8bbe\u7684\u7b80\u5355\uff08\u5b8c\u6574\uff09\u6307\u5357 \u5982\u4f55\u4f7f\u7528TRUST\u516c\u5f0f\u83b7\u5f97\u9ad8\u8d28\u91cf\u7684\u53cd\u5411\u94fe\u63a5[\u6848\u4f8b\u7814\u7a76] \u89e3\u6790Linkbait\uff1a\u5982\u4f55\u521b\u5efa\u5438\u5f15\u53cd\u5411\u94fe\u63a5\u7684\u5185\u5bb9 7\u79cd\u53ef\u884c\u7684\u65b9\u6cd5\u6765\u641c\u522e\u7ade\u4e89\u5bf9\u624b\u7684\u53cd\u5411\u94fe\u63a5 \u9875\u9762SEO\uff1a\u4e00\u4e2a\uff082\u767e\u4e07\u5173\u952e\u5b57\uff09\u6570\u636e\u5206\u6790 \u5982\u4f55\u505aSEO\u7684\u5173\u952e\u8bcd\u7814\u7a76 \u5982\u4f55\u8861\u91cf\u5173\u952e\u5b57\u96be\u5ea6\uff0c\u627e\u5230\u6700\u5bb9\u6613\u6392\u540d\u7684\u5173\u952e\u8bcd \u5bfb\u627e\u5177\u6709\u5e9e\u5927\u6d41\u91cf\u6f5c\u529b\u7684\u672a\u5f00\u53d1\u5173\u952e\u5b57\u76844\u79cd\u65b9\u6cd5 \u957f\u5c3e\u5173\u952e\u8bcd\uff1a\u5982\u4f55\u4ece\u201c\u4e0d\u53d7\u6b22\u8fce\u7684\u201d\u641c\u7d22\u4e2d\u83b7\u5f97\u5927\u6d41\u91cf \u4e3a\u4ec0\u4e48\u4e0d\u80fd\u76f2\u76ee\u4fe1\u4efb\u5173\u952e\u5b57\u641c\u7d22\u91cf\u8fdb\u884c\u6d41\u91cf\u4f30\u7b97","title":"\u4e3a\u4ec0\u4e48\u63d0\u4ea4\u7f51\u7ad9\u4e0d\u7b49\u4e8e\u7f51\u7ad9\u53c2\u4e0e\u6392\u540d\uff08\u4ee5\u53ca\u5982\u4f55\u4fee\u590d\uff09"},{"location":"pages/affiliate/submit-website-to-search-engines/#\u6700\u540e\u603b\u7ed3","text":"\u5373\u4f7f\u4f60\u6ca1\u6709\u63d0\u4ea4\u4f60\u7684\u7f51\u7ad9\uff0cGoogle\u4e5f\u53ef\u80fd\u4f1a\u627e\u5230\u4f60\u7684\u7f51\u5740\u3002 Bing\u548c\u5176\u4ed6\u641c\u7d22\u5f15\u64ce\u4e5f\u662f\u5982\u6b64\u3002 \u8bdd\u867d\u5982\u6b64\uff0c\u6211\u4eec\u4ecd\u5efa\u8bae\u60a8\u4f7f\u7528\u4e0a\u8ff0\u7f51\u7ad9\u5730\u56fe\u65b9\u6cd5\uff0c\u624b\u52a8\u63d0\u4ea4\u4f60\u7684\u7f51\u7ad9\u3002 \u4e3a\u4ec0\u4e48\uff1f \u56e0\u4e3a\u5219\u53ef\u4ee5\u4e3aGoogle\u548cBing\u63d0\u4f9b\u4e86\u6709\u5173\u7f51\u7ad9\u7684\u989d\u5916\u4fe1\u606f\uff0c\u5e76\u4e14\u4f5c\u4e3a\u56de\u62a5\uff0c\u4ed6\u4eec\u4f1a\u4e3a\u4f60\u63d0\u4f9b\u66f4\u591a\u7684\u6570\u636e\u3002 \u5bf9\u4e8e\u505a\u8fc7\u9875\u9762\u66f4\u65b0\u7684\uff0c\u540c\u6837\u503c\u5f97\u91cd\u65b0\u63d0\u4ea4\u3002 \u4f46\u8bf7\u8bb0\u4f4f\uff0c\u83b7\u53d6\u7d22\u5f15\u53ea\u662f\u4f18\u5316\u7684\u4e00\u90e8\u5206\u3002 \u4e0d\u5728SEO\u5de5\u4f5c\u4e2d \u6295\u5165 \uff0c\u662f\u4e0d\u4f1a\u6709\u56de\u62a5\u7684\u3002 \u51e1\u672c\u7f51\u6ce8\u660e\"\u6765\u6e90\uff1aXXX \"\u7684\u6587/\u56fe/\u89c6\u9891\u7b49\u7a3f\u4ef6\uff0c\u672c\u7f51\u8f6c\u8f7d\u51fa\u4e8e\u4f20\u9012\u66f4\u591a\u4fe1\u606f\u4e4b\u76ee\u7684\uff0c\u5e76\u4e0d\u610f\u5473\u7740\u8d5e\u540c\u5176\u89c2\u70b9\u6216\u8bc1\u5b9e\u5176\u5185\u5bb9\u7684\u771f\u5b9e\u6027\u3002\u5982\u6d89\u53ca\u4f5c\u54c1\u5185\u5bb9\u3001\u7248\u6743\u548c\u5176\u5b83\u95ee\u9898\uff0c\u8bf7\u4e0e\u672c\u7f51\u8054\u7cfb\uff0c\u6211\u4eec\u5c06\u5728\u7b2c\u4e00\u65f6\u95f4\u5220\u9664\u5185\u5bb9\uff01 \u4f5c\u8005: Joshua Hardwick \u6765\u6e90\uff1a https://ahrefs.com/blog/zh/submit-website-to-search-engines/","title":"\u6700\u540e\u603b\u7ed3"},{"location":"pages/html5/","text":"HTML 5 \u6559\u7a0b \u00b6 \u672c\u6559\u7a0b\u5411\u60a8\u8bb2\u89e3 HTML5 \u4e2d\u7684\u65b0\u7279\u6027\u3002 HTML5 \u662f\u4e0b\u4e00\u4ee3\u7684 HTML\u3002 \u6bcf\u4e00\u7ae0\u4e2d\u7684\u5b9e\u4f8b \u00b6 \u901a\u8fc7\u6211\u4eec\u7684 HTML \u7f16\u8f91\u5668\uff0c\u60a8\u80fd\u591f\u7f16\u8f91 HTML\uff0c\u7136\u540e\u70b9\u51fb\u6309\u94ae\u6765\u67e5\u770b\u7ed3\u679c\u3002 \u5b9e\u4f8b \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 <!DOCTYPE HTML> <html> <body> <video width=\"320\" height=\"240\" controls=\"controls\"> <source src=\"movie.ogg\" type=\"video/ogg\"> <source src=\"movie.mp4\" type=\"video/mp4\"> Your browser does not support the video tag. </video> </body> </html>","title":"HTML5 \u6559\u7a0b"},{"location":"pages/html5/#HTML-5-\u6559\u7a0b","text":"\u672c\u6559\u7a0b\u5411\u60a8\u8bb2\u89e3 HTML5 \u4e2d\u7684\u65b0\u7279\u6027\u3002 HTML5 \u662f\u4e0b\u4e00\u4ee3\u7684 HTML\u3002","title":"HTML 5 \u6559\u7a0b"},{"location":"pages/html5/#\u6bcf\u4e00\u7ae0\u4e2d\u7684\u5b9e\u4f8b","text":"\u901a\u8fc7\u6211\u4eec\u7684 HTML \u7f16\u8f91\u5668\uff0c\u60a8\u80fd\u591f\u7f16\u8f91 HTML\uff0c\u7136\u540e\u70b9\u51fb\u6309\u94ae\u6765\u67e5\u770b\u7ed3\u679c\u3002","title":"\u6bcf\u4e00\u7ae0\u4e2d\u7684\u5b9e\u4f8b"},{"location":"pages/html5/#\u5b9e\u4f8b","text":"1 2 3 4 5 6 7 8 9 10 11 12 <!DOCTYPE HTML> <html> <body> <video width=\"320\" height=\"240\" controls=\"controls\"> <source src=\"movie.ogg\" type=\"video/ogg\"> <source src=\"movie.mp4\" type=\"video/mp4\"> Your browser does not support the video tag. </video> </body> </html>","title":"\u5b9e\u4f8b"},{"location":"pages/html5/html-head/","text":"HTML\u5934\u90e8 \u00b6 HTML\u5934\u90e8\uff0c< head > \u5143\u7d20\u5305\u542b\u4e86\u6240\u6709\u7684\u5934\u90e8\u6807\u7b7e\u5143\u7d20\u3002\u5728< head >\u5143\u7d20\u4e2d\u4f60\u53ef\u4ee5\u63d2\u5165\u811a\u672c\uff08scripts\uff09, \u6837\u5f0f\u6587\u4ef6\uff08CSS\uff09\uff0c\u53ca\u5404\u79cdmeta\u4fe1\u606f\u3002\u53ef\u4ee5\u6dfb\u52a0\u5728\u5934\u90e8\u533a\u57df\u7684\u5143\u7d20\u6807\u7b7e\u4e3a: < title >, < style >, < meta >, < link >, < script >, < noscript >, and < base >. HTML\u5934\u90e8 \u2013 HTML< head > \u5143\u7d20 \u00b6 < head > \u5143\u7d20\u5305\u542b\u4e86\u6240\u6709\u7684\u5934\u90e8\u6807\u7b7e\u5143\u7d20\u3002\u5728 < head >\u5143\u7d20\u4e2d\u4f60\u53ef\u4ee5\u63d2\u5165\u811a\u672c\uff08scripts\uff09, \u6837\u5f0f\u6587\u4ef6\uff08CSS\uff09\uff0c\u53ca\u5404\u79cdmeta\u4fe1\u606f\u3002 \u53ef\u4ee5\u6dfb\u52a0\u5728\u5934\u90e8\u533a\u57df\u7684\u5143\u7d20\u6807\u7b7e\u4e3a: < title >, < style >, < meta >, < link >, < script >, < noscript >, and < base >\u3002 \u4f7f\u7528 < title > \u6807\u7b7e\u5b9a\u4e49HTML\u6587\u6863\u7684\u6807\u9898 \u4f7f\u7528 < base > \u5b9a\u4e49\u9875\u9762\u4e2d\u6240\u6709\u94fe\u63a5\u9ed8\u8ba4\u7684\u94fe\u63a5\u76ee\u6807\u5730\u5740\u3002 \u4f7f\u7528 < meta > \u5143\u7d20\u6765\u63cf\u8ff0HTML\u6587\u6863\u7684\u63cf\u8ff0\uff0c\u5173\u952e\u8bcd\uff0c\u4f5c\u8005\uff0c\u5b57\u7b26\u96c6\u7b49\u3002 HTML\u5934\u90e8 \u2013 HTML< title > \u5143\u7d20 \u00b6 < title > \u6807\u7b7e\u5b9a\u4e49\u4e86\u4e0d\u540c\u6587\u6863\u7684\u6807\u9898\u3002 < title > \u5728 HTML/XHTML \u6587\u6863\u4e2d\u662f\u5fc5\u987b\u7684\u3002 < title >\u5143\u7d20\uff1a \u5b9a\u4e49\u4e86\u6d4f\u89c8\u5668\u5de5\u5177\u680f\u7684\u6807\u9898 \u5f53\u7f51\u9875\u6dfb\u52a0\u5230\u6536\u85cf\u5939\u65f6\uff0c\u663e\u793a\u5728\u6536\u85cf\u5939\u4e2d\u7684\u6807\u9898 \u663e\u793a\u5728\u641c\u7d22\u5f15\u64ce\u7ed3\u679c\u9875\u9762\u7684\u6807\u9898 \u4e00\u4e2a\u7b80\u5355\u7684 HTML \u6587\u6863: 1 2 3 4 5 6 7 8 9 10 11 12 <!DOCTYPE html> <html> <head> <meta charset=\"utf-8\"> <title>\u6587\u6863\u6807\u9898</title> </head> <body> \u6587\u6863\u5185\u5bb9...... </body> </html> HTML\u5934\u90e8 \u2013 HTML< base > \u5143\u7d20 \u00b6 < base > \u6807\u7b7e\u63cf\u8ff0\u4e86\u57fa\u672c\u7684\u94fe\u63a5\u5730\u5740/\u94fe\u63a5\u76ee\u6807\uff0c\u8be5\u6807\u7b7e\u4f5c\u4e3aHTML\u6587\u6863\u4e2d\u6240\u6709\u7684\u94fe\u63a5\u6807\u7b7e\u7684\u9ed8\u8ba4\u94fe\u63a5: HTML\u5934\u90e8 \u2013 HTML< link > \u5143\u7d20 \u00b6 < link > \u6807\u7b7e\u5b9a\u4e49\u4e86\u6587\u6863\u4e0e\u5916\u90e8\u8d44\u6e90\u4e4b\u95f4\u7684\u5173\u7cfb\u3002 < link > \u6807\u7b7e\u901a\u5e38\u7528\u4e8e\u94fe\u63a5\u5230\u6837\u5f0f\u8868: 1 2 3 <head> <link rel=\"stylesheet\" type=\"text/css\" href=\"mystyle.css\"> </head> HTML\u5934\u90e8 \u2013 HTML< style > \u5143\u7d20 \u00b6 < style > \u6807\u7b7e\u5b9a\u4e49\u4e86HTML\u6587\u6863\u7684\u6837\u5f0f\u6587\u4ef6\u5f15\u7528\u5730\u5740. \u5728< style > \u5143\u7d20\u4e2d\u4f60\u4e5f\u53ef\u4ee5\u76f4\u63a5\u6dfb\u52a0\u6837\u5f0f\u6765\u6e32\u67d3 HTML \u6587\u6863\uff1a 1 2 3 4 5 6 <head> <style type=\"text/css\"> body {background-color:yellow} p {color:blue} </style> </head> \u00b6 meta\u6807\u7b7e\u63cf\u8ff0\u4e86\u4e00\u4e9b\u57fa\u672c\u7684\u5143\u6570\u636e\u3002 < meta > \u6807\u7b7e\u63d0\u4f9b\u4e86\u5143\u6570\u636e.\u5143\u6570\u636e\u4e5f\u4e0d\u663e\u793a\u5728\u9875\u9762\u4e0a\uff0c\u4f46\u4f1a\u88ab\u6d4f\u89c8\u5668\u89e3\u6790\u3002 META \u5143\u7d20\u901a\u5e38\u7528\u4e8e\u6307\u5b9a\u7f51\u9875\u7684\u63cf\u8ff0\uff0c\u5173\u952e\u8bcd\uff0c\u6587\u4ef6\u7684\u6700\u540e\u4fee\u6539\u65f6\u95f4\uff0c\u4f5c\u8005\uff0c\u548c\u5176\u4ed6\u5143\u6570\u636e\u3002 \u5143\u6570\u636e\u53ef\u4ee5\u4f7f\u7528\u4e8e\u6d4f\u89c8\u5668\uff08\u5982\u4f55\u663e\u793a\u5185\u5bb9\u6216\u91cd\u65b0\u52a0\u8f7d\u9875\u9762\uff09\uff0c\u641c\u7d22\u5f15\u64ce\uff08\u5173\u952e\u8bcd\uff09\uff0c\u6216\u5176\u4ed6Web\u670d\u52a1\u3002 < meta > \u4e00\u822c\u653e\u7f6e\u4e8e < head > \u533a\u57df \u4e3a\u641c\u7d22\u5f15\u64ce\u5b9a\u4e49\u5173\u952e\u8bcd: 1 <meta name=\"keywords\" content=\"HTML, CSS, XML, XHTML, JavaScript\"> \u4e3a\u7f51\u9875\u5b9a\u4e49\u63cf\u8ff0\u5185\u5bb9: 1 <meta name=\"description\" content=\"\u514d\u8d39 Web & \u7f16\u7a0b \u6559\u7a0b\"> \u5b9a\u4e49\u7f51\u9875\u4f5c\u8005: 1 <meta name=\"author\" content=\"Runoob\"> \u6bcf30\u79d2\u949f\u5237\u65b0\u5f53\u524d\u9875\u9762: 1 <meta http-equiv=\"refresh\" content=\"30\"> HTML\u5934\u90e8 \u2013 HTML< script > \u5143\u7d20 \u00b6 < script >\u6807\u7b7e\u7528\u4e8e\u52a0\u8f7d\u811a\u672c\u6587\u4ef6\uff0c\u5982\uff1a JavaScript\u3002 < script > \u5143\u7d20\u5728\u4ee5\u540e\u7684\u7ae0\u8282\u4e2d\u4f1a\u8be6\u7ec6\u63cf\u8ff0\u3002 HTML\u5934\u90e8 \u2013 head\u5143\u7d20 \u00b6 \u6807\u7b7e \u63cf\u8ff0 < `head`> \u5b9a\u4e49\u4e86\u6587\u6863\u7684\u4fe1\u606f < `title`> \u5b9a\u4e49\u4e86\u6587\u6863\u7684\u6807\u9898 < `base`> \u5b9a\u4e49\u4e86\u9875\u9762\u94fe\u63a5\u6807\u7b7e\u7684\u9ed8\u8ba4\u94fe\u63a5\u5730\u5740 < `link`> \u5b9a\u4e49\u4e86\u4e00\u4e2a\u6587\u6863\u548c\u5916\u90e8\u8d44\u6e90\u4e4b\u95f4\u7684\u5173\u7cfb < `meta`> \u5b9a\u4e49\u4e86HTML\u6587\u6863\u4e2d\u7684\u5143\u6570\u636e < `script`> \u5b9a\u4e49\u4e86\u5ba2\u6237\u7aef\u7684\u811a\u672c\u6587\u4ef6 < `style`> \u5b9a\u4e49\u4e86HTML\u6587\u6863\u7684\u6837\u5f0f\u6587\u4ef6","title":"HTML5 \u5934\u90e8"},{"location":"pages/html5/html-head/#HTML\u5934\u90e8","text":"HTML\u5934\u90e8\uff0c< head > \u5143\u7d20\u5305\u542b\u4e86\u6240\u6709\u7684\u5934\u90e8\u6807\u7b7e\u5143\u7d20\u3002\u5728< head >\u5143\u7d20\u4e2d\u4f60\u53ef\u4ee5\u63d2\u5165\u811a\u672c\uff08scripts\uff09, \u6837\u5f0f\u6587\u4ef6\uff08CSS\uff09\uff0c\u53ca\u5404\u79cdmeta\u4fe1\u606f\u3002\u53ef\u4ee5\u6dfb\u52a0\u5728\u5934\u90e8\u533a\u57df\u7684\u5143\u7d20\u6807\u7b7e\u4e3a: < title >, < style >, < meta >, < link >, < script >, < noscript >, and < base >.","title":"HTML\u5934\u90e8"},{"location":"pages/html5/html-head/#HTML\u5934\u90e8--HTML-\u5143\u7d20","text":"< head > \u5143\u7d20\u5305\u542b\u4e86\u6240\u6709\u7684\u5934\u90e8\u6807\u7b7e\u5143\u7d20\u3002\u5728 < head >\u5143\u7d20\u4e2d\u4f60\u53ef\u4ee5\u63d2\u5165\u811a\u672c\uff08scripts\uff09, \u6837\u5f0f\u6587\u4ef6\uff08CSS\uff09\uff0c\u53ca\u5404\u79cdmeta\u4fe1\u606f\u3002 \u53ef\u4ee5\u6dfb\u52a0\u5728\u5934\u90e8\u533a\u57df\u7684\u5143\u7d20\u6807\u7b7e\u4e3a: < title >, < style >, < meta >, < link >, < script >, < noscript >, and < base >\u3002 \u4f7f\u7528 < title > \u6807\u7b7e\u5b9a\u4e49HTML\u6587\u6863\u7684\u6807\u9898 \u4f7f\u7528 < base > \u5b9a\u4e49\u9875\u9762\u4e2d\u6240\u6709\u94fe\u63a5\u9ed8\u8ba4\u7684\u94fe\u63a5\u76ee\u6807\u5730\u5740\u3002 \u4f7f\u7528 < meta > \u5143\u7d20\u6765\u63cf\u8ff0HTML\u6587\u6863\u7684\u63cf\u8ff0\uff0c\u5173\u952e\u8bcd\uff0c\u4f5c\u8005\uff0c\u5b57\u7b26\u96c6\u7b49\u3002","title":"HTML\u5934\u90e8 \u2013 HTML&lt; head &gt; \u5143\u7d20"},{"location":"pages/html5/html-head/#HTML\u5934\u90e8--HTML-\u5143\u7d20_1","text":"< title > \u6807\u7b7e\u5b9a\u4e49\u4e86\u4e0d\u540c\u6587\u6863\u7684\u6807\u9898\u3002 < title > \u5728 HTML/XHTML \u6587\u6863\u4e2d\u662f\u5fc5\u987b\u7684\u3002 < title >\u5143\u7d20\uff1a \u5b9a\u4e49\u4e86\u6d4f\u89c8\u5668\u5de5\u5177\u680f\u7684\u6807\u9898 \u5f53\u7f51\u9875\u6dfb\u52a0\u5230\u6536\u85cf\u5939\u65f6\uff0c\u663e\u793a\u5728\u6536\u85cf\u5939\u4e2d\u7684\u6807\u9898 \u663e\u793a\u5728\u641c\u7d22\u5f15\u64ce\u7ed3\u679c\u9875\u9762\u7684\u6807\u9898 \u4e00\u4e2a\u7b80\u5355\u7684 HTML \u6587\u6863: 1 2 3 4 5 6 7 8 9 10 11 12 <!DOCTYPE html> <html> <head> <meta charset=\"utf-8\"> <title>\u6587\u6863\u6807\u9898</title> </head> <body> \u6587\u6863\u5185\u5bb9...... </body> </html>","title":"HTML\u5934\u90e8 \u2013 HTML&lt; title &gt; \u5143\u7d20"},{"location":"pages/html5/html-head/#HTML\u5934\u90e8--HTML-\u5143\u7d20_2","text":"< base > \u6807\u7b7e\u63cf\u8ff0\u4e86\u57fa\u672c\u7684\u94fe\u63a5\u5730\u5740/\u94fe\u63a5\u76ee\u6807\uff0c\u8be5\u6807\u7b7e\u4f5c\u4e3aHTML\u6587\u6863\u4e2d\u6240\u6709\u7684\u94fe\u63a5\u6807\u7b7e\u7684\u9ed8\u8ba4\u94fe\u63a5:","title":"HTML\u5934\u90e8 \u2013 HTML&lt; base &gt; \u5143\u7d20"},{"location":"pages/html5/html-head/#HTML\u5934\u90e8--HTML-\u5143\u7d20_3","text":"< link > \u6807\u7b7e\u5b9a\u4e49\u4e86\u6587\u6863\u4e0e\u5916\u90e8\u8d44\u6e90\u4e4b\u95f4\u7684\u5173\u7cfb\u3002 < link > \u6807\u7b7e\u901a\u5e38\u7528\u4e8e\u94fe\u63a5\u5230\u6837\u5f0f\u8868: 1 2 3 <head> <link rel=\"stylesheet\" type=\"text/css\" href=\"mystyle.css\"> </head>","title":"HTML\u5934\u90e8 \u2013 HTML&lt; link &gt; \u5143\u7d20"},{"location":"pages/html5/html-head/#HTML\u5934\u90e8--HTML-\u5143\u7d20_4","text":"< style > \u6807\u7b7e\u5b9a\u4e49\u4e86HTML\u6587\u6863\u7684\u6837\u5f0f\u6587\u4ef6\u5f15\u7528\u5730\u5740. \u5728< style > \u5143\u7d20\u4e2d\u4f60\u4e5f\u53ef\u4ee5\u76f4\u63a5\u6dfb\u52a0\u6837\u5f0f\u6765\u6e32\u67d3 HTML \u6587\u6863\uff1a 1 2 3 4 5 6 <head> <style type=\"text/css\"> body {background-color:yellow} p {color:blue} </style> </head>","title":"HTML\u5934\u90e8 \u2013 HTML&lt; style &gt; \u5143\u7d20"},{"location":"pages/html5/html-head/#_1","text":"meta\u6807\u7b7e\u63cf\u8ff0\u4e86\u4e00\u4e9b\u57fa\u672c\u7684\u5143\u6570\u636e\u3002 < meta > \u6807\u7b7e\u63d0\u4f9b\u4e86\u5143\u6570\u636e.\u5143\u6570\u636e\u4e5f\u4e0d\u663e\u793a\u5728\u9875\u9762\u4e0a\uff0c\u4f46\u4f1a\u88ab\u6d4f\u89c8\u5668\u89e3\u6790\u3002 META \u5143\u7d20\u901a\u5e38\u7528\u4e8e\u6307\u5b9a\u7f51\u9875\u7684\u63cf\u8ff0\uff0c\u5173\u952e\u8bcd\uff0c\u6587\u4ef6\u7684\u6700\u540e\u4fee\u6539\u65f6\u95f4\uff0c\u4f5c\u8005\uff0c\u548c\u5176\u4ed6\u5143\u6570\u636e\u3002 \u5143\u6570\u636e\u53ef\u4ee5\u4f7f\u7528\u4e8e\u6d4f\u89c8\u5668\uff08\u5982\u4f55\u663e\u793a\u5185\u5bb9\u6216\u91cd\u65b0\u52a0\u8f7d\u9875\u9762\uff09\uff0c\u641c\u7d22\u5f15\u64ce\uff08\u5173\u952e\u8bcd\uff09\uff0c\u6216\u5176\u4ed6Web\u670d\u52a1\u3002 < meta > \u4e00\u822c\u653e\u7f6e\u4e8e < head > \u533a\u57df \u4e3a\u641c\u7d22\u5f15\u64ce\u5b9a\u4e49\u5173\u952e\u8bcd: 1 <meta name=\"keywords\" content=\"HTML, CSS, XML, XHTML, JavaScript\"> \u4e3a\u7f51\u9875\u5b9a\u4e49\u63cf\u8ff0\u5185\u5bb9: 1 <meta name=\"description\" content=\"\u514d\u8d39 Web & \u7f16\u7a0b \u6559\u7a0b\"> \u5b9a\u4e49\u7f51\u9875\u4f5c\u8005: 1 <meta name=\"author\" content=\"Runoob\"> \u6bcf30\u79d2\u949f\u5237\u65b0\u5f53\u524d\u9875\u9762: 1 <meta http-equiv=\"refresh\" content=\"30\">","title":""},{"location":"pages/html5/html-head/#HTML\u5934\u90e8--HTML-\u5143\u7d20_5","text":"< script >\u6807\u7b7e\u7528\u4e8e\u52a0\u8f7d\u811a\u672c\u6587\u4ef6\uff0c\u5982\uff1a JavaScript\u3002 < script > \u5143\u7d20\u5728\u4ee5\u540e\u7684\u7ae0\u8282\u4e2d\u4f1a\u8be6\u7ec6\u63cf\u8ff0\u3002","title":"HTML\u5934\u90e8 \u2013 HTML&lt; script &gt; \u5143\u7d20"},{"location":"pages/html5/html-head/#HTML\u5934\u90e8--head\u5143\u7d20","text":"\u6807\u7b7e \u63cf\u8ff0 < `head`> \u5b9a\u4e49\u4e86\u6587\u6863\u7684\u4fe1\u606f < `title`> \u5b9a\u4e49\u4e86\u6587\u6863\u7684\u6807\u9898 < `base`> \u5b9a\u4e49\u4e86\u9875\u9762\u94fe\u63a5\u6807\u7b7e\u7684\u9ed8\u8ba4\u94fe\u63a5\u5730\u5740 < `link`> \u5b9a\u4e49\u4e86\u4e00\u4e2a\u6587\u6863\u548c\u5916\u90e8\u8d44\u6e90\u4e4b\u95f4\u7684\u5173\u7cfb < `meta`> \u5b9a\u4e49\u4e86HTML\u6587\u6863\u4e2d\u7684\u5143\u6570\u636e < `script`> \u5b9a\u4e49\u4e86\u5ba2\u6237\u7aef\u7684\u811a\u672c\u6587\u4ef6 < `style`> \u5b9a\u4e49\u4e86HTML\u6587\u6863\u7684\u6837\u5f0f\u6587\u4ef6","title":"HTML\u5934\u90e8 \u2013 head\u5143\u7d20"},{"location":"pages/html5/html-images/","text":"HTML \u56fe\u50cf \u00b6 HTML \u56fe\u50cf\uff0c\u5728 HTML \u4e2d\uff0c\u56fe\u50cf\u7531< img > \u6807\u7b7e\u5b9a\u4e49\u3002< img > \u662f\u7a7a\u6807\u7b7e\uff0c\u610f\u601d\u662f\u8bf4\uff0c\u5b83\u53ea\u5305\u542b\u5c5e\u6027\uff0c\u5e76\u4e14\u6ca1\u6709\u95ed\u5408\u6807\u7b7e\u3002\u8981\u5728\u9875\u9762\u4e0a\u663e\u793a\u56fe\u50cf\uff0c\u4f60\u9700\u8981\u4f7f\u7528\u6e90\u5c5e\u6027\uff08src\uff09\u3002src \u6307 \"source\" \u6e90\u5c5e\u6027\u7684\u503c\u662f\u56fe\u50cf\u7684 URL \u5730\u5740\u3002 HTML \u56fe\u50cf- \u56fe\u50cf\u6807\u7b7e\uff08< img >\uff09\u548c\u6e90\u5c5e\u6027\uff08Src\uff09 \u00b6 \u5728 HTML \u4e2d\uff0c\u56fe\u50cf\u7531< img > \u6807\u7b7e\u5b9a\u4e49\u3002 < img > \u662f\u7a7a\u6807\u7b7e\uff0c\u610f\u601d\u662f\u8bf4\uff0c\u5b83\u53ea\u5305\u542b\u5c5e\u6027\uff0c\u5e76\u4e14\u6ca1\u6709\u95ed\u5408\u6807\u7b7e\u3002 \u8981\u5728\u9875\u9762\u4e0a\u663e\u793a\u56fe\u50cf\uff0c\u4f60\u9700\u8981\u4f7f\u7528\u6e90\u5c5e\u6027\uff08src\uff09\u3002src \u6307 \"source\" \u6e90\u5c5e\u6027\u7684\u503c\u662f\u56fe\u50cf\u7684 URL \u5730\u5740\u3002 \u5b9a\u4e49\u56fe\u50cf\u7684\u8bed\u6cd5\u662f\uff1a 1 <img src=\"url\" alt=\"some_text\"> URL \u6307\u5b58\u50a8\u56fe\u50cf\u7684\u4f4d\u7f6e\u3002\u5982\u679c\u540d\u4e3a \"lena.jpg\" \u7684\u56fe\u50cf\u4f4d\u4e8e https://geek.digiasset.org/ \u7684 html \u76ee\u5f55\u4e2d\uff0c\u90a3\u4e48\u5176 URL \u4e3a https://geek.digiasset.org/html/lena.jpg \u3002 \u6d4f\u89c8\u5668\u5c06\u56fe\u50cf\u663e\u793a\u5728\u6587\u6863\u4e2d\u56fe\u50cf\u6807\u7b7e\u51fa\u73b0\u7684\u5730\u65b9\u3002\u5982\u679c\u4f60\u5c06\u56fe\u50cf\u6807\u7b7e\u7f6e\u4e8e\u4e24\u4e2a\u6bb5\u843d\u4e4b\u95f4\uff0c\u90a3\u4e48\u6d4f\u89c8\u5668\u4f1a\u9996\u5148\u663e\u793a\u7b2c\u4e00\u4e2a\u6bb5\u843d\uff0c\u7136\u540e\u663e\u793a\u56fe\u7247\uff0c\u6700\u540e\u663e\u793a\u7b2c\u4e8c\u6bb5\u3002 HTML\u56fe\u50cf- Alt\u5c5e\u6027 \u00b6 alt \u5c5e\u6027\u7528\u6765\u4e3a\u56fe\u50cf\u5b9a\u4e49\u4e00\u4e32\u9884\u5907\u7684\u53ef\u66ff\u6362\u7684\u6587\u672c\u3002 \u66ff\u6362\u6587\u672c\u5c5e\u6027\u7684\u503c\u662f\u7528\u6237\u5b9a\u4e49\u7684\u3002 1 <img src=\"boat.gif\" alt=\"Big Boat\"> \u5728\u6d4f\u89c8\u5668\u65e0\u6cd5\u8f7d\u5165\u56fe\u50cf\u65f6\uff0c\u66ff\u6362\u6587\u672c\u5c5e\u6027\u544a\u8bc9\u8bfb\u8005\u5979\u4eec\u5931\u53bb\u7684\u4fe1\u606f\u3002\u6b64\u65f6\uff0c\u6d4f\u89c8\u5668\u5c06\u663e\u793a\u8fd9\u4e2a\u66ff\u4ee3\u6027\u7684\u6587\u672c\u800c\u4e0d\u662f\u56fe\u50cf\u3002\u4e3a\u9875\u9762\u4e0a\u7684\u56fe\u50cf\u90fd\u52a0\u4e0a\u66ff\u6362\u6587\u672c\u5c5e\u6027\u662f\u4e2a\u597d\u4e60\u60ef\uff0c\u8fd9\u6837\u6709\u52a9\u4e8e\u66f4\u597d\u7684\u663e\u793a\u4fe1\u606f\uff0c\u5e76\u4e14\u5bf9\u4e8e\u90a3\u4e9b\u4f7f\u7528\u7eaf\u6587\u672c\u6d4f\u89c8\u5668\u7684\u4eba\u6765\u8bf4\u662f\u975e\u5e38\u6709\u7528\u7684\u3002 HTML \u56fe\u50cf- \u8bbe\u7f6e\u56fe\u50cf\u7684\u9ad8\u5ea6\u4e0e\u5bbd\u5ea6 \u00b6 height\uff08\u9ad8\u5ea6\uff09 \u4e0e width\uff08\u5bbd\u5ea6\uff09\u5c5e\u6027\u7528\u4e8e\u8bbe\u7f6e\u56fe\u50cf\u7684\u9ad8\u5ea6\u4e0e\u5bbd\u5ea6\u3002 1 <img src=\"lena.jpg\" alt=\"Lena Soderberg\" width=\"304\" height=\"228\"> \u63d0\u793a: \u6307\u5b9a\u56fe\u50cf\u7684\u9ad8\u5ea6\u548c\u5bbd\u5ea6\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u4e60\u60ef\u3002\u5982\u679c\u56fe\u50cf\u6307\u5b9a\u4e86\u9ad8\u5ea6\u5bbd\u5ea6\uff0c\u9875\u9762\u52a0\u8f7d\u65f6\u5c31\u4f1a\u4fdd\u7559\u6307\u5b9a\u7684\u5c3a\u5bf8\u3002\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u56fe\u7247\u7684\u5927\u5c0f\uff0c\u52a0\u8f7d\u9875\u9762\u65f6\u6709\u53ef\u80fd\u4f1a\u7834\u574fHTML\u9875\u9762\u7684\u6574\u4f53\u5e03\u5c40\u3002 \u57fa\u672c\u7684\u6ce8\u610f\u4e8b\u9879 \u2013 \u6709\u7528\u7684\u63d0\u793a\uff1a \u6ce8\u610f: \u5047\u5982\u67d0\u4e2a HTML \u6587\u4ef6\u5305\u542b\u5341\u4e2a\u56fe\u50cf\uff0c\u90a3\u4e48\u4e3a\u4e86\u6b63\u786e\u663e\u793a\u8fd9\u4e2a\u9875\u9762\uff0c\u9700\u8981\u52a0\u8f7d 11 \u4e2a\u6587\u4ef6\u3002\u52a0\u8f7d\u56fe\u7247\u662f\u9700\u8981\u65f6\u95f4\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u7684\u5efa\u8bae\u662f\uff1a\u614e\u7528\u56fe\u7247\u3002 \u6ce8\u610f: \u52a0\u8f7d\u9875\u9762\u65f6\uff0c\u8981\u6ce8\u610f\u63d2\u5165\u9875\u9762\u56fe\u50cf\u7684\u8def\u5f84\uff0c\u5982\u679c\u4e0d\u80fd\u6b63\u786e\u8bbe\u7f6e\u56fe\u50cf\u7684\u4f4d\u7f6e\uff0c\u6d4f\u89c8\u5668\u65e0\u6cd5\u52a0\u8f7d\u56fe\u7247\uff0c\u56fe\u50cf\u6807\u7b7e\u5c31\u4f1a\u663e\u793a\u4e00\u4e2a\u7834\u788e\u7684\u56fe\u7247\u3002 HTML \u56fe\u50cf\u6807\u7b7e \u00b6 \u6807\u7b7e \u63cf\u8ff0 < **img** > \u5b9a\u4e49\u56fe\u50cf < **map** > \u5b9a\u4e49\u56fe\u50cf\u5730\u56fe < **area** > \u5b9a\u4e49\u56fe\u50cf\u5730\u56fe\u4e2d\u7684\u53ef\u70b9\u51fb\u533a\u57df HTML \u56fe\u50cf \u66f4\u591a\u5b9e\u4f8b \u00b6 HTML \u56fe\u50cf \u2013 \u663e\u793a\u56fe\u50cf \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <!DOCTYPE html> <html> <head> <meta charset=\"utf-8\"> <title>\u6559\u7a0b</title> <base href=\"https://geek.digiasset.org/html/\" target=\"_blank\"> <meta name=\"description\" content=\"\u514d\u8d39\u5728\u7ebf\u6559\u7a0b\"> <meta name=\"keywords\" content=\"HTML,CSS,XML,JavaScript\"> </head> <body> <h2>Lena Soderberg</h2> <img border=\"0\" src=\"lena.jpg\" alt=\"Lena Soderberg\" width=\"304\" height=\"228\"> </body> </html> \u8f93\u51fa\u7ed3\u679c\uff1a HTML \u56fe\u50cf \u2013 \u6392\u5217\u56fe\u7247\uff0c\u6d6e\u52a8\u56fe\u7247 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 <h4>\u9ed8\u8ba4\u5bf9\u9f50\u7684\u56fe\u50cf (align=\"bottom\"):</h4> <p>\u8fd9\u662f\u4e00\u4e9b\u6587\u672c\u3002<img src=\"smile.gif\" alt=\"Smile face\" width=\"32\" height=\"32\"> \u8fd9\u662f\u4e00\u4e9b\u6587\u672c\u3002</p> <h4>\u56fe\u7247\u4f7f\u7528 align=\"middle\":</h4> <p>\u8fd9\u662f\u4e00\u4e9b\u6587\u672c\u3002<img src=\"smile.gif\" alt=\"Smile face\" align=\"middle\" width=\"32\" height=\"32\">\u8fd9\u662f\u4e00\u4e9b\u6587\u672c</p> <h4>\u56fe\u7247\u4f7f\u7528 align=\"top\":</h4> <p>\u8fd9\u662f\u4e00\u4e9b\u6587\u672c\u3002<img src=\"smile.gif\" alt=\"Smile face\" align=\"top\" width=\"32\" height=\"32\">\u8fd9\u662f\u4e00\u4e9b\u6587\u672c\u3002</p> <p><b>\u6ce8\u610f:</b>\u5728HTML 4\u4e2d align \u5c5e\u6027\u5df2\u5e9f\u5f03\uff0cHTML5 \u5df2\u4e0d\u652f\u6301\u8be5\u5c5e\u6027\uff0c\u53ef\u4ee5\u4f7f\u7528 CSS \u4ee3\u66ff\u3002</p> <p> <img src=\"smile.gif\" alt=\"Smile face\" style=\"float:left\" width=\"32\" height=\"32\"> \u4e00\u4e2a\u5e26\u56fe\u7247\u7684\u6bb5\u843d\uff0c\u56fe\u7247\u6d6e\u52a8\u5728\u8fd9\u4e2a\u6587\u672c\u7684\u5de6\u8fb9\u3002 </p> <p> <img src=\"smile.gif\" alt=\"Smile face\" style=\"float:right\" width=\"32\" height=\"32\"> \u4e00\u4e2a\u5e26\u56fe\u7247\u7684\u6bb5\u843d\uff0c\u56fe\u7247\u6d6e\u52a8\u5728\u8fd9\u4e2a\u6587\u672c\u7684\u53f3\u8fb9\u3002 </p> <p><b>\u6ce8\u610f:</b>\u5728\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u4e86 CSS \"float\" \u5c5e\u6027\uff0c\u5728HTML 4\u4e2d align \u5c5e\u6027\u5df2\u5e9f\u5f03\uff0cHTML5 \u5df2\u4e0d\u652f\u6301\u8be5\u5c5e\u6027\uff0c\u53ef\u4ee5\u4f7f\u7528 CSS \u4ee3\u66ff\u3002</p> \u8f93\u51fa\u7ed3\u679c\uff1a HTML \u56fe\u50cf \u2013 \u8bbe\u7f6e\u56fe\u50cf\u94fe\u63a5\uff0c\u521b\u5efa\u56fe\u50cf\u6620\u5c04 \u00b6 \u672c\u4f8b\u663e\u793a\u5982\u4f55\u521b\u5efa\u5e26\u6709\u53ef\u4f9b\u70b9\u51fb\u533a\u57df\u7684\u56fe\u50cf\u5730\u56fe\u3002\u5176\u4e2d\u7684\u6bcf\u4e2a\u533a\u57df\u90fd\u662f\u4e00\u4e2a\u8d85\u7ea7\u94fe\u63a5\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 <p>\u521b\u5efa\u56fe\u7247\u94fe\u63a5: <a href=\"https://geek.digiasset.org/html/html-tutorials/html-intro.html\"> <img border=\"10\" src=\"smile.gif\" alt=\"HTML \u6559\u7a0b\" width=\"32\" height=\"32\"></a></p> <p>\u65e0\u8fb9\u6846\u7684\u56fe\u7247\u94fe\u63a5: <a href=\"https://geek.digiasset.org/html/html-tutorials/html-intro.html\"> <img border=\"0\" src=\"smile.gif\" alt=\"HTML \u6559\u7a0b\" width=\"32\" height=\"32\"></a></p> <p>\u70b9\u51fb\u592a\u9633\u6216\u5176\u4ed6\u884c\u661f\uff0c\u6ce8\u610f\u53d8\u5316\uff1a</p> <img src=\"planets.gif\" width=\"145\" height=\"126\" alt=\"Planets\" usemap=\"#planetmap\"> <map name=\"planetmap\"> <area shape=\"rect\" coords=\"0,0,82,126\" alt=\"Sun\" href=\"sun.htm\"> <area shape=\"circle\" coords=\"90,58,3\" alt=\"Mercury\" href=\"mercur.htm\"> <area shape=\"circle\" coords=\"124,58,8\" alt=\"Venus\" href=\"venus.htm\"> </map> \u8f93\u51fa\u7ed3\u679c\uff1a","title":"HTML5 \u56fe\u50cf"},{"location":"pages/html5/html-images/#HTML-\u56fe\u50cf","text":"HTML \u56fe\u50cf\uff0c\u5728 HTML \u4e2d\uff0c\u56fe\u50cf\u7531< img > \u6807\u7b7e\u5b9a\u4e49\u3002< img > \u662f\u7a7a\u6807\u7b7e\uff0c\u610f\u601d\u662f\u8bf4\uff0c\u5b83\u53ea\u5305\u542b\u5c5e\u6027\uff0c\u5e76\u4e14\u6ca1\u6709\u95ed\u5408\u6807\u7b7e\u3002\u8981\u5728\u9875\u9762\u4e0a\u663e\u793a\u56fe\u50cf\uff0c\u4f60\u9700\u8981\u4f7f\u7528\u6e90\u5c5e\u6027\uff08src\uff09\u3002src \u6307 \"source\" \u6e90\u5c5e\u6027\u7684\u503c\u662f\u56fe\u50cf\u7684 URL \u5730\u5740\u3002","title":"HTML \u56fe\u50cf"},{"location":"pages/html5/html-images/#HTML-\u56fe\u50cf--\u56fe\u50cf\u6807\u7b7e\u548c\u6e90\u5c5e\u6027Src","text":"\u5728 HTML \u4e2d\uff0c\u56fe\u50cf\u7531< img > \u6807\u7b7e\u5b9a\u4e49\u3002 < img > \u662f\u7a7a\u6807\u7b7e\uff0c\u610f\u601d\u662f\u8bf4\uff0c\u5b83\u53ea\u5305\u542b\u5c5e\u6027\uff0c\u5e76\u4e14\u6ca1\u6709\u95ed\u5408\u6807\u7b7e\u3002 \u8981\u5728\u9875\u9762\u4e0a\u663e\u793a\u56fe\u50cf\uff0c\u4f60\u9700\u8981\u4f7f\u7528\u6e90\u5c5e\u6027\uff08src\uff09\u3002src \u6307 \"source\" \u6e90\u5c5e\u6027\u7684\u503c\u662f\u56fe\u50cf\u7684 URL \u5730\u5740\u3002 \u5b9a\u4e49\u56fe\u50cf\u7684\u8bed\u6cd5\u662f\uff1a 1 <img src=\"url\" alt=\"some_text\"> URL \u6307\u5b58\u50a8\u56fe\u50cf\u7684\u4f4d\u7f6e\u3002\u5982\u679c\u540d\u4e3a \"lena.jpg\" \u7684\u56fe\u50cf\u4f4d\u4e8e https://geek.digiasset.org/ \u7684 html \u76ee\u5f55\u4e2d\uff0c\u90a3\u4e48\u5176 URL \u4e3a https://geek.digiasset.org/html/lena.jpg \u3002 \u6d4f\u89c8\u5668\u5c06\u56fe\u50cf\u663e\u793a\u5728\u6587\u6863\u4e2d\u56fe\u50cf\u6807\u7b7e\u51fa\u73b0\u7684\u5730\u65b9\u3002\u5982\u679c\u4f60\u5c06\u56fe\u50cf\u6807\u7b7e\u7f6e\u4e8e\u4e24\u4e2a\u6bb5\u843d\u4e4b\u95f4\uff0c\u90a3\u4e48\u6d4f\u89c8\u5668\u4f1a\u9996\u5148\u663e\u793a\u7b2c\u4e00\u4e2a\u6bb5\u843d\uff0c\u7136\u540e\u663e\u793a\u56fe\u7247\uff0c\u6700\u540e\u663e\u793a\u7b2c\u4e8c\u6bb5\u3002","title":"HTML \u56fe\u50cf- \u56fe\u50cf\u6807\u7b7e\uff08&lt; img &gt;\uff09\u548c\u6e90\u5c5e\u6027\uff08Src\uff09"},{"location":"pages/html5/html-images/#HTML\u56fe\u50cf--Alt\u5c5e\u6027","text":"alt \u5c5e\u6027\u7528\u6765\u4e3a\u56fe\u50cf\u5b9a\u4e49\u4e00\u4e32\u9884\u5907\u7684\u53ef\u66ff\u6362\u7684\u6587\u672c\u3002 \u66ff\u6362\u6587\u672c\u5c5e\u6027\u7684\u503c\u662f\u7528\u6237\u5b9a\u4e49\u7684\u3002 1 <img src=\"boat.gif\" alt=\"Big Boat\"> \u5728\u6d4f\u89c8\u5668\u65e0\u6cd5\u8f7d\u5165\u56fe\u50cf\u65f6\uff0c\u66ff\u6362\u6587\u672c\u5c5e\u6027\u544a\u8bc9\u8bfb\u8005\u5979\u4eec\u5931\u53bb\u7684\u4fe1\u606f\u3002\u6b64\u65f6\uff0c\u6d4f\u89c8\u5668\u5c06\u663e\u793a\u8fd9\u4e2a\u66ff\u4ee3\u6027\u7684\u6587\u672c\u800c\u4e0d\u662f\u56fe\u50cf\u3002\u4e3a\u9875\u9762\u4e0a\u7684\u56fe\u50cf\u90fd\u52a0\u4e0a\u66ff\u6362\u6587\u672c\u5c5e\u6027\u662f\u4e2a\u597d\u4e60\u60ef\uff0c\u8fd9\u6837\u6709\u52a9\u4e8e\u66f4\u597d\u7684\u663e\u793a\u4fe1\u606f\uff0c\u5e76\u4e14\u5bf9\u4e8e\u90a3\u4e9b\u4f7f\u7528\u7eaf\u6587\u672c\u6d4f\u89c8\u5668\u7684\u4eba\u6765\u8bf4\u662f\u975e\u5e38\u6709\u7528\u7684\u3002","title":"HTML\u56fe\u50cf- Alt\u5c5e\u6027"},{"location":"pages/html5/html-images/#HTML-\u56fe\u50cf--\u8bbe\u7f6e\u56fe\u50cf\u7684\u9ad8\u5ea6\u4e0e\u5bbd\u5ea6","text":"height\uff08\u9ad8\u5ea6\uff09 \u4e0e width\uff08\u5bbd\u5ea6\uff09\u5c5e\u6027\u7528\u4e8e\u8bbe\u7f6e\u56fe\u50cf\u7684\u9ad8\u5ea6\u4e0e\u5bbd\u5ea6\u3002 1 <img src=\"lena.jpg\" alt=\"Lena Soderberg\" width=\"304\" height=\"228\"> \u63d0\u793a: \u6307\u5b9a\u56fe\u50cf\u7684\u9ad8\u5ea6\u548c\u5bbd\u5ea6\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u4e60\u60ef\u3002\u5982\u679c\u56fe\u50cf\u6307\u5b9a\u4e86\u9ad8\u5ea6\u5bbd\u5ea6\uff0c\u9875\u9762\u52a0\u8f7d\u65f6\u5c31\u4f1a\u4fdd\u7559\u6307\u5b9a\u7684\u5c3a\u5bf8\u3002\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u56fe\u7247\u7684\u5927\u5c0f\uff0c\u52a0\u8f7d\u9875\u9762\u65f6\u6709\u53ef\u80fd\u4f1a\u7834\u574fHTML\u9875\u9762\u7684\u6574\u4f53\u5e03\u5c40\u3002 \u57fa\u672c\u7684\u6ce8\u610f\u4e8b\u9879 \u2013 \u6709\u7528\u7684\u63d0\u793a\uff1a \u6ce8\u610f: \u5047\u5982\u67d0\u4e2a HTML \u6587\u4ef6\u5305\u542b\u5341\u4e2a\u56fe\u50cf\uff0c\u90a3\u4e48\u4e3a\u4e86\u6b63\u786e\u663e\u793a\u8fd9\u4e2a\u9875\u9762\uff0c\u9700\u8981\u52a0\u8f7d 11 \u4e2a\u6587\u4ef6\u3002\u52a0\u8f7d\u56fe\u7247\u662f\u9700\u8981\u65f6\u95f4\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u7684\u5efa\u8bae\u662f\uff1a\u614e\u7528\u56fe\u7247\u3002 \u6ce8\u610f: \u52a0\u8f7d\u9875\u9762\u65f6\uff0c\u8981\u6ce8\u610f\u63d2\u5165\u9875\u9762\u56fe\u50cf\u7684\u8def\u5f84\uff0c\u5982\u679c\u4e0d\u80fd\u6b63\u786e\u8bbe\u7f6e\u56fe\u50cf\u7684\u4f4d\u7f6e\uff0c\u6d4f\u89c8\u5668\u65e0\u6cd5\u52a0\u8f7d\u56fe\u7247\uff0c\u56fe\u50cf\u6807\u7b7e\u5c31\u4f1a\u663e\u793a\u4e00\u4e2a\u7834\u788e\u7684\u56fe\u7247\u3002","title":"HTML \u56fe\u50cf- \u8bbe\u7f6e\u56fe\u50cf\u7684\u9ad8\u5ea6\u4e0e\u5bbd\u5ea6"},{"location":"pages/html5/html-images/#HTML-\u56fe\u50cf\u6807\u7b7e","text":"\u6807\u7b7e \u63cf\u8ff0 < **img** > \u5b9a\u4e49\u56fe\u50cf < **map** > \u5b9a\u4e49\u56fe\u50cf\u5730\u56fe < **area** > \u5b9a\u4e49\u56fe\u50cf\u5730\u56fe\u4e2d\u7684\u53ef\u70b9\u51fb\u533a\u57df","title":"HTML \u56fe\u50cf\u6807\u7b7e"},{"location":"pages/html5/html-images/#HTML-\u56fe\u50cf-\u66f4\u591a\u5b9e\u4f8b","text":"","title":"HTML \u56fe\u50cf \u66f4\u591a\u5b9e\u4f8b"},{"location":"pages/html5/html-images/#HTML-\u56fe\u50cf--\u663e\u793a\u56fe\u50cf","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <!DOCTYPE html> <html> <head> <meta charset=\"utf-8\"> <title>\u6559\u7a0b</title> <base href=\"https://geek.digiasset.org/html/\" target=\"_blank\"> <meta name=\"description\" content=\"\u514d\u8d39\u5728\u7ebf\u6559\u7a0b\"> <meta name=\"keywords\" content=\"HTML,CSS,XML,JavaScript\"> </head> <body> <h2>Lena Soderberg</h2> <img border=\"0\" src=\"lena.jpg\" alt=\"Lena Soderberg\" width=\"304\" height=\"228\"> </body> </html> \u8f93\u51fa\u7ed3\u679c\uff1a","title":"HTML \u56fe\u50cf \u2013 \u663e\u793a\u56fe\u50cf"},{"location":"pages/html5/html-images/#HTML-\u56fe\u50cf--\u6392\u5217\u56fe\u7247\u6d6e\u52a8\u56fe\u7247","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 <h4>\u9ed8\u8ba4\u5bf9\u9f50\u7684\u56fe\u50cf (align=\"bottom\"):</h4> <p>\u8fd9\u662f\u4e00\u4e9b\u6587\u672c\u3002<img src=\"smile.gif\" alt=\"Smile face\" width=\"32\" height=\"32\"> \u8fd9\u662f\u4e00\u4e9b\u6587\u672c\u3002</p> <h4>\u56fe\u7247\u4f7f\u7528 align=\"middle\":</h4> <p>\u8fd9\u662f\u4e00\u4e9b\u6587\u672c\u3002<img src=\"smile.gif\" alt=\"Smile face\" align=\"middle\" width=\"32\" height=\"32\">\u8fd9\u662f\u4e00\u4e9b\u6587\u672c</p> <h4>\u56fe\u7247\u4f7f\u7528 align=\"top\":</h4> <p>\u8fd9\u662f\u4e00\u4e9b\u6587\u672c\u3002<img src=\"smile.gif\" alt=\"Smile face\" align=\"top\" width=\"32\" height=\"32\">\u8fd9\u662f\u4e00\u4e9b\u6587\u672c\u3002</p> <p><b>\u6ce8\u610f:</b>\u5728HTML 4\u4e2d align \u5c5e\u6027\u5df2\u5e9f\u5f03\uff0cHTML5 \u5df2\u4e0d\u652f\u6301\u8be5\u5c5e\u6027\uff0c\u53ef\u4ee5\u4f7f\u7528 CSS \u4ee3\u66ff\u3002</p> <p> <img src=\"smile.gif\" alt=\"Smile face\" style=\"float:left\" width=\"32\" height=\"32\"> \u4e00\u4e2a\u5e26\u56fe\u7247\u7684\u6bb5\u843d\uff0c\u56fe\u7247\u6d6e\u52a8\u5728\u8fd9\u4e2a\u6587\u672c\u7684\u5de6\u8fb9\u3002 </p> <p> <img src=\"smile.gif\" alt=\"Smile face\" style=\"float:right\" width=\"32\" height=\"32\"> \u4e00\u4e2a\u5e26\u56fe\u7247\u7684\u6bb5\u843d\uff0c\u56fe\u7247\u6d6e\u52a8\u5728\u8fd9\u4e2a\u6587\u672c\u7684\u53f3\u8fb9\u3002 </p> <p><b>\u6ce8\u610f:</b>\u5728\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u4e86 CSS \"float\" \u5c5e\u6027\uff0c\u5728HTML 4\u4e2d align \u5c5e\u6027\u5df2\u5e9f\u5f03\uff0cHTML5 \u5df2\u4e0d\u652f\u6301\u8be5\u5c5e\u6027\uff0c\u53ef\u4ee5\u4f7f\u7528 CSS \u4ee3\u66ff\u3002</p> \u8f93\u51fa\u7ed3\u679c\uff1a","title":"HTML \u56fe\u50cf \u2013 \u6392\u5217\u56fe\u7247\uff0c\u6d6e\u52a8\u56fe\u7247"},{"location":"pages/html5/html-images/#HTML-\u56fe\u50cf--\u8bbe\u7f6e\u56fe\u50cf\u94fe\u63a5\u521b\u5efa\u56fe\u50cf\u6620\u5c04","text":"\u672c\u4f8b\u663e\u793a\u5982\u4f55\u521b\u5efa\u5e26\u6709\u53ef\u4f9b\u70b9\u51fb\u533a\u57df\u7684\u56fe\u50cf\u5730\u56fe\u3002\u5176\u4e2d\u7684\u6bcf\u4e2a\u533a\u57df\u90fd\u662f\u4e00\u4e2a\u8d85\u7ea7\u94fe\u63a5\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 <p>\u521b\u5efa\u56fe\u7247\u94fe\u63a5: <a href=\"https://geek.digiasset.org/html/html-tutorials/html-intro.html\"> <img border=\"10\" src=\"smile.gif\" alt=\"HTML \u6559\u7a0b\" width=\"32\" height=\"32\"></a></p> <p>\u65e0\u8fb9\u6846\u7684\u56fe\u7247\u94fe\u63a5: <a href=\"https://geek.digiasset.org/html/html-tutorials/html-intro.html\"> <img border=\"0\" src=\"smile.gif\" alt=\"HTML \u6559\u7a0b\" width=\"32\" height=\"32\"></a></p> <p>\u70b9\u51fb\u592a\u9633\u6216\u5176\u4ed6\u884c\u661f\uff0c\u6ce8\u610f\u53d8\u5316\uff1a</p> <img src=\"planets.gif\" width=\"145\" height=\"126\" alt=\"Planets\" usemap=\"#planetmap\"> <map name=\"planetmap\"> <area shape=\"rect\" coords=\"0,0,82,126\" alt=\"Sun\" href=\"sun.htm\"> <area shape=\"circle\" coords=\"90,58,3\" alt=\"Mercury\" href=\"mercur.htm\"> <area shape=\"circle\" coords=\"124,58,8\" alt=\"Venus\" href=\"venus.htm\"> </map> \u8f93\u51fa\u7ed3\u679c\uff1a","title":"HTML \u56fe\u50cf \u2013 \u8bbe\u7f6e\u56fe\u50cf\u94fe\u63a5\uff0c\u521b\u5efa\u56fe\u50cf\u6620\u5c04"},{"location":"pages/html5/html-tables/","text":"HTML \u8868\u683c \u00b6 HTML \u8868\u683c\uff0c\u8868\u683c\u7531 < table > \u6807\u7b7e\u6765\u5b9a\u4e49\u3002\u6bcf\u4e2a\u8868\u683c\u5747\u6709\u82e5\u5e72\u884c\uff08\u7531 < tr > \u6807\u7b7e\u5b9a\u4e49\uff09\uff0c\u6bcf\u884c\u88ab\u5206\u5272\u4e3a\u82e5\u5e72\u5355\u5143\u683c\uff08\u7531 < td > \u6807\u7b7e\u5b9a\u4e49\uff09\u3002\u5b57\u6bcd td \u6307\u8868\u683c\u6570\u636e\uff08table data\uff09\uff0c\u5373\u6570\u636e\u5355\u5143\u683c\u7684\u5185\u5bb9\u3002\u6570\u636e\u5355\u5143\u683c\u53ef\u4ee5\u5305\u542b\u6587\u672c\u3001\u56fe\u7247\u3001\u5217\u8868\u3001\u6bb5\u843d\u3001\u8868\u5355\u3001\u6c34\u5e73\u7ebf\u3001\u8868\u683c\u7b49\u7b49\u3002 HTML \u8868\u683c \u00b6 \u8868\u683c\u7531 < table > \u6807\u7b7e\u6765\u5b9a\u4e49\u3002\u6bcf\u4e2a\u8868\u683c\u5747\u6709\u82e5\u5e72\u884c\uff08\u7531 < tr > \u6807\u7b7e\u5b9a\u4e49\uff09\uff0c\u6bcf\u884c\u88ab\u5206\u5272\u4e3a\u82e5\u5e72\u5355\u5143\u683c\uff08\u7531 < td > \u6807\u7b7e\u5b9a\u4e49\uff09\u3002\u5b57\u6bcd td \u6307\u8868\u683c\u6570\u636e\uff08table data\uff09\uff0c\u5373\u6570\u636e\u5355\u5143\u683c\u7684\u5185\u5bb9\u3002\u6570\u636e\u5355\u5143\u683c\u53ef\u4ee5\u5305\u542b\u6587\u672c\u3001\u56fe\u7247\u3001\u5217\u8868\u3001\u6bb5\u843d\u3001\u8868\u5355\u3001\u6c34\u5e73\u7ebf\u3001\u8868\u683c\u7b49\u7b49\u3002 1 2 3 4 5 6 7 8 9 10 <table border=\"1\"> <tr> <td>row 1, cell 1</td> <td>row 1, cell 2</td> </tr> <tr> <td>row 2, cell 1</td> <td>row 2, cell 2</td> </tr> </table> \u5728\u6d4f\u89c8\u5668\u663e\u793a\u5982\u4e0b\uff1a HTML \u8868\u683c\u548c\u8fb9\u6846\u5c5e\u6027 \u00b6 \u5982\u679c\u4e0d\u5b9a\u4e49\u8fb9\u6846\u5c5e\u6027\uff0c\u8868\u683c\u5c06\u4e0d\u663e\u793a\u8fb9\u6846\u3002\u6709\u65f6\u8fd9\u5f88\u6709\u7528\uff0c\u4f46\u662f\u5927\u591a\u6570\u65f6\u5019\uff0c\u6211\u4eec\u5e0c\u671b\u663e\u793a\u8fb9\u6846\u3002 \u4f7f\u7528\u8fb9\u6846\u5c5e\u6027\u6765\u663e\u793a\u4e00\u4e2a\u5e26\u6709\u8fb9\u6846\u7684\u8868\u683c\uff1a 1 2 3 4 5 6 <table border=\"1\"> <tr> <td>Row 1, cell 1</td> <td>Row 1, cell 2</td> </tr> </table> HTML \u8868\u683c\u8868\u5934 \u00b6 \u8868\u683c\u7684\u8868\u5934\u4f7f\u7528 < th > \u6807\u7b7e\u8fdb\u884c\u5b9a\u4e49\u3002 \u5927\u591a\u6570\u6d4f\u89c8\u5668\u4f1a\u628a\u8868\u5934\u663e\u793a\u4e3a\u7c97\u4f53\u5c45\u4e2d\u7684\u6587\u672c\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 <table border=\"1\"> <tr> <th>Header 1</th> <th>Header 2</th> </tr> <tr> <td>row 1, cell 1</td> <td>row 1, cell 2</td> </tr> <tr> <td>row 2, cell 1</td> <td>row 2, cell 2</td> </tr> </table> \u5728\u6d4f\u89c8\u5668\u663e\u793a\u5982\u4e0b\uff1a HTML \u8868\u683c\u6807\u7b7e \u00b6 \u6807\u7b7e \u63cf\u8ff0 < `table`> \u5b9a\u4e49\u8868\u683c < `th`> \u5b9a\u4e49\u8868\u683c\u7684\u8868\u5934 < `tr`> \u5b9a\u4e49\u8868\u683c\u7684\u884c < `td`> \u5b9a\u4e49\u8868\u683c\u5355\u5143 < `caption`> \u5b9a\u4e49\u8868\u683c\u6807\u9898 < `colgroup`> \u5b9a\u4e49\u8868\u683c\u5217\u7684\u7ec4 < `col`> \u5b9a\u4e49\u7528\u4e8e\u8868\u683c\u5217\u7684\u5c5e\u6027 < `thead`> \u5b9a\u4e49\u8868\u683c\u7684\u9875\u7709 < `tbody`> \u5b9a\u4e49\u8868\u683c\u7684\u4e3b\u4f53 < `tfoot`> \u5b9a\u4e49\u8868\u683c\u7684\u9875\u811a HTML \u8868\u683c\u5b9e\u4f8b \u00b6 HTML \u6ca1\u6709\u8fb9\u6846\u7684\u8868\u683c\uff1a \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 <h4>\u8fd9\u4e2a\u8868\u683c\u6ca1\u6709\u8fb9\u6846:</h4> <table> <tr> <td>100</td> <td>200</td> <td>300</td> </tr> <tr> <td>400</td> <td>500</td> <td>600</td> </tr> </table> \u8f93\u51fa\u7ed3\u679c\uff1a HTML \u5982\u4f55\u663e\u793a\u8868\u683c\u8868\u5934\uff1a \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 <h4>\u6c34\u5e73\u6807\u9898:</h4> <table border=\"1\"> <tr> <th>Name</th> <th>Telephone</th> <th>Telephone</th> </tr> <tr> <td>Bill Gates</td> <td>555 77 854</td> <td>555 77 855</td> </tr> </table> <h4>\u5782\u76f4\u6807\u9898:</h4> <table border=\"1\"> <tr> <th>First Name:</th> <td>Bill Gates</td> </tr> <tr> <th>Telephone:</th> <td>555 77 854</td> </tr> <tr> <th>Telephone:</th> <td>555 77 855</td> </tr> </table> \u8f93\u51fa\u7ed3\u679c\uff1a HTML \u4e00\u4e2a\u5e26\u6807\u9898 \\(caption\\) \u7684\u8868\u683c\uff1a \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 <table border=\"1\"> <caption>Monthly savings</caption> <tr> <th>Month</th> <th>Savings</th> </tr> <tr> <td>January</td> <td>$100</td> </tr> <tr> <td>February</td> <td>$50</td> </tr> </table> \u8f93\u51fa\u7ed3\u679c\uff1a HTML \u5982\u4f55\u5b9a\u4e49\u8de8\u884c\u6216\u8de8\u5217\u7684\u8868\u683c\u5355\u5143\u683c: \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 <h4>\u5355\u5143\u683c\u8de8\u4e24\u683c:</h4> <table border=\"1\"> <tr> <th>Name</th> <th colspan=\"2\">Telephone</th> </tr> <tr> <td>Bill Gates</td> <td>555 77 854</td> <td>555 77 855</td> </tr> </table> <h4>\u5355\u5143\u683c\u8de8\u4e24\u5217:</h4> <table border=\"1\"> <tr> <th>First Name:</th> <td>Bill Gates</td> </tr> <tr> <th rowspan=\"2\">Telephone:</th> <td>555 77 854</td> </tr> <tr> <td>555 77 855</td> </tr> </table> \u8f93\u51fa\u7ed3\u679c\uff1a HTML \u8868\u683c\u5185\u663e\u793a\u5176\u4ed6\u5143\u7d20: \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 <table border=\"1\"> <tr> <td> <p>\u8fd9\u662f\u4e00\u4e2a\u6bb5\u843d</p> <p>\u8fd9\u662f\u53e6\u4e00\u4e2a\u6bb5\u843d</p> </td> <td>\u8fd9\u4e2a\u5355\u5143\u683c\u5305\u542b\u4e00\u4e2a\u8868\u683c: <table border=\"1\"> <tr> <td>A</td> <td>B</td> </tr> <tr> <td>C</td> <td>D</td> </tr> </table> </td> </tr> <tr> <td>\u8fd9\u4e2a\u5355\u5143\u683c\u5305\u542b\u4e00\u4e2a\u5217\u8868 <ul> <li>apples</li> <li>bananas</li> <li>pineapples</li> </ul> </td> <td>HELLO</td> </tr> </table> \u8f93\u51fa\u7ed3\u679c\uff1a HTML \u5982\u4f55\u663e\u793a\u5355\u5143\u683c\u8fb9\u8ddd\uff1a \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 <h4>\u6ca1\u6709\u5355\u5143\u683c\u8fb9\u8ddd:</h4> <table border=\"1\"> <tr> <td>First</td> <td>Row</td> </tr> <tr> <td>Second</td> <td>Row</td> </tr> </table> <h4>\u6709\u5355\u5143\u683c\u8fb9\u8ddd:</h4> <table border=\"1\" cellpadding=\"10\"> <tr> <td>First</td> <td>Row</td> </tr> <tr> <td>Second</td> <td>Row</td> </tr> </table> \u8f93\u51fa\u7ed3\u679c\uff1a HTML \u5982\u4f55\u589e\u52a0\u5355\u5143\u683c\u4e4b\u95f4\u7684\u8ddd\u79bb\uff1a \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 <h4>\u6ca1\u6709\u5355\u5143\u683c\u95f4\u8ddd:</h4> <table border=\"1\"> <tr> <td>First</td> <td>Row</td> </tr> <tr> <td>Second</td> <td>Row</td> </tr> </table> <h4>\u5355\u5143\u683c\u95f4\u8ddd=\"0\":</h4> <table border=\"1\" cellspacing=\"0\"> <tr> <td>First</td> <td>Row</td> </tr> <tr> <td>Second</td> <td>Row</td> </tr> </table> <h4>\u5355\u5143\u683c\u95f4\u8ddd=\"10\":</h4> <table border=\"1\" cellspacing=\"10\"> <tr> <td>First</td> <td>Row</td> </tr> <tr> <td>Second</td> <td>Row</td> </tr> </table> \u8f93\u51fa\u7ed3\u679c\uff1a","title":"HTML5 \u8868\u683c"},{"location":"pages/html5/html-tables/#HTML-\u8868\u683c","text":"HTML \u8868\u683c\uff0c\u8868\u683c\u7531 < table > \u6807\u7b7e\u6765\u5b9a\u4e49\u3002\u6bcf\u4e2a\u8868\u683c\u5747\u6709\u82e5\u5e72\u884c\uff08\u7531 < tr > \u6807\u7b7e\u5b9a\u4e49\uff09\uff0c\u6bcf\u884c\u88ab\u5206\u5272\u4e3a\u82e5\u5e72\u5355\u5143\u683c\uff08\u7531 < td > \u6807\u7b7e\u5b9a\u4e49\uff09\u3002\u5b57\u6bcd td \u6307\u8868\u683c\u6570\u636e\uff08table data\uff09\uff0c\u5373\u6570\u636e\u5355\u5143\u683c\u7684\u5185\u5bb9\u3002\u6570\u636e\u5355\u5143\u683c\u53ef\u4ee5\u5305\u542b\u6587\u672c\u3001\u56fe\u7247\u3001\u5217\u8868\u3001\u6bb5\u843d\u3001\u8868\u5355\u3001\u6c34\u5e73\u7ebf\u3001\u8868\u683c\u7b49\u7b49\u3002","title":"HTML \u8868\u683c"},{"location":"pages/html5/html-tables/#HTML-\u8868\u683c_1","text":"\u8868\u683c\u7531 < table > \u6807\u7b7e\u6765\u5b9a\u4e49\u3002\u6bcf\u4e2a\u8868\u683c\u5747\u6709\u82e5\u5e72\u884c\uff08\u7531 < tr > \u6807\u7b7e\u5b9a\u4e49\uff09\uff0c\u6bcf\u884c\u88ab\u5206\u5272\u4e3a\u82e5\u5e72\u5355\u5143\u683c\uff08\u7531 < td > \u6807\u7b7e\u5b9a\u4e49\uff09\u3002\u5b57\u6bcd td \u6307\u8868\u683c\u6570\u636e\uff08table data\uff09\uff0c\u5373\u6570\u636e\u5355\u5143\u683c\u7684\u5185\u5bb9\u3002\u6570\u636e\u5355\u5143\u683c\u53ef\u4ee5\u5305\u542b\u6587\u672c\u3001\u56fe\u7247\u3001\u5217\u8868\u3001\u6bb5\u843d\u3001\u8868\u5355\u3001\u6c34\u5e73\u7ebf\u3001\u8868\u683c\u7b49\u7b49\u3002 1 2 3 4 5 6 7 8 9 10 <table border=\"1\"> <tr> <td>row 1, cell 1</td> <td>row 1, cell 2</td> </tr> <tr> <td>row 2, cell 1</td> <td>row 2, cell 2</td> </tr> </table> \u5728\u6d4f\u89c8\u5668\u663e\u793a\u5982\u4e0b\uff1a","title":"HTML \u8868\u683c"},{"location":"pages/html5/html-tables/#HTML-\u8868\u683c\u548c\u8fb9\u6846\u5c5e\u6027","text":"\u5982\u679c\u4e0d\u5b9a\u4e49\u8fb9\u6846\u5c5e\u6027\uff0c\u8868\u683c\u5c06\u4e0d\u663e\u793a\u8fb9\u6846\u3002\u6709\u65f6\u8fd9\u5f88\u6709\u7528\uff0c\u4f46\u662f\u5927\u591a\u6570\u65f6\u5019\uff0c\u6211\u4eec\u5e0c\u671b\u663e\u793a\u8fb9\u6846\u3002 \u4f7f\u7528\u8fb9\u6846\u5c5e\u6027\u6765\u663e\u793a\u4e00\u4e2a\u5e26\u6709\u8fb9\u6846\u7684\u8868\u683c\uff1a 1 2 3 4 5 6 <table border=\"1\"> <tr> <td>Row 1, cell 1</td> <td>Row 1, cell 2</td> </tr> </table>","title":"HTML \u8868\u683c\u548c\u8fb9\u6846\u5c5e\u6027"},{"location":"pages/html5/html-tables/#HTML-\u8868\u683c\u8868\u5934","text":"\u8868\u683c\u7684\u8868\u5934\u4f7f\u7528 < th > \u6807\u7b7e\u8fdb\u884c\u5b9a\u4e49\u3002 \u5927\u591a\u6570\u6d4f\u89c8\u5668\u4f1a\u628a\u8868\u5934\u663e\u793a\u4e3a\u7c97\u4f53\u5c45\u4e2d\u7684\u6587\u672c\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 <table border=\"1\"> <tr> <th>Header 1</th> <th>Header 2</th> </tr> <tr> <td>row 1, cell 1</td> <td>row 1, cell 2</td> </tr> <tr> <td>row 2, cell 1</td> <td>row 2, cell 2</td> </tr> </table> \u5728\u6d4f\u89c8\u5668\u663e\u793a\u5982\u4e0b\uff1a","title":"HTML \u8868\u683c\u8868\u5934"},{"location":"pages/html5/html-tables/#HTML-\u8868\u683c\u6807\u7b7e","text":"\u6807\u7b7e \u63cf\u8ff0 < `table`> \u5b9a\u4e49\u8868\u683c < `th`> \u5b9a\u4e49\u8868\u683c\u7684\u8868\u5934 < `tr`> \u5b9a\u4e49\u8868\u683c\u7684\u884c < `td`> \u5b9a\u4e49\u8868\u683c\u5355\u5143 < `caption`> \u5b9a\u4e49\u8868\u683c\u6807\u9898 < `colgroup`> \u5b9a\u4e49\u8868\u683c\u5217\u7684\u7ec4 < `col`> \u5b9a\u4e49\u7528\u4e8e\u8868\u683c\u5217\u7684\u5c5e\u6027 < `thead`> \u5b9a\u4e49\u8868\u683c\u7684\u9875\u7709 < `tbody`> \u5b9a\u4e49\u8868\u683c\u7684\u4e3b\u4f53 < `tfoot`> \u5b9a\u4e49\u8868\u683c\u7684\u9875\u811a","title":"HTML \u8868\u683c\u6807\u7b7e"},{"location":"pages/html5/html-tables/#HTML-\u8868\u683c\u5b9e\u4f8b","text":"","title":"HTML \u8868\u683c\u5b9e\u4f8b"},{"location":"pages/html5/html-tables/#HTML-\u6ca1\u6709\u8fb9\u6846\u7684\u8868\u683c","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 <h4>\u8fd9\u4e2a\u8868\u683c\u6ca1\u6709\u8fb9\u6846:</h4> <table> <tr> <td>100</td> <td>200</td> <td>300</td> </tr> <tr> <td>400</td> <td>500</td> <td>600</td> </tr> </table> \u8f93\u51fa\u7ed3\u679c\uff1a","title":"HTML \u6ca1\u6709\u8fb9\u6846\u7684\u8868\u683c\uff1a"},{"location":"pages/html5/html-tables/#HTML-\u5982\u4f55\u663e\u793a\u8868\u683c\u8868\u5934","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 <h4>\u6c34\u5e73\u6807\u9898:</h4> <table border=\"1\"> <tr> <th>Name</th> <th>Telephone</th> <th>Telephone</th> </tr> <tr> <td>Bill Gates</td> <td>555 77 854</td> <td>555 77 855</td> </tr> </table> <h4>\u5782\u76f4\u6807\u9898:</h4> <table border=\"1\"> <tr> <th>First Name:</th> <td>Bill Gates</td> </tr> <tr> <th>Telephone:</th> <td>555 77 854</td> </tr> <tr> <th>Telephone:</th> <td>555 77 855</td> </tr> </table> \u8f93\u51fa\u7ed3\u679c\uff1a","title":"HTML \u5982\u4f55\u663e\u793a\u8868\u683c\u8868\u5934\uff1a"},{"location":"pages/html5/html-tables/#HTML-\u4e00\u4e2a\u5e26\u6807\u9898-caption-\u7684\u8868\u683c","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 <table border=\"1\"> <caption>Monthly savings</caption> <tr> <th>Month</th> <th>Savings</th> </tr> <tr> <td>January</td> <td>$100</td> </tr> <tr> <td>February</td> <td>$50</td> </tr> </table> \u8f93\u51fa\u7ed3\u679c\uff1a","title":"HTML \u4e00\u4e2a\u5e26\u6807\u9898 \\(caption\\) \u7684\u8868\u683c\uff1a"},{"location":"pages/html5/html-tables/#HTML-\u5982\u4f55\u5b9a\u4e49\u8de8\u884c\u6216\u8de8\u5217\u7684\u8868\u683c\u5355\u5143\u683c","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 <h4>\u5355\u5143\u683c\u8de8\u4e24\u683c:</h4> <table border=\"1\"> <tr> <th>Name</th> <th colspan=\"2\">Telephone</th> </tr> <tr> <td>Bill Gates</td> <td>555 77 854</td> <td>555 77 855</td> </tr> </table> <h4>\u5355\u5143\u683c\u8de8\u4e24\u5217:</h4> <table border=\"1\"> <tr> <th>First Name:</th> <td>Bill Gates</td> </tr> <tr> <th rowspan=\"2\">Telephone:</th> <td>555 77 854</td> </tr> <tr> <td>555 77 855</td> </tr> </table> \u8f93\u51fa\u7ed3\u679c\uff1a","title":"HTML \u5982\u4f55\u5b9a\u4e49\u8de8\u884c\u6216\u8de8\u5217\u7684\u8868\u683c\u5355\u5143\u683c:"},{"location":"pages/html5/html-tables/#HTML-\u8868\u683c\u5185\u663e\u793a\u5176\u4ed6\u5143\u7d20","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 <table border=\"1\"> <tr> <td> <p>\u8fd9\u662f\u4e00\u4e2a\u6bb5\u843d</p> <p>\u8fd9\u662f\u53e6\u4e00\u4e2a\u6bb5\u843d</p> </td> <td>\u8fd9\u4e2a\u5355\u5143\u683c\u5305\u542b\u4e00\u4e2a\u8868\u683c: <table border=\"1\"> <tr> <td>A</td> <td>B</td> </tr> <tr> <td>C</td> <td>D</td> </tr> </table> </td> </tr> <tr> <td>\u8fd9\u4e2a\u5355\u5143\u683c\u5305\u542b\u4e00\u4e2a\u5217\u8868 <ul> <li>apples</li> <li>bananas</li> <li>pineapples</li> </ul> </td> <td>HELLO</td> </tr> </table> \u8f93\u51fa\u7ed3\u679c\uff1a","title":"HTML \u8868\u683c\u5185\u663e\u793a\u5176\u4ed6\u5143\u7d20:"},{"location":"pages/html5/html-tables/#HTML-\u5982\u4f55\u663e\u793a\u5355\u5143\u683c\u8fb9\u8ddd","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 <h4>\u6ca1\u6709\u5355\u5143\u683c\u8fb9\u8ddd:</h4> <table border=\"1\"> <tr> <td>First</td> <td>Row</td> </tr> <tr> <td>Second</td> <td>Row</td> </tr> </table> <h4>\u6709\u5355\u5143\u683c\u8fb9\u8ddd:</h4> <table border=\"1\" cellpadding=\"10\"> <tr> <td>First</td> <td>Row</td> </tr> <tr> <td>Second</td> <td>Row</td> </tr> </table> \u8f93\u51fa\u7ed3\u679c\uff1a","title":"HTML \u5982\u4f55\u663e\u793a\u5355\u5143\u683c\u8fb9\u8ddd\uff1a"},{"location":"pages/html5/html-tables/#HTML-\u5982\u4f55\u589e\u52a0\u5355\u5143\u683c\u4e4b\u95f4\u7684\u8ddd\u79bb","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 <h4>\u6ca1\u6709\u5355\u5143\u683c\u95f4\u8ddd:</h4> <table border=\"1\"> <tr> <td>First</td> <td>Row</td> </tr> <tr> <td>Second</td> <td>Row</td> </tr> </table> <h4>\u5355\u5143\u683c\u95f4\u8ddd=\"0\":</h4> <table border=\"1\" cellspacing=\"0\"> <tr> <td>First</td> <td>Row</td> </tr> <tr> <td>Second</td> <td>Row</td> </tr> </table> <h4>\u5355\u5143\u683c\u95f4\u8ddd=\"10\":</h4> <table border=\"1\" cellspacing=\"10\"> <tr> <td>First</td> <td>Row</td> </tr> <tr> <td>Second</td> <td>Row</td> </tr> </table> \u8f93\u51fa\u7ed3\u679c\uff1a","title":"HTML \u5982\u4f55\u589e\u52a0\u5355\u5143\u683c\u4e4b\u95f4\u7684\u8ddd\u79bb\uff1a"},{"location":"pages/html5/html_5_geolocation/","text":"HTML5 \u5730\u7406\u5b9a\u4f4d \u00b6 \u5b9a\u4f4d\u7528\u6237\u7684\u4f4d\u7f6e \u00b6 HTML5 Geolocation API \u7528\u4e8e\u83b7\u5f97\u7528\u6237\u7684\u5730\u7406\u4f4d\u7f6e\u3002 \u9274\u4e8e\u8be5\u7279\u6027\u53ef\u80fd\u4fb5\u72af\u7528\u6237\u7684\u9690\u79c1\uff0c\u9664\u975e\u7528\u6237\u540c\u610f\uff0c\u5426\u5219\u7528\u6237\u4f4d\u7f6e\u4fe1\u606f\u662f\u4e0d\u53ef\u7528\u7684\u3002 \u6d4f\u89c8\u5668\u652f\u6301 \u00b6 Internet Explorer 9\u3001Firefox\u3001Chrome\u3001Safari \u4ee5\u53ca Opera \u652f\u6301\u5730\u7406\u5b9a\u4f4d\u3002 \u6ce8\u91ca\uff1a\u5bf9\u4e8e\u62e5\u6709 GPS \u7684\u8bbe\u5907\uff0c\u6bd4\u5982 iPhone\uff0c\u5730\u7406\u5b9a\u4f4d\u66f4\u52a0\u7cbe\u786e\u3002 HTML5 - \u4f7f\u7528\u5730\u7406\u5b9a\u4f4d \u00b6 \u8bf7\u4f7f\u7528 getCurrentPosition() \u65b9\u6cd5\u6765\u83b7\u5f97\u7528\u6237\u7684\u4f4d\u7f6e\u3002 \u4e0b\u4f8b\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u5730\u7406\u5b9a\u4f4d\u5b9e\u4f8b\uff0c\u53ef\u8fd4\u56de\u7528\u6237\u4f4d\u7f6e\u7684\u7ecf\u5ea6\u548c\u7eac\u5ea6\u3002 \u5b9e\u4f8b \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 <script> var x=document.getElementById(\"demo\"); function getLocation() { if (navigator.geolocation) { navigator.geolocation.getCurrentPosition(showPosition); } else{x.innerHTML=\"Geolocation is not supported by this browser.\";} } function showPosition(position) { x.innerHTML=\"Latitude: \" + position.coords.latitude + \"<br />Longitude: \" + position.coords.longitude; } </script> \u4f8b\u5b50\u89e3\u91ca\uff1a \u68c0\u6d4b\u662f\u5426\u652f\u6301\u5730\u7406\u5b9a\u4f4d \u5982\u679c\u652f\u6301\uff0c\u5219\u8fd0\u884c getCurrentPosition() \u65b9\u6cd5\u3002\u5982\u679c\u4e0d\u652f\u6301\uff0c\u5219\u5411\u7528\u6237\u663e\u793a\u4e00\u6bb5\u6d88\u606f\u3002 \u5982\u679cgetCurrentPosition()\u8fd0\u884c\u6210\u529f\uff0c\u5219\u5411\u53c2\u6570showPosition\u4e2d\u89c4\u5b9a\u7684\u51fd\u6570\u8fd4\u56de\u4e00\u4e2acoordinates\u5bf9\u8c61 showPosition() \u51fd\u6570\u83b7\u5f97\u5e76\u663e\u793a\u7ecf\u5ea6\u548c\u7eac\u5ea6 \u4e0a\u9762\u7684\u4f8b\u5b50\u662f\u4e00\u4e2a\u975e\u5e38\u57fa\u7840\u7684\u5730\u7406\u5b9a\u4f4d\u811a\u672c\uff0c\u4e0d\u542b\u9519\u8bef\u5904\u7406\u3002 \u5904\u7406\u9519\u8bef\u548c\u62d2\u7edd \u00b6 getCurrentPosition() \u65b9\u6cd5\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7528\u4e8e\u5904\u7406\u9519\u8bef\u3002\u5b83\u89c4\u5b9a\u5f53\u83b7\u53d6\u7528\u6237\u4f4d\u7f6e\u5931\u8d25\u65f6\u8fd0\u884c\u7684\u51fd\u6570\uff1a \u5b9e\u4f8b \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 function showError(error) { switch(error.code) { case error.PERMISSION_DENIED: x.innerHTML=\"User denied the request for Geolocation.\" break; case error.POSITION_UNAVAILABLE: x.innerHTML=\"Location information is unavailable.\" break; case error.TIMEOUT: x.innerHTML=\"The request to get user location timed out.\" break; case error.UNKNOWN_ERROR: x.innerHTML=\"An unknown error occurred.\" break; } } \u9519\u8bef\u4ee3\u7801\uff1a Permission denied - \u7528\u6237\u4e0d\u5141\u8bb8\u5730\u7406\u5b9a\u4f4d Position unavailable - \u65e0\u6cd5\u83b7\u53d6\u5f53\u524d\u4f4d\u7f6e Timeout - \u64cd\u4f5c\u8d85\u65f6 \u5728\u5730\u56fe\u4e2d\u663e\u793a\u7ed3\u679c \u00b6 \u5982\u9700\u5728\u5730\u56fe\u4e2d\u663e\u793a\u7ed3\u679c\uff0c\u60a8\u9700\u8981\u8bbf\u95ee\u53ef\u4f7f\u7528\u7ecf\u7eac\u5ea6\u7684\u5730\u56fe\u670d\u52a1\uff0c\u6bd4\u5982\u8c37\u6b4c\u5730\u56fe\u6216\u767e\u5ea6\u5730\u56fe\uff1a \u5b9e\u4f8b \u00b6 1 2 3 4 5 6 7 8 9 function showPosition(position) { var latlon=position.coords.latitude+\",\"+position.coords.longitude; var img_url=\"http://maps.googleapis.com/maps/api/staticmap?center=\" +latlon+\"&zoom=14&size=400x300&sensor=false\"; document.getElementById(\"mapholder\").innerHTML=\"<img src='\"+img_url+\"' />\"; } \u5728\u4e0a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u8fd4\u56de\u7684\u7ecf\u7eac\u5ea6\u6570\u636e\u5728\u8c37\u6b4c\u5730\u56fe\u4e2d\u663e\u793a\u4f4d\u7f6e\uff08\u4f7f\u7528\u9759\u6001\u56fe\u50cf\uff09\u3002 \u4e0a\u9762\u7684\u94fe\u63a5\u5411\u60a8\u6f14\u793a\u5982\u4f55\u4f7f\u7528\u811a\u672c\u6765\u663e\u793a\u5e26\u6709\u6807\u8bb0\u3001\u7f29\u653e\u548c\u62d6\u66f3\u9009\u9879\u7684\u4ea4\u4e92\u5f0f\u5730\u56fe\u3002 \u7ed9\u5b9a\u4f4d\u7f6e\u7684\u4fe1\u606f \u00b6 \u672c\u9875\u6f14\u793a\u7684\u662f\u5982\u4f55\u5728\u5730\u56fe\u4e0a\u663e\u793a\u7528\u6237\u7684\u4f4d\u7f6e\u3002\u4e0d\u8fc7\uff0c\u5730\u7406\u5b9a\u4f4d\u5bf9\u4e8e\u7ed9\u5b9a\u4f4d\u7f6e\u7684\u4fe1\u606f\u540c\u6837\u5f88\u6709\u7528\u5904\u3002 \u6848\u4f8b\uff1a \u66f4\u65b0\u672c\u5730\u4fe1\u606f \u663e\u793a\u7528\u6237\u5468\u56f4\u7684\u5174\u8da3\u70b9 \u4ea4\u4e92\u5f0f\u8f66\u8f7d\u5bfc\u822a\u7cfb\u7edf (GPS) getCurrentPosition() \u65b9\u6cd5 - \u8fd4\u56de\u6570\u636e \u00b6 \u82e5\u6210\u529f\uff0c\u5219 getCurrentPosition() \u65b9\u6cd5\u8fd4\u56de\u5bf9\u8c61\u3002\u59cb\u7ec8\u4f1a\u8fd4\u56de latitude\u3001longitude \u4ee5\u53ca accuracy \u5c5e\u6027\u3002\u5982\u679c\u53ef\u7528\uff0c\u5219\u4f1a\u8fd4\u56de\u5176\u4ed6\u4e0b\u9762\u7684\u5c5e\u6027\u3002 \u5c5e\u6027 \u63cf\u8ff0 coords.latitude \u5341\u8fdb\u5236\u6570\u7684\u7eac\u5ea6 coords.longitude \u5341\u8fdb\u5236\u6570\u7684\u7ecf\u5ea6 coords.accuracy \u4f4d\u7f6e\u7cbe\u5ea6 coords.altitude \u6d77\u62d4\uff0c\u6d77\u5e73\u9762\u4ee5\u4e0a\u4ee5\u7c73\u8ba1 coords.altitudeAccuracy \u4f4d\u7f6e\u7684\u6d77\u62d4\u7cbe\u5ea6 coords.heading \u65b9\u5411\uff0c\u4ece\u6b63\u5317\u5f00\u59cb\u4ee5\u5ea6\u8ba1 coords.speed \u901f\u5ea6\uff0c\u4ee5\u7c73/\u6bcf\u79d2\u8ba1 timestamp \u54cd\u5e94\u7684\u65e5\u671f/\u65f6\u95f4 Geolocation \u5bf9\u8c61 - \u5176\u4ed6\u6709\u8da3\u7684\u65b9\u6cd5 \u00b6 watchPosition() - \u8fd4\u56de\u7528\u6237\u7684\u5f53\u524d\u4f4d\u7f6e\uff0c\u5e76\u7ee7\u7eed\u8fd4\u56de\u7528\u6237\u79fb\u52a8\u65f6\u7684\u66f4\u65b0\u4f4d\u7f6e\uff08\u5c31\u50cf\u6c7d\u8f66\u4e0a\u7684 GPS\uff09\u3002 clearWatch() - \u505c\u6b62 watchPosition() \u65b9\u6cd5 \u4e0b\u9762\u7684\u4f8b\u5b50\u5c55\u793a watchPosition() \u65b9\u6cd5\u3002\u60a8\u9700\u8981\u4e00\u53f0\u7cbe\u786e\u7684 GPS \u8bbe\u5907\u6765\u6d4b\u8bd5\u8be5\u4f8b\uff08\u6bd4\u5982 iPhone\uff09\uff1a \u5b9e\u4f8b \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 <script> var x=document.getElementById(\"demo\"); function getLocation() { if (navigator.geolocation) { navigator.geolocation.watchPosition(showPosition); } else{x.innerHTML=\"Geolocation is not supported by this browser.\";} } function showPosition(position) { x.innerHTML=\"Latitude: \" + position.coords.latitude + \"<br />Longitude: \" + position.coords.longitude; } </script>","title":"HTML5 \u5730\u7406\u5b9a\u4f4d"},{"location":"pages/html5/html_5_geolocation/#HTML5-\u5730\u7406\u5b9a\u4f4d","text":"","title":"HTML5 \u5730\u7406\u5b9a\u4f4d"},{"location":"pages/html5/html_5_geolocation/#\u5b9a\u4f4d\u7528\u6237\u7684\u4f4d\u7f6e","text":"HTML5 Geolocation API \u7528\u4e8e\u83b7\u5f97\u7528\u6237\u7684\u5730\u7406\u4f4d\u7f6e\u3002 \u9274\u4e8e\u8be5\u7279\u6027\u53ef\u80fd\u4fb5\u72af\u7528\u6237\u7684\u9690\u79c1\uff0c\u9664\u975e\u7528\u6237\u540c\u610f\uff0c\u5426\u5219\u7528\u6237\u4f4d\u7f6e\u4fe1\u606f\u662f\u4e0d\u53ef\u7528\u7684\u3002","title":"\u5b9a\u4f4d\u7528\u6237\u7684\u4f4d\u7f6e"},{"location":"pages/html5/html_5_geolocation/#\u6d4f\u89c8\u5668\u652f\u6301","text":"Internet Explorer 9\u3001Firefox\u3001Chrome\u3001Safari \u4ee5\u53ca Opera \u652f\u6301\u5730\u7406\u5b9a\u4f4d\u3002 \u6ce8\u91ca\uff1a\u5bf9\u4e8e\u62e5\u6709 GPS \u7684\u8bbe\u5907\uff0c\u6bd4\u5982 iPhone\uff0c\u5730\u7406\u5b9a\u4f4d\u66f4\u52a0\u7cbe\u786e\u3002","title":"\u6d4f\u89c8\u5668\u652f\u6301"},{"location":"pages/html5/html_5_geolocation/#HTML5---\u4f7f\u7528\u5730\u7406\u5b9a\u4f4d","text":"\u8bf7\u4f7f\u7528 getCurrentPosition() \u65b9\u6cd5\u6765\u83b7\u5f97\u7528\u6237\u7684\u4f4d\u7f6e\u3002 \u4e0b\u4f8b\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u5730\u7406\u5b9a\u4f4d\u5b9e\u4f8b\uff0c\u53ef\u8fd4\u56de\u7528\u6237\u4f4d\u7f6e\u7684\u7ecf\u5ea6\u548c\u7eac\u5ea6\u3002","title":"HTML5 - \u4f7f\u7528\u5730\u7406\u5b9a\u4f4d"},{"location":"pages/html5/html_5_geolocation/#\u5b9e\u4f8b","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 <script> var x=document.getElementById(\"demo\"); function getLocation() { if (navigator.geolocation) { navigator.geolocation.getCurrentPosition(showPosition); } else{x.innerHTML=\"Geolocation is not supported by this browser.\";} } function showPosition(position) { x.innerHTML=\"Latitude: \" + position.coords.latitude + \"<br />Longitude: \" + position.coords.longitude; } </script> \u4f8b\u5b50\u89e3\u91ca\uff1a \u68c0\u6d4b\u662f\u5426\u652f\u6301\u5730\u7406\u5b9a\u4f4d \u5982\u679c\u652f\u6301\uff0c\u5219\u8fd0\u884c getCurrentPosition() \u65b9\u6cd5\u3002\u5982\u679c\u4e0d\u652f\u6301\uff0c\u5219\u5411\u7528\u6237\u663e\u793a\u4e00\u6bb5\u6d88\u606f\u3002 \u5982\u679cgetCurrentPosition()\u8fd0\u884c\u6210\u529f\uff0c\u5219\u5411\u53c2\u6570showPosition\u4e2d\u89c4\u5b9a\u7684\u51fd\u6570\u8fd4\u56de\u4e00\u4e2acoordinates\u5bf9\u8c61 showPosition() \u51fd\u6570\u83b7\u5f97\u5e76\u663e\u793a\u7ecf\u5ea6\u548c\u7eac\u5ea6 \u4e0a\u9762\u7684\u4f8b\u5b50\u662f\u4e00\u4e2a\u975e\u5e38\u57fa\u7840\u7684\u5730\u7406\u5b9a\u4f4d\u811a\u672c\uff0c\u4e0d\u542b\u9519\u8bef\u5904\u7406\u3002","title":"\u5b9e\u4f8b"},{"location":"pages/html5/html_5_geolocation/#\u5904\u7406\u9519\u8bef\u548c\u62d2\u7edd","text":"getCurrentPosition() \u65b9\u6cd5\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7528\u4e8e\u5904\u7406\u9519\u8bef\u3002\u5b83\u89c4\u5b9a\u5f53\u83b7\u53d6\u7528\u6237\u4f4d\u7f6e\u5931\u8d25\u65f6\u8fd0\u884c\u7684\u51fd\u6570\uff1a","title":"\u5904\u7406\u9519\u8bef\u548c\u62d2\u7edd"},{"location":"pages/html5/html_5_geolocation/#\u5b9e\u4f8b_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 function showError(error) { switch(error.code) { case error.PERMISSION_DENIED: x.innerHTML=\"User denied the request for Geolocation.\" break; case error.POSITION_UNAVAILABLE: x.innerHTML=\"Location information is unavailable.\" break; case error.TIMEOUT: x.innerHTML=\"The request to get user location timed out.\" break; case error.UNKNOWN_ERROR: x.innerHTML=\"An unknown error occurred.\" break; } } \u9519\u8bef\u4ee3\u7801\uff1a Permission denied - \u7528\u6237\u4e0d\u5141\u8bb8\u5730\u7406\u5b9a\u4f4d Position unavailable - \u65e0\u6cd5\u83b7\u53d6\u5f53\u524d\u4f4d\u7f6e Timeout - \u64cd\u4f5c\u8d85\u65f6","title":"\u5b9e\u4f8b"},{"location":"pages/html5/html_5_geolocation/#\u5728\u5730\u56fe\u4e2d\u663e\u793a\u7ed3\u679c","text":"\u5982\u9700\u5728\u5730\u56fe\u4e2d\u663e\u793a\u7ed3\u679c\uff0c\u60a8\u9700\u8981\u8bbf\u95ee\u53ef\u4f7f\u7528\u7ecf\u7eac\u5ea6\u7684\u5730\u56fe\u670d\u52a1\uff0c\u6bd4\u5982\u8c37\u6b4c\u5730\u56fe\u6216\u767e\u5ea6\u5730\u56fe\uff1a","title":"\u5728\u5730\u56fe\u4e2d\u663e\u793a\u7ed3\u679c"},{"location":"pages/html5/html_5_geolocation/#\u5b9e\u4f8b_2","text":"1 2 3 4 5 6 7 8 9 function showPosition(position) { var latlon=position.coords.latitude+\",\"+position.coords.longitude; var img_url=\"http://maps.googleapis.com/maps/api/staticmap?center=\" +latlon+\"&zoom=14&size=400x300&sensor=false\"; document.getElementById(\"mapholder\").innerHTML=\"<img src='\"+img_url+\"' />\"; } \u5728\u4e0a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u8fd4\u56de\u7684\u7ecf\u7eac\u5ea6\u6570\u636e\u5728\u8c37\u6b4c\u5730\u56fe\u4e2d\u663e\u793a\u4f4d\u7f6e\uff08\u4f7f\u7528\u9759\u6001\u56fe\u50cf\uff09\u3002 \u4e0a\u9762\u7684\u94fe\u63a5\u5411\u60a8\u6f14\u793a\u5982\u4f55\u4f7f\u7528\u811a\u672c\u6765\u663e\u793a\u5e26\u6709\u6807\u8bb0\u3001\u7f29\u653e\u548c\u62d6\u66f3\u9009\u9879\u7684\u4ea4\u4e92\u5f0f\u5730\u56fe\u3002","title":"\u5b9e\u4f8b"},{"location":"pages/html5/html_5_geolocation/#\u7ed9\u5b9a\u4f4d\u7f6e\u7684\u4fe1\u606f","text":"\u672c\u9875\u6f14\u793a\u7684\u662f\u5982\u4f55\u5728\u5730\u56fe\u4e0a\u663e\u793a\u7528\u6237\u7684\u4f4d\u7f6e\u3002\u4e0d\u8fc7\uff0c\u5730\u7406\u5b9a\u4f4d\u5bf9\u4e8e\u7ed9\u5b9a\u4f4d\u7f6e\u7684\u4fe1\u606f\u540c\u6837\u5f88\u6709\u7528\u5904\u3002 \u6848\u4f8b\uff1a \u66f4\u65b0\u672c\u5730\u4fe1\u606f \u663e\u793a\u7528\u6237\u5468\u56f4\u7684\u5174\u8da3\u70b9 \u4ea4\u4e92\u5f0f\u8f66\u8f7d\u5bfc\u822a\u7cfb\u7edf (GPS)","title":"\u7ed9\u5b9a\u4f4d\u7f6e\u7684\u4fe1\u606f"},{"location":"pages/html5/html_5_geolocation/#getCurrentPosition-\u65b9\u6cd5---\u8fd4\u56de\u6570\u636e","text":"\u82e5\u6210\u529f\uff0c\u5219 getCurrentPosition() \u65b9\u6cd5\u8fd4\u56de\u5bf9\u8c61\u3002\u59cb\u7ec8\u4f1a\u8fd4\u56de latitude\u3001longitude \u4ee5\u53ca accuracy \u5c5e\u6027\u3002\u5982\u679c\u53ef\u7528\uff0c\u5219\u4f1a\u8fd4\u56de\u5176\u4ed6\u4e0b\u9762\u7684\u5c5e\u6027\u3002 \u5c5e\u6027 \u63cf\u8ff0 coords.latitude \u5341\u8fdb\u5236\u6570\u7684\u7eac\u5ea6 coords.longitude \u5341\u8fdb\u5236\u6570\u7684\u7ecf\u5ea6 coords.accuracy \u4f4d\u7f6e\u7cbe\u5ea6 coords.altitude \u6d77\u62d4\uff0c\u6d77\u5e73\u9762\u4ee5\u4e0a\u4ee5\u7c73\u8ba1 coords.altitudeAccuracy \u4f4d\u7f6e\u7684\u6d77\u62d4\u7cbe\u5ea6 coords.heading \u65b9\u5411\uff0c\u4ece\u6b63\u5317\u5f00\u59cb\u4ee5\u5ea6\u8ba1 coords.speed \u901f\u5ea6\uff0c\u4ee5\u7c73/\u6bcf\u79d2\u8ba1 timestamp \u54cd\u5e94\u7684\u65e5\u671f/\u65f6\u95f4","title":"getCurrentPosition() \u65b9\u6cd5 - \u8fd4\u56de\u6570\u636e"},{"location":"pages/html5/html_5_geolocation/#Geolocation-\u5bf9\u8c61---\u5176\u4ed6\u6709\u8da3\u7684\u65b9\u6cd5","text":"watchPosition() - \u8fd4\u56de\u7528\u6237\u7684\u5f53\u524d\u4f4d\u7f6e\uff0c\u5e76\u7ee7\u7eed\u8fd4\u56de\u7528\u6237\u79fb\u52a8\u65f6\u7684\u66f4\u65b0\u4f4d\u7f6e\uff08\u5c31\u50cf\u6c7d\u8f66\u4e0a\u7684 GPS\uff09\u3002 clearWatch() - \u505c\u6b62 watchPosition() \u65b9\u6cd5 \u4e0b\u9762\u7684\u4f8b\u5b50\u5c55\u793a watchPosition() \u65b9\u6cd5\u3002\u60a8\u9700\u8981\u4e00\u53f0\u7cbe\u786e\u7684 GPS \u8bbe\u5907\u6765\u6d4b\u8bd5\u8be5\u4f8b\uff08\u6bd4\u5982 iPhone\uff09\uff1a","title":"Geolocation \u5bf9\u8c61 - \u5176\u4ed6\u6709\u8da3\u7684\u65b9\u6cd5"},{"location":"pages/html5/html_5_geolocation/#\u5b9e\u4f8b_3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 <script> var x=document.getElementById(\"demo\"); function getLocation() { if (navigator.geolocation) { navigator.geolocation.watchPosition(showPosition); } else{x.innerHTML=\"Geolocation is not supported by this browser.\";} } function showPosition(position) { x.innerHTML=\"Latitude: \" + position.coords.latitude + \"<br />Longitude: \" + position.coords.longitude; } </script>","title":"\u5b9e\u4f8b"},{"location":"pages/html5/html_5_intro/","text":"HTML 5 \u7b80\u4ecb \u00b6 HTML5 \u662f\u4e0b\u4e00\u4ee3\u7684 HTML\u3002 HTML5 \u4ecd\u5904\u4e8e\u5b8c\u5584\u4e4b\u4e2d\u3002\u7136\u800c\uff0c\u5927\u90e8\u5206\u73b0\u4ee3\u6d4f\u89c8\u5668\u5df2\u7ecf\u5177\u5907\u4e86\u67d0\u4e9b HTML5 \u652f\u6301\u3002 HTML \u7684\u4e0a\u4e00\u4e2a\u7248\u672c\u8bde\u751f\u4e8e 1999 \u5e74\u3002\u81ea\u4ece\u90a3\u4ee5\u540e\uff0cWeb \u4e16\u754c\u5df2\u7ecf\u7ecf\u5386\u4e86\u5de8\u53d8\u3002 HTML5 \u662f\u5982\u4f55\u8d77\u6b65\u7684\uff1f \u00b6 HTML5 \u662f W3C \u4e0e WHATWG \u5408\u4f5c\u7684\u7ed3\u679c\u3002 \u7f16\u8005\u6ce8\uff1aW3C \u6307 World Wide Web Consortium\uff0c\u4e07\u7ef4\u7f51\u8054\u76df\u3002 \u7f16\u8005\u6ce8\uff1aWHATWG \u6307 Web Hypertext Application Technology Working Group\u3002 WHATWG \u81f4\u529b\u4e8e web \u8868\u5355\u548c\u5e94\u7528\u7a0b\u5e8f\uff0c\u800c W3C \u4e13\u6ce8\u4e8e XHTML 2.0\u3002\u5728 2006 \u5e74\uff0c\u53cc\u65b9\u51b3\u5b9a\u8fdb\u884c\u5408\u4f5c\uff0c\u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u7248\u672c\u7684 HTML\u3002 \u4e3a HTML5 \u5efa\u7acb\u7684\u4e00\u4e9b\u89c4\u5219\uff1a \u65b0\u7279\u6027\u5e94\u8be5\u57fa\u4e8e HTML\u3001CSS\u3001DOM \u4ee5\u53ca JavaScript\u3002 \u51cf\u5c11\u5bf9\u5916\u90e8\u63d2\u4ef6\u7684\u9700\u6c42\uff08\u6bd4\u5982 Flash\uff09 \u66f4\u4f18\u79c0\u7684\u9519\u8bef\u5904\u7406 \u66f4\u591a\u53d6\u4ee3\u811a\u672c\u7684\u6807\u8bb0 HTML5 \u5e94\u8be5\u72ec\u7acb\u4e8e\u8bbe\u5907 \u5f00\u53d1\u8fdb\u7a0b\u5e94\u5bf9\u516c\u4f17\u900f\u660e","title":"HTML5 \u7b80\u4ecb"},{"location":"pages/html5/html_5_intro/#HTML-5-\u7b80\u4ecb","text":"HTML5 \u662f\u4e0b\u4e00\u4ee3\u7684 HTML\u3002 HTML5 \u4ecd\u5904\u4e8e\u5b8c\u5584\u4e4b\u4e2d\u3002\u7136\u800c\uff0c\u5927\u90e8\u5206\u73b0\u4ee3\u6d4f\u89c8\u5668\u5df2\u7ecf\u5177\u5907\u4e86\u67d0\u4e9b HTML5 \u652f\u6301\u3002 HTML \u7684\u4e0a\u4e00\u4e2a\u7248\u672c\u8bde\u751f\u4e8e 1999 \u5e74\u3002\u81ea\u4ece\u90a3\u4ee5\u540e\uff0cWeb \u4e16\u754c\u5df2\u7ecf\u7ecf\u5386\u4e86\u5de8\u53d8\u3002","title":"HTML 5 \u7b80\u4ecb"},{"location":"pages/html5/html_5_intro/#HTML5-\u662f\u5982\u4f55\u8d77\u6b65\u7684","text":"HTML5 \u662f W3C \u4e0e WHATWG \u5408\u4f5c\u7684\u7ed3\u679c\u3002 \u7f16\u8005\u6ce8\uff1aW3C \u6307 World Wide Web Consortium\uff0c\u4e07\u7ef4\u7f51\u8054\u76df\u3002 \u7f16\u8005\u6ce8\uff1aWHATWG \u6307 Web Hypertext Application Technology Working Group\u3002 WHATWG \u81f4\u529b\u4e8e web \u8868\u5355\u548c\u5e94\u7528\u7a0b\u5e8f\uff0c\u800c W3C \u4e13\u6ce8\u4e8e XHTML 2.0\u3002\u5728 2006 \u5e74\uff0c\u53cc\u65b9\u51b3\u5b9a\u8fdb\u884c\u5408\u4f5c\uff0c\u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u7248\u672c\u7684 HTML\u3002 \u4e3a HTML5 \u5efa\u7acb\u7684\u4e00\u4e9b\u89c4\u5219\uff1a \u65b0\u7279\u6027\u5e94\u8be5\u57fa\u4e8e HTML\u3001CSS\u3001DOM \u4ee5\u53ca JavaScript\u3002 \u51cf\u5c11\u5bf9\u5916\u90e8\u63d2\u4ef6\u7684\u9700\u6c42\uff08\u6bd4\u5982 Flash\uff09 \u66f4\u4f18\u79c0\u7684\u9519\u8bef\u5904\u7406 \u66f4\u591a\u53d6\u4ee3\u811a\u672c\u7684\u6807\u8bb0 HTML5 \u5e94\u8be5\u72ec\u7acb\u4e8e\u8bbe\u5907 \u5f00\u53d1\u8fdb\u7a0b\u5e94\u5bf9\u516c\u4f17\u900f\u660e","title":"HTML5 \u662f\u5982\u4f55\u8d77\u6b65\u7684\uff1f"},{"location":"pages/html5/html_5_video/","text":"HTML 5 \u89c6\u9891 \u00b6 \u68c0\u6d4b\u60a8\u7684\u6d4f\u89c8\u5668\u662f\u5426\u652f\u6301 HTML5 \u89c6\u9891\uff1a \u8bb8\u591a\u65f6\u9ae6\u7684\u7f51\u7ad9\u90fd\u63d0\u4f9b\u89c6\u9891\u3002HTML5 \u63d0\u4f9b\u4e86\u5c55\u793a\u89c6\u9891\u7684\u6807\u51c6\u3002 HTML5 \u89c4\u5b9a\u4e86\u4e00\u79cd\u901a\u8fc7 video \u5143\u7d20\u6765\u5305\u542b\u89c6\u9891\u7684\u6807\u51c6\u65b9\u6cd5\u3002 \u4eca\u5929\uff0c\u5927\u591a\u6570\u89c6\u9891\u662f\u901a\u8fc7\u63d2\u4ef6\uff08\u6bd4\u5982 Flash\uff09\u6765\u663e\u793a\u7684\u3002\u7136\u800c\uff0c\u5e76\u975e\u6240\u6709\u6d4f\u89c8\u5668\u90fd\u62e5\u6709\u540c\u6837\u7684\u63d2\u4ef6\u3002 \u76f4\u5230\u73b0\u5728\uff0c\u4ecd\u7136\u4e0d\u5b58\u5728\u4e00\u9879\u65e8\u5728\u7f51\u9875\u4e0a\u663e\u793a\u89c6\u9891\u7684\u6807\u51c6\u3002 WebM = \u5e26\u6709 VP8 \u89c6\u9891\u7f16\u7801\u548c Vorbis \u97f3\u9891\u7f16\u7801\u7684 WebM \u6587\u4ef6 MPEG4 = \u5e26\u6709 H.264 \u89c6\u9891\u7f16\u7801\u548c AAC \u97f3\u9891\u7f16\u7801\u7684 MPEG 4 \u6587\u4ef6 Ogg = \u5e26\u6709 Theora \u89c6\u9891\u7f16\u7801\u548c Vorbis \u97f3\u9891\u7f16\u7801\u7684 Ogg \u6587\u4ef6 \u5982\u4f55\u5de5\u4f5c \u00b6 \u5982\u9700\u5728 HTML5 \u4e2d\u663e\u793a\u89c6\u9891\uff0c\u60a8\u6240\u6709\u9700\u8981\u7684\u662f\uff1a 1 2 <video src=\"movie.ogg\" controls=\"controls\"> </video> controls \u5c5e\u6027\u4f9b\u6dfb\u52a0\u64ad\u653e\u3001\u6682\u505c\u548c\u97f3\u91cf\u63a7\u4ef6\u3002 \u5305\u542b\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u5c5e\u6027\u4e5f\u662f\u4e0d\u9519\u7684\u4e3b\u610f\u3002 \u4e0e \u4e4b\u95f4\u63d2\u5165\u7684\u5185\u5bb9\u662f\u4f9b\u4e0d\u652f\u6301 video \u5143\u7d20\u7684\u6d4f\u89c8\u5668\u663e\u793a\u7684\uff1a \u5b9e\u4f8b \u00b6 1 2 3 <video src=\"movie.ogg\" width=\"320\" height=\"240\" controls=\"controls\"> Your browser does not support the video tag. </video> \u4e0a\u9762\u7684\u4f8b\u5b50\u4f7f\u7528\u4e00\u4e2a Ogg \u6587\u4ef6\uff0c\u9002\u7528\u4e8eFirefox\u3001Opera \u4ee5\u53ca Chrome \u6d4f\u89c8\u5668\u3002 \u8981\u786e\u4fdd\u9002\u7528\u4e8e Safari \u6d4f\u89c8\u5668\uff0c\u89c6\u9891\u6587\u4ef6\u5fc5\u987b\u662f MPEG4 \u7c7b\u578b\u3002 video \u5143\u7d20\u5141\u8bb8\u591a\u4e2a source \u5143\u7d20\u3002source \u5143\u7d20\u53ef\u4ee5\u94fe\u63a5\u4e0d\u540c\u7684\u89c6\u9891\u6587\u4ef6\u3002\u6d4f\u89c8\u5668\u5c06\u4f7f\u7528\u7b2c\u4e00\u4e2a\u53ef\u8bc6\u522b\u7684\u683c\u5f0f\uff1a \u5b9e\u4f8b \u00b6 1 2 3 4 5 <video width=\"320\" height=\"240\" controls=\"controls\"> <source src=\"movie.ogg\" type=\"video/ogg\"> <source src=\"movie.mp4\" type=\"video/mp4\"> Your browser does not support the video tag. </video>","title":"HTML5 \u89c6\u9891"},{"location":"pages/html5/html_5_video/#HTML-5-\u89c6\u9891","text":"\u68c0\u6d4b\u60a8\u7684\u6d4f\u89c8\u5668\u662f\u5426\u652f\u6301 HTML5 \u89c6\u9891\uff1a \u8bb8\u591a\u65f6\u9ae6\u7684\u7f51\u7ad9\u90fd\u63d0\u4f9b\u89c6\u9891\u3002HTML5 \u63d0\u4f9b\u4e86\u5c55\u793a\u89c6\u9891\u7684\u6807\u51c6\u3002 HTML5 \u89c4\u5b9a\u4e86\u4e00\u79cd\u901a\u8fc7 video \u5143\u7d20\u6765\u5305\u542b\u89c6\u9891\u7684\u6807\u51c6\u65b9\u6cd5\u3002 \u4eca\u5929\uff0c\u5927\u591a\u6570\u89c6\u9891\u662f\u901a\u8fc7\u63d2\u4ef6\uff08\u6bd4\u5982 Flash\uff09\u6765\u663e\u793a\u7684\u3002\u7136\u800c\uff0c\u5e76\u975e\u6240\u6709\u6d4f\u89c8\u5668\u90fd\u62e5\u6709\u540c\u6837\u7684\u63d2\u4ef6\u3002 \u76f4\u5230\u73b0\u5728\uff0c\u4ecd\u7136\u4e0d\u5b58\u5728\u4e00\u9879\u65e8\u5728\u7f51\u9875\u4e0a\u663e\u793a\u89c6\u9891\u7684\u6807\u51c6\u3002 WebM = \u5e26\u6709 VP8 \u89c6\u9891\u7f16\u7801\u548c Vorbis \u97f3\u9891\u7f16\u7801\u7684 WebM \u6587\u4ef6 MPEG4 = \u5e26\u6709 H.264 \u89c6\u9891\u7f16\u7801\u548c AAC \u97f3\u9891\u7f16\u7801\u7684 MPEG 4 \u6587\u4ef6 Ogg = \u5e26\u6709 Theora \u89c6\u9891\u7f16\u7801\u548c Vorbis \u97f3\u9891\u7f16\u7801\u7684 Ogg \u6587\u4ef6","title":"HTML 5 \u89c6\u9891"},{"location":"pages/html5/html_5_video/#\u5982\u4f55\u5de5\u4f5c","text":"\u5982\u9700\u5728 HTML5 \u4e2d\u663e\u793a\u89c6\u9891\uff0c\u60a8\u6240\u6709\u9700\u8981\u7684\u662f\uff1a 1 2 <video src=\"movie.ogg\" controls=\"controls\"> </video> controls \u5c5e\u6027\u4f9b\u6dfb\u52a0\u64ad\u653e\u3001\u6682\u505c\u548c\u97f3\u91cf\u63a7\u4ef6\u3002 \u5305\u542b\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u5c5e\u6027\u4e5f\u662f\u4e0d\u9519\u7684\u4e3b\u610f\u3002 \u4e0e \u4e4b\u95f4\u63d2\u5165\u7684\u5185\u5bb9\u662f\u4f9b\u4e0d\u652f\u6301 video \u5143\u7d20\u7684\u6d4f\u89c8\u5668\u663e\u793a\u7684\uff1a","title":"\u5982\u4f55\u5de5\u4f5c"},{"location":"pages/html5/html_5_video/#\u5b9e\u4f8b","text":"1 2 3 <video src=\"movie.ogg\" width=\"320\" height=\"240\" controls=\"controls\"> Your browser does not support the video tag. </video> \u4e0a\u9762\u7684\u4f8b\u5b50\u4f7f\u7528\u4e00\u4e2a Ogg \u6587\u4ef6\uff0c\u9002\u7528\u4e8eFirefox\u3001Opera \u4ee5\u53ca Chrome \u6d4f\u89c8\u5668\u3002 \u8981\u786e\u4fdd\u9002\u7528\u4e8e Safari \u6d4f\u89c8\u5668\uff0c\u89c6\u9891\u6587\u4ef6\u5fc5\u987b\u662f MPEG4 \u7c7b\u578b\u3002 video \u5143\u7d20\u5141\u8bb8\u591a\u4e2a source \u5143\u7d20\u3002source \u5143\u7d20\u53ef\u4ee5\u94fe\u63a5\u4e0d\u540c\u7684\u89c6\u9891\u6587\u4ef6\u3002\u6d4f\u89c8\u5668\u5c06\u4f7f\u7528\u7b2c\u4e00\u4e2a\u53ef\u8bc6\u522b\u7684\u683c\u5f0f\uff1a","title":"\u5b9e\u4f8b"},{"location":"pages/html5/html_5_video/#\u5b9e\u4f8b_1","text":"1 2 3 4 5 <video width=\"320\" height=\"240\" controls=\"controls\"> <source src=\"movie.ogg\" type=\"video/ogg\"> <source src=\"movie.mp4\" type=\"video/mp4\"> Your browser does not support the video tag. </video>","title":"\u5b9e\u4f8b"},{"location":"pages/html5/html_5_webworkers/","text":"HTML 5 Web Workers \u00b6 web worker \u662f\u8fd0\u884c\u5728\u540e\u53f0\u7684 JavaScript\uff0c\u4e0d\u4f1a\u5f71\u54cd\u9875\u9762\u7684\u6027\u80fd\u3002 \u4ec0\u4e48\u662f Web Worker\uff1f \u00b6 \u5f53\u5728 HTML \u9875\u9762\u4e2d\u6267\u884c\u811a\u672c\u65f6\uff0c\u9875\u9762\u7684\u72b6\u6001\u662f\u4e0d\u53ef\u54cd\u5e94\u7684\uff0c\u76f4\u5230\u811a\u672c\u5df2\u5b8c\u6210\u3002 web worker \u662f\u8fd0\u884c\u5728\u540e\u53f0\u7684 JavaScript\uff0c\u72ec\u7acb\u4e8e\u5176\u4ed6\u811a\u672c\uff0c\u4e0d\u4f1a\u5f71\u54cd\u9875\u9762\u7684\u6027\u80fd\u3002\u60a8\u53ef\u4ee5\u7ee7\u7eed\u505a\u4efb\u4f55\u613f\u610f\u505a\u7684\u4e8b\u60c5\uff1a\u70b9\u51fb\u3001\u9009\u53d6\u5185\u5bb9\u7b49\u7b49\uff0c\u800c\u6b64\u65f6 web worker \u5728\u540e\u53f0\u8fd0\u884c\u3002 \u6d4f\u89c8\u5668\u652f\u6301 \u00b6 \u6240\u6709\u4e3b\u6d41\u6d4f\u89c8\u5668\u5747\u652f\u6301 web worker\uff0c\u9664\u4e86 Internet Explorer\u3002 \u68c0\u6d4b Web Worker \u652f\u6301 \u00b6 \u5728\u521b\u5efa web worker \u4e4b\u524d\uff0c\u8bf7\u68c0\u6d4b\u7528\u6237\u7684\u6d4f\u89c8\u5668\u662f\u5426\u652f\u6301\u5b83\uff1a 1 2 3 4 5 6 7 8 9 if(typeof(Worker)!==\"undefined\") { // Yes! Web worker support! // Some code..... } else { // Sorry! No Web Worker support.. } \u521b\u5efa web worker \u6587\u4ef6 \u00b6 \u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u5728\u4e00\u4e2a\u5916\u90e8 JavaScript \u4e2d\u521b\u5efa\u6211\u4eec\u7684 web worker\u3002 \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u8ba1\u6570\u811a\u672c\u3002\u8be5\u811a\u672c\u5b58\u50a8\u4e8e \"demo_workers.js\" \u6587\u4ef6\u4e2d\uff1a 1 2 3 4 5 6 7 8 9 10 var i=0; function timedCount() { i=i+1; postMessage(i); setTimeout(\"timedCount()\",500); } timedCount(); \u4ee5\u4e0a\u4ee3\u7801\u4e2d\u91cd\u8981\u7684\u90e8\u5206\u662f postMessage() \u65b9\u6cd5 - \u5b83\u7528\u4e8e\u5411 HTML \u9875\u9762\u4f20\u56de\u4e00\u6bb5\u6d88\u606f\u3002 \u6ce8\u91ca\uff1aweb worker \u901a\u5e38\u4e0d\u7528\u4e8e\u5982\u6b64\u7b80\u5355\u7684\u811a\u672c\uff0c\u800c\u662f\u7528\u4e8e\u66f4\u8017\u8d39 CPU \u8d44\u6e90\u7684\u4efb\u52a1\u3002 \u521b\u5efa Web Worker \u5bf9\u8c61 \u00b6 \u6211\u4eec\u5df2\u7ecf\u6709\u4e86 web worker \u6587\u4ef6\uff0c\u73b0\u5728\u6211\u4eec\u9700\u8981\u4ece HTML \u9875\u9762\u8c03\u7528\u5b83\u3002 \u4e0b\u9762\u7684\u4ee3\u7801\u68c0\u6d4b\u662f\u5426\u5b58\u5728 worker\uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c- \u5b83\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 web worker \u5bf9\u8c61\uff0c\u7136\u540e\u8fd0\u884c \"demo_workers.js\" \u4e2d\u7684\u4ee3\u7801\uff1a 1 2 3 4 if(typeof(w)==\"undefined\") { w=new Worker(\"demo_workers.js\"); } \u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u4ece web worker \u53d1\u751f\u548c\u63a5\u6536\u6d88\u606f\u4e86\u3002 \u5411 web worker \u6dfb\u52a0\u4e00\u4e2a \"onmessage\" \u4e8b\u4ef6\u76d1\u542c\u5668\uff1a 1 2 3 w.onmessage=function(event){ document.getElementById(\"result\").innerHTML=event.data; }; \u5f53 web worker \u4f20\u9012\u6d88\u606f\u65f6\uff0c\u4f1a\u6267\u884c\u4e8b\u4ef6\u76d1\u542c\u5668\u4e2d\u7684\u4ee3\u7801\u3002event.data \u4e2d\u5b58\u6709\u6765\u81ea event.data \u7684\u6570\u636e\u3002 \u7ec8\u6b62 Web Worker \u00b6 \u5f53\u6211\u4eec\u521b\u5efa web worker \u5bf9\u8c61\u540e\uff0c\u5b83\u4f1a\u7ee7\u7eed\u76d1\u542c\u6d88\u606f\uff08\u5373\u4f7f\u5728\u5916\u90e8\u811a\u672c\u5b8c\u6210\u4e4b\u540e\uff09\u76f4\u5230\u5176\u88ab\u7ec8\u6b62\u4e3a\u6b62\u3002 \u5982\u9700\u7ec8\u6b62 web worker\uff0c\u5e76\u91ca\u653e\u6d4f\u89c8\u5668/\u8ba1\u7b97\u673a\u8d44\u6e90\uff0c\u8bf7\u4f7f\u7528 terminate() \u65b9\u6cd5\uff1a 1 w.terminate(); \u5b8c\u6574\u7684 Web Worker \u5b9e\u4f8b\u4ee3\u7801 \u00b6 \u6211\u4eec\u5df2\u7ecf\u770b\u5230\u4e86 .js \u6587\u4ef6\u4e2d\u7684 Worker \u4ee3\u7801\u3002\u4e0b\u9762\u662f HTML \u9875\u9762\u7684\u4ee3\u7801\uff1a \u5b9e\u4f8b \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 <!DOCTYPE html> <html> <body> <p>Count numbers: <output id=\"result\"></output></p> <button onclick=\"startWorker()\">Start Worker</button> <button onclick=\"stopWorker()\">Stop Worker</button> <br /><br /> <script> var w; function startWorker() { if(typeof(Worker)!==\"undefined\") { if(typeof(w)==\"undefined\") { w=new Worker(\"demo_workers.js\"); } w.onmessage = function (event) { document.getElementById(\"result\").innerHTML=event.data; }; } else { document.getElementById(\"result\").innerHTML=\"Sorry, your browser does not support Web Workers...\"; } } function stopWorker() { w.terminate(); } </script> </body> </html> Web Workers \u548c DOM \u00b6 \u7531\u4e8e web worker \u4f4d\u4e8e\u5916\u90e8\u6587\u4ef6\u4e2d\uff0c\u5b83\u4eec\u65e0\u6cd5\u8bbf\u95ee\u4e0b\u4f8b JavaScript \u5bf9\u8c61\uff1a window \u5bf9\u8c61 document \u5bf9\u8c61 parent \u5bf9\u8c61","title":"HTML5 Worker"},{"location":"pages/html5/html_5_webworkers/#HTML-5-Web-Workers","text":"web worker \u662f\u8fd0\u884c\u5728\u540e\u53f0\u7684 JavaScript\uff0c\u4e0d\u4f1a\u5f71\u54cd\u9875\u9762\u7684\u6027\u80fd\u3002","title":"HTML 5 Web Workers"},{"location":"pages/html5/html_5_webworkers/#\u4ec0\u4e48\u662f-Web-Worker","text":"\u5f53\u5728 HTML \u9875\u9762\u4e2d\u6267\u884c\u811a\u672c\u65f6\uff0c\u9875\u9762\u7684\u72b6\u6001\u662f\u4e0d\u53ef\u54cd\u5e94\u7684\uff0c\u76f4\u5230\u811a\u672c\u5df2\u5b8c\u6210\u3002 web worker \u662f\u8fd0\u884c\u5728\u540e\u53f0\u7684 JavaScript\uff0c\u72ec\u7acb\u4e8e\u5176\u4ed6\u811a\u672c\uff0c\u4e0d\u4f1a\u5f71\u54cd\u9875\u9762\u7684\u6027\u80fd\u3002\u60a8\u53ef\u4ee5\u7ee7\u7eed\u505a\u4efb\u4f55\u613f\u610f\u505a\u7684\u4e8b\u60c5\uff1a\u70b9\u51fb\u3001\u9009\u53d6\u5185\u5bb9\u7b49\u7b49\uff0c\u800c\u6b64\u65f6 web worker \u5728\u540e\u53f0\u8fd0\u884c\u3002","title":"\u4ec0\u4e48\u662f Web Worker\uff1f"},{"location":"pages/html5/html_5_webworkers/#\u6d4f\u89c8\u5668\u652f\u6301","text":"\u6240\u6709\u4e3b\u6d41\u6d4f\u89c8\u5668\u5747\u652f\u6301 web worker\uff0c\u9664\u4e86 Internet Explorer\u3002","title":"\u6d4f\u89c8\u5668\u652f\u6301"},{"location":"pages/html5/html_5_webworkers/#\u68c0\u6d4b-Web-Worker-\u652f\u6301","text":"\u5728\u521b\u5efa web worker \u4e4b\u524d\uff0c\u8bf7\u68c0\u6d4b\u7528\u6237\u7684\u6d4f\u89c8\u5668\u662f\u5426\u652f\u6301\u5b83\uff1a 1 2 3 4 5 6 7 8 9 if(typeof(Worker)!==\"undefined\") { // Yes! Web worker support! // Some code..... } else { // Sorry! No Web Worker support.. }","title":"\u68c0\u6d4b Web Worker \u652f\u6301"},{"location":"pages/html5/html_5_webworkers/#\u521b\u5efa-web-worker-\u6587\u4ef6","text":"\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u5728\u4e00\u4e2a\u5916\u90e8 JavaScript \u4e2d\u521b\u5efa\u6211\u4eec\u7684 web worker\u3002 \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u8ba1\u6570\u811a\u672c\u3002\u8be5\u811a\u672c\u5b58\u50a8\u4e8e \"demo_workers.js\" \u6587\u4ef6\u4e2d\uff1a 1 2 3 4 5 6 7 8 9 10 var i=0; function timedCount() { i=i+1; postMessage(i); setTimeout(\"timedCount()\",500); } timedCount(); \u4ee5\u4e0a\u4ee3\u7801\u4e2d\u91cd\u8981\u7684\u90e8\u5206\u662f postMessage() \u65b9\u6cd5 - \u5b83\u7528\u4e8e\u5411 HTML \u9875\u9762\u4f20\u56de\u4e00\u6bb5\u6d88\u606f\u3002 \u6ce8\u91ca\uff1aweb worker \u901a\u5e38\u4e0d\u7528\u4e8e\u5982\u6b64\u7b80\u5355\u7684\u811a\u672c\uff0c\u800c\u662f\u7528\u4e8e\u66f4\u8017\u8d39 CPU \u8d44\u6e90\u7684\u4efb\u52a1\u3002","title":"\u521b\u5efa web worker \u6587\u4ef6"},{"location":"pages/html5/html_5_webworkers/#\u521b\u5efa-Web-Worker-\u5bf9\u8c61","text":"\u6211\u4eec\u5df2\u7ecf\u6709\u4e86 web worker \u6587\u4ef6\uff0c\u73b0\u5728\u6211\u4eec\u9700\u8981\u4ece HTML \u9875\u9762\u8c03\u7528\u5b83\u3002 \u4e0b\u9762\u7684\u4ee3\u7801\u68c0\u6d4b\u662f\u5426\u5b58\u5728 worker\uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c- \u5b83\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 web worker \u5bf9\u8c61\uff0c\u7136\u540e\u8fd0\u884c \"demo_workers.js\" \u4e2d\u7684\u4ee3\u7801\uff1a 1 2 3 4 if(typeof(w)==\"undefined\") { w=new Worker(\"demo_workers.js\"); } \u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u4ece web worker \u53d1\u751f\u548c\u63a5\u6536\u6d88\u606f\u4e86\u3002 \u5411 web worker \u6dfb\u52a0\u4e00\u4e2a \"onmessage\" \u4e8b\u4ef6\u76d1\u542c\u5668\uff1a 1 2 3 w.onmessage=function(event){ document.getElementById(\"result\").innerHTML=event.data; }; \u5f53 web worker \u4f20\u9012\u6d88\u606f\u65f6\uff0c\u4f1a\u6267\u884c\u4e8b\u4ef6\u76d1\u542c\u5668\u4e2d\u7684\u4ee3\u7801\u3002event.data \u4e2d\u5b58\u6709\u6765\u81ea event.data \u7684\u6570\u636e\u3002","title":"\u521b\u5efa Web Worker \u5bf9\u8c61"},{"location":"pages/html5/html_5_webworkers/#\u7ec8\u6b62-Web-Worker","text":"\u5f53\u6211\u4eec\u521b\u5efa web worker \u5bf9\u8c61\u540e\uff0c\u5b83\u4f1a\u7ee7\u7eed\u76d1\u542c\u6d88\u606f\uff08\u5373\u4f7f\u5728\u5916\u90e8\u811a\u672c\u5b8c\u6210\u4e4b\u540e\uff09\u76f4\u5230\u5176\u88ab\u7ec8\u6b62\u4e3a\u6b62\u3002 \u5982\u9700\u7ec8\u6b62 web worker\uff0c\u5e76\u91ca\u653e\u6d4f\u89c8\u5668/\u8ba1\u7b97\u673a\u8d44\u6e90\uff0c\u8bf7\u4f7f\u7528 terminate() \u65b9\u6cd5\uff1a 1 w.terminate();","title":"\u7ec8\u6b62 Web Worker"},{"location":"pages/html5/html_5_webworkers/#\u5b8c\u6574\u7684-Web-Worker-\u5b9e\u4f8b\u4ee3\u7801","text":"\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u4e86 .js \u6587\u4ef6\u4e2d\u7684 Worker \u4ee3\u7801\u3002\u4e0b\u9762\u662f HTML \u9875\u9762\u7684\u4ee3\u7801\uff1a","title":"\u5b8c\u6574\u7684 Web Worker \u5b9e\u4f8b\u4ee3\u7801"},{"location":"pages/html5/html_5_webworkers/#\u5b9e\u4f8b","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 <!DOCTYPE html> <html> <body> <p>Count numbers: <output id=\"result\"></output></p> <button onclick=\"startWorker()\">Start Worker</button> <button onclick=\"stopWorker()\">Stop Worker</button> <br /><br /> <script> var w; function startWorker() { if(typeof(Worker)!==\"undefined\") { if(typeof(w)==\"undefined\") { w=new Worker(\"demo_workers.js\"); } w.onmessage = function (event) { document.getElementById(\"result\").innerHTML=event.data; }; } else { document.getElementById(\"result\").innerHTML=\"Sorry, your browser does not support Web Workers...\"; } } function stopWorker() { w.terminate(); } </script> </body> </html>","title":"\u5b9e\u4f8b"},{"location":"pages/html5/html_5_webworkers/#Web-Workers-\u548c-DOM","text":"\u7531\u4e8e web worker \u4f4d\u4e8e\u5916\u90e8\u6587\u4ef6\u4e2d\uff0c\u5b83\u4eec\u65e0\u6cd5\u8bbf\u95ee\u4e0b\u4f8b JavaScript \u5bf9\u8c61\uff1a window \u5bf9\u8c61 document \u5bf9\u8c61 parent \u5bf9\u8c61","title":"Web Workers \u548c DOM"},{"location":"pages/nlp/nlp/","text":"Abstract \u81ea\u7136\u8bed\u8a00\u5904\u7406\uff08NLP\uff09\u662f\u8ba1\u7b97\u673a\u79d1\u5b66\uff0c\u4eba\u5de5\u667a\u80fd\uff0c\u8bed\u8a00\u5b66\u5173\u6ce8\u8ba1\u7b97\u673a\u548c\u4eba\u7c7b\uff08\u81ea\u7136\uff09\u8bed\u8a00\u4e4b\u95f4\u7684\u76f8\u4e92\u4f5c\u7528\u7684\u9886\u57df, \u6b64\u9886\u57df\u63a2\u8ba8\u5982\u4f55\u5904\u7406\u53ca\u8fd0\u7528\u81ea\u7136\u8bed\u8a00\uff1b\u81ea\u7136\u8bed\u8a00\u5904\u7406\u5305\u62ec\u591a\u65b9\u9762\u548c\u6b65\u9aa4\uff0c\u57fa\u672c\u6709\u8ba4\u77e5\u3001\u7406\u89e3\u3001\u751f\u6210\u7b49\u90e8\u5206\u3002\u81ea\u7136\u8bed\u8a00\u8ba4\u77e5\u548c\u7406\u89e3\u662f\u8ba9\u7535\u8111\u628a\u8f93\u5165\u7684\u8bed\u8a00\u53d8\u6210\u6709\u610f\u601d\u7684\u7b26\u53f7\u548c\u5173\u7cfb\uff0c\u7136\u540e\u6839\u636e\u76ee\u7684\u518d\u5904\u7406\u3002\u81ea\u7136\u8bed\u8a00\u751f\u6210\u7cfb\u7edf\u5219\u662f\u628a\u8ba1\u7b97\u673a\u6570\u636e\u8f6c\u5316\u4e3a\u81ea\u7136\u8bed\u8a00\u3002 \u4e3b\u8981\u8303\u7574 1 2 3 4 5 6 7 8 9 \u6587\u6863\u5206\u7c7b (Document classification) \u6587\u672c\u5206\u7c7b\uff08Text categorization\uff09 \u5b9e\u4f53\u8bc6\u522b\uff08Named entity recognition, NER\uff09 \u60c5\u611f\u5206\u6790\uff08Sentiment analysis\uff09 \u81ea\u52a8\u6458\u8981\uff08Automatic summarization\uff09 \u4fe1\u606f\u62bd\u53d6\uff08Information extraction\uff09 \u8bed\u4e49\u5206\u6790\uff08Semantic analysis\uff09 \u81ea\u7136\u8bed\u8a00\u7406\u89e3 (Natural Language Understanding) \u81ea\u7136\u8bed\u8a00\u751f\u6210\uff08Natural language generation\uff09 \u6559\u7a0b\u8d44\u6599 \u00b6 NLP \u65b0\u624b\u4e0a\u8def NLP HanNLP \u8bcd\u5178\u5206\u8bcd \u8bc4\u4ef7\u6307\u6807\uff1a\u51c6\u786e\u7387(Precision)\u3001\u53ec\u56de\u7387(Recall)\u3001F\u503c(F-Measure) \u5982\u4f55\u505a\u597d\u6587\u672c\u5173\u952e\u8bcd\u63d0\u53d6\uff1f\u4ece\u4e09\u79cd\u7b97\u6cd5\u8bf4\u8d77 \u5982\u4f55\u7528Python\u4ece\u6d77\u91cf\u6587\u672c\u62bd\u53d6\u4e3b\u9898\uff1f nlp\u5e38\u7528\u5de5\u5177\u96c6 NLP pattern\u5e93 hands on \u57fa\u4e8e\u9884\u8bad\u7ec3\u6a21\u578b\u7684\u6587\u672c\u6458\u8981 Serverless \u5b9e\u6218\uff1a\u5982\u4f55\u7ed3\u5408 NLP \u5b9e\u73b0\u6587\u672c\u6458\u8981\u548c\u5173\u952e\u8bcd\u63d0\u53d6? \u81ea\u7136\u8bed\u8a00\u5904\u7406\u5de5\u5177\u5305\u4e4bNLTK\u521d\u6b65 \u57fa\u4e8espaCy \u89c4\u5219\u63d0\u53d6\uff0c\u641c\u7d22\u5f15\u64ce\u5982\u4f55\u68c0\u7d22\u7ed3\u679c\uff1aPython\u548cspaCy\u4fe1\u606f\u63d0\u53d6\u7b80\u4ecb bert-extractive-summarizer \u4e2d\u6587\u6587\u7ae0\u7684\u62bd\u53d6\u5f0f\u6458\u8981 \u7406\u89e3NLP\u4e2d\u7684CNN\u5377\u79ef\u795e\u7ecf\u7f51\u7edc \u4f9d\u5b58\u5206\u6790\u4e0e\u4f9d\u5b58\u6811 dependency parse \u5173\u952e\u8bcd\u4e0e\u6587\u7ae0\u76f8\u5173\u6027, \u5173\u952e\u8bcd\u81ea\u52a8\u6807\u6ce8\u4e0e\u63d0\u53d6 \u4f7f\u7528Python\u548cGoogle NLP API\u8fdb\u884c\u7f51\u7ad9\u5206\u7c7b \u4f7f\u7528 AI \u81ea\u52a8\u6267\u884c Web \u722c\u7f51","title":"\u81ea\u7136\u8bed\u8a00\u5904\u7406"},{"location":"pages/nlp/nlp/#\u6559\u7a0b\u8d44\u6599","text":"NLP \u65b0\u624b\u4e0a\u8def NLP HanNLP \u8bcd\u5178\u5206\u8bcd \u8bc4\u4ef7\u6307\u6807\uff1a\u51c6\u786e\u7387(Precision)\u3001\u53ec\u56de\u7387(Recall)\u3001F\u503c(F-Measure) \u5982\u4f55\u505a\u597d\u6587\u672c\u5173\u952e\u8bcd\u63d0\u53d6\uff1f\u4ece\u4e09\u79cd\u7b97\u6cd5\u8bf4\u8d77 \u5982\u4f55\u7528Python\u4ece\u6d77\u91cf\u6587\u672c\u62bd\u53d6\u4e3b\u9898\uff1f nlp\u5e38\u7528\u5de5\u5177\u96c6 NLP pattern\u5e93 hands on \u57fa\u4e8e\u9884\u8bad\u7ec3\u6a21\u578b\u7684\u6587\u672c\u6458\u8981 Serverless \u5b9e\u6218\uff1a\u5982\u4f55\u7ed3\u5408 NLP \u5b9e\u73b0\u6587\u672c\u6458\u8981\u548c\u5173\u952e\u8bcd\u63d0\u53d6? \u81ea\u7136\u8bed\u8a00\u5904\u7406\u5de5\u5177\u5305\u4e4bNLTK\u521d\u6b65 \u57fa\u4e8espaCy \u89c4\u5219\u63d0\u53d6\uff0c\u641c\u7d22\u5f15\u64ce\u5982\u4f55\u68c0\u7d22\u7ed3\u679c\uff1aPython\u548cspaCy\u4fe1\u606f\u63d0\u53d6\u7b80\u4ecb bert-extractive-summarizer \u4e2d\u6587\u6587\u7ae0\u7684\u62bd\u53d6\u5f0f\u6458\u8981 \u7406\u89e3NLP\u4e2d\u7684CNN\u5377\u79ef\u795e\u7ecf\u7f51\u7edc \u4f9d\u5b58\u5206\u6790\u4e0e\u4f9d\u5b58\u6811 dependency parse \u5173\u952e\u8bcd\u4e0e\u6587\u7ae0\u76f8\u5173\u6027, \u5173\u952e\u8bcd\u81ea\u52a8\u6807\u6ce8\u4e0e\u63d0\u53d6 \u4f7f\u7528Python\u548cGoogle NLP API\u8fdb\u884c\u7f51\u7ad9\u5206\u7c7b \u4f7f\u7528 AI \u81ea\u52a8\u6267\u884c Web \u722c\u7f51","title":"\u6559\u7a0b\u8d44\u6599"},{"location":"pages/nlp/nlpinfo/automated-web-crawling/","text":"\u4f7f\u7528 AI \u81ea\u52a8\u6267\u884c Web \u722c\u7f51 \u00b6 \u7f16\u5199\u722c\u7f51\u7a0b\u5e8f\u4ece\u7f51\u7ad9\u4e2d\u63d0\u53d6\u6570\u636e\u4f3c\u4e4e\u662f\u4e00\u4e2a\u68d8\u624b\u7684\u95ee\u9898\u3002\u95ee\u9898\u662f\uff0c\u867d\u7136\u6784\u5efa\u4e00\u6b21\u6027\u722c\u7f51\u7a0b\u5e8f\u5f88\u5bb9\u6613\uff0c\u4f46\u8de8\u7f51\u7ad9\u901a\u7528\u7684\u7f16\u5199\u7cfb\u7edf\u5e76\u4e0d\u5bb9\u6613\uff0c\u56e0\u4e3a\u7f51\u7ad9\u901a\u5e38\u5177\u6709\u72ec\u7279\u7684\u57fa\u672c\u6a21\u5f0f\u3002\u66f4\u91cd\u8981\u7684\u662f\uff0c\u7f51\u7ad9\u7ed3\u6784\u4f1a\u968f\u7740\u65f6\u95f4\u800c\u53d8\u5316\uff0c\u56e0\u6b64\u8fd9\u4e9b\u7cfb\u7edf\u5fc5\u987b\u5f3a\u5927\u624d\u80fd\u6539\u53d8\u3002 \u5728\u673a\u5668\u5b66\u4e60\u65f6\u4ee3\uff0c\u662f\u5426\u6709\u66f4\u667a\u80fd\u3001\u66f4\u514d\u63d0\u7684\u722c\u884c\u65b9\u5f0f\uff1f\u8fd9\u662f\u4e00\u4e2a\u6211\u4eec\u591a\u5e74\u6765\u4e00\u76f4\u5728\u56de\u907f\u7684\u76ee\u6807\uff0c\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u6211\u4eec\u5728\u4e3a\u7279\u5b9a\u9886\u57df\uff08\u7535\u5b50\u5546\u52a1\uff09\u8fdb\u884c\u81ea\u52a8\u53ef\u6982\u62ec\u722c\u7f51\u65b9\u9762\u53d6\u5f97\u4e86\u4e0d\u9519\u7684\u8fdb\u5c55\u3002\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u60f3\u63cf\u8ff0\u6211\u4eec\u6784\u5efa\u7684\u7cfb\u7edf\u53ca\u5176\u80cc\u540e\u7684\u7b97\u6cd5;\u8fd9\u9879\u5de5\u4f5c\u662f\u6211\u4eec\u56e2\u961f\u6700\u8fd1\u63d0\u4ea4\u7684\u4e13\u5229\u7533\u8bf7\u7684\u4e3b\u9898\u3002 The goal of our automated crawling project \u6211\u4eec\u5728\u6b64\u9879\u76ee\u4e2d\u7684\u76ee\u6807\u662f\u63d0\u53d6\u7535\u5b50\u5546\u52a1\u7f51\u7ad9\u7684\u5168\u90e8\u76ee\u5f55\uff0c\u53ea\u63d0\u4f9b\u5176\u4e3b\u9875\u7f51\u5740\uff08\u89c1\u4e0a\u56fe\uff09\u3002\u8fd9\u6d89\u53ca\u4e09\u4e2a\u5173\u952e\u6311\u6218\u3002 \u6311\u6218#1\u6311\u6218 \u2013 \u8bc6\u522b\u4ea7\u54c1 URL \u00b6 \u9875\u9762\u7c7b\u578b \u00b6 \u7f51\u7ad9\u5305\u542b\u5404\u79cd\u9875\u9762\uff0c\u56e0\u6b64\u5728\u5f00\u59cb\u65f6\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u7cfb\u7edf\u6765\u5c06\u6709\u7528\u7684\u9875\u9762\u4e0e\u5176\u4f59\u9875\u9762\u5206\u5f00\u3002 \u5728\u7535\u5b50\u5546\u52a1\u65b9\u9762\uff0c\u7f51\u7ad9\u6709\uff1a \u7c7b\u522b\u7740\u9646\u9875\uff08\u4f8b\u5982\u5973\u88c5\u7740\u9646\u9875\uff09 \u54c1\u724c\u7279\u5b9a\u9875\u9762\uff08\u4f8b\u5982\u8010\u514b\u4ea7\u54c1\u9875\u9762\uff09 \u4ea4\u6613\u7279\u5b9a\u9875\u9762\uff08\u6298\u6263\u548c\u4f18\u60e0\uff09 \u5356\u5bb6\u4fe1\u606f\u9875\u9762\uff08\u5173\u4e8e\u9500\u552e\u4ea7\u54c1\u7684\u4e1a\u52a1\uff0c\u5728\u5e02\u573a\u7684\u60c5\u51b5\u4e0b\uff09 \u67e5\u770b\u9875\u9762\u548c\u8bba\u575b\uff08\u5ba2\u6237\u751f\u6210\u7684\u5185\u5bb9\uff09 \u4ea7\u54c1\u9875\u9762\uff08\u63cf\u8ff0\u7279\u5b9a\u4ea7\u54c1\u5e76\u5141\u8bb8\u60a8\u8d2d\u4e70\uff09 ...\u548c\u66f4\u591a\u3002\u7531\u4e8e\u6211\u4eec\u7684\u76ee\u6807\u662f\u6355\u83b7\u4ea7\u54c1\u8be6\u7ec6\u4fe1\u606f\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u53ea\u9009\u62e9\u9694\u79bb\u4ea7\u54c1\u9875\u9762\u3002\u5176\u4ed6\u9875\u9762\u4e0d\u4f7f\u7528\uff0c\u9664\u4e86\u53d1\u73b0\u4ea7\u54c1\u9875\u9762\u3002 Challenge #1 \u2014 Identifying product URLs Sample product page \u76d1\u7763\u5206\u7c7b\uff1f \u00b6 \u6211\u4eec\u5904\u7406\u8fd9\u4e2a\u95ee\u9898\u7684\u6700\u521d\u65b9\u6cd5\u662f\u5c06\u5b83\u754c\u5b9a\u4e3a\u53d7\u76d1\u7763\u7684\u591a\u7c7b\u5206\u7c7b\u95ee\u9898\uff0c\u6bcf\u4e2a\u9875\u9762\u7684 HTML \u548c\u5c4f\u5e55\u622a\u56fe\u90fd\u901a\u8fc7\u5206\u7c7b\u5668\u53d1\u9001\u3002 Supervised classification approach to identifying product URLs, both visually and using HTML (features) \u4f46\u662f\uff0c\u6b64\u65b9\u6cd5\u7684\u7684\u95ee\u9898\u662f\uff0c\u5b83\u8981\u6c42\u6211\u4eec\u9996\u5148\u5bf9 URL \u8fdb\u884c\u722c\u7f51\uff0c\u4ee5\u4fbf\u5bf9\u5b83\u4eec\u8fdb\u884c\u5206\u7c7b\u3002\u6d6a\u8d39\u7684\u722c\u7f51\u662f\u8d44\u6e90\u6548\u7387\u4f4e\u4e0b\u3002\u4e3a\u4e86\u51cf\u5c11\u4e00\u6b21\u6027\u722c\u7f51\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u7cfb\u7edf\uff0c\u53ef\u4ee5\u53ea\u4f7f\u7528\u7f51\u9875\u7684URL\u505a\u51fa\u51b3\u5b9a\u3002 \u8f93\u5165\u3001URL \u7fa4\u96c6 \u00b6 URL \u805a\u7c7b\u7684\u76ee\u7684\u662f\u6839\u636e\u5b57\u7b26\u4e32\u6a21\u5f0f\u5c06 URL \u5212\u5206\u4e3a\u7ec4\u3002 Clustering URLs into groups \u8fd9\u6837\u505a\u7684\u7b2c\u4e00\u6b65\u662f\u6309\u8def\u5f84\u548c\u67e5\u8be2\u5b57\u7b26\u4e32\u62c6\u5206 URL\uff0c\u5e76\u8ba1\u7b97\u6bcf\u4e2a\u7ec4\u4ef6\u7ec4\u7684\u6392\u540d\u3002 Identify number of URL parameters \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c1d\u8bd5\u4f7f\u7528\u4e00\u7ec4\u5168\u9762\u7684\u9884\u5b9a\u4e49\u8ff7\u4f60\u6b63\u5219\u8868\u8fbe\u5f0f\u6765\u8868\u793a\u6bcf\u4e2a\u7ec4\u4ef6\u3002 Find a mini-regex for each parameter \u6700\u540e\uff0c\u6211\u4eec\u5c06\u6bcf\u4e2a URL \u5206\u89e3\u4e3a\u4e00\u4e2a\u6811\uff0c\u7279\u5b9a\u4e8e\u5176\u8def\u5f84\u6392\u540d - \u67e5\u8be2\u5b57\u7b26\u4e32\u6392\u540d\u7ec4\u5408\uff0c\u5982\u4e0a\u6240\u793a\u3002 Create a URL tree for each rank-pair (URL #1) \u8fd9\u662f\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5176\u4e2d\u6bcf\u4e2a\u8282\u70b9\u62c6\u5206\u4e3a\u4e24\u4e2a\u5b50\u8282\u70b9\uff0c\u4e00\u4e2a\u8868\u793a URL \u7ec4\u4ef6\u7684\u7279\u5b9a\u6587\u672c\uff0c\u53e6\u4e00\u4e2a\u8868\u793a\u901a\u7528\u7684\u8ff7\u4f60\u6b63\u5219\u8868\u8fbe\u5f0f\u3002\u5728\u6bcf\u4e2a\u53f6\u8282\u70b9\u4e0a\uff0c\u6211\u4eec\u8bb0\u4e0b\u4e24\u4e2a\u6570\u5b57 \u2014 \u5206\u89e3\u4e3a\u8be5\u53f6\u8282\u70b9\u7684 URL \u6570\u548c\u8be5\u8def\u5f84\u4e2d\u4f7f\u7528\u7684\u901a\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u6a21\u5f0f\u6570\u7684\u8ba1\u6570\u3002 \u8ba9\u6211\u4eec\u901a\u8fc7\u4e0a\u9762\u7684\u540c\u4e00\u6811\u8fd0\u884c\u53e6\u4e00\u4e2a URL\uff0c\u5e76\u67e5\u770b\u5b83\u662f\u5982\u4f55\u66f4\u6539\u7684\u3002 Create a URL tree for each rank-pair (URL #2) \u8bf7\u6ce8\u610f\u91cd\u53e0\u6811\u8def\u5f84\u7684\u9891\u7387\u8ba1\u6570\u5668\u5982\u4f55\u968f\u7740\u7b2c\u4e8c\u4e2a URL \u7684\u8fdb\u5165\u800c\u53d1\u751f\u53d8\u5316\u3002 \u4e3a\u4e86\u786e\u5b9a URL \u7684\u4ee3\u8868\u6027\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u6211\u4eec\u9009\u62e9\u53f6\u9891\u7387\u6700\u9ad8\u7684\u8def\u5f84\uff0c\u5176\u6b63\u5219\u8868\u8fbe\u5f0f\u6cdb\u5316\u7a0b\u5ea6\u6700\u9ad8\u3002\u8fd9\u5141\u8bb8\u6211\u4eec\u5206\u7ec4 URL\uff0c\u5982\u4e0a\u6240\u793a \u2013 \u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u4ee3\u8868\u6027\u6b63\u5219\u8868\u8fbe\u5f0f\u662f acme.com/forum?sid=([^\\]+) \u3002 \u6807\u8bb0\u7ec4 \u00b6 \u6211\u4eec\u5feb\u5230\u4e86\u73b0\u5728\uff0c\u6211\u4eec\u5df2\u5c06 URL \u5212\u5206\u4e3a\u591a\u4e2a\u7ec4\uff0c\u6211\u4eec\u5982\u4f55\u786e\u5b9a\u54ea\u4e2a\u7ec4\u8868\u793a\u4ea7\u54c1 URL\uff1f\u5f53\u7136\uff0c\u6211\u4eec\u4f7f\u7528\u4e0a\u9762\u6240\u793a\u7684\u76d1\u7763\u5206\u7c7b\u65b9\u6cd5\uff01 \u4e0d\u8fc7\uff0c\u8fd9\u4e00\u6b21\uff0c\u7531\u4e8e\u6211\u4eec\u9700\u8981\u6807\u8bb0\u7ec4\u800c\u4e0d\u662f\u6bcf\u4e2a\u5355\u72ec\u7684 URL\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4ece\u6bcf\u4e2a\u7ec4\u4e2d\u91c7\u6837\u4e00\u4e9b URL \u5e76\u77a7\uff0c\u6211\u4eec\u7684\u53ef\u4f38\u7f29\u6027\u6311\u6218\u662f\u53ef\u4ee5\u514b\u670d\u7684\u3002 \u4fa7\u8fb9\u680f\uff1a\u8fd9\u79cd\u57fa\u4e8e\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u65b9\u6cd5\u8fd8\u5141\u8bb8\u6211\u4eec\u89c4\u8303\u5316 URL\uff0c\u5373\u91cd\u590d\u590d\u5236\u6709\u6548\u6307\u5411\u540c\u4e00\u7f51\u9875\u7684\u4e0d\u540c URL \u8868\u5355\u3002\u8fd9\u662f\u56e0\u4e3a URL \u7fa4\u96c6\u4e2d\u7684\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u7ec4\u901a\u5e38\u6307\u5411\u4ea7\u54c1\u7684\u552f\u4e00 Web SKU ID\u3002 \u6311\u6218#2 \u2013 \u91c7\u77ff\u4ea7\u54c1 URL \u00b6 \u8718\u86db\u8fc7\u8f7d \u00b6 \u73b0\u5728\uff0c\u6211\u4eec\u77e5\u9053\u8981\u67e5\u627e\u4ec0\u4e48\uff0c\u6211\u4eec\u9700\u8981\u627e\u51fa\u5982\u4f55\u627e\u5230\u5c3d\u53ef\u80fd\u591a\u7684\u4ea7\u54c1 URL\u3002 \u8fd9\u6837\u505a\u7684\u660e\u663e\u65b9\u5f0f\u662f\u8bbf\u95ee\u4e3b\u9875\uff0c\u6536\u96c6\u5b83\u5bfc\u81f4\u7684\u6240\u6709 URL\uff0c\u53cd\u8fc7\u6765\u8bbf\u95ee\u6bcf\u4e2a URL\uff0c\u7136\u540e\u91cd\u590d\u3002 Spidering explosion \u4f46\u662f\uff0c\u6b64\u65b9\u6cd5\u7684\u6b64\u95ee\u9898\u662f\u6536\u96c6\u7684 URL \u6570\u91cf\u5728\u51e0\u4e2a\u7ea7\u522b\u7684\u8718\u86db\u4e2d\u7206\u70b8\u3002\u4ece\u6210\u672c\u548c\u65f6\u95f4\u7684\u89d2\u5ea6\u6765\u770b\uff0c \u6293\u53d6\u8fd9\u4e9b\u8718\u86db URL \u7684\u6bcf\u4e00\u4e2a\u90fd\u4ee4\u4eba\u671b\u800c\u5374\u6b65\u3002\u662f\u5426\u6709\u66f4\u667a\u80fd\u7684\u65b9\u6cd5\uff1f \u4eba\u4f1a\u505a\u4ec0\u4e48\uff1f \u00b6 \u5982\u679c\u5b9e\u4e60\u751f\u8d1f\u8d23\u6316\u6398\u4ea7\u54c1 URL\uff0c\u4ed6/\u5979\u5982\u4f55\u5904\u7406\uff1f\u4e00\u79cd\u7b56\u7565\u662f\u67e5\u627e\u7c7b\u522b\u5217\u8868\u9875\u9762\u3002 Category listing pages \u7136\u540e\u7cfb\u7edf\u5730\u7a7f\u8fc7\u53bb\u3002 Pagination elements \u6709\u4e9b\u7b56\u7565\u4f1a\u6bd4\u53e6\u4e00\u4e9b\u7b56\u7565\u66f4\u7406\u60f3\u3002\u4f8b\u5982\uff0c\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u4ece\u4ea7\u54c1 URL \u9875\u9762\u8bbf\u95ee\u63a8\u8350\u7684\u7c7b\u4f3c\u4ea7\u54c1\u4e0d\u592a\u53ef\u80fd\u7cfb\u7edf\u5730\u6700\u5927\u5316\u53d1\u73b0\u7684 URL \u6570\u91cf\u3002 Product recommendation pages usually offer diminishing returns \u6211\u4eec\u5982\u4f55\u56f4\u7ed5\u53d1\u73b0\u7b56\u7565\u548c\u8bc4\u4f30\u7b56\u7565\u6765\u9a8c\u8bc1\u8fd9\u79cd\u76f4\u89c9\uff0c \u4ee5\u7b97\u6cd5\u7684\u5f62\u5f0f\u8fdb\u884c\uff1f \u8ba9\u6211\u4eec\u6765\u6e38\u620f\u5316\u6211\u4eec\u7684\u6311\u6218 \u00b6 Multi-armed bandits to the fore \u6211\u4eec\u53ef\u4ee5\u5c06\u95ee\u9898\u8bbe\u7f6e\u4e3a\u6e38\u620f\uff0c\u5176\u673a\u5236\u5b9a\u4e49\u5982\u4e0b\uff1a \u9009\u62e9\uff1a \u6bcf\u4e2a\u62c9\u53d6\u90fd\u662f\u8981\u722c\u7f51\u7684 URL\uff08\u7fa4\u96c6\uff09\u7684\u9009\u62e9\u3002 \u64cd\u4f5c \uff1a\u6bcf\u6b21\u8f6c\u65f6\uff0c\u4ee3\u7406\u9009\u62e9\u4ece\u4e2d\u722c\u7f51\u91c7\u6837 URL \u7684 URL \u7fa4\u96c6\u3002 \u5956\u52b1 \uff1a\u5956\u52b1\u53d1\u73b0\u7684\u6bcf\u4e2a\u72ec\u7279\u7684\u4ea7\u54c1 URL\u3002 \u6210\u672c \uff1a\u6bcf\u4e2a\u52a8\u4f5c/\u722c\u7f51\u90fd\u4f1a\u7d2f\u79ef\u56fa\u5b9a\u7684\u8d1f\u5956\u52b1;\u8fd9\u4f1a\u60e9\u7f5a\u4ee3\u7406\u89e6\u53d1\u8fc7\u591a\u7684\u65e0\u679c\u722c\u53d6\u3002 \u72b6\u6001 \uff1a\u8ddf\u8e2a\u5df2\u53d1\u73b0\u54ea\u4e9b URL\u3001\u8bbf\u95ee\u4e86\u54ea\u4e9b URL \u4ee5\u53ca\u6bcf\u4e2a\u7fa4\u96c6\u7d2f\u79ef\u7684\u5956\u52b1\u79ef\u5206\u6570\u3002 \u4ece\u8fd9\u91cc\uff0c\u5373\u4f7f\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u57c3\u666e\u897f\u9686-\u8d2a\u5a6a\u7b56\u7565\u4e5f\u6709\u6548\u5de5\u4f5c\uff1a \u521d\u59cb\u63a2\u7d22 \uff1a\u4ee3\u7406\u968f\u673a\u91c7\u6837\u6765\u81ea\u6bcf\u4e2a\u7fa4\u96c6\u7684 k URL\u3002 \u5229\u7528 \uff1a\u7a33\u5b9a\u72b6\u6001\uff0c\u5177\u6709\u6700\u9ad8\u652f\u4ed8\u7387\u7684\u7fa4\u96c6\u9009\u62e9 1-e% \u7684\u65f6\u95f4\u3002 \u968f\u673a\u63a2\u7d22 \uff1ae%\u7684\u65f6\u95f4\uff0c\u968f\u673a\u96c6\u7fa4\u88ab\u9009\u4e2d\u3002 \u5728\u90a3\u91cc\uff0c\u6211\u4eec\u6709\u5b83\u3002\u7ed3\u5408\u6211\u4eec\u8bc6\u522b\u4ea7\u54c1 URL \u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u73b0\u5728\u6709\u529e\u6cd5\u751f\u6210\u4ea7\u54c1 URL\uff0c\u53ea\u9700\u63d0\u4f9b\u7535\u5b50\u5546\u52a1\u57df\u7684\u4e3b\u9875\u3002 One step to go \u6311\u6218#3 \u2013 \u4ece\u4ea7\u54c1 URL \u4e2d\u63d0\u53d6\u5185\u5bb9 \u00b6 \u6700\u7ec8\u8001\u677f \u00b6 \u6700\u540e\uff0c\u6211\u4eec\u9762\u4e34\u4ece\u4ea7\u54c1 URL \u4e2d\u63d0\u53d6\u7ed3\u6784\u5316\u5c5e\u6027\u7684\u6311\u6218\uff0c\u8fd9\u662f Web \u722c\u7f51\u6700\u96be\u7684\u90e8\u5206\u3002 Challenge #3 \u2014 Content extraction from product URLs \u57fa\u7ebf\u83b7\u80dc \u00b6 \u6211\u4eec\u4f7f\u7528\u5143\u6807\u8bb0\u6620\u5c04\u548c DOM \u6811\u89c4\u5219\u5728\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\u5b9e\u73b0\u5feb\u901f\u80dc\u5229 - \u4e00\u7ec4\u6709\u6548\u7684\u542f\u53d1\u5f0f\u65b9\u6cd5\u7684\u57fa\u7ebf\u5728\u89e3\u51b3\u95ee\u9898\u65b9\u9762\u5927\u6709\u4f5c\u4e3a\u3002\u7136\u800c\uff0c\u5982\u679c\u8fd9\u4e9b\u89c4\u5219\u4e0d\u80fd\u63d0\u4f9b\u8db3\u591f\u7684\u53ec\u56de\uff0c\u6211\u4eec\u8f6c\u5411\u5143\u7d20\u5206\u7c7b\u3002 \u8f93\u5165\u529f\u80fd \u00b6 \u6211\u4eec\u7684\u65b9\u6cd5\u662f\u6784\u5efa\u6df1\u5ea6\u5b66\u4e60\u5206\u7c7b\u5668\uff0c\u5c06 HTML \u5143\u7d20\u6807\u8bb0\u5230\u7279\u5b9a\u5df2\u77e5\u5c5e\u6027\u5217\u8868\u4e2d\u3002 \u6211\u4eec\u901a\u8fc7\u65e0\u5934 Chrome \u4f1a\u8bdd\u5448\u73b0\u7f51\u9875\uff0c\u5e76\u4ece\u7f51\u9875\u4e2d\u68c0\u7d22\u5173\u952e\u5143\u7d20\uff0c\u4ee5\u53ca\u4ee5\u4e0b\u529f\u80fd\uff1a HTML \u529f\u80fd\uff1a\u4f8b\u5982\uff0c\u6807\u7b7e\u7c7b\u578b\u3001\u5b57\u4f53\u5927\u5c0f\u3001\u5b57\u4f53\u91cd\u91cf \u89c6\u89c9\u7279\u5f81 \uff1a\u4f8b\u5982\u989c\u8272\u3001\u5bbd\u5ea6\u3001\u9ad8\u5ea6\u3001\u9762\u79ef \u6587\u672c \u529f\u80fd\uff1a\u4f8b\u5982\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u3001\u6570\u636e\u7c7b\u578b \u4f4d\u7f6e\u7279\u5f81 \uff1a\u8fb9\u754c\u6846\u7684 x-y \u5750\u6807 \u7136\u540e\uff0c\u5177\u6709\u76f8\u4f3c\u5750\u6807\u548c\u5c5e\u6027\u7684\u5143\u7d20\u5408\u5e76\u5728\u4e00\u8d77\u3002\u6b64\u7ec4\u786e\u4fdd\u4ec5\u5c06\u9875\u9762\u4e0a\u53ef\u80fd\u8868\u793a\u6211\u4eec\u6b63\u5728\u5bfb\u627e\u7684\u4fe1\u606f\u79cd\u7c7b\u7684\u72ec\u7279\u5143\u7d20\u53d1\u9001\u5230\u4e0b\u4e00\u9636\u6bb5\u3002 \u5206\u7c7b\u5668 \u00b6 \u6536\u96c6\u6b64\u6570\u636e\u540e\uff0c\u8f93\u5165\u5c06\u4e0e\u5176\u4ed6\u53ef\u7528\u7684\u591a\u6a21\u5f0f\u6570\u636e\uff08\u5982\u5143\u7d20\u6216\u6587\u672c\u5b57\u7b26\u7684\u76f8\u5173\u5c4f\u5e55\u622a\u56fe\uff09\u4e00\u8d77\u8f93\u5165\u5206\u7c7b\u5668\u3002 HTML Element Classifier \u8f93\u51fa\u7c7b\u7b26\u5408\u4e00\u7ec4\u53ef\u80fd\u5b57\u6bb5\u7684\u6807\u51c6\u7ec4\uff0c\u5982\u540d\u79f0\u3001\u9762\u5305\u5c51\u3001\u4ef7\u683c\u3001\u56fe\u50cf\u3001\u89c4\u683c\u3001\u63cf\u8ff0\u7b49\u3002 \u60a8\u95ee\uff0c\u6211\u4eec\u5982\u4f55\u5904\u7406\u65b0\u5b57\u6bb5\uff08\u5373\u7279\u5b9a\u4e8e\u7c7b\u522b\u7684\u5b57\u6bb5\uff08\u5982\u5c4f\u5e55\u5927\u5c0f\u6216 RAM \u5185\u5b58\uff09\u7684\u9700\u8981\uff1f\u5927\u591a\u6570\u7535\u5b50\u5546\u52a1\u7f51\u7ad9\u4ee3\u8868\u7f51\u9875\u4f1e\u90e8\u5206\u4e0b\u7684\u6b64\u7c7b\u5b57\u6bb5\uff0c\u5982\u89c4\u683c\u6216\u8bf4\u660e\u3002\u6211\u4eec\u7684\u65b9\u6cd5\u662f\u6355\u83b7\u6240\u6709\u6b64\u7c7b\u4fe1\u606f\uff0c\u5982\u975e\u7ed3\u6784\u5316\u6587\u672c\u6216\u952e\u503c\u5bf9\uff0c\u7136\u540e\u901a\u8fc7\u6211\u4eec\u7684\u6587\u672c\u5c5e\u6027\u63d0\u53d6\u7ba1\u9053\u8fd0\u884c\u5b83\uff0c\u8fd9\u662f\u4e00\u4e2a\u4e0d\u540c\u8ba8\u8bba\u7684\u4e3b\u9898\u3002 \u5173\u4e8e\u529f\u80fd\u7684\u5b57 \u00b6 \u8bf7\u6ce8\u610f\uff0c\u5728\u6a21\u578b\u7684\u8f93\u5165\u8981\u7d20\u5217\u8868\u4e2d\uff0c\u6211\u4eec\u5e76\u6ca1\u6709\u663e\u8457\u5f3a\u8c03\u5143\u7d20\u4e2d\u7684\u6587\u672c\u5b57\u7b26\u6216\u56fe\u50cf\u50cf\u7d20;\u5373\u4f7f\u6ca1\u6709\u8fd9\u4e9b\u5173\u952e\u4fe1\u53f7\uff0c\u4e5f\u53ea\u9700\u4f7f\u7528\u5143\u6570\u636e\u529f\u80fd\uff0c\u901a\u5e38\u4e5f\u80fd\u591f\u81ea\u4fe1\u5730\u9884\u6d4b\u7279\u5b9a\u5143\u7d20\u6307\u7684\u662f\u4ec0\u4e48\u3002 \u4f8b\u5982\uff0c\u8003\u8651\u5982\u4e0b\u56fe\u6240\u793a\u7684\u65e5\u672c\u7535\u5b50\u5546\u52a1\u7f51\u7ad9\u7684\u5c4f\u5e55\u622a\u56fe\uff0c \u5373\u4f7f\u5bf9\u4e8e\u4e0d\u61c2\u65e5\u8bed\u7684\u89c2\u5bdf\u8005\u6765\u8bf4\uff0c \u5c06\u9875\u9762\u7684\u7ec6\u5206\u6620\u5c04\u5230\u901a\u5e38\u7406\u89e3\u7684\u5c5e\u6027\u4e5f\u4e0d\u96be\u3002\u8fd9\u662f\u56e0\u4e3a\u7535\u5b50\u5546\u52a1\u7f51\u7ad9\u5f80\u5f80\u7b26\u5408\u8bbe\u8ba1\u6a21\u5f0f\u7684\u89c4\u8303\u3002 Content extraction demo on Japanese website \u2014 note the extracted fields and boxes drawn \u8fd9\u9002\u7528\u4e8e\u963f\u62c9\u4f2f\u8bed\u7f51\u7ad9\uff0c\u5373\u4f7f\u6587\u672c\u662f\u53f3\u5230\u5de6\u9762\u5411\u3002 Content extraction demo on Arabic website (right to left oriented) \u2014 note the extracted fields and boxes drawn \u53d8\u5316\u5462\uff1f \u00b6 \u8fd9\u91cc\u662f\u5b83\u53d8\u5f97\u975e\u5e38\u68d8\u624b\u7684\u5730\u65b9\u3002\u7535\u5b50\u5546\u52a1\u4ea7\u54c1\u901a\u5e38\u5177\u6709\u53d8\u4f53\u9009\u9879\uff08\u8003\u8651\u989c\u8272\u548c\u5927\u5c0f\uff09 \u2013 \u63d0\u53d6\u6b64\u7c7b\u4fe1\u606f\u9700\u8981\u4e0e\u7f51\u9875\u8fdb\u884c\u4ea4\u4e92\uff0c\u5e76\u5728\u76f8\u5173\u60c5\u51b5\u4e0b\u8bc6\u522b\u5d4c\u5957\u6a21\u5f0f\u548c\u7ec4\u5408\u3002 Variation palette #1 Variation palette #2 \u6211\u4eec\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u6d89\u53ca\u4e24\u4e2a\u6b65\u9aa4\u3002\u9996\u5148\uff0c\u6211\u4eec\u4f7f\u7528\u4e8c\u8fdb\u5236\u5206\u7c7b\u5668\u786e\u5b9a\u54ea\u4e9b\u5143\u7d20\u5177\u6709\u53d8\u4f53\u9009\u9879\u3002 Detect variation elements using binary classifiers \u7136\u540e\uff0c\u5728\u65e0\u5934 Chrome \u4f1a\u8bdd\u4e0a\u4f7f\u7528 Puppeteer\uff0c\u6211\u4eec\u7cfb\u7edf\u5730\u70b9\u51fb\u5e76\u6355\u83b7\u6bcf\u4e2a\u53d8\u4f53\u7ec4\u5408\u7684\u72b6\u6001\u548c\u529f\u80fd\u6346\u7ed1\u5305\u3002 \u6700\u540e\uff0c\u6bcf\u4e2a\u529f\u80fd\u7ec4\u5408\u90fd\u901a\u8fc7\u6211\u4eec\u4e4b\u524d\u8ba8\u8bba\u7684\u5143\u7d20\u5206\u7c7b\u7cfb\u7edf\u8fd0\u884c\uff0c\u4ee5\u5728\u6bcf\u4e2a\u53d8\u4f53\u751f\u6210\u4e00\u4e2a\u8f93\u51fa\u4ea7\u54c1\u96c6\u3002 Content extraction classifiers run on every variation combination \u56e0\u6b64\uff0c\u6211\u4eec\u80fd\u591f\u4f7f\u7528\u5b8c\u5168\u81ea\u52a8\u5316\u7684\u65b9\u6cd5\u4ece\u7535\u5b50\u5546\u52a1\u7f51\u7ad9\u751f\u6210\u76ee\u5f55\u3002 \u5728\u5b9e\u8df5\u4e2d\uff0c\u7531\u4e8e\u5927\u591a\u6570\u722c\u7f51\u9879\u76ee\u7684\u76ee\u6807\u662f\u5c3d\u53ef\u80fd\u63a5\u8fd1\u5b8c\u7f8e\u7684\u7cbe\u5ea6\u548c\u53ec\u56de\uff0c\u56e0\u6b64\u8fd9\u4e9b\u4e0d\u53d7\u76d1\u7763\u7684\u65b9\u6cd5\u4e0e\u4eba\u4e0e\u73af\u7684\u65b9\u6cd5\u7ed3\u5408\u4f7f\u7528\u3002\u8fd9\u4e9b\u7b97\u6cd5\u8865\u5145\u4e86\u6211\u4eec\u5927\u89c4\u6a21\u6784\u5efa\u89e3\u6790\u5668\u548c\u8718\u86db\u7684\u64cd\u4f5c\u5de5\u4f5c\uff0c\u5e76\u5206\u5c42\u4e86\u5185\u90e8 DSL\uff08\u57df\u7279\u5b9a\u8bed\u8a00\uff09\u4e2d\u7684\u8f93\u5165\uff0c\u4ee5\u5b9e\u73b0\u6700\u4f73\u7684\u4e1a\u52a1\u7ed3\u679c\u3002 \u539f\u6587\u7ffb\u8bd1\u81ea\u7f51\u6587\uff0c\u4f5c\u8005: \u539f\u6587: https://www.semantics3.com/blog/ai-for-automated-web-crawling/","title":"\u4f7f\u7528 AI \u81ea\u52a8\u6267\u884c Web \u722c\u7f51"},{"location":"pages/nlp/nlpinfo/automated-web-crawling/#\u4f7f\u7528-AI-\u81ea\u52a8\u6267\u884c-Web-\u722c\u7f51","text":"\u7f16\u5199\u722c\u7f51\u7a0b\u5e8f\u4ece\u7f51\u7ad9\u4e2d\u63d0\u53d6\u6570\u636e\u4f3c\u4e4e\u662f\u4e00\u4e2a\u68d8\u624b\u7684\u95ee\u9898\u3002\u95ee\u9898\u662f\uff0c\u867d\u7136\u6784\u5efa\u4e00\u6b21\u6027\u722c\u7f51\u7a0b\u5e8f\u5f88\u5bb9\u6613\uff0c\u4f46\u8de8\u7f51\u7ad9\u901a\u7528\u7684\u7f16\u5199\u7cfb\u7edf\u5e76\u4e0d\u5bb9\u6613\uff0c\u56e0\u4e3a\u7f51\u7ad9\u901a\u5e38\u5177\u6709\u72ec\u7279\u7684\u57fa\u672c\u6a21\u5f0f\u3002\u66f4\u91cd\u8981\u7684\u662f\uff0c\u7f51\u7ad9\u7ed3\u6784\u4f1a\u968f\u7740\u65f6\u95f4\u800c\u53d8\u5316\uff0c\u56e0\u6b64\u8fd9\u4e9b\u7cfb\u7edf\u5fc5\u987b\u5f3a\u5927\u624d\u80fd\u6539\u53d8\u3002 \u5728\u673a\u5668\u5b66\u4e60\u65f6\u4ee3\uff0c\u662f\u5426\u6709\u66f4\u667a\u80fd\u3001\u66f4\u514d\u63d0\u7684\u722c\u884c\u65b9\u5f0f\uff1f\u8fd9\u662f\u4e00\u4e2a\u6211\u4eec\u591a\u5e74\u6765\u4e00\u76f4\u5728\u56de\u907f\u7684\u76ee\u6807\uff0c\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u6211\u4eec\u5728\u4e3a\u7279\u5b9a\u9886\u57df\uff08\u7535\u5b50\u5546\u52a1\uff09\u8fdb\u884c\u81ea\u52a8\u53ef\u6982\u62ec\u722c\u7f51\u65b9\u9762\u53d6\u5f97\u4e86\u4e0d\u9519\u7684\u8fdb\u5c55\u3002\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u60f3\u63cf\u8ff0\u6211\u4eec\u6784\u5efa\u7684\u7cfb\u7edf\u53ca\u5176\u80cc\u540e\u7684\u7b97\u6cd5;\u8fd9\u9879\u5de5\u4f5c\u662f\u6211\u4eec\u56e2\u961f\u6700\u8fd1\u63d0\u4ea4\u7684\u4e13\u5229\u7533\u8bf7\u7684\u4e3b\u9898\u3002 The goal of our automated crawling project \u6211\u4eec\u5728\u6b64\u9879\u76ee\u4e2d\u7684\u76ee\u6807\u662f\u63d0\u53d6\u7535\u5b50\u5546\u52a1\u7f51\u7ad9\u7684\u5168\u90e8\u76ee\u5f55\uff0c\u53ea\u63d0\u4f9b\u5176\u4e3b\u9875\u7f51\u5740\uff08\u89c1\u4e0a\u56fe\uff09\u3002\u8fd9\u6d89\u53ca\u4e09\u4e2a\u5173\u952e\u6311\u6218\u3002","title":"\u4f7f\u7528 AI \u81ea\u52a8\u6267\u884c Web \u722c\u7f51"},{"location":"pages/nlp/nlpinfo/automated-web-crawling/#\u6311\u62181\u6311\u6218--\u8bc6\u522b\u4ea7\u54c1-URL","text":"","title":"\u6311\u6218#1\u6311\u6218 \u2013 \u8bc6\u522b\u4ea7\u54c1 URL"},{"location":"pages/nlp/nlpinfo/automated-web-crawling/#\u9875\u9762\u7c7b\u578b","text":"\u7f51\u7ad9\u5305\u542b\u5404\u79cd\u9875\u9762\uff0c\u56e0\u6b64\u5728\u5f00\u59cb\u65f6\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u7cfb\u7edf\u6765\u5c06\u6709\u7528\u7684\u9875\u9762\u4e0e\u5176\u4f59\u9875\u9762\u5206\u5f00\u3002 \u5728\u7535\u5b50\u5546\u52a1\u65b9\u9762\uff0c\u7f51\u7ad9\u6709\uff1a \u7c7b\u522b\u7740\u9646\u9875\uff08\u4f8b\u5982\u5973\u88c5\u7740\u9646\u9875\uff09 \u54c1\u724c\u7279\u5b9a\u9875\u9762\uff08\u4f8b\u5982\u8010\u514b\u4ea7\u54c1\u9875\u9762\uff09 \u4ea4\u6613\u7279\u5b9a\u9875\u9762\uff08\u6298\u6263\u548c\u4f18\u60e0\uff09 \u5356\u5bb6\u4fe1\u606f\u9875\u9762\uff08\u5173\u4e8e\u9500\u552e\u4ea7\u54c1\u7684\u4e1a\u52a1\uff0c\u5728\u5e02\u573a\u7684\u60c5\u51b5\u4e0b\uff09 \u67e5\u770b\u9875\u9762\u548c\u8bba\u575b\uff08\u5ba2\u6237\u751f\u6210\u7684\u5185\u5bb9\uff09 \u4ea7\u54c1\u9875\u9762\uff08\u63cf\u8ff0\u7279\u5b9a\u4ea7\u54c1\u5e76\u5141\u8bb8\u60a8\u8d2d\u4e70\uff09 ...\u548c\u66f4\u591a\u3002\u7531\u4e8e\u6211\u4eec\u7684\u76ee\u6807\u662f\u6355\u83b7\u4ea7\u54c1\u8be6\u7ec6\u4fe1\u606f\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u53ea\u9009\u62e9\u9694\u79bb\u4ea7\u54c1\u9875\u9762\u3002\u5176\u4ed6\u9875\u9762\u4e0d\u4f7f\u7528\uff0c\u9664\u4e86\u53d1\u73b0\u4ea7\u54c1\u9875\u9762\u3002 Challenge #1 \u2014 Identifying product URLs Sample product page","title":"\u9875\u9762\u7c7b\u578b"},{"location":"pages/nlp/nlpinfo/automated-web-crawling/#\u76d1\u7763\u5206\u7c7b","text":"\u6211\u4eec\u5904\u7406\u8fd9\u4e2a\u95ee\u9898\u7684\u6700\u521d\u65b9\u6cd5\u662f\u5c06\u5b83\u754c\u5b9a\u4e3a\u53d7\u76d1\u7763\u7684\u591a\u7c7b\u5206\u7c7b\u95ee\u9898\uff0c\u6bcf\u4e2a\u9875\u9762\u7684 HTML \u548c\u5c4f\u5e55\u622a\u56fe\u90fd\u901a\u8fc7\u5206\u7c7b\u5668\u53d1\u9001\u3002 Supervised classification approach to identifying product URLs, both visually and using HTML (features) \u4f46\u662f\uff0c\u6b64\u65b9\u6cd5\u7684\u7684\u95ee\u9898\u662f\uff0c\u5b83\u8981\u6c42\u6211\u4eec\u9996\u5148\u5bf9 URL \u8fdb\u884c\u722c\u7f51\uff0c\u4ee5\u4fbf\u5bf9\u5b83\u4eec\u8fdb\u884c\u5206\u7c7b\u3002\u6d6a\u8d39\u7684\u722c\u7f51\u662f\u8d44\u6e90\u6548\u7387\u4f4e\u4e0b\u3002\u4e3a\u4e86\u51cf\u5c11\u4e00\u6b21\u6027\u722c\u7f51\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u7cfb\u7edf\uff0c\u53ef\u4ee5\u53ea\u4f7f\u7528\u7f51\u9875\u7684URL\u505a\u51fa\u51b3\u5b9a\u3002","title":"\u76d1\u7763\u5206\u7c7b\uff1f"},{"location":"pages/nlp/nlpinfo/automated-web-crawling/#\u8f93\u5165URL-\u7fa4\u96c6","text":"URL \u805a\u7c7b\u7684\u76ee\u7684\u662f\u6839\u636e\u5b57\u7b26\u4e32\u6a21\u5f0f\u5c06 URL \u5212\u5206\u4e3a\u7ec4\u3002 Clustering URLs into groups \u8fd9\u6837\u505a\u7684\u7b2c\u4e00\u6b65\u662f\u6309\u8def\u5f84\u548c\u67e5\u8be2\u5b57\u7b26\u4e32\u62c6\u5206 URL\uff0c\u5e76\u8ba1\u7b97\u6bcf\u4e2a\u7ec4\u4ef6\u7ec4\u7684\u6392\u540d\u3002 Identify number of URL parameters \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c1d\u8bd5\u4f7f\u7528\u4e00\u7ec4\u5168\u9762\u7684\u9884\u5b9a\u4e49\u8ff7\u4f60\u6b63\u5219\u8868\u8fbe\u5f0f\u6765\u8868\u793a\u6bcf\u4e2a\u7ec4\u4ef6\u3002 Find a mini-regex for each parameter \u6700\u540e\uff0c\u6211\u4eec\u5c06\u6bcf\u4e2a URL \u5206\u89e3\u4e3a\u4e00\u4e2a\u6811\uff0c\u7279\u5b9a\u4e8e\u5176\u8def\u5f84\u6392\u540d - \u67e5\u8be2\u5b57\u7b26\u4e32\u6392\u540d\u7ec4\u5408\uff0c\u5982\u4e0a\u6240\u793a\u3002 Create a URL tree for each rank-pair (URL #1) \u8fd9\u662f\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5176\u4e2d\u6bcf\u4e2a\u8282\u70b9\u62c6\u5206\u4e3a\u4e24\u4e2a\u5b50\u8282\u70b9\uff0c\u4e00\u4e2a\u8868\u793a URL \u7ec4\u4ef6\u7684\u7279\u5b9a\u6587\u672c\uff0c\u53e6\u4e00\u4e2a\u8868\u793a\u901a\u7528\u7684\u8ff7\u4f60\u6b63\u5219\u8868\u8fbe\u5f0f\u3002\u5728\u6bcf\u4e2a\u53f6\u8282\u70b9\u4e0a\uff0c\u6211\u4eec\u8bb0\u4e0b\u4e24\u4e2a\u6570\u5b57 \u2014 \u5206\u89e3\u4e3a\u8be5\u53f6\u8282\u70b9\u7684 URL \u6570\u548c\u8be5\u8def\u5f84\u4e2d\u4f7f\u7528\u7684\u901a\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u6a21\u5f0f\u6570\u7684\u8ba1\u6570\u3002 \u8ba9\u6211\u4eec\u901a\u8fc7\u4e0a\u9762\u7684\u540c\u4e00\u6811\u8fd0\u884c\u53e6\u4e00\u4e2a URL\uff0c\u5e76\u67e5\u770b\u5b83\u662f\u5982\u4f55\u66f4\u6539\u7684\u3002 Create a URL tree for each rank-pair (URL #2) \u8bf7\u6ce8\u610f\u91cd\u53e0\u6811\u8def\u5f84\u7684\u9891\u7387\u8ba1\u6570\u5668\u5982\u4f55\u968f\u7740\u7b2c\u4e8c\u4e2a URL \u7684\u8fdb\u5165\u800c\u53d1\u751f\u53d8\u5316\u3002 \u4e3a\u4e86\u786e\u5b9a URL \u7684\u4ee3\u8868\u6027\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u6211\u4eec\u9009\u62e9\u53f6\u9891\u7387\u6700\u9ad8\u7684\u8def\u5f84\uff0c\u5176\u6b63\u5219\u8868\u8fbe\u5f0f\u6cdb\u5316\u7a0b\u5ea6\u6700\u9ad8\u3002\u8fd9\u5141\u8bb8\u6211\u4eec\u5206\u7ec4 URL\uff0c\u5982\u4e0a\u6240\u793a \u2013 \u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u4ee3\u8868\u6027\u6b63\u5219\u8868\u8fbe\u5f0f\u662f acme.com/forum?sid=([^\\]+) \u3002","title":"\u8f93\u5165\u3001URL \u7fa4\u96c6"},{"location":"pages/nlp/nlpinfo/automated-web-crawling/#\u6807\u8bb0\u7ec4","text":"\u6211\u4eec\u5feb\u5230\u4e86\u73b0\u5728\uff0c\u6211\u4eec\u5df2\u5c06 URL \u5212\u5206\u4e3a\u591a\u4e2a\u7ec4\uff0c\u6211\u4eec\u5982\u4f55\u786e\u5b9a\u54ea\u4e2a\u7ec4\u8868\u793a\u4ea7\u54c1 URL\uff1f\u5f53\u7136\uff0c\u6211\u4eec\u4f7f\u7528\u4e0a\u9762\u6240\u793a\u7684\u76d1\u7763\u5206\u7c7b\u65b9\u6cd5\uff01 \u4e0d\u8fc7\uff0c\u8fd9\u4e00\u6b21\uff0c\u7531\u4e8e\u6211\u4eec\u9700\u8981\u6807\u8bb0\u7ec4\u800c\u4e0d\u662f\u6bcf\u4e2a\u5355\u72ec\u7684 URL\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4ece\u6bcf\u4e2a\u7ec4\u4e2d\u91c7\u6837\u4e00\u4e9b URL \u5e76\u77a7\uff0c\u6211\u4eec\u7684\u53ef\u4f38\u7f29\u6027\u6311\u6218\u662f\u53ef\u4ee5\u514b\u670d\u7684\u3002 \u4fa7\u8fb9\u680f\uff1a\u8fd9\u79cd\u57fa\u4e8e\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u65b9\u6cd5\u8fd8\u5141\u8bb8\u6211\u4eec\u89c4\u8303\u5316 URL\uff0c\u5373\u91cd\u590d\u590d\u5236\u6709\u6548\u6307\u5411\u540c\u4e00\u7f51\u9875\u7684\u4e0d\u540c URL \u8868\u5355\u3002\u8fd9\u662f\u56e0\u4e3a URL \u7fa4\u96c6\u4e2d\u7684\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u7ec4\u901a\u5e38\u6307\u5411\u4ea7\u54c1\u7684\u552f\u4e00 Web SKU ID\u3002","title":"\u6807\u8bb0\u7ec4"},{"location":"pages/nlp/nlpinfo/automated-web-crawling/#\u6311\u62182--\u91c7\u77ff\u4ea7\u54c1-URL","text":"","title":"\u6311\u6218#2 \u2013 \u91c7\u77ff\u4ea7\u54c1 URL"},{"location":"pages/nlp/nlpinfo/automated-web-crawling/#\u8718\u86db\u8fc7\u8f7d","text":"\u73b0\u5728\uff0c\u6211\u4eec\u77e5\u9053\u8981\u67e5\u627e\u4ec0\u4e48\uff0c\u6211\u4eec\u9700\u8981\u627e\u51fa\u5982\u4f55\u627e\u5230\u5c3d\u53ef\u80fd\u591a\u7684\u4ea7\u54c1 URL\u3002 \u8fd9\u6837\u505a\u7684\u660e\u663e\u65b9\u5f0f\u662f\u8bbf\u95ee\u4e3b\u9875\uff0c\u6536\u96c6\u5b83\u5bfc\u81f4\u7684\u6240\u6709 URL\uff0c\u53cd\u8fc7\u6765\u8bbf\u95ee\u6bcf\u4e2a URL\uff0c\u7136\u540e\u91cd\u590d\u3002 Spidering explosion \u4f46\u662f\uff0c\u6b64\u65b9\u6cd5\u7684\u6b64\u95ee\u9898\u662f\u6536\u96c6\u7684 URL \u6570\u91cf\u5728\u51e0\u4e2a\u7ea7\u522b\u7684\u8718\u86db\u4e2d\u7206\u70b8\u3002\u4ece\u6210\u672c\u548c\u65f6\u95f4\u7684\u89d2\u5ea6\u6765\u770b\uff0c \u6293\u53d6\u8fd9\u4e9b\u8718\u86db URL \u7684\u6bcf\u4e00\u4e2a\u90fd\u4ee4\u4eba\u671b\u800c\u5374\u6b65\u3002\u662f\u5426\u6709\u66f4\u667a\u80fd\u7684\u65b9\u6cd5\uff1f","title":"\u8718\u86db\u8fc7\u8f7d"},{"location":"pages/nlp/nlpinfo/automated-web-crawling/#\u4eba\u4f1a\u505a\u4ec0\u4e48","text":"\u5982\u679c\u5b9e\u4e60\u751f\u8d1f\u8d23\u6316\u6398\u4ea7\u54c1 URL\uff0c\u4ed6/\u5979\u5982\u4f55\u5904\u7406\uff1f\u4e00\u79cd\u7b56\u7565\u662f\u67e5\u627e\u7c7b\u522b\u5217\u8868\u9875\u9762\u3002 Category listing pages \u7136\u540e\u7cfb\u7edf\u5730\u7a7f\u8fc7\u53bb\u3002 Pagination elements \u6709\u4e9b\u7b56\u7565\u4f1a\u6bd4\u53e6\u4e00\u4e9b\u7b56\u7565\u66f4\u7406\u60f3\u3002\u4f8b\u5982\uff0c\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u4ece\u4ea7\u54c1 URL \u9875\u9762\u8bbf\u95ee\u63a8\u8350\u7684\u7c7b\u4f3c\u4ea7\u54c1\u4e0d\u592a\u53ef\u80fd\u7cfb\u7edf\u5730\u6700\u5927\u5316\u53d1\u73b0\u7684 URL \u6570\u91cf\u3002 Product recommendation pages usually offer diminishing returns \u6211\u4eec\u5982\u4f55\u56f4\u7ed5\u53d1\u73b0\u7b56\u7565\u548c\u8bc4\u4f30\u7b56\u7565\u6765\u9a8c\u8bc1\u8fd9\u79cd\u76f4\u89c9\uff0c \u4ee5\u7b97\u6cd5\u7684\u5f62\u5f0f\u8fdb\u884c\uff1f","title":"\u4eba\u4f1a\u505a\u4ec0\u4e48\uff1f"},{"location":"pages/nlp/nlpinfo/automated-web-crawling/#\u8ba9\u6211\u4eec\u6765\u6e38\u620f\u5316\u6211\u4eec\u7684\u6311\u6218","text":"Multi-armed bandits to the fore \u6211\u4eec\u53ef\u4ee5\u5c06\u95ee\u9898\u8bbe\u7f6e\u4e3a\u6e38\u620f\uff0c\u5176\u673a\u5236\u5b9a\u4e49\u5982\u4e0b\uff1a \u9009\u62e9\uff1a \u6bcf\u4e2a\u62c9\u53d6\u90fd\u662f\u8981\u722c\u7f51\u7684 URL\uff08\u7fa4\u96c6\uff09\u7684\u9009\u62e9\u3002 \u64cd\u4f5c \uff1a\u6bcf\u6b21\u8f6c\u65f6\uff0c\u4ee3\u7406\u9009\u62e9\u4ece\u4e2d\u722c\u7f51\u91c7\u6837 URL \u7684 URL \u7fa4\u96c6\u3002 \u5956\u52b1 \uff1a\u5956\u52b1\u53d1\u73b0\u7684\u6bcf\u4e2a\u72ec\u7279\u7684\u4ea7\u54c1 URL\u3002 \u6210\u672c \uff1a\u6bcf\u4e2a\u52a8\u4f5c/\u722c\u7f51\u90fd\u4f1a\u7d2f\u79ef\u56fa\u5b9a\u7684\u8d1f\u5956\u52b1;\u8fd9\u4f1a\u60e9\u7f5a\u4ee3\u7406\u89e6\u53d1\u8fc7\u591a\u7684\u65e0\u679c\u722c\u53d6\u3002 \u72b6\u6001 \uff1a\u8ddf\u8e2a\u5df2\u53d1\u73b0\u54ea\u4e9b URL\u3001\u8bbf\u95ee\u4e86\u54ea\u4e9b URL \u4ee5\u53ca\u6bcf\u4e2a\u7fa4\u96c6\u7d2f\u79ef\u7684\u5956\u52b1\u79ef\u5206\u6570\u3002 \u4ece\u8fd9\u91cc\uff0c\u5373\u4f7f\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u57c3\u666e\u897f\u9686-\u8d2a\u5a6a\u7b56\u7565\u4e5f\u6709\u6548\u5de5\u4f5c\uff1a \u521d\u59cb\u63a2\u7d22 \uff1a\u4ee3\u7406\u968f\u673a\u91c7\u6837\u6765\u81ea\u6bcf\u4e2a\u7fa4\u96c6\u7684 k URL\u3002 \u5229\u7528 \uff1a\u7a33\u5b9a\u72b6\u6001\uff0c\u5177\u6709\u6700\u9ad8\u652f\u4ed8\u7387\u7684\u7fa4\u96c6\u9009\u62e9 1-e% \u7684\u65f6\u95f4\u3002 \u968f\u673a\u63a2\u7d22 \uff1ae%\u7684\u65f6\u95f4\uff0c\u968f\u673a\u96c6\u7fa4\u88ab\u9009\u4e2d\u3002 \u5728\u90a3\u91cc\uff0c\u6211\u4eec\u6709\u5b83\u3002\u7ed3\u5408\u6211\u4eec\u8bc6\u522b\u4ea7\u54c1 URL \u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u73b0\u5728\u6709\u529e\u6cd5\u751f\u6210\u4ea7\u54c1 URL\uff0c\u53ea\u9700\u63d0\u4f9b\u7535\u5b50\u5546\u52a1\u57df\u7684\u4e3b\u9875\u3002 One step to go","title":"\u8ba9\u6211\u4eec\u6765\u6e38\u620f\u5316\u6211\u4eec\u7684\u6311\u6218"},{"location":"pages/nlp/nlpinfo/automated-web-crawling/#\u6311\u62183--\u4ece\u4ea7\u54c1-URL-\u4e2d\u63d0\u53d6\u5185\u5bb9","text":"","title":"\u6311\u6218#3 \u2013 \u4ece\u4ea7\u54c1 URL \u4e2d\u63d0\u53d6\u5185\u5bb9"},{"location":"pages/nlp/nlpinfo/automated-web-crawling/#\u6700\u7ec8\u8001\u677f","text":"\u6700\u540e\uff0c\u6211\u4eec\u9762\u4e34\u4ece\u4ea7\u54c1 URL \u4e2d\u63d0\u53d6\u7ed3\u6784\u5316\u5c5e\u6027\u7684\u6311\u6218\uff0c\u8fd9\u662f Web \u722c\u7f51\u6700\u96be\u7684\u90e8\u5206\u3002 Challenge #3 \u2014 Content extraction from product URLs","title":"\u6700\u7ec8\u8001\u677f"},{"location":"pages/nlp/nlpinfo/automated-web-crawling/#\u57fa\u7ebf\u83b7\u80dc","text":"\u6211\u4eec\u4f7f\u7528\u5143\u6807\u8bb0\u6620\u5c04\u548c DOM \u6811\u89c4\u5219\u5728\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\u5b9e\u73b0\u5feb\u901f\u80dc\u5229 - \u4e00\u7ec4\u6709\u6548\u7684\u542f\u53d1\u5f0f\u65b9\u6cd5\u7684\u57fa\u7ebf\u5728\u89e3\u51b3\u95ee\u9898\u65b9\u9762\u5927\u6709\u4f5c\u4e3a\u3002\u7136\u800c\uff0c\u5982\u679c\u8fd9\u4e9b\u89c4\u5219\u4e0d\u80fd\u63d0\u4f9b\u8db3\u591f\u7684\u53ec\u56de\uff0c\u6211\u4eec\u8f6c\u5411\u5143\u7d20\u5206\u7c7b\u3002","title":"\u57fa\u7ebf\u83b7\u80dc"},{"location":"pages/nlp/nlpinfo/automated-web-crawling/#\u8f93\u5165\u529f\u80fd","text":"\u6211\u4eec\u7684\u65b9\u6cd5\u662f\u6784\u5efa\u6df1\u5ea6\u5b66\u4e60\u5206\u7c7b\u5668\uff0c\u5c06 HTML \u5143\u7d20\u6807\u8bb0\u5230\u7279\u5b9a\u5df2\u77e5\u5c5e\u6027\u5217\u8868\u4e2d\u3002 \u6211\u4eec\u901a\u8fc7\u65e0\u5934 Chrome \u4f1a\u8bdd\u5448\u73b0\u7f51\u9875\uff0c\u5e76\u4ece\u7f51\u9875\u4e2d\u68c0\u7d22\u5173\u952e\u5143\u7d20\uff0c\u4ee5\u53ca\u4ee5\u4e0b\u529f\u80fd\uff1a HTML \u529f\u80fd\uff1a\u4f8b\u5982\uff0c\u6807\u7b7e\u7c7b\u578b\u3001\u5b57\u4f53\u5927\u5c0f\u3001\u5b57\u4f53\u91cd\u91cf \u89c6\u89c9\u7279\u5f81 \uff1a\u4f8b\u5982\u989c\u8272\u3001\u5bbd\u5ea6\u3001\u9ad8\u5ea6\u3001\u9762\u79ef \u6587\u672c \u529f\u80fd\uff1a\u4f8b\u5982\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u3001\u6570\u636e\u7c7b\u578b \u4f4d\u7f6e\u7279\u5f81 \uff1a\u8fb9\u754c\u6846\u7684 x-y \u5750\u6807 \u7136\u540e\uff0c\u5177\u6709\u76f8\u4f3c\u5750\u6807\u548c\u5c5e\u6027\u7684\u5143\u7d20\u5408\u5e76\u5728\u4e00\u8d77\u3002\u6b64\u7ec4\u786e\u4fdd\u4ec5\u5c06\u9875\u9762\u4e0a\u53ef\u80fd\u8868\u793a\u6211\u4eec\u6b63\u5728\u5bfb\u627e\u7684\u4fe1\u606f\u79cd\u7c7b\u7684\u72ec\u7279\u5143\u7d20\u53d1\u9001\u5230\u4e0b\u4e00\u9636\u6bb5\u3002","title":"\u8f93\u5165\u529f\u80fd"},{"location":"pages/nlp/nlpinfo/automated-web-crawling/#\u5206\u7c7b\u5668","text":"\u6536\u96c6\u6b64\u6570\u636e\u540e\uff0c\u8f93\u5165\u5c06\u4e0e\u5176\u4ed6\u53ef\u7528\u7684\u591a\u6a21\u5f0f\u6570\u636e\uff08\u5982\u5143\u7d20\u6216\u6587\u672c\u5b57\u7b26\u7684\u76f8\u5173\u5c4f\u5e55\u622a\u56fe\uff09\u4e00\u8d77\u8f93\u5165\u5206\u7c7b\u5668\u3002 HTML Element Classifier \u8f93\u51fa\u7c7b\u7b26\u5408\u4e00\u7ec4\u53ef\u80fd\u5b57\u6bb5\u7684\u6807\u51c6\u7ec4\uff0c\u5982\u540d\u79f0\u3001\u9762\u5305\u5c51\u3001\u4ef7\u683c\u3001\u56fe\u50cf\u3001\u89c4\u683c\u3001\u63cf\u8ff0\u7b49\u3002 \u60a8\u95ee\uff0c\u6211\u4eec\u5982\u4f55\u5904\u7406\u65b0\u5b57\u6bb5\uff08\u5373\u7279\u5b9a\u4e8e\u7c7b\u522b\u7684\u5b57\u6bb5\uff08\u5982\u5c4f\u5e55\u5927\u5c0f\u6216 RAM \u5185\u5b58\uff09\u7684\u9700\u8981\uff1f\u5927\u591a\u6570\u7535\u5b50\u5546\u52a1\u7f51\u7ad9\u4ee3\u8868\u7f51\u9875\u4f1e\u90e8\u5206\u4e0b\u7684\u6b64\u7c7b\u5b57\u6bb5\uff0c\u5982\u89c4\u683c\u6216\u8bf4\u660e\u3002\u6211\u4eec\u7684\u65b9\u6cd5\u662f\u6355\u83b7\u6240\u6709\u6b64\u7c7b\u4fe1\u606f\uff0c\u5982\u975e\u7ed3\u6784\u5316\u6587\u672c\u6216\u952e\u503c\u5bf9\uff0c\u7136\u540e\u901a\u8fc7\u6211\u4eec\u7684\u6587\u672c\u5c5e\u6027\u63d0\u53d6\u7ba1\u9053\u8fd0\u884c\u5b83\uff0c\u8fd9\u662f\u4e00\u4e2a\u4e0d\u540c\u8ba8\u8bba\u7684\u4e3b\u9898\u3002","title":"\u5206\u7c7b\u5668"},{"location":"pages/nlp/nlpinfo/automated-web-crawling/#\u5173\u4e8e\u529f\u80fd\u7684\u5b57","text":"\u8bf7\u6ce8\u610f\uff0c\u5728\u6a21\u578b\u7684\u8f93\u5165\u8981\u7d20\u5217\u8868\u4e2d\uff0c\u6211\u4eec\u5e76\u6ca1\u6709\u663e\u8457\u5f3a\u8c03\u5143\u7d20\u4e2d\u7684\u6587\u672c\u5b57\u7b26\u6216\u56fe\u50cf\u50cf\u7d20;\u5373\u4f7f\u6ca1\u6709\u8fd9\u4e9b\u5173\u952e\u4fe1\u53f7\uff0c\u4e5f\u53ea\u9700\u4f7f\u7528\u5143\u6570\u636e\u529f\u80fd\uff0c\u901a\u5e38\u4e5f\u80fd\u591f\u81ea\u4fe1\u5730\u9884\u6d4b\u7279\u5b9a\u5143\u7d20\u6307\u7684\u662f\u4ec0\u4e48\u3002 \u4f8b\u5982\uff0c\u8003\u8651\u5982\u4e0b\u56fe\u6240\u793a\u7684\u65e5\u672c\u7535\u5b50\u5546\u52a1\u7f51\u7ad9\u7684\u5c4f\u5e55\u622a\u56fe\uff0c \u5373\u4f7f\u5bf9\u4e8e\u4e0d\u61c2\u65e5\u8bed\u7684\u89c2\u5bdf\u8005\u6765\u8bf4\uff0c \u5c06\u9875\u9762\u7684\u7ec6\u5206\u6620\u5c04\u5230\u901a\u5e38\u7406\u89e3\u7684\u5c5e\u6027\u4e5f\u4e0d\u96be\u3002\u8fd9\u662f\u56e0\u4e3a\u7535\u5b50\u5546\u52a1\u7f51\u7ad9\u5f80\u5f80\u7b26\u5408\u8bbe\u8ba1\u6a21\u5f0f\u7684\u89c4\u8303\u3002 Content extraction demo on Japanese website \u2014 note the extracted fields and boxes drawn \u8fd9\u9002\u7528\u4e8e\u963f\u62c9\u4f2f\u8bed\u7f51\u7ad9\uff0c\u5373\u4f7f\u6587\u672c\u662f\u53f3\u5230\u5de6\u9762\u5411\u3002 Content extraction demo on Arabic website (right to left oriented) \u2014 note the extracted fields and boxes drawn","title":"\u5173\u4e8e\u529f\u80fd\u7684\u5b57"},{"location":"pages/nlp/nlpinfo/automated-web-crawling/#\u53d8\u5316\u5462","text":"\u8fd9\u91cc\u662f\u5b83\u53d8\u5f97\u975e\u5e38\u68d8\u624b\u7684\u5730\u65b9\u3002\u7535\u5b50\u5546\u52a1\u4ea7\u54c1\u901a\u5e38\u5177\u6709\u53d8\u4f53\u9009\u9879\uff08\u8003\u8651\u989c\u8272\u548c\u5927\u5c0f\uff09 \u2013 \u63d0\u53d6\u6b64\u7c7b\u4fe1\u606f\u9700\u8981\u4e0e\u7f51\u9875\u8fdb\u884c\u4ea4\u4e92\uff0c\u5e76\u5728\u76f8\u5173\u60c5\u51b5\u4e0b\u8bc6\u522b\u5d4c\u5957\u6a21\u5f0f\u548c\u7ec4\u5408\u3002 Variation palette #1 Variation palette #2 \u6211\u4eec\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u6d89\u53ca\u4e24\u4e2a\u6b65\u9aa4\u3002\u9996\u5148\uff0c\u6211\u4eec\u4f7f\u7528\u4e8c\u8fdb\u5236\u5206\u7c7b\u5668\u786e\u5b9a\u54ea\u4e9b\u5143\u7d20\u5177\u6709\u53d8\u4f53\u9009\u9879\u3002 Detect variation elements using binary classifiers \u7136\u540e\uff0c\u5728\u65e0\u5934 Chrome \u4f1a\u8bdd\u4e0a\u4f7f\u7528 Puppeteer\uff0c\u6211\u4eec\u7cfb\u7edf\u5730\u70b9\u51fb\u5e76\u6355\u83b7\u6bcf\u4e2a\u53d8\u4f53\u7ec4\u5408\u7684\u72b6\u6001\u548c\u529f\u80fd\u6346\u7ed1\u5305\u3002 \u6700\u540e\uff0c\u6bcf\u4e2a\u529f\u80fd\u7ec4\u5408\u90fd\u901a\u8fc7\u6211\u4eec\u4e4b\u524d\u8ba8\u8bba\u7684\u5143\u7d20\u5206\u7c7b\u7cfb\u7edf\u8fd0\u884c\uff0c\u4ee5\u5728\u6bcf\u4e2a\u53d8\u4f53\u751f\u6210\u4e00\u4e2a\u8f93\u51fa\u4ea7\u54c1\u96c6\u3002 Content extraction classifiers run on every variation combination \u56e0\u6b64\uff0c\u6211\u4eec\u80fd\u591f\u4f7f\u7528\u5b8c\u5168\u81ea\u52a8\u5316\u7684\u65b9\u6cd5\u4ece\u7535\u5b50\u5546\u52a1\u7f51\u7ad9\u751f\u6210\u76ee\u5f55\u3002 \u5728\u5b9e\u8df5\u4e2d\uff0c\u7531\u4e8e\u5927\u591a\u6570\u722c\u7f51\u9879\u76ee\u7684\u76ee\u6807\u662f\u5c3d\u53ef\u80fd\u63a5\u8fd1\u5b8c\u7f8e\u7684\u7cbe\u5ea6\u548c\u53ec\u56de\uff0c\u56e0\u6b64\u8fd9\u4e9b\u4e0d\u53d7\u76d1\u7763\u7684\u65b9\u6cd5\u4e0e\u4eba\u4e0e\u73af\u7684\u65b9\u6cd5\u7ed3\u5408\u4f7f\u7528\u3002\u8fd9\u4e9b\u7b97\u6cd5\u8865\u5145\u4e86\u6211\u4eec\u5927\u89c4\u6a21\u6784\u5efa\u89e3\u6790\u5668\u548c\u8718\u86db\u7684\u64cd\u4f5c\u5de5\u4f5c\uff0c\u5e76\u5206\u5c42\u4e86\u5185\u90e8 DSL\uff08\u57df\u7279\u5b9a\u8bed\u8a00\uff09\u4e2d\u7684\u8f93\u5165\uff0c\u4ee5\u5b9e\u73b0\u6700\u4f73\u7684\u4e1a\u52a1\u7ed3\u679c\u3002 \u539f\u6587\u7ffb\u8bd1\u81ea\u7f51\u6587\uff0c\u4f5c\u8005: \u539f\u6587: https://www.semantics3.com/blog/ai-for-automated-web-crawling/","title":"\u53d8\u5316\u5462\uff1f"},{"location":"pages/nlp/nlpinfo/bert-text-summarizer-chinese/","text":"\u4e2d\u6587\u6587\u7ae0\u7684\u62bd\u53d6\u5f0f\u6458\u8981\u2014\u4f7f\u7528bert-extractive-summarizer \u00b6 \u8aaa\u660e \u00b6 bert-extractive-summarizer \u662f\u4e00\u500b\u4f7f\u7528 Bert \u52a0\u4e0a Clustering \u9032\u884c\u62bd\u53d6\u5f0f\u6458\u8981\u7684\u6a21\u578b\uff0c\u8a73\u7d30\u539f\u7406\u3001\u5be6\u4f5c\u53ef\u4ee5\u770b\u4f5c\u8005\u7684 Github \u6709\u8ad6\u6587\u9023\u7d50\u3002\u56e0\u70ba\u7bc4\u4f8b\u662f\u82f1\u6587\u7684\uff0c\u7528\u65bc\u4e2d\u6587\u9700\u8981\u7a0d\u4f5c\u4fee\u6539\uff0c\u8f09\u5165\u4e2d\u6587\u7684\u6a21\u578b\u3002 Github : https://github.com/dmmiller612/bert-extractive-summarizer \u5b89\u88dd\u9700\u8981\u7684\u5957\u4ef6 \u00b6 1 2 3 4 5 6 7 8 #\u5b89\u88dd\u9700\u8981\u7684\u5957\u4ef6 pip install bert-extractive-summarizer pip install spacy==2.3.1 pip install transformers pip install neuralcoref #\u4e0b\u8f09\u4e2d\u6587\u7684spacy model python -m spacy download zh_core_web_lg Python \u00b6 \u8f09\u5165\u6a21\u578b \u00b6 \u9019\u88e1\u7684 Pretrained Model \u53ef\u4ee5\u8f38\u5165\u5728 https://huggingface.co \u4e0a\u6709\u7684\u6a21\u578b\u540d\u5b57\uff0c\u6216\u662f\u81ea\u5df1\u8a13\u7df4\u7684\u6a21\u578b\u8def\u5f91\u3002\u9019\u88e1\u4ee5 bert-base-chinese \u7576\u4f5c\u7bc4\u4f8b\uff0c\u53ef\u4ee5\u63db\u6210\u81ea\u5df1\u5e38\u7528\u7684\u6a21\u578b\u3002\u8f09\u5165\u6a21\u578b\u5f8c\u5c31\u53ef\u4ee5\u76f4\u63a5\u9032\u884c\u6458\u8981\u4e86\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 # spaCy \u8f09\u5165\u4e2d\u6587\u6a21\u578b import spacy import zh_core_web_lg import neuralcoref nlp = zh_core_web_lg.load() neuralcoref.add_to_pipe(nlp) # summarizer \u8f09\u5165\u4e2d\u6587\u6a21\u578b from summarizer import Summarizer from summarizer.sentence_handler import SentenceHandler from spacy.lang.zh import Chinese from transformers import * # Load model, model config and tokenizer via Transformers modelName = \"bert-base-chinese\" # \u53ef\u4ee5\u63db\u6210\u81ea\u5df1\u5e38\u7528\u7684 custom_config = AutoConfig.from_pretrained(modelName) custom_config.output_hidden_states=True custom_tokenizer = AutoTokenizer.from_pretrained(modelName) custom_model = AutoModel.from_pretrained(modelName, config=custom_config) model = Summarizer( custom_model=custom_model, custom_tokenizer=custom_tokenizer, sentence_handler = SentenceHandler(language=Chinese) ) \u4f7f\u7528\u6a21\u578b \u00b6 \u6a21\u578b\u8f09\u5165\u5f8c\u5c31\u53ef\u4ee5\u76f4\u63a5\u9032\u884c\u6587\u7ae0\u6458\u8981\uff0cmodel\u53ef\u4ee5\u50b3\u5165\u4e00\u4e9b\u53c3\u6578\uff0c\u5982\u679c\u9700\u8981\u53ef\u4ee5\u76f4\u63a5\u5728Github\u4e0a\u9762\u627e\u3002 1 2 3 4 5 body = \"\u8981\u6458\u8981\u7684\u6587\u7ae0\" result = model(body) full = ''.join(result) print(full) # \u6458\u8981\u51fa\u4f86\u7684\u53e5\u5b50 \u8907\u88fd\u8cbc\u4e0a\u7684\u53c3\u6578\u8aaa\u660e 1 2 3 4 5 6 7 model( body: str # The string body that you want to summarize ratio: float # The ratio of sentences that you want for the final summary min_length: int # Parameter to specify to remove sentences that are less than 40 characters max_length: int # Parameter to specify to remove sentences greater than the max length, num_sentences: Number of sentences to use. Overrides ratio if supplied. )","title":"bert-extractive-summarizer \u4e2d\u6587\u6587\u7ae0\u7684\u62bd\u53d6\u5f0f\u6458\u8981"},{"location":"pages/nlp/nlpinfo/bert-text-summarizer-chinese/#\u4e2d\u6587\u6587\u7ae0\u7684\u62bd\u53d6\u5f0f\u6458\u8981\u4f7f\u7528bert-extractive-summarizer","text":"","title":"\u4e2d\u6587\u6587\u7ae0\u7684\u62bd\u53d6\u5f0f\u6458\u8981\u2014\u4f7f\u7528bert-extractive-summarizer"},{"location":"pages/nlp/nlpinfo/bert-text-summarizer-chinese/#\u8aaa\u660e","text":"bert-extractive-summarizer \u662f\u4e00\u500b\u4f7f\u7528 Bert \u52a0\u4e0a Clustering \u9032\u884c\u62bd\u53d6\u5f0f\u6458\u8981\u7684\u6a21\u578b\uff0c\u8a73\u7d30\u539f\u7406\u3001\u5be6\u4f5c\u53ef\u4ee5\u770b\u4f5c\u8005\u7684 Github \u6709\u8ad6\u6587\u9023\u7d50\u3002\u56e0\u70ba\u7bc4\u4f8b\u662f\u82f1\u6587\u7684\uff0c\u7528\u65bc\u4e2d\u6587\u9700\u8981\u7a0d\u4f5c\u4fee\u6539\uff0c\u8f09\u5165\u4e2d\u6587\u7684\u6a21\u578b\u3002 Github : https://github.com/dmmiller612/bert-extractive-summarizer","title":"\u8aaa\u660e"},{"location":"pages/nlp/nlpinfo/bert-text-summarizer-chinese/#\u5b89\u88dd\u9700\u8981\u7684\u5957\u4ef6","text":"1 2 3 4 5 6 7 8 #\u5b89\u88dd\u9700\u8981\u7684\u5957\u4ef6 pip install bert-extractive-summarizer pip install spacy==2.3.1 pip install transformers pip install neuralcoref #\u4e0b\u8f09\u4e2d\u6587\u7684spacy model python -m spacy download zh_core_web_lg","title":"\u5b89\u88dd\u9700\u8981\u7684\u5957\u4ef6"},{"location":"pages/nlp/nlpinfo/bert-text-summarizer-chinese/#Python","text":"","title":"Python"},{"location":"pages/nlp/nlpinfo/bert-text-summarizer-chinese/#\u8f09\u5165\u6a21\u578b","text":"\u9019\u88e1\u7684 Pretrained Model \u53ef\u4ee5\u8f38\u5165\u5728 https://huggingface.co \u4e0a\u6709\u7684\u6a21\u578b\u540d\u5b57\uff0c\u6216\u662f\u81ea\u5df1\u8a13\u7df4\u7684\u6a21\u578b\u8def\u5f91\u3002\u9019\u88e1\u4ee5 bert-base-chinese \u7576\u4f5c\u7bc4\u4f8b\uff0c\u53ef\u4ee5\u63db\u6210\u81ea\u5df1\u5e38\u7528\u7684\u6a21\u578b\u3002\u8f09\u5165\u6a21\u578b\u5f8c\u5c31\u53ef\u4ee5\u76f4\u63a5\u9032\u884c\u6458\u8981\u4e86\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 # spaCy \u8f09\u5165\u4e2d\u6587\u6a21\u578b import spacy import zh_core_web_lg import neuralcoref nlp = zh_core_web_lg.load() neuralcoref.add_to_pipe(nlp) # summarizer \u8f09\u5165\u4e2d\u6587\u6a21\u578b from summarizer import Summarizer from summarizer.sentence_handler import SentenceHandler from spacy.lang.zh import Chinese from transformers import * # Load model, model config and tokenizer via Transformers modelName = \"bert-base-chinese\" # \u53ef\u4ee5\u63db\u6210\u81ea\u5df1\u5e38\u7528\u7684 custom_config = AutoConfig.from_pretrained(modelName) custom_config.output_hidden_states=True custom_tokenizer = AutoTokenizer.from_pretrained(modelName) custom_model = AutoModel.from_pretrained(modelName, config=custom_config) model = Summarizer( custom_model=custom_model, custom_tokenizer=custom_tokenizer, sentence_handler = SentenceHandler(language=Chinese) )","title":"\u8f09\u5165\u6a21\u578b"},{"location":"pages/nlp/nlpinfo/bert-text-summarizer-chinese/#\u4f7f\u7528\u6a21\u578b","text":"\u6a21\u578b\u8f09\u5165\u5f8c\u5c31\u53ef\u4ee5\u76f4\u63a5\u9032\u884c\u6587\u7ae0\u6458\u8981\uff0cmodel\u53ef\u4ee5\u50b3\u5165\u4e00\u4e9b\u53c3\u6578\uff0c\u5982\u679c\u9700\u8981\u53ef\u4ee5\u76f4\u63a5\u5728Github\u4e0a\u9762\u627e\u3002 1 2 3 4 5 body = \"\u8981\u6458\u8981\u7684\u6587\u7ae0\" result = model(body) full = ''.join(result) print(full) # \u6458\u8981\u51fa\u4f86\u7684\u53e5\u5b50 \u8907\u88fd\u8cbc\u4e0a\u7684\u53c3\u6578\u8aaa\u660e 1 2 3 4 5 6 7 model( body: str # The string body that you want to summarize ratio: float # The ratio of sentences that you want for the final summary min_length: int # Parameter to specify to remove sentences that are less than 40 characters max_length: int # Parameter to specify to remove sentences greater than the max length, num_sentences: Number of sentences to use. Overrides ratio if supplied. )","title":"\u4f7f\u7528\u6a21\u578b"},{"location":"pages/nlp/nlpinfo/cnn-nlp-understand/","text":"\u5728NLP\u4e2d\u7406\u89e3CNN \u00b6 \u539f\u6587: Understanding Convolutional Neural Networks for NLP \u5f53\u6211\u4eec\u542c\u5230\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\uff08CNN\uff09\u7684\u65f6\u5019\uff0c\u6211\u4eec\u901a\u5e38\u4f1a\u60f3\u5230\u8ba1\u7b97\u673a\u89c6\u89c9\u3002CNN\u662f\u56fe\u50cf\u5206\u7c7b\u7684\u91cd\u5927\u7a81\u7834\uff0c\u5e76\u4e14\u662f\u5f53\u524d\u5f88\u591a\u8ba1\u7b97\u673a\u89c6\u89c9\u7cfb\u7edf\u7684\u6838\u5fc3\uff0c\u5305\u62ecFacebook\u7684\u81ea\u52a8\u8fdb\u884c\u56fe\u50cf\u6807\u7b7e\u5df2\u7ecf\u65e0\u4eba\u6c7d\u8f66\u3002 \u8fd1\u5e74\u6765\uff0c\u6211\u4eec\u4e5f\u5f00\u59cb\u5c06CNN\u8fd0\u7528\u5230NLP\u7684\u95ee\u9898\u4e2d\uff0c\u5e76\u4e14\u5f97\u5230\u4e86\u4e00\u4e9b\u6709\u610f\u601d\u7684\u7ed3\u679c\u3002\u5728\u8fd9\u7bc7\u5e16\u5b50\u4e2d\uff0c\u6211\u5c06\u603b\u7ed3CNN\u662f\u4ec0\u4e48\uff0c\u4ee5\u53ca\u5982\u4f55\u5c06CNN\u8fd0\u7528\u5230NLP\u4e2d\u3002\u56e0\u4e3aCNN\u5728\u56fe\u50cf\u7684\u4f8b\u5b50\u4e0b\u66f4\u597d\u7406\u89e3\uff0c\u6240\u4ee5\u6211\u5c31\u4ee5\u56fe\u50cf\u4e3a\u4f8b\u6765\u5f00\u59cb\u8bb2\u89e3\uff0c\u7136\u540e\u518d\u8fc7\u6e21\u5230NLP\u5427\u3002 \u4ec0\u4e48\u662f\u5377\u79ef\uff1f \u00b6 \u5bf9\u4e8e\u6211\u6765\u8bf4\u6700\u597d\u7406\u89e3\u7684\u65b9\u5f0f\u5c31\u662f\uff0c\u4e00\u4e2a\u5c0f\u6846\u5728\u77e9\u9635\u4e0a\u6ed1\u52a8\uff0c\u5e76\u901a\u8fc7\u4e00\u5b9a\u7684\u8ba1\u7b97\u6765\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u77e9\u9635\u3002\u770b\u56fe\u5427\uff0c\u8fd9\u6837\u66f4\u597d\u7406\u89e3\uff01 \u8fd9\u4e2a\u6ed1\u52a8\u7684\u5c0f\u6846\u4e00\u822c\u88ab\u79f0\u4e3a kernel\uff0c filter\uff0c\u6216\u8005\u662ffeature detector\u3002\u8fd9\u91cc\u6211\u4eec\u7528\u7684\u662f3X3\u7684\u5c0f\u6846\uff0c\u6ed1\u52a8\u65f6\u5bf9\u5e94\u5143\u7d20\u76f8\u4e58\uff0c\u7136\u540e\u518d\u76f8\u52a0\u3002 \u4f60\u53ef\u80fd\u60f3\u77e5\u9053\u4e3a\u4ec0\u4e48\u8981\u8fd9\u6837\u505a\uff1f\u90a3\u5c31\u770b\u4e0b\u9762\u7684\u4f8b\u5b50\u5457\uff0c\u54c8\u54c8~ \u7528\u4e0a\u9762\u5c0f\u6846\u7684\u64cd\u4f5c\u6765\u6a21\u7cca\u56fe\u7247\uff1a * \u901a\u8fc7\u7528\u4e00\u4e2a\u50cf\u7d20\u4e0e\u5176\u76f8\u90bb\u7684\u50cf\u7d20\u4f5c\u5dee\u6765\u68c0\u6d4b\u8fb9\uff08\u7ebf\uff09\uff1a \u4ec0\u4e48\u662fCNN\uff1f \u00b6 \u73b0\u5728\u4f60\u77e5\u9053\u4e86\u4ec0\u4e48\u662f\u5377\u79ef\u3002\u90a3\u4e48\u4ec0\u4e48\u662fCNN\u5462\u3002CNN\u672c\u8d28\u4e0a\u6765\u8bf4\u5c31\u662f\u51e0\u4e2a\u5377\u79ef\u5c42\u52a0\u4e0a\u975e\u7ebf\u6027\u51fd\u6570\uff0c\u50cfReLu\u6216\u8005tanh\u3002\u5728\u4f20\u7edf\u7684\u795e\u7ecf\u7f51\u7edc\u4e2d\uff0c\u6211\u4eec\u5c06\u6bcf\u4e2a\u8f93\u5165\u795e\u7ecf\u5143\u4e0e\u4e0b\u4e00\u5c42\u8fde\u63a5\u3002\u8fd9\u4e2a\u53eb\u505a\u5168\u8fde\u63a5\u5c42\u6216\u8005\u4eff\u5c04\u5c42\u3002\u5728CNN\u4e2d\uff0c\u6211\u4eec\u4e0d\u90a3\u4e48\u505a\u3002\u76f8\u53cd\uff0c\u6211\u4eec\u7528\u8f93\u5165\u5c42\u4e0a\u7684\u5377\u79ef\u6765\u8ba1\u7b97\u8f93\u51fa\u3002\u8fd9\u5c31\u5bfc\u81f4\u4e86\u5c40\u90e8\u8fde\u63a5\uff0c \u5176\u4e2d\u6bcf\u4e2a\u8f93\u5165\u5c42\u7684\u533a\u57df\u90fd\u662f\u8f93\u51fa\u5c42\u7684\u795e\u7ecf\u5143\u8fde\u63a5\u5728\u4e00\u8d77\u7684\u3002\u6bcf\u5c42\u90fd\u4f7f\u7528\u4e86filter\uff0c\u901a\u5e38\u4f1a\u6709\u6210\u5343\u4e0a\u767e\u7684\u7c7b\u4f3c\u4e8e\u4e0a\u9762\u6709\u5c0f\u6846\u6846\u7684\u56fe\u90a3\u6837\u7684\u64cd\u4f5c\u3002\u8fd8\u6709\u4e00\u4e9b\u4e1c\u897f\u53eb\u505apooling(subsampling)\u5c42\uff0c\u4f46\u662f\u6211\u540e\u9762\u518d\u4ecb\u7ecd\u3002\u5728\u8bad\u7ec3\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u4e2aCNN\u4f1a\u57fa\u4e8e\u4efb\u52a1\u81ea\u52a8\u5730\u5b66\u4e60filters\u7684\u503c\u3002\u4f8b\u5982\uff0c\u5728\u56fe\u50cf\u5206\u7c7b\u4e2d\uff0c\u4e00\u4e2aCNN\u53ef\u4ee5\u5b66\u4f1a\u68c0\u6d4b\u8fb9\uff0c\u7136\u540e\u7528\u8fb9\u5728\u7b2c\u4e8c\u5c42\u4e2d\u53bb\u68c0\u6d4b\u7b80\u5355\u7684\u5f62\u72b6\uff0c\u6bd4\u5982\u5728\u9ad8\u5c42\u4e2d\u9762\u90e8\u5f62\u72b6\u3002\u6700\u540e\u4e00\u5c42\u5c31\u662f\u4e00\u4e2a\u4f7f\u7528\u8fd9\u4e9b\u9ad8\u7b49\u7279\u5f81\u7684\u5206\u7c7b\u5668\u3002\u8fd9\u91cc\u7684\u8ba1\u7b97\u6709\u4e24\u65b9\u9762\u503c\u5f97\u6ce8\u610f\uff1a\u4f4d\u7f6e\u4e0d\u53d8\u548c\u5408\u6210(compositionality)\u3002\u6bd4\u5982\uff0c\u4f60\u60f3\u77e5\u9053\u662f\u4e0d\u662f\u6709\u4e00\u5934\u5927\u8c61\u5728\u56fe\u7247\u91cc\u9762\u3002\u56e0\u4e3a\u4f60\u628a\u4f60\u7684\u5206\u7c7b\u5668\u5728\u6574\u4e2a\u56fe\u7247\u4e0a\u6ed1\u52a8\uff0c\u6240\u4ee5\u4f60\u5e76\u4e0d\u5173\u5fc3\u54ea\u91cc\u4f1a\u6709\u5927\u8c61\u51fa\u73b0\u3002\u5728\u5b9e\u8df5\u4e2d\uff0cpooling\u901a\u5e38\u4f1a\u7ed9\u4f60\u5e73\u79fb\uff0c\u65cb\u8f6c\u4ee5\u53ca\u653e\u7f29\u7684\u4e0d\u53d8\u6027\uff0c\u66f4\u591a\u770b\u540e\u9762\u54c8~\u7b2c\u4e8c\u4e2a\u5173\u952e\u7684\u5730\u65b9\u5c31\u662f\u5c40\u90e8\u5408\u6210\u3002\u6bcf\u4e2afilter\u628a\u5c40\u90e8\u7684\u4f4e\u7ef4\u7279\u5f81\u5408\u6210\u4e3a\u9ad8\u7ef4\u7279\u5f81\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48CNN\u5728\u8ba1\u7b97\u673a\u89c6\u89c9\u91cc\u9762\u8fd9\u4e48\u5389\u5bb3\u7684\u539f\u56e0\u3002 \u90a3\u4e48\uff0c\u5982\u4f55\u7528\u5230NLP\u5462\uff1f \u00b6 \u4e0e\u56fe\u50cf\u50cf\u7d20\u4e0d\u540c\uff0c\u5bf9\u4e8e\u7edd\u5927\u591a\u6570NLP\u7684\u4efb\u52a1\uff0c\u8f93\u5165\u90fd\u662f\u77e9\u9635\u5f62\u5f0f\u7684\u53e5\u5b50\u548c\u6587\u4ef6\u3002\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u90fd\u5bf9\u4e8e\u8fd9\u4e00\u4e2a\u5355\u8bcd\uff0c\u4f46\u662f\u4e5f\u53ef\u80fd\u662f\u4e00\u4e2a\u5b57\u7b26\u3002\u4e5f\u5c31\u662f\uff0c\u6bcf\u4e00\u884c\u90fd\u662f\u4e00\u4e2a\u8868\u793a\u4e00\u4e2a\u5355\u8bcd\u7684\u5411\u91cf\u3002\u901a\u5e38\u6765\u8bf4\uff0c\u8fd9\u4e9b\u5411\u91cf\u90fd\u662fword embedding\uff08\u4f4e\u7ef4\u8868\u793a\uff09\uff0c\u6bd4\u5982word2vec\u6216\u8005GloVe\uff0c\u4f46\u662f\u4ed6\u4eec\u4e5f\u53ef\u80fd\u662fone-hot\u5411\u91cf\uff08\u5bf9\u5e94\u4e8e\u4e00\u4e2a\u8bcd\u5178\uff09\u3002\u5bf9\u4e8e\u4e00\u4e2a10\u4e2a\u5355\u5b50\u53e5\u5b50\u7528\u4e00\u4e2a100\u7ef4\u7684embedding\uff0c\u6211\u4eec\u53ef\u80fd\u9700\u898110X100\u7684matrix\u4f5c\u4e3a\u6211\u4eec\u7684\u8f93\u5165\u3002\u8fd9\u5c31\u662f\u6211\u4eec\u7684\u201cimage\u201d\u3002 \u5728\u89c6\u89c9\u4e2d\uff0c\u6211\u4eec\u7684filter\u7ecf\u8fc7\u56fe\u50cf\u7684\u6bcf\u4e00\u5c0f\u5757\uff0c\u4f46\u662f\u5728NLP\u4e2d\uff0c\u6211\u4eec\u901a\u5e38\u4f7f\u7528filter\u6ed1\u8fc7\u6574\u4e2a\u77e9\u9635\u7684\u6574\u4e2a\u884c(words)\u3002\u56e0\u6b64\uff0c\u6211\u4eecfilter\u7684\u5bbd\u5ea6\u901a\u5e38\u662f\u4e0e\u8f93\u5165\u77e9\u9635\u7684\u5bbd\u5ea6\u76f8\u540c\u3002\u9ad8\u5ea6\uff0c\u6216\u8005\u8bf4\u533a\u57df\u5927\u5c0f\u662f\u53ef\u4ee5\u53d8\u52a8\u7684\uff0c\u4f46\u662f25\u4e2a\u5355\u8bcd\u4e0a\u7684\u6ed1\u52a8\u6846\u5728\u8fd9\u4e2a\u65f6\u5019\u662f\u4e00\u5b9a\u7684\u3002\u628a\u4e0a\u9762\u6240\u6709\u7684\u90fd\u653e\u5728\u4e00\u8d77\uff0c\u4e00\u4e2aNLP\u4e0b\u7684CNN\u662f\u4e0b\u56fe\u8fd9\u6837\u5b50\u7684\u3002 \u8ba1\u7b97\u673a\u89c6\u89c9\u7684\u76f4\u89c9\u662f\u4ec0\u4e48\uff1f\u5c40\u90e8\u4e0d\u53d8\u6027\u4ee5\u53ca\u5c40\u90e8\u5408\u6210\u662f\u7684\u5bf9\u4e8e\u56fe\u50cf\u6709\u76f4\u89c2\u7684\u611f\u89c9\uff0c\u4f46\u662f\u5bf9\u4e8eNLP\u5e76\u6ca1\u6709\u8fd9\u6837\u5f88\u5f3a\u7684\u76f4\u89c9\u3002\u4f60\u53ef\u80fd\u5f88\u5173\u5fc3\u53e5\u5b50\u4e2d\u54ea\u91cc\u4f1a\u6709\u4e00\u4e2a\u5355\u8bcd\u51fa\u73b0\u3002\u50cf\u7d20\u5f7c\u6b64\u5f88\u9760\u8fd1\u7684\u65f6\u5019\u53ef\u80fd\u4f1a\u6709\u76f8\u5173\u7684\u8bed\u4e49\uff0c\u4f46\u662f\u76f8\u540c\u901a\u5e38\u5bf9\u4e8e\u5355\u8bcd\u6765\u8bf4\u4e0d\u662f\u4e00\u56de\u4e8b\u3002\u5728\u5f88\u591a\u8bed\u8a00\u4e2d\uff0c\u90e8\u5206\u77ed\u8bed\u53ef\u4ee5\u88ab\u5206\u5272\u51e0\u4e2a\u5176\u4ed6\u7684\u5355\u8bcd\u3002\u5408\u6210\u65b9\u9762\u4e5f\u4e0d\u662f\u90a3\u4e48\u660e\u663e\u3002\u4f46\u662f\uff0c\u5355\u8bcd\u5f88\u660e\u663e\u90fd\u662f\u7528\u540c\u6837\u7684\u65b9\u5f0f\u7ec4\u5408\u7684\uff0c\u6bd4\u5982\u5f62\u5bb9\u8bcd\u4fee\u9970\u540d\u8bcd\uff0c\u5355\u6570\u8fd9\u4e2a\u80fd\u8d77\u591a\u5927\u4f5c\u7528\u5462\uff1f\u5728\u9ad8\u7ef4\u8868\u793a\u4e2d\u7684\u610f\u4e49\u4e5f\u5e76\u6ca1\u6709\u8ba1\u7b97\u673a\u89c6\u89c9\u4e2d\u90a3\u4e48\u663e\u7136\u4e86\u3002 \u8bf4\u4e86\u8fd9\u4e48\u591a\uff0c\u4f3c\u4e4eCNN\u5e76\u4e0d\u9002\u5408NLP\u54ce\u3002\u4f46\u662fRNN\u770b\u8d77\u6765\u4f3c\u4e4e\u66f4\u52a0\u8ba9\u4eba\u6709\u611f\u89c9\u3002\u5b83\u5c31\u60f3\u6211\u4eec\u5982\u4f55\u5904\u7406\u8bed\u8a00\u4e00\u6837\uff0c\u81f3\u5c11\u50cf\u6211\u4eec\u601d\u8003\u7684\u90a3\u6837\uff1a\u6709\u987a\u5e8f\u7684\u4ece\u5de6\u5230\u53f3\u8bfb\u53d6\u53e5\u5b50\u3002\u5f88\u5e78\u8fd0\uff0cCNN\u8fd8\u662f\u53ef\u4ee5\u7528\u7684\u3002\u6bd5\u7adf\u8fd8\u662f\u90a3\u53e5\u8001\u8bdd\uff1a\u201c\u6240\u6709\u6a21\u578b\u90fd\u662f\u9519\u7684\uff0c\u4f46\u662f\u6709\u4e00\u4e9b\u8fd8\u662f\u53ef\u4ee5\u7528\u7684\u3002\u201d\u6700\u7ec8\u8868\u73b0\u6765\u770b\uff0cCNN\u8fd8\u662f\u8868\u73b0\u5f97\u975e\u5e38\u597d\u7684\u3002\u7b80\u5355\u7684Bag of Word\u6a21\u578b\u770b\u6765\u8981\u9000\u4f4d\u4e86\uff0c\u56e0\u4e3aBag of Word\u6a21\u578b\u5f88\u660e\u663e\u662f\u4e00\u4e2a\u8fc7\u5ea6\u7b80\u5316\u4e86\u7684\u6a21\u578b\uff0c\u800c\u4e14\u5047\u8bbe\u4e5f\u4e0d\u5bf9\uff0c\u4f46\u662f\u5b83\u5f53\u4e86\u8001\u5927\u5f88\u591a\u5e74\u4e86\uff0c\u800c\u4e14\u4e5f\u8fd8\u662f\u6709\u4e00\u4e9b\u975e\u5e38\u597d\u7684\u7ed3\u679c\u7684\u3002 \u4e00\u4e2a\u5173\u4e8eCNN\u7684\u5f88\u5927\u7684\u4e89\u8bae\u5c31\u662f\u4ed6\u592a\u5feb\u4e86\uff0c\u975e\u5e38\u975e\u5e38\u5feb\u3002\u5377\u79ef\u662f\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u7684\u4e00\u4e2a\u548c\u5174\u5e76\u4e14\u5e94\u7528\u4e8eGPU\u7684\u786c\u4ef6\u6c34\u5e73\u4e0a\u3002\u4e0en-gram\u8fd9\u4e9b\u76f8\u6bd4\uff0cCNN\u5728\u8868\u793a\u65b9\u9762\u4e5f\u662f\u975e\u5e38\u6709\u6548\u7684\u3002\u5728\u8bcd\u5178\u5f88\u5927\u7684\u60c5\u51b5\u4e0b\uff0c\u8ba1\u7b97\u4efb\u4f55\u8d85\u8fc73-grams\u7684\u4e1c\u897f\u53ef\u80fd\u4f1a\u53d8\u5f97\u975e\u5e38\u6602\u8d35\u3002\u751a\u81f3Google\u4e5f\u4e0d\u8ba1\u7b97\u8d85\u8fc75-grams\u7684\u4e1c\u897f\u3002\u5377\u79effilters\u4f1a\u81ea\u52a8\u5730\u5b66\u4e60\u5f88\u597d\u7684\u8868\u793a\uff0c\u800c\u4e14\u4e0d\u9700\u8981\u8868\u793a\u51fa\u6574\u4e2a\u8bcd\u5178\u3002\u6240\u4ee5\uff0c\u8ba9filter\u7684\u5bbd\u5ea6\u8d85\u8fc75\u662f\u5b8c\u5168\u5408\u7406\u7684\u3002\u6211\u66f4\u503e\u5411\u4e8e\u8ba4\u4e3a\uff0c\u5f88\u591a\u5728\u7b2c\u4e00\u5c42\u5b66\u4e60\u5230\u7684filter\u901a\u5e38\u4f1a\u6293\u4f4f\u4e00\u4e9b\u5f88\u76f8\u4f3c\u7684\u7279\u5f81\uff0c\u4f46\u662f\u8868\u793a\u8d77\u6765\u66f4\u52a0\u7d27\u51d1\u3002 CNN\u8d85\u53c2\u6570 \u00b6 \u5728\u89e3\u91caCNN\u5982\u4f55\u9002\u7528\u4e8eNLP\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u89e3\u91ca\u9700\u8981\u505a\u7684\u51e0\u4e2a\u53c2\u6570\u9009\u62e9\uff0c\u5f53\u4f60\u8981\u5efa\u7acb\u4e00\u4e2aCNN\u7684\u65f6\u5019\u3002\u6709\u53ef\u80fd\uff0c\u8fd9\u4f1a\u5e2e\u4f60\u66f4\u597d\u5730\u7406\u89e3\u8fd9\u4e2a\u9886\u57df\u7684\u6587\u732e\u3002 \u7a84\u7684vs\u5bbd\u7684\u5377\u79ef \u5f53\u6211\u89e3\u91ca\u5377\u79ef\u7684\u65f6\u5019\uff0c\u6211\u5ffd\u7565\u4e86\u4e00\u4e22\u4e22\u5173\u4e8e\u5982\u4f55\u5e94\u7528filter\u7684\u4e1c\u897f\u3002\u5728\u77e9\u9635\u7684\u4e2d\u5fc3\u4f7f\u7528\u4e00\u4e2a3X3\u7684filter\u662fwork\u7684\uff0c\u4f46\u662f\u5982\u679c\u5728\u8fb9\u4e0a\u5462\uff1f\u8fd9\u65f6\u5019\u6211\u4eec\u600e\u4e48\u5bf9\u77e9\u9635\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7528filter\uff1f\u4f60\u53ef\u4ee5\u4f7f\u7528Zero-padding\u3002\u6240\u6709\u5728\u77e9\u9635\u5916\u9762\u7684\u5143\u7d20\u90fd\u53d6\u4f5c0\u3002\u901a\u8fc7\u8fd9\u6837\u505a\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7528filter\u5566\uff0c\u5e76\u4e14\u5f97\u5230\u4e00\u4e2a\u66f4\u5927\u7684\u6216\u8005\u7b49\u5927\u7684\u8f93\u51fa\u3002\u4f7f\u7528zero-padding\u4e5f\u88ab\u79f0\u4e3a\u5bbd\u5377\u79ef\uff0c\u4e0d\u4f7f\u7528\u7684\u8bdd\u5c31\u79f0\u4e3a\u7a84\u5377\u79ef\u3002\u4f60\u53ef\u4ee5\u53d1\u73b0\u4e3a\u4ec0\u4e48\u5bbd\u5377\u79ef\u662f\u6709\u7528\u7684\uff0c\u751a\u81f3\u662f\u5fc5\u8981\u7684\uff0c\u5f53\u4f60\u6709\u4e00\u4e2a\u76f8\u5bf9\u4e8e\u8f93\u5165\u5927\u5c0f\u6765\u8bf4\u5f88\u5927\u7684filter\u65f6\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u8f93\u51fa\u5927\u5c0f\u7684\u516c\u5f0f\u662f \u6b65\u957f \u53e6\u5916\u4e00\u4e2a\u5377\u79ef\u7684\u8d85\u53c2\u6570\u5c31\u662f\u6b65\u957f\u5927\u5c0f\uff0c\u662f\u6307\u6bcf\u6b21filter\u632a\u52a8\u591a\u8fdc\u3002\u5728\u6240\u6709\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6b65\u957f\u90fd\u662f1\uff0c\u5e76\u4e14\u90a3\u4e9bfilter\u90fd\u662f\u91cd\u5408\u7684\u3002\u4e00\u4e2a\u66f4\u5927\u6b65\u957f\u53ef\u4ee5\u4f7f\u5f97filter\u4f7f\u7528\u7684\u6b21\u6570\u66f4\u5c11\u4ee5\u53ca\u5c0f\u7684\u8f93\u51fa\u3002\u5728\u6587\u732e\u4e2d\uff0c\u901a\u5e38\u6b65\u957f\u90fd\u662f1\uff0c\u4f46\u662f\u4e00\u4e2a\u66f4\u5927\u7684\u6b65\u957f\u53ef\u4ee5\u4f7f\u5f97\u4f60\u7684\u6a21\u578b\u7684\u8868\u73b0\u66f4\u50cfRNN\uff0ci.e.\u50cftree\u3002 Pooling\u5c42 CNN\u4e2d\u4e00\u4e2a\u5173\u952e\u7684\u90e8\u5206\u5c31\u662fpooling\u5c42\uff0c\u901a\u5e38\u7528\u5728\u5377\u79ef\u5c42\u540e\u9762\u3002pooling\u5c42\u91cd\u91c7\u6837\u4ed6\u4eec\u7684\u8f93\u5165\u3002\u6700\u901a\u5e38\u7684\u65b9\u5f0f\u53bbpooling\u5c31\u662f\u5bf9\u6bcf\u4e2afilter\u7684\u7ed3\u679c\u7528a_max\u7b97\u5b50\u3002\u4f60\u6ca1\u6709\u5fc5\u8981\u53bbpool\u6574\u4e2a\u77e9\u9635\uff0c\u4f60\u53ea\u9700\u8981pool\u90a3\u4e2a\u5c0f\u6846\u6846\u3002\u6bd4\u5982\u4e0b\u9762\u8fd9\u4e2amax pooling\u5bf9\u4e8e\u4e00\u4e2a2X2\u7684\u5c0f\u6846(\u5728NLP\u4e2d\uff0c\u6211\u4eec\u901a\u5e38\u4f1apool over\u6574\u4e2a\u8f93\u51fa\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2afilter\u8f93\u51fa\u4e00\u4e2a\u6570)\uff1a \u4e3a\u4ec0\u4e48\u8981pooling\uff1f\u6709\u5f88\u591a\u539f\u56e0\u3002pooling\u7684\u4e00\u4e2a\u7279\u6027\u5c31\u662f\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e2a\u56fa\u5b9a\u5927\u5c0f\u7684\u8f93\u51fa\u77e9\u9635\uff0c\u8fd9\u901a\u5e38\u5bf9\u4e8e\u5206\u7c7b\u6765\u8bf4\u662f\u5fc5\u8981\u7684\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u67091000\u4e2afilters\u5e76\u4e14\u5bf9\u6bcf\u4e2afilters\u90fd\u4f7f\u7528max pooling\uff0c\u90a3\u4e48\u4e45\u4f1a\u5f97\u5230\u4e00\u4e2a1000\u7ef4\u7684\u8f93\u51fa\uff0c\u4e0d\u7ba1\u4f60\u7684filter\u4ee5\u53ca\u8f93\u5165\u7684\u5927\u5c0f\u3002\u8fd9\u5c31\u4f7f\u5f97\u4f60\u53ef\u4ee5\u4f7f\u7528\u957f\u5ea6\u53d8\u5316\u7684\u53e5\u5b50\u4ee5\u53ca\u5c3a\u5bf8\u53d8\u5316\u7684filters\uff0c\u4f46\u662f\u603b\u662f\u4f1a\u8f93\u51fa\u76f8\u540c\u7ef4\u5ea6\u7684\u4e1c\u897f\u7ed9\u5206\u7c7b\u5668\u3002 Pooling\u4e5f\u80fd\u591f\u51cf\u5c11\u8f93\u51fa\u7684\u7ef4\u5ea6\uff0c\u4f46\u662f\u4e5f\u6709\u5e0c\u671b\u4fdd\u5b58\u6700\u7a81\u51fa\u7684\u4fe1\u606f\u3002\u4f60\u53ef\u60f3\u8c61\u4e00\u4e0b\u6bcf\u4e2a\u5206\u7c7b\u5668\u90fd\u7528\u6765\u63a2\u6d4b\u4e00\u4e2a\u7279\u5b9a\u7684\u7279\u5f81\uff0c\u6bd4\u5982\u68c0\u6d4b\u662f\u5426\u53e5\u5b50\u4e2d\u6709\u5426\u5b9a\uff0c\u7c7b\u4f3c\u201c\u4e0d\u60ca\u5947\u201d\u3002\u5982\u679c\u8fd9\u4e2a\u77ed\u8bed\u51fa\u73b0\u5728\u53e5\u5b50\u7684\u67d0\u4e2a\u5730\u65b9\uff0c\u5462\u4e48\u4f7f\u7528filterto\u90a3\u4e2a\u5730\u65b9\u7684\u7ed3\u679c\u5c31\u662f\u4ea7\u751f\u4e00\u4e2a\u5f88\u5927\u7684\u503c\uff0c\u4f46\u662f\u4ed6\u7684\u5468\u56f4\u7684\u503c\u90fd\u5f88\u5c0f\u3002\u901a\u8fc7\u4f7f\u7528max\u7b97\u5b50\uff0c\u4f60\u53ef\u4ee5\u4fdd\u5b58\u8fd9\u4e9b\u4fe1\u606f\u5173\u4e8e\u662f\u5426\u7279\u5f81\u4f1a\u51fa\u73b0\u5728\u53e5\u5b50\u91cc\u9762\uff0c\u4f46\u662f\u4f60\u4e5f\u4f1a\u5931\u53bb\u4e00\u4e9b\u4fe1\u606f\uff0c\u6bd4\u5982\u5b83\u51fa\u73b0\u7684\u4f4d\u7f6e\u3002\u4f46\u662f\u4f4d\u7f6e\u4fe1\u606f\u6709\u7528\u5417\uff1f\u662f\u7684\uff0c\u5f88\u6709\u7528\uff0c\u5b83\u5c31\u7c7b\u4f3c\u4e0ebag of n-grams\u6a21\u578b\u505a\u7684\u90a3\u6837\u3002\u4f60\u5931\u53bb\u4e86\u5168\u90e8\u5173\u4e8e\u4f4d\u7f6e\u7684\u4fe1\u606f\uff0c\u4f46\u662f\u4f60\u901a\u8fc7filter\u4fdd\u5b58\u4e86\u5c40\u90e8\u7684\u4fe1\u606f\uff0c\u6bd4\u5982\u662f\u201cnot amazing\u201d\u800c\u4e0d\u662f\u201camazing not\u201d \u5728\u56fe\u50cf\u8bc6\u522b\u4e2d\uff0cpooling\u4e5f\u63d0\u4f9b\u4e86\u57fa\u672c\u7684\u5e73\u79fb\u4ee5\u53ca\u65cb\u8f6c\u4e0d\u53d8\u6027\u3002\u5f53\u4f60\u5728\u4e00\u4e2a\u533a\u57df\u4e0a\u7528pooling \u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u8f93\u51fa\u4e5f\u8fd8\u662f\u4f1a\u8fd1\u4f3c\u5730\u76f8\u540c\uff0c\u5373\u4f7f\u4f60\u5e73\u79fb\u6216\u8005\u5148\u8f6c\u8fd9\u4e2a\u56fe\u50cf\u51e0\u4e2a\u50cf\u7d20\u70b9\uff0c\u56e0\u4e3amax\u7b97\u5b50\u4f1a\u5f97\u51fa\u76f8\u540c\u7684\u503c\u3002 channel \u6700\u540e\u4e00\u4e2a\u6982\u5ff5\u5c31\u662fchannels\u3002channels\u662f\u5bf9\u8f93\u5165\u6570\u636e\u7684\u4e0d\u540c\u89c6\u89d2\u3002\u6bd4\u5982\uff0c\u5728\u56fe\u50cf\u8bc6\u522b\u4e2d\uff0c\u4f60\u901a\u5e38\u4f1a\u6709RGB channels\u3002 \u4f60\u80fd\u591f\u5728\u8fd9\u4e9bchannels\u4e0a\u4f7f\u7528\u5377\u79ef\u3002\u5728NLP\u4e2d\uff0c\u4f60\u53ef\u4ee5\u60f3\u8c61\u6709\u5404\u79cd\u5404\u6837\u7684channels\uff1a\u5bf9\u4e8e\u4e0d\u540c\u7684word embeddings(Word2Vec, GloVe), \u4f60\u53ef\u4ee5\u4e0d\u540c\u7684channels\u3002\u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u6709\u4e00\u4e2achannel\u5bf9\u4e8e\u5728\u4e0d\u540c\u8bed\u8a00\u4e2d\u7684\u76f8\u540c\u7684\u53e5\u5b50\u3002 NLP\u4e2d\u7684CNN \u00b6 \u73b0\u5728\uff0c\u6211\u4eec\u770b\u4e00\u4e0bCNN\u5728NLP\u4e2d\u7684\u5e94\u7528\u3002\u6211\u4f1a\u5c3d\u529b\u5730\u53bb\u603b\u7ed3\u4e00\u4e9b\u7814\u7a76\u6210\u679c\u3002 \u7ed9CNN\u6700\u9002\u5408\u7684\u4efb\u52a1\u5c31\u662f\u5206\u7c7b\uff0c\u6bd4\u5982Sentiment Analysis, Spam Detection, \u6216\u8005Topic Categorization. \u5377\u79ef\u548cPooling\u7b97\u5b50\u4f1a\u4e22\u5931\u4e00\u4e9b\u5c40\u90e8\u7684\u4f4d\u7f6e\u4fe1\u606f\uff0c\u4ece\u800c\u4f7f\u5f97\u53e5\u5b50\u6807\u7b7e\u53d8\u6210\u4e86Part of Speech\u6807\u7b7e\u6216\u8005Entity\u63d0\u53d6\u53d8\u5f97\u66f4\u52a0\u56f0\u96be\u5bf9\u4e8e\u7eaf\u7cb9\u7684CNN\u6846\u67b6\u3002 [1]\u8bc4\u4f30\u4e00\u4e2aCNN\u6846\u67b6\u5728\u5404\u79cd\u5206\u7c7b\u6570\u636e\u4e0a\uff0c\u7edd\u5927\u591a\u6570\u90fd\u662fSentiment Analysis and Topic Categorization\u3002CNN\u6846\u67b6\u90fd\u8868\u73b0\u5f97\u975e\u5e38\u597d\u3002\u66f4\u795e\u5947\u7684\u662f\uff0c\u5728\u8fd9\u7bc7paper\u4e2d\u7684\u7f51\u7edc\u662f\u975e\u5e38\u7684\u7b80\u5355\uff0c\u5e76\u4e14\u4e5f\u662f\u5b83\u5f88powerful\u7684\u539f\u56e0\u3002\u8f93\u5165\u5c42\u662f\u4e00\u4e2a\u7531\u4e32\u8054word2vec word filter\u7ec4\u6210\u7684\u53e5\u5b50\u3002\u7136\u540e\u7d27\u63a5\u7740\u662f\u4e00\u4e2a\u5e26\u6709\u591a\u91cdfilter\u7684\u5377\u79ef\u5c42\uff0c\u7136\u540e\u662f\u4e00\u4e2amax-pooling\u5c42\uff0c\u6700\u540e\u662f\u4e00\u4e2asoftmax\u5206\u7c7b\u5668\u3002\u8fd9\u7bc7\u8bba\u6587\u4e5f\u5b9e\u73b0\u4e86\u4e24\u79cdchannels\uff1astatic\u548cdynamic word embeddings\uff0c \u5176\u4e2d\u4e00\u79cd\u662f\u4f1a\u5728\u8bad\u7ec3\u4e2d\u8fdb\u884c\u8c03\u6574\u7684\uff0c\u800c\u53e6\u4e00\u79cd\u4e0d\u4f1a\u3002[2]\u63d0\u51fa\u4e86\u4e00\u79cd\u7c7b\u4f3c\u7684\u4f46\u662f\u8ddf\u5bb6\u590d\u6742\u7684\u795e\u7ecf\u7f51\u7edc\u7ed3\u6784\u3002[6]\u53e6\u5916\u8fd8\u589e\u52a0\u4e86\u4e00\u5c42\u6765\u8fdb\u884c\u201c\u8bed\u4e49\u805a\u7c7b\u201d\u3002 [4]\u4ece\u5934\u5f00\u59cb\u8bad\u7ec3CNN\uff0c\u6ca1\u6709\u4f7f\u7528\u9884\u5148\u8bad\u7ec3\u597d\u7684word vector\uff0c\u50cfWord2Vec\uff0c GloVe\u3002\u5b83\u76f4\u63a5\u628a\u5377\u79ef\u8fd0\u7528\u5230one-hot\u5411\u91cf\u4e0a\u3002\u8fd9\u4e2a\u4f5c\u5219\u4e5f\u63d0\u51fa\u4e86\u4e00\u4e2a\u7a7a\u95f4\u6709\u6548\u7684bag-of-words-like\u7684\u8868\u793a\u6765\u8868\u793a\u8f93\u5165\u6570\u636e\u3002\uff0c\u4ece\u800c\u51cf\u5c11\u795e\u7ecf\u7f51\u7edc\u4e2d\u9700\u8981\u5b66\u4e60\u7684\u53c2\u6570\u3002\u5728[5]\u4e2d\uff0c\u4f5c\u8005\u4f7f\u7528\u53e6\u5916\u4e00\u79cd\u975e\u76d1\u7763\u5f0f\u7684\"region embedding\"\uff0c\u4e5f\u5c31\u662f\u901a\u8fc7\u4f7f\u7528CNN\u9884\u6d4b\u6587\u672c\u4e2d\u7684\u5185\u5bb9\u6765\u5b66\u4e60\u3002\u8fd9\u4e9b\u8bba\u6587\u4e2d\u7684\u65b9\u6cd5\u4f3c\u4e4e\u5bf9\u4e8e\u957f\u6587\u672c\u90fd\u662f\u6709\u6548\u7684\uff0c\u4f46\u662f\u4ed6\u4eec\u5bf9\u4e8e\u77ed\u6587\u672c\u7684\u8868\u73b0(\u50cftweets)\u5e76\u4e0d\u662f\u5f88\u597d\u3002\u76f4\u89c9\u4e0a\u6765\u770b\uff0c\u8fd9\u662f\u6709\u9053\u7406\u7684\uff0c\u56e0\u4e3a\u4f7f\u7528\u9884\u5148\u8bad\u7ec3\u597d\u7684word embedding\u6765\u5bf9\u77ed\u6587\u672c\u8fdb\u884c\u5efa\u6a21\u5c06\u4f1a\u4ea7\u751f\u66f4\u591a\u7684\u8bef\u5dee\uff0c\u76f8\u5bf9\u4e8e\u957f\u6587\u672c\u6765\u8bf4\u3002 \u6784\u5efa\u4e00\u4e2aCNN\u6846\u67b6\u610f\u5473\u7740\u6709\u5f88\u591a\u5dee\u53c2\u6570\u8981\u9009\uff0c\u8f93\u5165\u7684\u8868\u793a(Word2Vec, GloVe, one-hot), \u5377\u79effilter\u7684\u6570\u91cf\u4ee5\u53ca\u5927\u5c0f\uff0cpooling\u7b56\u7565(max, average)\uff0c \u4ee5\u53ca\u6fc0\u6d3b\u51fd\u6570(ReLu, tanh). [7]\u8fdb\u884c\u4e86\u4e00\u4e2a\u5b9e\u8df5\u8bc4\u4f30\u5173\u4e8eCNN\u4e2d\u90a3\u4e9b\u53c2\u6570\u53d8\u5316\u7684\u5f71\u54cd\uff0c\u5e76\u4e14\u7814\u7a76\u4e86\u4ed6\u4eec\u5bf9\u4e8eCNN\u8868\u73b0\u4ee5\u53ca\u7ed3\u679c\u7684\u6ce2\u52a8\u7684\u5f71\u54cd\u3002\u5982\u679c\u4f60\u60f3\u4f7f\u7528\u4f60\u81ea\u5df1\u7684CNN\u6765\u8fdb\u884c\u6587\u672c\u5206\u7c7b\uff0c\u4f7f\u7528\u8fd9\u7bc7\u8bba\u6587\u7684\u7ed3\u679c\u4f5c\u4e3a\u4e00\u4e2a\u89e6\u53d1\u70b9\u65f6\u4e0d\u9519\u7684\u3002\u5176\u4e2d\u4e00\u4e9b\u6709\u70b9\u610f\u601d\u7684\u7ed3\u679c\uff0c\u6bd4\u5982 max-pooling \u4f18\u4e8eaverage-pooling, \u7406\u60f3\u7684filter\u5927\u5c0f\u662f\u5f88\u91cd\u8981\u7684\uff0c\u6b63\u5219\u5316\u5728NLP\u4e2d\u770b\u8d77\u6765\u4e5f\u4e0d\u4f1a\u6709\u5f88\u5927\u7684\u4f5c\u7528\u3002 [8]\u63a2\u8ba8\u4e86CNN\u5728relationship\u63d0\u53d6\u4ee5\u53carelationship\u5206\u7c7b\u4e2d\u7684\u5e94\u7528\u3002\u9664\u4e86word vectors\uff0c\u4f5c\u8005\u4f7f\u7528\u4e86word\u4e0e\u611f\u5174\u8da3\u7684entity\u7684\u76f8\u5bf9\u4f4d\u7f6e\u4f5c\u4e3a\u4e00\u4e2a\u5377\u79ef\u5c42\u7684\u8f93\u5165\u3002\u8fd9\u4e2a\u6a21\u578b\u5047\u5b9a\u4e86enetities\u7684\u4f4d\u7f6e\u662f\u7ed9\u5b9a\u7684\uff0c\u5e76\u4e14\u6bcf\u4e2a\u8f93\u5165\u90fd\u5b58\u5728\u4e00\u4e2arelationship\u3002[9]\u548c[10]\u8ba8\u8bba\u4e86\u7c7b\u4f3c\u7684\u6a21\u578b\u3002 \u53e6\u4e00\u4e2a\u6709\u610f\u601d\u7684\u5e94\u7528\u53ef\u4ee5\u88ab\u627e\u5230\u5728[11]\u548c[12]\u4e2d\u3002\u8fd9\u4e9bpaper\u662f\u6765\u81eaMicrosoft reasearch. \u8fd9\u4e9bpapers\u63cf\u8ff0\u4e86\u5982\u4f55\u53bb\u5b66\u4e60\u53e5\u5b50\u7684\u8bed\u4e49\u8868\u793a\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u7528\u505ainformation retrieval. paper\u4e2d\u7684\u4f8b\u5b50\u5305\u62ec\u63a8\u8350\u53ef\u80fd\u7684\u6587\u4ef6\u7ed9\u4f7f\u7528\u8005\uff0c\u57fa\u4e8e\u4ed6\u4eec\u6b63\u5728\u8bfb\u7684\u4e1c\u897f\u3002\u8fd9\u4e2a\u53e5\u5b50\u8868\u793a\u88ab\u8bad\u7ec3\u662f\u57fa\u4e8e\u641c\u7d22\u5f15\u64celog\u6570\u636e\u3002 \u7edd\u5927\u591a\u6570\u7684CNN\u6846\u67b6\u5b66\u4e60words\u548c\u53e5\u5b50\u7684embedding\uff08\u4f4e\u7ef4\u8868\u793a\uff09\u4f5c\u4e3a\u8bb8\u68bf\u7684\u4e00\u90e8\u5206\u3002\u5e76\u4e0d\u662f\u6240\u6709\u7684paper\u90fd\u7814\u7a76\u8fd9\u4e2a\u8bad\u7ec3\u8fc7\u7a0b\u6216\u8005\u7814\u7a76\u8fd9\u4e2aembedding\u662f\u591a\u4e48\u7684\u6709\u610f\u4e49\u3002[13]\u5c55\u793a\u4e86\u4e00\u4e2aCNN\u6846\u67b6\u6765\u7ed9Facebook\u5e16\u5b50\u9884\u6d4b\u8bdd\u9898\u6807\u7b7e\uff0c\u800c\u4e14\u540c\u65f6\u4ea7\u751f\u6709\u610f\u4e49\u7684\u5355\u8bcd\u548c\u53e5\u5b50\u7684embedding\u3002 \u8fd9\u4e9b\u5b66\u5230\u7684embedding\u7136\u540e\u6210\u529f\u5730\u7528\u5728\u4e86\u53e6\u4e00\u4e2a\u4efb\u52a1\u4e0a\u9762\uff1a\u63a8\u8350\u6f5c\u5728\u7684\u6587\u6863\u7ed9\u8bfb\u8005\uff0c\u57fa\u4e8e\u4ed6\u4eec\u70b9\u51fb\u6570\u636e\u3002 Character-Level CNNs \u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6240\u6709\u7684\u5c55\u793a\u7684\u6a21\u578b\u90fd\u662f\u57fa\u4e8ewords\u7684\u3002\u4f46\u662f\u4e5f\u6709\u4e00\u4e9b\u7814\u7a76\u76f4\u63a5\u628aCNN\u7528\u5728\u5b57\u7b26\u4e0a\u9762\u3002[14]\u5b66\u4e60\u4e86character-level embedding\uff0c\u628a\u4ed6\u4eec\u548c\u9884\u5148\u8bad\u7ec3\u597d\u7684embedding\u7ed3\u5408\u5728\u4e00\u8d77\uff0c\u7136\u540e\u4f7f\u7528CNN\u6807\u7b7ePoS\u3002[15][16]\u63a2\u8ba8\u4e86CNN\u7684\u4f7f\u7528\u6765\u76f4\u63a5\u4ece\u5b57\u7b26\u4e2d\u5b66\u4e60\uff0c\u4e0d\u9700\u8981\u4efb\u4f55\u9884\u5148\u8bad\u7ec3\u597d\u7684embedding\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u4f5c\u8005\u7528\u6765\u4e00\u4e2a\u76f8\u5bf9\u6df1\u7684\u795e\u7ecf\u7f51\u7edc(9\u5c42)\uff0c \u5e76\u4e14\u628a\u5b83\u7528\u5728\u4e86sentiment anslysis\u548ctext categorization\u4e0a\u9762\u3002\u7ed3\u679c\u8868\u660e\u76f4\u63a5\u4ece\u5b57\u7b26\u8f93\u5165\u6765\u5b66\u4e60\u5728\u5927\u6570\u636e\u96c6(\u4e0a\u767e\u4e07)\u4e0a\u5f0f\u8868\u73b0\u5f97\u975e\u5e38\u597d\u7684\u3002\u4f46\u662f\u5728\u5c0f\u6570\u636e\u96c6(\u51e0\u767e\u4e2a\uff0c\u51e0\u5343\u4e2a)\u4e0a\u8868\u73b0\u8fd8\u4e0d\u5982\u7b80\u5355\u6a21\u578b\u3002[17]\u63a2\u7d22\u4e86\u4f7f\u7528\u5b57\u7b26\u578bCNN\u7684\u8f93\u51fa\u4f5c\u4e3aLSTM\u6bcf\u4e2a\u65f6\u95f4\u70b9\u7684\u8f93\u5165\u3002 \u4ee4\u4eba\u60ca\u5947\u7684\u662f\uff0c\u57fa\u672c\u4e0a\u6240\u6709\u7684paper\u90fd\u662f\u8fd11-2\u5e74\u5185\u51fa\u7248\u7684\u3002\u5f88\u660e\u663e\uff0c\u4e4b\u524d\u662f\u4e00\u5b9a\u51fa\u73b0\u4e86\u5173\u4e8eCNN\u5728NLP\u4e2d\u5e94\u7528\u7684\u91cd\u8981\u5de5\u4f5c\u3002 Paper References \u00b6 [1] Kim, Y. (2014). Convolutional Neural Networks for Sentence Classification. Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing (EMNLP 2014), 1746\u20131751. [2] Kalchbrenner, N., Grefenstette, E., & Blunsom, P. (2014). A Convolutional Neural Network for Modelling Sentences. Acl, 655\u2013665. [3] Santos, C. N. dos, & Gatti, M. (2014). Deep Convolutional Neural Networks for Sentiment Analysis of Short Texts. In COLING-2014 (pp. 69\u201378). [4] Johnson, R., & Zhang, T. (2015). Effective Use of Word Order for Text Categorization with Convolutional Neural Networks. To Appear: NAACL-2015, (2011). [5] Johnson, R., & Zhang, T. (2015). Semi-supervised Convolutional Neural Networks for Text Categorization via Region Embedding. [6] Wang, P., Xu, J., Xu, B., Liu, C., Zhang, H., Wang, F., & Hao, H. (2015). Semantic Clustering and Convolutional Neural Network for Short Text Categorization. Proceedings ACL 2015, 352\u2013357. [7] Zhang, Y., & Wallace, B. (2015). A Sensitivity Analysis of (and Practitioners\u2019 Guide to) Convolutional Neural Networks for Sentence Classification, [8] Nguyen, T. H., & Grishman, R. (2015). Relation Extraction: Perspective from Convolutional Neural Networks. Workshop on Vector Modeling for NLP, 39\u201348. [9] Sun, Y., Lin, L., Tang, D., Yang, N., Ji, Z., & Wang, X. (2015). Modeling Mention , Context and Entity with Neural Networks for Entity Disambiguation, (Ijcai), 1333\u20131339. [10] Zeng, D., Liu, K., Lai, S., Zhou, G., & Zhao, J. (2014). Relation Classification via Convolutional Deep Neural Network. Coling, (2011), 2335\u20132344. [11] Gao, J., Pantel, P., Gamon, M., He, X., & Deng, L. (2014). Modeling Interestingness with Deep Neural Networks. [12] Shen, Y., He, X., Gao, J., Deng, L., & Mesnil, G. (2014). A Latent Semantic Model with Convolutional-Pooling Structure for Information Retrieval. Proceedings of the 23 rd ACM International Conference on Conference on Information and Knowledge Management \u2013 CIKM \u201914, 101\u2013110. [13] Weston, J., & Adams, K. (2014). # T AG S PACE : Semantic Embeddings from Hashtags, 1822\u20131827. [14] Santos, C., & Zadrozny, B. (2014). Learning Character-level Representations for Part-of-Speech Tagging. Proceedings of the 31 st International Conference on Machine Learning, ICML-14(2011), 1818\u20131826. [15] Zhang, X., Zhao, J., & LeCun, Y. (2015). Character-level Convolutional Networks for Text Classification, 1\u20139. [16] Zhang, X., & LeCun, Y. (2015). Text Understanding from Scratch. arXiv E-Prints, 3, 011102. [17] Kim, Y., Jernite, Y., Sontag, D., & Rush, A. M. (2015). Character-Aware Neural Language Models. \u51e1\u672c\u7f51\u6ce8\u660e\"\u6765\u6e90\uff1aXXX \"\u7684\u6587/\u56fe/\u89c6\u9891\u7b49\u7a3f\u4ef6\uff0c\u672c\u7f51\u8f6c\u8f7d\u51fa\u4e8e\u4f20\u9012\u66f4\u591a\u4fe1\u606f\u4e4b\u76ee\u7684\uff0c\u5e76\u4e0d\u610f\u5473\u7740\u8d5e\u540c\u5176\u89c2\u70b9\u6216\u8bc1\u5b9e\u5176\u5185\u5bb9\u7684\u771f\u5b9e\u6027\u3002\u5982\u6d89\u53ca\u4f5c\u54c1\u5185\u5bb9\u3001\u7248\u6743\u548c\u5176\u5b83\u95ee\u9898\uff0c\u8bf7\u4e0e\u672c\u7f51\u8054\u7cfb\uff0c\u6211\u4eec\u5c06\u5728\u7b2c\u4e00\u65f6\u95f4\u5220\u9664\u5185\u5bb9\uff01 \u4f5c\u8005: \u7acb\u8db3\u5f53\u4e0b \u6765\u6e90\uff1a https://zhuanlan.zhihu.com/p/46531725","title":"\u7406\u89e3NLP\u4e2d\u7684CNN\u5377\u79ef\u795e\u7ecf\u7f51\u7edc"},{"location":"pages/nlp/nlpinfo/cnn-nlp-understand/#\u5728NLP\u4e2d\u7406\u89e3CNN","text":"\u539f\u6587: Understanding Convolutional Neural Networks for NLP \u5f53\u6211\u4eec\u542c\u5230\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\uff08CNN\uff09\u7684\u65f6\u5019\uff0c\u6211\u4eec\u901a\u5e38\u4f1a\u60f3\u5230\u8ba1\u7b97\u673a\u89c6\u89c9\u3002CNN\u662f\u56fe\u50cf\u5206\u7c7b\u7684\u91cd\u5927\u7a81\u7834\uff0c\u5e76\u4e14\u662f\u5f53\u524d\u5f88\u591a\u8ba1\u7b97\u673a\u89c6\u89c9\u7cfb\u7edf\u7684\u6838\u5fc3\uff0c\u5305\u62ecFacebook\u7684\u81ea\u52a8\u8fdb\u884c\u56fe\u50cf\u6807\u7b7e\u5df2\u7ecf\u65e0\u4eba\u6c7d\u8f66\u3002 \u8fd1\u5e74\u6765\uff0c\u6211\u4eec\u4e5f\u5f00\u59cb\u5c06CNN\u8fd0\u7528\u5230NLP\u7684\u95ee\u9898\u4e2d\uff0c\u5e76\u4e14\u5f97\u5230\u4e86\u4e00\u4e9b\u6709\u610f\u601d\u7684\u7ed3\u679c\u3002\u5728\u8fd9\u7bc7\u5e16\u5b50\u4e2d\uff0c\u6211\u5c06\u603b\u7ed3CNN\u662f\u4ec0\u4e48\uff0c\u4ee5\u53ca\u5982\u4f55\u5c06CNN\u8fd0\u7528\u5230NLP\u4e2d\u3002\u56e0\u4e3aCNN\u5728\u56fe\u50cf\u7684\u4f8b\u5b50\u4e0b\u66f4\u597d\u7406\u89e3\uff0c\u6240\u4ee5\u6211\u5c31\u4ee5\u56fe\u50cf\u4e3a\u4f8b\u6765\u5f00\u59cb\u8bb2\u89e3\uff0c\u7136\u540e\u518d\u8fc7\u6e21\u5230NLP\u5427\u3002","title":"\u5728NLP\u4e2d\u7406\u89e3CNN"},{"location":"pages/nlp/nlpinfo/cnn-nlp-understand/#\u4ec0\u4e48\u662f\u5377\u79ef","text":"\u5bf9\u4e8e\u6211\u6765\u8bf4\u6700\u597d\u7406\u89e3\u7684\u65b9\u5f0f\u5c31\u662f\uff0c\u4e00\u4e2a\u5c0f\u6846\u5728\u77e9\u9635\u4e0a\u6ed1\u52a8\uff0c\u5e76\u901a\u8fc7\u4e00\u5b9a\u7684\u8ba1\u7b97\u6765\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u77e9\u9635\u3002\u770b\u56fe\u5427\uff0c\u8fd9\u6837\u66f4\u597d\u7406\u89e3\uff01 \u8fd9\u4e2a\u6ed1\u52a8\u7684\u5c0f\u6846\u4e00\u822c\u88ab\u79f0\u4e3a kernel\uff0c filter\uff0c\u6216\u8005\u662ffeature detector\u3002\u8fd9\u91cc\u6211\u4eec\u7528\u7684\u662f3X3\u7684\u5c0f\u6846\uff0c\u6ed1\u52a8\u65f6\u5bf9\u5e94\u5143\u7d20\u76f8\u4e58\uff0c\u7136\u540e\u518d\u76f8\u52a0\u3002 \u4f60\u53ef\u80fd\u60f3\u77e5\u9053\u4e3a\u4ec0\u4e48\u8981\u8fd9\u6837\u505a\uff1f\u90a3\u5c31\u770b\u4e0b\u9762\u7684\u4f8b\u5b50\u5457\uff0c\u54c8\u54c8~ \u7528\u4e0a\u9762\u5c0f\u6846\u7684\u64cd\u4f5c\u6765\u6a21\u7cca\u56fe\u7247\uff1a * \u901a\u8fc7\u7528\u4e00\u4e2a\u50cf\u7d20\u4e0e\u5176\u76f8\u90bb\u7684\u50cf\u7d20\u4f5c\u5dee\u6765\u68c0\u6d4b\u8fb9\uff08\u7ebf\uff09\uff1a","title":"\u4ec0\u4e48\u662f\u5377\u79ef\uff1f"},{"location":"pages/nlp/nlpinfo/cnn-nlp-understand/#\u4ec0\u4e48\u662fCNN","text":"\u73b0\u5728\u4f60\u77e5\u9053\u4e86\u4ec0\u4e48\u662f\u5377\u79ef\u3002\u90a3\u4e48\u4ec0\u4e48\u662fCNN\u5462\u3002CNN\u672c\u8d28\u4e0a\u6765\u8bf4\u5c31\u662f\u51e0\u4e2a\u5377\u79ef\u5c42\u52a0\u4e0a\u975e\u7ebf\u6027\u51fd\u6570\uff0c\u50cfReLu\u6216\u8005tanh\u3002\u5728\u4f20\u7edf\u7684\u795e\u7ecf\u7f51\u7edc\u4e2d\uff0c\u6211\u4eec\u5c06\u6bcf\u4e2a\u8f93\u5165\u795e\u7ecf\u5143\u4e0e\u4e0b\u4e00\u5c42\u8fde\u63a5\u3002\u8fd9\u4e2a\u53eb\u505a\u5168\u8fde\u63a5\u5c42\u6216\u8005\u4eff\u5c04\u5c42\u3002\u5728CNN\u4e2d\uff0c\u6211\u4eec\u4e0d\u90a3\u4e48\u505a\u3002\u76f8\u53cd\uff0c\u6211\u4eec\u7528\u8f93\u5165\u5c42\u4e0a\u7684\u5377\u79ef\u6765\u8ba1\u7b97\u8f93\u51fa\u3002\u8fd9\u5c31\u5bfc\u81f4\u4e86\u5c40\u90e8\u8fde\u63a5\uff0c \u5176\u4e2d\u6bcf\u4e2a\u8f93\u5165\u5c42\u7684\u533a\u57df\u90fd\u662f\u8f93\u51fa\u5c42\u7684\u795e\u7ecf\u5143\u8fde\u63a5\u5728\u4e00\u8d77\u7684\u3002\u6bcf\u5c42\u90fd\u4f7f\u7528\u4e86filter\uff0c\u901a\u5e38\u4f1a\u6709\u6210\u5343\u4e0a\u767e\u7684\u7c7b\u4f3c\u4e8e\u4e0a\u9762\u6709\u5c0f\u6846\u6846\u7684\u56fe\u90a3\u6837\u7684\u64cd\u4f5c\u3002\u8fd8\u6709\u4e00\u4e9b\u4e1c\u897f\u53eb\u505apooling(subsampling)\u5c42\uff0c\u4f46\u662f\u6211\u540e\u9762\u518d\u4ecb\u7ecd\u3002\u5728\u8bad\u7ec3\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u4e2aCNN\u4f1a\u57fa\u4e8e\u4efb\u52a1\u81ea\u52a8\u5730\u5b66\u4e60filters\u7684\u503c\u3002\u4f8b\u5982\uff0c\u5728\u56fe\u50cf\u5206\u7c7b\u4e2d\uff0c\u4e00\u4e2aCNN\u53ef\u4ee5\u5b66\u4f1a\u68c0\u6d4b\u8fb9\uff0c\u7136\u540e\u7528\u8fb9\u5728\u7b2c\u4e8c\u5c42\u4e2d\u53bb\u68c0\u6d4b\u7b80\u5355\u7684\u5f62\u72b6\uff0c\u6bd4\u5982\u5728\u9ad8\u5c42\u4e2d\u9762\u90e8\u5f62\u72b6\u3002\u6700\u540e\u4e00\u5c42\u5c31\u662f\u4e00\u4e2a\u4f7f\u7528\u8fd9\u4e9b\u9ad8\u7b49\u7279\u5f81\u7684\u5206\u7c7b\u5668\u3002\u8fd9\u91cc\u7684\u8ba1\u7b97\u6709\u4e24\u65b9\u9762\u503c\u5f97\u6ce8\u610f\uff1a\u4f4d\u7f6e\u4e0d\u53d8\u548c\u5408\u6210(compositionality)\u3002\u6bd4\u5982\uff0c\u4f60\u60f3\u77e5\u9053\u662f\u4e0d\u662f\u6709\u4e00\u5934\u5927\u8c61\u5728\u56fe\u7247\u91cc\u9762\u3002\u56e0\u4e3a\u4f60\u628a\u4f60\u7684\u5206\u7c7b\u5668\u5728\u6574\u4e2a\u56fe\u7247\u4e0a\u6ed1\u52a8\uff0c\u6240\u4ee5\u4f60\u5e76\u4e0d\u5173\u5fc3\u54ea\u91cc\u4f1a\u6709\u5927\u8c61\u51fa\u73b0\u3002\u5728\u5b9e\u8df5\u4e2d\uff0cpooling\u901a\u5e38\u4f1a\u7ed9\u4f60\u5e73\u79fb\uff0c\u65cb\u8f6c\u4ee5\u53ca\u653e\u7f29\u7684\u4e0d\u53d8\u6027\uff0c\u66f4\u591a\u770b\u540e\u9762\u54c8~\u7b2c\u4e8c\u4e2a\u5173\u952e\u7684\u5730\u65b9\u5c31\u662f\u5c40\u90e8\u5408\u6210\u3002\u6bcf\u4e2afilter\u628a\u5c40\u90e8\u7684\u4f4e\u7ef4\u7279\u5f81\u5408\u6210\u4e3a\u9ad8\u7ef4\u7279\u5f81\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48CNN\u5728\u8ba1\u7b97\u673a\u89c6\u89c9\u91cc\u9762\u8fd9\u4e48\u5389\u5bb3\u7684\u539f\u56e0\u3002","title":"\u4ec0\u4e48\u662fCNN\uff1f"},{"location":"pages/nlp/nlpinfo/cnn-nlp-understand/#\u90a3\u4e48\u5982\u4f55\u7528\u5230NLP\u5462","text":"\u4e0e\u56fe\u50cf\u50cf\u7d20\u4e0d\u540c\uff0c\u5bf9\u4e8e\u7edd\u5927\u591a\u6570NLP\u7684\u4efb\u52a1\uff0c\u8f93\u5165\u90fd\u662f\u77e9\u9635\u5f62\u5f0f\u7684\u53e5\u5b50\u548c\u6587\u4ef6\u3002\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u90fd\u5bf9\u4e8e\u8fd9\u4e00\u4e2a\u5355\u8bcd\uff0c\u4f46\u662f\u4e5f\u53ef\u80fd\u662f\u4e00\u4e2a\u5b57\u7b26\u3002\u4e5f\u5c31\u662f\uff0c\u6bcf\u4e00\u884c\u90fd\u662f\u4e00\u4e2a\u8868\u793a\u4e00\u4e2a\u5355\u8bcd\u7684\u5411\u91cf\u3002\u901a\u5e38\u6765\u8bf4\uff0c\u8fd9\u4e9b\u5411\u91cf\u90fd\u662fword embedding\uff08\u4f4e\u7ef4\u8868\u793a\uff09\uff0c\u6bd4\u5982word2vec\u6216\u8005GloVe\uff0c\u4f46\u662f\u4ed6\u4eec\u4e5f\u53ef\u80fd\u662fone-hot\u5411\u91cf\uff08\u5bf9\u5e94\u4e8e\u4e00\u4e2a\u8bcd\u5178\uff09\u3002\u5bf9\u4e8e\u4e00\u4e2a10\u4e2a\u5355\u5b50\u53e5\u5b50\u7528\u4e00\u4e2a100\u7ef4\u7684embedding\uff0c\u6211\u4eec\u53ef\u80fd\u9700\u898110X100\u7684matrix\u4f5c\u4e3a\u6211\u4eec\u7684\u8f93\u5165\u3002\u8fd9\u5c31\u662f\u6211\u4eec\u7684\u201cimage\u201d\u3002 \u5728\u89c6\u89c9\u4e2d\uff0c\u6211\u4eec\u7684filter\u7ecf\u8fc7\u56fe\u50cf\u7684\u6bcf\u4e00\u5c0f\u5757\uff0c\u4f46\u662f\u5728NLP\u4e2d\uff0c\u6211\u4eec\u901a\u5e38\u4f7f\u7528filter\u6ed1\u8fc7\u6574\u4e2a\u77e9\u9635\u7684\u6574\u4e2a\u884c(words)\u3002\u56e0\u6b64\uff0c\u6211\u4eecfilter\u7684\u5bbd\u5ea6\u901a\u5e38\u662f\u4e0e\u8f93\u5165\u77e9\u9635\u7684\u5bbd\u5ea6\u76f8\u540c\u3002\u9ad8\u5ea6\uff0c\u6216\u8005\u8bf4\u533a\u57df\u5927\u5c0f\u662f\u53ef\u4ee5\u53d8\u52a8\u7684\uff0c\u4f46\u662f25\u4e2a\u5355\u8bcd\u4e0a\u7684\u6ed1\u52a8\u6846\u5728\u8fd9\u4e2a\u65f6\u5019\u662f\u4e00\u5b9a\u7684\u3002\u628a\u4e0a\u9762\u6240\u6709\u7684\u90fd\u653e\u5728\u4e00\u8d77\uff0c\u4e00\u4e2aNLP\u4e0b\u7684CNN\u662f\u4e0b\u56fe\u8fd9\u6837\u5b50\u7684\u3002 \u8ba1\u7b97\u673a\u89c6\u89c9\u7684\u76f4\u89c9\u662f\u4ec0\u4e48\uff1f\u5c40\u90e8\u4e0d\u53d8\u6027\u4ee5\u53ca\u5c40\u90e8\u5408\u6210\u662f\u7684\u5bf9\u4e8e\u56fe\u50cf\u6709\u76f4\u89c2\u7684\u611f\u89c9\uff0c\u4f46\u662f\u5bf9\u4e8eNLP\u5e76\u6ca1\u6709\u8fd9\u6837\u5f88\u5f3a\u7684\u76f4\u89c9\u3002\u4f60\u53ef\u80fd\u5f88\u5173\u5fc3\u53e5\u5b50\u4e2d\u54ea\u91cc\u4f1a\u6709\u4e00\u4e2a\u5355\u8bcd\u51fa\u73b0\u3002\u50cf\u7d20\u5f7c\u6b64\u5f88\u9760\u8fd1\u7684\u65f6\u5019\u53ef\u80fd\u4f1a\u6709\u76f8\u5173\u7684\u8bed\u4e49\uff0c\u4f46\u662f\u76f8\u540c\u901a\u5e38\u5bf9\u4e8e\u5355\u8bcd\u6765\u8bf4\u4e0d\u662f\u4e00\u56de\u4e8b\u3002\u5728\u5f88\u591a\u8bed\u8a00\u4e2d\uff0c\u90e8\u5206\u77ed\u8bed\u53ef\u4ee5\u88ab\u5206\u5272\u51e0\u4e2a\u5176\u4ed6\u7684\u5355\u8bcd\u3002\u5408\u6210\u65b9\u9762\u4e5f\u4e0d\u662f\u90a3\u4e48\u660e\u663e\u3002\u4f46\u662f\uff0c\u5355\u8bcd\u5f88\u660e\u663e\u90fd\u662f\u7528\u540c\u6837\u7684\u65b9\u5f0f\u7ec4\u5408\u7684\uff0c\u6bd4\u5982\u5f62\u5bb9\u8bcd\u4fee\u9970\u540d\u8bcd\uff0c\u5355\u6570\u8fd9\u4e2a\u80fd\u8d77\u591a\u5927\u4f5c\u7528\u5462\uff1f\u5728\u9ad8\u7ef4\u8868\u793a\u4e2d\u7684\u610f\u4e49\u4e5f\u5e76\u6ca1\u6709\u8ba1\u7b97\u673a\u89c6\u89c9\u4e2d\u90a3\u4e48\u663e\u7136\u4e86\u3002 \u8bf4\u4e86\u8fd9\u4e48\u591a\uff0c\u4f3c\u4e4eCNN\u5e76\u4e0d\u9002\u5408NLP\u54ce\u3002\u4f46\u662fRNN\u770b\u8d77\u6765\u4f3c\u4e4e\u66f4\u52a0\u8ba9\u4eba\u6709\u611f\u89c9\u3002\u5b83\u5c31\u60f3\u6211\u4eec\u5982\u4f55\u5904\u7406\u8bed\u8a00\u4e00\u6837\uff0c\u81f3\u5c11\u50cf\u6211\u4eec\u601d\u8003\u7684\u90a3\u6837\uff1a\u6709\u987a\u5e8f\u7684\u4ece\u5de6\u5230\u53f3\u8bfb\u53d6\u53e5\u5b50\u3002\u5f88\u5e78\u8fd0\uff0cCNN\u8fd8\u662f\u53ef\u4ee5\u7528\u7684\u3002\u6bd5\u7adf\u8fd8\u662f\u90a3\u53e5\u8001\u8bdd\uff1a\u201c\u6240\u6709\u6a21\u578b\u90fd\u662f\u9519\u7684\uff0c\u4f46\u662f\u6709\u4e00\u4e9b\u8fd8\u662f\u53ef\u4ee5\u7528\u7684\u3002\u201d\u6700\u7ec8\u8868\u73b0\u6765\u770b\uff0cCNN\u8fd8\u662f\u8868\u73b0\u5f97\u975e\u5e38\u597d\u7684\u3002\u7b80\u5355\u7684Bag of Word\u6a21\u578b\u770b\u6765\u8981\u9000\u4f4d\u4e86\uff0c\u56e0\u4e3aBag of Word\u6a21\u578b\u5f88\u660e\u663e\u662f\u4e00\u4e2a\u8fc7\u5ea6\u7b80\u5316\u4e86\u7684\u6a21\u578b\uff0c\u800c\u4e14\u5047\u8bbe\u4e5f\u4e0d\u5bf9\uff0c\u4f46\u662f\u5b83\u5f53\u4e86\u8001\u5927\u5f88\u591a\u5e74\u4e86\uff0c\u800c\u4e14\u4e5f\u8fd8\u662f\u6709\u4e00\u4e9b\u975e\u5e38\u597d\u7684\u7ed3\u679c\u7684\u3002 \u4e00\u4e2a\u5173\u4e8eCNN\u7684\u5f88\u5927\u7684\u4e89\u8bae\u5c31\u662f\u4ed6\u592a\u5feb\u4e86\uff0c\u975e\u5e38\u975e\u5e38\u5feb\u3002\u5377\u79ef\u662f\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u7684\u4e00\u4e2a\u548c\u5174\u5e76\u4e14\u5e94\u7528\u4e8eGPU\u7684\u786c\u4ef6\u6c34\u5e73\u4e0a\u3002\u4e0en-gram\u8fd9\u4e9b\u76f8\u6bd4\uff0cCNN\u5728\u8868\u793a\u65b9\u9762\u4e5f\u662f\u975e\u5e38\u6709\u6548\u7684\u3002\u5728\u8bcd\u5178\u5f88\u5927\u7684\u60c5\u51b5\u4e0b\uff0c\u8ba1\u7b97\u4efb\u4f55\u8d85\u8fc73-grams\u7684\u4e1c\u897f\u53ef\u80fd\u4f1a\u53d8\u5f97\u975e\u5e38\u6602\u8d35\u3002\u751a\u81f3Google\u4e5f\u4e0d\u8ba1\u7b97\u8d85\u8fc75-grams\u7684\u4e1c\u897f\u3002\u5377\u79effilters\u4f1a\u81ea\u52a8\u5730\u5b66\u4e60\u5f88\u597d\u7684\u8868\u793a\uff0c\u800c\u4e14\u4e0d\u9700\u8981\u8868\u793a\u51fa\u6574\u4e2a\u8bcd\u5178\u3002\u6240\u4ee5\uff0c\u8ba9filter\u7684\u5bbd\u5ea6\u8d85\u8fc75\u662f\u5b8c\u5168\u5408\u7406\u7684\u3002\u6211\u66f4\u503e\u5411\u4e8e\u8ba4\u4e3a\uff0c\u5f88\u591a\u5728\u7b2c\u4e00\u5c42\u5b66\u4e60\u5230\u7684filter\u901a\u5e38\u4f1a\u6293\u4f4f\u4e00\u4e9b\u5f88\u76f8\u4f3c\u7684\u7279\u5f81\uff0c\u4f46\u662f\u8868\u793a\u8d77\u6765\u66f4\u52a0\u7d27\u51d1\u3002","title":"\u90a3\u4e48\uff0c\u5982\u4f55\u7528\u5230NLP\u5462\uff1f"},{"location":"pages/nlp/nlpinfo/cnn-nlp-understand/#CNN\u8d85\u53c2\u6570","text":"\u5728\u89e3\u91caCNN\u5982\u4f55\u9002\u7528\u4e8eNLP\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u89e3\u91ca\u9700\u8981\u505a\u7684\u51e0\u4e2a\u53c2\u6570\u9009\u62e9\uff0c\u5f53\u4f60\u8981\u5efa\u7acb\u4e00\u4e2aCNN\u7684\u65f6\u5019\u3002\u6709\u53ef\u80fd\uff0c\u8fd9\u4f1a\u5e2e\u4f60\u66f4\u597d\u5730\u7406\u89e3\u8fd9\u4e2a\u9886\u57df\u7684\u6587\u732e\u3002 \u7a84\u7684vs\u5bbd\u7684\u5377\u79ef \u5f53\u6211\u89e3\u91ca\u5377\u79ef\u7684\u65f6\u5019\uff0c\u6211\u5ffd\u7565\u4e86\u4e00\u4e22\u4e22\u5173\u4e8e\u5982\u4f55\u5e94\u7528filter\u7684\u4e1c\u897f\u3002\u5728\u77e9\u9635\u7684\u4e2d\u5fc3\u4f7f\u7528\u4e00\u4e2a3X3\u7684filter\u662fwork\u7684\uff0c\u4f46\u662f\u5982\u679c\u5728\u8fb9\u4e0a\u5462\uff1f\u8fd9\u65f6\u5019\u6211\u4eec\u600e\u4e48\u5bf9\u77e9\u9635\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7528filter\uff1f\u4f60\u53ef\u4ee5\u4f7f\u7528Zero-padding\u3002\u6240\u6709\u5728\u77e9\u9635\u5916\u9762\u7684\u5143\u7d20\u90fd\u53d6\u4f5c0\u3002\u901a\u8fc7\u8fd9\u6837\u505a\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7528filter\u5566\uff0c\u5e76\u4e14\u5f97\u5230\u4e00\u4e2a\u66f4\u5927\u7684\u6216\u8005\u7b49\u5927\u7684\u8f93\u51fa\u3002\u4f7f\u7528zero-padding\u4e5f\u88ab\u79f0\u4e3a\u5bbd\u5377\u79ef\uff0c\u4e0d\u4f7f\u7528\u7684\u8bdd\u5c31\u79f0\u4e3a\u7a84\u5377\u79ef\u3002\u4f60\u53ef\u4ee5\u53d1\u73b0\u4e3a\u4ec0\u4e48\u5bbd\u5377\u79ef\u662f\u6709\u7528\u7684\uff0c\u751a\u81f3\u662f\u5fc5\u8981\u7684\uff0c\u5f53\u4f60\u6709\u4e00\u4e2a\u76f8\u5bf9\u4e8e\u8f93\u5165\u5927\u5c0f\u6765\u8bf4\u5f88\u5927\u7684filter\u65f6\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u8f93\u51fa\u5927\u5c0f\u7684\u516c\u5f0f\u662f \u6b65\u957f \u53e6\u5916\u4e00\u4e2a\u5377\u79ef\u7684\u8d85\u53c2\u6570\u5c31\u662f\u6b65\u957f\u5927\u5c0f\uff0c\u662f\u6307\u6bcf\u6b21filter\u632a\u52a8\u591a\u8fdc\u3002\u5728\u6240\u6709\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6b65\u957f\u90fd\u662f1\uff0c\u5e76\u4e14\u90a3\u4e9bfilter\u90fd\u662f\u91cd\u5408\u7684\u3002\u4e00\u4e2a\u66f4\u5927\u6b65\u957f\u53ef\u4ee5\u4f7f\u5f97filter\u4f7f\u7528\u7684\u6b21\u6570\u66f4\u5c11\u4ee5\u53ca\u5c0f\u7684\u8f93\u51fa\u3002\u5728\u6587\u732e\u4e2d\uff0c\u901a\u5e38\u6b65\u957f\u90fd\u662f1\uff0c\u4f46\u662f\u4e00\u4e2a\u66f4\u5927\u7684\u6b65\u957f\u53ef\u4ee5\u4f7f\u5f97\u4f60\u7684\u6a21\u578b\u7684\u8868\u73b0\u66f4\u50cfRNN\uff0ci.e.\u50cftree\u3002 Pooling\u5c42 CNN\u4e2d\u4e00\u4e2a\u5173\u952e\u7684\u90e8\u5206\u5c31\u662fpooling\u5c42\uff0c\u901a\u5e38\u7528\u5728\u5377\u79ef\u5c42\u540e\u9762\u3002pooling\u5c42\u91cd\u91c7\u6837\u4ed6\u4eec\u7684\u8f93\u5165\u3002\u6700\u901a\u5e38\u7684\u65b9\u5f0f\u53bbpooling\u5c31\u662f\u5bf9\u6bcf\u4e2afilter\u7684\u7ed3\u679c\u7528a_max\u7b97\u5b50\u3002\u4f60\u6ca1\u6709\u5fc5\u8981\u53bbpool\u6574\u4e2a\u77e9\u9635\uff0c\u4f60\u53ea\u9700\u8981pool\u90a3\u4e2a\u5c0f\u6846\u6846\u3002\u6bd4\u5982\u4e0b\u9762\u8fd9\u4e2amax pooling\u5bf9\u4e8e\u4e00\u4e2a2X2\u7684\u5c0f\u6846(\u5728NLP\u4e2d\uff0c\u6211\u4eec\u901a\u5e38\u4f1apool over\u6574\u4e2a\u8f93\u51fa\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2afilter\u8f93\u51fa\u4e00\u4e2a\u6570)\uff1a \u4e3a\u4ec0\u4e48\u8981pooling\uff1f\u6709\u5f88\u591a\u539f\u56e0\u3002pooling\u7684\u4e00\u4e2a\u7279\u6027\u5c31\u662f\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e2a\u56fa\u5b9a\u5927\u5c0f\u7684\u8f93\u51fa\u77e9\u9635\uff0c\u8fd9\u901a\u5e38\u5bf9\u4e8e\u5206\u7c7b\u6765\u8bf4\u662f\u5fc5\u8981\u7684\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u67091000\u4e2afilters\u5e76\u4e14\u5bf9\u6bcf\u4e2afilters\u90fd\u4f7f\u7528max pooling\uff0c\u90a3\u4e48\u4e45\u4f1a\u5f97\u5230\u4e00\u4e2a1000\u7ef4\u7684\u8f93\u51fa\uff0c\u4e0d\u7ba1\u4f60\u7684filter\u4ee5\u53ca\u8f93\u5165\u7684\u5927\u5c0f\u3002\u8fd9\u5c31\u4f7f\u5f97\u4f60\u53ef\u4ee5\u4f7f\u7528\u957f\u5ea6\u53d8\u5316\u7684\u53e5\u5b50\u4ee5\u53ca\u5c3a\u5bf8\u53d8\u5316\u7684filters\uff0c\u4f46\u662f\u603b\u662f\u4f1a\u8f93\u51fa\u76f8\u540c\u7ef4\u5ea6\u7684\u4e1c\u897f\u7ed9\u5206\u7c7b\u5668\u3002 Pooling\u4e5f\u80fd\u591f\u51cf\u5c11\u8f93\u51fa\u7684\u7ef4\u5ea6\uff0c\u4f46\u662f\u4e5f\u6709\u5e0c\u671b\u4fdd\u5b58\u6700\u7a81\u51fa\u7684\u4fe1\u606f\u3002\u4f60\u53ef\u60f3\u8c61\u4e00\u4e0b\u6bcf\u4e2a\u5206\u7c7b\u5668\u90fd\u7528\u6765\u63a2\u6d4b\u4e00\u4e2a\u7279\u5b9a\u7684\u7279\u5f81\uff0c\u6bd4\u5982\u68c0\u6d4b\u662f\u5426\u53e5\u5b50\u4e2d\u6709\u5426\u5b9a\uff0c\u7c7b\u4f3c\u201c\u4e0d\u60ca\u5947\u201d\u3002\u5982\u679c\u8fd9\u4e2a\u77ed\u8bed\u51fa\u73b0\u5728\u53e5\u5b50\u7684\u67d0\u4e2a\u5730\u65b9\uff0c\u5462\u4e48\u4f7f\u7528filterto\u90a3\u4e2a\u5730\u65b9\u7684\u7ed3\u679c\u5c31\u662f\u4ea7\u751f\u4e00\u4e2a\u5f88\u5927\u7684\u503c\uff0c\u4f46\u662f\u4ed6\u7684\u5468\u56f4\u7684\u503c\u90fd\u5f88\u5c0f\u3002\u901a\u8fc7\u4f7f\u7528max\u7b97\u5b50\uff0c\u4f60\u53ef\u4ee5\u4fdd\u5b58\u8fd9\u4e9b\u4fe1\u606f\u5173\u4e8e\u662f\u5426\u7279\u5f81\u4f1a\u51fa\u73b0\u5728\u53e5\u5b50\u91cc\u9762\uff0c\u4f46\u662f\u4f60\u4e5f\u4f1a\u5931\u53bb\u4e00\u4e9b\u4fe1\u606f\uff0c\u6bd4\u5982\u5b83\u51fa\u73b0\u7684\u4f4d\u7f6e\u3002\u4f46\u662f\u4f4d\u7f6e\u4fe1\u606f\u6709\u7528\u5417\uff1f\u662f\u7684\uff0c\u5f88\u6709\u7528\uff0c\u5b83\u5c31\u7c7b\u4f3c\u4e0ebag of n-grams\u6a21\u578b\u505a\u7684\u90a3\u6837\u3002\u4f60\u5931\u53bb\u4e86\u5168\u90e8\u5173\u4e8e\u4f4d\u7f6e\u7684\u4fe1\u606f\uff0c\u4f46\u662f\u4f60\u901a\u8fc7filter\u4fdd\u5b58\u4e86\u5c40\u90e8\u7684\u4fe1\u606f\uff0c\u6bd4\u5982\u662f\u201cnot amazing\u201d\u800c\u4e0d\u662f\u201camazing not\u201d \u5728\u56fe\u50cf\u8bc6\u522b\u4e2d\uff0cpooling\u4e5f\u63d0\u4f9b\u4e86\u57fa\u672c\u7684\u5e73\u79fb\u4ee5\u53ca\u65cb\u8f6c\u4e0d\u53d8\u6027\u3002\u5f53\u4f60\u5728\u4e00\u4e2a\u533a\u57df\u4e0a\u7528pooling \u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u8f93\u51fa\u4e5f\u8fd8\u662f\u4f1a\u8fd1\u4f3c\u5730\u76f8\u540c\uff0c\u5373\u4f7f\u4f60\u5e73\u79fb\u6216\u8005\u5148\u8f6c\u8fd9\u4e2a\u56fe\u50cf\u51e0\u4e2a\u50cf\u7d20\u70b9\uff0c\u56e0\u4e3amax\u7b97\u5b50\u4f1a\u5f97\u51fa\u76f8\u540c\u7684\u503c\u3002 channel \u6700\u540e\u4e00\u4e2a\u6982\u5ff5\u5c31\u662fchannels\u3002channels\u662f\u5bf9\u8f93\u5165\u6570\u636e\u7684\u4e0d\u540c\u89c6\u89d2\u3002\u6bd4\u5982\uff0c\u5728\u56fe\u50cf\u8bc6\u522b\u4e2d\uff0c\u4f60\u901a\u5e38\u4f1a\u6709RGB channels\u3002 \u4f60\u80fd\u591f\u5728\u8fd9\u4e9bchannels\u4e0a\u4f7f\u7528\u5377\u79ef\u3002\u5728NLP\u4e2d\uff0c\u4f60\u53ef\u4ee5\u60f3\u8c61\u6709\u5404\u79cd\u5404\u6837\u7684channels\uff1a\u5bf9\u4e8e\u4e0d\u540c\u7684word embeddings(Word2Vec, GloVe), \u4f60\u53ef\u4ee5\u4e0d\u540c\u7684channels\u3002\u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u6709\u4e00\u4e2achannel\u5bf9\u4e8e\u5728\u4e0d\u540c\u8bed\u8a00\u4e2d\u7684\u76f8\u540c\u7684\u53e5\u5b50\u3002","title":"CNN\u8d85\u53c2\u6570"},{"location":"pages/nlp/nlpinfo/cnn-nlp-understand/#NLP\u4e2d\u7684CNN","text":"\u73b0\u5728\uff0c\u6211\u4eec\u770b\u4e00\u4e0bCNN\u5728NLP\u4e2d\u7684\u5e94\u7528\u3002\u6211\u4f1a\u5c3d\u529b\u5730\u53bb\u603b\u7ed3\u4e00\u4e9b\u7814\u7a76\u6210\u679c\u3002 \u7ed9CNN\u6700\u9002\u5408\u7684\u4efb\u52a1\u5c31\u662f\u5206\u7c7b\uff0c\u6bd4\u5982Sentiment Analysis, Spam Detection, \u6216\u8005Topic Categorization. \u5377\u79ef\u548cPooling\u7b97\u5b50\u4f1a\u4e22\u5931\u4e00\u4e9b\u5c40\u90e8\u7684\u4f4d\u7f6e\u4fe1\u606f\uff0c\u4ece\u800c\u4f7f\u5f97\u53e5\u5b50\u6807\u7b7e\u53d8\u6210\u4e86Part of Speech\u6807\u7b7e\u6216\u8005Entity\u63d0\u53d6\u53d8\u5f97\u66f4\u52a0\u56f0\u96be\u5bf9\u4e8e\u7eaf\u7cb9\u7684CNN\u6846\u67b6\u3002 [1]\u8bc4\u4f30\u4e00\u4e2aCNN\u6846\u67b6\u5728\u5404\u79cd\u5206\u7c7b\u6570\u636e\u4e0a\uff0c\u7edd\u5927\u591a\u6570\u90fd\u662fSentiment Analysis and Topic Categorization\u3002CNN\u6846\u67b6\u90fd\u8868\u73b0\u5f97\u975e\u5e38\u597d\u3002\u66f4\u795e\u5947\u7684\u662f\uff0c\u5728\u8fd9\u7bc7paper\u4e2d\u7684\u7f51\u7edc\u662f\u975e\u5e38\u7684\u7b80\u5355\uff0c\u5e76\u4e14\u4e5f\u662f\u5b83\u5f88powerful\u7684\u539f\u56e0\u3002\u8f93\u5165\u5c42\u662f\u4e00\u4e2a\u7531\u4e32\u8054word2vec word filter\u7ec4\u6210\u7684\u53e5\u5b50\u3002\u7136\u540e\u7d27\u63a5\u7740\u662f\u4e00\u4e2a\u5e26\u6709\u591a\u91cdfilter\u7684\u5377\u79ef\u5c42\uff0c\u7136\u540e\u662f\u4e00\u4e2amax-pooling\u5c42\uff0c\u6700\u540e\u662f\u4e00\u4e2asoftmax\u5206\u7c7b\u5668\u3002\u8fd9\u7bc7\u8bba\u6587\u4e5f\u5b9e\u73b0\u4e86\u4e24\u79cdchannels\uff1astatic\u548cdynamic word embeddings\uff0c \u5176\u4e2d\u4e00\u79cd\u662f\u4f1a\u5728\u8bad\u7ec3\u4e2d\u8fdb\u884c\u8c03\u6574\u7684\uff0c\u800c\u53e6\u4e00\u79cd\u4e0d\u4f1a\u3002[2]\u63d0\u51fa\u4e86\u4e00\u79cd\u7c7b\u4f3c\u7684\u4f46\u662f\u8ddf\u5bb6\u590d\u6742\u7684\u795e\u7ecf\u7f51\u7edc\u7ed3\u6784\u3002[6]\u53e6\u5916\u8fd8\u589e\u52a0\u4e86\u4e00\u5c42\u6765\u8fdb\u884c\u201c\u8bed\u4e49\u805a\u7c7b\u201d\u3002 [4]\u4ece\u5934\u5f00\u59cb\u8bad\u7ec3CNN\uff0c\u6ca1\u6709\u4f7f\u7528\u9884\u5148\u8bad\u7ec3\u597d\u7684word vector\uff0c\u50cfWord2Vec\uff0c GloVe\u3002\u5b83\u76f4\u63a5\u628a\u5377\u79ef\u8fd0\u7528\u5230one-hot\u5411\u91cf\u4e0a\u3002\u8fd9\u4e2a\u4f5c\u5219\u4e5f\u63d0\u51fa\u4e86\u4e00\u4e2a\u7a7a\u95f4\u6709\u6548\u7684bag-of-words-like\u7684\u8868\u793a\u6765\u8868\u793a\u8f93\u5165\u6570\u636e\u3002\uff0c\u4ece\u800c\u51cf\u5c11\u795e\u7ecf\u7f51\u7edc\u4e2d\u9700\u8981\u5b66\u4e60\u7684\u53c2\u6570\u3002\u5728[5]\u4e2d\uff0c\u4f5c\u8005\u4f7f\u7528\u53e6\u5916\u4e00\u79cd\u975e\u76d1\u7763\u5f0f\u7684\"region embedding\"\uff0c\u4e5f\u5c31\u662f\u901a\u8fc7\u4f7f\u7528CNN\u9884\u6d4b\u6587\u672c\u4e2d\u7684\u5185\u5bb9\u6765\u5b66\u4e60\u3002\u8fd9\u4e9b\u8bba\u6587\u4e2d\u7684\u65b9\u6cd5\u4f3c\u4e4e\u5bf9\u4e8e\u957f\u6587\u672c\u90fd\u662f\u6709\u6548\u7684\uff0c\u4f46\u662f\u4ed6\u4eec\u5bf9\u4e8e\u77ed\u6587\u672c\u7684\u8868\u73b0(\u50cftweets)\u5e76\u4e0d\u662f\u5f88\u597d\u3002\u76f4\u89c9\u4e0a\u6765\u770b\uff0c\u8fd9\u662f\u6709\u9053\u7406\u7684\uff0c\u56e0\u4e3a\u4f7f\u7528\u9884\u5148\u8bad\u7ec3\u597d\u7684word embedding\u6765\u5bf9\u77ed\u6587\u672c\u8fdb\u884c\u5efa\u6a21\u5c06\u4f1a\u4ea7\u751f\u66f4\u591a\u7684\u8bef\u5dee\uff0c\u76f8\u5bf9\u4e8e\u957f\u6587\u672c\u6765\u8bf4\u3002 \u6784\u5efa\u4e00\u4e2aCNN\u6846\u67b6\u610f\u5473\u7740\u6709\u5f88\u591a\u5dee\u53c2\u6570\u8981\u9009\uff0c\u8f93\u5165\u7684\u8868\u793a(Word2Vec, GloVe, one-hot), \u5377\u79effilter\u7684\u6570\u91cf\u4ee5\u53ca\u5927\u5c0f\uff0cpooling\u7b56\u7565(max, average)\uff0c \u4ee5\u53ca\u6fc0\u6d3b\u51fd\u6570(ReLu, tanh). [7]\u8fdb\u884c\u4e86\u4e00\u4e2a\u5b9e\u8df5\u8bc4\u4f30\u5173\u4e8eCNN\u4e2d\u90a3\u4e9b\u53c2\u6570\u53d8\u5316\u7684\u5f71\u54cd\uff0c\u5e76\u4e14\u7814\u7a76\u4e86\u4ed6\u4eec\u5bf9\u4e8eCNN\u8868\u73b0\u4ee5\u53ca\u7ed3\u679c\u7684\u6ce2\u52a8\u7684\u5f71\u54cd\u3002\u5982\u679c\u4f60\u60f3\u4f7f\u7528\u4f60\u81ea\u5df1\u7684CNN\u6765\u8fdb\u884c\u6587\u672c\u5206\u7c7b\uff0c\u4f7f\u7528\u8fd9\u7bc7\u8bba\u6587\u7684\u7ed3\u679c\u4f5c\u4e3a\u4e00\u4e2a\u89e6\u53d1\u70b9\u65f6\u4e0d\u9519\u7684\u3002\u5176\u4e2d\u4e00\u4e9b\u6709\u70b9\u610f\u601d\u7684\u7ed3\u679c\uff0c\u6bd4\u5982 max-pooling \u4f18\u4e8eaverage-pooling, \u7406\u60f3\u7684filter\u5927\u5c0f\u662f\u5f88\u91cd\u8981\u7684\uff0c\u6b63\u5219\u5316\u5728NLP\u4e2d\u770b\u8d77\u6765\u4e5f\u4e0d\u4f1a\u6709\u5f88\u5927\u7684\u4f5c\u7528\u3002 [8]\u63a2\u8ba8\u4e86CNN\u5728relationship\u63d0\u53d6\u4ee5\u53carelationship\u5206\u7c7b\u4e2d\u7684\u5e94\u7528\u3002\u9664\u4e86word vectors\uff0c\u4f5c\u8005\u4f7f\u7528\u4e86word\u4e0e\u611f\u5174\u8da3\u7684entity\u7684\u76f8\u5bf9\u4f4d\u7f6e\u4f5c\u4e3a\u4e00\u4e2a\u5377\u79ef\u5c42\u7684\u8f93\u5165\u3002\u8fd9\u4e2a\u6a21\u578b\u5047\u5b9a\u4e86enetities\u7684\u4f4d\u7f6e\u662f\u7ed9\u5b9a\u7684\uff0c\u5e76\u4e14\u6bcf\u4e2a\u8f93\u5165\u90fd\u5b58\u5728\u4e00\u4e2arelationship\u3002[9]\u548c[10]\u8ba8\u8bba\u4e86\u7c7b\u4f3c\u7684\u6a21\u578b\u3002 \u53e6\u4e00\u4e2a\u6709\u610f\u601d\u7684\u5e94\u7528\u53ef\u4ee5\u88ab\u627e\u5230\u5728[11]\u548c[12]\u4e2d\u3002\u8fd9\u4e9bpaper\u662f\u6765\u81eaMicrosoft reasearch. \u8fd9\u4e9bpapers\u63cf\u8ff0\u4e86\u5982\u4f55\u53bb\u5b66\u4e60\u53e5\u5b50\u7684\u8bed\u4e49\u8868\u793a\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u7528\u505ainformation retrieval. paper\u4e2d\u7684\u4f8b\u5b50\u5305\u62ec\u63a8\u8350\u53ef\u80fd\u7684\u6587\u4ef6\u7ed9\u4f7f\u7528\u8005\uff0c\u57fa\u4e8e\u4ed6\u4eec\u6b63\u5728\u8bfb\u7684\u4e1c\u897f\u3002\u8fd9\u4e2a\u53e5\u5b50\u8868\u793a\u88ab\u8bad\u7ec3\u662f\u57fa\u4e8e\u641c\u7d22\u5f15\u64celog\u6570\u636e\u3002 \u7edd\u5927\u591a\u6570\u7684CNN\u6846\u67b6\u5b66\u4e60words\u548c\u53e5\u5b50\u7684embedding\uff08\u4f4e\u7ef4\u8868\u793a\uff09\u4f5c\u4e3a\u8bb8\u68bf\u7684\u4e00\u90e8\u5206\u3002\u5e76\u4e0d\u662f\u6240\u6709\u7684paper\u90fd\u7814\u7a76\u8fd9\u4e2a\u8bad\u7ec3\u8fc7\u7a0b\u6216\u8005\u7814\u7a76\u8fd9\u4e2aembedding\u662f\u591a\u4e48\u7684\u6709\u610f\u4e49\u3002[13]\u5c55\u793a\u4e86\u4e00\u4e2aCNN\u6846\u67b6\u6765\u7ed9Facebook\u5e16\u5b50\u9884\u6d4b\u8bdd\u9898\u6807\u7b7e\uff0c\u800c\u4e14\u540c\u65f6\u4ea7\u751f\u6709\u610f\u4e49\u7684\u5355\u8bcd\u548c\u53e5\u5b50\u7684embedding\u3002 \u8fd9\u4e9b\u5b66\u5230\u7684embedding\u7136\u540e\u6210\u529f\u5730\u7528\u5728\u4e86\u53e6\u4e00\u4e2a\u4efb\u52a1\u4e0a\u9762\uff1a\u63a8\u8350\u6f5c\u5728\u7684\u6587\u6863\u7ed9\u8bfb\u8005\uff0c\u57fa\u4e8e\u4ed6\u4eec\u70b9\u51fb\u6570\u636e\u3002 Character-Level CNNs \u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6240\u6709\u7684\u5c55\u793a\u7684\u6a21\u578b\u90fd\u662f\u57fa\u4e8ewords\u7684\u3002\u4f46\u662f\u4e5f\u6709\u4e00\u4e9b\u7814\u7a76\u76f4\u63a5\u628aCNN\u7528\u5728\u5b57\u7b26\u4e0a\u9762\u3002[14]\u5b66\u4e60\u4e86character-level embedding\uff0c\u628a\u4ed6\u4eec\u548c\u9884\u5148\u8bad\u7ec3\u597d\u7684embedding\u7ed3\u5408\u5728\u4e00\u8d77\uff0c\u7136\u540e\u4f7f\u7528CNN\u6807\u7b7ePoS\u3002[15][16]\u63a2\u8ba8\u4e86CNN\u7684\u4f7f\u7528\u6765\u76f4\u63a5\u4ece\u5b57\u7b26\u4e2d\u5b66\u4e60\uff0c\u4e0d\u9700\u8981\u4efb\u4f55\u9884\u5148\u8bad\u7ec3\u597d\u7684embedding\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u4f5c\u8005\u7528\u6765\u4e00\u4e2a\u76f8\u5bf9\u6df1\u7684\u795e\u7ecf\u7f51\u7edc(9\u5c42)\uff0c \u5e76\u4e14\u628a\u5b83\u7528\u5728\u4e86sentiment anslysis\u548ctext categorization\u4e0a\u9762\u3002\u7ed3\u679c\u8868\u660e\u76f4\u63a5\u4ece\u5b57\u7b26\u8f93\u5165\u6765\u5b66\u4e60\u5728\u5927\u6570\u636e\u96c6(\u4e0a\u767e\u4e07)\u4e0a\u5f0f\u8868\u73b0\u5f97\u975e\u5e38\u597d\u7684\u3002\u4f46\u662f\u5728\u5c0f\u6570\u636e\u96c6(\u51e0\u767e\u4e2a\uff0c\u51e0\u5343\u4e2a)\u4e0a\u8868\u73b0\u8fd8\u4e0d\u5982\u7b80\u5355\u6a21\u578b\u3002[17]\u63a2\u7d22\u4e86\u4f7f\u7528\u5b57\u7b26\u578bCNN\u7684\u8f93\u51fa\u4f5c\u4e3aLSTM\u6bcf\u4e2a\u65f6\u95f4\u70b9\u7684\u8f93\u5165\u3002 \u4ee4\u4eba\u60ca\u5947\u7684\u662f\uff0c\u57fa\u672c\u4e0a\u6240\u6709\u7684paper\u90fd\u662f\u8fd11-2\u5e74\u5185\u51fa\u7248\u7684\u3002\u5f88\u660e\u663e\uff0c\u4e4b\u524d\u662f\u4e00\u5b9a\u51fa\u73b0\u4e86\u5173\u4e8eCNN\u5728NLP\u4e2d\u5e94\u7528\u7684\u91cd\u8981\u5de5\u4f5c\u3002","title":"NLP\u4e2d\u7684CNN"},{"location":"pages/nlp/nlpinfo/cnn-nlp-understand/#Paper-References","text":"[1] Kim, Y. (2014). Convolutional Neural Networks for Sentence Classification. Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing (EMNLP 2014), 1746\u20131751. [2] Kalchbrenner, N., Grefenstette, E., & Blunsom, P. (2014). A Convolutional Neural Network for Modelling Sentences. Acl, 655\u2013665. [3] Santos, C. N. dos, & Gatti, M. (2014). Deep Convolutional Neural Networks for Sentiment Analysis of Short Texts. In COLING-2014 (pp. 69\u201378). [4] Johnson, R., & Zhang, T. (2015). Effective Use of Word Order for Text Categorization with Convolutional Neural Networks. To Appear: NAACL-2015, (2011). [5] Johnson, R., & Zhang, T. (2015). Semi-supervised Convolutional Neural Networks for Text Categorization via Region Embedding. [6] Wang, P., Xu, J., Xu, B., Liu, C., Zhang, H., Wang, F., & Hao, H. (2015). Semantic Clustering and Convolutional Neural Network for Short Text Categorization. Proceedings ACL 2015, 352\u2013357. [7] Zhang, Y., & Wallace, B. (2015). A Sensitivity Analysis of (and Practitioners\u2019 Guide to) Convolutional Neural Networks for Sentence Classification, [8] Nguyen, T. H., & Grishman, R. (2015). Relation Extraction: Perspective from Convolutional Neural Networks. Workshop on Vector Modeling for NLP, 39\u201348. [9] Sun, Y., Lin, L., Tang, D., Yang, N., Ji, Z., & Wang, X. (2015). Modeling Mention , Context and Entity with Neural Networks for Entity Disambiguation, (Ijcai), 1333\u20131339. [10] Zeng, D., Liu, K., Lai, S., Zhou, G., & Zhao, J. (2014). Relation Classification via Convolutional Deep Neural Network. Coling, (2011), 2335\u20132344. [11] Gao, J., Pantel, P., Gamon, M., He, X., & Deng, L. (2014). Modeling Interestingness with Deep Neural Networks. [12] Shen, Y., He, X., Gao, J., Deng, L., & Mesnil, G. (2014). A Latent Semantic Model with Convolutional-Pooling Structure for Information Retrieval. Proceedings of the 23 rd ACM International Conference on Conference on Information and Knowledge Management \u2013 CIKM \u201914, 101\u2013110. [13] Weston, J., & Adams, K. (2014). # T AG S PACE : Semantic Embeddings from Hashtags, 1822\u20131827. [14] Santos, C., & Zadrozny, B. (2014). Learning Character-level Representations for Part-of-Speech Tagging. Proceedings of the 31 st International Conference on Machine Learning, ICML-14(2011), 1818\u20131826. [15] Zhang, X., Zhao, J., & LeCun, Y. (2015). Character-level Convolutional Networks for Text Classification, 1\u20139. [16] Zhang, X., & LeCun, Y. (2015). Text Understanding from Scratch. arXiv E-Prints, 3, 011102. [17] Kim, Y., Jernite, Y., Sontag, D., & Rush, A. M. (2015). Character-Aware Neural Language Models. \u51e1\u672c\u7f51\u6ce8\u660e\"\u6765\u6e90\uff1aXXX \"\u7684\u6587/\u56fe/\u89c6\u9891\u7b49\u7a3f\u4ef6\uff0c\u672c\u7f51\u8f6c\u8f7d\u51fa\u4e8e\u4f20\u9012\u66f4\u591a\u4fe1\u606f\u4e4b\u76ee\u7684\uff0c\u5e76\u4e0d\u610f\u5473\u7740\u8d5e\u540c\u5176\u89c2\u70b9\u6216\u8bc1\u5b9e\u5176\u5185\u5bb9\u7684\u771f\u5b9e\u6027\u3002\u5982\u6d89\u53ca\u4f5c\u54c1\u5185\u5bb9\u3001\u7248\u6743\u548c\u5176\u5b83\u95ee\u9898\uff0c\u8bf7\u4e0e\u672c\u7f51\u8054\u7cfb\uff0c\u6211\u4eec\u5c06\u5728\u7b2c\u4e00\u65f6\u95f4\u5220\u9664\u5185\u5bb9\uff01 \u4f5c\u8005: \u7acb\u8db3\u5f53\u4e0b \u6765\u6e90\uff1a https://zhuanlan.zhihu.com/p/46531725","title":"Paper References"},{"location":"pages/nlp/nlpinfo/hands-on-guide-to-pattern/","text":"A Python Tool for Effective Text Processing \u00b6 Text Processing mainly requires Natural Language Processing( NLP), which is processing the data in a useful way so that the machine can understand the Human Language with the help of an application or product. Using NLP we can derive some information from the textual data such as sentiment, polarity, etc. which are useful in creating text processing based applications. Python provides different open-source libraries or modules which are built on top of NLTK and helps in text processing using NLP functions. Different libraries have different functionalities that are used on data to gain meaningful results. One such Library is Pattern. Pattern is an open-source python library and performs different NLP tasks. It is mostly used for text processing due to various functionalities it provides. Other than text processing Pattern is used for Data Mining i.e we can extract data from various sources such as Twitter, Google, etc. using the data mining functions provided by Pattern. In this article, we will try and cover the following points: NLP Functionalities of Pattern Data Mining Using Pattern Implementation: \u00b6 We will start by installing Pattern using the pip install pattern. Importing required library Different functionalities are defined under different functions we will import them as and when required as we move ahead in this article. We will be working in the English language so we will be using \u2018en\u2019 for the English module. Let us start with some basic functionalities of Pattern for NLP operations NLP Operations using Pattern We will go through some of the most used and most important functionalities which are provided by Pattern. Starting with parsing a sentence. Parsing 1 2 from pattern.en import parse parse ( 'Hello Everyone and Welcome to Analytics India Magazine' ) Here we can see the output of the parse function differentiate the words in the sentence as a noun, verb, subject, or subject. We can also use the \u2018pprint\u2019 function defined in the pattern library to display the parsed sentence in a clear manner. Also, we can set different parameters for parses such as lemmata, tokenize, encoding, etc. All these parameters can be used in parsing only so that we do not have to use a separate function for different properties. 1 2 from pattern.en import pprint pprint ( parse ( 'Hello Everyone and Welcome to Analytics India Magazine' , relations = True , tokenize = True , lemmata = True )) N-Grams N-Gram function is used to find all the n-grams in a given text string. 1 2 from pattern.en import ngrams print ( ngrams ( \"Hello Everyone and Welcome to Analytics India Magazine\" , n = 3 )) Sentiment Analysis Sentiment function tries to identify the opinion or view that is held by the particular text string. Sentiment function returns both polarity and the subjectivity of the given text. The Polarity value ranges between 1(Highly Positive) to -1(Highly Negative) and subjectivity value ranges between 0(Objective) to 1(Subjective). 1 2 from pattern.en import sentiment print ( sentiment ( \"He is a good boy but sometimes he behaves miserably\" )) We can see that the sentiment analysis says that the sentence is negative with high subjectivity. Modality Modality is one such function that makes it different from other python libraries based on NLP. The modality function is used to find the degree of certainty in a particular sentence. Its value ranges from -1 to 1. As defined in the Pattern library we can state that a sentence with a modality of 0.5 and above can be stated as a fact. 1 2 3 4 from pattern.en import modality text = parse ( 'He is a good boy but sometimes he behaves miserably' ) text = Sentence ( text ) print ( modality ( text )) The modality comes out to be zero which means that the sentence is neutral. Suggest Suggest function is used for spelling corrections but it is more than that. It not only checks the spelling it also gives you suggestions of what might be the correct word with their probabilities. This function also distinguishes pattern from other libraries. 1 2 from pattern.en import suggest print ( suggest ( \"Heroi\" )) Quantify Quantify function is used to provide a word count estimation of the words given. 1 2 3 from pattern.en import quantify a = quantify ([ 'Pencil' , 'Pencil' , 'Eraser' , 'Sharpener' , 'Sharpener' , 'Sharpener' , 'Scale' , 'Compass' ]) print ( a ) Data Mining using Pattern One of the most important features of Pattern is that it can be used for data mining through different platforms like Google, Twitter, Wikipedia, etc. Let us explore the data mining operations of the pattern library and extract some data using it. We will start by mining data using Google by entering a keyword that we want to search for and display the text along with the URL that is there in the search result. Google Mining 1 2 3 4 5 from pattern.web import Google google = Google () for results in google . search ( 'Analytics India Magazine' ): print ( results . url ) print ( results . text ) Twitter Mining We can also use twitter for mining data which we require. Let us explore it through an example. 1 2 3 4 5 from pattern.web import Twitter twitter = Twitter () for results in twitter . search ( 'Analytics India Magazine' ): print ( results . url ) print ( results . text ) Flickr Mining Flickr is an American image hosting and video hosting service, as well as an online community. Pattern can be used to extract data from Flickr. 1 2 3 4 5 from pattern.web import Flickr flickr = Flickr ( license = None ) for result in flickr . search ( 'Analytics India Magazine' ): print ( result . url ) print ( result . text ) Similarly, Pattern provides a large number of online data mining using different platforms and we can use them accordingly. Any text/graphics/videos and other articles on this website that indicate \"Source: xxx\" are reprinted on this website for the purpose of transmitting more information, which does not mean that we agree with their views or confirm the authenticity of their content. If you are involved in the content of the work, copyright and other issues, please contact this website, we will delete the content in the first time! Author: Himanshu Sharma Source: https://analyticsindiamag.com/hands-on-guide-to-pattern-a-python-tool-for-effective-text-processing-and-data-mining/","title":"NLP pattern\u5e93 hands on"},{"location":"pages/nlp/nlpinfo/hands-on-guide-to-pattern/#A-Python-Tool-for-Effective-Text-Processing","text":"Text Processing mainly requires Natural Language Processing( NLP), which is processing the data in a useful way so that the machine can understand the Human Language with the help of an application or product. Using NLP we can derive some information from the textual data such as sentiment, polarity, etc. which are useful in creating text processing based applications. Python provides different open-source libraries or modules which are built on top of NLTK and helps in text processing using NLP functions. Different libraries have different functionalities that are used on data to gain meaningful results. One such Library is Pattern. Pattern is an open-source python library and performs different NLP tasks. It is mostly used for text processing due to various functionalities it provides. Other than text processing Pattern is used for Data Mining i.e we can extract data from various sources such as Twitter, Google, etc. using the data mining functions provided by Pattern. In this article, we will try and cover the following points: NLP Functionalities of Pattern Data Mining Using Pattern","title":"A Python Tool for Effective Text Processing"},{"location":"pages/nlp/nlpinfo/hands-on-guide-to-pattern/#Implementation","text":"We will start by installing Pattern using the pip install pattern. Importing required library Different functionalities are defined under different functions we will import them as and when required as we move ahead in this article. We will be working in the English language so we will be using \u2018en\u2019 for the English module. Let us start with some basic functionalities of Pattern for NLP operations NLP Operations using Pattern We will go through some of the most used and most important functionalities which are provided by Pattern. Starting with parsing a sentence. Parsing 1 2 from pattern.en import parse parse ( 'Hello Everyone and Welcome to Analytics India Magazine' ) Here we can see the output of the parse function differentiate the words in the sentence as a noun, verb, subject, or subject. We can also use the \u2018pprint\u2019 function defined in the pattern library to display the parsed sentence in a clear manner. Also, we can set different parameters for parses such as lemmata, tokenize, encoding, etc. All these parameters can be used in parsing only so that we do not have to use a separate function for different properties. 1 2 from pattern.en import pprint pprint ( parse ( 'Hello Everyone and Welcome to Analytics India Magazine' , relations = True , tokenize = True , lemmata = True )) N-Grams N-Gram function is used to find all the n-grams in a given text string. 1 2 from pattern.en import ngrams print ( ngrams ( \"Hello Everyone and Welcome to Analytics India Magazine\" , n = 3 )) Sentiment Analysis Sentiment function tries to identify the opinion or view that is held by the particular text string. Sentiment function returns both polarity and the subjectivity of the given text. The Polarity value ranges between 1(Highly Positive) to -1(Highly Negative) and subjectivity value ranges between 0(Objective) to 1(Subjective). 1 2 from pattern.en import sentiment print ( sentiment ( \"He is a good boy but sometimes he behaves miserably\" )) We can see that the sentiment analysis says that the sentence is negative with high subjectivity. Modality Modality is one such function that makes it different from other python libraries based on NLP. The modality function is used to find the degree of certainty in a particular sentence. Its value ranges from -1 to 1. As defined in the Pattern library we can state that a sentence with a modality of 0.5 and above can be stated as a fact. 1 2 3 4 from pattern.en import modality text = parse ( 'He is a good boy but sometimes he behaves miserably' ) text = Sentence ( text ) print ( modality ( text )) The modality comes out to be zero which means that the sentence is neutral. Suggest Suggest function is used for spelling corrections but it is more than that. It not only checks the spelling it also gives you suggestions of what might be the correct word with their probabilities. This function also distinguishes pattern from other libraries. 1 2 from pattern.en import suggest print ( suggest ( \"Heroi\" )) Quantify Quantify function is used to provide a word count estimation of the words given. 1 2 3 from pattern.en import quantify a = quantify ([ 'Pencil' , 'Pencil' , 'Eraser' , 'Sharpener' , 'Sharpener' , 'Sharpener' , 'Scale' , 'Compass' ]) print ( a ) Data Mining using Pattern One of the most important features of Pattern is that it can be used for data mining through different platforms like Google, Twitter, Wikipedia, etc. Let us explore the data mining operations of the pattern library and extract some data using it. We will start by mining data using Google by entering a keyword that we want to search for and display the text along with the URL that is there in the search result. Google Mining 1 2 3 4 5 from pattern.web import Google google = Google () for results in google . search ( 'Analytics India Magazine' ): print ( results . url ) print ( results . text ) Twitter Mining We can also use twitter for mining data which we require. Let us explore it through an example. 1 2 3 4 5 from pattern.web import Twitter twitter = Twitter () for results in twitter . search ( 'Analytics India Magazine' ): print ( results . url ) print ( results . text ) Flickr Mining Flickr is an American image hosting and video hosting service, as well as an online community. Pattern can be used to extract data from Flickr. 1 2 3 4 5 from pattern.web import Flickr flickr = Flickr ( license = None ) for result in flickr . search ( 'Analytics India Magazine' ): print ( result . url ) print ( result . text ) Similarly, Pattern provides a large number of online data mining using different platforms and we can use them accordingly. Any text/graphics/videos and other articles on this website that indicate \"Source: xxx\" are reprinted on this website for the purpose of transmitting more information, which does not mean that we agree with their views or confirm the authenticity of their content. If you are involved in the content of the work, copyright and other issues, please contact this website, we will delete the content in the first time! Author: Himanshu Sharma Source: https://analyticsindiamag.com/hands-on-guide-to-pattern-a-python-tool-for-effective-text-processing-and-data-mining/","title":"Implementation:"},{"location":"pages/nlp/nlpinfo/information-extract-basedon-rule-search-engin/","text":"\u641c\u7d22\u5f15\u64ce\u5982\u4f55\u68c0\u7d22\u7ed3\u679c\uff1aPython\u548cspaCy\u4fe1\u606f\u63d0\u53d6\u7b80\u4ecb \u00b6 \u6982\u89c8 \u00b6 \u50cfGoogle\u8fd9\u6837\u7684\u641c\u7d22\u5f15\u64ce\u5982\u4f55\u7406\u89e3\u6211\u4eec\u7684\u67e5\u8be2\u5e76\u63d0\u4f9b\u76f8\u5173\u7ed3\u679c\uff1f \u4e86\u89e3\u4fe1\u606f\u63d0\u53d6\u7684\u6982\u5ff5 \u6211\u4eec\u5c06\u4f7f\u7528\u6d41\u884c\u7684spaCy\u5e93\u5728Python\u4e2d\u8fdb\u884c\u4fe1\u606f\u63d0\u53d6 \u4ecb\u7ecd \u00b6 \u4f5c\u4e3a\u4e00\u4e2a\u6570\u636e\u79d1\u5b66\u5bb6\uff0c\u5728\u65e5\u5e38\u5de5\u4f5c\u4e2d\uff0c\u6211\u4e25\u91cd\u4f9d\u8d56\u641c\u7d22\u5f15\u64ce(\u5c24\u5176\u662fGoogle)\u3002\u6211\u7684\u641c\u7d22\u7ed3\u679c\u6d89\u53ca\u5404\u79cd\u67e5\u8be2:Python\u4ee3\u7801\u95ee\u9898\uff0c\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\uff0c\u81ea\u7136\u8bed\u8a00\u5904\u7406(NLP)\u6846\u67b6\u7684\u6bd4\u8f83\u7b49\u3002\u6211\u4e00\u76f4\u5f88\u597d\u5947\u8fd9\u4e9b\u641c\u7d22\u5f15\u64ce\u5982\u4f55\u7406\u89e3\u6211\u7684\u67e5\u8be2\u5e76\u63d0\u53d6\u76f8\u5173\u7ed3\u679c\uff0c\u5c31\u50cf\u4ed6\u4eec\u77e5\u9053\u6211\u5728\u60f3\u4ec0\u4e48\u4e00\u6837\u3002\u6211\u60f3\u4e86\u89e3NLP\u65b9\u9762\u5728\u8fd9\u91cc\u662f\u5982\u4f55\u5de5\u4f5c\u7684:\u8be5\u7b97\u6cd5\u5982\u4f55\u7406\u89e3\u975e\u7ed3\u6784\u5316\u6587\u672c\u6570\u636e\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a\u7ed3\u6784\u5316\u6570\u636e\u5e76\u663e\u793a\u76f8\u5173\u7ed3\u679c\uff1f\u8ba9\u6211\u4eec\u4e3e\u4e2a\u4f8b\u5b50\u3002\u6211\u5728Google\u4e0a\u8f93\u5165\u4e86\u4e24\u4e2a\u4e0d\u540c\u7684\u67e5\u8be2\uff1a \u9996\u5148\uff0cGoogle\u8fc5\u901f\u786e\u5b9a\u4e86\u5b9e\u4f53(world cup)\u548c\u52a8\u4f5c(won)\u3002\u5728\u7b2c\u4e8c\u4e2a\u67e5\u8be2\u4e2d\uff0c\u5728\u5f97\u5230\u7ed3\u679c\u4e4b\u524d\uff0c\u6211\u751a\u81f3\u8fd8\u6ca1\u6709\u5b8c\u6210\u53e5\u5b50\uff01\u4f60\u8ba4\u4e3aGoogle\u5982\u4f55\u7406\u89e3\u8fd9\u4e9b\u67e5\u8be2\u80cc\u540e\u7684\u4e0a\u4e0b\u6587\uff1f\u8fd9\u662f\u4e00\u4e2a\u4ee4\u4eba\u7740\u8ff7\u7684\u60f3\u6cd5\uff0c\u6211\u4eec\u5c06\u5728\u672c\u6587\u4e2d\u5bf9\u5176 \u8bb2\u89e3\u3002\u6211\u4eec\u5c06\u4e86\u89e3\u6839\u636e\u641c\u7d22\u67e5\u8be2\u5982\u4f55\u751f\u6210\u8fd9\u4e9b\u6709\u610f\u4e49\u4e14\u76f8\u5173\u7684\u7ed3\u679c\u7684\u6838\u5fc3\u601d\u60f3\u3002\u662f\u7684\uff0c\u6211\u4eec\u751a\u81f3\u5c06\u6df1\u5165\u7814\u7a76Python\u4ee3\u7801\u5e76\u52a8\u624b\u5b9e\u8df5\u3002\u8ba9\u6211\u4eec\u5f00\u59cb\u5427\uff01 \u6ce8\u610f\uff1a\u6211\u5efa\u8bae\u4f60\u9605\u8bfb\u8fd9\u7bc7\u6709\u5173\u6570\u636e\u79d1\u5b66\u4e2d\u7684\u8ba1\u7b97\u8bed\u8a00\u5b66\u548c\u4f9d\u8d56\u6811\u7b80\u4ecb\u7684\u6587\u7ae0 \uff0c\u4ee5\u66f4\u597d\u5730\u4e86\u89e3\u6211\u4eec\u5c06\u5728\u6b64\u5904\u5b66\u4e60\u7684\u5185\u5bb9\u3002 \u4fe1\u606f\u62bd\u53d6 \u00b6 \u4fe1\u606f\u63d0\u53d6(IE)\u5728\u81ea\u7136\u8bed\u8a00\u5904\u7406(NLP)\u548c\u8bed\u8a00\u5b66\u9886\u57df\u662f\u81f3\u5173\u91cd\u8981\u7684\u3002\u5b83\u5e7f\u6cdb\u7528\u4e8e\u8bf8\u5982\u95ee\u7b54\u7cfb\u7edf\uff0c\u673a\u5668\u7ffb\u8bd1\uff0c\u5b9e\u4f53\u63d0\u53d6\uff0c\u4e8b\u4ef6\u63d0\u53d6\uff0c\u547d\u540d\u5b9e\u4f53\u94fe\u63a5\uff0c\u6307\u4ee3\u6d88\u89e3\uff0c\u5173\u7cfb\u63d0\u53d6\u7b49\u4efb\u52a1\u3002\u5728\u4fe1\u606f\u63d0\u53d6\u4e2d\uff0c\u6709\u4e00\u4e2a\u91cd\u8981\u7684\u4e09\u5143\u7ec4\u6982\u5ff5\u3002 \u4e09\u5143\u7ec4\u4ee3\u8868\u5b9e\u4f53\u4ee5\u53ca\u5b83\u4eec\u4e4b\u95f4\u7684\u5173\u7cfb\u3002\u4f8b\u5982\uff0c(\u5965\u5df4\u9a6c\uff0c\u51fa\u751f\u4e8e\uff0c\u590f\u5a01\u5937)\u662f\u4e00\u4e2a\u4e09\u5143\u7ec4\uff0c\u5176\u4e2d\"\u5965\u5df4\u9a6c\"\u548c\"\u590f\u5a01\u5937\"\u662f\u76f8\u5173\u5b9e\u4f53\uff0c\u5b83\u4eec\u4e4b\u95f4\u7684\u5173\u7cfb\u662f\"\u51fa\u751f\u4e8e\"\u3002 \u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5c06\u91cd\u70b9\u4ecb\u7ecd\u4ece\u7ed9\u5b9a\u6587\u672c\u4e2d\u63d0\u53d6\u8fd9\u4e9b\u7c7b\u578b\u7684\u4e09\u5143\u7ec4\u3002 \u5728\u7ee7\u7eed\u4e4b\u524d\uff0c\u8ba9\u6211\u4eec\u770b\u4e00\u4e0b\u4fe1\u606f\u63d0\u53d6\u7684\u4e0d\u540c\u65b9\u6cd5\u3002\u6211\u4eec\u53ef\u4ee5\u5c06\u4fe1\u606f\u63d0\u53d6\u5927\u81f4\u5206\u4e3a\u4e24\u4e2a\u5206\u652f\uff0c\u5982\u4e0b\u6240\u793a\uff1a \u5728\u4f20\u7edf\u4fe1\u606f\u63d0\u53d6\u4e2d\uff0c\u8981\u63d0\u53d6\u7684\u5173\u7cfb\u662f\u9884\u5148\u5b9a\u4e49\u7684\u3002\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5c06\u4ec5\u4ecb\u7ecd\u57fa\u4e8e\u89c4\u5219\u7684\u65b9\u6cd5\u3002 \u5728\u5f00\u653e\u4fe1\u606f\u63d0\u53d6\u4e2d\uff0c\u5173\u7cfb\u4e0d\u662f\u9884\u5148\u5b9a\u4e49\u7684\u3002\u8be5\u7cfb\u7edf\u53ef\u4ee5\u81ea\u7531\u63d0\u53d6\u5728\u5904\u7406\u6587\u672c\u6570\u636e\u65f6\u9047\u5230\u7684\u4efb\u4f55\u5173\u7cfb\u3002 \u8bed\u4e49\u5173\u7cfb\uff1a\u4ece\u975e\u7ed3\u6784\u5316\u6587\u672c\u4e2d\u83b7\u53d6\u7ed3\u6784\u5316\u77e5\u8bc6 \u00b6 \u770b\u770b\u4e0b\u9762\u7684\u6587\u5b57\u7247\u6bb5\uff1a \u4f60\u80fd\u60f3\u5230\u4ece\u8be5\u6587\u672c\u4e2d\u63d0\u53d6\u6709\u610f\u4e49\u7684\u4fe1\u606f\u7684\u4efb\u4f55\u65b9\u6cd5\u5417\uff1f\u8ba9\u6211\u4eec\u5c1d\u8bd5\u9010\u53e5\u89e3\u51b3\u6b64\u95ee\u9898\uff1a \u5728\u7b2c\u4e00\u53e5\u8bdd\u4e2d\uff0c\u6211\u4eec\u6709\u4e24\u4e2a\u5b9e\u4f53 (\u201cFood Tutorials\u201d \u548c \u201cWes Anderson\u201d)\uff0c\u8fd9\u4e9b\u5b9e\u4f53\u901a\u8fc7\u672f\u8bed \"Directed\"\u76f8\u5173\u8d77\u6765\u7684\uff0c\u56e0\u6b64\uff0c (Wes Anderson, directed, Food Tutorials) \u662f\u4e00\u4e2a\u4e09\u5143\u7ec4\u3002\u540c\u6837\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4ece\u5176\u4ed6\u53e5\u5b50\u4e2d\u63d0\u53d6\u5173\u7cfb\uff1a \u4e8b\u5b9e\u8bc1\u660e\uff0c\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u6587\u672c\u7684\u53e5\u6cd5\u7ed3\u6784\u548c\u8bed\u6cd5\u6765\u83b7\u5f97\u7ed3\u6784\u5316\u4fe1\u606f\uff0c\u5982\u4e0a\u4f8b\u6240\u793a\u3002 \u4fe1\u606f\u63d0\u53d6\u7684\u4e0d\u540c\u65b9\u6cd5 \u00b6 \u5728\u4e0a\u4e00\u8282\u4e2d\uff0c\u6211\u4eec\u8bbe\u6cd5\u4ece\u51e0\u4e2a\u53e5\u5b50\u4e2d\u8f7b\u677e\u63d0\u53d6\u51fa\u4e09\u5143\u7ec4\u3002\u4f46\u662f\uff0c\u5728\u73b0\u5b9e\u4e16\u754c\u4e2d\uff0c\u6570\u636e\u91cf\u5de8\u5927\uff0c\u5e76\u4e14\u4eba\u5de5\u63d0\u53d6\u7ed3\u6784\u5316\u4fe1\u606f\u662f\u4e0d\u53ef\u884c\u7684\u3002\u56e0\u6b64\uff0c\u81ea\u52a8\u5316\u6b64\u4fe1\u606f\u63d0\u53d6\u53d8\u5f97\u5f88\u91cd\u8981\u3002 \u6709\u591a\u79cd\u65b9\u6cd5\u53ef\u4ee5\u81ea\u52a8\u6267\u884c\u4fe1\u606f\u63d0\u53d6\u3002\u8ba9\u6211\u4eec\u4e00\u4e00\u7406\u89e3\u5b83\u4eec\uff1a \u57fa\u4e8e\u89c4\u5219\u7684\u65b9\u6cd5 \uff1a\u6211\u4eec\u4e3a\u81ea\u7136\u8bed\u8a00\u7684\u8bed\u6cd5\u548c\u5176\u4ed6\u8bed\u6cd5\u5c5e\u6027\u5b9a\u4e49\u4e86\u4e00\u7ec4\u89c4\u5219\uff0c\u7136\u540e\u4f7f\u7528\u8fd9\u4e9b\u89c4\u5219\u4ece\u6587\u672c\u4e2d\u63d0\u53d6\u4fe1\u606f \u76d1\u7763\u5b66\u4e60\u7684\u65b9\u6cd5 \uff1a\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u53e5\u5b50S\u3002\u5b83\u6709\u4e24\u4e2a\u5b9e\u4f53E1\u548cE2\u3002\u73b0\u5728\uff0c\u76d1\u7763\u673a\u5668\u5b66\u4e60\u6a21\u578b\u5fc5\u987b\u68c0\u6d4bE1\u548cE2\u4e4b\u95f4\u662f\u5426\u5b58\u5728\u4efb\u4f55\u5173\u7cfb\u00ae\u3002\u56e0\u6b64\uff0c\u5728\u4e00\u79cd\u6709\u76d1\u7763\u7684\u65b9\u6cd5\u4e2d\uff0c\u5173\u7cfb\u63d0\u53d6\u7684\u4efb\u52a1\u53d8\u6210\u4e86\u5173\u7cfb\u68c0\u6d4b\u7684\u4efb\u52a1\u3002\u8fd9\u79cd\u65b9\u6cd5\u7684\u552f\u4e00\u7f3a\u70b9\u662f\uff0c\u5b83\u9700\u8981\u5927\u91cf\u6807\u8bb0\u6570\u636e\u6765\u8bad\u7ec3\u6a21\u578b \u534a\u76d1\u7763\u5b66\u4e60\u7684\u65b9\u6cd5 \uff1a\u5f53\u6ca1\u6709\u8db3\u591f\u7684\u6807\u7b7e\u6570\u636e\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u7ec4\u793a\u4f8b(\u4e09\u5143\u7ec4)\u6765\u5236\u5b9a\u9ad8\u7cbe\u5ea6\u6a21\u5f0f\uff0c\u8be5\u6a21\u5f0f\u53ef\u7528\u4e8e\u4ece\u6587\u672c\u4e2d\u63d0\u53d6\u66f4\u591a\u5173\u7cfb \u4f7f\u7528Python\u548cspaCy\u63d0\u53d6\u4fe1\u606f \u00b6 \u6211\u4eec\u5728\u8fd9\u91cc\u5bf9\u7406\u8bba\u6709\u6240\u4e86\u89e3\uff0c\u56e0\u6b64\u8ba9\u6211\u4eec\u8fdb\u5165Python\u4ee3\u7801\u5c42\u9762\u3002\u6211\u6562\u80af\u5b9a\uff0c\u4f60\u5f88\u60f3\u4e86\u89e3\u672c\u8282\u5185\u5bb9\uff01 \u6211\u4eec\u5c06\u505a\u4e00\u4e2a\u5c0f\u9879\u76ee\uff0c\u4ece\u975e\u7ed3\u6784\u5316\u6570\u636e(\u5728\u672c\u4f8b\u4e2d\u4e3a\u6587\u672c\u6570\u636e)\u4e2d\u63d0\u53d6\u7ed3\u6784\u5316\u4fe1\u606f\u3002\u6211\u4eec\u5df2\u7ecf\u770b\u5230\uff0c\u6587\u672c\u4e2d\u7684\u4fe1\u606f\u4ee5\u4e0d\u540c\u5b9e\u4f53\u4e4b\u95f4\u7684\u5173\u7cfb\u5f62\u5f0f\u5b58\u5728\u3002 \u56e0\u6b64\uff0c\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u5c1d\u8bd5\u53d1\u73b0\u548c\u63d0\u53d6\u4e0e\u67d0\u79cd\u5173\u7cfb\u6216\u53e6\u4e00\u79cd\u5173\u8054\u7684\u4e0d\u540c\u5b9e\u4f53\u5bf9\u3002 spaCy\u57fa\u4e8e\u89c4\u5219\u7684\u5339\u914d \u00b6 \u5728\u5f00\u59cb\u4e4b\u524d\uff0c\u8ba9\u6211\u4eec\u8c08\u8c08Marti Hearst\u3002\u5979\u662f\u8ba1\u7b97\u8bed\u8a00\u5b66\u7814\u7a76\u5458\uff0c\u4e5f\u662f\u52a0\u5dde\u5927\u5b66\u4f2f\u514b\u5229\u4fe1\u606f\u5b66\u9662\u7684\u6559\u6388\u3002 Marti\u6559\u6388\u5b9e\u9645\u4e0a\u5df2\u7ecf\u5bf9\u4fe1\u606f\u63d0\u53d6\u4e3b\u9898\u8fdb\u884c\u4e86\u5e7f\u6cdb\u7684\u7814\u7a76\u3002\u5979\u6700\u6709\u8da3\u7684\u7814\u7a76\u4e4b\u4e00\u662f\u81f4\u529b\u4e8e\u5efa\u7acb\u4e00\u7ec4\u6587\u672c\u6a21\u5f0f\uff0c\u8fd9\u4e9b\u6a21\u5f0f\u53ef\u7528\u4e8e\u4ece\u6587\u672c\u4e2d\u63d0\u53d6\u6709\u610f\u4e49\u7684\u4fe1\u606f\u3002\u8fd9\u4e9b\u6a21\u5f0f\u4fd7\u79f0\u201c Hearst Patterns \u201d\u3002 \u8ba9\u6211\u4eec\u770b\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a \u4ec5\u901a\u8fc7\u67e5\u770b\u53e5\u5b50\u7684\u7ed3\u6784\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u63a8\u65ad\u51fa\"Gelidium\"\u662f\"red algae\"\u7684\u4e00\u79cd\u3002 \u6211\u4eec\u53ef\u4ee5\u5c06\u6b64\u6a21\u5f0f\u5f62\u5f0f\u5316\u4e3a\"X such as Y\"\uff0c\u5176\u4e2dX\u662f\u4e0a\u4f4d\u8bcd\uff0cY\u662f\u4e0b\u4f4d\u8bcd\u3002\u8fd9\u662f\"Hearst Patterns\"\u4e2d\u7684\u8bb8\u591a\u6a21\u5f0f\u4e4b\u4e00\u3002\u4e0b\u56fe\u53ef\u8ba9\u4f60\u76f4\u89c2\u4e86\u89e3\u8be5\u60f3\u6cd5\uff1a \u73b0\u5728\uff0c\u6211\u4eec\u5c1d\u8bd5\u4f7f\u7528\u8fd9\u4e9b\u6a21\u5f0f/\u89c4\u5219\u6765\u63d0\u53d6\u4e0a\u4f4d\u8bcd-\u4e0b\u4e3a\u8bcd\u5bf9\u3002\u6211\u4eec\u5c06\u4f7f\u7528spaCy\u7684\u57fa\u4e8e\u89c4\u5219\u7684\u5339\u914d\u5668\u6765\u6267\u884c\u6b64\u4efb\u52a1\u3002 \u9996\u5148\uff0c\u6211\u4eec\u5c06\u5bfc\u5165\u6240\u9700\u7684\u5e93\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import re import string import nltk import spacy import pandas as pd import numpy as np import math from tqdm import tqdm from spacy.matcher import Matcher from spacy.tokens import Span from spacy import displacy pd.set_option('display.max_colwidth', 200) \u63a5\u4e0b\u6765\uff0c\u52a0\u8f7d\u4e00\u4e2aspaCy\u6a21\u578b\uff1a 1 nlp = spacy.load(\"en_core_web_sm\") \u6211\u4eec\u5c06\u6839\u636e\u8fd9\u4e9bHearst Patterns\u4ece\u6587\u672c\u4e2d\u6316\u6398\u4fe1\u606f\u3002 \u6a21\u5f0f: X such as Y \u00b6 1 2 3 4 5 # \u793a\u4f8b\u6587\u672c text = \"GDP in developing countries such as Vietnam will continue growing at a high rate.\" # \u521b\u5efaspaCy\u5bf9\u8c61 doc = nlp(text) \u4e3a\u4e86\u80fd\u591f\u4ece\u4e0a\u9762\u7684\u53e5\u5b50\u4e2d\u63d0\u53d6\u6240\u9700\u7684\u4fe1\u606f\uff0c\u7406\u89e3\u5176\u53e5\u6cd5\u7ed3\u6784(\u4f8b\u5982\u4e3b\u8bed\uff0c\u5bbe\u8bed\uff0c\u4fee\u9970\u8bed\u548c\u8bcd\u6027(POS))\u975e\u5e38\u91cd\u8981\u3002 \u901a\u8fc7\u4f7f\u7528spaCy\uff0c\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u5730\u63a2\u7d22\u53e5\u5b50\u4e2d\u7684\u8fd9\u4e9b\u8bed\u6cd5\u7ec6\u8282\uff1a 1 2 3 # \u6253\u5370\u6807\u8bb0\uff0c\u4f9d\u8d56\u548c\u8bcd\u6027\u6807\u8bb0 for tok in doc: print(tok.text, \"-->\",tok.dep_,\"-->\", tok.pos_) output: output 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 GDP --> nsubj --> NOUN in --> prep --> ADP developing --> amod --> VERB countries --> pobj --> NOUN such --> amod --> ADJ as --> prep --> ADP Vietnam --> pobj --> PROPN will --> aux --> VERB continue --> ROOT --> VERB growing --> xcomp --> VERB at --> prep --> ADP a --> det --> DET high --> amod --> ADJ rate --> pobj --> NOUN . --> punct --> PUNCT \u770b\u770b\u672f\u8bed\"such\"\u548c\"as\"\u3002\u5b83\u4eec\u8ddf\u5728\u4e00\u4e2a\u540d\u8bcd(\u201ccountries\u201d)\u540e\u3002\u5728\u5b83\u4eec\u4e4b\u540e\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u4e13\u6709\u540d\u8bcd(\u201cVietnam\u201d)\u5145\u5f53\u4e0b\u4f4d\u8bcd\u3002\u56e0\u6b64\uff0c\u8ba9\u6211\u4eec\u4f7f\u7528\u4f9d\u8d56\u9879\u6807\u7b7e\u548c\u8bcd\u6027\u6807\u7b7e\u521b\u5efa\u6240\u9700\u7684\u6a21\u5f0f\uff1a 1 2 3 4 5 # \u5b9a\u4e49\u6a21\u5f0f pattern = [{'POS':'NOUN'}, {'LOWER': 'such'}, {'LOWER': 'as'}, {'POS': 'PROPN'} # \u4e13\u6709\u540d\u8bcd] \u8ba9\u6211\u4eec\u4ece\u6587\u672c\u4e2d\u63d0\u53d6\u6a21\u5f0f\uff1a 1 2 3 4 5 6 7 8 # Matcher\u7c7b\u5bf9\u8c61 matcher = Matcher(nlp.vocab) matcher.add(\"matching_1\", None, pattern) matches = matcher(doc) span = doc[matches[0][1]:matches[0][2]] print(span.text) output: 1 \u2018countries such as Vietnam\u2019 \u597d\u50cf\u4e0d\u9519\u3002\u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230 \u201cdeveloping countries\"\u800c\u4e0d\u53ea\u662f\"countries\u201d\uff0c\u90a3\u4e48\u8f93\u51fa\u5c06\u66f4\u6709\u610f\u4e49\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u73b0\u5728\u8fd8\u5c06\u901a\u8fc7\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u6765\u6355\u83b7\"such as\"\u4e4b\u524d\u7684\u540d\u8bcd\u7684\u4fee\u9970\u8bed\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # Matcher\u7c7b\u5bf9\u8c61 matcher = Matcher(nlp.vocab) # \u5b9a\u4e49\u6a21\u5f0f pattern = [{'DEP':'amod', 'OP':\"?\"}, # \u5f62\u5bb9\u8bcd\u4fee\u9970 {'POS':'NOUN'}, {'LOWER': 'such'}, {'LOWER': 'as'}, {'POS': 'PROPN'}] matcher.add(\"matching_1\", None, pattern) matches = matcher(doc) span = doc[matches[0][1]:matches[0][2]] print(span.text) ouutput: 1 \u2018developing countries such as Vietnam\u2019 \u5728\u8fd9\u91cc\uff0c\"developing countries\"\u662f\u4e0a\u4f4d\u8bcd\uff0c\"Vietnam\u2019\"\u662f\u4e0b\u4f4d\u8bcd\u3002\u4e24\u8005\u5728\u8bed\u4e49\u4e0a\u90fd\u662f\u76f8\u5173\u7684\u3002 \u6ce8\u610f\uff1a\u4ee5\u4e0a\u6a21\u5f0f\u4e2d\u7684\u952e\" OP\"\uff1a\"\uff1f\"\u8868\u793a\u4fee\u9970\u7b26(\u201camod\u201d)\u53ef\u4ee5\u51fa\u73b0\u4e00\u6b21\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u51fa\u73b0\u3002 \u4ee5\u7c7b\u4f3c\u7684\u65b9\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u5176\u4ed6\u6587\u672c\u4e2d\u83b7\u5f97\uff1a Fruits such as apples Cars such as Ferrari Flowers such as rose \u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u4f7f\u7528\u5176\u4ed6\u4e00\u4e9bHearst Patterns\u6765\u63d0\u53d6\u66f4\u591a\u7684\u4e0a\u4f4d\u8bcd\u548c\u4e0b\u4f4d\u8bcd\u3002 \u6a21\u5f0f: X and/or Y \u00b6 1 2 3 4 5 doc = nlp(\"Here is how you can keep your car and other vehicles clean.\") # \u6253\u5370\u4f9d\u8d56\u9879\u6807\u7b7e\u548c\u8bcd\u6027\u6807\u7b7e for tok in doc: print(tok.text, \"-->\",tok.dep_, \"-->\",tok.pos_) output: 1 2 3 4 5 6 7 8 9 10 11 12 13 Here --> advmod --> ADV is --> ROOT --> VERB how --> advmod --> ADV you --> nsubj --> PRON can --> aux --> VERB keep --> ccomp --> VERB your --> poss --> DET car --> dobj --> NOUN and --> cc --> CCONJ other --> amod --> ADJ vehicles --> conj --> NOUN clean --> oprd --> ADJ . --> punct --> PUNCT 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # Matcher\u7c7b\u5bf9\u8c61 matcher = Matcher(nlp.vocab) # \u5b9a\u4e49\u6a21\u5f0f pattern = [{'DEP':'amod', 'OP':\"?\"}, {'POS':'NOUN'}, {'LOWER': 'and', 'OP':\"?\"}, {'LOWER': 'or', 'OP':\"?\"}, {'LOWER': 'other'}, {'POS': 'NOUN'}] matcher.add(\"matching_1\", None, pattern) matches = matcher(doc) span = doc[matches[0][1]:matches[0][2]] print(span.text) output: 1 \u2018car and other vehicles\u2019 \u8ba9\u6211\u4eec\u5c1d\u8bd5\u76f8\u540c\u7684\u4ee3\u7801\u6765\u6355\u83b7\"X or Y\"\u6a21\u5f0f\uff1a 1 2 # \u5c06'and'\u66ff\u6362\u4e3a'or' doc = nlp(\"Here is how you can keep your car or other vehicles clean.\") \u5176\u4f59\u4ee3\u7801\u5c06\u4fdd\u6301\u4e0d\u53d8\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # Matcher\u7c7b\u5bf9\u8c61 matcher = Matcher(nlp.vocab) #\u5b9a\u4e49\u6a21\u5f0f pattern = [{'DEP':'amod', 'OP':\"?\"}, {'POS':'NOUN'}, {'LOWER': 'and', 'OP':\"?\"}, {'LOWER': 'or', 'OP':\"?\"}, {'LOWER': 'other'}, {'POS': 'NOUN'}] matcher.add(\"matching_1\", None, pattern) matches = matcher(doc) span = doc[matches[0][1]:matches[0][2]] print(span.text) output: 1 \u2018car or other vehicles\u2019 \u6a21\u5f0f: X, including Y \u00b6 1 2 3 4 doc = nlp(\"Eight people, including two children, were injured in the explosion\") for tok in doc: print(tok.text, \"-->\",tok.dep_, \"-->\",tok.pos_) output\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 Eight --> nummod --> NUM people --> nsubjpass --> NOUN , --> punct --> PUNCT including --> prep --> VERB two --> nummod --> NUM children --> pobj --> NOUN , --> punct --> PUNCT were --> auxpass --> VERB injured --> ROOT --> VERB in --> prep --> ADP the --> det --> DET explosion --> pobj --> NOUN 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # Matcher\u7c7b\u5bf9\u8c61 matcher = Matcher(nlp.vocab) #\u5b9a\u4e49\u6a21\u5f0f pattern = [{'DEP':'nummod','OP':\"?\"}, # \u6570\u503c\u4fee\u9970 {'DEP':'amod','OP':\"?\"}, # \u5f62\u5bb9\u8bcd\u4fee\u9970 {'POS':'NOUN'}, {'IS_PUNCT': True}, {'LOWER': 'including'}, {'DEP':'nummod','OP':\"?\"}, {'DEP':'amod','OP':\"?\"}, {'POS':'NOUN'}] matcher.add(\"matching_1\", None, pattern) matches = matcher(doc) span = doc[matches[0][1]:matches[0][2]] print(span.text) output: 1 \u2018Eight people, including two children\u2019 \u6a21\u5f0f: X, especially Y \u00b6 1 2 3 4 doc = nlp(\"A healthy eating pattern includes fruits, especially whole fruits.\") for tok in doc: print(tok.text, tok.dep_, tok.pos_) output: 1 2 3 4 5 6 7 8 9 10 11 A --> det --> DET healthy --> amod --> ADJ eating --> compound --> NOUN pattern --> nsubj --> NOUN includes --> ROOT --> VERB fruits --> dobj --> NOUN , --> punct --> PUNCT especially --> advmod --> ADV whole --> amod --> ADJ fruits --> appos --> NOUN . --> punct --> PUNCT 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # Matcher\u7c7b\u5bf9\u8c61 matcher = Matcher(nlp.vocab) # \u5b9a\u4e49\u6a21\u5f0f pattern = [{'DEP':'nummod','OP':\"?\"}, {'DEP':'amod','OP':\"?\"}, {'POS':'NOUN'}, {'IS_PUNCT':True}, {'LOWER': 'especially'}, {'DEP':'nummod','OP':\"?\"}, {'DEP':'amod','OP':\"?\"}, {'POS':'NOUN'}] matcher.add(\"matching_1\", None, pattern) matches = matcher(doc) span = doc[matches[0][1]:matches[0][2]] print(span.text) output : 1 \u2018fruits, especially whole fruits\u2019 2.\u5b50\u6811\u5339\u914d\u4ee5\u8fdb\u884c\u5173\u7cfb\u63d0\u53d6 \u00b6 \u7b80\u5355\u7684\u57fa\u4e8e\u89c4\u5219\u7684\u65b9\u6cd5\u975e\u5e38\u9002\u5408\u4fe1\u606f\u63d0\u53d6\u4efb\u52a1\u3002\u4f46\u662f\uff0c\u5b83\u4eec\u6709\u4e00\u4e9b\u7f3a\u70b9\u548c\u4e0d\u8db3\u3002 \u6211\u4eec\u5fc5\u987b\u6781\u5bcc\u521b\u9020\u529b\uff0c\u4ee5\u63d0\u51fa\u65b0\u7684\u89c4\u5219\u6765\u6355\u83b7\u4e0d\u540c\u7684\u6a21\u5f0f\u3002\u5f88\u96be\u5efa\u7acb\u80fd\u5728\u4e0d\u540c\u53e5\u5b50\u4e4b\u95f4\u5f88\u597d\u5730\u6982\u62ec\u7684\u6a21\u5f0f\u3002 \u4e3a\u4e86\u589e\u5f3a\u57fa\u4e8e\u89c4\u5219\u7684\u5173\u7cfb/\u4fe1\u606f\u63d0\u53d6\u65b9\u6cd5\uff0c\u6211\u4eec\u5e94\u8be5\u5c1d\u8bd5\u4e86\u89e3\u73b0\u6709\u53e5\u5b50\u7684\u4f9d\u5b58\u5173\u7cfb\u7ed3\u6784\u3002\u8ba9\u6211\u4eec\u4ee5\u793a\u4f8b\u6587\u672c\u4e3a\u4f8b\uff0c\u6784\u5efa\u5176\u4f9d\u8d56\u5173\u7cfb\u56fe\u8868\u6811\uff1a 1 2 3 4 5 text = \"Tableau was recently acquired by Salesforce.\" # \u7ed8\u5236\u4f9d\u8d56\u56fe doc = nlp(text) displacy.render(doc, style='dep',jupyter=True) output: \u4f60\u80fd\u5728\u8fd9\u53e5\u8bdd\u4e2d\u627e\u5230\u4efb\u4f55\u6709\u8da3\u7684\u5173\u7cfb\u5417\uff1f\u5982\u679c\u4f60\u67e5\u770b\u53e5\u5b50\u4e2d\u7684\u5b9e\u4f53:Tableau\u548cSalesforce,\u5b83\u4eec\u4e0e\u672f\u8bed\"acquired\"\u76f8\u5173\u3002\u56e0\u6b64\uff0c\u6211\u53ef\u4ee5\u4ece\u8fd9\u53e5\u8bdd\u4e2d\u63d0\u53d6\u7684\u6a21\u5f0f\u662f\" Salesforce acquired Tableau\"\u6216\" X acquired Y\"\u3002 \u73b0\u5728\u8003\u8651\u4ee5\u4e0b\u8bf4\u6cd5\uff1aCareem, a ride-hailing major in the middle east, was acquired by Uber.\" \u5176\u4f9d\u8d56\u56fe\u5c06\u5982\u4e0b\u6240\u793a\uff1a \u5f88\u5413\u4eba\u5427\uff1f \u4e0d\u8fc7\u4e0d\u7528\u62c5\u5fc3\u6211\u4eec\u9700\u8981\u68c0\u67e5\u7684\u662f\uff0c\u591a\u4e2a\u53e5\u5b50\u4e4b\u95f4\u6709\u54ea\u4e9b\u5171\u540c\u4f9d\u8d56\u8def\u5f84\u3002\u6b64\u65b9\u6cd5\u79f0\u4e3a\u5b50\u6811\u5339\u914d\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u5c06\u6b64\u8bed\u53e5\u4e0e\u4e0a\u4e00\u4e2a\u8bed\u53e5\u8fdb\u884c\u6bd4\u8f83\uff1a \u6211\u4eec\u5c06\u4ec5\u8003\u8651\u516c\u5171\u4f9d\u8d56\u8def\u5f84\uff0c\u5e76\u63d0\u53d6\u5b9e\u4f53\u4ee5\u53ca\u5b83\u4eec\u4e4b\u95f4\u7684\u5173\u7cfb(acquired)\u3002\u56e0\u6b64\uff0c\u4ece\u8fd9\u4e9b\u53e5\u5b50\u4e2d\u63d0\u53d6\u7684\u5173\u7cfb\u4e3a\uff1a Salesforce acquired Tableau Uber acquired Careem \u8ba9\u6211\u4eec\u5c1d\u8bd5\u5728Python\u4e2d\u5b9e\u73b0\u6b64\u6280\u672f\u3002\u6211\u4eec\u5c06\u518d\u6b21\u4f7f\u7528spaCy\uff0c\u56e0\u4e3a\u5b83\u5f88\u5bb9\u6613\u904d\u5386\u4f9d\u8d56\u6811\u3002 \u6211\u4eec\u5c06\u9996\u5148\u67e5\u770b\u53e5\u5b50\u4e2d\u5355\u8bcd\u7684\u4f9d\u8d56\u9879\u6807\u7b7e\u548cPOS\uff1a 1 2 3 4 5 text = \"Tableau was recently acquired by Salesforce.\" doc = nlp(text) for tok in doc: print(tok.text,\"-->\",tok.dep_,\"-->\",tok.pos_) output: 1 2 3 4 5 6 7 Tableau --> nsubjpass --> PROPN was --> auxpass --> VERB recently --> advmod --> ADV acquired --> ROOT --> VERB by --> agent --> ADP Salesforce --> pobj --> PROPN . --> punct --> PUNCT \u5728\u8fd9\u91cc\uff0c\" Tableau\"\u7684\u4f9d\u8d56\u9879\u6807\u7b7e\u662fnsubjpass\uff0c\u5b83\u8868\u793a\u88ab\u52a8\u4e3b\u8bed(\u56e0\u4e3a\u5b83\u662f\u88ab\u52a8\u53e5\u5b50)\u3002\u53e6\u4e00\u4e2a\u5b9e\u4f53\"Salesforce\"\u662f\u8be5\u53e5\u5b50\u4e2d\u7684\u5bbe\u8bed\uff0c\u672f\u8bed\"acquired\"\u662f\u53e5\u5b50\u7684\u6839\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4ee5\u67d0\u79cd\u65b9\u5f0f\u5c06\u5bbe\u8bed\u548c\u4e3b\u8bed\u8054\u7cfb\u8d77\u6765\u3002 \u8ba9\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u6765\u6267\u884c\u5b50\u6811\u5339\u914d\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 def subtree_matcher(doc): x = '' y = '' # \u904d\u5386\u8f93\u5165\u53e5\u5b50\u4e2d\u7684\u6240\u6709\u6807\u8bb0 for i,tok in enumerate(doc): # \u62bd\u53d6\u4e3b\u8bed if tok.dep_.find(\"subjpass\") == True: y = tok.text # \u62bd\u53d6\u5bbe\u8bed if tok.dep_.endswith(\"obj\") == True: x = tok.text return x,y \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ea\u9700\u8981\u67e5\u627e\u6240\u6709\u7b26\u5408\u4ee5\u4e0b\u6761\u4ef6\u7684\u53e5\u5b50\uff1a \u6709\u4e24\u4e2a\u5b9e\u4f53\uff0c\u5e76\u4e14\"acquired\"\u4e00\u8bcd\u662f\u53e5\u5b50\u4e2d\u552f\u4e00\u7684\u6839 \u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u53e5\u5b50\u4e2d\u6355\u83b7\u4e3b\u8bed\u548c\u5bbe\u8bed\u3002\u8ba9\u6211\u4eec\u8c03\u7528\u4e0a\u9762\u7684\u51fd\u6570\uff1a 1 subtree_matcher ( doc ) output: 1 (\u2018Salesforce\u2019, \u2018Tableau\u2019) \u8fd9\u91cc\uff0c\u4e3b\u8bed\u662f\u6536\u8d2d\u8005\uff0c\u5bbe\u8bed\u662f\u88ab\u6536\u8d2d\u7684\u5b9e\u4f53\u3002\u8ba9\u6211\u4eec\u4f7f\u7528\u76f8\u540c\u7684\u51fd\u6570subtree_matcher()\u6765\u63d0\u53d6\u901a\u8fc7\u76f8\u540c\u5173\u7cfb\uff08\u201cacquired\u201d\uff09\u5173\u8054\u7684\u5b9e\u4f53\uff1a 1 2 3 4 text_2 = \"Careem, a ride hailing major in middle east, was acquired by Uber.\" doc_2 = nlp(text_2) subtree_matcher(doc_2) output: 1 (\u2018Uber\u2019, \u2018Careem\u2019) \u4f60\u770b\u5230\u8fd9\u91cc\u53d1\u751f\u4e86\u4ec0\u4e48\u5417\uff1f\u8fd9\u53e5\u8bdd\u6709\u66f4\u591a\u7684\u5355\u8bcd\u548c\u6807\u70b9\u7b26\u53f7\uff0c\u4f46\u6211\u4eec\u7684\u903b\u8f91\u4ecd\u7136\u6709\u6548\u5e76\u6210\u529f\u5730\u63d0\u53d6\u4e86\u76f8\u5173\u5b9e\u4f53\u3002 \u4f46\u662f\uff0c\u7b49\u7b49-\u5982\u679c\u6211\u5c06\u53e5\u5b50\u4ece\u88ab\u52a8\u8bed\u6001\u66f4\u6539\u4e3a\u4e3b\u52a8\u8bed\u6001\u600e\u4e48\u529e\uff1f\u6211\u4eec\u7684\u903b\u8f91\u4ecd\u7136\u6709\u6548\u5417\uff1f 1 2 3 text_3 = \"Salesforce recently acquired Tableau.\" doc_3 = nlp(text_3) subtree_matcher(doc_3) output: 1 (\u2018Tableau\u2019, \u2018 \u2018) \u90a3\u4e0d\u662f\u6211\u4eec\u6240\u671f\u671b\u7684\u3002\u8be5\u529f\u80fd\u672a\u80fd\u6355\u83b7\" Salesforce\"\uff0c\u5e76\u9519\u8bef\u5730\u5c06\" Tableau\"\u8fd4\u56de\u4e3a\u6536\u8d2d\u65b9\u3002 \u90a3\u4e48\u662f\u4ec0\u4e48\u95ee\u9898\u4e86\uff1f\u8ba9\u6211\u4eec\u4e86\u89e3\u4e00\u4e0b\u8fd9\u53e5\u8bdd\u7684\u4f9d\u8d56\u5173\u7cfb\u6811\uff1a 1 2 for tok in doc_3: print(tok.text, \"-->\",tok.dep_, \"-->\",tok.pos_) output: 1 2 3 4 5 Salesforce --> nsubj --> PROPN recently --> advmod --> ADV acquired --> ROOT --> VERB Tableau --> dobj --> PROPN . --> punct --> PUNCT \u4e8b\u5b9e\u8bc1\u660e\uff0c\" Salesforce\"\u548c\" Tableau\"\u8fd9\u4e24\u4e2a\u672f\u8bed\u7684\u8bed\u6cd5\u529f\u80fd(\u4e3b\u8bed\u548c\u5bbe\u8bed)\u5df2\u7ecf\u5728\u4e3b\u52a8\u8bed\u6001\u4e2d\u4e92\u6362\u4e86\u3002\u4f46\u662f\uff0c\u73b0\u5728\u8be5\u4e3b\u8bed\u7684\u4f9d\u8d56\u9879\u6807\u7b7e\u5df2\u4ece\" nsubjpass\"\u66f4\u6539\u4e3a\" nsubj\"\u3002\u4ed6\u7684\u6807\u7b7e\u8868\u660e\u53e5\u5b50\u662f\u4e3b\u52a8\u8bed\u6001\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6b64\u5c5e\u6027\u6765\u4fee\u6539\u5b50\u6811\u5339\u914d\u529f\u80fd\u3002\u4e0b\u9762\u7ed9\u51fa\u7684\u662f\u5b50\u6811\u5339\u914d\u7684\u65b0\u529f\u80fd\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 def subtree_matcher(doc): subjpass = 0 for i,tok in enumerate(doc): # \u53d1\u73b0\u5305\u542b\"subjpass\" \u6587\u672c\u7684\u4f9d\u8d56\u9879\u6807\u7b7e if tok.dep_.find(\"subjpass\") == True: subjpass = 1 x = '' y = '' # \u5982\u679csubjpass == 1 \u90a3\u4e48\u53e5\u5b50\u662f\u4e3b\u52a8\u8bed\u6001 if subjpass == 1: for i,tok in enumerate(doc): if tok.dep_.find(\"subjpass\") == True: y = tok.text if tok.dep_.endswith(\"obj\") == True: x = tok.text # \u5982\u679csubjpass == 0 \u90a3\u4e48\u53e5\u5b50\u662f\u88ab\u52a8\u8bed\u6001 else: for i,tok in enumerate(doc): if tok.dep_.endswith(\"subj\") == True: x = tok.text if tok.dep_.endswith(\"obj\") == True: y = tok.text return x,y \u8ba9\u6211\u4eec\u5728\u4e3b\u52a8\u8bed\u53e5\u5b50\u4e0a\u5c1d\u8bd5\u8fd9\u4e2a\u65b0\u51fd\u6570: 1 new_subtree_matcher(doc_3) output: 1 (\u2018Salesforce\u2019, \u2018Tableau\u2019) \u8f93\u51fa\u6b63\u786e\u3002\u8ba9\u6211\u4eec\u5c06\u4e4b\u524d\u7684\u88ab\u52a8\u8bed\u53e5\u4f20\u9012\u7ed9\u6b64\u51fd\u6570\uff1a 1 new_subtree_matcher(nlp(\"Tableau was recently acquired by Salesforce.\")) output: 1 (\u2018Salesforce\u2019, \u2018Tableau\u2019) \u8fd9\u6b63\u662f\u6211\u4eec\u60f3\u8981\u7684\u3002\u6211\u4eec\u4f7f\u51fd\u6570\u7a0d\u5fae\u66f4\u901a\u7528\u3002\u6211\u5e0c\u671b\u4f60\u6df1\u5165\u7814\u7a76\u4e0d\u540c\u7c7b\u578b\u53e5\u5b50\u7684\u8bed\u6cd5\u7ed3\u6784\uff0c\u5e76\u5c1d\u8bd5\u4f7f\u6b64\u529f\u80fd\u66f4\u52a0\u7075\u6d3b\u3002 \u7ed3\u8bed \u00b6 \u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u4e86\u89e3\u4e86\u4fe1\u606f\u63d0\u53d6\uff0c\u5173\u7cfb\u548c\u4e09\u5143\u7ec4\u7684\u6982\u5ff5\u4ee5\u53ca\u5173\u7cfb\u63d0\u53d6\u7684\u4e0d\u540c\u65b9\u6cd5\u3002\u5c31\u6211\u4e2a\u4eba\u800c\u8a00\uff0c\u6211\u771f\u7684\u5f88\u4e50\u4e8e\u5bf9\u6b64\u4e3b\u9898\u8fdb\u884c\u7814\u7a76\uff0c\u5e76\u8ba1\u5212\u64b0\u5199\u66f4\u591a\u6709\u5173\u66f4\u9ad8\u7ea7\u4fe1\u606f\u63d0\u53d6\u65b9\u6cd5\u7684\u6587\u7ae0\u3002","title":"\u57fa\u4e8e\u89c4\u5219\u7684\u4fe1\u606f\u63d0\u53d6\uff0c\u641c\u7d22\u5f15\u64ce\u5982\u4f55\u68c0\u7d22\u7ed3\u679c\uff1aspaCy\u7b80\u4ecb"},{"location":"pages/nlp/nlpinfo/information-extract-basedon-rule-search-engin/#\u641c\u7d22\u5f15\u64ce\u5982\u4f55\u68c0\u7d22\u7ed3\u679cPython\u548cspaCy\u4fe1\u606f\u63d0\u53d6\u7b80\u4ecb","text":"","title":"\u641c\u7d22\u5f15\u64ce\u5982\u4f55\u68c0\u7d22\u7ed3\u679c\uff1aPython\u548cspaCy\u4fe1\u606f\u63d0\u53d6\u7b80\u4ecb"},{"location":"pages/nlp/nlpinfo/information-extract-basedon-rule-search-engin/#\u6982\u89c8","text":"\u50cfGoogle\u8fd9\u6837\u7684\u641c\u7d22\u5f15\u64ce\u5982\u4f55\u7406\u89e3\u6211\u4eec\u7684\u67e5\u8be2\u5e76\u63d0\u4f9b\u76f8\u5173\u7ed3\u679c\uff1f \u4e86\u89e3\u4fe1\u606f\u63d0\u53d6\u7684\u6982\u5ff5 \u6211\u4eec\u5c06\u4f7f\u7528\u6d41\u884c\u7684spaCy\u5e93\u5728Python\u4e2d\u8fdb\u884c\u4fe1\u606f\u63d0\u53d6","title":"\u6982\u89c8"},{"location":"pages/nlp/nlpinfo/information-extract-basedon-rule-search-engin/#\u4ecb\u7ecd","text":"\u4f5c\u4e3a\u4e00\u4e2a\u6570\u636e\u79d1\u5b66\u5bb6\uff0c\u5728\u65e5\u5e38\u5de5\u4f5c\u4e2d\uff0c\u6211\u4e25\u91cd\u4f9d\u8d56\u641c\u7d22\u5f15\u64ce(\u5c24\u5176\u662fGoogle)\u3002\u6211\u7684\u641c\u7d22\u7ed3\u679c\u6d89\u53ca\u5404\u79cd\u67e5\u8be2:Python\u4ee3\u7801\u95ee\u9898\uff0c\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\uff0c\u81ea\u7136\u8bed\u8a00\u5904\u7406(NLP)\u6846\u67b6\u7684\u6bd4\u8f83\u7b49\u3002\u6211\u4e00\u76f4\u5f88\u597d\u5947\u8fd9\u4e9b\u641c\u7d22\u5f15\u64ce\u5982\u4f55\u7406\u89e3\u6211\u7684\u67e5\u8be2\u5e76\u63d0\u53d6\u76f8\u5173\u7ed3\u679c\uff0c\u5c31\u50cf\u4ed6\u4eec\u77e5\u9053\u6211\u5728\u60f3\u4ec0\u4e48\u4e00\u6837\u3002\u6211\u60f3\u4e86\u89e3NLP\u65b9\u9762\u5728\u8fd9\u91cc\u662f\u5982\u4f55\u5de5\u4f5c\u7684:\u8be5\u7b97\u6cd5\u5982\u4f55\u7406\u89e3\u975e\u7ed3\u6784\u5316\u6587\u672c\u6570\u636e\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a\u7ed3\u6784\u5316\u6570\u636e\u5e76\u663e\u793a\u76f8\u5173\u7ed3\u679c\uff1f\u8ba9\u6211\u4eec\u4e3e\u4e2a\u4f8b\u5b50\u3002\u6211\u5728Google\u4e0a\u8f93\u5165\u4e86\u4e24\u4e2a\u4e0d\u540c\u7684\u67e5\u8be2\uff1a \u9996\u5148\uff0cGoogle\u8fc5\u901f\u786e\u5b9a\u4e86\u5b9e\u4f53(world cup)\u548c\u52a8\u4f5c(won)\u3002\u5728\u7b2c\u4e8c\u4e2a\u67e5\u8be2\u4e2d\uff0c\u5728\u5f97\u5230\u7ed3\u679c\u4e4b\u524d\uff0c\u6211\u751a\u81f3\u8fd8\u6ca1\u6709\u5b8c\u6210\u53e5\u5b50\uff01\u4f60\u8ba4\u4e3aGoogle\u5982\u4f55\u7406\u89e3\u8fd9\u4e9b\u67e5\u8be2\u80cc\u540e\u7684\u4e0a\u4e0b\u6587\uff1f\u8fd9\u662f\u4e00\u4e2a\u4ee4\u4eba\u7740\u8ff7\u7684\u60f3\u6cd5\uff0c\u6211\u4eec\u5c06\u5728\u672c\u6587\u4e2d\u5bf9\u5176 \u8bb2\u89e3\u3002\u6211\u4eec\u5c06\u4e86\u89e3\u6839\u636e\u641c\u7d22\u67e5\u8be2\u5982\u4f55\u751f\u6210\u8fd9\u4e9b\u6709\u610f\u4e49\u4e14\u76f8\u5173\u7684\u7ed3\u679c\u7684\u6838\u5fc3\u601d\u60f3\u3002\u662f\u7684\uff0c\u6211\u4eec\u751a\u81f3\u5c06\u6df1\u5165\u7814\u7a76Python\u4ee3\u7801\u5e76\u52a8\u624b\u5b9e\u8df5\u3002\u8ba9\u6211\u4eec\u5f00\u59cb\u5427\uff01 \u6ce8\u610f\uff1a\u6211\u5efa\u8bae\u4f60\u9605\u8bfb\u8fd9\u7bc7\u6709\u5173\u6570\u636e\u79d1\u5b66\u4e2d\u7684\u8ba1\u7b97\u8bed\u8a00\u5b66\u548c\u4f9d\u8d56\u6811\u7b80\u4ecb\u7684\u6587\u7ae0 \uff0c\u4ee5\u66f4\u597d\u5730\u4e86\u89e3\u6211\u4eec\u5c06\u5728\u6b64\u5904\u5b66\u4e60\u7684\u5185\u5bb9\u3002","title":"\u4ecb\u7ecd"},{"location":"pages/nlp/nlpinfo/information-extract-basedon-rule-search-engin/#\u4fe1\u606f\u62bd\u53d6","text":"\u4fe1\u606f\u63d0\u53d6(IE)\u5728\u81ea\u7136\u8bed\u8a00\u5904\u7406(NLP)\u548c\u8bed\u8a00\u5b66\u9886\u57df\u662f\u81f3\u5173\u91cd\u8981\u7684\u3002\u5b83\u5e7f\u6cdb\u7528\u4e8e\u8bf8\u5982\u95ee\u7b54\u7cfb\u7edf\uff0c\u673a\u5668\u7ffb\u8bd1\uff0c\u5b9e\u4f53\u63d0\u53d6\uff0c\u4e8b\u4ef6\u63d0\u53d6\uff0c\u547d\u540d\u5b9e\u4f53\u94fe\u63a5\uff0c\u6307\u4ee3\u6d88\u89e3\uff0c\u5173\u7cfb\u63d0\u53d6\u7b49\u4efb\u52a1\u3002\u5728\u4fe1\u606f\u63d0\u53d6\u4e2d\uff0c\u6709\u4e00\u4e2a\u91cd\u8981\u7684\u4e09\u5143\u7ec4\u6982\u5ff5\u3002 \u4e09\u5143\u7ec4\u4ee3\u8868\u5b9e\u4f53\u4ee5\u53ca\u5b83\u4eec\u4e4b\u95f4\u7684\u5173\u7cfb\u3002\u4f8b\u5982\uff0c(\u5965\u5df4\u9a6c\uff0c\u51fa\u751f\u4e8e\uff0c\u590f\u5a01\u5937)\u662f\u4e00\u4e2a\u4e09\u5143\u7ec4\uff0c\u5176\u4e2d\"\u5965\u5df4\u9a6c\"\u548c\"\u590f\u5a01\u5937\"\u662f\u76f8\u5173\u5b9e\u4f53\uff0c\u5b83\u4eec\u4e4b\u95f4\u7684\u5173\u7cfb\u662f\"\u51fa\u751f\u4e8e\"\u3002 \u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5c06\u91cd\u70b9\u4ecb\u7ecd\u4ece\u7ed9\u5b9a\u6587\u672c\u4e2d\u63d0\u53d6\u8fd9\u4e9b\u7c7b\u578b\u7684\u4e09\u5143\u7ec4\u3002 \u5728\u7ee7\u7eed\u4e4b\u524d\uff0c\u8ba9\u6211\u4eec\u770b\u4e00\u4e0b\u4fe1\u606f\u63d0\u53d6\u7684\u4e0d\u540c\u65b9\u6cd5\u3002\u6211\u4eec\u53ef\u4ee5\u5c06\u4fe1\u606f\u63d0\u53d6\u5927\u81f4\u5206\u4e3a\u4e24\u4e2a\u5206\u652f\uff0c\u5982\u4e0b\u6240\u793a\uff1a \u5728\u4f20\u7edf\u4fe1\u606f\u63d0\u53d6\u4e2d\uff0c\u8981\u63d0\u53d6\u7684\u5173\u7cfb\u662f\u9884\u5148\u5b9a\u4e49\u7684\u3002\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5c06\u4ec5\u4ecb\u7ecd\u57fa\u4e8e\u89c4\u5219\u7684\u65b9\u6cd5\u3002 \u5728\u5f00\u653e\u4fe1\u606f\u63d0\u53d6\u4e2d\uff0c\u5173\u7cfb\u4e0d\u662f\u9884\u5148\u5b9a\u4e49\u7684\u3002\u8be5\u7cfb\u7edf\u53ef\u4ee5\u81ea\u7531\u63d0\u53d6\u5728\u5904\u7406\u6587\u672c\u6570\u636e\u65f6\u9047\u5230\u7684\u4efb\u4f55\u5173\u7cfb\u3002","title":"\u4fe1\u606f\u62bd\u53d6"},{"location":"pages/nlp/nlpinfo/information-extract-basedon-rule-search-engin/#\u8bed\u4e49\u5173\u7cfb\u4ece\u975e\u7ed3\u6784\u5316\u6587\u672c\u4e2d\u83b7\u53d6\u7ed3\u6784\u5316\u77e5\u8bc6","text":"\u770b\u770b\u4e0b\u9762\u7684\u6587\u5b57\u7247\u6bb5\uff1a \u4f60\u80fd\u60f3\u5230\u4ece\u8be5\u6587\u672c\u4e2d\u63d0\u53d6\u6709\u610f\u4e49\u7684\u4fe1\u606f\u7684\u4efb\u4f55\u65b9\u6cd5\u5417\uff1f\u8ba9\u6211\u4eec\u5c1d\u8bd5\u9010\u53e5\u89e3\u51b3\u6b64\u95ee\u9898\uff1a \u5728\u7b2c\u4e00\u53e5\u8bdd\u4e2d\uff0c\u6211\u4eec\u6709\u4e24\u4e2a\u5b9e\u4f53 (\u201cFood Tutorials\u201d \u548c \u201cWes Anderson\u201d)\uff0c\u8fd9\u4e9b\u5b9e\u4f53\u901a\u8fc7\u672f\u8bed \"Directed\"\u76f8\u5173\u8d77\u6765\u7684\uff0c\u56e0\u6b64\uff0c (Wes Anderson, directed, Food Tutorials) \u662f\u4e00\u4e2a\u4e09\u5143\u7ec4\u3002\u540c\u6837\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4ece\u5176\u4ed6\u53e5\u5b50\u4e2d\u63d0\u53d6\u5173\u7cfb\uff1a \u4e8b\u5b9e\u8bc1\u660e\uff0c\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u6587\u672c\u7684\u53e5\u6cd5\u7ed3\u6784\u548c\u8bed\u6cd5\u6765\u83b7\u5f97\u7ed3\u6784\u5316\u4fe1\u606f\uff0c\u5982\u4e0a\u4f8b\u6240\u793a\u3002","title":"\u8bed\u4e49\u5173\u7cfb\uff1a\u4ece\u975e\u7ed3\u6784\u5316\u6587\u672c\u4e2d\u83b7\u53d6\u7ed3\u6784\u5316\u77e5\u8bc6"},{"location":"pages/nlp/nlpinfo/information-extract-basedon-rule-search-engin/#\u4fe1\u606f\u63d0\u53d6\u7684\u4e0d\u540c\u65b9\u6cd5","text":"\u5728\u4e0a\u4e00\u8282\u4e2d\uff0c\u6211\u4eec\u8bbe\u6cd5\u4ece\u51e0\u4e2a\u53e5\u5b50\u4e2d\u8f7b\u677e\u63d0\u53d6\u51fa\u4e09\u5143\u7ec4\u3002\u4f46\u662f\uff0c\u5728\u73b0\u5b9e\u4e16\u754c\u4e2d\uff0c\u6570\u636e\u91cf\u5de8\u5927\uff0c\u5e76\u4e14\u4eba\u5de5\u63d0\u53d6\u7ed3\u6784\u5316\u4fe1\u606f\u662f\u4e0d\u53ef\u884c\u7684\u3002\u56e0\u6b64\uff0c\u81ea\u52a8\u5316\u6b64\u4fe1\u606f\u63d0\u53d6\u53d8\u5f97\u5f88\u91cd\u8981\u3002 \u6709\u591a\u79cd\u65b9\u6cd5\u53ef\u4ee5\u81ea\u52a8\u6267\u884c\u4fe1\u606f\u63d0\u53d6\u3002\u8ba9\u6211\u4eec\u4e00\u4e00\u7406\u89e3\u5b83\u4eec\uff1a \u57fa\u4e8e\u89c4\u5219\u7684\u65b9\u6cd5 \uff1a\u6211\u4eec\u4e3a\u81ea\u7136\u8bed\u8a00\u7684\u8bed\u6cd5\u548c\u5176\u4ed6\u8bed\u6cd5\u5c5e\u6027\u5b9a\u4e49\u4e86\u4e00\u7ec4\u89c4\u5219\uff0c\u7136\u540e\u4f7f\u7528\u8fd9\u4e9b\u89c4\u5219\u4ece\u6587\u672c\u4e2d\u63d0\u53d6\u4fe1\u606f \u76d1\u7763\u5b66\u4e60\u7684\u65b9\u6cd5 \uff1a\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u53e5\u5b50S\u3002\u5b83\u6709\u4e24\u4e2a\u5b9e\u4f53E1\u548cE2\u3002\u73b0\u5728\uff0c\u76d1\u7763\u673a\u5668\u5b66\u4e60\u6a21\u578b\u5fc5\u987b\u68c0\u6d4bE1\u548cE2\u4e4b\u95f4\u662f\u5426\u5b58\u5728\u4efb\u4f55\u5173\u7cfb\u00ae\u3002\u56e0\u6b64\uff0c\u5728\u4e00\u79cd\u6709\u76d1\u7763\u7684\u65b9\u6cd5\u4e2d\uff0c\u5173\u7cfb\u63d0\u53d6\u7684\u4efb\u52a1\u53d8\u6210\u4e86\u5173\u7cfb\u68c0\u6d4b\u7684\u4efb\u52a1\u3002\u8fd9\u79cd\u65b9\u6cd5\u7684\u552f\u4e00\u7f3a\u70b9\u662f\uff0c\u5b83\u9700\u8981\u5927\u91cf\u6807\u8bb0\u6570\u636e\u6765\u8bad\u7ec3\u6a21\u578b \u534a\u76d1\u7763\u5b66\u4e60\u7684\u65b9\u6cd5 \uff1a\u5f53\u6ca1\u6709\u8db3\u591f\u7684\u6807\u7b7e\u6570\u636e\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u7ec4\u793a\u4f8b(\u4e09\u5143\u7ec4)\u6765\u5236\u5b9a\u9ad8\u7cbe\u5ea6\u6a21\u5f0f\uff0c\u8be5\u6a21\u5f0f\u53ef\u7528\u4e8e\u4ece\u6587\u672c\u4e2d\u63d0\u53d6\u66f4\u591a\u5173\u7cfb","title":"\u4fe1\u606f\u63d0\u53d6\u7684\u4e0d\u540c\u65b9\u6cd5"},{"location":"pages/nlp/nlpinfo/information-extract-basedon-rule-search-engin/#\u4f7f\u7528Python\u548cspaCy\u63d0\u53d6\u4fe1\u606f","text":"\u6211\u4eec\u5728\u8fd9\u91cc\u5bf9\u7406\u8bba\u6709\u6240\u4e86\u89e3\uff0c\u56e0\u6b64\u8ba9\u6211\u4eec\u8fdb\u5165Python\u4ee3\u7801\u5c42\u9762\u3002\u6211\u6562\u80af\u5b9a\uff0c\u4f60\u5f88\u60f3\u4e86\u89e3\u672c\u8282\u5185\u5bb9\uff01 \u6211\u4eec\u5c06\u505a\u4e00\u4e2a\u5c0f\u9879\u76ee\uff0c\u4ece\u975e\u7ed3\u6784\u5316\u6570\u636e(\u5728\u672c\u4f8b\u4e2d\u4e3a\u6587\u672c\u6570\u636e)\u4e2d\u63d0\u53d6\u7ed3\u6784\u5316\u4fe1\u606f\u3002\u6211\u4eec\u5df2\u7ecf\u770b\u5230\uff0c\u6587\u672c\u4e2d\u7684\u4fe1\u606f\u4ee5\u4e0d\u540c\u5b9e\u4f53\u4e4b\u95f4\u7684\u5173\u7cfb\u5f62\u5f0f\u5b58\u5728\u3002 \u56e0\u6b64\uff0c\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u5c1d\u8bd5\u53d1\u73b0\u548c\u63d0\u53d6\u4e0e\u67d0\u79cd\u5173\u7cfb\u6216\u53e6\u4e00\u79cd\u5173\u8054\u7684\u4e0d\u540c\u5b9e\u4f53\u5bf9\u3002","title":"\u4f7f\u7528Python\u548cspaCy\u63d0\u53d6\u4fe1\u606f"},{"location":"pages/nlp/nlpinfo/information-extract-basedon-rule-search-engin/#spaCy\u57fa\u4e8e\u89c4\u5219\u7684\u5339\u914d","text":"\u5728\u5f00\u59cb\u4e4b\u524d\uff0c\u8ba9\u6211\u4eec\u8c08\u8c08Marti Hearst\u3002\u5979\u662f\u8ba1\u7b97\u8bed\u8a00\u5b66\u7814\u7a76\u5458\uff0c\u4e5f\u662f\u52a0\u5dde\u5927\u5b66\u4f2f\u514b\u5229\u4fe1\u606f\u5b66\u9662\u7684\u6559\u6388\u3002 Marti\u6559\u6388\u5b9e\u9645\u4e0a\u5df2\u7ecf\u5bf9\u4fe1\u606f\u63d0\u53d6\u4e3b\u9898\u8fdb\u884c\u4e86\u5e7f\u6cdb\u7684\u7814\u7a76\u3002\u5979\u6700\u6709\u8da3\u7684\u7814\u7a76\u4e4b\u4e00\u662f\u81f4\u529b\u4e8e\u5efa\u7acb\u4e00\u7ec4\u6587\u672c\u6a21\u5f0f\uff0c\u8fd9\u4e9b\u6a21\u5f0f\u53ef\u7528\u4e8e\u4ece\u6587\u672c\u4e2d\u63d0\u53d6\u6709\u610f\u4e49\u7684\u4fe1\u606f\u3002\u8fd9\u4e9b\u6a21\u5f0f\u4fd7\u79f0\u201c Hearst Patterns \u201d\u3002 \u8ba9\u6211\u4eec\u770b\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a \u4ec5\u901a\u8fc7\u67e5\u770b\u53e5\u5b50\u7684\u7ed3\u6784\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u63a8\u65ad\u51fa\"Gelidium\"\u662f\"red algae\"\u7684\u4e00\u79cd\u3002 \u6211\u4eec\u53ef\u4ee5\u5c06\u6b64\u6a21\u5f0f\u5f62\u5f0f\u5316\u4e3a\"X such as Y\"\uff0c\u5176\u4e2dX\u662f\u4e0a\u4f4d\u8bcd\uff0cY\u662f\u4e0b\u4f4d\u8bcd\u3002\u8fd9\u662f\"Hearst Patterns\"\u4e2d\u7684\u8bb8\u591a\u6a21\u5f0f\u4e4b\u4e00\u3002\u4e0b\u56fe\u53ef\u8ba9\u4f60\u76f4\u89c2\u4e86\u89e3\u8be5\u60f3\u6cd5\uff1a \u73b0\u5728\uff0c\u6211\u4eec\u5c1d\u8bd5\u4f7f\u7528\u8fd9\u4e9b\u6a21\u5f0f/\u89c4\u5219\u6765\u63d0\u53d6\u4e0a\u4f4d\u8bcd-\u4e0b\u4e3a\u8bcd\u5bf9\u3002\u6211\u4eec\u5c06\u4f7f\u7528spaCy\u7684\u57fa\u4e8e\u89c4\u5219\u7684\u5339\u914d\u5668\u6765\u6267\u884c\u6b64\u4efb\u52a1\u3002 \u9996\u5148\uff0c\u6211\u4eec\u5c06\u5bfc\u5165\u6240\u9700\u7684\u5e93\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import re import string import nltk import spacy import pandas as pd import numpy as np import math from tqdm import tqdm from spacy.matcher import Matcher from spacy.tokens import Span from spacy import displacy pd.set_option('display.max_colwidth', 200) \u63a5\u4e0b\u6765\uff0c\u52a0\u8f7d\u4e00\u4e2aspaCy\u6a21\u578b\uff1a 1 nlp = spacy.load(\"en_core_web_sm\") \u6211\u4eec\u5c06\u6839\u636e\u8fd9\u4e9bHearst Patterns\u4ece\u6587\u672c\u4e2d\u6316\u6398\u4fe1\u606f\u3002","title":"spaCy\u57fa\u4e8e\u89c4\u5219\u7684\u5339\u914d"},{"location":"pages/nlp/nlpinfo/information-extract-basedon-rule-search-engin/#\u6a21\u5f0f-X-such-as-Y","text":"1 2 3 4 5 # \u793a\u4f8b\u6587\u672c text = \"GDP in developing countries such as Vietnam will continue growing at a high rate.\" # \u521b\u5efaspaCy\u5bf9\u8c61 doc = nlp(text) \u4e3a\u4e86\u80fd\u591f\u4ece\u4e0a\u9762\u7684\u53e5\u5b50\u4e2d\u63d0\u53d6\u6240\u9700\u7684\u4fe1\u606f\uff0c\u7406\u89e3\u5176\u53e5\u6cd5\u7ed3\u6784(\u4f8b\u5982\u4e3b\u8bed\uff0c\u5bbe\u8bed\uff0c\u4fee\u9970\u8bed\u548c\u8bcd\u6027(POS))\u975e\u5e38\u91cd\u8981\u3002 \u901a\u8fc7\u4f7f\u7528spaCy\uff0c\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u5730\u63a2\u7d22\u53e5\u5b50\u4e2d\u7684\u8fd9\u4e9b\u8bed\u6cd5\u7ec6\u8282\uff1a 1 2 3 # \u6253\u5370\u6807\u8bb0\uff0c\u4f9d\u8d56\u548c\u8bcd\u6027\u6807\u8bb0 for tok in doc: print(tok.text, \"-->\",tok.dep_,\"-->\", tok.pos_) output: output 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 GDP --> nsubj --> NOUN in --> prep --> ADP developing --> amod --> VERB countries --> pobj --> NOUN such --> amod --> ADJ as --> prep --> ADP Vietnam --> pobj --> PROPN will --> aux --> VERB continue --> ROOT --> VERB growing --> xcomp --> VERB at --> prep --> ADP a --> det --> DET high --> amod --> ADJ rate --> pobj --> NOUN . --> punct --> PUNCT \u770b\u770b\u672f\u8bed\"such\"\u548c\"as\"\u3002\u5b83\u4eec\u8ddf\u5728\u4e00\u4e2a\u540d\u8bcd(\u201ccountries\u201d)\u540e\u3002\u5728\u5b83\u4eec\u4e4b\u540e\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u4e13\u6709\u540d\u8bcd(\u201cVietnam\u201d)\u5145\u5f53\u4e0b\u4f4d\u8bcd\u3002\u56e0\u6b64\uff0c\u8ba9\u6211\u4eec\u4f7f\u7528\u4f9d\u8d56\u9879\u6807\u7b7e\u548c\u8bcd\u6027\u6807\u7b7e\u521b\u5efa\u6240\u9700\u7684\u6a21\u5f0f\uff1a 1 2 3 4 5 # \u5b9a\u4e49\u6a21\u5f0f pattern = [{'POS':'NOUN'}, {'LOWER': 'such'}, {'LOWER': 'as'}, {'POS': 'PROPN'} # \u4e13\u6709\u540d\u8bcd] \u8ba9\u6211\u4eec\u4ece\u6587\u672c\u4e2d\u63d0\u53d6\u6a21\u5f0f\uff1a 1 2 3 4 5 6 7 8 # Matcher\u7c7b\u5bf9\u8c61 matcher = Matcher(nlp.vocab) matcher.add(\"matching_1\", None, pattern) matches = matcher(doc) span = doc[matches[0][1]:matches[0][2]] print(span.text) output: 1 \u2018countries such as Vietnam\u2019 \u597d\u50cf\u4e0d\u9519\u3002\u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230 \u201cdeveloping countries\"\u800c\u4e0d\u53ea\u662f\"countries\u201d\uff0c\u90a3\u4e48\u8f93\u51fa\u5c06\u66f4\u6709\u610f\u4e49\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u73b0\u5728\u8fd8\u5c06\u901a\u8fc7\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u6765\u6355\u83b7\"such as\"\u4e4b\u524d\u7684\u540d\u8bcd\u7684\u4fee\u9970\u8bed\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # Matcher\u7c7b\u5bf9\u8c61 matcher = Matcher(nlp.vocab) # \u5b9a\u4e49\u6a21\u5f0f pattern = [{'DEP':'amod', 'OP':\"?\"}, # \u5f62\u5bb9\u8bcd\u4fee\u9970 {'POS':'NOUN'}, {'LOWER': 'such'}, {'LOWER': 'as'}, {'POS': 'PROPN'}] matcher.add(\"matching_1\", None, pattern) matches = matcher(doc) span = doc[matches[0][1]:matches[0][2]] print(span.text) ouutput: 1 \u2018developing countries such as Vietnam\u2019 \u5728\u8fd9\u91cc\uff0c\"developing countries\"\u662f\u4e0a\u4f4d\u8bcd\uff0c\"Vietnam\u2019\"\u662f\u4e0b\u4f4d\u8bcd\u3002\u4e24\u8005\u5728\u8bed\u4e49\u4e0a\u90fd\u662f\u76f8\u5173\u7684\u3002 \u6ce8\u610f\uff1a\u4ee5\u4e0a\u6a21\u5f0f\u4e2d\u7684\u952e\" OP\"\uff1a\"\uff1f\"\u8868\u793a\u4fee\u9970\u7b26(\u201camod\u201d)\u53ef\u4ee5\u51fa\u73b0\u4e00\u6b21\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u51fa\u73b0\u3002 \u4ee5\u7c7b\u4f3c\u7684\u65b9\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u5176\u4ed6\u6587\u672c\u4e2d\u83b7\u5f97\uff1a Fruits such as apples Cars such as Ferrari Flowers such as rose \u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u4f7f\u7528\u5176\u4ed6\u4e00\u4e9bHearst Patterns\u6765\u63d0\u53d6\u66f4\u591a\u7684\u4e0a\u4f4d\u8bcd\u548c\u4e0b\u4f4d\u8bcd\u3002","title":"\u6a21\u5f0f: X such as Y"},{"location":"pages/nlp/nlpinfo/information-extract-basedon-rule-search-engin/#\u6a21\u5f0f-X-andor-Y","text":"1 2 3 4 5 doc = nlp(\"Here is how you can keep your car and other vehicles clean.\") # \u6253\u5370\u4f9d\u8d56\u9879\u6807\u7b7e\u548c\u8bcd\u6027\u6807\u7b7e for tok in doc: print(tok.text, \"-->\",tok.dep_, \"-->\",tok.pos_) output: 1 2 3 4 5 6 7 8 9 10 11 12 13 Here --> advmod --> ADV is --> ROOT --> VERB how --> advmod --> ADV you --> nsubj --> PRON can --> aux --> VERB keep --> ccomp --> VERB your --> poss --> DET car --> dobj --> NOUN and --> cc --> CCONJ other --> amod --> ADJ vehicles --> conj --> NOUN clean --> oprd --> ADJ . --> punct --> PUNCT 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # Matcher\u7c7b\u5bf9\u8c61 matcher = Matcher(nlp.vocab) # \u5b9a\u4e49\u6a21\u5f0f pattern = [{'DEP':'amod', 'OP':\"?\"}, {'POS':'NOUN'}, {'LOWER': 'and', 'OP':\"?\"}, {'LOWER': 'or', 'OP':\"?\"}, {'LOWER': 'other'}, {'POS': 'NOUN'}] matcher.add(\"matching_1\", None, pattern) matches = matcher(doc) span = doc[matches[0][1]:matches[0][2]] print(span.text) output: 1 \u2018car and other vehicles\u2019 \u8ba9\u6211\u4eec\u5c1d\u8bd5\u76f8\u540c\u7684\u4ee3\u7801\u6765\u6355\u83b7\"X or Y\"\u6a21\u5f0f\uff1a 1 2 # \u5c06'and'\u66ff\u6362\u4e3a'or' doc = nlp(\"Here is how you can keep your car or other vehicles clean.\") \u5176\u4f59\u4ee3\u7801\u5c06\u4fdd\u6301\u4e0d\u53d8\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # Matcher\u7c7b\u5bf9\u8c61 matcher = Matcher(nlp.vocab) #\u5b9a\u4e49\u6a21\u5f0f pattern = [{'DEP':'amod', 'OP':\"?\"}, {'POS':'NOUN'}, {'LOWER': 'and', 'OP':\"?\"}, {'LOWER': 'or', 'OP':\"?\"}, {'LOWER': 'other'}, {'POS': 'NOUN'}] matcher.add(\"matching_1\", None, pattern) matches = matcher(doc) span = doc[matches[0][1]:matches[0][2]] print(span.text) output: 1 \u2018car or other vehicles\u2019","title":"\u6a21\u5f0f: X and/or Y"},{"location":"pages/nlp/nlpinfo/information-extract-basedon-rule-search-engin/#\u6a21\u5f0f-X-including-Y","text":"1 2 3 4 doc = nlp(\"Eight people, including two children, were injured in the explosion\") for tok in doc: print(tok.text, \"-->\",tok.dep_, \"-->\",tok.pos_) output\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 Eight --> nummod --> NUM people --> nsubjpass --> NOUN , --> punct --> PUNCT including --> prep --> VERB two --> nummod --> NUM children --> pobj --> NOUN , --> punct --> PUNCT were --> auxpass --> VERB injured --> ROOT --> VERB in --> prep --> ADP the --> det --> DET explosion --> pobj --> NOUN 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # Matcher\u7c7b\u5bf9\u8c61 matcher = Matcher(nlp.vocab) #\u5b9a\u4e49\u6a21\u5f0f pattern = [{'DEP':'nummod','OP':\"?\"}, # \u6570\u503c\u4fee\u9970 {'DEP':'amod','OP':\"?\"}, # \u5f62\u5bb9\u8bcd\u4fee\u9970 {'POS':'NOUN'}, {'IS_PUNCT': True}, {'LOWER': 'including'}, {'DEP':'nummod','OP':\"?\"}, {'DEP':'amod','OP':\"?\"}, {'POS':'NOUN'}] matcher.add(\"matching_1\", None, pattern) matches = matcher(doc) span = doc[matches[0][1]:matches[0][2]] print(span.text) output: 1 \u2018Eight people, including two children\u2019","title":"\u6a21\u5f0f: X, including Y"},{"location":"pages/nlp/nlpinfo/information-extract-basedon-rule-search-engin/#\u6a21\u5f0f-X-especially-Y","text":"1 2 3 4 doc = nlp(\"A healthy eating pattern includes fruits, especially whole fruits.\") for tok in doc: print(tok.text, tok.dep_, tok.pos_) output: 1 2 3 4 5 6 7 8 9 10 11 A --> det --> DET healthy --> amod --> ADJ eating --> compound --> NOUN pattern --> nsubj --> NOUN includes --> ROOT --> VERB fruits --> dobj --> NOUN , --> punct --> PUNCT especially --> advmod --> ADV whole --> amod --> ADJ fruits --> appos --> NOUN . --> punct --> PUNCT 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # Matcher\u7c7b\u5bf9\u8c61 matcher = Matcher(nlp.vocab) # \u5b9a\u4e49\u6a21\u5f0f pattern = [{'DEP':'nummod','OP':\"?\"}, {'DEP':'amod','OP':\"?\"}, {'POS':'NOUN'}, {'IS_PUNCT':True}, {'LOWER': 'especially'}, {'DEP':'nummod','OP':\"?\"}, {'DEP':'amod','OP':\"?\"}, {'POS':'NOUN'}] matcher.add(\"matching_1\", None, pattern) matches = matcher(doc) span = doc[matches[0][1]:matches[0][2]] print(span.text) output : 1 \u2018fruits, especially whole fruits\u2019","title":"\u6a21\u5f0f: X, especially Y"},{"location":"pages/nlp/nlpinfo/information-extract-basedon-rule-search-engin/#2\u5b50\u6811\u5339\u914d\u4ee5\u8fdb\u884c\u5173\u7cfb\u63d0\u53d6","text":"\u7b80\u5355\u7684\u57fa\u4e8e\u89c4\u5219\u7684\u65b9\u6cd5\u975e\u5e38\u9002\u5408\u4fe1\u606f\u63d0\u53d6\u4efb\u52a1\u3002\u4f46\u662f\uff0c\u5b83\u4eec\u6709\u4e00\u4e9b\u7f3a\u70b9\u548c\u4e0d\u8db3\u3002 \u6211\u4eec\u5fc5\u987b\u6781\u5bcc\u521b\u9020\u529b\uff0c\u4ee5\u63d0\u51fa\u65b0\u7684\u89c4\u5219\u6765\u6355\u83b7\u4e0d\u540c\u7684\u6a21\u5f0f\u3002\u5f88\u96be\u5efa\u7acb\u80fd\u5728\u4e0d\u540c\u53e5\u5b50\u4e4b\u95f4\u5f88\u597d\u5730\u6982\u62ec\u7684\u6a21\u5f0f\u3002 \u4e3a\u4e86\u589e\u5f3a\u57fa\u4e8e\u89c4\u5219\u7684\u5173\u7cfb/\u4fe1\u606f\u63d0\u53d6\u65b9\u6cd5\uff0c\u6211\u4eec\u5e94\u8be5\u5c1d\u8bd5\u4e86\u89e3\u73b0\u6709\u53e5\u5b50\u7684\u4f9d\u5b58\u5173\u7cfb\u7ed3\u6784\u3002\u8ba9\u6211\u4eec\u4ee5\u793a\u4f8b\u6587\u672c\u4e3a\u4f8b\uff0c\u6784\u5efa\u5176\u4f9d\u8d56\u5173\u7cfb\u56fe\u8868\u6811\uff1a 1 2 3 4 5 text = \"Tableau was recently acquired by Salesforce.\" # \u7ed8\u5236\u4f9d\u8d56\u56fe doc = nlp(text) displacy.render(doc, style='dep',jupyter=True) output: \u4f60\u80fd\u5728\u8fd9\u53e5\u8bdd\u4e2d\u627e\u5230\u4efb\u4f55\u6709\u8da3\u7684\u5173\u7cfb\u5417\uff1f\u5982\u679c\u4f60\u67e5\u770b\u53e5\u5b50\u4e2d\u7684\u5b9e\u4f53:Tableau\u548cSalesforce,\u5b83\u4eec\u4e0e\u672f\u8bed\"acquired\"\u76f8\u5173\u3002\u56e0\u6b64\uff0c\u6211\u53ef\u4ee5\u4ece\u8fd9\u53e5\u8bdd\u4e2d\u63d0\u53d6\u7684\u6a21\u5f0f\u662f\" Salesforce acquired Tableau\"\u6216\" X acquired Y\"\u3002 \u73b0\u5728\u8003\u8651\u4ee5\u4e0b\u8bf4\u6cd5\uff1aCareem, a ride-hailing major in the middle east, was acquired by Uber.\" \u5176\u4f9d\u8d56\u56fe\u5c06\u5982\u4e0b\u6240\u793a\uff1a \u5f88\u5413\u4eba\u5427\uff1f \u4e0d\u8fc7\u4e0d\u7528\u62c5\u5fc3\u6211\u4eec\u9700\u8981\u68c0\u67e5\u7684\u662f\uff0c\u591a\u4e2a\u53e5\u5b50\u4e4b\u95f4\u6709\u54ea\u4e9b\u5171\u540c\u4f9d\u8d56\u8def\u5f84\u3002\u6b64\u65b9\u6cd5\u79f0\u4e3a\u5b50\u6811\u5339\u914d\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u5c06\u6b64\u8bed\u53e5\u4e0e\u4e0a\u4e00\u4e2a\u8bed\u53e5\u8fdb\u884c\u6bd4\u8f83\uff1a \u6211\u4eec\u5c06\u4ec5\u8003\u8651\u516c\u5171\u4f9d\u8d56\u8def\u5f84\uff0c\u5e76\u63d0\u53d6\u5b9e\u4f53\u4ee5\u53ca\u5b83\u4eec\u4e4b\u95f4\u7684\u5173\u7cfb(acquired)\u3002\u56e0\u6b64\uff0c\u4ece\u8fd9\u4e9b\u53e5\u5b50\u4e2d\u63d0\u53d6\u7684\u5173\u7cfb\u4e3a\uff1a Salesforce acquired Tableau Uber acquired Careem \u8ba9\u6211\u4eec\u5c1d\u8bd5\u5728Python\u4e2d\u5b9e\u73b0\u6b64\u6280\u672f\u3002\u6211\u4eec\u5c06\u518d\u6b21\u4f7f\u7528spaCy\uff0c\u56e0\u4e3a\u5b83\u5f88\u5bb9\u6613\u904d\u5386\u4f9d\u8d56\u6811\u3002 \u6211\u4eec\u5c06\u9996\u5148\u67e5\u770b\u53e5\u5b50\u4e2d\u5355\u8bcd\u7684\u4f9d\u8d56\u9879\u6807\u7b7e\u548cPOS\uff1a 1 2 3 4 5 text = \"Tableau was recently acquired by Salesforce.\" doc = nlp(text) for tok in doc: print(tok.text,\"-->\",tok.dep_,\"-->\",tok.pos_) output: 1 2 3 4 5 6 7 Tableau --> nsubjpass --> PROPN was --> auxpass --> VERB recently --> advmod --> ADV acquired --> ROOT --> VERB by --> agent --> ADP Salesforce --> pobj --> PROPN . --> punct --> PUNCT \u5728\u8fd9\u91cc\uff0c\" Tableau\"\u7684\u4f9d\u8d56\u9879\u6807\u7b7e\u662fnsubjpass\uff0c\u5b83\u8868\u793a\u88ab\u52a8\u4e3b\u8bed(\u56e0\u4e3a\u5b83\u662f\u88ab\u52a8\u53e5\u5b50)\u3002\u53e6\u4e00\u4e2a\u5b9e\u4f53\"Salesforce\"\u662f\u8be5\u53e5\u5b50\u4e2d\u7684\u5bbe\u8bed\uff0c\u672f\u8bed\"acquired\"\u662f\u53e5\u5b50\u7684\u6839\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4ee5\u67d0\u79cd\u65b9\u5f0f\u5c06\u5bbe\u8bed\u548c\u4e3b\u8bed\u8054\u7cfb\u8d77\u6765\u3002 \u8ba9\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u6765\u6267\u884c\u5b50\u6811\u5339\u914d\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 def subtree_matcher(doc): x = '' y = '' # \u904d\u5386\u8f93\u5165\u53e5\u5b50\u4e2d\u7684\u6240\u6709\u6807\u8bb0 for i,tok in enumerate(doc): # \u62bd\u53d6\u4e3b\u8bed if tok.dep_.find(\"subjpass\") == True: y = tok.text # \u62bd\u53d6\u5bbe\u8bed if tok.dep_.endswith(\"obj\") == True: x = tok.text return x,y \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ea\u9700\u8981\u67e5\u627e\u6240\u6709\u7b26\u5408\u4ee5\u4e0b\u6761\u4ef6\u7684\u53e5\u5b50\uff1a \u6709\u4e24\u4e2a\u5b9e\u4f53\uff0c\u5e76\u4e14\"acquired\"\u4e00\u8bcd\u662f\u53e5\u5b50\u4e2d\u552f\u4e00\u7684\u6839 \u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u53e5\u5b50\u4e2d\u6355\u83b7\u4e3b\u8bed\u548c\u5bbe\u8bed\u3002\u8ba9\u6211\u4eec\u8c03\u7528\u4e0a\u9762\u7684\u51fd\u6570\uff1a 1 subtree_matcher ( doc ) output: 1 (\u2018Salesforce\u2019, \u2018Tableau\u2019) \u8fd9\u91cc\uff0c\u4e3b\u8bed\u662f\u6536\u8d2d\u8005\uff0c\u5bbe\u8bed\u662f\u88ab\u6536\u8d2d\u7684\u5b9e\u4f53\u3002\u8ba9\u6211\u4eec\u4f7f\u7528\u76f8\u540c\u7684\u51fd\u6570subtree_matcher()\u6765\u63d0\u53d6\u901a\u8fc7\u76f8\u540c\u5173\u7cfb\uff08\u201cacquired\u201d\uff09\u5173\u8054\u7684\u5b9e\u4f53\uff1a 1 2 3 4 text_2 = \"Careem, a ride hailing major in middle east, was acquired by Uber.\" doc_2 = nlp(text_2) subtree_matcher(doc_2) output: 1 (\u2018Uber\u2019, \u2018Careem\u2019) \u4f60\u770b\u5230\u8fd9\u91cc\u53d1\u751f\u4e86\u4ec0\u4e48\u5417\uff1f\u8fd9\u53e5\u8bdd\u6709\u66f4\u591a\u7684\u5355\u8bcd\u548c\u6807\u70b9\u7b26\u53f7\uff0c\u4f46\u6211\u4eec\u7684\u903b\u8f91\u4ecd\u7136\u6709\u6548\u5e76\u6210\u529f\u5730\u63d0\u53d6\u4e86\u76f8\u5173\u5b9e\u4f53\u3002 \u4f46\u662f\uff0c\u7b49\u7b49-\u5982\u679c\u6211\u5c06\u53e5\u5b50\u4ece\u88ab\u52a8\u8bed\u6001\u66f4\u6539\u4e3a\u4e3b\u52a8\u8bed\u6001\u600e\u4e48\u529e\uff1f\u6211\u4eec\u7684\u903b\u8f91\u4ecd\u7136\u6709\u6548\u5417\uff1f 1 2 3 text_3 = \"Salesforce recently acquired Tableau.\" doc_3 = nlp(text_3) subtree_matcher(doc_3) output: 1 (\u2018Tableau\u2019, \u2018 \u2018) \u90a3\u4e0d\u662f\u6211\u4eec\u6240\u671f\u671b\u7684\u3002\u8be5\u529f\u80fd\u672a\u80fd\u6355\u83b7\" Salesforce\"\uff0c\u5e76\u9519\u8bef\u5730\u5c06\" Tableau\"\u8fd4\u56de\u4e3a\u6536\u8d2d\u65b9\u3002 \u90a3\u4e48\u662f\u4ec0\u4e48\u95ee\u9898\u4e86\uff1f\u8ba9\u6211\u4eec\u4e86\u89e3\u4e00\u4e0b\u8fd9\u53e5\u8bdd\u7684\u4f9d\u8d56\u5173\u7cfb\u6811\uff1a 1 2 for tok in doc_3: print(tok.text, \"-->\",tok.dep_, \"-->\",tok.pos_) output: 1 2 3 4 5 Salesforce --> nsubj --> PROPN recently --> advmod --> ADV acquired --> ROOT --> VERB Tableau --> dobj --> PROPN . --> punct --> PUNCT \u4e8b\u5b9e\u8bc1\u660e\uff0c\" Salesforce\"\u548c\" Tableau\"\u8fd9\u4e24\u4e2a\u672f\u8bed\u7684\u8bed\u6cd5\u529f\u80fd(\u4e3b\u8bed\u548c\u5bbe\u8bed)\u5df2\u7ecf\u5728\u4e3b\u52a8\u8bed\u6001\u4e2d\u4e92\u6362\u4e86\u3002\u4f46\u662f\uff0c\u73b0\u5728\u8be5\u4e3b\u8bed\u7684\u4f9d\u8d56\u9879\u6807\u7b7e\u5df2\u4ece\" nsubjpass\"\u66f4\u6539\u4e3a\" nsubj\"\u3002\u4ed6\u7684\u6807\u7b7e\u8868\u660e\u53e5\u5b50\u662f\u4e3b\u52a8\u8bed\u6001\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6b64\u5c5e\u6027\u6765\u4fee\u6539\u5b50\u6811\u5339\u914d\u529f\u80fd\u3002\u4e0b\u9762\u7ed9\u51fa\u7684\u662f\u5b50\u6811\u5339\u914d\u7684\u65b0\u529f\u80fd\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 def subtree_matcher(doc): subjpass = 0 for i,tok in enumerate(doc): # \u53d1\u73b0\u5305\u542b\"subjpass\" \u6587\u672c\u7684\u4f9d\u8d56\u9879\u6807\u7b7e if tok.dep_.find(\"subjpass\") == True: subjpass = 1 x = '' y = '' # \u5982\u679csubjpass == 1 \u90a3\u4e48\u53e5\u5b50\u662f\u4e3b\u52a8\u8bed\u6001 if subjpass == 1: for i,tok in enumerate(doc): if tok.dep_.find(\"subjpass\") == True: y = tok.text if tok.dep_.endswith(\"obj\") == True: x = tok.text # \u5982\u679csubjpass == 0 \u90a3\u4e48\u53e5\u5b50\u662f\u88ab\u52a8\u8bed\u6001 else: for i,tok in enumerate(doc): if tok.dep_.endswith(\"subj\") == True: x = tok.text if tok.dep_.endswith(\"obj\") == True: y = tok.text return x,y \u8ba9\u6211\u4eec\u5728\u4e3b\u52a8\u8bed\u53e5\u5b50\u4e0a\u5c1d\u8bd5\u8fd9\u4e2a\u65b0\u51fd\u6570: 1 new_subtree_matcher(doc_3) output: 1 (\u2018Salesforce\u2019, \u2018Tableau\u2019) \u8f93\u51fa\u6b63\u786e\u3002\u8ba9\u6211\u4eec\u5c06\u4e4b\u524d\u7684\u88ab\u52a8\u8bed\u53e5\u4f20\u9012\u7ed9\u6b64\u51fd\u6570\uff1a 1 new_subtree_matcher(nlp(\"Tableau was recently acquired by Salesforce.\")) output: 1 (\u2018Salesforce\u2019, \u2018Tableau\u2019) \u8fd9\u6b63\u662f\u6211\u4eec\u60f3\u8981\u7684\u3002\u6211\u4eec\u4f7f\u51fd\u6570\u7a0d\u5fae\u66f4\u901a\u7528\u3002\u6211\u5e0c\u671b\u4f60\u6df1\u5165\u7814\u7a76\u4e0d\u540c\u7c7b\u578b\u53e5\u5b50\u7684\u8bed\u6cd5\u7ed3\u6784\uff0c\u5e76\u5c1d\u8bd5\u4f7f\u6b64\u529f\u80fd\u66f4\u52a0\u7075\u6d3b\u3002","title":"2.\u5b50\u6811\u5339\u914d\u4ee5\u8fdb\u884c\u5173\u7cfb\u63d0\u53d6"},{"location":"pages/nlp/nlpinfo/information-extract-basedon-rule-search-engin/#\u7ed3\u8bed","text":"\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u4e86\u89e3\u4e86\u4fe1\u606f\u63d0\u53d6\uff0c\u5173\u7cfb\u548c\u4e09\u5143\u7ec4\u7684\u6982\u5ff5\u4ee5\u53ca\u5173\u7cfb\u63d0\u53d6\u7684\u4e0d\u540c\u65b9\u6cd5\u3002\u5c31\u6211\u4e2a\u4eba\u800c\u8a00\uff0c\u6211\u771f\u7684\u5f88\u4e50\u4e8e\u5bf9\u6b64\u4e3b\u9898\u8fdb\u884c\u7814\u7a76\uff0c\u5e76\u8ba1\u5212\u64b0\u5199\u66f4\u591a\u6709\u5173\u66f4\u9ad8\u7ea7\u4fe1\u606f\u63d0\u53d6\u65b9\u6cd5\u7684\u6587\u7ae0\u3002","title":"\u7ed3\u8bed"},{"location":"pages/nlp/nlpinfo/keywords-auto-extract/","text":"\u5173\u952e\u8bcd\u4e0e\u6587\u7ae0\u76f8\u5173\u6027, \u5173\u952e\u8bcd\u81ea\u52a8\u6807\u6ce8\u4e0e\u63d0\u53d6 \u00b6 \u4e00.\u5173\u952e\u8bcd\u81ea\u52a8\u6807\u6ce8\u7b80\u4ecb \u00b6 1.\u5173\u952e\u8bcd\u81ea\u52a8\u6807\u6ce8 \u00b6 \u5173\u952e\u8bcd\u662f\u6307\u80fd\u53cd\u6620\u6587\u672c\u4e3b\u9898\u6216\u8005\u610f\u601d\u7684\u8bcd\u8bed\uff0c\u5982\u8bba\u6587\u4e2d\u7684Keyword\u5b57\u6bb5\u3002\u5927\u591a\u6570\u4eba\u5199\u6587\u7ae0\u7684\u65f6\u5019\uff0c\u4e0d\u4f1a\u50cf\u5199\u8bba\u6587\u7684\u90a3\u6837\u660e\u786e\u7684\u6307\u51fa\u6587\u7ae0\u7684\u5173\u952e\u8bcd\u662f\u4ec0\u4e48\uff0c\u5173\u952e\u8bcd\u81ea\u52a8\u6807\u6ce8\u4efb\u52a1\u6b63\u662f\u5728\u8fd9\u79cd\u80cc\u666f\u4e0b\u4ea7\u751f\u7684\u3002 \u76ee\u524d\uff0c\u5173\u952e\u8bcd\u81ea\u52a8\u6807\u6ce8\u65b9\u6cd5\u5206\u4e3a\u4e24\u7c7b\uff1a1\uff09\u5173\u952e\u8bcd\u5206\u914d\uff0c\u9884\u5148\u5b9a\u4e49\u4e00\u4e2a\u5173\u952e\u8bcd\u8bcd\u5e93\uff0c\u5bf9\u4e8e\u4e00\u7bc7\u6587\u7ae0\uff0c\u4ece\u8bcd\u5e93\u4e2d\u9009\u53d6\u82e5\u5e72\u8bcd\u8bed\u4f5c\u4e3a\u6587\u7ae0\u7684\u5173\u952e\u8bcd\uff1b2\uff09\u5173\u952e\u8bcd\u62bd\u53d6\uff0c\u4ece\u6587\u7ae0\u7684\u5185\u5bb9\u4e2d\u62bd\u53d6\u4e00\u4e9b\u8bcd\u8bed\u4f5c\u4e3a\u5173\u952e\u8bcd\u3002 2.\u5e94\u7528\u573a\u666f \u00b6 \u5173\u952e\u8bcd\u81ea\u52a8\u6807\u6ce8\u6280\u672f\u5728\u63a8\u8350\u9886\u57df\u4e5f\u6709\u7740\u5e7f\u6cdb\u7684\u5e94\u7528\u3002\u5982\u56fe1\u6240\u793a\uff0c\u5f53\u7528\u6237\u9605\u8bfb\u56fe\u4e2d\u5de6\u8fb9\u7684\u65b0\u95fb\u65f6\uff0c\u63a8\u8350\u7cfb\u7edf\u53ef\u4ee5\u7ed9\u7528\u6237\u63a8\u8350\u5305\u542b\u5173\u952e\u8bcd\u201dDropbox\u201d\u3001\u201d\u4e91\u5b58\u50a8\u201d\u7684\u8d44\u8baf\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u6839\u636e\u6587\u7ae0\u5173\u952e\u8bcd\u7ed9\u7528\u6237\u63a8\u8350\u76f8\u5173\u7684\u5e7f\u544a\u3002 \u56fe1\u57fa\u4e8e\u5173\u952e\u8bcd\u7684\u8d44\u8baf\u63a8\u8350\u7cfb\u7edf \u5173\u952e\u8bcd\u53ef\u4ee5\u4f5c\u4e3a\u7528\u6237\u5174\u8da3\u7684\u7279\u5f81\uff0c\u4ece\u800c\u6ee1\u8db3\u7528\u6237\u7684\u957f\u5c3e\u9605\u8bfb\u5174\u8da3\u3002\u5173\u952e\u8bcd\u8fd8\u5728\u6587\u672c\u805a\u7c7b\u3001\u5206\u7c7b\u3001\u6458\u8981\u7b49\u9886\u57df\u4e2d\u6709\u7740\u91cd\u8981\u7684\u4f5c\u7528\u3002\u6bd4\u5982\u5728\u805a\u7c7b\u65f6\uff0c\u5c06\u5173\u952e\u8bcd\u76f8\u4f3c\u7684\u51e0\u7bc7\u6587\u7ae0\u770b\u6210\u4e00\u4e2a\u7c7b\u56e2\u53ef\u4ee5\u5927\u5927\u63d0\u9ad8K-means\u805a\u7c7b\u7684\u6536\u655b\u901f\u5ea6\u3002\u4ece\u67d0\u5929\u6240\u6709\u65b0\u95fb\u4e2d\u63d0\u53d6\u51fa\u8fd9\u4e9b\u65b0\u95fb\u7684\u5173\u952e\u8bcd\uff0c\u5c31\u53ef\u4ee5\u5927\u81f4\u77e5\u9053\u90a3\u5929\u53d1\u751f\u4e86\u4ec0\u4e48\u4e8b\u60c5\u3002\u6216\u8005\u5c06\u67d0\u6bb5\u65f6\u95f4\u4e2d\u51e0\u4e2a\u4eba\u7684\u5fae\u535a\u62fc\u6210\u4e00\u7bc7\u957f\u6587\u672c\uff0c\u7136\u540e\u62bd\u53d6\u5173\u952e\u8bcd\u5c31\u53ef\u4ee5\u77e5\u9053\u4ed6\u4eec\u4e3b\u8981\u5728\u8ba8\u8bba\u4e9b\u4ec0\u4e48\u8bdd\u9898\u3002 3.\u73b0\u6709\u95ee\u9898\u4e0e\u6311\u6218 \u00b6 \u6587\u7ae0\u7684\u5173\u952e\u8bcd\u901a\u5e38\u5177\u6709\u4ee5\u4e0b\u4e09\u4e2a\u7279\u70b9[1]\uff1a \u53ef\u8bfb\u6027\u3002\u5173\u952e\u8bcd\u672c\u8eab\u5e94\u8be5\u662f\u6709\u610f\u4e49\u7684\u8bcd\u6216\u8005\u77ed\u8bed\u3002\u4f8b\u5982\uff0c\u201c\u6211\u4eec\u7ea6\u4f1a\u5427\u201d\u662f\u6709\u610f\u4e49\u7684\u77ed\u8bed\uff0c\u800c\u201c\u6211\u4eec\u201d\u5219\u4e0d\u662f\u3002 \u76f8\u5173\u6027\u3002\u5173\u952e\u8bcd\u5fc5\u987b\u4e0e\u6587\u7ae0\u7684\u4e3b\u9898\u76f8\u5173\u3002\u4f8b\u5982\uff0c\u4e00\u7bc7\u4ecb\u7ecd\u5df4\u8428\u5728\u5fb7\u6bd4\u4e2d\u8f93\u7ed9\u7687\u9a6c\u7684\u65b0\u95fb\uff0c\u5176\u4e2d\u53ef\u80fd\u987a\u5e26\u63d0\u5230\u4e86\u201c\u4e2d\u8d85\u8054\u8d5b\u201d\u8fd9\u4e2a\u5173\u77ed\u8bed\uff0c\u8fd9\u65f6\u5c31\u4e0d\u5e0c\u671b\u8fd9\u4e2a\u77ed\u8bed\u88ab\u9009\u53d6\u4f5c\u4e3a\u8be5\u65b0\u95fb\u7684\u5173\u952e\u8bcd\u3002 \u8986\u76d6\u5ea6\u3002\u5173\u952e\u8bcd\u96c6\u5408\u80fd\u5bf9\u6587\u7ae0\u7684\u4e3b\u9898\u6709\u8f83\u597d\u7684\u8986\u76d6\u5ea6\uff0c\u4e0d\u80fd\u53ea\u96c6\u4e2d\u5728\u6587\u7ae0\u7684\u67d0\u4e2a\u4e3b\u9898\u800c\u5ffd\u7565\u4e86\u6587\u7ae0\u7684\u5176\u4ed6\u4e3b\u9898\u3002 \u4ece\u4e0a\u8ff0\u4e09\u4e2a\u7279\u70b9\uff0c\u53ef\u4ee5\u770b\u5230\u5173\u952e\u8bcd\u6807\u6ce8\u7b97\u6cd5\u7684\u8981\u6c42\u4ee5\u53ca\u9762\u4e34\u7684\u6311\u6218\uff1aa.\u65b0\u8bcd\u53d1\u73b0\u4ee5\u53ca\u77ed\u8bed\u8bc6\u522b\u95ee\u9898\uff0c\u600e\u6837\u5feb\u901f\u8bc6\u522b\u51fa\u7f51\u7edc\u4e0a\u6700\u65b0\u51fa\u73b0\u7684\u8bcd\u6c47\uff08\u4eba\u8270\u4e0d\u62c6\u3001\u53ef\u884c\u53ef\u73cd\u60dc\u2026\uff09\uff1fb.\u5173\u952e\u8bcd\u5019\u9009\u96c6\u5408\u7684\u95ee\u9898\uff0c\u5e76\u4e0d\u662f\u6587\u7ae0\u4e2d\u6240\u6709\u7684\u8bcd\u8bed\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u5019\u9009\uff1bc.\u600e\u4e48\u8ba1\u7b97\u5019\u9009\u8bcd\u548c\u6587\u7ae0\u4e4b\u95f4\u7684\u76f8\u5173\u6027\uff1fd.\u5982\u4f55\u8986\u76d6\u6587\u7ae0\u7684\u5404\u4e2a\u4e3b\u9898\uff1f \u5173\u952e\u8bcd\u5206\u914d\u7b97\u6cd5\u9700\u8981\u9884\u5148\u5b9a\u4e49\u4e00\u4e2a\u5173\u952e\u8bcd\u8bcd\u5e93\uff0c\u8fd9\u5c31\u9650\u5b9a\u4e86\u5173\u952e\u8bcd\u5019\u9009\u8303\u56f4\uff0c\u7b97\u6cd5\u7684\u53ef\u6269\u5c55\u6027\u8f83\u5dee\uff0c\u4e14\u8017\u65f6\u8017\u529b\uff1b\u5173\u952e\u8bcd\u62bd\u53d6\u7b97\u6cd5\u662f\u4ece\u6587\u7ae0\u7684\u5185\u5bb9\u4e2d\u62bd\u53d6\u4e00\u4e9b\u8bcd\u8bed\u4f5c\u4e3a\u6807\u7b7e\u8bcd\uff0c\u5f53\u6587\u7ae0\u4e2d\u6ca1\u6709\u8d28\u91cf\u8f83\u9ad8\u7684\u8bcd\u8bed\u65f6\uff0c\u8fd9\u7c7b\u65b9\u6cd5\u5c31\u65e0\u80fd\u4e3a\u529b\u4e86\u3002\u4e3a\u4e86\u89e3\u51b3\u4e0a\u8ff0\u8fd9\u4e9b\u95ee\u9898\u548c\u6311\u6218\uff0c\u6211\u4eec\u8bbe\u8ba1\u4e86\u5c42\u6b21\u5316\u5173\u952e\u8bcd\u81ea\u52a8\u6807\u6ce8\u7b97\u6cd5. \u4e8c.\u5c42\u6b21\u5316\u5173\u952e\u8bcd\u81ea\u52a8\u6807\u6ce8\u7b97\u6cd5 \u00b6 1.\u5c42\u6b21\u5316\u5173\u952e\u8bcd\u4f53\u7cfb \u00b6 \u9488\u5bf9\u65b0\u95fb\u7684\u5173\u952e\u8bcd\u8bc6\u522b\u4efb\u52a1\uff0c\u6211\u4eec\u8bbe\u8ba1\u4e86\u4e00\u5957\u5c42\u6b21\u5316\u7684\u5173\u952e\u8bcd\u4f53\u7cfb\uff0c\u5982\u56fe3\u6240\u793a\u3002\u7b2c\u4e00\u5c42\u662f\u65b0\u95fb\u9891\u9053\uff08\u4f53\u80b2\u3001\u5a31\u4e50\u3001\u79d1\u6280\u3001etc\uff09\uff0c\u7b2c\u4e8c\u5c42\u662f\u65b0\u95fb\u7684\u4e3b\u9898\uff08\u4e00\u7bc7\u65b0\u95fb\u53ef\u4ee5\u5305\u542b\u591a\u4e2a\u4e3b\u9898\uff09,\u7b2c\u4e09\u6b21\u662f\u6587\u7ae0\u4e2d\u51fa\u73b0\u7684\u6807\u7b7e\u8bcd\u3002 \u56fe3\u5c42\u6b21\u5316\u5173\u952e\u8bcd\u4f53\u7cfb \u4e09\u5c42\u5173\u952e\u8bcd\u4f53\u7cfb\u6709\u4ee5\u4e0b\u51e0\u4e2a\u4f18\u70b9\uff1a \u4e09\u5c42\u5173\u952e\u8bcd\u4f53\u7cfb\u4ece\u4e0d\u540c\u89d2\u5ea6\u63cf\u8ff0\u6587\u7ae0\u6240\u8868\u8fbe\u7684\u5185\u5bb9\uff0c\u4ece\u800c\u80fd\u8ba9\u6807\u6ce8\u7ed3\u679c\u80fd\u66f4\u597d\u5730\u8986\u76d6\u6587\u7ae0\u7684\u5404\u4e2a\u4e3b\u9898\uff0c\u7f13\u89e3\u4e86\u5173\u952e\u8bcd\u8986\u76d6\u5ea6\u4e0d\u591f\u7684\u95ee\u9898\u3002 \u7531\u4e8e\u5404\u5c42\u4e4b\u95f4\u6709\u96b6\u5c5e\u5173\u7cfb\uff0c\u5229\u7528\u8fd9\u79cd\u5173\u7cfb\uff0c\u53ef\u4ee5\u62bd\u53d6\u51fa\u66f4\u76f8\u5173\u7684\u5173\u952e\u8bcd\uff0c\u5982\uff1a\u201c\u975e\u8bda\u52ff\u6270\u201d\u5728\u5a31\u4e50\u65b0\u95fb\u4e2d\u53ef\u80fd\u662f\u6307\u5a31\u4e50\u8282\u76ee\u6216\u8005\u7535\u5f71\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u5173\u952e\u8bcd\uff1b\u5982\u679c\u662f\u51fa\u73b0\u5728\u6c7d\u8f66\u65b0\u95fb\u4e2d\uff0c\u5219\u4e0d\u592a\u53ef\u80fd\u662f\u6587\u7ae0\u7684\u5173\u952e\u8bcd\u3002 \u56fe4\u5c42\u6b21\u5316\u5173\u952e\u8bcd\u81ea\u52a8\u6807\u6ce8\u7ed3\u679c\u793a\u4f8b 2.\u7b97\u6cd5\u6d41\u7a0b \u00b6 \u4ece\u56fe3\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u4e3b\u9898\u548c\u6807\u7b7e\u8bcd\u4f9d\u8d56\u4e8e\u65b0\u95fb\u9891\u9053\uff0c\u6240\u4ee5\u5728\u6807\u6ce8\u4e00\u7bc7\u65b0\u95fb\u7684\u5173\u952e\u8bcd\u65f6\uff0c\u9996\u5148\u9700\u8981\u83b7\u53d6\u65b0\u95fb\u7684\u7c7b\u522b\uff0c\u7136\u540e\u6839\u636e\u65b0\u95fb\u7684\u7c7b\u522b\u9009\u62e9\u4e0d\u540c\u7684\u4e3b\u9898\u6a21\u578b\u9884\u6d4b\u65b0\u95fb\u7684\u4e3b\u9898\uff0c\u6700\u540e\u518d\u62bd\u53d6\u65b0\u95fb\u4e2d\u7684\u6807\u7b7e\u8bcd\u3002 \u5728\u5173\u952e\u8bcd\u6807\u6ce8\u65b9\u6cd5\u4e0a\uff0c\u6211\u4eec\u878d\u5408\u4e86\u5173\u952e\u8bcd\u5206\u914d\u548c\u5173\u952e\u8bcd\u62bd\u53d6\u4e24\u7c7b\u65b9\u6cd5\u3002\u56fe5\u63cf\u8ff0\u4e86\u7b97\u6cd5\u5904\u7406\u4e00\u7bc7\u6587\u7ae0\u7684\u6d41\u7a0b\u3002\u5176\u4e2d\u9891\u9053\u548c\u4e3b\u9898\u7684\u62bd\u53d6\u65b9\u6cd5\u5c5e\u4e8e\u5173\u952e\u8bcd\u5206\u914d\u8fd9\u4e00\u7c7b\u7b97\u6cd5\uff0c\u6807\u7b7e\u8bcd\u62bd\u53d6\u5219\u5c5e\u4e8e\u5173\u952e\u8bcd\u62bd\u53d6\u8fd9\u4e00\u7c7b\u7b97\u6cd5\u3002\u9664\u4e86\u4e0a\u4e00\u8282\u4e2d\u6240\u8bf4\u7684\u5c42\u6b21\u5316\u5173\u952e\u8bcd\u7684\u4e24\u4e2a\u4f18\u70b9\u4e4b\u5916\uff0c\u6211\u4eec\u7684\u7b97\u6cd5\u6709\u5982\u4e0b\u51e0\u70b9\u597d\u5904\uff1a \u5173\u952e\u8bcd\u5206\u914d\u7b97\u6cd5\u6709\u6548\u7f13\u89e3\u5173\u952e\u8bcd\u62bd\u53d6\u7b97\u6cd5\u53ec\u56de\u4e0d\u8db3\u7684\u95ee\u9898\u3002 \u5728\u5173\u952e\u8bcd\u5206\u914d\u7b97\u6cd5\u4e2d\uff0c\u4f7f\u7528\u9891\u9053\u548c\u4e3b\u9898\u4ee3\u66ff\u4f20\u7edf\u7684\u5173\u952e\u8bcd\uff0c\u4ece\u800c\u51cf\u5c11\u8bcd\u5e93\u6784\u5efa\u6210\u672c\u3001\u589e\u5f3a\u7b97\u6cd5\u7684\u53ef\u79fb\u690d\u6027\u3002 \u56fe5\u5c42\u6b21\u5316\u5173\u952e\u8bcd\u81ea\u52a8\u6807\u6ce8\u7b97\u6cd5\u6d41\u7a0b 2.1 \u6587\u672c\u5206\u7c7b\u5668 \u6587\u672c\u5206\u7c7b\u5668\u6211\u4eec\u91c7\u7528\u6700\u5927\u71b5\u6a21\u578b[2]\uff0c\u4f7f\u7528\u4e1a\u52a1\u6700\u8fd1\u4e00\u5e74\u5e26\u9891\u9053\u6807\u7b7e\u7684\u65b0\u95fb\u4f5c\u4e3a\u8bad\u7ec3\u96c6\u3002\u6bcf\u4e2a\u9891\u9053\u9009\u53d6\u9891\u9053\u76f8\u5173\u5ea6\u6700\u9ad8\u76841W\u4e2a\u8bcd\u8bed\u4f5c\u4e3a\u5206\u7c7b\u7279\u5f81\u3002 \u5bf9\u4e8e\u6700\u5927\u71b5\u6a21\u578b\uff0c\u7f51\u4e0a\u53ef\u4ee5\u627e\u5230\u5f88\u591a\u76f8\u5173\u8d44\u6599\uff0c\u8fd9\u91cc\u5c31\u4e0d\u4f5c\u4ecb\u7ecd\u4e86\u3002 2.2 \u4e3b\u9898\u9884\u6d4b \u4f7f\u7528LDA[3]\u4f5c\u4e3a\u4e3b\u9898\u805a\u7c7b\u6a21\u578b\u3002LDA\u5f00\u6e90\u7684\u5927\u90e8\u5206\u5f00\u6e90\u5b9e\u73b0\u90fd\u662f\u5355\u8fdb\u7a0b\u7684\uff0c\u5728\u5904\u7406\u8f83\u5927\u89c4\u6a21\u7684\u8bed\u6599\u65f6\uff0c\u5176\u65f6\u95f4\u548c\u5185\u5b58\u5f00\u9500\u90fd\u975e\u5e38\u5927\uff0c\u65e0\u6cd5\u6ee1\u8db3\u6211\u4eec\u7684\u8981\u6c42\u3002\u56e0\u6b64\u6211\u4eec\u5b9e\u73b0\u4e86\u4e00\u5957\u5206\u5e03\u5f0f\u7684LDA\u5e73\u53f0\uff0c\u4f7f\u5f97\u80fd\u591f\u5feb\u901f\u5904\u7406\u5927\u89c4\u6a21\u7684\u6570\u636e\u3002 \u8bed\u6599\u901a\u8fc7LDA\u5e73\u53f0\u5904\u7406\u540e\uff0c\u4f1a\u5f97\u5230\u6bcf\u4e2a\u4e3b\u9898\u4e0b\u6982\u7387\u8f83\u9ad8\u7684\u8bcd\u8bed\u3002\u4eba\u5de5\u9009\u53d6\u8d28\u91cf\u8f83\u9ad8\u7684\u4e3b\u9898\uff0c\u5e76\u4f7f\u7528\u4e00\u4e2a\u8bcd\u8bed\u6216\u8005\u77ed\u8bed\u6982\u62ec\u8fd9\u4e2a\u4e3b\u9898\u3002\u5bf9\u4e8e\u4e00\u7bc7\u6587\u7ae0\uff0cLDA\u7684inference\u7ed3\u679c\u662f\u4e00\u4e2a\u6982\u7387\u5411\u91cf\uff0c\u6211\u4eec\u9009\u53d6\u6982\u7387\u503c\u5927\u4e8e\u9608\u503c\u7684\u4e3b\u9898\u4f5c\u4e3a\u6587\u7ae0\u6240\u5c5e\u7684\u4e3b\u9898\u3002 \u56fe6\u9ad8\u8d28\u91cf\u7684\u4e3b\u9898 \u56fe7\u6587\u7ae0\u7684\u4e3b\u9898\u5173\u952e\u8bcd 2.3 \u6807\u7b7e\u8bcd\u62bd\u53d6 \u6807\u7b7e\u8bcd\u62bd\u53d6\u5305\u62ec\uff1a\u751f\u6210\u5019\u9009\u8bcd\u548c\u76f8\u5173\u6027\u8ba1\u7b97\u3002\u4e0b\u9762\u5206\u522b\u4ecb\u7ecd\u8fd9\u4e24\u90e8\u5206\u3002 1)\u751f\u6210\u5019\u9009\u8bcd \u901a\u8fc7\u5206\u8bcd\u5f97\u5230\u7684\u57fa\u672c\u8bcd\u3001\u77ed\u8bed\u7b49\uff0c\u8fc7\u6ee4\u6389\u57fa\u672c\u8bcd\u4e2d\u7684\u505c\u7528\u8bcd \u547d\u540d\u5b9e\u4f53\uff08\u6709\u6548\u89e3\u51b3\u65b0\u8bcd\u3001\u70ed\u8bcd\u7684\u81ea\u52a8\u53d1\u73b0\uff09 2)\u76f8\u5173\u6027\u8ba1\u7b97 \u4f7f\u7528\u7ebf\u6027\u52a0\u6743\u5bf9\u5019\u9009\u8bcd\u6253\u5206\uff0c\u5176\u7279\u5f81\u5305\u62ec\uff1a TF*IDF \u5019\u9009\u8bcd\u548c\u6587\u7ae0\u9891\u9053\u7684\u76f8\u5173\u7a0b\u5ea6 \u5019\u9009\u8bcd\u548c\u6587\u7ae0\u7684\u76f8\u4f3c\u5ea6 \u5019\u9009\u8bcd\u7684\u957f\u5ea6 \u5019\u9009\u8bcd\u51fa\u73b0\u7684\u4f4d\u7f6e \u5019\u9009\u8bcd\u7684\u7c7b\u578b\uff08\u57fa\u672c\u8bcd\u3001\u5b9e\u4f53\u7c7b\u578b\u3001\u77ed\u8bed\u7b49\uff09 \u9009\u53d6\u76f8\u5173\u6027\u5f97\u5206\u5927\u4e8e\u9608\u503c\u7684\u5019\u9009\u8bcd\u4f5c\u4e3a\u6587\u7ae0\u7684\u6807\u7b7e\u8bcd\u3002 3.\u6548\u679c\u8bc4\u4ef7 \u00b6 \u5728\u817e\u8baf\u7f51\u4e0a\u968f\u673a\u62bd\u53d6\u7684351\u7bc7\u65b0\u95fb\u4e0a\u505a\u6d4b\u8bd5\uff0c\u5404\u9879\u6307\u6807\u5982\u8868\u683c1\u6240\u793a\u3002\u7531\u4e8e\u4e3b\u9898\u96c6\u5408\u7684\u5f00\u653e\u6027\uff0c\u5176\u53ec\u56de\u7387\u5f88\u96be\u8bc4\u4ef7\uff0c\u6545\u53ea\u8bc4\u4ef7\u5176\u51c6\u786e\u7387\u3002 \u8868\u683c1 \u5c42\u6b21\u5316\u5173\u952e\u8bcd\u81ea\u52a8\u6807\u6ce8\u7b97\u6cd5\u51c6\u53ec\u7387 \u4e09.\u5173\u952e\u8bcd\u63d0\u53d6\u4e09\u79cd\u7b97\u6cd5 \u00b6 \u5728\u81ea\u7136\u8bed\u8a00\u5904\u7406\u9886\u57df\uff0c\u5904\u7406\u6d77\u91cf\u7684\u6587\u672c\u6587\u4ef6\u6700\u5173\u952e\u7684\u662f\u8981\u628a\u7528\u6237\u6700\u5173\u5fc3\u7684\u95ee\u9898\u63d0\u53d6\u51fa\u6765\u3002 \u800c\u65e0\u8bba\u662f\u5bf9\u4e8e\u957f\u6587\u672c\u8fd8\u662f\u77ed\u6587\u672c\uff0c\u5f80\u5f80\u53ef\u4ee5\u901a\u8fc7\u51e0\u4e2a\u5173\u952e\u8bcd\u7aa5\u63a2\u6574\u4e2a\u6587\u672c\u7684\u4e3b\u9898\u601d\u60f3\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u4e0d\u7ba1\u662f\u57fa\u4e8e\u6587\u672c\u7684\u63a8\u8350\u8fd8\u662f\u57fa\u4e8e\u6587\u672c\u7684\u641c\u7d22\uff0c\u5bf9\u4e8e\u6587\u672c\u5173\u952e\u8bcd\u7684\u4f9d\u8d56\u4e5f\u5f88\u5927\uff0c\u5173\u952e\u8bcd\u63d0\u53d6\u7684\u51c6\u786e\u7a0b\u5ea6\u76f4\u63a5\u5173\u7cfb\u5230\u63a8\u8350\u7cfb\u7edf\u6216\u8005\u641c\u7d22\u7cfb\u7edf\u7684\u6700\u7ec8\u6548\u679c\u3002\u56e0\u6b64\uff0c\u5173\u952e\u8bcd\u63d0\u53d6\u5728\u6587\u672c\u6316\u6398\u9886\u57df\u662f\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u90e8\u5206\u3002 \u5173\u4e8e\u6587\u672c\u7684\u5173\u952e\u8bcd\u63d0\u53d6\u65b9\u6cd5\u5206\u4e3a\u6709\u76d1\u7763\u3001\u534a\u76d1\u7763\u548c\u65e0\u76d1\u7763\u4e09\u79cd\uff1a 1 \u6709\u76d1\u7763\u7684\u5173\u952e\u8bcd\u62bd\u53d6\u7b97\u6cd5 \u5b83\u662f\u5efa\u5173\u952e\u8bcd\u62bd\u53d6\u7b97\u6cd5\u770b\u4f5c\u662f\u4e8c\u5206\u7c7b\u95ee\u9898\uff0c\u5224\u65ad\u6587\u6863\u4e2d\u7684\u8bcd\u6216\u8005\u77ed\u8bed\u662f\u6216\u8005\u4e0d\u662f\u5173\u952e\u8bcd\u3002\u65e2\u7136\u662f\u5206\u7c7b\u95ee\u9898\uff0c\u5c31\u9700\u8981\u63d0\u4f9b\u5df2\u7ecf\u6807\u6ce8\u597d\u7684\u8bad\u7ec3\u8bed\u6599\uff0c\u5229\u7528\u8bad\u7ec3\u8bed\u6599\u8bad\u7ec3\u5173\u952e\u8bcd\u63d0\u53d6\u6a21\u578b\uff0c\u6839\u636e\u6a21\u578b\u5bf9\u9700\u8981\u62bd\u53d6\u5173\u952e\u8bcd\u7684\u6587\u6863\u8fdb\u884c\u5173\u952e\u8bcd\u62bd\u53d6 2 \u534a\u76d1\u7763\u7684\u5173\u952e\u8bcd\u63d0\u53d6\u7b97\u6cd5 \u00b6 \u53ea\u9700\u8981\u5c11\u91cf\u7684\u8bad\u7ec3\u6570\u636e\uff0c\u5229\u7528\u8fd9\u4e9b\u8bad\u7ec3\u6570\u636e\u6784\u5efa\u5173\u952e\u8bcd\u62bd\u53d6\u6a21\u578b\uff0c\u7136\u540e\u4f7f\u7528\u6a21\u578b\u5bf9\u65b0\u7684\u6587\u672c\u8fdb\u884c\u5173\u952e\u8bcd\u63d0\u53d6\uff0c\u5bf9\u4e8e\u8fd9\u4e9b\u5173\u952e\u8bcd\u8fdb\u884c\u4eba\u5de5\u8fc7\u6ee4\uff0c\u5c06\u8fc7\u6ee4\u5f97\u5230\u7684\u5173\u952e\u8bcd\u52a0\u5165\u8bad\u7ec3\u96c6\uff0c\u91cd\u65b0\u8bad\u7ec3\u6a21\u578b\u3002 3 \u65e0\u76d1\u7763\u7684\u65b9\u6cd5 \u00b6 \u4e0d\u9700\u8981\u4eba\u5de5\u6807\u6ce8\u7684\u8bed\u6599\uff0c\u5229\u7528\u67d0\u4e9b\u65b9\u6cd5\u53d1\u73b0\u6587\u672c\u4e2d\u6bd4\u8f83\u91cd\u8981\u7684\u8bcd\u4f5c\u4e3a\u5173\u952e\u8bcd\uff0c\u8fdb\u884c\u5173\u952e\u8bcd\u62bd\u53d6\u3002 \u6709\u76d1\u7763\u7684\u6587\u672c\u5173\u952e\u8bcd\u63d0\u53d6\u7b97\u6cd5\u9700\u8981\u9ad8\u6602\u7684\u4eba\u5de5\u6210\u672c\uff0c\u56e0\u6b64\u73b0\u6709\u7684\u6587\u672c\u5173\u952e\u8bcd\u63d0\u53d6\u4e3b\u8981\u91c7\u7528\u9002\u7528\u6027\u8f83\u5f3a\u7684\u65e0\u76d1\u7763\u5173\u952e\u8bcd\u62bd\u53d6\u3002 \u5176\u6587\u672c\u5173\u952e\u8bcd\u62bd\u53d6\u6d41\u7a0b\u5982\u4e0b\uff1a \u56fe 1 \u65e0\u76d1\u7763\u6587\u672c\u5173\u952e\u8bcd\u62bd\u53d6\u6d41\u7a0b\u56fe \u65e0\u76d1\u7763\u5173\u952e\u8bcd\u62bd\u53d6\u7b97\u6cd5\u53ef\u4ee5\u5206\u4e3a\u4e09\u5927\u7c7b\uff0c\u57fa\u4e8e\u7edf\u8ba1\u7279\u5f81\u7684\u5173\u952e\u8bcd\u62bd\u53d6\u3001\u57fa\u4e8e\u8bcd\u56fe\u6a21\u578b\u7684\u5173\u952e\u8bcd\u62bd\u53d6\u548c\u57fa\u4e8e\u4e3b\u9898\u6a21\u578b\u7684\u5173\u952e\u8bcd\u62bd\u53d6\u3002 NO.1 \u57fa\u4e8e\u7edf\u8ba1\u7279\u5f81\u7684\u5173\u952e\u8bcd\u63d0\u53d6\u7b97\u6cd5 \u00b6 \u57fa\u4e8e\u4e8e\u7edf\u8ba1\u7279\u5f81\u7684\u5173\u952e\u8bcd\u62bd\u53d6\u7b97\u6cd5\u7684\u601d\u60f3\u662f \u5229\u7528\u6587\u6863\u4e2d\u8bcd\u8bed\u7684\u7edf\u8ba1\u4fe1\u606f\u62bd\u53d6\u6587\u6863\u7684\u5173\u952e\u8bcd\u3002 \u901a\u5e38\u5c06\u6587\u672c\u7ecf\u8fc7\u9884\u5904\u7406\u5f97\u5230\u5019\u9009\u8bcd\u8bed\u7684\u96c6\u5408\uff0c\u7136\u540e\u91c7\u7528\u7279\u5f81\u503c\u91cf\u5316\u7684\u65b9\u5f0f\u4ece\u5019\u9009\u96c6\u5408\u4e2d\u5f97\u5230\u5173\u952e\u8bcd\u3002\u57fa\u4e8e\u7edf\u8ba1\u7279\u5f81\u7684\u5173\u952e\u8bcd\u62bd\u53d6\u65b9\u6cd5\u7684\u5173\u952e\u662f\u91c7\u7528\u4ec0\u4e48\u6837\u7684\u7279\u5f81\u503c\u91cf\u5316\u6307\u6807\u7684\u65b9\u5f0f\uff0c\u76ee\u524d\u5e38\u7528\u7684\u6709\u4e09\u7c7b\uff1a 1 \u57fa\u4e8e\u8bcd\u6743\u91cd\u7684\u7279\u5f81\u91cf\u5316 \u57fa\u4e8e\u8bcd\u6743\u91cd\u7684\u7279\u5f81\u91cf\u5316\u4e3b\u8981\u5305\u62ec\u8bcd\u6027\u3001\u8bcd\u9891\u3001\u9006\u5411\u6587\u6863\u9891\u7387\u3001\u76f8\u5bf9\u8bcd\u9891\u3001\u8bcd\u957f\u7b49\u3002 2 \u57fa\u4e8e\u8bcd\u7684\u6587\u6863\u4f4d\u7f6e\u7684\u7279\u5f81\u91cf\u5316 \u8fd9\u79cd\u7279\u5f81\u91cf\u5316\u65b9\u5f0f\u662f\u6839\u636e\u6587\u7ae0\u4e0d\u540c\u4f4d\u7f6e\u7684\u53e5\u5b50\u5bf9\u6587\u6863\u7684\u91cd\u8981\u6027\u4e0d\u540c\u7684\u5047\u8bbe\u6765\u8fdb\u884c\u7684\u3002\u901a\u5e38\uff0c\u6587\u7ae0\u7684\u524dN\u4e2a\u8bcd\u3001\u540eN\u4e2a\u8bcd\u3001\u6bb5\u9996\u3001\u6bb5\u5c3e\u3001\u6807\u9898\u3001\u5f15\u8a00\u7b49\u4f4d\u7f6e\u7684\u8bcd\u5177\u6709\u4ee3\u8868\u6027\uff0c\u8fd9\u4e9b\u8bcd\u4f5c\u4e3a\u5173\u952e\u8bcd\u53ef\u4ee5\u8868\u8fbe\u6574\u4e2a\u7684\u4e3b\u9898\u3002 3 \u57fa\u4e8e\u8bcd\u7684\u5173\u8054\u4fe1\u606f\u7684\u7279\u5f81\u91cf\u5316 \u8bcd\u7684\u5173\u8054\u4fe1\u606f\u662f\u6307\u8bcd\u4e0e\u8bcd\u3001\u8bcd\u4e0e\u6587\u6863\u7684\u5173\u8054\u7a0b\u5ea6\u4fe1\u606f\uff0c\u5305\u62ec\u4e92\u4fe1\u606f\u3001hits\u503c\u3001\u8d21\u732e\u5ea6\u3001\u4f9d\u5b58\u5ea6\u3001TF-IDF\u503c\u7b49\u3002 \u4e0b\u9762\u4ecb\u7ecd\u51e0\u79cd\u5e38\u7528\u7684\u7279\u5f81\u503c\u91cf\u5316\u6307\u6807\u3002 \u8bcd\u6027 \u00b6 \u8bcd\u6027\u65f6\u901a\u8fc7\u5206\u8bcd\u3001\u8bed\u6cd5\u5206\u6790\u540e\u5f97\u5230\u7684\u7ed3\u679c\u3002\u73b0\u6709\u7684\u5173\u952e\u8bcd\u4e2d\uff0c\u7edd\u5927\u591a\u6570\u5173\u952e\u8bcd\u4e3a\u540d\u8bcd\u6216\u8005\u52a8\u540d\u8bcd\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u540d\u8bcd\u4e0e\u5176\u4ed6\u8bcd\u6027\u76f8\u6bd4\u66f4\u80fd\u8868\u8fbe\u4e00\u7bc7\u6587\u7ae0\u7684\u4e3b\u8981\u601d\u60f3\u3002\u4f46\u662f\uff0c\u8bcd\u6027\u4f5c\u4e3a\u7279\u5f81\u91cf\u5316\u7684\u6307\u6807\uff0c\u4e00\u822c\u4e0e\u5176\u4ed6\u6307\u6807\u7ed3\u5408\u4f7f\u7528\u3002 \u8bcd\u9891 \u00b6 \u8bcd\u9891\u8868\u793a\u4e00\u4e2a\u8bcd\u5728\u6587\u672c\u4e2d\u51fa\u73b0\u7684\u9891\u7387\u3002\u4e00\u822c\u6211\u4eec\u8ba4\u4e3a\uff0c\u5982\u679c\u4e00\u4e2a\u8bcd\u5728\u6587\u672c\u4e2d\u51fa\u73b0\u7684\u8d8a\u662f\u9891\u7e41\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8bcd\u5c31\u8d8a\u6709\u53ef\u80fd\u4f5c\u4e3a\u6587\u7ae0\u7684\u6838\u5fc3\u8bcd\u3002\u8bcd\u9891\u7b80\u5355\u5730\u7edf\u8ba1\u4e86\u8bcd\u5728\u6587\u672c\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u4f46\u662f\uff0c\u53ea\u4f9d\u9760\u8bcd\u9891\u6240\u5f97\u5230\u7684\u5173\u952e\u8bcd\u6709\u5f88\u5927\u7684\u4e0d\u786e\u5b9a\u6027\uff0c\u5bf9\u4e8e\u957f\u5ea6\u6bd4\u8f83\u957f\u7684\u6587\u672c\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u4f1a\u6709\u5f88\u5927\u7684\u566a\u97f3\u3002 \u4f4d\u7f6e\u4fe1\u606f \u00b6 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u8bcd\u51fa\u73b0\u7684\u4f4d\u7f6e\u5bf9\u4e8e\u8bcd\u6765\u8bf4\u6709\u7740\u5f88\u5927\u7684\u4ef7\u503c\u3002\u4f8b\u5982\uff0c\u6807\u9898\u3001\u6458\u8981\u672c\u8eab\u5c31\u662f\u4f5c\u8005\u6982\u62ec\u51fa\u7684\u6587\u7ae0\u7684\u4e2d\u5fc3\u601d\u60f3\uff0c\u56e0\u6b64\u51fa\u73b0\u5728\u8fd9\u4e9b\u5730\u65b9\u7684\u8bcd\u5177\u6709\u4e00\u5b9a\u7684\u4ee3\u8868\u6027\uff0c\u66f4\u53ef\u80fd\u6210\u4e3a\u5173\u952e\u8bcd\u3002\u4f46\u662f\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u4f5c\u8005\u7684\u4e60\u60ef\u4e0d\u540c\uff0c\u5199\u4f5c\u65b9\u5f0f\u4e0d\u540c\uff0c\u5173\u952e\u53e5\u5b50\u7684\u4f4d\u7f6e\u4e5f\u4f1a\u6709\u6240\u4e0d\u540c\uff0c\u6240\u4ee5\u8fd9\u4e5f\u662f\u4e00\u79cd\u5f88\u5bbd\u6cdb\u7684\u5f97\u5230\u5173\u952e\u8bcd\u7684\u65b9\u6cd5\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u4e0d\u4f1a\u5355\u72ec\u4f7f\u7528\u3002 \u4e92\u4fe1\u606f \u00b6 \u4e92\u4fe1\u606f\u662f\u4fe1\u606f\u8bba\u4e2d\u6982\u5ff5\uff0c\u662f\u53d8\u91cf\u4e4b\u95f4\u76f8\u4e92\u4f9d\u8d56\u7684\u5ea6\u91cf\u3002\u4e92\u4fe1\u606f\u5e76\u4e0d\u5c40\u9650\u4e8e\u5b9e\u503c\u968f\u673a\u53d8\u91cf\uff0c\u5b83\u66f4\u52a0\u4e00\u822c\u4e14\u51b3\u5b9a\u7740\u8054\u5408\u5206\u5e03 p(X,Y) \u548c\u5206\u89e3\u7684\u8fb9\u7f18\u5206\u5e03\u7684\u4e58\u79ef p(X)p(Y) \u7684\u76f8\u4f3c\u7a0b\u5ea6\u3002\u4e92\u4fe1\u606f\u7684\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a \u5176\u4e2d\uff0cp(x,y)\u662fX\u548cY\u7684\u8054\u5408\u6982\u7387\u5206\u5e03\u51fd\u6570\uff0cp(x)\u548cp(y)\u5206\u522b\u4e3aX\u548cY\u7684\u8fb9\u7f18\u6982\u7387\u5206\u5e03\u51fd\u6570\u3002 \u5f53\u4f7f\u7528\u4e92\u4fe1\u606f\u4f5c\u4e3a\u5173\u952e\u8bcd\u63d0\u53d6\u7684\u7279\u5f81\u91cf\u5316\u65f6\uff0c\u5e94\u7528\u6587\u672c\u7684\u6b63\u6587\u548c\u6807\u9898\u6784\u9020PAT\u6811\uff0c\u7136\u540e\u8ba1\u7b97\u5b57\u7b26\u4e32\u5de6\u53f3\u7684\u4e92\u4fe1\u606f\u3002 \u8bcd\u8de8\u5ea6 \u00b6 \u8bcd\u8de8\u5ea6\u662f\u6307\u4e00\u4e2a\u8bcd\u6216\u8005\u77ed\u8bed\u5b57\u6587\u4e2d\u9996\u6b21\u51fa\u73b0\u548c\u672b\u6b21\u51fa\u73b0\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u8bcd\u8de8\u5ea6\u8d8a\u5927\u8bf4\u660e\u8fd9\u4e2a\u8bcd\u5bf9\u6587\u672c\u8d8a\u91cd\u8981\uff0c\u53ef\u4ee5\u53cd\u6620\u6587\u672c\u7684\u4e3b\u9898\u3002\u4e00\u4e2a\u8bcd\u7684\u8de8\u5ea6\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a \u5176\u4e2d\uff0c \u8868\u793a\u8bcdi\u5728\u6587\u672c\u4e2d\u6700\u540e\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c \u8868\u793a\u8bcd i \u5728\u6587\u672c\u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0csum\u8868\u793a\u6587\u672c\u4e2d\u8bcd\u7684\u603b\u6570\u3002 \u8bcd\u8de8\u5ea6\u88ab\u4f5c\u4e3a\u63d0\u53d6\u5173\u952e\u8bcd\u7684\u65b9\u6cd5\u662f\u56e0\u4e3a\u5728\u73b0\u5b9e\u4e2d\uff0c\u6587\u672c\u4e2d\u603b\u662f\u6709\u5f88\u591a\u566a\u58f0\uff08\u6307\u4e0d\u662f\u5173\u952e\u8bcd\u7684\u90a3\u4e9b\u8bcd\uff09\uff0c\u4f7f\u7528\u8bcd\u8de8\u5ea6\u53ef\u4ee5\u51cf\u5c11\u8fd9\u4e9b\u566a\u58f0\u3002 TF-IDF\u503c \u00b6 \u4e00\u4e2a\u8bcd\u7684TF\u662f\u6307\u8fd9\u4e2a\u8bcd\u5728\u6587\u6863\u4e2d\u51fa\u73b0\u7684\u9891\u7387\uff0c\u5047\u8bbe\u4e00\u4e2a\u8bcdw\u5728\u6587\u672c\u4e2d\u51fa\u73b0\u4e86m\u6b21\uff0c\u800c\u6587\u672c\u4e2d\u8bcd\u7684\u603b\u6570\u4e3an\uff0c\u90a3\u4e48 \u3002\u4e00\u4e2a\u8bcd\u7684IDF\u662f\u6839\u636e\u8bed\u6599\u5e93\u5f97\u51fa\u7684\uff0c\u8868\u793a\u8fd9\u4e2a\u8bcd\u5728\u6574\u4e2a\u8bed\u6599\u5e93\u4e2d\u51fa\u73b0\u7684\u9891\u7387\u3002\u5047\u8bbe\u6574\u4e2a\u8bed\u6599\u5e93\u4e2d\uff0c\u5305\u542b\u8bcdw\u7684\u6587\u672c\u4e00\u5171\u6709M\u7bc7\uff0c\u8bed\u6599\u5e93\u4e2d\u7684\u6587\u672c\u4e00\u5171\u6709N\u7bc7\uff0c\u5219 \u7531\u6b64\u53ef\u5f97\u8bcdw\u7684TF-IDF\u503c\u4e3a\uff1a TF-IDF\u7684\u4f18\u70b9\u662f\u5b9e\u73b0\u7b80\u5355\uff0c\u76f8\u5bf9\u5bb9\u6613\u7406\u89e3\u3002 \u4f46\u662f\uff0cTFIDF\u7b97\u6cd5\u63d0\u53d6\u5173\u952e\u8bcd\u7684\u7f3a\u70b9\u4e5f\u5f88\u660e\u663e\uff0c\u4e25\u91cd\u4f9d\u8d56\u8bed\u6599\u5e93\uff0c\u9700\u8981\u9009\u53d6\u8d28\u91cf\u8f83\u9ad8\u4e14\u548c\u6240\u5904\u7406\u6587\u672c\u76f8\u7b26\u7684\u8bed\u6599\u5e93\u8fdb\u884c\u8bad\u7ec3\u3002\u53e6\u5916\uff0c\u5bf9\u4e8eIDF\u6765\u8bf4\uff0c\u5b83\u672c\u8eab\u662f\u4e00\u79cd\u8bd5\u56fe\u6291\u5236\u566a\u58f0\u7684\u52a0\u6743\uff0c\u672c\u8eab\u503e\u5411\u4e8e\u6587\u672c\u4e2d\u9891\u7387\u5c0f\u7684\u8bcd\uff0c\u8fd9\u4f7f\u5f97TF-IDF\u7b97\u6cd5\u7684\u7cbe\u5ea6\u4e0d\u9ad8\u3002TF-IDF\u7b97\u6cd5\u8fd8\u6709\u4e00\u4e2a\u7f3a\u70b9\u5c31\u662f\u4e0d\u80fd\u53cd\u5e94\u8bcd\u7684\u4f4d\u7f6e\u4fe1\u606f\uff0c \u5728\u5bf9\u5173\u952e\u8bcd\u8fdb\u884c\u63d0\u53d6\u7684\u65f6\u5019\uff0c\u8bcd\u7684\u4f4d\u7f6e\u4fe1\u606f\uff0c\u4f8b\u5982\u6587\u672c\u7684\u6807\u9898\u3001\u6587\u672c\u7684\u9996\u53e5\u548c\u5c3e\u53e5\u7b49\u542b\u6709\u8f83\u91cd\u8981\u7684\u4fe1\u606f\uff0c\u5e94\u8be5\u8d4b\u4e88\u8f83\u9ad8\u7684\u6743\u91cd\u3002 \u57fa\u4e8e\u7edf\u8ba1\u7279\u5f81\u7684\u5173\u952e\u8bcd\u63d0\u53d6\u7b97\u6cd5\u901a\u8fc7\u4e0a\u9762\u7684\u4e00\u4e9b\u7279\u5f81\u91cf\u5316\u6307\u6807\u5c06\u5173\u952e\u8bcd\u8fdb\u884c\u6392\u5e8f\uff0c\u83b7\u53d6TopK\u4e2a\u8bcd\u4f5c\u4e3a\u5173\u952e\u8bcd\u3002 \u57fa\u4e8e\u7edf\u8ba1\u7279\u5f81\u7684\u5173\u952e\u8bcd\u7684\u91cd\u70b9\u5728\u4e8e\u7279\u5f81\u91cf\u5316\u6307\u6807\u7684\u8ba1\u7b97\uff0c\u4e0d\u540c\u7684\u91cf\u5316\u6307\u6807\u5f97\u5230\u7684\u7ed3\u679c\u4e5f\u4e0d\u5c3d\u76f8\u540c\u3002\u540c\u65f6\uff0c\u4e0d\u540c\u7684\u91cf\u5316\u6307\u6807\u4f5c\u4e3a\u4e5f\u6709\u5176\u5404\u81ea\u7684\u4f18\u7f3a\u70b9\uff0c\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u901a\u5e38\u662f\u91c7\u7528\u4e0d\u540c\u7684\u91cf\u5316\u6307\u6807\u76f8\u7ed3\u5408\u7684\u65b9\u5f0f\u5f97\u5230Topk\u4e2a\u8bcd\u4f5c\u4e3a\u5173\u952e\u8bcd\u3002 NO.2 \u57fa\u4e8e\u8bcd\u56fe\u6a21\u578b\u7684\u5173\u952e\u8bcd\u62bd\u53d6\u7b97\u6cd5 \u00b6 \u57fa\u4e8e\u8bcd\u56fe\u6a21\u578b\u7684\u5173\u952e\u8bcd\u62bd\u53d6\u9996\u5148\u8981\u6784\u5efa\u6587\u6863\u7684\u8bed\u8a00\u7f51\u7edc\u56fe\uff0c\u7136\u540e\u5bf9\u8bed\u8a00\u8fdb\u884c\u7f51\u7edc\u56fe\u5206\u6790\uff0c\u5728\u8fd9\u4e2a\u56fe\u4e0a\u5bfb\u627e\u5177\u6709\u91cd\u8981\u4f5c\u7528\u7684\u8bcd\u6216\u8005\u77ed\u8bed\uff0c\u8fd9\u4e9b\u77ed\u8bed\u5c31\u662f\u6587\u6863\u7684\u5173\u952e\u8bcd\u3002\u8bed\u8a00\u7f51\u7edc\u56fe\u4e2d\u8282\u70b9\u57fa\u672c\u4e0a\u90fd\u662f\u8bcd\uff0c\u6839\u636e\u8bcd\u7684\u94fe\u63a5\u65b9\u5f0f\u4e0d\u540c\uff0c\u8bed\u8a00\u7f51\u7edc\u7684\u4e3b\u8981\u5f62\u5f0f\u5206\u4e3a\u56db\u79cd\uff1a \u5171\u73b0\u7f51\u7edc\u56fe\u3001\u8bed\u6cd5\u7f51\u7edc\u56fe\u3001\u8bed\u4e49\u7f51\u7edc\u56fe\u548c\u5176\u4ed6\u7f51\u7edc\u56fe\u3002 \u5728\u8bed\u8a00\u7f51\u7edc\u56fe\u7684\u6784\u5efa\u8fc7\u7a0b\u4e2d\uff0c\u90fd\u662f\u4ee5\u9884\u5904\u7406\u8fc7\u540e\u7684\u8bcd\u4f5c\u4e3a\u8282\u70b9\uff0c\u8bcd\u4e0e\u8bcd\u4e4b\u95f4\u7684\u5173\u7cfb\u4f5c\u4e3a\u8fb9\u3002\u8bed\u8a00\u7f51\u7edc\u56fe\u4e2d\uff0c\u8fb9\u4e0e\u8fb9\u4e4b\u95f4\u7684\u6743\u91cd\u4e00\u822c\u7528\u8bcd\u4e4b\u95f4\u7684\u5173\u8054\u5ea6\u6765\u8868\u793a\u3002\u5728\u4f7f\u7528\u8bed\u8a00\u7f51\u7edc\u56fe\u83b7\u5f97\u5173\u952e\u8bcd\u7684\u65f6\u5019\uff0c\u9700\u8981\u8bc4\u4f30\u5404\u4e2a\u8282\u70b9\u7684\u91cd\u8981\u6027\uff0c\u7136\u540e\u6839\u636e\u91cd\u8981\u6027\u5c06\u8282\u70b9\u8fdb\u884c\u6392\u5e8f\uff0c\u9009\u53d6TopK\u4e2a\u8282\u70b9\u6240\u4ee3\u8868\u7684\u8bcd\u4f5c\u4e3a\u5173\u952e\u8bcd\u3002\u8282\u70b9\u7684\u91cd\u8981\u6027\u8ba1\u7b97\u65b9\u6cd5\u6709\u4ee5\u4e0b\u51e0\u79cd\u65b9\u6cd5\u3002 1 \u7efc\u5408\u7279\u5f81\u6cd5 \u00b6 \u7efc\u5408\u7279\u5f81\u6cd5\u4e5f\u53eb\u793e\u4f1a\u7f51\u7edc\u4e2d\u5fc3\u6027\u5206\u6790\u65b9\u6cd5\uff0c\u8fd9\u79cd\u65b9\u6cd5\u7684\u6838\u5fc3\u601d\u60f3\u662f\u8282\u70b9\u4e2d\u91cd\u8981\u6027\u7b49\u4e8e\u8282\u70b9\u7684\u663e\u8457\u6027\uff0c\u4ee5\u4e0d\u7834\u574f\u7f51\u7edc\u7684\u6574\u4f53\u6027\u4e3a\u57fa\u7840\u3002\u6b64\u65b9\u6cd5\u5c31\u662f\u4ece\u7f51\u7edc\u7684\u5c40\u90e8\u5c5e\u6027\u548c\u5168\u5c40\u5c5e\u6027\u89d2\u5ea6\u53bb\u5b9a\u91cf\u5206\u6790\u7f51\u7edc\u7ed3\u6784\u7684\u62d3\u6251\u6027\u8d28\uff0c\u5e38\u7528\u7684\u5b9a\u91cf\u8ba1\u7b97\u65b9\u6cd5\u5982\u4e0b\u3002 \u5ea6 \u00b6 \u8282\u70b9\u7684\u5ea6\u662f\u6307\u4e0e\u8be5\u8282\u70b9\u76f4\u63a5\u5411\u91cf\u7684\u8282\u70b9\u6570\u76ee\uff0c\u8868\u793a\u7684\u662f\u8282\u70b9\u7684\u5c40\u90e8\u5f71\u54cd\u529b\uff0c\u5bf9\u4e8e\u975e\u52a0\u6743\u7f51\u7edc\uff0c\u8282\u70b9\u7684\u5ea6\u4e3a\uff1a \u5bf9\u4e8e\u52a0\u6743\u7f51\u7edc\uff0c\u8282\u70b9\u7684\u5ea6\u53c8\u79f0\u4e3a\u8282\u70b9\u7684\u5f3a\u5ea6\uff0c\u8ba1\u7b97\u516c\u5f0f\u4e3a\uff1a \u63a5\u8fd1\u6027 \u00b6 \u8282\u70b9\u7684\u63a5\u8fd1\u6027\u662f\u6307\u8282\u70b9\u5230\u5176\u4ed6\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u4e4b\u548c\u7684\u5012\u6570\uff0c\u8868\u793a\u7684\u662f\u4fe1\u606f\u4f20\u64ad\u7684\u7d27\u5bc6\u7a0b\u5ea6\uff0c\u5176\u8ba1\u7b97\u516c\u5f0f\u4e3a\uff1a \u7279\u5f81\u5411\u91cf \u00b6 \u7279\u5f81\u5411\u91cf\u7684\u601d\u60f3\u662f\u8282\u70b9\u7684\u4e2d\u5fc3\u5316\u6d4b\u8bd5\u503c\u7531\u5468\u56f4\u6240\u6709\u8fde\u63a5\u7684\u8282\u70b9\u51b3\u5b9a\uff0c\u5373\u4e00\u4e2a\u8282\u70b9\u7684\u4e2d\u5fc3\u5316\u6307\u6807\u5e94\u8be5\u7b49\u4e8e\u5176\u76f8\u90bb\u8282\u70b9\u7684\u4e2d\u5fc3\u5316\u6307\u6807\u4e4b\u7ebf\u6027\u53e0\u52a0\uff0c\u8868\u793a\u7684\u662f\u901a\u8fc7\u4e0e\u5177\u6709\u9ad8\u5ea6\u503c\u7684\u76f8\u90bb\u8282\u70b9\u6240\u83b7\u5f97\u7684\u95f4\u63a5\u5f71\u54cd\u529b\u3002\u7279\u5f81\u5411\u91cf\u7684\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a \u96c6\u805a\u7cfb\u6570 \u00b6 \u8282\u70b9\u7684\u96c6\u805a\u7cfb\u6570\u662f\u5b83\u7684\u76f8\u90bb\u7684\u8282\u70b9\u4e4b\u95f4\u7684\u8fde\u63a5\u6570\u4e0e\u4ed6\u4eec\u6240\u6709\u53ef\u80fd\u5b58\u5728\u6765\u94fe\u63a5\u7684\u6570\u91cf\u7684\u6bd4\u503c\uff0c\u7528\u6765\u63cf\u8ff0\u56fe\u7684\u9876\u70b9\u4e4b\u95f4\u9636\u7ea7\u6210\u56e2\u7684\u7a0b\u5ea6\u7684\u7cfb\u6570\uff0c\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a \u5e73\u5747\u6700\u77ed\u8def\u5f84 \u00b6 \u8282\u70b9\u7684\u5e73\u5c40\u6700\u77ed\u8def\u5f84\u4e5f\u53eb\u7d27\u5bc6\u4e2d\u5fc3\u6027\uff0c\u662f\u8282\u70b9\u7684\u6240\u6709\u6700\u77ed\u8def\u5f84\u4e4b\u548c\u7684\u5e73\u5747\u503c\uff0c\u8868\u793a\u7684\u662f\u4e00\u4e2a\u8282\u70b9\u4f20\u64ad\u4fe1\u606f\u65f6\u5bf9\u5176\u4ed6\u8282\u70b9\u7684\u4f9d\u8d56\u7a0b\u5ea6\u3002\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u79bb\u5176\u4ed6\u8282\u70b9\u8d8a\u8fd1\uff0c\u90a3\u4e48\u4ed6\u4f20\u64ad\u4fe1\u606f\u7684\u65f6\u5019\u4e5f\u5c31\u8d8a\u4e0d\u9700\u8981\u4f9d\u8d56\u5176\u4ed6\u4eba\u3002\u4e00\u4e2a\u8282\u70b9\u5230\u7f51\u7edc\u4e2d\u5404\u70b9\u7684\u8ddd\u79bb\u90fd\u5f88\u77ed\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u5c31\u4e0d\u4f1a\u53d7\u5236\u4e8e\u5176\u4ed6\u8282\u70b9\u3002\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a \u56e0\u4e3a\u6bcf\u4e2a\u7b97\u6cd5\u7684\u4fa7\u91cd\u65b9\u5411\u7684\u4e0d\u540c\uff0c\u5728\u5b9e\u9645\u7684\u95ee\u9898\u4e2d\u6240\u9009\u53d6\u7684\u5b9a\u91cf\u5206\u6790\u65b9\u6cd5\u4e5f\u4f1a\u4e0d\u4e00\u6837\u3002\u540c\u65f6\uff0c\u5bf9\u4e8e\u5173\u952e\u8bcd\u63d0\u53d6\u6765\u8bf4\uff0c\u4e5f\u53ef\u4ee5\u548c\u4e0a\u4e00\u8282\u6240\u63d0\u51fa\u7684\u7edf\u8ba1\u6cd5\u5f97\u5230\u7684\u8bcd\u7684\u6743\u91cd\uff0c\u4f8b\u5982\u8bcd\u6027\u7b49\u76f8\u7ed3\u5408\u6784\u5efa\u8bcd\u642d\u914d\u7f51\u7edc\uff0c\u7136\u540e\u5229\u7528\u4e0a\u8ff0\u65b9\u6cd5\u5f97\u5230\u5173\u952e\u8bcd\u3002 2 \u7cfb\u7edf\u79d1\u5b66\u6cd5 \u00b6 \u7cfb\u7edf\u79d1\u5b66\u6cd5\u8fdb\u884c\u4e2d\u5fc3\u6027\u5206\u6790\u7684\u601d\u60f3\u662f\u8282\u70b9\u91cd\u8981\u6027\u7b49\u4e8e\u8fd9\u4e2a\u8282\u70b9\u88ab\u5220\u9664\u540e\u5bf9\u4e8e\u6574\u4e2a\u8bed\u8a00\u7f51\u7edc\u56fe\u7684\u7834\u574f\u7a0b\u5ea6\u3002\u91cd\u8981\u7684\u8282\u70b9\u88ab\u5220\u9664\u540e\u4f1a\u5bf9\u7f51\u7edc\u7684\u5443\u8fde\u901a\u6027\u7b49\u4ea7\u751f\u53d8\u5316\u3002\u5982\u679c\u6211\u4eec\u5728\u7f51\u7edc\u56fe\u4e2d\u5220\u9664\u67d0\u4e00\u4e2a\u8282\u70b9\uff0c\u56fe\u7684\u67d0\u4e9b\u6307\u5b9a\u7279\u6027\u4ea7\u751f\u4e86\u6539\u53d8\uff0c\u53ef\u4ee5\u6839\u636e\u7279\u6027\u6539\u53d8\u7684\u5927\u5c0f\u83b7\u5f97\u8282\u70b9\u7684\u91cd\u8981\u6027\uff0c\u4ece\u800c\u5bf9\u8282\u70b9\u8fdb\u884c\u7b5b\u9009\u3002 3 \u968f\u673a\u6e38\u8d70\u6cd5 \u00b6 \u968f\u673a\u6e38\u8d70\u7b97\u6cd5\u65f6\u7f51\u7edc\u56fe\u4e2d\u4e00\u4e2a\u975e\u5e38\u8457\u540d\u7684\u7b97\u6cd5\uff0c\u5b83\u4ece\u7ed9\u5b9a\u56fe\u548c\u51fa\u53d1\u70b9\uff0c\u968f\u673a\u5730\u9009\u62e9\u90bb\u5c45\u8282\u70b9\u79fb\u52a8\u5230\u90bb\u5c45\u8282\u70b9\u4e0a\uff0c\u7136\u540e\u518d\u628a\u73b0\u5728\u7684\u8282\u70b9\u4f5c\u4e3a\u51fa\u53d1\u70b9\uff0c\u8fed\u4ee3\u4e0a\u8ff0\u8fc7\u7a0b\u3002 \u968f\u673a\u6e38\u8d70\u7b97\u6cd5\u4e00\u4e2a\u5f88\u51fa\u540d\u7684\u5e94\u7528\u662f\u5927\u540d\u9f0e\u9f0e\u7684PageRank\u7b97\u6cd5\uff0cPageRank\u7b97\u6cd5\u662f\u6574\u4e2agoogle\u641c\u7d22\u7684\u6838\u5fc3\u7b97\u6cd5\uff0c\u662f\u4e00\u79cd\u901a\u8fc7\u7f51\u9875\u4e4b\u95f4\u7684\u8d85\u94fe\u63a5\u6765\u8ba1\u7b97\u7f51\u9875\u91cd\u8981\u6027\u7684\u6280\u672f\uff0c\u5176\u5173\u952e\u7684\u601d\u60f3\u662f\u91cd\u8981\u6027\u4f20\u9012\u3002 \u5728\u5173\u952e\u8bcd\u63d0\u53d6\u9886\u57df\uff0c Mihalcea \u7b49\u4eba\u6240\u63d0\u51fa\u7684TextRank\u7b97\u6cd5\u5c31\u662f\u5728\u6587\u672c\u5173\u952e\u8bcd\u63d0\u53d6\u9886\u57df\u501f\u9274\u4e86\u8fd9\u79cd\u601d\u60f3\u3002 PageRank\u7b97\u6cd5\u5c06\u6574\u4e2a\u4e92\u8054\u7f51\u770b\u4f5c\u4e00\u5f20\u6709\u5411\u56fe\uff0c\u7f51\u9875\u662f\u56fe\u4e2d\u7684\u8282\u70b9\uff0c\u800c\u7f51\u9875\u4e4b\u95f4\u7684\u94fe\u63a5\u5c31\u662f\u56fe\u4e2d\u7684\u8fb9\u3002\u6839\u636e\u91cd\u8981\u6027\u4f20\u9012\u7684\u601d\u60f3\uff0c\u5982\u679c\u4e00\u4e2a\u5927\u578b\u7f51\u7ad9A\u542b\u6709\u4e00\u4e2a\u8d85\u94fe\u63a5\u6307\u5411\u4e86\u7f51\u9875B\uff0c\u90a3\u4e48\u7f51\u9875B\u7684\u91cd\u8981\u6027\u6392\u540d\u4f1a\u6839\u636eA\u7684\u91cd\u8981\u6027\u6765\u63d0\u5347\u3002\u7f51\u9875\u91cd\u8981\u6027\u7684\u4f20\u9012\u601d\u60f3\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u56fe 2 PageRank\u7b80\u5355\u63cf\u8ff0\uff08\u6765\u81eaPageRank\u8bba\u6587\uff09 \u5728PageRank\u7b97\u6cd5\u4e2d\uff0c\u6700\u4e3b\u8981\u7684\u662f\u5bf9\u4e8e\u521d\u59cb\u7f51\u9875\u91cd\u8981\u6027\uff08PR\u503c\uff09\u7684\u8ba1\u7b97\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u4e0a\u56fe\u4e2d\u7684\u7f51\u9875A\u7684\u91cd\u8981\u6027\u6211\u4eec\u662f\u65e0\u6cd5\u9884\u77e5\u7684\u3002\u4f46\u662f\uff0c\u5728\u539f\u59cb\u8bba\u6587\u4e2d\u7ed9\u51fa\u4e86\u4e00\u79cd\u8fed\u4ee3\u65b9\u6cd5\u6c42\u51fa\u8fd9\u4e2a\u91cd\u8981\u6027\uff0c\u8bba\u6587\u4e2d\u6307\u51fa\uff0c\u5e42\u6cd5\u6c42\u77e9\u9635\u7279\u5f81\u503c\u4e0e\u77e9\u9635\u7684\u521d\u59cb\u503c\u65e0\u5173\u3002\u90a3\u4e48\uff0c\u5c31\u53ef\u4ee5\u4e3a\u6bcf\u4e2a\u7f51\u9875\u968f\u673a\u7ed9\u4e00\u4e2a\u521d\u59cb\u503c\uff0c\u7136\u540e\u8fed\u4ee3\u5f97\u5230\u6536\u655b\u503c\uff0c\u5e76\u4e14\u6536\u655b\u503c\u4e0e\u521d\u59cb\u503c\u65e0\u5173\u3002 PageRank\u6c42\u7f51\u9875i\u7684PR\u503c\u8ba1\u7b97\u5982\u4e0b\uff1a \u5176\u4e2d\uff0cd\u4e3a\u963b\u5c3c\u7cfb\u6570\uff0c\u901a\u5e38\u4e3a0.85\u3002 \u662f\u6307\u5411\u7f51\u9875 i \u7684\u7f51\u9875\u96c6\u5408\u3002 \u662f\u6307\u7f51\u9875j\u4e2d\u7684\u94fe\u63a5\u6307\u5411\u7684\u96c6\u5408\uff0c \u662f\u6307\u96c6\u5408\u4e2d\u5143\u7d20\u7684\u4e2a\u6570\u3002 TextRank\u5728\u6784\u5efa\u56fe\u7684\u65f6\u5019\u5c06\u8282\u70b9\u7531\u7f51\u9875\u6539\u6210\u4e86\u53e5\u5b50\uff0c\u5e76\u4e3a\u8282\u70b9\u4e4b\u95f4\u7684\u8fb9\u5f15\u5165\u4e86\u6743\u503c\uff0c\u5176\u4e2d\u6743\u503c\u8868\u793a\u4e24\u4e2a\u53e5\u5b50\u7684\u76f8\u4f3c\u7a0b\u5ea6\u3002\u5176\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a \u516c\u5f0f\u4e2d\u7684 \u4e3a\u56fe\u4e2d\u8282\u70b9 \u548c\u7684\u8fb9 \u7684\u6743\u91cd\u3002\u5176\u4ed6\u7b26\u53f7\u4e0ePageRank\u516c\u5f0f\u76f8\u540c\u3002 TextRank\u7b97\u6cd5\u9664\u4e86\u505a\u6587\u672c\u5173\u952e\u8bcd\u63d0\u53d6\uff0c\u8fd8\u53ef\u4ee5\u505a\u6587\u672c\u6458\u8981\u63d0\u53d6\uff0c\u6548\u679c\u4e0d\u9519\u3002\u4f46\u662fTextRank\u7684\u8ba1\u7b97\u590d\u6742\u5ea6\u5f88\u9ad8\uff0c\u5e94\u7528\u4e0d\u5e7f\u3002 NO.3 \u57fa\u4e8e\u4e3b\u9898\u6a21\u578b\u7684\u5173\u952e\u8bcd\u62bd\u53d6 \u00b6 \u57fa\u4e8e\u4e3b\u9898\u5173\u952e\u8bcd\u63d0\u53d6\u7b97\u6cd5\u4e3b\u8981\u5229\u7528\u7684\u662f\u4e3b\u9898\u6a21\u578b\u4e2d\u5173\u4e8e\u4e3b\u9898\u7684\u5206\u5e03\u7684\u6027\u8d28\u8fdb\u884c\u5173\u952e\u8bcd\u63d0\u53d6\u3002\u7b97\u6cd5\u6b65\u9aa4\u5982\u4e0b\uff1a 1 \u83b7\u53d6\u5019\u9009\u5173\u952e\u8bcd \u00b6 \u4ece\u6587\u7ae0\u4e2d\u83b7\u53d6\u5019\u9009\u5173\u952e\u8bcd\u3002\u5373\u5c06\u6587\u672c\u5206\u8bcd\uff0c\u4e5f\u53ef\u4ee5\u518d\u6839\u636e\u8bcd\u6027\u9009\u53d6\u5019\u9009\u5173\u952e\u8bcd\u3002 2 \u8bed\u6599\u5b66\u4e60 \u00b6 \u6839\u636e\u5927\u89c4\u6a21\u9884\u6599\u5b66\u4e60\u5f97\u5230\u4e3b\u9898\u6a21\u578b\u3002 3 \u8ba1\u7b97\u6587\u7ae0\u4e3b\u9898\u5206\u90e8 \u00b6 \u6839\u636e\u5f97\u5230\u7684\u9690\u542b\u4e3b\u9898\u6a21\u578b\uff0c\u8ba1\u7b97\u6587\u7ae0\u7684\u4e3b\u9898\u5206\u5e03\u548c\u5019\u9009\u5173\u952e\u8bcd\u5206\u5e03\u3002 4 \u6392\u5e8f \u00b6 \u8ba1\u7b97\u6587\u6863\u548c\u5019\u9009\u5173\u952e\u8bcd\u7684\u4e3b\u9898\u76f8\u4f3c\u5ea6\u5e76\u6392\u5e8f\uff0c\u9009\u53d6\u524dn\u4e2a\u8bcd\u4f5c\u4e3a\u5173\u952e\u8bcd\u3002 \u7b97\u6cd5\u7684\u5173\u952e\u5728\u4e8e\u4e3b\u9898\u6a21\u578b\u7684\u6784\u5efa\u3002 \u4e3b\u9898\u6a21\u578b\u662f\u4e00\u79cd\u6587\u6863\u751f\u6210\u6a21\u578b\uff0c\u5bf9\u4e8e\u4e00\u7bc7\u6587\u7ae0\uff0c\u6211\u4eec\u7684\u6784\u601d\u601d\u8def\u662f\u5148\u786e\u5b9a\u51e0\u4e2a\u4e3b\u9898\uff0c\u7136\u540e\u6839\u636e\u4e3b\u9898\u60f3\u597d\u63cf\u8ff0\u4e3b\u9898\u7684\u8bcd\u6c47\uff0c\u5c06\u8bcd\u6c47\u6309\u7167\u8bed\u6cd5\u89c4\u5219\u7ec4\u6210\u53e5\u5b50\uff0c\u6bb5\u843d\uff0c\u6700\u540e\u751f\u6210\u4e00\u7bc7\u6587\u7ae0\u3002 \u4e3b\u9898\u6a21\u578b\u4e5f\u662f\u57fa\u4e8e\u8fd9\u4e2a\u601d\u60f3\uff0c\u5b83\u8ba4\u4e3a\u6587\u6863\u662f\u4e00\u4e9b\u4e3b\u9898\u7684\u6df7\u5408\u5206\u5e03\uff0c\u4e3b\u9898\u53c8\u662f\u8bcd\u8bed\u7684\u6982\u7387\u5206\u5e03\uff0cpLSA\u6a21\u578b\u5c31\u662f\u7b2c\u4e00\u4e2a\u6839\u636e\u8fd9\u4e2a\u60f3\u6cd5\u6784\u5efa\u7684\u6a21\u578b\u3002\u540c\u6837\u5730\uff0c\u6211\u4eec\u53cd\u8fc7\u6765\u60f3\uff0c\u6211\u4eec\u627e\u5230\u4e86\u6587\u6863\u7684\u4e3b\u9898\uff0c\u7136\u540e\u4e3b\u9898\u4e2d\u6709\u4ee3\u8868\u6027\u7684\u8bcd\u5c31\u80fd\u8868\u793a\u8fd9\u7bc7\u6587\u6863\u7684\u6838\u5fc3\u610f\u601d\uff0c\u5c31\u662f\u6587\u6863\u7684\u5173\u952e\u8bcd\u3002 pLSA\u6a21\u578b\u8ba4\u4e3a\uff0c\u4e00\u7bc7\u6587\u6863\u4e2d\u7684\u6bcf\u4e00\u4e2a\u8bcd\u90fd\u662f\u901a\u8fc7\u4e00\u5b9a\u6982\u7387\u9009\u53d6\u67d0\u4e2a\u4e3b\u9898\uff0c\u7136\u540e\u518d\u6309\u7167\u4e00\u5b9a\u7684\u6982\u7387\u4ece\u4e3b\u9898\u4e2d\u9009\u53d6\u5f97\u5230\u8fd9\u4e2a\u8bcd\u8bed\uff0c\u8fd9\u4e2a\u8bcd\u8bed\u7684\u8ba1\u7b97\u516c\u5f0f\u4e3a\uff1a \u4e00\u4e9b\u8d1d\u53f6\u65af\u5b66\u6d3e\u7684\u7814\u7a76\u8005\u5bf9\u4e8epLSA\u6a21\u578b\u8fdb\u884c\u4e86\u6539\u8fdb\uff0c\u4ed6\u4eec\u8ba4\u4e3a\uff0c\u6587\u7ae0\u5bf9\u5e94\u4e3b\u9898\u7684\u6982\u7387\u4ee5\u53ca\u4e3b\u9898\u5bf9\u5e94\u8bcd\u8bed\u7684\u6982\u7387\u4e0d\u662f\u4e00\u5b9a\u7684\uff0c\u4e5f\u670d\u4ece\u4e00\u5b9a\u7684\u6982\u7387\uff0c\u4e8e\u662f\u5c31\u6709\u4e86\u73b0\u9636\u6bb5\u5e38\u7528\u7684\u4e3b\u9898\u6a21\u578b--LDA\u4e3b\u9898\u6a21\u578b\u3002 LDA\u662fD.M.Blei\u57282003\u5e74\u63d0\u51fa\u7684\u3002LDA\u91c7\u7528\u4e86\u8bcd\u888b\u6a21\u578b\u7684\u65b9\u6cd5\u7b80\u5316\u4e86\u95ee\u9898\u7684\u590d\u6742\u6027\u3002\u5728LDA\u6a21\u578b\u4e2d\uff0c\u6bcf\u4e00\u7bc7\u6587\u6863\u662f\u4e00\u4e9b\u4e3b\u9898\u7684\u6784\u6210\u7684\u6982\u7387\u5206\u5e03\uff0c\u800c\u6bcf\u4e00\u4e2a\u4e3b\u9898\u53c8\u662f\u5f88\u591a\u5355\u8bcd\u6784\u6210\u7684\u4e00\u4e2a\u6982\u7387\u5206\u5e03\u3002\u540c\u65f6\uff0c\u65e0\u8bba\u662f\u4e3b\u9898\u6784\u6210\u7684\u6982\u7387\u5206\u5e03\u8fd8\u662f\u5355\u8bcd\u6784\u6210\u7684\u6982\u7387\u5206\u5e03\u4e5f\u4e0d\u662f\u4e00\u5b9a\u7684\uff0c\u8fd9\u4e9b\u5206\u5e03\u4e5f\u670d\u4eceDirichlet \u5148\u9a8c\u5206\u5e03\u3002 \u6587\u6863\u7684\u751f\u6210\u6a21\u578b\u53ef\u4ee5\u7528\u5982\u4e0b\u56fe\u6a21\u578b\u8868\u793a\uff1a \u5176\u4e2d \u548c \u4e3a\u5148\u9a8c\u5206\u5e03\u7684\u8d85\u53c2\u6570\uff0c \u4e3a\u7b2ck\u4e2a\u4e3b\u9898\u4e0b\u7684\u6240\u6709\u5355\u8bcd\u7684\u5206\u5e03\uff0c \u4e3a\u6587\u6863\u7684\u4e3b\u9898\u5206\u5e03\uff0cw\u4e3a\u6587\u6863\u7684\u8bcd\uff0cz\u4e3aw\u6240\u5bf9\u5e94\u7684\u4e3b\u9898\u3002 \u56fe 3 Blei\u5728\u8bba\u6587\u4e2d\u7684\u56fe\u6a21\u578b DA\u6316\u6398\u4e86\u6587\u672c\u7684\u6df1\u5c42\u8bed\u4e49\u5373\u6587\u672c\u7684\u4e3b\u9898\uff0c\u7528\u6587\u672c\u7684\u4e3b\u9898\u6765\u8868\u793a\u6587\u672c\u7684\u4e5f\u4ece\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u964d\u4f4e\u4e86\u6587\u672c\u5411\u91cf\u7684\u7ef4\u5ea6\uff0c\u5f88\u591a\u4eba\u7528\u8fd9\u79cd\u65b9\u5f0f\u5bf9\u6587\u672c\u505a\u5206\u7c7b\uff0c\u53d6\u5f97\u4e86\u4e0d\u9519\u7684\u6548\u679c\u3002 LDA\u5173\u952e\u8bcd\u63d0\u53d6\u7b97\u6cd5\u5229\u7528\u6587\u6863\u7684\u9690\u542b\u8bed\u4e49\u4fe1\u606f\u6765\u63d0\u53d6\u5173\u952e\u8bcd\uff0c\u4f46\u662f\u4e3b\u9898\u6a21\u578b\u63d0\u53d6\u7684\u5173\u952e\u8bcd\u6bd4\u8f83\u5bbd\u6cdb\uff0c\u4e0d\u80fd\u5f88\u597d\u7684\u53cd\u5e94\u6587\u6863\u4e3b\u9898\u3002\u53e6\u5916\uff0c\u5bf9\u4e8eLDA\u6a21\u578b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u8f83\u9ad8\uff0c\u9700\u8981\u5927\u91cf\u7684\u5b9e\u8df5\u8bad\u7ec3\u3002 NO.4 \u5e94\u7528 \u00b6 \u73b0\u9636\u6bb5\uff0c\u6587\u672c\u7684\u5173\u952e\u8bcd\u63d0\u53d6\u5728\u57fa\u4e8e\u6587\u672c\u7684\u641c\u7d22\u3001\u63a8\u8350\u4ee5\u53ca\u6570\u636e\u6316\u6398\u9886\u57df\u6709\u7740\u5f88\u5e7f\u6cdb\u7684\u5e94\u7528\u3002\u540c\u65f6\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u56e0\u4e3a\u5e94\u7528\u73af\u5883\u7684\u590d\u6742\u6027\uff0c\u5bf9\u4e8e\u4e0d\u540c\u7c7b\u578b\u7684\u6587\u672c\uff0c\u4f8b\u5982\u957f\u6587\u672c\u548c\u77ed\u6587\u672c\uff0c\u7528\u540c\u4e00\u79cd\u6587\u672c\u5173\u952e\u8bcd\u63d0\u53d6\u65b9\u6cd5\u5f97\u5230\u7684\u6548\u679c\u5e76\u76f8\u540c\u3002\u56e0\u6b64\uff0c\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u9488\u5bf9\u4e0d\u540c\u7684\u6761\u4ef6\u73af\u5883\u6240\u91c7\u7528\u7684\u7b97\u6cd5\u4f1a\u6709\u6240\u4e0d\u540c\uff0c\u6ca1\u6709\u67d0\u4e00\u7c7b\u7b97\u6cd5\u5728\u6240\u6709\u7684\u73af\u5883\u4e0b\u90fd\u6709\u5f88\u597d\u7684\u6548\u679c\u3002 \u76f8\u5bf9\u4e8e\u4e0a\u6587\u4e2d\u6240\u63d0\u5230\u7684\u7b97\u6cd5\uff0c\u4e00\u4e9b\u7ec4\u5408\u7b97\u6cd5\u5728\u5de5\u7a0b\u4e0a\u88ab\u5927\u91cf\u5e94\u7528\u4ee5\u5f25\u8865\u5355\u7b97\u6cd5\u7684\u4e0d\u8db3\uff0c\u4f8b\u5982\u5c06TF-IDF\u7b97\u6cd5\u4e0eTextRank\u7b97\u6cd5\u76f8\u7ed3\u5408\uff0c\u6216\u8005\u7efc\u5408TF-IDF\u4e0e\u8bcd\u6027\u5f97\u5230\u5173\u952e\u8bcd\u7b49\u3002\u540c\u65f6\uff0c\u5de5\u7a0b\u4e0a\u5bf9\u4e8e\u6587\u672c\u7684\u9884\u5904\u7406\u4ee5\u53ca\u6587\u672c\u5206\u8bcd\u7684\u51c6\u786e\u6027\u4e5f\u6709\u5f88\u5927\u7684\u4f9d\u8d56\u3002\u5bf9\u4e8e\u6587\u672c\u7684\u9519\u522b\u5b57\uff0c\u53d8\u5f62\u8bcd\u7b49\u4fe1\u606f\uff0c\u9700\u8981\u5728\u9884\u5904\u7406\u9636\u6bb5\u4e88\u4ee5\u89e3\u51b3\uff0c\u5206\u8bcd\u7b97\u6cd5\u7684\u9009\u62e9\uff0c\u672a\u767b\u5f55\u8bcd\u4ee5\u53ca\u6b67\u4e49\u8bcd\u7684\u8bc6\u522b\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u5bf9\u4e8e\u5173\u952e\u8bcd\u7a81\u63d0\u53d6\u4f1a\u53c8\u5f88\u5927\u7684\u5f71\u54cd\u3002 \u76f8\u5173\u9605\u8bfb\uff1a \u81ea\u7136\u8bed\u8a00\u5904\u7406\u7cfb\u5217\u7bc7\u2014\u2014\u5206\u5e03\u5f0f\u722c\u866b\u4e4bWebKit \u53c2\u8003\u6587\u732e \u00b6 [1] TextRank\u7b97\u6cd5\u63d0\u53d6\u5173\u952e\u8bcd\u548c\u6458\u8981http://xiaosheng.me/2017/04/08/article49/ [2] Page L, Brin S, Motwani R,et al. The PageRank citation ranking: Bringing order to the web[R]. StanfordInfoLab, 1999. [3] \u5218\u77e5\u8fdc. \u57fa\u4e8e\u6587\u6863\u4e3b\u9898\u7ed3\u6784\u7684\u5173\u952e\u8bcd\u62bd\u53d6\u65b9\u6cd5\u7814\u7a76[D]. \u5317\u4eac: \u6e05\u534e\u5927\u5b66, 2011. [4] tf-idf\uff0c https://zh.wikipedia.org/zh-hans/Tf-idf [5] \u4e00\u6587\u8be6\u89e3\u673a\u5668\u9886\u57df\u7684LDA\u4e3b\u9898\u6a21\u578b https://zhuanlan.zhihu.com/p/31470216 [6] Blei D M, Ng A Y, Jordan MI. Latent dirichlet allocation[J]. Journal of machine Learning research, 2003,3(Jan): 993-1022. [7] \u8d75\u4eac\u80dc, \u6731\u5de7\u660e, \u5468\u56fd\u680b, \u7b49. \u81ea\u52a8\u5173\u952e\u8bcd\u62bd\u53d6\u7814\u7a76\u7efc\u8ff0[J]. \u8f6f\u4ef6\u5b66\u62a5, 2017,28(9): 2431-2449. [8] \u5218\u77e5\u8fdc. \u57fa\u4e8e\u6587\u6863\u4e3b\u9898\u7ed3\u6784\u7684\u5173\u952e\u8bcd\u62bd\u53d6\u65b9\u6cd5\u7814\u7a76[D]. \u5317\u4eac: \u6e05\u534e\u5927\u5b66, 2011. [9] Berger A L, Pietra VJ D, Pietra S A D. A maximum entropy approach to natural languageprocessing[J]. Computational linguistics, 1996, 22(1): 39-71. [10] Blei D M, Ng A Y,Jordan M I. Latent dirichlet allocation[J]. the Journal of machine Learning research,2003, 3: 993-1022. \u51e1\u672c\u7f51\u6ce8\u660e\"\u6765\u6e90\uff1aXXX \"\u7684\u6587/\u56fe/\u89c6\u9891\u7b49\u7a3f\u4ef6\uff0c\u672c\u7f51\u8f6c\u8f7d\u51fa\u4e8e\u4f20\u9012\u66f4\u591a\u4fe1\u606f\u4e4b\u76ee\u7684\uff0c\u5e76\u4e0d\u610f\u5473\u7740\u8d5e\u540c\u5176\u89c2\u70b9\u6216\u8bc1\u5b9e\u5176\u5185\u5bb9\u7684\u771f\u5b9e\u6027\u3002\u5982\u6d89\u53ca\u4f5c\u54c1\u5185\u5bb9\u3001\u7248\u6743\u548c\u5176\u5b83\u95ee\u9898\uff0c\u8bf7\u4e0e\u672c\u7f51\u8054\u7cfb\uff0c\u6211\u4eec\u5c06\u5728\u7b2c\u4e00\u65f6\u95f4\u5220\u9664\u5185\u5bb9\uff01 \u4f5c\u8005: \u6765\u6e90\uff1a https://zhuanlan.zhihu.com/p/25889937","title":"\u5173\u952e\u8bcd\u4e0e\u6587\u7ae0\u76f8\u5173\u6027, \u5173\u952e\u8bcd\u81ea\u52a8\u6807\u6ce8\u4e0e\u63d0\u53d6"},{"location":"pages/nlp/nlpinfo/keywords-auto-extract/#\u5173\u952e\u8bcd\u4e0e\u6587\u7ae0\u76f8\u5173\u6027-\u5173\u952e\u8bcd\u81ea\u52a8\u6807\u6ce8\u4e0e\u63d0\u53d6","text":"","title":"\u5173\u952e\u8bcd\u4e0e\u6587\u7ae0\u76f8\u5173\u6027, \u5173\u952e\u8bcd\u81ea\u52a8\u6807\u6ce8\u4e0e\u63d0\u53d6"},{"location":"pages/nlp/nlpinfo/keywords-auto-extract/#\u4e00\u5173\u952e\u8bcd\u81ea\u52a8\u6807\u6ce8\u7b80\u4ecb","text":"","title":"\u4e00.\u5173\u952e\u8bcd\u81ea\u52a8\u6807\u6ce8\u7b80\u4ecb"},{"location":"pages/nlp/nlpinfo/keywords-auto-extract/#1\u5173\u952e\u8bcd\u81ea\u52a8\u6807\u6ce8","text":"\u5173\u952e\u8bcd\u662f\u6307\u80fd\u53cd\u6620\u6587\u672c\u4e3b\u9898\u6216\u8005\u610f\u601d\u7684\u8bcd\u8bed\uff0c\u5982\u8bba\u6587\u4e2d\u7684Keyword\u5b57\u6bb5\u3002\u5927\u591a\u6570\u4eba\u5199\u6587\u7ae0\u7684\u65f6\u5019\uff0c\u4e0d\u4f1a\u50cf\u5199\u8bba\u6587\u7684\u90a3\u6837\u660e\u786e\u7684\u6307\u51fa\u6587\u7ae0\u7684\u5173\u952e\u8bcd\u662f\u4ec0\u4e48\uff0c\u5173\u952e\u8bcd\u81ea\u52a8\u6807\u6ce8\u4efb\u52a1\u6b63\u662f\u5728\u8fd9\u79cd\u80cc\u666f\u4e0b\u4ea7\u751f\u7684\u3002 \u76ee\u524d\uff0c\u5173\u952e\u8bcd\u81ea\u52a8\u6807\u6ce8\u65b9\u6cd5\u5206\u4e3a\u4e24\u7c7b\uff1a1\uff09\u5173\u952e\u8bcd\u5206\u914d\uff0c\u9884\u5148\u5b9a\u4e49\u4e00\u4e2a\u5173\u952e\u8bcd\u8bcd\u5e93\uff0c\u5bf9\u4e8e\u4e00\u7bc7\u6587\u7ae0\uff0c\u4ece\u8bcd\u5e93\u4e2d\u9009\u53d6\u82e5\u5e72\u8bcd\u8bed\u4f5c\u4e3a\u6587\u7ae0\u7684\u5173\u952e\u8bcd\uff1b2\uff09\u5173\u952e\u8bcd\u62bd\u53d6\uff0c\u4ece\u6587\u7ae0\u7684\u5185\u5bb9\u4e2d\u62bd\u53d6\u4e00\u4e9b\u8bcd\u8bed\u4f5c\u4e3a\u5173\u952e\u8bcd\u3002","title":"1.\u5173\u952e\u8bcd\u81ea\u52a8\u6807\u6ce8"},{"location":"pages/nlp/nlpinfo/keywords-auto-extract/#2\u5e94\u7528\u573a\u666f","text":"\u5173\u952e\u8bcd\u81ea\u52a8\u6807\u6ce8\u6280\u672f\u5728\u63a8\u8350\u9886\u57df\u4e5f\u6709\u7740\u5e7f\u6cdb\u7684\u5e94\u7528\u3002\u5982\u56fe1\u6240\u793a\uff0c\u5f53\u7528\u6237\u9605\u8bfb\u56fe\u4e2d\u5de6\u8fb9\u7684\u65b0\u95fb\u65f6\uff0c\u63a8\u8350\u7cfb\u7edf\u53ef\u4ee5\u7ed9\u7528\u6237\u63a8\u8350\u5305\u542b\u5173\u952e\u8bcd\u201dDropbox\u201d\u3001\u201d\u4e91\u5b58\u50a8\u201d\u7684\u8d44\u8baf\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u6839\u636e\u6587\u7ae0\u5173\u952e\u8bcd\u7ed9\u7528\u6237\u63a8\u8350\u76f8\u5173\u7684\u5e7f\u544a\u3002 \u56fe1\u57fa\u4e8e\u5173\u952e\u8bcd\u7684\u8d44\u8baf\u63a8\u8350\u7cfb\u7edf \u5173\u952e\u8bcd\u53ef\u4ee5\u4f5c\u4e3a\u7528\u6237\u5174\u8da3\u7684\u7279\u5f81\uff0c\u4ece\u800c\u6ee1\u8db3\u7528\u6237\u7684\u957f\u5c3e\u9605\u8bfb\u5174\u8da3\u3002\u5173\u952e\u8bcd\u8fd8\u5728\u6587\u672c\u805a\u7c7b\u3001\u5206\u7c7b\u3001\u6458\u8981\u7b49\u9886\u57df\u4e2d\u6709\u7740\u91cd\u8981\u7684\u4f5c\u7528\u3002\u6bd4\u5982\u5728\u805a\u7c7b\u65f6\uff0c\u5c06\u5173\u952e\u8bcd\u76f8\u4f3c\u7684\u51e0\u7bc7\u6587\u7ae0\u770b\u6210\u4e00\u4e2a\u7c7b\u56e2\u53ef\u4ee5\u5927\u5927\u63d0\u9ad8K-means\u805a\u7c7b\u7684\u6536\u655b\u901f\u5ea6\u3002\u4ece\u67d0\u5929\u6240\u6709\u65b0\u95fb\u4e2d\u63d0\u53d6\u51fa\u8fd9\u4e9b\u65b0\u95fb\u7684\u5173\u952e\u8bcd\uff0c\u5c31\u53ef\u4ee5\u5927\u81f4\u77e5\u9053\u90a3\u5929\u53d1\u751f\u4e86\u4ec0\u4e48\u4e8b\u60c5\u3002\u6216\u8005\u5c06\u67d0\u6bb5\u65f6\u95f4\u4e2d\u51e0\u4e2a\u4eba\u7684\u5fae\u535a\u62fc\u6210\u4e00\u7bc7\u957f\u6587\u672c\uff0c\u7136\u540e\u62bd\u53d6\u5173\u952e\u8bcd\u5c31\u53ef\u4ee5\u77e5\u9053\u4ed6\u4eec\u4e3b\u8981\u5728\u8ba8\u8bba\u4e9b\u4ec0\u4e48\u8bdd\u9898\u3002","title":"2.\u5e94\u7528\u573a\u666f"},{"location":"pages/nlp/nlpinfo/keywords-auto-extract/#3\u73b0\u6709\u95ee\u9898\u4e0e\u6311\u6218","text":"\u6587\u7ae0\u7684\u5173\u952e\u8bcd\u901a\u5e38\u5177\u6709\u4ee5\u4e0b\u4e09\u4e2a\u7279\u70b9[1]\uff1a \u53ef\u8bfb\u6027\u3002\u5173\u952e\u8bcd\u672c\u8eab\u5e94\u8be5\u662f\u6709\u610f\u4e49\u7684\u8bcd\u6216\u8005\u77ed\u8bed\u3002\u4f8b\u5982\uff0c\u201c\u6211\u4eec\u7ea6\u4f1a\u5427\u201d\u662f\u6709\u610f\u4e49\u7684\u77ed\u8bed\uff0c\u800c\u201c\u6211\u4eec\u201d\u5219\u4e0d\u662f\u3002 \u76f8\u5173\u6027\u3002\u5173\u952e\u8bcd\u5fc5\u987b\u4e0e\u6587\u7ae0\u7684\u4e3b\u9898\u76f8\u5173\u3002\u4f8b\u5982\uff0c\u4e00\u7bc7\u4ecb\u7ecd\u5df4\u8428\u5728\u5fb7\u6bd4\u4e2d\u8f93\u7ed9\u7687\u9a6c\u7684\u65b0\u95fb\uff0c\u5176\u4e2d\u53ef\u80fd\u987a\u5e26\u63d0\u5230\u4e86\u201c\u4e2d\u8d85\u8054\u8d5b\u201d\u8fd9\u4e2a\u5173\u77ed\u8bed\uff0c\u8fd9\u65f6\u5c31\u4e0d\u5e0c\u671b\u8fd9\u4e2a\u77ed\u8bed\u88ab\u9009\u53d6\u4f5c\u4e3a\u8be5\u65b0\u95fb\u7684\u5173\u952e\u8bcd\u3002 \u8986\u76d6\u5ea6\u3002\u5173\u952e\u8bcd\u96c6\u5408\u80fd\u5bf9\u6587\u7ae0\u7684\u4e3b\u9898\u6709\u8f83\u597d\u7684\u8986\u76d6\u5ea6\uff0c\u4e0d\u80fd\u53ea\u96c6\u4e2d\u5728\u6587\u7ae0\u7684\u67d0\u4e2a\u4e3b\u9898\u800c\u5ffd\u7565\u4e86\u6587\u7ae0\u7684\u5176\u4ed6\u4e3b\u9898\u3002 \u4ece\u4e0a\u8ff0\u4e09\u4e2a\u7279\u70b9\uff0c\u53ef\u4ee5\u770b\u5230\u5173\u952e\u8bcd\u6807\u6ce8\u7b97\u6cd5\u7684\u8981\u6c42\u4ee5\u53ca\u9762\u4e34\u7684\u6311\u6218\uff1aa.\u65b0\u8bcd\u53d1\u73b0\u4ee5\u53ca\u77ed\u8bed\u8bc6\u522b\u95ee\u9898\uff0c\u600e\u6837\u5feb\u901f\u8bc6\u522b\u51fa\u7f51\u7edc\u4e0a\u6700\u65b0\u51fa\u73b0\u7684\u8bcd\u6c47\uff08\u4eba\u8270\u4e0d\u62c6\u3001\u53ef\u884c\u53ef\u73cd\u60dc\u2026\uff09\uff1fb.\u5173\u952e\u8bcd\u5019\u9009\u96c6\u5408\u7684\u95ee\u9898\uff0c\u5e76\u4e0d\u662f\u6587\u7ae0\u4e2d\u6240\u6709\u7684\u8bcd\u8bed\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u5019\u9009\uff1bc.\u600e\u4e48\u8ba1\u7b97\u5019\u9009\u8bcd\u548c\u6587\u7ae0\u4e4b\u95f4\u7684\u76f8\u5173\u6027\uff1fd.\u5982\u4f55\u8986\u76d6\u6587\u7ae0\u7684\u5404\u4e2a\u4e3b\u9898\uff1f \u5173\u952e\u8bcd\u5206\u914d\u7b97\u6cd5\u9700\u8981\u9884\u5148\u5b9a\u4e49\u4e00\u4e2a\u5173\u952e\u8bcd\u8bcd\u5e93\uff0c\u8fd9\u5c31\u9650\u5b9a\u4e86\u5173\u952e\u8bcd\u5019\u9009\u8303\u56f4\uff0c\u7b97\u6cd5\u7684\u53ef\u6269\u5c55\u6027\u8f83\u5dee\uff0c\u4e14\u8017\u65f6\u8017\u529b\uff1b\u5173\u952e\u8bcd\u62bd\u53d6\u7b97\u6cd5\u662f\u4ece\u6587\u7ae0\u7684\u5185\u5bb9\u4e2d\u62bd\u53d6\u4e00\u4e9b\u8bcd\u8bed\u4f5c\u4e3a\u6807\u7b7e\u8bcd\uff0c\u5f53\u6587\u7ae0\u4e2d\u6ca1\u6709\u8d28\u91cf\u8f83\u9ad8\u7684\u8bcd\u8bed\u65f6\uff0c\u8fd9\u7c7b\u65b9\u6cd5\u5c31\u65e0\u80fd\u4e3a\u529b\u4e86\u3002\u4e3a\u4e86\u89e3\u51b3\u4e0a\u8ff0\u8fd9\u4e9b\u95ee\u9898\u548c\u6311\u6218\uff0c\u6211\u4eec\u8bbe\u8ba1\u4e86\u5c42\u6b21\u5316\u5173\u952e\u8bcd\u81ea\u52a8\u6807\u6ce8\u7b97\u6cd5.","title":"3.\u73b0\u6709\u95ee\u9898\u4e0e\u6311\u6218"},{"location":"pages/nlp/nlpinfo/keywords-auto-extract/#\u4e8c\u5c42\u6b21\u5316\u5173\u952e\u8bcd\u81ea\u52a8\u6807\u6ce8\u7b97\u6cd5","text":"","title":"\u4e8c.\u5c42\u6b21\u5316\u5173\u952e\u8bcd\u81ea\u52a8\u6807\u6ce8\u7b97\u6cd5"},{"location":"pages/nlp/nlpinfo/keywords-auto-extract/#1\u5c42\u6b21\u5316\u5173\u952e\u8bcd\u4f53\u7cfb","text":"\u9488\u5bf9\u65b0\u95fb\u7684\u5173\u952e\u8bcd\u8bc6\u522b\u4efb\u52a1\uff0c\u6211\u4eec\u8bbe\u8ba1\u4e86\u4e00\u5957\u5c42\u6b21\u5316\u7684\u5173\u952e\u8bcd\u4f53\u7cfb\uff0c\u5982\u56fe3\u6240\u793a\u3002\u7b2c\u4e00\u5c42\u662f\u65b0\u95fb\u9891\u9053\uff08\u4f53\u80b2\u3001\u5a31\u4e50\u3001\u79d1\u6280\u3001etc\uff09\uff0c\u7b2c\u4e8c\u5c42\u662f\u65b0\u95fb\u7684\u4e3b\u9898\uff08\u4e00\u7bc7\u65b0\u95fb\u53ef\u4ee5\u5305\u542b\u591a\u4e2a\u4e3b\u9898\uff09,\u7b2c\u4e09\u6b21\u662f\u6587\u7ae0\u4e2d\u51fa\u73b0\u7684\u6807\u7b7e\u8bcd\u3002 \u56fe3\u5c42\u6b21\u5316\u5173\u952e\u8bcd\u4f53\u7cfb \u4e09\u5c42\u5173\u952e\u8bcd\u4f53\u7cfb\u6709\u4ee5\u4e0b\u51e0\u4e2a\u4f18\u70b9\uff1a \u4e09\u5c42\u5173\u952e\u8bcd\u4f53\u7cfb\u4ece\u4e0d\u540c\u89d2\u5ea6\u63cf\u8ff0\u6587\u7ae0\u6240\u8868\u8fbe\u7684\u5185\u5bb9\uff0c\u4ece\u800c\u80fd\u8ba9\u6807\u6ce8\u7ed3\u679c\u80fd\u66f4\u597d\u5730\u8986\u76d6\u6587\u7ae0\u7684\u5404\u4e2a\u4e3b\u9898\uff0c\u7f13\u89e3\u4e86\u5173\u952e\u8bcd\u8986\u76d6\u5ea6\u4e0d\u591f\u7684\u95ee\u9898\u3002 \u7531\u4e8e\u5404\u5c42\u4e4b\u95f4\u6709\u96b6\u5c5e\u5173\u7cfb\uff0c\u5229\u7528\u8fd9\u79cd\u5173\u7cfb\uff0c\u53ef\u4ee5\u62bd\u53d6\u51fa\u66f4\u76f8\u5173\u7684\u5173\u952e\u8bcd\uff0c\u5982\uff1a\u201c\u975e\u8bda\u52ff\u6270\u201d\u5728\u5a31\u4e50\u65b0\u95fb\u4e2d\u53ef\u80fd\u662f\u6307\u5a31\u4e50\u8282\u76ee\u6216\u8005\u7535\u5f71\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u5173\u952e\u8bcd\uff1b\u5982\u679c\u662f\u51fa\u73b0\u5728\u6c7d\u8f66\u65b0\u95fb\u4e2d\uff0c\u5219\u4e0d\u592a\u53ef\u80fd\u662f\u6587\u7ae0\u7684\u5173\u952e\u8bcd\u3002 \u56fe4\u5c42\u6b21\u5316\u5173\u952e\u8bcd\u81ea\u52a8\u6807\u6ce8\u7ed3\u679c\u793a\u4f8b","title":"1.\u5c42\u6b21\u5316\u5173\u952e\u8bcd\u4f53\u7cfb"},{"location":"pages/nlp/nlpinfo/keywords-auto-extract/#2\u7b97\u6cd5\u6d41\u7a0b","text":"\u4ece\u56fe3\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u4e3b\u9898\u548c\u6807\u7b7e\u8bcd\u4f9d\u8d56\u4e8e\u65b0\u95fb\u9891\u9053\uff0c\u6240\u4ee5\u5728\u6807\u6ce8\u4e00\u7bc7\u65b0\u95fb\u7684\u5173\u952e\u8bcd\u65f6\uff0c\u9996\u5148\u9700\u8981\u83b7\u53d6\u65b0\u95fb\u7684\u7c7b\u522b\uff0c\u7136\u540e\u6839\u636e\u65b0\u95fb\u7684\u7c7b\u522b\u9009\u62e9\u4e0d\u540c\u7684\u4e3b\u9898\u6a21\u578b\u9884\u6d4b\u65b0\u95fb\u7684\u4e3b\u9898\uff0c\u6700\u540e\u518d\u62bd\u53d6\u65b0\u95fb\u4e2d\u7684\u6807\u7b7e\u8bcd\u3002 \u5728\u5173\u952e\u8bcd\u6807\u6ce8\u65b9\u6cd5\u4e0a\uff0c\u6211\u4eec\u878d\u5408\u4e86\u5173\u952e\u8bcd\u5206\u914d\u548c\u5173\u952e\u8bcd\u62bd\u53d6\u4e24\u7c7b\u65b9\u6cd5\u3002\u56fe5\u63cf\u8ff0\u4e86\u7b97\u6cd5\u5904\u7406\u4e00\u7bc7\u6587\u7ae0\u7684\u6d41\u7a0b\u3002\u5176\u4e2d\u9891\u9053\u548c\u4e3b\u9898\u7684\u62bd\u53d6\u65b9\u6cd5\u5c5e\u4e8e\u5173\u952e\u8bcd\u5206\u914d\u8fd9\u4e00\u7c7b\u7b97\u6cd5\uff0c\u6807\u7b7e\u8bcd\u62bd\u53d6\u5219\u5c5e\u4e8e\u5173\u952e\u8bcd\u62bd\u53d6\u8fd9\u4e00\u7c7b\u7b97\u6cd5\u3002\u9664\u4e86\u4e0a\u4e00\u8282\u4e2d\u6240\u8bf4\u7684\u5c42\u6b21\u5316\u5173\u952e\u8bcd\u7684\u4e24\u4e2a\u4f18\u70b9\u4e4b\u5916\uff0c\u6211\u4eec\u7684\u7b97\u6cd5\u6709\u5982\u4e0b\u51e0\u70b9\u597d\u5904\uff1a \u5173\u952e\u8bcd\u5206\u914d\u7b97\u6cd5\u6709\u6548\u7f13\u89e3\u5173\u952e\u8bcd\u62bd\u53d6\u7b97\u6cd5\u53ec\u56de\u4e0d\u8db3\u7684\u95ee\u9898\u3002 \u5728\u5173\u952e\u8bcd\u5206\u914d\u7b97\u6cd5\u4e2d\uff0c\u4f7f\u7528\u9891\u9053\u548c\u4e3b\u9898\u4ee3\u66ff\u4f20\u7edf\u7684\u5173\u952e\u8bcd\uff0c\u4ece\u800c\u51cf\u5c11\u8bcd\u5e93\u6784\u5efa\u6210\u672c\u3001\u589e\u5f3a\u7b97\u6cd5\u7684\u53ef\u79fb\u690d\u6027\u3002 \u56fe5\u5c42\u6b21\u5316\u5173\u952e\u8bcd\u81ea\u52a8\u6807\u6ce8\u7b97\u6cd5\u6d41\u7a0b 2.1 \u6587\u672c\u5206\u7c7b\u5668 \u6587\u672c\u5206\u7c7b\u5668\u6211\u4eec\u91c7\u7528\u6700\u5927\u71b5\u6a21\u578b[2]\uff0c\u4f7f\u7528\u4e1a\u52a1\u6700\u8fd1\u4e00\u5e74\u5e26\u9891\u9053\u6807\u7b7e\u7684\u65b0\u95fb\u4f5c\u4e3a\u8bad\u7ec3\u96c6\u3002\u6bcf\u4e2a\u9891\u9053\u9009\u53d6\u9891\u9053\u76f8\u5173\u5ea6\u6700\u9ad8\u76841W\u4e2a\u8bcd\u8bed\u4f5c\u4e3a\u5206\u7c7b\u7279\u5f81\u3002 \u5bf9\u4e8e\u6700\u5927\u71b5\u6a21\u578b\uff0c\u7f51\u4e0a\u53ef\u4ee5\u627e\u5230\u5f88\u591a\u76f8\u5173\u8d44\u6599\uff0c\u8fd9\u91cc\u5c31\u4e0d\u4f5c\u4ecb\u7ecd\u4e86\u3002 2.2 \u4e3b\u9898\u9884\u6d4b \u4f7f\u7528LDA[3]\u4f5c\u4e3a\u4e3b\u9898\u805a\u7c7b\u6a21\u578b\u3002LDA\u5f00\u6e90\u7684\u5927\u90e8\u5206\u5f00\u6e90\u5b9e\u73b0\u90fd\u662f\u5355\u8fdb\u7a0b\u7684\uff0c\u5728\u5904\u7406\u8f83\u5927\u89c4\u6a21\u7684\u8bed\u6599\u65f6\uff0c\u5176\u65f6\u95f4\u548c\u5185\u5b58\u5f00\u9500\u90fd\u975e\u5e38\u5927\uff0c\u65e0\u6cd5\u6ee1\u8db3\u6211\u4eec\u7684\u8981\u6c42\u3002\u56e0\u6b64\u6211\u4eec\u5b9e\u73b0\u4e86\u4e00\u5957\u5206\u5e03\u5f0f\u7684LDA\u5e73\u53f0\uff0c\u4f7f\u5f97\u80fd\u591f\u5feb\u901f\u5904\u7406\u5927\u89c4\u6a21\u7684\u6570\u636e\u3002 \u8bed\u6599\u901a\u8fc7LDA\u5e73\u53f0\u5904\u7406\u540e\uff0c\u4f1a\u5f97\u5230\u6bcf\u4e2a\u4e3b\u9898\u4e0b\u6982\u7387\u8f83\u9ad8\u7684\u8bcd\u8bed\u3002\u4eba\u5de5\u9009\u53d6\u8d28\u91cf\u8f83\u9ad8\u7684\u4e3b\u9898\uff0c\u5e76\u4f7f\u7528\u4e00\u4e2a\u8bcd\u8bed\u6216\u8005\u77ed\u8bed\u6982\u62ec\u8fd9\u4e2a\u4e3b\u9898\u3002\u5bf9\u4e8e\u4e00\u7bc7\u6587\u7ae0\uff0cLDA\u7684inference\u7ed3\u679c\u662f\u4e00\u4e2a\u6982\u7387\u5411\u91cf\uff0c\u6211\u4eec\u9009\u53d6\u6982\u7387\u503c\u5927\u4e8e\u9608\u503c\u7684\u4e3b\u9898\u4f5c\u4e3a\u6587\u7ae0\u6240\u5c5e\u7684\u4e3b\u9898\u3002 \u56fe6\u9ad8\u8d28\u91cf\u7684\u4e3b\u9898 \u56fe7\u6587\u7ae0\u7684\u4e3b\u9898\u5173\u952e\u8bcd 2.3 \u6807\u7b7e\u8bcd\u62bd\u53d6 \u6807\u7b7e\u8bcd\u62bd\u53d6\u5305\u62ec\uff1a\u751f\u6210\u5019\u9009\u8bcd\u548c\u76f8\u5173\u6027\u8ba1\u7b97\u3002\u4e0b\u9762\u5206\u522b\u4ecb\u7ecd\u8fd9\u4e24\u90e8\u5206\u3002 1)\u751f\u6210\u5019\u9009\u8bcd \u901a\u8fc7\u5206\u8bcd\u5f97\u5230\u7684\u57fa\u672c\u8bcd\u3001\u77ed\u8bed\u7b49\uff0c\u8fc7\u6ee4\u6389\u57fa\u672c\u8bcd\u4e2d\u7684\u505c\u7528\u8bcd \u547d\u540d\u5b9e\u4f53\uff08\u6709\u6548\u89e3\u51b3\u65b0\u8bcd\u3001\u70ed\u8bcd\u7684\u81ea\u52a8\u53d1\u73b0\uff09 2)\u76f8\u5173\u6027\u8ba1\u7b97 \u4f7f\u7528\u7ebf\u6027\u52a0\u6743\u5bf9\u5019\u9009\u8bcd\u6253\u5206\uff0c\u5176\u7279\u5f81\u5305\u62ec\uff1a TF*IDF \u5019\u9009\u8bcd\u548c\u6587\u7ae0\u9891\u9053\u7684\u76f8\u5173\u7a0b\u5ea6 \u5019\u9009\u8bcd\u548c\u6587\u7ae0\u7684\u76f8\u4f3c\u5ea6 \u5019\u9009\u8bcd\u7684\u957f\u5ea6 \u5019\u9009\u8bcd\u51fa\u73b0\u7684\u4f4d\u7f6e \u5019\u9009\u8bcd\u7684\u7c7b\u578b\uff08\u57fa\u672c\u8bcd\u3001\u5b9e\u4f53\u7c7b\u578b\u3001\u77ed\u8bed\u7b49\uff09 \u9009\u53d6\u76f8\u5173\u6027\u5f97\u5206\u5927\u4e8e\u9608\u503c\u7684\u5019\u9009\u8bcd\u4f5c\u4e3a\u6587\u7ae0\u7684\u6807\u7b7e\u8bcd\u3002","title":"2.\u7b97\u6cd5\u6d41\u7a0b"},{"location":"pages/nlp/nlpinfo/keywords-auto-extract/#3\u6548\u679c\u8bc4\u4ef7","text":"\u5728\u817e\u8baf\u7f51\u4e0a\u968f\u673a\u62bd\u53d6\u7684351\u7bc7\u65b0\u95fb\u4e0a\u505a\u6d4b\u8bd5\uff0c\u5404\u9879\u6307\u6807\u5982\u8868\u683c1\u6240\u793a\u3002\u7531\u4e8e\u4e3b\u9898\u96c6\u5408\u7684\u5f00\u653e\u6027\uff0c\u5176\u53ec\u56de\u7387\u5f88\u96be\u8bc4\u4ef7\uff0c\u6545\u53ea\u8bc4\u4ef7\u5176\u51c6\u786e\u7387\u3002 \u8868\u683c1 \u5c42\u6b21\u5316\u5173\u952e\u8bcd\u81ea\u52a8\u6807\u6ce8\u7b97\u6cd5\u51c6\u53ec\u7387","title":"3.\u6548\u679c\u8bc4\u4ef7"},{"location":"pages/nlp/nlpinfo/keywords-auto-extract/#\u4e09\u5173\u952e\u8bcd\u63d0\u53d6\u4e09\u79cd\u7b97\u6cd5","text":"\u5728\u81ea\u7136\u8bed\u8a00\u5904\u7406\u9886\u57df\uff0c\u5904\u7406\u6d77\u91cf\u7684\u6587\u672c\u6587\u4ef6\u6700\u5173\u952e\u7684\u662f\u8981\u628a\u7528\u6237\u6700\u5173\u5fc3\u7684\u95ee\u9898\u63d0\u53d6\u51fa\u6765\u3002 \u800c\u65e0\u8bba\u662f\u5bf9\u4e8e\u957f\u6587\u672c\u8fd8\u662f\u77ed\u6587\u672c\uff0c\u5f80\u5f80\u53ef\u4ee5\u901a\u8fc7\u51e0\u4e2a\u5173\u952e\u8bcd\u7aa5\u63a2\u6574\u4e2a\u6587\u672c\u7684\u4e3b\u9898\u601d\u60f3\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u4e0d\u7ba1\u662f\u57fa\u4e8e\u6587\u672c\u7684\u63a8\u8350\u8fd8\u662f\u57fa\u4e8e\u6587\u672c\u7684\u641c\u7d22\uff0c\u5bf9\u4e8e\u6587\u672c\u5173\u952e\u8bcd\u7684\u4f9d\u8d56\u4e5f\u5f88\u5927\uff0c\u5173\u952e\u8bcd\u63d0\u53d6\u7684\u51c6\u786e\u7a0b\u5ea6\u76f4\u63a5\u5173\u7cfb\u5230\u63a8\u8350\u7cfb\u7edf\u6216\u8005\u641c\u7d22\u7cfb\u7edf\u7684\u6700\u7ec8\u6548\u679c\u3002\u56e0\u6b64\uff0c\u5173\u952e\u8bcd\u63d0\u53d6\u5728\u6587\u672c\u6316\u6398\u9886\u57df\u662f\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u90e8\u5206\u3002 \u5173\u4e8e\u6587\u672c\u7684\u5173\u952e\u8bcd\u63d0\u53d6\u65b9\u6cd5\u5206\u4e3a\u6709\u76d1\u7763\u3001\u534a\u76d1\u7763\u548c\u65e0\u76d1\u7763\u4e09\u79cd\uff1a 1 \u6709\u76d1\u7763\u7684\u5173\u952e\u8bcd\u62bd\u53d6\u7b97\u6cd5 \u5b83\u662f\u5efa\u5173\u952e\u8bcd\u62bd\u53d6\u7b97\u6cd5\u770b\u4f5c\u662f\u4e8c\u5206\u7c7b\u95ee\u9898\uff0c\u5224\u65ad\u6587\u6863\u4e2d\u7684\u8bcd\u6216\u8005\u77ed\u8bed\u662f\u6216\u8005\u4e0d\u662f\u5173\u952e\u8bcd\u3002\u65e2\u7136\u662f\u5206\u7c7b\u95ee\u9898\uff0c\u5c31\u9700\u8981\u63d0\u4f9b\u5df2\u7ecf\u6807\u6ce8\u597d\u7684\u8bad\u7ec3\u8bed\u6599\uff0c\u5229\u7528\u8bad\u7ec3\u8bed\u6599\u8bad\u7ec3\u5173\u952e\u8bcd\u63d0\u53d6\u6a21\u578b\uff0c\u6839\u636e\u6a21\u578b\u5bf9\u9700\u8981\u62bd\u53d6\u5173\u952e\u8bcd\u7684\u6587\u6863\u8fdb\u884c\u5173\u952e\u8bcd\u62bd\u53d6","title":"\u4e09.\u5173\u952e\u8bcd\u63d0\u53d6\u4e09\u79cd\u7b97\u6cd5"},{"location":"pages/nlp/nlpinfo/keywords-auto-extract/#2-\u534a\u76d1\u7763\u7684\u5173\u952e\u8bcd\u63d0\u53d6\u7b97\u6cd5","text":"\u53ea\u9700\u8981\u5c11\u91cf\u7684\u8bad\u7ec3\u6570\u636e\uff0c\u5229\u7528\u8fd9\u4e9b\u8bad\u7ec3\u6570\u636e\u6784\u5efa\u5173\u952e\u8bcd\u62bd\u53d6\u6a21\u578b\uff0c\u7136\u540e\u4f7f\u7528\u6a21\u578b\u5bf9\u65b0\u7684\u6587\u672c\u8fdb\u884c\u5173\u952e\u8bcd\u63d0\u53d6\uff0c\u5bf9\u4e8e\u8fd9\u4e9b\u5173\u952e\u8bcd\u8fdb\u884c\u4eba\u5de5\u8fc7\u6ee4\uff0c\u5c06\u8fc7\u6ee4\u5f97\u5230\u7684\u5173\u952e\u8bcd\u52a0\u5165\u8bad\u7ec3\u96c6\uff0c\u91cd\u65b0\u8bad\u7ec3\u6a21\u578b\u3002","title":"2 \u534a\u76d1\u7763\u7684\u5173\u952e\u8bcd\u63d0\u53d6\u7b97\u6cd5"},{"location":"pages/nlp/nlpinfo/keywords-auto-extract/#3-\u65e0\u76d1\u7763\u7684\u65b9\u6cd5","text":"\u4e0d\u9700\u8981\u4eba\u5de5\u6807\u6ce8\u7684\u8bed\u6599\uff0c\u5229\u7528\u67d0\u4e9b\u65b9\u6cd5\u53d1\u73b0\u6587\u672c\u4e2d\u6bd4\u8f83\u91cd\u8981\u7684\u8bcd\u4f5c\u4e3a\u5173\u952e\u8bcd\uff0c\u8fdb\u884c\u5173\u952e\u8bcd\u62bd\u53d6\u3002 \u6709\u76d1\u7763\u7684\u6587\u672c\u5173\u952e\u8bcd\u63d0\u53d6\u7b97\u6cd5\u9700\u8981\u9ad8\u6602\u7684\u4eba\u5de5\u6210\u672c\uff0c\u56e0\u6b64\u73b0\u6709\u7684\u6587\u672c\u5173\u952e\u8bcd\u63d0\u53d6\u4e3b\u8981\u91c7\u7528\u9002\u7528\u6027\u8f83\u5f3a\u7684\u65e0\u76d1\u7763\u5173\u952e\u8bcd\u62bd\u53d6\u3002 \u5176\u6587\u672c\u5173\u952e\u8bcd\u62bd\u53d6\u6d41\u7a0b\u5982\u4e0b\uff1a \u56fe 1 \u65e0\u76d1\u7763\u6587\u672c\u5173\u952e\u8bcd\u62bd\u53d6\u6d41\u7a0b\u56fe \u65e0\u76d1\u7763\u5173\u952e\u8bcd\u62bd\u53d6\u7b97\u6cd5\u53ef\u4ee5\u5206\u4e3a\u4e09\u5927\u7c7b\uff0c\u57fa\u4e8e\u7edf\u8ba1\u7279\u5f81\u7684\u5173\u952e\u8bcd\u62bd\u53d6\u3001\u57fa\u4e8e\u8bcd\u56fe\u6a21\u578b\u7684\u5173\u952e\u8bcd\u62bd\u53d6\u548c\u57fa\u4e8e\u4e3b\u9898\u6a21\u578b\u7684\u5173\u952e\u8bcd\u62bd\u53d6\u3002","title":"3 \u65e0\u76d1\u7763\u7684\u65b9\u6cd5"},{"location":"pages/nlp/nlpinfo/keywords-auto-extract/#NO1-\u57fa\u4e8e\u7edf\u8ba1\u7279\u5f81\u7684\u5173\u952e\u8bcd\u63d0\u53d6\u7b97\u6cd5","text":"\u57fa\u4e8e\u4e8e\u7edf\u8ba1\u7279\u5f81\u7684\u5173\u952e\u8bcd\u62bd\u53d6\u7b97\u6cd5\u7684\u601d\u60f3\u662f \u5229\u7528\u6587\u6863\u4e2d\u8bcd\u8bed\u7684\u7edf\u8ba1\u4fe1\u606f\u62bd\u53d6\u6587\u6863\u7684\u5173\u952e\u8bcd\u3002 \u901a\u5e38\u5c06\u6587\u672c\u7ecf\u8fc7\u9884\u5904\u7406\u5f97\u5230\u5019\u9009\u8bcd\u8bed\u7684\u96c6\u5408\uff0c\u7136\u540e\u91c7\u7528\u7279\u5f81\u503c\u91cf\u5316\u7684\u65b9\u5f0f\u4ece\u5019\u9009\u96c6\u5408\u4e2d\u5f97\u5230\u5173\u952e\u8bcd\u3002\u57fa\u4e8e\u7edf\u8ba1\u7279\u5f81\u7684\u5173\u952e\u8bcd\u62bd\u53d6\u65b9\u6cd5\u7684\u5173\u952e\u662f\u91c7\u7528\u4ec0\u4e48\u6837\u7684\u7279\u5f81\u503c\u91cf\u5316\u6307\u6807\u7684\u65b9\u5f0f\uff0c\u76ee\u524d\u5e38\u7528\u7684\u6709\u4e09\u7c7b\uff1a 1 \u57fa\u4e8e\u8bcd\u6743\u91cd\u7684\u7279\u5f81\u91cf\u5316 \u57fa\u4e8e\u8bcd\u6743\u91cd\u7684\u7279\u5f81\u91cf\u5316\u4e3b\u8981\u5305\u62ec\u8bcd\u6027\u3001\u8bcd\u9891\u3001\u9006\u5411\u6587\u6863\u9891\u7387\u3001\u76f8\u5bf9\u8bcd\u9891\u3001\u8bcd\u957f\u7b49\u3002 2 \u57fa\u4e8e\u8bcd\u7684\u6587\u6863\u4f4d\u7f6e\u7684\u7279\u5f81\u91cf\u5316 \u8fd9\u79cd\u7279\u5f81\u91cf\u5316\u65b9\u5f0f\u662f\u6839\u636e\u6587\u7ae0\u4e0d\u540c\u4f4d\u7f6e\u7684\u53e5\u5b50\u5bf9\u6587\u6863\u7684\u91cd\u8981\u6027\u4e0d\u540c\u7684\u5047\u8bbe\u6765\u8fdb\u884c\u7684\u3002\u901a\u5e38\uff0c\u6587\u7ae0\u7684\u524dN\u4e2a\u8bcd\u3001\u540eN\u4e2a\u8bcd\u3001\u6bb5\u9996\u3001\u6bb5\u5c3e\u3001\u6807\u9898\u3001\u5f15\u8a00\u7b49\u4f4d\u7f6e\u7684\u8bcd\u5177\u6709\u4ee3\u8868\u6027\uff0c\u8fd9\u4e9b\u8bcd\u4f5c\u4e3a\u5173\u952e\u8bcd\u53ef\u4ee5\u8868\u8fbe\u6574\u4e2a\u7684\u4e3b\u9898\u3002 3 \u57fa\u4e8e\u8bcd\u7684\u5173\u8054\u4fe1\u606f\u7684\u7279\u5f81\u91cf\u5316 \u8bcd\u7684\u5173\u8054\u4fe1\u606f\u662f\u6307\u8bcd\u4e0e\u8bcd\u3001\u8bcd\u4e0e\u6587\u6863\u7684\u5173\u8054\u7a0b\u5ea6\u4fe1\u606f\uff0c\u5305\u62ec\u4e92\u4fe1\u606f\u3001hits\u503c\u3001\u8d21\u732e\u5ea6\u3001\u4f9d\u5b58\u5ea6\u3001TF-IDF\u503c\u7b49\u3002 \u4e0b\u9762\u4ecb\u7ecd\u51e0\u79cd\u5e38\u7528\u7684\u7279\u5f81\u503c\u91cf\u5316\u6307\u6807\u3002","title":"NO.1 \u57fa\u4e8e\u7edf\u8ba1\u7279\u5f81\u7684\u5173\u952e\u8bcd\u63d0\u53d6\u7b97\u6cd5"},{"location":"pages/nlp/nlpinfo/keywords-auto-extract/#\u8bcd\u6027","text":"\u8bcd\u6027\u65f6\u901a\u8fc7\u5206\u8bcd\u3001\u8bed\u6cd5\u5206\u6790\u540e\u5f97\u5230\u7684\u7ed3\u679c\u3002\u73b0\u6709\u7684\u5173\u952e\u8bcd\u4e2d\uff0c\u7edd\u5927\u591a\u6570\u5173\u952e\u8bcd\u4e3a\u540d\u8bcd\u6216\u8005\u52a8\u540d\u8bcd\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u540d\u8bcd\u4e0e\u5176\u4ed6\u8bcd\u6027\u76f8\u6bd4\u66f4\u80fd\u8868\u8fbe\u4e00\u7bc7\u6587\u7ae0\u7684\u4e3b\u8981\u601d\u60f3\u3002\u4f46\u662f\uff0c\u8bcd\u6027\u4f5c\u4e3a\u7279\u5f81\u91cf\u5316\u7684\u6307\u6807\uff0c\u4e00\u822c\u4e0e\u5176\u4ed6\u6307\u6807\u7ed3\u5408\u4f7f\u7528\u3002","title":"\u8bcd\u6027"},{"location":"pages/nlp/nlpinfo/keywords-auto-extract/#\u8bcd\u9891","text":"\u8bcd\u9891\u8868\u793a\u4e00\u4e2a\u8bcd\u5728\u6587\u672c\u4e2d\u51fa\u73b0\u7684\u9891\u7387\u3002\u4e00\u822c\u6211\u4eec\u8ba4\u4e3a\uff0c\u5982\u679c\u4e00\u4e2a\u8bcd\u5728\u6587\u672c\u4e2d\u51fa\u73b0\u7684\u8d8a\u662f\u9891\u7e41\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8bcd\u5c31\u8d8a\u6709\u53ef\u80fd\u4f5c\u4e3a\u6587\u7ae0\u7684\u6838\u5fc3\u8bcd\u3002\u8bcd\u9891\u7b80\u5355\u5730\u7edf\u8ba1\u4e86\u8bcd\u5728\u6587\u672c\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u4f46\u662f\uff0c\u53ea\u4f9d\u9760\u8bcd\u9891\u6240\u5f97\u5230\u7684\u5173\u952e\u8bcd\u6709\u5f88\u5927\u7684\u4e0d\u786e\u5b9a\u6027\uff0c\u5bf9\u4e8e\u957f\u5ea6\u6bd4\u8f83\u957f\u7684\u6587\u672c\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u4f1a\u6709\u5f88\u5927\u7684\u566a\u97f3\u3002","title":"\u8bcd\u9891"},{"location":"pages/nlp/nlpinfo/keywords-auto-extract/#\u4f4d\u7f6e\u4fe1\u606f","text":"\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u8bcd\u51fa\u73b0\u7684\u4f4d\u7f6e\u5bf9\u4e8e\u8bcd\u6765\u8bf4\u6709\u7740\u5f88\u5927\u7684\u4ef7\u503c\u3002\u4f8b\u5982\uff0c\u6807\u9898\u3001\u6458\u8981\u672c\u8eab\u5c31\u662f\u4f5c\u8005\u6982\u62ec\u51fa\u7684\u6587\u7ae0\u7684\u4e2d\u5fc3\u601d\u60f3\uff0c\u56e0\u6b64\u51fa\u73b0\u5728\u8fd9\u4e9b\u5730\u65b9\u7684\u8bcd\u5177\u6709\u4e00\u5b9a\u7684\u4ee3\u8868\u6027\uff0c\u66f4\u53ef\u80fd\u6210\u4e3a\u5173\u952e\u8bcd\u3002\u4f46\u662f\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u4f5c\u8005\u7684\u4e60\u60ef\u4e0d\u540c\uff0c\u5199\u4f5c\u65b9\u5f0f\u4e0d\u540c\uff0c\u5173\u952e\u53e5\u5b50\u7684\u4f4d\u7f6e\u4e5f\u4f1a\u6709\u6240\u4e0d\u540c\uff0c\u6240\u4ee5\u8fd9\u4e5f\u662f\u4e00\u79cd\u5f88\u5bbd\u6cdb\u7684\u5f97\u5230\u5173\u952e\u8bcd\u7684\u65b9\u6cd5\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u4e0d\u4f1a\u5355\u72ec\u4f7f\u7528\u3002","title":"\u4f4d\u7f6e\u4fe1\u606f"},{"location":"pages/nlp/nlpinfo/keywords-auto-extract/#\u4e92\u4fe1\u606f","text":"\u4e92\u4fe1\u606f\u662f\u4fe1\u606f\u8bba\u4e2d\u6982\u5ff5\uff0c\u662f\u53d8\u91cf\u4e4b\u95f4\u76f8\u4e92\u4f9d\u8d56\u7684\u5ea6\u91cf\u3002\u4e92\u4fe1\u606f\u5e76\u4e0d\u5c40\u9650\u4e8e\u5b9e\u503c\u968f\u673a\u53d8\u91cf\uff0c\u5b83\u66f4\u52a0\u4e00\u822c\u4e14\u51b3\u5b9a\u7740\u8054\u5408\u5206\u5e03 p(X,Y) \u548c\u5206\u89e3\u7684\u8fb9\u7f18\u5206\u5e03\u7684\u4e58\u79ef p(X)p(Y) \u7684\u76f8\u4f3c\u7a0b\u5ea6\u3002\u4e92\u4fe1\u606f\u7684\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a \u5176\u4e2d\uff0cp(x,y)\u662fX\u548cY\u7684\u8054\u5408\u6982\u7387\u5206\u5e03\u51fd\u6570\uff0cp(x)\u548cp(y)\u5206\u522b\u4e3aX\u548cY\u7684\u8fb9\u7f18\u6982\u7387\u5206\u5e03\u51fd\u6570\u3002 \u5f53\u4f7f\u7528\u4e92\u4fe1\u606f\u4f5c\u4e3a\u5173\u952e\u8bcd\u63d0\u53d6\u7684\u7279\u5f81\u91cf\u5316\u65f6\uff0c\u5e94\u7528\u6587\u672c\u7684\u6b63\u6587\u548c\u6807\u9898\u6784\u9020PAT\u6811\uff0c\u7136\u540e\u8ba1\u7b97\u5b57\u7b26\u4e32\u5de6\u53f3\u7684\u4e92\u4fe1\u606f\u3002","title":"\u4e92\u4fe1\u606f"},{"location":"pages/nlp/nlpinfo/keywords-auto-extract/#\u8bcd\u8de8\u5ea6","text":"\u8bcd\u8de8\u5ea6\u662f\u6307\u4e00\u4e2a\u8bcd\u6216\u8005\u77ed\u8bed\u5b57\u6587\u4e2d\u9996\u6b21\u51fa\u73b0\u548c\u672b\u6b21\u51fa\u73b0\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u8bcd\u8de8\u5ea6\u8d8a\u5927\u8bf4\u660e\u8fd9\u4e2a\u8bcd\u5bf9\u6587\u672c\u8d8a\u91cd\u8981\uff0c\u53ef\u4ee5\u53cd\u6620\u6587\u672c\u7684\u4e3b\u9898\u3002\u4e00\u4e2a\u8bcd\u7684\u8de8\u5ea6\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a \u5176\u4e2d\uff0c \u8868\u793a\u8bcdi\u5728\u6587\u672c\u4e2d\u6700\u540e\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c \u8868\u793a\u8bcd i \u5728\u6587\u672c\u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0csum\u8868\u793a\u6587\u672c\u4e2d\u8bcd\u7684\u603b\u6570\u3002 \u8bcd\u8de8\u5ea6\u88ab\u4f5c\u4e3a\u63d0\u53d6\u5173\u952e\u8bcd\u7684\u65b9\u6cd5\u662f\u56e0\u4e3a\u5728\u73b0\u5b9e\u4e2d\uff0c\u6587\u672c\u4e2d\u603b\u662f\u6709\u5f88\u591a\u566a\u58f0\uff08\u6307\u4e0d\u662f\u5173\u952e\u8bcd\u7684\u90a3\u4e9b\u8bcd\uff09\uff0c\u4f7f\u7528\u8bcd\u8de8\u5ea6\u53ef\u4ee5\u51cf\u5c11\u8fd9\u4e9b\u566a\u58f0\u3002","title":"\u8bcd\u8de8\u5ea6"},{"location":"pages/nlp/nlpinfo/keywords-auto-extract/#TF-IDF\u503c","text":"\u4e00\u4e2a\u8bcd\u7684TF\u662f\u6307\u8fd9\u4e2a\u8bcd\u5728\u6587\u6863\u4e2d\u51fa\u73b0\u7684\u9891\u7387\uff0c\u5047\u8bbe\u4e00\u4e2a\u8bcdw\u5728\u6587\u672c\u4e2d\u51fa\u73b0\u4e86m\u6b21\uff0c\u800c\u6587\u672c\u4e2d\u8bcd\u7684\u603b\u6570\u4e3an\uff0c\u90a3\u4e48 \u3002\u4e00\u4e2a\u8bcd\u7684IDF\u662f\u6839\u636e\u8bed\u6599\u5e93\u5f97\u51fa\u7684\uff0c\u8868\u793a\u8fd9\u4e2a\u8bcd\u5728\u6574\u4e2a\u8bed\u6599\u5e93\u4e2d\u51fa\u73b0\u7684\u9891\u7387\u3002\u5047\u8bbe\u6574\u4e2a\u8bed\u6599\u5e93\u4e2d\uff0c\u5305\u542b\u8bcdw\u7684\u6587\u672c\u4e00\u5171\u6709M\u7bc7\uff0c\u8bed\u6599\u5e93\u4e2d\u7684\u6587\u672c\u4e00\u5171\u6709N\u7bc7\uff0c\u5219 \u7531\u6b64\u53ef\u5f97\u8bcdw\u7684TF-IDF\u503c\u4e3a\uff1a TF-IDF\u7684\u4f18\u70b9\u662f\u5b9e\u73b0\u7b80\u5355\uff0c\u76f8\u5bf9\u5bb9\u6613\u7406\u89e3\u3002 \u4f46\u662f\uff0cTFIDF\u7b97\u6cd5\u63d0\u53d6\u5173\u952e\u8bcd\u7684\u7f3a\u70b9\u4e5f\u5f88\u660e\u663e\uff0c\u4e25\u91cd\u4f9d\u8d56\u8bed\u6599\u5e93\uff0c\u9700\u8981\u9009\u53d6\u8d28\u91cf\u8f83\u9ad8\u4e14\u548c\u6240\u5904\u7406\u6587\u672c\u76f8\u7b26\u7684\u8bed\u6599\u5e93\u8fdb\u884c\u8bad\u7ec3\u3002\u53e6\u5916\uff0c\u5bf9\u4e8eIDF\u6765\u8bf4\uff0c\u5b83\u672c\u8eab\u662f\u4e00\u79cd\u8bd5\u56fe\u6291\u5236\u566a\u58f0\u7684\u52a0\u6743\uff0c\u672c\u8eab\u503e\u5411\u4e8e\u6587\u672c\u4e2d\u9891\u7387\u5c0f\u7684\u8bcd\uff0c\u8fd9\u4f7f\u5f97TF-IDF\u7b97\u6cd5\u7684\u7cbe\u5ea6\u4e0d\u9ad8\u3002TF-IDF\u7b97\u6cd5\u8fd8\u6709\u4e00\u4e2a\u7f3a\u70b9\u5c31\u662f\u4e0d\u80fd\u53cd\u5e94\u8bcd\u7684\u4f4d\u7f6e\u4fe1\u606f\uff0c \u5728\u5bf9\u5173\u952e\u8bcd\u8fdb\u884c\u63d0\u53d6\u7684\u65f6\u5019\uff0c\u8bcd\u7684\u4f4d\u7f6e\u4fe1\u606f\uff0c\u4f8b\u5982\u6587\u672c\u7684\u6807\u9898\u3001\u6587\u672c\u7684\u9996\u53e5\u548c\u5c3e\u53e5\u7b49\u542b\u6709\u8f83\u91cd\u8981\u7684\u4fe1\u606f\uff0c\u5e94\u8be5\u8d4b\u4e88\u8f83\u9ad8\u7684\u6743\u91cd\u3002 \u57fa\u4e8e\u7edf\u8ba1\u7279\u5f81\u7684\u5173\u952e\u8bcd\u63d0\u53d6\u7b97\u6cd5\u901a\u8fc7\u4e0a\u9762\u7684\u4e00\u4e9b\u7279\u5f81\u91cf\u5316\u6307\u6807\u5c06\u5173\u952e\u8bcd\u8fdb\u884c\u6392\u5e8f\uff0c\u83b7\u53d6TopK\u4e2a\u8bcd\u4f5c\u4e3a\u5173\u952e\u8bcd\u3002 \u57fa\u4e8e\u7edf\u8ba1\u7279\u5f81\u7684\u5173\u952e\u8bcd\u7684\u91cd\u70b9\u5728\u4e8e\u7279\u5f81\u91cf\u5316\u6307\u6807\u7684\u8ba1\u7b97\uff0c\u4e0d\u540c\u7684\u91cf\u5316\u6307\u6807\u5f97\u5230\u7684\u7ed3\u679c\u4e5f\u4e0d\u5c3d\u76f8\u540c\u3002\u540c\u65f6\uff0c\u4e0d\u540c\u7684\u91cf\u5316\u6307\u6807\u4f5c\u4e3a\u4e5f\u6709\u5176\u5404\u81ea\u7684\u4f18\u7f3a\u70b9\uff0c\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u901a\u5e38\u662f\u91c7\u7528\u4e0d\u540c\u7684\u91cf\u5316\u6307\u6807\u76f8\u7ed3\u5408\u7684\u65b9\u5f0f\u5f97\u5230Topk\u4e2a\u8bcd\u4f5c\u4e3a\u5173\u952e\u8bcd\u3002","title":"TF-IDF\u503c"},{"location":"pages/nlp/nlpinfo/keywords-auto-extract/#NO2-\u57fa\u4e8e\u8bcd\u56fe\u6a21\u578b\u7684\u5173\u952e\u8bcd\u62bd\u53d6\u7b97\u6cd5","text":"\u57fa\u4e8e\u8bcd\u56fe\u6a21\u578b\u7684\u5173\u952e\u8bcd\u62bd\u53d6\u9996\u5148\u8981\u6784\u5efa\u6587\u6863\u7684\u8bed\u8a00\u7f51\u7edc\u56fe\uff0c\u7136\u540e\u5bf9\u8bed\u8a00\u8fdb\u884c\u7f51\u7edc\u56fe\u5206\u6790\uff0c\u5728\u8fd9\u4e2a\u56fe\u4e0a\u5bfb\u627e\u5177\u6709\u91cd\u8981\u4f5c\u7528\u7684\u8bcd\u6216\u8005\u77ed\u8bed\uff0c\u8fd9\u4e9b\u77ed\u8bed\u5c31\u662f\u6587\u6863\u7684\u5173\u952e\u8bcd\u3002\u8bed\u8a00\u7f51\u7edc\u56fe\u4e2d\u8282\u70b9\u57fa\u672c\u4e0a\u90fd\u662f\u8bcd\uff0c\u6839\u636e\u8bcd\u7684\u94fe\u63a5\u65b9\u5f0f\u4e0d\u540c\uff0c\u8bed\u8a00\u7f51\u7edc\u7684\u4e3b\u8981\u5f62\u5f0f\u5206\u4e3a\u56db\u79cd\uff1a \u5171\u73b0\u7f51\u7edc\u56fe\u3001\u8bed\u6cd5\u7f51\u7edc\u56fe\u3001\u8bed\u4e49\u7f51\u7edc\u56fe\u548c\u5176\u4ed6\u7f51\u7edc\u56fe\u3002 \u5728\u8bed\u8a00\u7f51\u7edc\u56fe\u7684\u6784\u5efa\u8fc7\u7a0b\u4e2d\uff0c\u90fd\u662f\u4ee5\u9884\u5904\u7406\u8fc7\u540e\u7684\u8bcd\u4f5c\u4e3a\u8282\u70b9\uff0c\u8bcd\u4e0e\u8bcd\u4e4b\u95f4\u7684\u5173\u7cfb\u4f5c\u4e3a\u8fb9\u3002\u8bed\u8a00\u7f51\u7edc\u56fe\u4e2d\uff0c\u8fb9\u4e0e\u8fb9\u4e4b\u95f4\u7684\u6743\u91cd\u4e00\u822c\u7528\u8bcd\u4e4b\u95f4\u7684\u5173\u8054\u5ea6\u6765\u8868\u793a\u3002\u5728\u4f7f\u7528\u8bed\u8a00\u7f51\u7edc\u56fe\u83b7\u5f97\u5173\u952e\u8bcd\u7684\u65f6\u5019\uff0c\u9700\u8981\u8bc4\u4f30\u5404\u4e2a\u8282\u70b9\u7684\u91cd\u8981\u6027\uff0c\u7136\u540e\u6839\u636e\u91cd\u8981\u6027\u5c06\u8282\u70b9\u8fdb\u884c\u6392\u5e8f\uff0c\u9009\u53d6TopK\u4e2a\u8282\u70b9\u6240\u4ee3\u8868\u7684\u8bcd\u4f5c\u4e3a\u5173\u952e\u8bcd\u3002\u8282\u70b9\u7684\u91cd\u8981\u6027\u8ba1\u7b97\u65b9\u6cd5\u6709\u4ee5\u4e0b\u51e0\u79cd\u65b9\u6cd5\u3002","title":"NO.2 \u57fa\u4e8e\u8bcd\u56fe\u6a21\u578b\u7684\u5173\u952e\u8bcd\u62bd\u53d6\u7b97\u6cd5"},{"location":"pages/nlp/nlpinfo/keywords-auto-extract/#1-\u7efc\u5408\u7279\u5f81\u6cd5","text":"\u7efc\u5408\u7279\u5f81\u6cd5\u4e5f\u53eb\u793e\u4f1a\u7f51\u7edc\u4e2d\u5fc3\u6027\u5206\u6790\u65b9\u6cd5\uff0c\u8fd9\u79cd\u65b9\u6cd5\u7684\u6838\u5fc3\u601d\u60f3\u662f\u8282\u70b9\u4e2d\u91cd\u8981\u6027\u7b49\u4e8e\u8282\u70b9\u7684\u663e\u8457\u6027\uff0c\u4ee5\u4e0d\u7834\u574f\u7f51\u7edc\u7684\u6574\u4f53\u6027\u4e3a\u57fa\u7840\u3002\u6b64\u65b9\u6cd5\u5c31\u662f\u4ece\u7f51\u7edc\u7684\u5c40\u90e8\u5c5e\u6027\u548c\u5168\u5c40\u5c5e\u6027\u89d2\u5ea6\u53bb\u5b9a\u91cf\u5206\u6790\u7f51\u7edc\u7ed3\u6784\u7684\u62d3\u6251\u6027\u8d28\uff0c\u5e38\u7528\u7684\u5b9a\u91cf\u8ba1\u7b97\u65b9\u6cd5\u5982\u4e0b\u3002","title":"1 \u7efc\u5408\u7279\u5f81\u6cd5"},{"location":"pages/nlp/nlpinfo/keywords-auto-extract/#\u5ea6","text":"\u8282\u70b9\u7684\u5ea6\u662f\u6307\u4e0e\u8be5\u8282\u70b9\u76f4\u63a5\u5411\u91cf\u7684\u8282\u70b9\u6570\u76ee\uff0c\u8868\u793a\u7684\u662f\u8282\u70b9\u7684\u5c40\u90e8\u5f71\u54cd\u529b\uff0c\u5bf9\u4e8e\u975e\u52a0\u6743\u7f51\u7edc\uff0c\u8282\u70b9\u7684\u5ea6\u4e3a\uff1a \u5bf9\u4e8e\u52a0\u6743\u7f51\u7edc\uff0c\u8282\u70b9\u7684\u5ea6\u53c8\u79f0\u4e3a\u8282\u70b9\u7684\u5f3a\u5ea6\uff0c\u8ba1\u7b97\u516c\u5f0f\u4e3a\uff1a","title":"\u5ea6"},{"location":"pages/nlp/nlpinfo/keywords-auto-extract/#\u63a5\u8fd1\u6027","text":"\u8282\u70b9\u7684\u63a5\u8fd1\u6027\u662f\u6307\u8282\u70b9\u5230\u5176\u4ed6\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u4e4b\u548c\u7684\u5012\u6570\uff0c\u8868\u793a\u7684\u662f\u4fe1\u606f\u4f20\u64ad\u7684\u7d27\u5bc6\u7a0b\u5ea6\uff0c\u5176\u8ba1\u7b97\u516c\u5f0f\u4e3a\uff1a","title":"\u63a5\u8fd1\u6027"},{"location":"pages/nlp/nlpinfo/keywords-auto-extract/#\u7279\u5f81\u5411\u91cf","text":"\u7279\u5f81\u5411\u91cf\u7684\u601d\u60f3\u662f\u8282\u70b9\u7684\u4e2d\u5fc3\u5316\u6d4b\u8bd5\u503c\u7531\u5468\u56f4\u6240\u6709\u8fde\u63a5\u7684\u8282\u70b9\u51b3\u5b9a\uff0c\u5373\u4e00\u4e2a\u8282\u70b9\u7684\u4e2d\u5fc3\u5316\u6307\u6807\u5e94\u8be5\u7b49\u4e8e\u5176\u76f8\u90bb\u8282\u70b9\u7684\u4e2d\u5fc3\u5316\u6307\u6807\u4e4b\u7ebf\u6027\u53e0\u52a0\uff0c\u8868\u793a\u7684\u662f\u901a\u8fc7\u4e0e\u5177\u6709\u9ad8\u5ea6\u503c\u7684\u76f8\u90bb\u8282\u70b9\u6240\u83b7\u5f97\u7684\u95f4\u63a5\u5f71\u54cd\u529b\u3002\u7279\u5f81\u5411\u91cf\u7684\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a","title":"\u7279\u5f81\u5411\u91cf"},{"location":"pages/nlp/nlpinfo/keywords-auto-extract/#\u96c6\u805a\u7cfb\u6570","text":"\u8282\u70b9\u7684\u96c6\u805a\u7cfb\u6570\u662f\u5b83\u7684\u76f8\u90bb\u7684\u8282\u70b9\u4e4b\u95f4\u7684\u8fde\u63a5\u6570\u4e0e\u4ed6\u4eec\u6240\u6709\u53ef\u80fd\u5b58\u5728\u6765\u94fe\u63a5\u7684\u6570\u91cf\u7684\u6bd4\u503c\uff0c\u7528\u6765\u63cf\u8ff0\u56fe\u7684\u9876\u70b9\u4e4b\u95f4\u9636\u7ea7\u6210\u56e2\u7684\u7a0b\u5ea6\u7684\u7cfb\u6570\uff0c\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a","title":"\u96c6\u805a\u7cfb\u6570"},{"location":"pages/nlp/nlpinfo/keywords-auto-extract/#\u5e73\u5747\u6700\u77ed\u8def\u5f84","text":"\u8282\u70b9\u7684\u5e73\u5c40\u6700\u77ed\u8def\u5f84\u4e5f\u53eb\u7d27\u5bc6\u4e2d\u5fc3\u6027\uff0c\u662f\u8282\u70b9\u7684\u6240\u6709\u6700\u77ed\u8def\u5f84\u4e4b\u548c\u7684\u5e73\u5747\u503c\uff0c\u8868\u793a\u7684\u662f\u4e00\u4e2a\u8282\u70b9\u4f20\u64ad\u4fe1\u606f\u65f6\u5bf9\u5176\u4ed6\u8282\u70b9\u7684\u4f9d\u8d56\u7a0b\u5ea6\u3002\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u79bb\u5176\u4ed6\u8282\u70b9\u8d8a\u8fd1\uff0c\u90a3\u4e48\u4ed6\u4f20\u64ad\u4fe1\u606f\u7684\u65f6\u5019\u4e5f\u5c31\u8d8a\u4e0d\u9700\u8981\u4f9d\u8d56\u5176\u4ed6\u4eba\u3002\u4e00\u4e2a\u8282\u70b9\u5230\u7f51\u7edc\u4e2d\u5404\u70b9\u7684\u8ddd\u79bb\u90fd\u5f88\u77ed\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u5c31\u4e0d\u4f1a\u53d7\u5236\u4e8e\u5176\u4ed6\u8282\u70b9\u3002\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a \u56e0\u4e3a\u6bcf\u4e2a\u7b97\u6cd5\u7684\u4fa7\u91cd\u65b9\u5411\u7684\u4e0d\u540c\uff0c\u5728\u5b9e\u9645\u7684\u95ee\u9898\u4e2d\u6240\u9009\u53d6\u7684\u5b9a\u91cf\u5206\u6790\u65b9\u6cd5\u4e5f\u4f1a\u4e0d\u4e00\u6837\u3002\u540c\u65f6\uff0c\u5bf9\u4e8e\u5173\u952e\u8bcd\u63d0\u53d6\u6765\u8bf4\uff0c\u4e5f\u53ef\u4ee5\u548c\u4e0a\u4e00\u8282\u6240\u63d0\u51fa\u7684\u7edf\u8ba1\u6cd5\u5f97\u5230\u7684\u8bcd\u7684\u6743\u91cd\uff0c\u4f8b\u5982\u8bcd\u6027\u7b49\u76f8\u7ed3\u5408\u6784\u5efa\u8bcd\u642d\u914d\u7f51\u7edc\uff0c\u7136\u540e\u5229\u7528\u4e0a\u8ff0\u65b9\u6cd5\u5f97\u5230\u5173\u952e\u8bcd\u3002","title":"\u5e73\u5747\u6700\u77ed\u8def\u5f84"},{"location":"pages/nlp/nlpinfo/keywords-auto-extract/#2-\u7cfb\u7edf\u79d1\u5b66\u6cd5","text":"\u7cfb\u7edf\u79d1\u5b66\u6cd5\u8fdb\u884c\u4e2d\u5fc3\u6027\u5206\u6790\u7684\u601d\u60f3\u662f\u8282\u70b9\u91cd\u8981\u6027\u7b49\u4e8e\u8fd9\u4e2a\u8282\u70b9\u88ab\u5220\u9664\u540e\u5bf9\u4e8e\u6574\u4e2a\u8bed\u8a00\u7f51\u7edc\u56fe\u7684\u7834\u574f\u7a0b\u5ea6\u3002\u91cd\u8981\u7684\u8282\u70b9\u88ab\u5220\u9664\u540e\u4f1a\u5bf9\u7f51\u7edc\u7684\u5443\u8fde\u901a\u6027\u7b49\u4ea7\u751f\u53d8\u5316\u3002\u5982\u679c\u6211\u4eec\u5728\u7f51\u7edc\u56fe\u4e2d\u5220\u9664\u67d0\u4e00\u4e2a\u8282\u70b9\uff0c\u56fe\u7684\u67d0\u4e9b\u6307\u5b9a\u7279\u6027\u4ea7\u751f\u4e86\u6539\u53d8\uff0c\u53ef\u4ee5\u6839\u636e\u7279\u6027\u6539\u53d8\u7684\u5927\u5c0f\u83b7\u5f97\u8282\u70b9\u7684\u91cd\u8981\u6027\uff0c\u4ece\u800c\u5bf9\u8282\u70b9\u8fdb\u884c\u7b5b\u9009\u3002","title":"2 \u7cfb\u7edf\u79d1\u5b66\u6cd5"},{"location":"pages/nlp/nlpinfo/keywords-auto-extract/#3-\u968f\u673a\u6e38\u8d70\u6cd5","text":"\u968f\u673a\u6e38\u8d70\u7b97\u6cd5\u65f6\u7f51\u7edc\u56fe\u4e2d\u4e00\u4e2a\u975e\u5e38\u8457\u540d\u7684\u7b97\u6cd5\uff0c\u5b83\u4ece\u7ed9\u5b9a\u56fe\u548c\u51fa\u53d1\u70b9\uff0c\u968f\u673a\u5730\u9009\u62e9\u90bb\u5c45\u8282\u70b9\u79fb\u52a8\u5230\u90bb\u5c45\u8282\u70b9\u4e0a\uff0c\u7136\u540e\u518d\u628a\u73b0\u5728\u7684\u8282\u70b9\u4f5c\u4e3a\u51fa\u53d1\u70b9\uff0c\u8fed\u4ee3\u4e0a\u8ff0\u8fc7\u7a0b\u3002 \u968f\u673a\u6e38\u8d70\u7b97\u6cd5\u4e00\u4e2a\u5f88\u51fa\u540d\u7684\u5e94\u7528\u662f\u5927\u540d\u9f0e\u9f0e\u7684PageRank\u7b97\u6cd5\uff0cPageRank\u7b97\u6cd5\u662f\u6574\u4e2agoogle\u641c\u7d22\u7684\u6838\u5fc3\u7b97\u6cd5\uff0c\u662f\u4e00\u79cd\u901a\u8fc7\u7f51\u9875\u4e4b\u95f4\u7684\u8d85\u94fe\u63a5\u6765\u8ba1\u7b97\u7f51\u9875\u91cd\u8981\u6027\u7684\u6280\u672f\uff0c\u5176\u5173\u952e\u7684\u601d\u60f3\u662f\u91cd\u8981\u6027\u4f20\u9012\u3002 \u5728\u5173\u952e\u8bcd\u63d0\u53d6\u9886\u57df\uff0c Mihalcea \u7b49\u4eba\u6240\u63d0\u51fa\u7684TextRank\u7b97\u6cd5\u5c31\u662f\u5728\u6587\u672c\u5173\u952e\u8bcd\u63d0\u53d6\u9886\u57df\u501f\u9274\u4e86\u8fd9\u79cd\u601d\u60f3\u3002 PageRank\u7b97\u6cd5\u5c06\u6574\u4e2a\u4e92\u8054\u7f51\u770b\u4f5c\u4e00\u5f20\u6709\u5411\u56fe\uff0c\u7f51\u9875\u662f\u56fe\u4e2d\u7684\u8282\u70b9\uff0c\u800c\u7f51\u9875\u4e4b\u95f4\u7684\u94fe\u63a5\u5c31\u662f\u56fe\u4e2d\u7684\u8fb9\u3002\u6839\u636e\u91cd\u8981\u6027\u4f20\u9012\u7684\u601d\u60f3\uff0c\u5982\u679c\u4e00\u4e2a\u5927\u578b\u7f51\u7ad9A\u542b\u6709\u4e00\u4e2a\u8d85\u94fe\u63a5\u6307\u5411\u4e86\u7f51\u9875B\uff0c\u90a3\u4e48\u7f51\u9875B\u7684\u91cd\u8981\u6027\u6392\u540d\u4f1a\u6839\u636eA\u7684\u91cd\u8981\u6027\u6765\u63d0\u5347\u3002\u7f51\u9875\u91cd\u8981\u6027\u7684\u4f20\u9012\u601d\u60f3\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u56fe 2 PageRank\u7b80\u5355\u63cf\u8ff0\uff08\u6765\u81eaPageRank\u8bba\u6587\uff09 \u5728PageRank\u7b97\u6cd5\u4e2d\uff0c\u6700\u4e3b\u8981\u7684\u662f\u5bf9\u4e8e\u521d\u59cb\u7f51\u9875\u91cd\u8981\u6027\uff08PR\u503c\uff09\u7684\u8ba1\u7b97\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u4e0a\u56fe\u4e2d\u7684\u7f51\u9875A\u7684\u91cd\u8981\u6027\u6211\u4eec\u662f\u65e0\u6cd5\u9884\u77e5\u7684\u3002\u4f46\u662f\uff0c\u5728\u539f\u59cb\u8bba\u6587\u4e2d\u7ed9\u51fa\u4e86\u4e00\u79cd\u8fed\u4ee3\u65b9\u6cd5\u6c42\u51fa\u8fd9\u4e2a\u91cd\u8981\u6027\uff0c\u8bba\u6587\u4e2d\u6307\u51fa\uff0c\u5e42\u6cd5\u6c42\u77e9\u9635\u7279\u5f81\u503c\u4e0e\u77e9\u9635\u7684\u521d\u59cb\u503c\u65e0\u5173\u3002\u90a3\u4e48\uff0c\u5c31\u53ef\u4ee5\u4e3a\u6bcf\u4e2a\u7f51\u9875\u968f\u673a\u7ed9\u4e00\u4e2a\u521d\u59cb\u503c\uff0c\u7136\u540e\u8fed\u4ee3\u5f97\u5230\u6536\u655b\u503c\uff0c\u5e76\u4e14\u6536\u655b\u503c\u4e0e\u521d\u59cb\u503c\u65e0\u5173\u3002 PageRank\u6c42\u7f51\u9875i\u7684PR\u503c\u8ba1\u7b97\u5982\u4e0b\uff1a \u5176\u4e2d\uff0cd\u4e3a\u963b\u5c3c\u7cfb\u6570\uff0c\u901a\u5e38\u4e3a0.85\u3002 \u662f\u6307\u5411\u7f51\u9875 i \u7684\u7f51\u9875\u96c6\u5408\u3002 \u662f\u6307\u7f51\u9875j\u4e2d\u7684\u94fe\u63a5\u6307\u5411\u7684\u96c6\u5408\uff0c \u662f\u6307\u96c6\u5408\u4e2d\u5143\u7d20\u7684\u4e2a\u6570\u3002 TextRank\u5728\u6784\u5efa\u56fe\u7684\u65f6\u5019\u5c06\u8282\u70b9\u7531\u7f51\u9875\u6539\u6210\u4e86\u53e5\u5b50\uff0c\u5e76\u4e3a\u8282\u70b9\u4e4b\u95f4\u7684\u8fb9\u5f15\u5165\u4e86\u6743\u503c\uff0c\u5176\u4e2d\u6743\u503c\u8868\u793a\u4e24\u4e2a\u53e5\u5b50\u7684\u76f8\u4f3c\u7a0b\u5ea6\u3002\u5176\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a \u516c\u5f0f\u4e2d\u7684 \u4e3a\u56fe\u4e2d\u8282\u70b9 \u548c\u7684\u8fb9 \u7684\u6743\u91cd\u3002\u5176\u4ed6\u7b26\u53f7\u4e0ePageRank\u516c\u5f0f\u76f8\u540c\u3002 TextRank\u7b97\u6cd5\u9664\u4e86\u505a\u6587\u672c\u5173\u952e\u8bcd\u63d0\u53d6\uff0c\u8fd8\u53ef\u4ee5\u505a\u6587\u672c\u6458\u8981\u63d0\u53d6\uff0c\u6548\u679c\u4e0d\u9519\u3002\u4f46\u662fTextRank\u7684\u8ba1\u7b97\u590d\u6742\u5ea6\u5f88\u9ad8\uff0c\u5e94\u7528\u4e0d\u5e7f\u3002","title":"3 \u968f\u673a\u6e38\u8d70\u6cd5"},{"location":"pages/nlp/nlpinfo/keywords-auto-extract/#NO3-\u57fa\u4e8e\u4e3b\u9898\u6a21\u578b\u7684\u5173\u952e\u8bcd\u62bd\u53d6","text":"\u57fa\u4e8e\u4e3b\u9898\u5173\u952e\u8bcd\u63d0\u53d6\u7b97\u6cd5\u4e3b\u8981\u5229\u7528\u7684\u662f\u4e3b\u9898\u6a21\u578b\u4e2d\u5173\u4e8e\u4e3b\u9898\u7684\u5206\u5e03\u7684\u6027\u8d28\u8fdb\u884c\u5173\u952e\u8bcd\u63d0\u53d6\u3002\u7b97\u6cd5\u6b65\u9aa4\u5982\u4e0b\uff1a","title":"NO.3 \u57fa\u4e8e\u4e3b\u9898\u6a21\u578b\u7684\u5173\u952e\u8bcd\u62bd\u53d6"},{"location":"pages/nlp/nlpinfo/keywords-auto-extract/#1-\u83b7\u53d6\u5019\u9009\u5173\u952e\u8bcd","text":"\u4ece\u6587\u7ae0\u4e2d\u83b7\u53d6\u5019\u9009\u5173\u952e\u8bcd\u3002\u5373\u5c06\u6587\u672c\u5206\u8bcd\uff0c\u4e5f\u53ef\u4ee5\u518d\u6839\u636e\u8bcd\u6027\u9009\u53d6\u5019\u9009\u5173\u952e\u8bcd\u3002","title":"1 \u83b7\u53d6\u5019\u9009\u5173\u952e\u8bcd"},{"location":"pages/nlp/nlpinfo/keywords-auto-extract/#2-\u8bed\u6599\u5b66\u4e60","text":"\u6839\u636e\u5927\u89c4\u6a21\u9884\u6599\u5b66\u4e60\u5f97\u5230\u4e3b\u9898\u6a21\u578b\u3002","title":"2 \u8bed\u6599\u5b66\u4e60"},{"location":"pages/nlp/nlpinfo/keywords-auto-extract/#3-\u8ba1\u7b97\u6587\u7ae0\u4e3b\u9898\u5206\u90e8","text":"\u6839\u636e\u5f97\u5230\u7684\u9690\u542b\u4e3b\u9898\u6a21\u578b\uff0c\u8ba1\u7b97\u6587\u7ae0\u7684\u4e3b\u9898\u5206\u5e03\u548c\u5019\u9009\u5173\u952e\u8bcd\u5206\u5e03\u3002","title":"3 \u8ba1\u7b97\u6587\u7ae0\u4e3b\u9898\u5206\u90e8"},{"location":"pages/nlp/nlpinfo/keywords-auto-extract/#4-\u6392\u5e8f","text":"\u8ba1\u7b97\u6587\u6863\u548c\u5019\u9009\u5173\u952e\u8bcd\u7684\u4e3b\u9898\u76f8\u4f3c\u5ea6\u5e76\u6392\u5e8f\uff0c\u9009\u53d6\u524dn\u4e2a\u8bcd\u4f5c\u4e3a\u5173\u952e\u8bcd\u3002 \u7b97\u6cd5\u7684\u5173\u952e\u5728\u4e8e\u4e3b\u9898\u6a21\u578b\u7684\u6784\u5efa\u3002 \u4e3b\u9898\u6a21\u578b\u662f\u4e00\u79cd\u6587\u6863\u751f\u6210\u6a21\u578b\uff0c\u5bf9\u4e8e\u4e00\u7bc7\u6587\u7ae0\uff0c\u6211\u4eec\u7684\u6784\u601d\u601d\u8def\u662f\u5148\u786e\u5b9a\u51e0\u4e2a\u4e3b\u9898\uff0c\u7136\u540e\u6839\u636e\u4e3b\u9898\u60f3\u597d\u63cf\u8ff0\u4e3b\u9898\u7684\u8bcd\u6c47\uff0c\u5c06\u8bcd\u6c47\u6309\u7167\u8bed\u6cd5\u89c4\u5219\u7ec4\u6210\u53e5\u5b50\uff0c\u6bb5\u843d\uff0c\u6700\u540e\u751f\u6210\u4e00\u7bc7\u6587\u7ae0\u3002 \u4e3b\u9898\u6a21\u578b\u4e5f\u662f\u57fa\u4e8e\u8fd9\u4e2a\u601d\u60f3\uff0c\u5b83\u8ba4\u4e3a\u6587\u6863\u662f\u4e00\u4e9b\u4e3b\u9898\u7684\u6df7\u5408\u5206\u5e03\uff0c\u4e3b\u9898\u53c8\u662f\u8bcd\u8bed\u7684\u6982\u7387\u5206\u5e03\uff0cpLSA\u6a21\u578b\u5c31\u662f\u7b2c\u4e00\u4e2a\u6839\u636e\u8fd9\u4e2a\u60f3\u6cd5\u6784\u5efa\u7684\u6a21\u578b\u3002\u540c\u6837\u5730\uff0c\u6211\u4eec\u53cd\u8fc7\u6765\u60f3\uff0c\u6211\u4eec\u627e\u5230\u4e86\u6587\u6863\u7684\u4e3b\u9898\uff0c\u7136\u540e\u4e3b\u9898\u4e2d\u6709\u4ee3\u8868\u6027\u7684\u8bcd\u5c31\u80fd\u8868\u793a\u8fd9\u7bc7\u6587\u6863\u7684\u6838\u5fc3\u610f\u601d\uff0c\u5c31\u662f\u6587\u6863\u7684\u5173\u952e\u8bcd\u3002 pLSA\u6a21\u578b\u8ba4\u4e3a\uff0c\u4e00\u7bc7\u6587\u6863\u4e2d\u7684\u6bcf\u4e00\u4e2a\u8bcd\u90fd\u662f\u901a\u8fc7\u4e00\u5b9a\u6982\u7387\u9009\u53d6\u67d0\u4e2a\u4e3b\u9898\uff0c\u7136\u540e\u518d\u6309\u7167\u4e00\u5b9a\u7684\u6982\u7387\u4ece\u4e3b\u9898\u4e2d\u9009\u53d6\u5f97\u5230\u8fd9\u4e2a\u8bcd\u8bed\uff0c\u8fd9\u4e2a\u8bcd\u8bed\u7684\u8ba1\u7b97\u516c\u5f0f\u4e3a\uff1a \u4e00\u4e9b\u8d1d\u53f6\u65af\u5b66\u6d3e\u7684\u7814\u7a76\u8005\u5bf9\u4e8epLSA\u6a21\u578b\u8fdb\u884c\u4e86\u6539\u8fdb\uff0c\u4ed6\u4eec\u8ba4\u4e3a\uff0c\u6587\u7ae0\u5bf9\u5e94\u4e3b\u9898\u7684\u6982\u7387\u4ee5\u53ca\u4e3b\u9898\u5bf9\u5e94\u8bcd\u8bed\u7684\u6982\u7387\u4e0d\u662f\u4e00\u5b9a\u7684\uff0c\u4e5f\u670d\u4ece\u4e00\u5b9a\u7684\u6982\u7387\uff0c\u4e8e\u662f\u5c31\u6709\u4e86\u73b0\u9636\u6bb5\u5e38\u7528\u7684\u4e3b\u9898\u6a21\u578b--LDA\u4e3b\u9898\u6a21\u578b\u3002 LDA\u662fD.M.Blei\u57282003\u5e74\u63d0\u51fa\u7684\u3002LDA\u91c7\u7528\u4e86\u8bcd\u888b\u6a21\u578b\u7684\u65b9\u6cd5\u7b80\u5316\u4e86\u95ee\u9898\u7684\u590d\u6742\u6027\u3002\u5728LDA\u6a21\u578b\u4e2d\uff0c\u6bcf\u4e00\u7bc7\u6587\u6863\u662f\u4e00\u4e9b\u4e3b\u9898\u7684\u6784\u6210\u7684\u6982\u7387\u5206\u5e03\uff0c\u800c\u6bcf\u4e00\u4e2a\u4e3b\u9898\u53c8\u662f\u5f88\u591a\u5355\u8bcd\u6784\u6210\u7684\u4e00\u4e2a\u6982\u7387\u5206\u5e03\u3002\u540c\u65f6\uff0c\u65e0\u8bba\u662f\u4e3b\u9898\u6784\u6210\u7684\u6982\u7387\u5206\u5e03\u8fd8\u662f\u5355\u8bcd\u6784\u6210\u7684\u6982\u7387\u5206\u5e03\u4e5f\u4e0d\u662f\u4e00\u5b9a\u7684\uff0c\u8fd9\u4e9b\u5206\u5e03\u4e5f\u670d\u4eceDirichlet \u5148\u9a8c\u5206\u5e03\u3002 \u6587\u6863\u7684\u751f\u6210\u6a21\u578b\u53ef\u4ee5\u7528\u5982\u4e0b\u56fe\u6a21\u578b\u8868\u793a\uff1a \u5176\u4e2d \u548c \u4e3a\u5148\u9a8c\u5206\u5e03\u7684\u8d85\u53c2\u6570\uff0c \u4e3a\u7b2ck\u4e2a\u4e3b\u9898\u4e0b\u7684\u6240\u6709\u5355\u8bcd\u7684\u5206\u5e03\uff0c \u4e3a\u6587\u6863\u7684\u4e3b\u9898\u5206\u5e03\uff0cw\u4e3a\u6587\u6863\u7684\u8bcd\uff0cz\u4e3aw\u6240\u5bf9\u5e94\u7684\u4e3b\u9898\u3002 \u56fe 3 Blei\u5728\u8bba\u6587\u4e2d\u7684\u56fe\u6a21\u578b DA\u6316\u6398\u4e86\u6587\u672c\u7684\u6df1\u5c42\u8bed\u4e49\u5373\u6587\u672c\u7684\u4e3b\u9898\uff0c\u7528\u6587\u672c\u7684\u4e3b\u9898\u6765\u8868\u793a\u6587\u672c\u7684\u4e5f\u4ece\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u964d\u4f4e\u4e86\u6587\u672c\u5411\u91cf\u7684\u7ef4\u5ea6\uff0c\u5f88\u591a\u4eba\u7528\u8fd9\u79cd\u65b9\u5f0f\u5bf9\u6587\u672c\u505a\u5206\u7c7b\uff0c\u53d6\u5f97\u4e86\u4e0d\u9519\u7684\u6548\u679c\u3002 LDA\u5173\u952e\u8bcd\u63d0\u53d6\u7b97\u6cd5\u5229\u7528\u6587\u6863\u7684\u9690\u542b\u8bed\u4e49\u4fe1\u606f\u6765\u63d0\u53d6\u5173\u952e\u8bcd\uff0c\u4f46\u662f\u4e3b\u9898\u6a21\u578b\u63d0\u53d6\u7684\u5173\u952e\u8bcd\u6bd4\u8f83\u5bbd\u6cdb\uff0c\u4e0d\u80fd\u5f88\u597d\u7684\u53cd\u5e94\u6587\u6863\u4e3b\u9898\u3002\u53e6\u5916\uff0c\u5bf9\u4e8eLDA\u6a21\u578b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u8f83\u9ad8\uff0c\u9700\u8981\u5927\u91cf\u7684\u5b9e\u8df5\u8bad\u7ec3\u3002","title":"4 \u6392\u5e8f"},{"location":"pages/nlp/nlpinfo/keywords-auto-extract/#NO4-\u5e94\u7528","text":"\u73b0\u9636\u6bb5\uff0c\u6587\u672c\u7684\u5173\u952e\u8bcd\u63d0\u53d6\u5728\u57fa\u4e8e\u6587\u672c\u7684\u641c\u7d22\u3001\u63a8\u8350\u4ee5\u53ca\u6570\u636e\u6316\u6398\u9886\u57df\u6709\u7740\u5f88\u5e7f\u6cdb\u7684\u5e94\u7528\u3002\u540c\u65f6\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u56e0\u4e3a\u5e94\u7528\u73af\u5883\u7684\u590d\u6742\u6027\uff0c\u5bf9\u4e8e\u4e0d\u540c\u7c7b\u578b\u7684\u6587\u672c\uff0c\u4f8b\u5982\u957f\u6587\u672c\u548c\u77ed\u6587\u672c\uff0c\u7528\u540c\u4e00\u79cd\u6587\u672c\u5173\u952e\u8bcd\u63d0\u53d6\u65b9\u6cd5\u5f97\u5230\u7684\u6548\u679c\u5e76\u76f8\u540c\u3002\u56e0\u6b64\uff0c\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u9488\u5bf9\u4e0d\u540c\u7684\u6761\u4ef6\u73af\u5883\u6240\u91c7\u7528\u7684\u7b97\u6cd5\u4f1a\u6709\u6240\u4e0d\u540c\uff0c\u6ca1\u6709\u67d0\u4e00\u7c7b\u7b97\u6cd5\u5728\u6240\u6709\u7684\u73af\u5883\u4e0b\u90fd\u6709\u5f88\u597d\u7684\u6548\u679c\u3002 \u76f8\u5bf9\u4e8e\u4e0a\u6587\u4e2d\u6240\u63d0\u5230\u7684\u7b97\u6cd5\uff0c\u4e00\u4e9b\u7ec4\u5408\u7b97\u6cd5\u5728\u5de5\u7a0b\u4e0a\u88ab\u5927\u91cf\u5e94\u7528\u4ee5\u5f25\u8865\u5355\u7b97\u6cd5\u7684\u4e0d\u8db3\uff0c\u4f8b\u5982\u5c06TF-IDF\u7b97\u6cd5\u4e0eTextRank\u7b97\u6cd5\u76f8\u7ed3\u5408\uff0c\u6216\u8005\u7efc\u5408TF-IDF\u4e0e\u8bcd\u6027\u5f97\u5230\u5173\u952e\u8bcd\u7b49\u3002\u540c\u65f6\uff0c\u5de5\u7a0b\u4e0a\u5bf9\u4e8e\u6587\u672c\u7684\u9884\u5904\u7406\u4ee5\u53ca\u6587\u672c\u5206\u8bcd\u7684\u51c6\u786e\u6027\u4e5f\u6709\u5f88\u5927\u7684\u4f9d\u8d56\u3002\u5bf9\u4e8e\u6587\u672c\u7684\u9519\u522b\u5b57\uff0c\u53d8\u5f62\u8bcd\u7b49\u4fe1\u606f\uff0c\u9700\u8981\u5728\u9884\u5904\u7406\u9636\u6bb5\u4e88\u4ee5\u89e3\u51b3\uff0c\u5206\u8bcd\u7b97\u6cd5\u7684\u9009\u62e9\uff0c\u672a\u767b\u5f55\u8bcd\u4ee5\u53ca\u6b67\u4e49\u8bcd\u7684\u8bc6\u522b\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u5bf9\u4e8e\u5173\u952e\u8bcd\u7a81\u63d0\u53d6\u4f1a\u53c8\u5f88\u5927\u7684\u5f71\u54cd\u3002 \u76f8\u5173\u9605\u8bfb\uff1a \u81ea\u7136\u8bed\u8a00\u5904\u7406\u7cfb\u5217\u7bc7\u2014\u2014\u5206\u5e03\u5f0f\u722c\u866b\u4e4bWebKit","title":"NO.4 \u5e94\u7528"},{"location":"pages/nlp/nlpinfo/keywords-auto-extract/#\u53c2\u8003\u6587\u732e","text":"[1] TextRank\u7b97\u6cd5\u63d0\u53d6\u5173\u952e\u8bcd\u548c\u6458\u8981http://xiaosheng.me/2017/04/08/article49/ [2] Page L, Brin S, Motwani R,et al. The PageRank citation ranking: Bringing order to the web[R]. StanfordInfoLab, 1999. [3] \u5218\u77e5\u8fdc. \u57fa\u4e8e\u6587\u6863\u4e3b\u9898\u7ed3\u6784\u7684\u5173\u952e\u8bcd\u62bd\u53d6\u65b9\u6cd5\u7814\u7a76[D]. \u5317\u4eac: \u6e05\u534e\u5927\u5b66, 2011. [4] tf-idf\uff0c https://zh.wikipedia.org/zh-hans/Tf-idf [5] \u4e00\u6587\u8be6\u89e3\u673a\u5668\u9886\u57df\u7684LDA\u4e3b\u9898\u6a21\u578b https://zhuanlan.zhihu.com/p/31470216 [6] Blei D M, Ng A Y, Jordan MI. Latent dirichlet allocation[J]. Journal of machine Learning research, 2003,3(Jan): 993-1022. [7] \u8d75\u4eac\u80dc, \u6731\u5de7\u660e, \u5468\u56fd\u680b, \u7b49. \u81ea\u52a8\u5173\u952e\u8bcd\u62bd\u53d6\u7814\u7a76\u7efc\u8ff0[J]. \u8f6f\u4ef6\u5b66\u62a5, 2017,28(9): 2431-2449. [8] \u5218\u77e5\u8fdc. \u57fa\u4e8e\u6587\u6863\u4e3b\u9898\u7ed3\u6784\u7684\u5173\u952e\u8bcd\u62bd\u53d6\u65b9\u6cd5\u7814\u7a76[D]. \u5317\u4eac: \u6e05\u534e\u5927\u5b66, 2011. [9] Berger A L, Pietra VJ D, Pietra S A D. A maximum entropy approach to natural languageprocessing[J]. Computational linguistics, 1996, 22(1): 39-71. [10] Blei D M, Ng A Y,Jordan M I. Latent dirichlet allocation[J]. the Journal of machine Learning research,2003, 3: 993-1022. \u51e1\u672c\u7f51\u6ce8\u660e\"\u6765\u6e90\uff1aXXX \"\u7684\u6587/\u56fe/\u89c6\u9891\u7b49\u7a3f\u4ef6\uff0c\u672c\u7f51\u8f6c\u8f7d\u51fa\u4e8e\u4f20\u9012\u66f4\u591a\u4fe1\u606f\u4e4b\u76ee\u7684\uff0c\u5e76\u4e0d\u610f\u5473\u7740\u8d5e\u540c\u5176\u89c2\u70b9\u6216\u8bc1\u5b9e\u5176\u5185\u5bb9\u7684\u771f\u5b9e\u6027\u3002\u5982\u6d89\u53ca\u4f5c\u54c1\u5185\u5bb9\u3001\u7248\u6743\u548c\u5176\u5b83\u95ee\u9898\uff0c\u8bf7\u4e0e\u672c\u7f51\u8054\u7cfb\uff0c\u6211\u4eec\u5c06\u5728\u7b2c\u4e00\u65f6\u95f4\u5220\u9664\u5185\u5bb9\uff01 \u4f5c\u8005: \u6765\u6e90\uff1a https://zhuanlan.zhihu.com/p/25889937","title":"\u53c2\u8003\u6587\u732e"},{"location":"pages/nlp/nlpinfo/keywords_extract/","text":"\u5982\u4f55\u505a\u597d\u6587\u672c\u5173\u952e\u8bcd\u63d0\u53d6\uff1f\u4ece\u4e09\u79cd\u7b97\u6cd5\u8bf4\u8d77 \u00b6 \u5728\u81ea\u7136\u8bed\u8a00\u5904\u7406\u9886\u57df\uff0c\u5904\u7406\u6d77\u91cf\u7684\u6587\u672c\u6587\u4ef6\u6700\u5173\u952e\u7684\u662f\u8981\u628a\u7528\u6237\u6700\u5173\u5fc3\u7684\u95ee\u9898\u63d0\u53d6\u51fa\u6765\u3002 \u800c\u65e0\u8bba\u662f\u5bf9\u4e8e\u957f\u6587\u672c\u8fd8\u662f\u77ed\u6587\u672c\uff0c\u5f80\u5f80\u53ef\u4ee5\u901a\u8fc7\u51e0\u4e2a\u5173\u952e\u8bcd\u7aa5\u63a2\u6574\u4e2a\u6587\u672c\u7684\u4e3b\u9898\u601d\u60f3\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u4e0d\u7ba1\u662f\u57fa\u4e8e\u6587\u672c\u7684\u63a8\u8350\u8fd8\u662f\u57fa\u4e8e\u6587\u672c\u7684\u641c\u7d22\uff0c\u5bf9\u4e8e\u6587\u672c\u5173\u952e\u8bcd\u7684\u4f9d\u8d56\u4e5f\u5f88\u5927\uff0c\u5173\u952e\u8bcd\u63d0\u53d6\u7684\u51c6\u786e\u7a0b\u5ea6\u76f4\u63a5\u5173\u7cfb\u5230\u63a8\u8350\u7cfb\u7edf\u6216\u8005\u641c\u7d22\u7cfb\u7edf\u7684\u6700\u7ec8\u6548\u679c\u3002\u56e0\u6b64\uff0c\u5173\u952e\u8bcd\u63d0\u53d6\u5728\u6587\u672c\u6316\u6398\u9886\u57df\u662f\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u90e8\u5206\u3002 \u5173\u4e8e\u6587\u672c\u7684\u5173\u952e\u8bcd\u63d0\u53d6\u65b9\u6cd5\u5206\u4e3a\u6709\u76d1\u7763\u3001\u534a\u76d1\u7763\u548c\u65e0\u76d1\u7763\u4e09\u79cd\uff1a 1 \u6709\u76d1\u7763\u7684\u5173\u952e\u8bcd\u62bd\u53d6\u7b97\u6cd5 \u5b83\u662f\u5efa\u5173\u952e\u8bcd\u62bd\u53d6\u7b97\u6cd5\u770b\u4f5c\u662f\u4e8c\u5206\u7c7b\u95ee\u9898\uff0c\u5224\u65ad\u6587\u6863\u4e2d\u7684\u8bcd\u6216\u8005\u77ed\u8bed\u662f\u6216\u8005\u4e0d\u662f\u5173\u952e\u8bcd\u3002\u65e2\u7136\u662f\u5206\u7c7b\u95ee\u9898\uff0c\u5c31\u9700\u8981\u63d0\u4f9b\u5df2\u7ecf\u6807\u6ce8\u597d\u7684\u8bad\u7ec3\u8bed\u6599\uff0c\u5229\u7528\u8bad\u7ec3\u8bed\u6599\u8bad\u7ec3\u5173\u952e\u8bcd\u63d0\u53d6\u6a21\u578b\uff0c\u6839\u636e\u6a21\u578b\u5bf9\u9700\u8981\u62bd\u53d6\u5173\u952e\u8bcd\u7684\u6587\u6863\u8fdb\u884c\u5173\u952e\u8bcd\u62bd\u53d6 2 \u534a\u76d1\u7763\u7684\u5173\u952e\u8bcd\u63d0\u53d6\u7b97\u6cd5 \u00b6 \u53ea\u9700\u8981\u5c11\u91cf\u7684\u8bad\u7ec3\u6570\u636e\uff0c\u5229\u7528\u8fd9\u4e9b\u8bad\u7ec3\u6570\u636e\u6784\u5efa\u5173\u952e\u8bcd\u62bd\u53d6\u6a21\u578b\uff0c\u7136\u540e\u4f7f\u7528\u6a21\u578b\u5bf9\u65b0\u7684\u6587\u672c\u8fdb\u884c\u5173\u952e\u8bcd\u63d0\u53d6\uff0c\u5bf9\u4e8e\u8fd9\u4e9b\u5173\u952e\u8bcd\u8fdb\u884c\u4eba\u5de5\u8fc7\u6ee4\uff0c\u5c06\u8fc7\u6ee4\u5f97\u5230\u7684\u5173\u952e\u8bcd\u52a0\u5165\u8bad\u7ec3\u96c6\uff0c\u91cd\u65b0\u8bad\u7ec3\u6a21\u578b\u3002 3 \u65e0\u76d1\u7763\u7684\u65b9\u6cd5 \u00b6 \u4e0d\u9700\u8981\u4eba\u5de5\u6807\u6ce8\u7684\u8bed\u6599\uff0c\u5229\u7528\u67d0\u4e9b\u65b9\u6cd5\u53d1\u73b0\u6587\u672c\u4e2d\u6bd4\u8f83\u91cd\u8981\u7684\u8bcd\u4f5c\u4e3a\u5173\u952e\u8bcd\uff0c\u8fdb\u884c\u5173\u952e\u8bcd\u62bd\u53d6\u3002 \u6709\u76d1\u7763\u7684\u6587\u672c\u5173\u952e\u8bcd\u63d0\u53d6\u7b97\u6cd5\u9700\u8981\u9ad8\u6602\u7684\u4eba\u5de5\u6210\u672c\uff0c\u56e0\u6b64\u73b0\u6709\u7684\u6587\u672c\u5173\u952e\u8bcd\u63d0\u53d6\u4e3b\u8981\u91c7\u7528\u9002\u7528\u6027\u8f83\u5f3a\u7684\u65e0\u76d1\u7763\u5173\u952e\u8bcd\u62bd\u53d6\u3002 \u5176\u6587\u672c\u5173\u952e\u8bcd\u62bd\u53d6\u6d41\u7a0b\u5982\u4e0b\uff1a \u56fe 1 \u65e0\u76d1\u7763\u6587\u672c\u5173\u952e\u8bcd\u62bd\u53d6\u6d41\u7a0b\u56fe \u65e0\u76d1\u7763\u5173\u952e\u8bcd\u62bd\u53d6\u7b97\u6cd5\u53ef\u4ee5\u5206\u4e3a\u4e09\u5927\u7c7b\uff0c\u57fa\u4e8e\u7edf\u8ba1\u7279\u5f81\u7684\u5173\u952e\u8bcd\u62bd\u53d6\u3001\u57fa\u4e8e\u8bcd\u56fe\u6a21\u578b\u7684\u5173\u952e\u8bcd\u62bd\u53d6\u548c\u57fa\u4e8e\u4e3b\u9898\u6a21\u578b\u7684\u5173\u952e\u8bcd\u62bd\u53d6\u3002 NO.1 \u57fa\u4e8e\u7edf\u8ba1\u7279\u5f81\u7684\u5173\u952e\u8bcd\u63d0\u53d6\u7b97\u6cd5 \u00b6 \u57fa\u4e8e\u4e8e\u7edf\u8ba1\u7279\u5f81\u7684\u5173\u952e\u8bcd\u62bd\u53d6\u7b97\u6cd5\u7684\u601d\u60f3\u662f \u5229\u7528\u6587\u6863\u4e2d\u8bcd\u8bed\u7684\u7edf\u8ba1\u4fe1\u606f\u62bd\u53d6\u6587\u6863\u7684\u5173\u952e\u8bcd\u3002 \u901a\u5e38\u5c06\u6587\u672c\u7ecf\u8fc7\u9884\u5904\u7406\u5f97\u5230\u5019\u9009\u8bcd\u8bed\u7684\u96c6\u5408\uff0c\u7136\u540e\u91c7\u7528\u7279\u5f81\u503c\u91cf\u5316\u7684\u65b9\u5f0f\u4ece\u5019\u9009\u96c6\u5408\u4e2d\u5f97\u5230\u5173\u952e\u8bcd\u3002\u57fa\u4e8e\u7edf\u8ba1\u7279\u5f81\u7684\u5173\u952e\u8bcd\u62bd\u53d6\u65b9\u6cd5\u7684\u5173\u952e\u662f\u91c7\u7528\u4ec0\u4e48\u6837\u7684\u7279\u5f81\u503c\u91cf\u5316\u6307\u6807\u7684\u65b9\u5f0f\uff0c\u76ee\u524d\u5e38\u7528\u7684\u6709\u4e09\u7c7b\uff1a 1 \u57fa\u4e8e\u8bcd\u6743\u91cd\u7684\u7279\u5f81\u91cf\u5316 \u57fa\u4e8e\u8bcd\u6743\u91cd\u7684\u7279\u5f81\u91cf\u5316\u4e3b\u8981\u5305\u62ec\u8bcd\u6027\u3001\u8bcd\u9891\u3001\u9006\u5411\u6587\u6863\u9891\u7387\u3001\u76f8\u5bf9\u8bcd\u9891\u3001\u8bcd\u957f\u7b49\u3002 2 \u57fa\u4e8e\u8bcd\u7684\u6587\u6863\u4f4d\u7f6e\u7684\u7279\u5f81\u91cf\u5316 \u8fd9\u79cd\u7279\u5f81\u91cf\u5316\u65b9\u5f0f\u662f\u6839\u636e\u6587\u7ae0\u4e0d\u540c\u4f4d\u7f6e\u7684\u53e5\u5b50\u5bf9\u6587\u6863\u7684\u91cd\u8981\u6027\u4e0d\u540c\u7684\u5047\u8bbe\u6765\u8fdb\u884c\u7684\u3002\u901a\u5e38\uff0c\u6587\u7ae0\u7684\u524dN\u4e2a\u8bcd\u3001\u540eN\u4e2a\u8bcd\u3001\u6bb5\u9996\u3001\u6bb5\u5c3e\u3001\u6807\u9898\u3001\u5f15\u8a00\u7b49\u4f4d\u7f6e\u7684\u8bcd\u5177\u6709\u4ee3\u8868\u6027\uff0c\u8fd9\u4e9b\u8bcd\u4f5c\u4e3a\u5173\u952e\u8bcd\u53ef\u4ee5\u8868\u8fbe\u6574\u4e2a\u7684\u4e3b\u9898\u3002 3 \u57fa\u4e8e\u8bcd\u7684\u5173\u8054\u4fe1\u606f\u7684\u7279\u5f81\u91cf\u5316 \u8bcd\u7684\u5173\u8054\u4fe1\u606f\u662f\u6307\u8bcd\u4e0e\u8bcd\u3001\u8bcd\u4e0e\u6587\u6863\u7684\u5173\u8054\u7a0b\u5ea6\u4fe1\u606f\uff0c\u5305\u62ec\u4e92\u4fe1\u606f\u3001hits\u503c\u3001\u8d21\u732e\u5ea6\u3001\u4f9d\u5b58\u5ea6\u3001TF-IDF\u503c\u7b49\u3002 \u4e0b\u9762\u4ecb\u7ecd\u51e0\u79cd\u5e38\u7528\u7684\u7279\u5f81\u503c\u91cf\u5316\u6307\u6807\u3002 \u8bcd\u6027 \u00b6 \u8bcd\u6027\u65f6\u901a\u8fc7\u5206\u8bcd\u3001\u8bed\u6cd5\u5206\u6790\u540e\u5f97\u5230\u7684\u7ed3\u679c\u3002\u73b0\u6709\u7684\u5173\u952e\u8bcd\u4e2d\uff0c\u7edd\u5927\u591a\u6570\u5173\u952e\u8bcd\u4e3a\u540d\u8bcd\u6216\u8005\u52a8\u540d\u8bcd\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u540d\u8bcd\u4e0e\u5176\u4ed6\u8bcd\u6027\u76f8\u6bd4\u66f4\u80fd\u8868\u8fbe\u4e00\u7bc7\u6587\u7ae0\u7684\u4e3b\u8981\u601d\u60f3\u3002\u4f46\u662f\uff0c\u8bcd\u6027\u4f5c\u4e3a\u7279\u5f81\u91cf\u5316\u7684\u6307\u6807\uff0c\u4e00\u822c\u4e0e\u5176\u4ed6\u6307\u6807\u7ed3\u5408\u4f7f\u7528\u3002 \u8bcd\u9891 \u00b6 \u8bcd\u9891\u8868\u793a\u4e00\u4e2a\u8bcd\u5728\u6587\u672c\u4e2d\u51fa\u73b0\u7684\u9891\u7387\u3002\u4e00\u822c\u6211\u4eec\u8ba4\u4e3a\uff0c\u5982\u679c\u4e00\u4e2a\u8bcd\u5728\u6587\u672c\u4e2d\u51fa\u73b0\u7684\u8d8a\u662f\u9891\u7e41\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8bcd\u5c31\u8d8a\u6709\u53ef\u80fd\u4f5c\u4e3a\u6587\u7ae0\u7684\u6838\u5fc3\u8bcd\u3002\u8bcd\u9891\u7b80\u5355\u5730\u7edf\u8ba1\u4e86\u8bcd\u5728\u6587\u672c\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u4f46\u662f\uff0c\u53ea\u4f9d\u9760\u8bcd\u9891\u6240\u5f97\u5230\u7684\u5173\u952e\u8bcd\u6709\u5f88\u5927\u7684\u4e0d\u786e\u5b9a\u6027\uff0c\u5bf9\u4e8e\u957f\u5ea6\u6bd4\u8f83\u957f\u7684\u6587\u672c\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u4f1a\u6709\u5f88\u5927\u7684\u566a\u97f3\u3002 \u4f4d\u7f6e\u4fe1\u606f \u00b6 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u8bcd\u51fa\u73b0\u7684\u4f4d\u7f6e\u5bf9\u4e8e\u8bcd\u6765\u8bf4\u6709\u7740\u5f88\u5927\u7684\u4ef7\u503c\u3002\u4f8b\u5982\uff0c\u6807\u9898\u3001\u6458\u8981\u672c\u8eab\u5c31\u662f\u4f5c\u8005\u6982\u62ec\u51fa\u7684\u6587\u7ae0\u7684\u4e2d\u5fc3\u601d\u60f3\uff0c\u56e0\u6b64\u51fa\u73b0\u5728\u8fd9\u4e9b\u5730\u65b9\u7684\u8bcd\u5177\u6709\u4e00\u5b9a\u7684\u4ee3\u8868\u6027\uff0c\u66f4\u53ef\u80fd\u6210\u4e3a\u5173\u952e\u8bcd\u3002\u4f46\u662f\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u4f5c\u8005\u7684\u4e60\u60ef\u4e0d\u540c\uff0c\u5199\u4f5c\u65b9\u5f0f\u4e0d\u540c\uff0c\u5173\u952e\u53e5\u5b50\u7684\u4f4d\u7f6e\u4e5f\u4f1a\u6709\u6240\u4e0d\u540c\uff0c\u6240\u4ee5\u8fd9\u4e5f\u662f\u4e00\u79cd\u5f88\u5bbd\u6cdb\u7684\u5f97\u5230\u5173\u952e\u8bcd\u7684\u65b9\u6cd5\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u4e0d\u4f1a\u5355\u72ec\u4f7f\u7528\u3002 \u4e92\u4fe1\u606f \u00b6 \u4e92\u4fe1\u606f\u662f\u4fe1\u606f\u8bba\u4e2d\u6982\u5ff5\uff0c\u662f\u53d8\u91cf\u4e4b\u95f4\u76f8\u4e92\u4f9d\u8d56\u7684\u5ea6\u91cf\u3002\u4e92\u4fe1\u606f\u5e76\u4e0d\u5c40\u9650\u4e8e\u5b9e\u503c\u968f\u673a\u53d8\u91cf\uff0c\u5b83\u66f4\u52a0\u4e00\u822c\u4e14\u51b3\u5b9a\u7740\u8054\u5408\u5206\u5e03 p(X,Y) \u548c\u5206\u89e3\u7684\u8fb9\u7f18\u5206\u5e03\u7684\u4e58\u79ef p(X)p(Y) \u7684\u76f8\u4f3c\u7a0b\u5ea6\u3002\u4e92\u4fe1\u606f\u7684\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a \u5176\u4e2d\uff0cp(x,y)\u662fX\u548cY\u7684\u8054\u5408\u6982\u7387\u5206\u5e03\u51fd\u6570\uff0cp(x)\u548cp(y)\u5206\u522b\u4e3aX\u548cY\u7684\u8fb9\u7f18\u6982\u7387\u5206\u5e03\u51fd\u6570\u3002 \u5f53\u4f7f\u7528\u4e92\u4fe1\u606f\u4f5c\u4e3a\u5173\u952e\u8bcd\u63d0\u53d6\u7684\u7279\u5f81\u91cf\u5316\u65f6\uff0c\u5e94\u7528\u6587\u672c\u7684\u6b63\u6587\u548c\u6807\u9898\u6784\u9020PAT\u6811\uff0c\u7136\u540e\u8ba1\u7b97\u5b57\u7b26\u4e32\u5de6\u53f3\u7684\u4e92\u4fe1\u606f\u3002 \u8bcd\u8de8\u5ea6 \u00b6 \u8bcd\u8de8\u5ea6\u662f\u6307\u4e00\u4e2a\u8bcd\u6216\u8005\u77ed\u8bed\u5b57\u6587\u4e2d\u9996\u6b21\u51fa\u73b0\u548c\u672b\u6b21\u51fa\u73b0\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u8bcd\u8de8\u5ea6\u8d8a\u5927\u8bf4\u660e\u8fd9\u4e2a\u8bcd\u5bf9\u6587\u672c\u8d8a\u91cd\u8981\uff0c\u53ef\u4ee5\u53cd\u6620\u6587\u672c\u7684\u4e3b\u9898\u3002\u4e00\u4e2a\u8bcd\u7684\u8de8\u5ea6\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a \u5176\u4e2d\uff0c \u8868\u793a\u8bcdi\u5728\u6587\u672c\u4e2d\u6700\u540e\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c \u8868\u793a\u8bcd i \u5728\u6587\u672c\u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0csum\u8868\u793a\u6587\u672c\u4e2d\u8bcd\u7684\u603b\u6570\u3002 \u8bcd\u8de8\u5ea6\u88ab\u4f5c\u4e3a\u63d0\u53d6\u5173\u952e\u8bcd\u7684\u65b9\u6cd5\u662f\u56e0\u4e3a\u5728\u73b0\u5b9e\u4e2d\uff0c\u6587\u672c\u4e2d\u603b\u662f\u6709\u5f88\u591a\u566a\u58f0\uff08\u6307\u4e0d\u662f\u5173\u952e\u8bcd\u7684\u90a3\u4e9b\u8bcd\uff09\uff0c\u4f7f\u7528\u8bcd\u8de8\u5ea6\u53ef\u4ee5\u51cf\u5c11\u8fd9\u4e9b\u566a\u58f0\u3002 TF-IDF\u503c \u00b6 \u4e00\u4e2a\u8bcd\u7684TF\u662f\u6307\u8fd9\u4e2a\u8bcd\u5728\u6587\u6863\u4e2d\u51fa\u73b0\u7684\u9891\u7387\uff0c\u5047\u8bbe\u4e00\u4e2a\u8bcdw\u5728\u6587\u672c\u4e2d\u51fa\u73b0\u4e86m\u6b21\uff0c\u800c\u6587\u672c\u4e2d\u8bcd\u7684\u603b\u6570\u4e3an\uff0c\u90a3\u4e48 \u3002\u4e00\u4e2a\u8bcd\u7684IDF\u662f\u6839\u636e\u8bed\u6599\u5e93\u5f97\u51fa\u7684\uff0c\u8868\u793a\u8fd9\u4e2a\u8bcd\u5728\u6574\u4e2a\u8bed\u6599\u5e93\u4e2d\u51fa\u73b0\u7684\u9891\u7387\u3002\u5047\u8bbe\u6574\u4e2a\u8bed\u6599\u5e93\u4e2d\uff0c\u5305\u542b\u8bcdw\u7684\u6587\u672c\u4e00\u5171\u6709M\u7bc7\uff0c\u8bed\u6599\u5e93\u4e2d\u7684\u6587\u672c\u4e00\u5171\u6709N\u7bc7\uff0c\u5219 \u7531\u6b64\u53ef\u5f97\u8bcdw\u7684TF-IDF\u503c\u4e3a\uff1a TF-IDF\u7684\u4f18\u70b9\u662f\u5b9e\u73b0\u7b80\u5355\uff0c\u76f8\u5bf9\u5bb9\u6613\u7406\u89e3\u3002 \u4f46\u662f\uff0cTFIDF\u7b97\u6cd5\u63d0\u53d6\u5173\u952e\u8bcd\u7684\u7f3a\u70b9\u4e5f\u5f88\u660e\u663e\uff0c\u4e25\u91cd\u4f9d\u8d56\u8bed\u6599\u5e93\uff0c\u9700\u8981\u9009\u53d6\u8d28\u91cf\u8f83\u9ad8\u4e14\u548c\u6240\u5904\u7406\u6587\u672c\u76f8\u7b26\u7684\u8bed\u6599\u5e93\u8fdb\u884c\u8bad\u7ec3\u3002\u53e6\u5916\uff0c\u5bf9\u4e8eIDF\u6765\u8bf4\uff0c\u5b83\u672c\u8eab\u662f\u4e00\u79cd\u8bd5\u56fe\u6291\u5236\u566a\u58f0\u7684\u52a0\u6743\uff0c\u672c\u8eab\u503e\u5411\u4e8e\u6587\u672c\u4e2d\u9891\u7387\u5c0f\u7684\u8bcd\uff0c\u8fd9\u4f7f\u5f97TF-IDF\u7b97\u6cd5\u7684\u7cbe\u5ea6\u4e0d\u9ad8\u3002TF-IDF\u7b97\u6cd5\u8fd8\u6709\u4e00\u4e2a\u7f3a\u70b9\u5c31\u662f\u4e0d\u80fd\u53cd\u5e94\u8bcd\u7684\u4f4d\u7f6e\u4fe1\u606f\uff0c \u5728\u5bf9\u5173\u952e\u8bcd\u8fdb\u884c\u63d0\u53d6\u7684\u65f6\u5019\uff0c\u8bcd\u7684\u4f4d\u7f6e\u4fe1\u606f\uff0c\u4f8b\u5982\u6587\u672c\u7684\u6807\u9898\u3001\u6587\u672c\u7684\u9996\u53e5\u548c\u5c3e\u53e5\u7b49\u542b\u6709\u8f83\u91cd\u8981\u7684\u4fe1\u606f\uff0c\u5e94\u8be5\u8d4b\u4e88\u8f83\u9ad8\u7684\u6743\u91cd\u3002 \u57fa\u4e8e\u7edf\u8ba1\u7279\u5f81\u7684\u5173\u952e\u8bcd\u63d0\u53d6\u7b97\u6cd5\u901a\u8fc7\u4e0a\u9762\u7684\u4e00\u4e9b\u7279\u5f81\u91cf\u5316\u6307\u6807\u5c06\u5173\u952e\u8bcd\u8fdb\u884c\u6392\u5e8f\uff0c\u83b7\u53d6TopK\u4e2a\u8bcd\u4f5c\u4e3a\u5173\u952e\u8bcd\u3002 \u57fa\u4e8e\u7edf\u8ba1\u7279\u5f81\u7684\u5173\u952e\u8bcd\u7684\u91cd\u70b9\u5728\u4e8e\u7279\u5f81\u91cf\u5316\u6307\u6807\u7684\u8ba1\u7b97\uff0c\u4e0d\u540c\u7684\u91cf\u5316\u6307\u6807\u5f97\u5230\u7684\u7ed3\u679c\u4e5f\u4e0d\u5c3d\u76f8\u540c\u3002\u540c\u65f6\uff0c\u4e0d\u540c\u7684\u91cf\u5316\u6307\u6807\u4f5c\u4e3a\u4e5f\u6709\u5176\u5404\u81ea\u7684\u4f18\u7f3a\u70b9\uff0c\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u901a\u5e38\u662f\u91c7\u7528\u4e0d\u540c\u7684\u91cf\u5316\u6307\u6807\u76f8\u7ed3\u5408\u7684\u65b9\u5f0f\u5f97\u5230Topk\u4e2a\u8bcd\u4f5c\u4e3a\u5173\u952e\u8bcd\u3002 NO.2 \u57fa\u4e8e\u8bcd\u56fe\u6a21\u578b\u7684\u5173\u952e\u8bcd\u62bd\u53d6\u7b97\u6cd5 \u00b6 \u57fa\u4e8e\u8bcd\u56fe\u6a21\u578b\u7684\u5173\u952e\u8bcd\u62bd\u53d6\u9996\u5148\u8981\u6784\u5efa\u6587\u6863\u7684\u8bed\u8a00\u7f51\u7edc\u56fe\uff0c\u7136\u540e\u5bf9\u8bed\u8a00\u8fdb\u884c\u7f51\u7edc\u56fe\u5206\u6790\uff0c\u5728\u8fd9\u4e2a\u56fe\u4e0a\u5bfb\u627e\u5177\u6709\u91cd\u8981\u4f5c\u7528\u7684\u8bcd\u6216\u8005\u77ed\u8bed\uff0c\u8fd9\u4e9b\u77ed\u8bed\u5c31\u662f\u6587\u6863\u7684\u5173\u952e\u8bcd\u3002\u8bed\u8a00\u7f51\u7edc\u56fe\u4e2d\u8282\u70b9\u57fa\u672c\u4e0a\u90fd\u662f\u8bcd\uff0c\u6839\u636e\u8bcd\u7684\u94fe\u63a5\u65b9\u5f0f\u4e0d\u540c\uff0c\u8bed\u8a00\u7f51\u7edc\u7684\u4e3b\u8981\u5f62\u5f0f\u5206\u4e3a\u56db\u79cd\uff1a \u5171\u73b0\u7f51\u7edc\u56fe\u3001\u8bed\u6cd5\u7f51\u7edc\u56fe\u3001\u8bed\u4e49\u7f51\u7edc\u56fe\u548c\u5176\u4ed6\u7f51\u7edc\u56fe\u3002 \u5728\u8bed\u8a00\u7f51\u7edc\u56fe\u7684\u6784\u5efa\u8fc7\u7a0b\u4e2d\uff0c\u90fd\u662f\u4ee5\u9884\u5904\u7406\u8fc7\u540e\u7684\u8bcd\u4f5c\u4e3a\u8282\u70b9\uff0c\u8bcd\u4e0e\u8bcd\u4e4b\u95f4\u7684\u5173\u7cfb\u4f5c\u4e3a\u8fb9\u3002\u8bed\u8a00\u7f51\u7edc\u56fe\u4e2d\uff0c\u8fb9\u4e0e\u8fb9\u4e4b\u95f4\u7684\u6743\u91cd\u4e00\u822c\u7528\u8bcd\u4e4b\u95f4\u7684\u5173\u8054\u5ea6\u6765\u8868\u793a\u3002\u5728\u4f7f\u7528\u8bed\u8a00\u7f51\u7edc\u56fe\u83b7\u5f97\u5173\u952e\u8bcd\u7684\u65f6\u5019\uff0c\u9700\u8981\u8bc4\u4f30\u5404\u4e2a\u8282\u70b9\u7684\u91cd\u8981\u6027\uff0c\u7136\u540e\u6839\u636e\u91cd\u8981\u6027\u5c06\u8282\u70b9\u8fdb\u884c\u6392\u5e8f\uff0c\u9009\u53d6TopK\u4e2a\u8282\u70b9\u6240\u4ee3\u8868\u7684\u8bcd\u4f5c\u4e3a\u5173\u952e\u8bcd\u3002\u8282\u70b9\u7684\u91cd\u8981\u6027\u8ba1\u7b97\u65b9\u6cd5\u6709\u4ee5\u4e0b\u51e0\u79cd\u65b9\u6cd5\u3002 1 \u7efc\u5408\u7279\u5f81\u6cd5 \u00b6 \u7efc\u5408\u7279\u5f81\u6cd5\u4e5f\u53eb\u793e\u4f1a\u7f51\u7edc\u4e2d\u5fc3\u6027\u5206\u6790\u65b9\u6cd5\uff0c\u8fd9\u79cd\u65b9\u6cd5\u7684\u6838\u5fc3\u601d\u60f3\u662f\u8282\u70b9\u4e2d\u91cd\u8981\u6027\u7b49\u4e8e\u8282\u70b9\u7684\u663e\u8457\u6027\uff0c\u4ee5\u4e0d\u7834\u574f\u7f51\u7edc\u7684\u6574\u4f53\u6027\u4e3a\u57fa\u7840\u3002\u6b64\u65b9\u6cd5\u5c31\u662f\u4ece\u7f51\u7edc\u7684\u5c40\u90e8\u5c5e\u6027\u548c\u5168\u5c40\u5c5e\u6027\u89d2\u5ea6\u53bb\u5b9a\u91cf\u5206\u6790\u7f51\u7edc\u7ed3\u6784\u7684\u62d3\u6251\u6027\u8d28\uff0c\u5e38\u7528\u7684\u5b9a\u91cf\u8ba1\u7b97\u65b9\u6cd5\u5982\u4e0b\u3002 \u5ea6 \u00b6 \u8282\u70b9\u7684\u5ea6\u662f\u6307\u4e0e\u8be5\u8282\u70b9\u76f4\u63a5\u5411\u91cf\u7684\u8282\u70b9\u6570\u76ee\uff0c\u8868\u793a\u7684\u662f\u8282\u70b9\u7684\u5c40\u90e8\u5f71\u54cd\u529b\uff0c\u5bf9\u4e8e\u975e\u52a0\u6743\u7f51\u7edc\uff0c\u8282\u70b9\u7684\u5ea6\u4e3a\uff1a \u5bf9\u4e8e\u52a0\u6743\u7f51\u7edc\uff0c\u8282\u70b9\u7684\u5ea6\u53c8\u79f0\u4e3a\u8282\u70b9\u7684\u5f3a\u5ea6\uff0c\u8ba1\u7b97\u516c\u5f0f\u4e3a\uff1a \u63a5\u8fd1\u6027 \u00b6 \u8282\u70b9\u7684\u63a5\u8fd1\u6027\u662f\u6307\u8282\u70b9\u5230\u5176\u4ed6\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u4e4b\u548c\u7684\u5012\u6570\uff0c\u8868\u793a\u7684\u662f\u4fe1\u606f\u4f20\u64ad\u7684\u7d27\u5bc6\u7a0b\u5ea6\uff0c\u5176\u8ba1\u7b97\u516c\u5f0f\u4e3a\uff1a \u7279\u5f81\u5411\u91cf \u00b6 \u7279\u5f81\u5411\u91cf\u7684\u601d\u60f3\u662f\u8282\u70b9\u7684\u4e2d\u5fc3\u5316\u6d4b\u8bd5\u503c\u7531\u5468\u56f4\u6240\u6709\u8fde\u63a5\u7684\u8282\u70b9\u51b3\u5b9a\uff0c\u5373\u4e00\u4e2a\u8282\u70b9\u7684\u4e2d\u5fc3\u5316\u6307\u6807\u5e94\u8be5\u7b49\u4e8e\u5176\u76f8\u90bb\u8282\u70b9\u7684\u4e2d\u5fc3\u5316\u6307\u6807\u4e4b\u7ebf\u6027\u53e0\u52a0\uff0c\u8868\u793a\u7684\u662f\u901a\u8fc7\u4e0e\u5177\u6709\u9ad8\u5ea6\u503c\u7684\u76f8\u90bb\u8282\u70b9\u6240\u83b7\u5f97\u7684\u95f4\u63a5\u5f71\u54cd\u529b\u3002\u7279\u5f81\u5411\u91cf\u7684\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a \u96c6\u805a\u7cfb\u6570 \u00b6 \u8282\u70b9\u7684\u96c6\u805a\u7cfb\u6570\u662f\u5b83\u7684\u76f8\u90bb\u7684\u8282\u70b9\u4e4b\u95f4\u7684\u8fde\u63a5\u6570\u4e0e\u4ed6\u4eec\u6240\u6709\u53ef\u80fd\u5b58\u5728\u6765\u94fe\u63a5\u7684\u6570\u91cf\u7684\u6bd4\u503c\uff0c\u7528\u6765\u63cf\u8ff0\u56fe\u7684\u9876\u70b9\u4e4b\u95f4\u9636\u7ea7\u6210\u56e2\u7684\u7a0b\u5ea6\u7684\u7cfb\u6570\uff0c\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a \u5e73\u5747\u6700\u77ed\u8def\u5f84 \u00b6 \u8282\u70b9\u7684\u5e73\u5c40\u6700\u77ed\u8def\u5f84\u4e5f\u53eb\u7d27\u5bc6\u4e2d\u5fc3\u6027\uff0c\u662f\u8282\u70b9\u7684\u6240\u6709\u6700\u77ed\u8def\u5f84\u4e4b\u548c\u7684\u5e73\u5747\u503c\uff0c\u8868\u793a\u7684\u662f\u4e00\u4e2a\u8282\u70b9\u4f20\u64ad\u4fe1\u606f\u65f6\u5bf9\u5176\u4ed6\u8282\u70b9\u7684\u4f9d\u8d56\u7a0b\u5ea6\u3002\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u79bb\u5176\u4ed6\u8282\u70b9\u8d8a\u8fd1\uff0c\u90a3\u4e48\u4ed6\u4f20\u64ad\u4fe1\u606f\u7684\u65f6\u5019\u4e5f\u5c31\u8d8a\u4e0d\u9700\u8981\u4f9d\u8d56\u5176\u4ed6\u4eba\u3002\u4e00\u4e2a\u8282\u70b9\u5230\u7f51\u7edc\u4e2d\u5404\u70b9\u7684\u8ddd\u79bb\u90fd\u5f88\u77ed\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u5c31\u4e0d\u4f1a\u53d7\u5236\u4e8e\u5176\u4ed6\u8282\u70b9\u3002\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a \u56e0\u4e3a\u6bcf\u4e2a\u7b97\u6cd5\u7684\u4fa7\u91cd\u65b9\u5411\u7684\u4e0d\u540c\uff0c\u5728\u5b9e\u9645\u7684\u95ee\u9898\u4e2d\u6240\u9009\u53d6\u7684\u5b9a\u91cf\u5206\u6790\u65b9\u6cd5\u4e5f\u4f1a\u4e0d\u4e00\u6837\u3002\u540c\u65f6\uff0c\u5bf9\u4e8e\u5173\u952e\u8bcd\u63d0\u53d6\u6765\u8bf4\uff0c\u4e5f\u53ef\u4ee5\u548c\u4e0a\u4e00\u8282\u6240\u63d0\u51fa\u7684\u7edf\u8ba1\u6cd5\u5f97\u5230\u7684\u8bcd\u7684\u6743\u91cd\uff0c\u4f8b\u5982\u8bcd\u6027\u7b49\u76f8\u7ed3\u5408\u6784\u5efa\u8bcd\u642d\u914d\u7f51\u7edc\uff0c\u7136\u540e\u5229\u7528\u4e0a\u8ff0\u65b9\u6cd5\u5f97\u5230\u5173\u952e\u8bcd\u3002 2 \u7cfb\u7edf\u79d1\u5b66\u6cd5 \u00b6 \u7cfb\u7edf\u79d1\u5b66\u6cd5\u8fdb\u884c\u4e2d\u5fc3\u6027\u5206\u6790\u7684\u601d\u60f3\u662f\u8282\u70b9\u91cd\u8981\u6027\u7b49\u4e8e\u8fd9\u4e2a\u8282\u70b9\u88ab\u5220\u9664\u540e\u5bf9\u4e8e\u6574\u4e2a\u8bed\u8a00\u7f51\u7edc\u56fe\u7684\u7834\u574f\u7a0b\u5ea6\u3002\u91cd\u8981\u7684\u8282\u70b9\u88ab\u5220\u9664\u540e\u4f1a\u5bf9\u7f51\u7edc\u7684\u5443\u8fde\u901a\u6027\u7b49\u4ea7\u751f\u53d8\u5316\u3002\u5982\u679c\u6211\u4eec\u5728\u7f51\u7edc\u56fe\u4e2d\u5220\u9664\u67d0\u4e00\u4e2a\u8282\u70b9\uff0c\u56fe\u7684\u67d0\u4e9b\u6307\u5b9a\u7279\u6027\u4ea7\u751f\u4e86\u6539\u53d8\uff0c\u53ef\u4ee5\u6839\u636e\u7279\u6027\u6539\u53d8\u7684\u5927\u5c0f\u83b7\u5f97\u8282\u70b9\u7684\u91cd\u8981\u6027\uff0c\u4ece\u800c\u5bf9\u8282\u70b9\u8fdb\u884c\u7b5b\u9009\u3002 3 \u968f\u673a\u6e38\u8d70\u6cd5 \u00b6 \u968f\u673a\u6e38\u8d70\u7b97\u6cd5\u65f6\u7f51\u7edc\u56fe\u4e2d\u4e00\u4e2a\u975e\u5e38\u8457\u540d\u7684\u7b97\u6cd5\uff0c\u5b83\u4ece\u7ed9\u5b9a\u56fe\u548c\u51fa\u53d1\u70b9\uff0c\u968f\u673a\u5730\u9009\u62e9\u90bb\u5c45\u8282\u70b9\u79fb\u52a8\u5230\u90bb\u5c45\u8282\u70b9\u4e0a\uff0c\u7136\u540e\u518d\u628a\u73b0\u5728\u7684\u8282\u70b9\u4f5c\u4e3a\u51fa\u53d1\u70b9\uff0c\u8fed\u4ee3\u4e0a\u8ff0\u8fc7\u7a0b\u3002 \u968f\u673a\u6e38\u8d70\u7b97\u6cd5\u4e00\u4e2a\u5f88\u51fa\u540d\u7684\u5e94\u7528\u662f\u5927\u540d\u9f0e\u9f0e\u7684PageRank\u7b97\u6cd5\uff0cPageRank\u7b97\u6cd5\u662f\u6574\u4e2agoogle\u641c\u7d22\u7684\u6838\u5fc3\u7b97\u6cd5\uff0c\u662f\u4e00\u79cd\u901a\u8fc7\u7f51\u9875\u4e4b\u95f4\u7684\u8d85\u94fe\u63a5\u6765\u8ba1\u7b97\u7f51\u9875\u91cd\u8981\u6027\u7684\u6280\u672f\uff0c\u5176\u5173\u952e\u7684\u601d\u60f3\u662f\u91cd\u8981\u6027\u4f20\u9012\u3002 \u5728\u5173\u952e\u8bcd\u63d0\u53d6\u9886\u57df\uff0c Mihalcea \u7b49\u4eba\u6240\u63d0\u51fa\u7684TextRank\u7b97\u6cd5\u5c31\u662f\u5728\u6587\u672c\u5173\u952e\u8bcd\u63d0\u53d6\u9886\u57df\u501f\u9274\u4e86\u8fd9\u79cd\u601d\u60f3\u3002 PageRank\u7b97\u6cd5\u5c06\u6574\u4e2a\u4e92\u8054\u7f51\u770b\u4f5c\u4e00\u5f20\u6709\u5411\u56fe\uff0c\u7f51\u9875\u662f\u56fe\u4e2d\u7684\u8282\u70b9\uff0c\u800c\u7f51\u9875\u4e4b\u95f4\u7684\u94fe\u63a5\u5c31\u662f\u56fe\u4e2d\u7684\u8fb9\u3002\u6839\u636e\u91cd\u8981\u6027\u4f20\u9012\u7684\u601d\u60f3\uff0c\u5982\u679c\u4e00\u4e2a\u5927\u578b\u7f51\u7ad9A\u542b\u6709\u4e00\u4e2a\u8d85\u94fe\u63a5\u6307\u5411\u4e86\u7f51\u9875B\uff0c\u90a3\u4e48\u7f51\u9875B\u7684\u91cd\u8981\u6027\u6392\u540d\u4f1a\u6839\u636eA\u7684\u91cd\u8981\u6027\u6765\u63d0\u5347\u3002\u7f51\u9875\u91cd\u8981\u6027\u7684\u4f20\u9012\u601d\u60f3\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u56fe 2 PageRank\u7b80\u5355\u63cf\u8ff0\uff08\u6765\u81eaPageRank\u8bba\u6587\uff09 \u5728PageRank\u7b97\u6cd5\u4e2d\uff0c\u6700\u4e3b\u8981\u7684\u662f\u5bf9\u4e8e\u521d\u59cb\u7f51\u9875\u91cd\u8981\u6027\uff08PR\u503c\uff09\u7684\u8ba1\u7b97\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u4e0a\u56fe\u4e2d\u7684\u7f51\u9875A\u7684\u91cd\u8981\u6027\u6211\u4eec\u662f\u65e0\u6cd5\u9884\u77e5\u7684\u3002\u4f46\u662f\uff0c\u5728\u539f\u59cb\u8bba\u6587\u4e2d\u7ed9\u51fa\u4e86\u4e00\u79cd\u8fed\u4ee3\u65b9\u6cd5\u6c42\u51fa\u8fd9\u4e2a\u91cd\u8981\u6027\uff0c\u8bba\u6587\u4e2d\u6307\u51fa\uff0c\u5e42\u6cd5\u6c42\u77e9\u9635\u7279\u5f81\u503c\u4e0e\u77e9\u9635\u7684\u521d\u59cb\u503c\u65e0\u5173\u3002\u90a3\u4e48\uff0c\u5c31\u53ef\u4ee5\u4e3a\u6bcf\u4e2a\u7f51\u9875\u968f\u673a\u7ed9\u4e00\u4e2a\u521d\u59cb\u503c\uff0c\u7136\u540e\u8fed\u4ee3\u5f97\u5230\u6536\u655b\u503c\uff0c\u5e76\u4e14\u6536\u655b\u503c\u4e0e\u521d\u59cb\u503c\u65e0\u5173\u3002 PageRank\u6c42\u7f51\u9875i\u7684PR\u503c\u8ba1\u7b97\u5982\u4e0b\uff1a \u5176\u4e2d\uff0cd\u4e3a\u963b\u5c3c\u7cfb\u6570\uff0c\u901a\u5e38\u4e3a0.85\u3002 \u662f\u6307\u5411\u7f51\u9875 i \u7684\u7f51\u9875\u96c6\u5408\u3002 \u662f\u6307\u7f51\u9875j\u4e2d\u7684\u94fe\u63a5\u6307\u5411\u7684\u96c6\u5408\uff0c \u662f\u6307\u96c6\u5408\u4e2d\u5143\u7d20\u7684\u4e2a\u6570\u3002 TextRank\u5728\u6784\u5efa\u56fe\u7684\u65f6\u5019\u5c06\u8282\u70b9\u7531\u7f51\u9875\u6539\u6210\u4e86\u53e5\u5b50\uff0c\u5e76\u4e3a\u8282\u70b9\u4e4b\u95f4\u7684\u8fb9\u5f15\u5165\u4e86\u6743\u503c\uff0c\u5176\u4e2d\u6743\u503c\u8868\u793a\u4e24\u4e2a\u53e5\u5b50\u7684\u76f8\u4f3c\u7a0b\u5ea6\u3002\u5176\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a \u516c\u5f0f\u4e2d\u7684 \u4e3a\u56fe\u4e2d\u8282\u70b9 \u548c\u7684\u8fb9 \u7684\u6743\u91cd\u3002\u5176\u4ed6\u7b26\u53f7\u4e0ePageRank\u516c\u5f0f\u76f8\u540c\u3002 TextRank\u7b97\u6cd5\u9664\u4e86\u505a\u6587\u672c\u5173\u952e\u8bcd\u63d0\u53d6\uff0c\u8fd8\u53ef\u4ee5\u505a\u6587\u672c\u6458\u8981\u63d0\u53d6\uff0c\u6548\u679c\u4e0d\u9519\u3002\u4f46\u662fTextRank\u7684\u8ba1\u7b97\u590d\u6742\u5ea6\u5f88\u9ad8\uff0c\u5e94\u7528\u4e0d\u5e7f\u3002 NO.3 \u57fa\u4e8e\u4e3b\u9898\u6a21\u578b\u7684\u5173\u952e\u8bcd\u62bd\u53d6 \u00b6 \u57fa\u4e8e\u4e3b\u9898\u5173\u952e\u8bcd\u63d0\u53d6\u7b97\u6cd5\u4e3b\u8981\u5229\u7528\u7684\u662f\u4e3b\u9898\u6a21\u578b\u4e2d\u5173\u4e8e\u4e3b\u9898\u7684\u5206\u5e03\u7684\u6027\u8d28\u8fdb\u884c\u5173\u952e\u8bcd\u63d0\u53d6\u3002\u7b97\u6cd5\u6b65\u9aa4\u5982\u4e0b\uff1a 1 \u83b7\u53d6\u5019\u9009\u5173\u952e\u8bcd \u00b6 \u4ece\u6587\u7ae0\u4e2d\u83b7\u53d6\u5019\u9009\u5173\u952e\u8bcd\u3002\u5373\u5c06\u6587\u672c\u5206\u8bcd\uff0c\u4e5f\u53ef\u4ee5\u518d\u6839\u636e\u8bcd\u6027\u9009\u53d6\u5019\u9009\u5173\u952e\u8bcd\u3002 2 \u8bed\u6599\u5b66\u4e60 \u00b6 \u6839\u636e\u5927\u89c4\u6a21\u9884\u6599\u5b66\u4e60\u5f97\u5230\u4e3b\u9898\u6a21\u578b\u3002 3 \u8ba1\u7b97\u6587\u7ae0\u4e3b\u9898\u5206\u90e8 \u00b6 \u6839\u636e\u5f97\u5230\u7684\u9690\u542b\u4e3b\u9898\u6a21\u578b\uff0c\u8ba1\u7b97\u6587\u7ae0\u7684\u4e3b\u9898\u5206\u5e03\u548c\u5019\u9009\u5173\u952e\u8bcd\u5206\u5e03\u3002 4 \u6392\u5e8f \u00b6 \u8ba1\u7b97\u6587\u6863\u548c\u5019\u9009\u5173\u952e\u8bcd\u7684\u4e3b\u9898\u76f8\u4f3c\u5ea6\u5e76\u6392\u5e8f\uff0c\u9009\u53d6\u524dn\u4e2a\u8bcd\u4f5c\u4e3a\u5173\u952e\u8bcd\u3002 \u7b97\u6cd5\u7684\u5173\u952e\u5728\u4e8e\u4e3b\u9898\u6a21\u578b\u7684\u6784\u5efa\u3002 \u4e3b\u9898\u6a21\u578b\u662f\u4e00\u79cd\u6587\u6863\u751f\u6210\u6a21\u578b\uff0c\u5bf9\u4e8e\u4e00\u7bc7\u6587\u7ae0\uff0c\u6211\u4eec\u7684\u6784\u601d\u601d\u8def\u662f\u5148\u786e\u5b9a\u51e0\u4e2a\u4e3b\u9898\uff0c\u7136\u540e\u6839\u636e\u4e3b\u9898\u60f3\u597d\u63cf\u8ff0\u4e3b\u9898\u7684\u8bcd\u6c47\uff0c\u5c06\u8bcd\u6c47\u6309\u7167\u8bed\u6cd5\u89c4\u5219\u7ec4\u6210\u53e5\u5b50\uff0c\u6bb5\u843d\uff0c\u6700\u540e\u751f\u6210\u4e00\u7bc7\u6587\u7ae0\u3002 \u4e3b\u9898\u6a21\u578b\u4e5f\u662f\u57fa\u4e8e\u8fd9\u4e2a\u601d\u60f3\uff0c\u5b83\u8ba4\u4e3a\u6587\u6863\u662f\u4e00\u4e9b\u4e3b\u9898\u7684\u6df7\u5408\u5206\u5e03\uff0c\u4e3b\u9898\u53c8\u662f\u8bcd\u8bed\u7684\u6982\u7387\u5206\u5e03\uff0cpLSA\u6a21\u578b\u5c31\u662f\u7b2c\u4e00\u4e2a\u6839\u636e\u8fd9\u4e2a\u60f3\u6cd5\u6784\u5efa\u7684\u6a21\u578b\u3002\u540c\u6837\u5730\uff0c\u6211\u4eec\u53cd\u8fc7\u6765\u60f3\uff0c\u6211\u4eec\u627e\u5230\u4e86\u6587\u6863\u7684\u4e3b\u9898\uff0c\u7136\u540e\u4e3b\u9898\u4e2d\u6709\u4ee3\u8868\u6027\u7684\u8bcd\u5c31\u80fd\u8868\u793a\u8fd9\u7bc7\u6587\u6863\u7684\u6838\u5fc3\u610f\u601d\uff0c\u5c31\u662f\u6587\u6863\u7684\u5173\u952e\u8bcd\u3002 pLSA\u6a21\u578b\u8ba4\u4e3a\uff0c\u4e00\u7bc7\u6587\u6863\u4e2d\u7684\u6bcf\u4e00\u4e2a\u8bcd\u90fd\u662f\u901a\u8fc7\u4e00\u5b9a\u6982\u7387\u9009\u53d6\u67d0\u4e2a\u4e3b\u9898\uff0c\u7136\u540e\u518d\u6309\u7167\u4e00\u5b9a\u7684\u6982\u7387\u4ece\u4e3b\u9898\u4e2d\u9009\u53d6\u5f97\u5230\u8fd9\u4e2a\u8bcd\u8bed\uff0c\u8fd9\u4e2a\u8bcd\u8bed\u7684\u8ba1\u7b97\u516c\u5f0f\u4e3a\uff1a \u4e00\u4e9b\u8d1d\u53f6\u65af\u5b66\u6d3e\u7684\u7814\u7a76\u8005\u5bf9\u4e8epLSA\u6a21\u578b\u8fdb\u884c\u4e86\u6539\u8fdb\uff0c\u4ed6\u4eec\u8ba4\u4e3a\uff0c\u6587\u7ae0\u5bf9\u5e94\u4e3b\u9898\u7684\u6982\u7387\u4ee5\u53ca\u4e3b\u9898\u5bf9\u5e94\u8bcd\u8bed\u7684\u6982\u7387\u4e0d\u662f\u4e00\u5b9a\u7684\uff0c\u4e5f\u670d\u4ece\u4e00\u5b9a\u7684\u6982\u7387\uff0c\u4e8e\u662f\u5c31\u6709\u4e86\u73b0\u9636\u6bb5\u5e38\u7528\u7684\u4e3b\u9898\u6a21\u578b--LDA\u4e3b\u9898\u6a21\u578b\u3002 LDA\u662fD.M.Blei\u57282003\u5e74\u63d0\u51fa\u7684\u3002LDA\u91c7\u7528\u4e86\u8bcd\u888b\u6a21\u578b\u7684\u65b9\u6cd5\u7b80\u5316\u4e86\u95ee\u9898\u7684\u590d\u6742\u6027\u3002\u5728LDA\u6a21\u578b\u4e2d\uff0c\u6bcf\u4e00\u7bc7\u6587\u6863\u662f\u4e00\u4e9b\u4e3b\u9898\u7684\u6784\u6210\u7684\u6982\u7387\u5206\u5e03\uff0c\u800c\u6bcf\u4e00\u4e2a\u4e3b\u9898\u53c8\u662f\u5f88\u591a\u5355\u8bcd\u6784\u6210\u7684\u4e00\u4e2a\u6982\u7387\u5206\u5e03\u3002\u540c\u65f6\uff0c\u65e0\u8bba\u662f\u4e3b\u9898\u6784\u6210\u7684\u6982\u7387\u5206\u5e03\u8fd8\u662f\u5355\u8bcd\u6784\u6210\u7684\u6982\u7387\u5206\u5e03\u4e5f\u4e0d\u662f\u4e00\u5b9a\u7684\uff0c\u8fd9\u4e9b\u5206\u5e03\u4e5f\u670d\u4eceDirichlet \u5148\u9a8c\u5206\u5e03\u3002 \u6587\u6863\u7684\u751f\u6210\u6a21\u578b\u53ef\u4ee5\u7528\u5982\u4e0b\u56fe\u6a21\u578b\u8868\u793a\uff1a \u5176\u4e2d \u548c \u4e3a\u5148\u9a8c\u5206\u5e03\u7684\u8d85\u53c2\u6570\uff0c \u4e3a\u7b2ck\u4e2a\u4e3b\u9898\u4e0b\u7684\u6240\u6709\u5355\u8bcd\u7684\u5206\u5e03\uff0c \u4e3a\u6587\u6863\u7684\u4e3b\u9898\u5206\u5e03\uff0cw\u4e3a\u6587\u6863\u7684\u8bcd\uff0cz\u4e3aw\u6240\u5bf9\u5e94\u7684\u4e3b\u9898\u3002 \u56fe 3 Blei\u5728\u8bba\u6587\u4e2d\u7684\u56fe\u6a21\u578b DA\u6316\u6398\u4e86\u6587\u672c\u7684\u6df1\u5c42\u8bed\u4e49\u5373\u6587\u672c\u7684\u4e3b\u9898\uff0c\u7528\u6587\u672c\u7684\u4e3b\u9898\u6765\u8868\u793a\u6587\u672c\u7684\u4e5f\u4ece\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u964d\u4f4e\u4e86\u6587\u672c\u5411\u91cf\u7684\u7ef4\u5ea6\uff0c\u5f88\u591a\u4eba\u7528\u8fd9\u79cd\u65b9\u5f0f\u5bf9\u6587\u672c\u505a\u5206\u7c7b\uff0c\u53d6\u5f97\u4e86\u4e0d\u9519\u7684\u6548\u679c\u3002 LDA\u5173\u952e\u8bcd\u63d0\u53d6\u7b97\u6cd5\u5229\u7528\u6587\u6863\u7684\u9690\u542b\u8bed\u4e49\u4fe1\u606f\u6765\u63d0\u53d6\u5173\u952e\u8bcd\uff0c\u4f46\u662f\u4e3b\u9898\u6a21\u578b\u63d0\u53d6\u7684\u5173\u952e\u8bcd\u6bd4\u8f83\u5bbd\u6cdb\uff0c\u4e0d\u80fd\u5f88\u597d\u7684\u53cd\u5e94\u6587\u6863\u4e3b\u9898\u3002\u53e6\u5916\uff0c\u5bf9\u4e8eLDA\u6a21\u578b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u8f83\u9ad8\uff0c\u9700\u8981\u5927\u91cf\u7684\u5b9e\u8df5\u8bad\u7ec3\u3002 NO.4 \u5e94\u7528 \u00b6 \u73b0\u9636\u6bb5\uff0c\u6587\u672c\u7684\u5173\u952e\u8bcd\u63d0\u53d6\u5728\u57fa\u4e8e\u6587\u672c\u7684\u641c\u7d22\u3001\u63a8\u8350\u4ee5\u53ca\u6570\u636e\u6316\u6398\u9886\u57df\u6709\u7740\u5f88\u5e7f\u6cdb\u7684\u5e94\u7528\u3002\u540c\u65f6\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u56e0\u4e3a\u5e94\u7528\u73af\u5883\u7684\u590d\u6742\u6027\uff0c\u5bf9\u4e8e\u4e0d\u540c\u7c7b\u578b\u7684\u6587\u672c\uff0c\u4f8b\u5982\u957f\u6587\u672c\u548c\u77ed\u6587\u672c\uff0c\u7528\u540c\u4e00\u79cd\u6587\u672c\u5173\u952e\u8bcd\u63d0\u53d6\u65b9\u6cd5\u5f97\u5230\u7684\u6548\u679c\u5e76\u76f8\u540c\u3002\u56e0\u6b64\uff0c\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u9488\u5bf9\u4e0d\u540c\u7684\u6761\u4ef6\u73af\u5883\u6240\u91c7\u7528\u7684\u7b97\u6cd5\u4f1a\u6709\u6240\u4e0d\u540c\uff0c\u6ca1\u6709\u67d0\u4e00\u7c7b\u7b97\u6cd5\u5728\u6240\u6709\u7684\u73af\u5883\u4e0b\u90fd\u6709\u5f88\u597d\u7684\u6548\u679c\u3002 \u76f8\u5bf9\u4e8e\u4e0a\u6587\u4e2d\u6240\u63d0\u5230\u7684\u7b97\u6cd5\uff0c\u4e00\u4e9b\u7ec4\u5408\u7b97\u6cd5\u5728\u5de5\u7a0b\u4e0a\u88ab\u5927\u91cf\u5e94\u7528\u4ee5\u5f25\u8865\u5355\u7b97\u6cd5\u7684\u4e0d\u8db3\uff0c\u4f8b\u5982\u5c06TF-IDF\u7b97\u6cd5\u4e0eTextRank\u7b97\u6cd5\u76f8\u7ed3\u5408\uff0c\u6216\u8005\u7efc\u5408TF-IDF\u4e0e\u8bcd\u6027\u5f97\u5230\u5173\u952e\u8bcd\u7b49\u3002\u540c\u65f6\uff0c\u5de5\u7a0b\u4e0a\u5bf9\u4e8e\u6587\u672c\u7684\u9884\u5904\u7406\u4ee5\u53ca\u6587\u672c\u5206\u8bcd\u7684\u51c6\u786e\u6027\u4e5f\u6709\u5f88\u5927\u7684\u4f9d\u8d56\u3002\u5bf9\u4e8e\u6587\u672c\u7684\u9519\u522b\u5b57\uff0c\u53d8\u5f62\u8bcd\u7b49\u4fe1\u606f\uff0c\u9700\u8981\u5728\u9884\u5904\u7406\u9636\u6bb5\u4e88\u4ee5\u89e3\u51b3\uff0c\u5206\u8bcd\u7b97\u6cd5\u7684\u9009\u62e9\uff0c\u672a\u767b\u5f55\u8bcd\u4ee5\u53ca\u6b67\u4e49\u8bcd\u7684\u8bc6\u522b\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u5bf9\u4e8e\u5173\u952e\u8bcd\u7a81\u63d0\u53d6\u4f1a\u53c8\u5f88\u5927\u7684\u5f71\u54cd\u3002 \u5173\u952e\u8bcd\u63d0\u53d6\u662f\u4e00\u4e2a\u770b\u4f3c\u7b80\u5355\uff0c\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u5374\u5341\u5206\u68d8\u624b\u7684\u4efb\u52a1\uff0c\u4ece\u73b0\u6709\u7684\u7b97\u6cd5\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u5de5\u7a0b\u4f18\u5316\uff0c\u8fbe\u89c2\u6570\u636e\u5728\u8fd9\u65b9\u9762\u505a\u4e86\u5f88\u5927\u7684\u52aa\u529b\u5e76\u4e14\u53d6\u5f97\u4e86\u4e0d\u9519\u7684\u6548\u679c\u3002 NO.5 \u603b\u7ed3 \u00b6 \u672c\u6587\u4ecb\u7ecd\u4e86\u4e09\u79cd\u5e38\u7528\u7684\u65e0\u76d1\u7763\u7684\u5173\u952e\u8bcd\u63d0\u53d6\u7b97\u6cd5\uff0c\u5e76\u4ecb\u7ecd\u4e86\u5176\u4f18\u7f3a\u70b9\u3002\u5173\u952e\u8bcd\u63d0\u53d6\u5728\u6587\u672c\u6316\u6398\u9886\u57df\u5177\u6709\u5f88\u5e7f\u9614\u7684\u5e94\u7528\uff0c\u73b0\u6709\u7684\u65b9\u6cd5\u4e5f\u5b58\u5728\u4e00\u5b9a\u7684\u95ee\u9898\uff0c\u6211\u4eec\u4f9d\u7136\u4f1a\u5728\u5173\u952e\u8bcd\u63d0\u53d6\u7684\u95ee\u9898\u4e0a\u7ee7\u7eed\u52aa\u529b\u7814\u7a76\uff0c\u4e5f\u6b22\u8fce\u5927\u5bb6\u79ef\u6781\u4ea4\u6d41\u3002 \u53c2\u8003\u6587\u732e \u00b6 [1] TextRank\u7b97\u6cd5\u63d0\u53d6\u5173\u952e\u8bcd\u548c\u6458\u8981http://xiaosheng.me/2017/04/08/article49/ [2] Page L, Brin S, Motwani R,et al. The PageRank citation ranking: Bringing order to the web[R]. StanfordInfoLab, 1999. [3] \u5218\u77e5\u8fdc. \u57fa\u4e8e\u6587\u6863\u4e3b\u9898\u7ed3\u6784\u7684\u5173\u952e\u8bcd\u62bd\u53d6\u65b9\u6cd5\u7814\u7a76[D]. \u5317\u4eac: \u6e05\u534e\u5927\u5b66, 2011. [4] tf-idf\uff0c https://zh.wikipedia.org/zh-hans/Tf-idf [5] \u4e00\u6587\u8be6\u89e3\u673a\u5668\u9886\u57df\u7684LDA\u4e3b\u9898\u6a21\u578b https://zhuanlan.zhihu.com/p/31470216 [6] Blei D M, Ng A Y, Jordan MI. Latent dirichlet allocation[J]. Journal of machine Learning research, 2003,3(Jan): 993-1022. [7] \u8d75\u4eac\u80dc, \u6731\u5de7\u660e, \u5468\u56fd\u680b, \u7b49. \u81ea\u52a8\u5173\u952e\u8bcd\u62bd\u53d6\u7814\u7a76\u7efc\u8ff0[J]. \u8f6f\u4ef6\u5b66\u62a5, 2017,28(9): 2431-2449. \u4f5c\u8005\u7b80\u4ecb \u97e9\u4f1f\uff1a\u8fbe\u89c2\u6570\u636e\u6570\u636e\u6316\u6398\u5de5\u7a0b\u5e08\uff0c\u8d1f\u8d23\u8fbe\u89c2\u6570\u636e\u6587\u672c\u65b9\u9762\u7684\u6316\u6398\u4e0e\u5e94\u7528\u3002\u4e3b\u8981\u53c2\u4e0e\u8fbe\u89c2\u6570\u636e\u6807\u7b7e\u63d0\u53d6\u4e0e\u6587\u672c\u5206\u7c7b\u7cfb\u7edf\u7684\u6784\u5efa\u4e0e\u5b9e\u73b0\uff0c\u5bf9\u6df1\u5ea6\u5b66\u4e60\uff0cNLP\u6570\u636e\u6316\u6398\u9886\u57df\u6709\u6d53\u539a\u5174\u8da3\u3002","title":"\u6587\u672c\u5173\u952e\u8bcd\u63d0\u53d6"},{"location":"pages/nlp/nlpinfo/keywords_extract/#\u5982\u4f55\u505a\u597d\u6587\u672c\u5173\u952e\u8bcd\u63d0\u53d6\u4ece\u4e09\u79cd\u7b97\u6cd5\u8bf4\u8d77","text":"\u5728\u81ea\u7136\u8bed\u8a00\u5904\u7406\u9886\u57df\uff0c\u5904\u7406\u6d77\u91cf\u7684\u6587\u672c\u6587\u4ef6\u6700\u5173\u952e\u7684\u662f\u8981\u628a\u7528\u6237\u6700\u5173\u5fc3\u7684\u95ee\u9898\u63d0\u53d6\u51fa\u6765\u3002 \u800c\u65e0\u8bba\u662f\u5bf9\u4e8e\u957f\u6587\u672c\u8fd8\u662f\u77ed\u6587\u672c\uff0c\u5f80\u5f80\u53ef\u4ee5\u901a\u8fc7\u51e0\u4e2a\u5173\u952e\u8bcd\u7aa5\u63a2\u6574\u4e2a\u6587\u672c\u7684\u4e3b\u9898\u601d\u60f3\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u4e0d\u7ba1\u662f\u57fa\u4e8e\u6587\u672c\u7684\u63a8\u8350\u8fd8\u662f\u57fa\u4e8e\u6587\u672c\u7684\u641c\u7d22\uff0c\u5bf9\u4e8e\u6587\u672c\u5173\u952e\u8bcd\u7684\u4f9d\u8d56\u4e5f\u5f88\u5927\uff0c\u5173\u952e\u8bcd\u63d0\u53d6\u7684\u51c6\u786e\u7a0b\u5ea6\u76f4\u63a5\u5173\u7cfb\u5230\u63a8\u8350\u7cfb\u7edf\u6216\u8005\u641c\u7d22\u7cfb\u7edf\u7684\u6700\u7ec8\u6548\u679c\u3002\u56e0\u6b64\uff0c\u5173\u952e\u8bcd\u63d0\u53d6\u5728\u6587\u672c\u6316\u6398\u9886\u57df\u662f\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u90e8\u5206\u3002 \u5173\u4e8e\u6587\u672c\u7684\u5173\u952e\u8bcd\u63d0\u53d6\u65b9\u6cd5\u5206\u4e3a\u6709\u76d1\u7763\u3001\u534a\u76d1\u7763\u548c\u65e0\u76d1\u7763\u4e09\u79cd\uff1a 1 \u6709\u76d1\u7763\u7684\u5173\u952e\u8bcd\u62bd\u53d6\u7b97\u6cd5 \u5b83\u662f\u5efa\u5173\u952e\u8bcd\u62bd\u53d6\u7b97\u6cd5\u770b\u4f5c\u662f\u4e8c\u5206\u7c7b\u95ee\u9898\uff0c\u5224\u65ad\u6587\u6863\u4e2d\u7684\u8bcd\u6216\u8005\u77ed\u8bed\u662f\u6216\u8005\u4e0d\u662f\u5173\u952e\u8bcd\u3002\u65e2\u7136\u662f\u5206\u7c7b\u95ee\u9898\uff0c\u5c31\u9700\u8981\u63d0\u4f9b\u5df2\u7ecf\u6807\u6ce8\u597d\u7684\u8bad\u7ec3\u8bed\u6599\uff0c\u5229\u7528\u8bad\u7ec3\u8bed\u6599\u8bad\u7ec3\u5173\u952e\u8bcd\u63d0\u53d6\u6a21\u578b\uff0c\u6839\u636e\u6a21\u578b\u5bf9\u9700\u8981\u62bd\u53d6\u5173\u952e\u8bcd\u7684\u6587\u6863\u8fdb\u884c\u5173\u952e\u8bcd\u62bd\u53d6","title":"\u5982\u4f55\u505a\u597d\u6587\u672c\u5173\u952e\u8bcd\u63d0\u53d6\uff1f\u4ece\u4e09\u79cd\u7b97\u6cd5\u8bf4\u8d77"},{"location":"pages/nlp/nlpinfo/keywords_extract/#2-\u534a\u76d1\u7763\u7684\u5173\u952e\u8bcd\u63d0\u53d6\u7b97\u6cd5","text":"\u53ea\u9700\u8981\u5c11\u91cf\u7684\u8bad\u7ec3\u6570\u636e\uff0c\u5229\u7528\u8fd9\u4e9b\u8bad\u7ec3\u6570\u636e\u6784\u5efa\u5173\u952e\u8bcd\u62bd\u53d6\u6a21\u578b\uff0c\u7136\u540e\u4f7f\u7528\u6a21\u578b\u5bf9\u65b0\u7684\u6587\u672c\u8fdb\u884c\u5173\u952e\u8bcd\u63d0\u53d6\uff0c\u5bf9\u4e8e\u8fd9\u4e9b\u5173\u952e\u8bcd\u8fdb\u884c\u4eba\u5de5\u8fc7\u6ee4\uff0c\u5c06\u8fc7\u6ee4\u5f97\u5230\u7684\u5173\u952e\u8bcd\u52a0\u5165\u8bad\u7ec3\u96c6\uff0c\u91cd\u65b0\u8bad\u7ec3\u6a21\u578b\u3002","title":"2 \u534a\u76d1\u7763\u7684\u5173\u952e\u8bcd\u63d0\u53d6\u7b97\u6cd5"},{"location":"pages/nlp/nlpinfo/keywords_extract/#3-\u65e0\u76d1\u7763\u7684\u65b9\u6cd5","text":"\u4e0d\u9700\u8981\u4eba\u5de5\u6807\u6ce8\u7684\u8bed\u6599\uff0c\u5229\u7528\u67d0\u4e9b\u65b9\u6cd5\u53d1\u73b0\u6587\u672c\u4e2d\u6bd4\u8f83\u91cd\u8981\u7684\u8bcd\u4f5c\u4e3a\u5173\u952e\u8bcd\uff0c\u8fdb\u884c\u5173\u952e\u8bcd\u62bd\u53d6\u3002 \u6709\u76d1\u7763\u7684\u6587\u672c\u5173\u952e\u8bcd\u63d0\u53d6\u7b97\u6cd5\u9700\u8981\u9ad8\u6602\u7684\u4eba\u5de5\u6210\u672c\uff0c\u56e0\u6b64\u73b0\u6709\u7684\u6587\u672c\u5173\u952e\u8bcd\u63d0\u53d6\u4e3b\u8981\u91c7\u7528\u9002\u7528\u6027\u8f83\u5f3a\u7684\u65e0\u76d1\u7763\u5173\u952e\u8bcd\u62bd\u53d6\u3002 \u5176\u6587\u672c\u5173\u952e\u8bcd\u62bd\u53d6\u6d41\u7a0b\u5982\u4e0b\uff1a \u56fe 1 \u65e0\u76d1\u7763\u6587\u672c\u5173\u952e\u8bcd\u62bd\u53d6\u6d41\u7a0b\u56fe \u65e0\u76d1\u7763\u5173\u952e\u8bcd\u62bd\u53d6\u7b97\u6cd5\u53ef\u4ee5\u5206\u4e3a\u4e09\u5927\u7c7b\uff0c\u57fa\u4e8e\u7edf\u8ba1\u7279\u5f81\u7684\u5173\u952e\u8bcd\u62bd\u53d6\u3001\u57fa\u4e8e\u8bcd\u56fe\u6a21\u578b\u7684\u5173\u952e\u8bcd\u62bd\u53d6\u548c\u57fa\u4e8e\u4e3b\u9898\u6a21\u578b\u7684\u5173\u952e\u8bcd\u62bd\u53d6\u3002","title":"3 \u65e0\u76d1\u7763\u7684\u65b9\u6cd5"},{"location":"pages/nlp/nlpinfo/keywords_extract/#NO1-\u57fa\u4e8e\u7edf\u8ba1\u7279\u5f81\u7684\u5173\u952e\u8bcd\u63d0\u53d6\u7b97\u6cd5","text":"\u57fa\u4e8e\u4e8e\u7edf\u8ba1\u7279\u5f81\u7684\u5173\u952e\u8bcd\u62bd\u53d6\u7b97\u6cd5\u7684\u601d\u60f3\u662f \u5229\u7528\u6587\u6863\u4e2d\u8bcd\u8bed\u7684\u7edf\u8ba1\u4fe1\u606f\u62bd\u53d6\u6587\u6863\u7684\u5173\u952e\u8bcd\u3002 \u901a\u5e38\u5c06\u6587\u672c\u7ecf\u8fc7\u9884\u5904\u7406\u5f97\u5230\u5019\u9009\u8bcd\u8bed\u7684\u96c6\u5408\uff0c\u7136\u540e\u91c7\u7528\u7279\u5f81\u503c\u91cf\u5316\u7684\u65b9\u5f0f\u4ece\u5019\u9009\u96c6\u5408\u4e2d\u5f97\u5230\u5173\u952e\u8bcd\u3002\u57fa\u4e8e\u7edf\u8ba1\u7279\u5f81\u7684\u5173\u952e\u8bcd\u62bd\u53d6\u65b9\u6cd5\u7684\u5173\u952e\u662f\u91c7\u7528\u4ec0\u4e48\u6837\u7684\u7279\u5f81\u503c\u91cf\u5316\u6307\u6807\u7684\u65b9\u5f0f\uff0c\u76ee\u524d\u5e38\u7528\u7684\u6709\u4e09\u7c7b\uff1a 1 \u57fa\u4e8e\u8bcd\u6743\u91cd\u7684\u7279\u5f81\u91cf\u5316 \u57fa\u4e8e\u8bcd\u6743\u91cd\u7684\u7279\u5f81\u91cf\u5316\u4e3b\u8981\u5305\u62ec\u8bcd\u6027\u3001\u8bcd\u9891\u3001\u9006\u5411\u6587\u6863\u9891\u7387\u3001\u76f8\u5bf9\u8bcd\u9891\u3001\u8bcd\u957f\u7b49\u3002 2 \u57fa\u4e8e\u8bcd\u7684\u6587\u6863\u4f4d\u7f6e\u7684\u7279\u5f81\u91cf\u5316 \u8fd9\u79cd\u7279\u5f81\u91cf\u5316\u65b9\u5f0f\u662f\u6839\u636e\u6587\u7ae0\u4e0d\u540c\u4f4d\u7f6e\u7684\u53e5\u5b50\u5bf9\u6587\u6863\u7684\u91cd\u8981\u6027\u4e0d\u540c\u7684\u5047\u8bbe\u6765\u8fdb\u884c\u7684\u3002\u901a\u5e38\uff0c\u6587\u7ae0\u7684\u524dN\u4e2a\u8bcd\u3001\u540eN\u4e2a\u8bcd\u3001\u6bb5\u9996\u3001\u6bb5\u5c3e\u3001\u6807\u9898\u3001\u5f15\u8a00\u7b49\u4f4d\u7f6e\u7684\u8bcd\u5177\u6709\u4ee3\u8868\u6027\uff0c\u8fd9\u4e9b\u8bcd\u4f5c\u4e3a\u5173\u952e\u8bcd\u53ef\u4ee5\u8868\u8fbe\u6574\u4e2a\u7684\u4e3b\u9898\u3002 3 \u57fa\u4e8e\u8bcd\u7684\u5173\u8054\u4fe1\u606f\u7684\u7279\u5f81\u91cf\u5316 \u8bcd\u7684\u5173\u8054\u4fe1\u606f\u662f\u6307\u8bcd\u4e0e\u8bcd\u3001\u8bcd\u4e0e\u6587\u6863\u7684\u5173\u8054\u7a0b\u5ea6\u4fe1\u606f\uff0c\u5305\u62ec\u4e92\u4fe1\u606f\u3001hits\u503c\u3001\u8d21\u732e\u5ea6\u3001\u4f9d\u5b58\u5ea6\u3001TF-IDF\u503c\u7b49\u3002 \u4e0b\u9762\u4ecb\u7ecd\u51e0\u79cd\u5e38\u7528\u7684\u7279\u5f81\u503c\u91cf\u5316\u6307\u6807\u3002","title":"NO.1 \u57fa\u4e8e\u7edf\u8ba1\u7279\u5f81\u7684\u5173\u952e\u8bcd\u63d0\u53d6\u7b97\u6cd5"},{"location":"pages/nlp/nlpinfo/keywords_extract/#\u8bcd\u6027","text":"\u8bcd\u6027\u65f6\u901a\u8fc7\u5206\u8bcd\u3001\u8bed\u6cd5\u5206\u6790\u540e\u5f97\u5230\u7684\u7ed3\u679c\u3002\u73b0\u6709\u7684\u5173\u952e\u8bcd\u4e2d\uff0c\u7edd\u5927\u591a\u6570\u5173\u952e\u8bcd\u4e3a\u540d\u8bcd\u6216\u8005\u52a8\u540d\u8bcd\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u540d\u8bcd\u4e0e\u5176\u4ed6\u8bcd\u6027\u76f8\u6bd4\u66f4\u80fd\u8868\u8fbe\u4e00\u7bc7\u6587\u7ae0\u7684\u4e3b\u8981\u601d\u60f3\u3002\u4f46\u662f\uff0c\u8bcd\u6027\u4f5c\u4e3a\u7279\u5f81\u91cf\u5316\u7684\u6307\u6807\uff0c\u4e00\u822c\u4e0e\u5176\u4ed6\u6307\u6807\u7ed3\u5408\u4f7f\u7528\u3002","title":"\u8bcd\u6027"},{"location":"pages/nlp/nlpinfo/keywords_extract/#\u8bcd\u9891","text":"\u8bcd\u9891\u8868\u793a\u4e00\u4e2a\u8bcd\u5728\u6587\u672c\u4e2d\u51fa\u73b0\u7684\u9891\u7387\u3002\u4e00\u822c\u6211\u4eec\u8ba4\u4e3a\uff0c\u5982\u679c\u4e00\u4e2a\u8bcd\u5728\u6587\u672c\u4e2d\u51fa\u73b0\u7684\u8d8a\u662f\u9891\u7e41\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8bcd\u5c31\u8d8a\u6709\u53ef\u80fd\u4f5c\u4e3a\u6587\u7ae0\u7684\u6838\u5fc3\u8bcd\u3002\u8bcd\u9891\u7b80\u5355\u5730\u7edf\u8ba1\u4e86\u8bcd\u5728\u6587\u672c\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u4f46\u662f\uff0c\u53ea\u4f9d\u9760\u8bcd\u9891\u6240\u5f97\u5230\u7684\u5173\u952e\u8bcd\u6709\u5f88\u5927\u7684\u4e0d\u786e\u5b9a\u6027\uff0c\u5bf9\u4e8e\u957f\u5ea6\u6bd4\u8f83\u957f\u7684\u6587\u672c\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u4f1a\u6709\u5f88\u5927\u7684\u566a\u97f3\u3002","title":"\u8bcd\u9891"},{"location":"pages/nlp/nlpinfo/keywords_extract/#\u4f4d\u7f6e\u4fe1\u606f","text":"\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u8bcd\u51fa\u73b0\u7684\u4f4d\u7f6e\u5bf9\u4e8e\u8bcd\u6765\u8bf4\u6709\u7740\u5f88\u5927\u7684\u4ef7\u503c\u3002\u4f8b\u5982\uff0c\u6807\u9898\u3001\u6458\u8981\u672c\u8eab\u5c31\u662f\u4f5c\u8005\u6982\u62ec\u51fa\u7684\u6587\u7ae0\u7684\u4e2d\u5fc3\u601d\u60f3\uff0c\u56e0\u6b64\u51fa\u73b0\u5728\u8fd9\u4e9b\u5730\u65b9\u7684\u8bcd\u5177\u6709\u4e00\u5b9a\u7684\u4ee3\u8868\u6027\uff0c\u66f4\u53ef\u80fd\u6210\u4e3a\u5173\u952e\u8bcd\u3002\u4f46\u662f\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u4f5c\u8005\u7684\u4e60\u60ef\u4e0d\u540c\uff0c\u5199\u4f5c\u65b9\u5f0f\u4e0d\u540c\uff0c\u5173\u952e\u53e5\u5b50\u7684\u4f4d\u7f6e\u4e5f\u4f1a\u6709\u6240\u4e0d\u540c\uff0c\u6240\u4ee5\u8fd9\u4e5f\u662f\u4e00\u79cd\u5f88\u5bbd\u6cdb\u7684\u5f97\u5230\u5173\u952e\u8bcd\u7684\u65b9\u6cd5\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u4e0d\u4f1a\u5355\u72ec\u4f7f\u7528\u3002","title":"\u4f4d\u7f6e\u4fe1\u606f"},{"location":"pages/nlp/nlpinfo/keywords_extract/#\u4e92\u4fe1\u606f","text":"\u4e92\u4fe1\u606f\u662f\u4fe1\u606f\u8bba\u4e2d\u6982\u5ff5\uff0c\u662f\u53d8\u91cf\u4e4b\u95f4\u76f8\u4e92\u4f9d\u8d56\u7684\u5ea6\u91cf\u3002\u4e92\u4fe1\u606f\u5e76\u4e0d\u5c40\u9650\u4e8e\u5b9e\u503c\u968f\u673a\u53d8\u91cf\uff0c\u5b83\u66f4\u52a0\u4e00\u822c\u4e14\u51b3\u5b9a\u7740\u8054\u5408\u5206\u5e03 p(X,Y) \u548c\u5206\u89e3\u7684\u8fb9\u7f18\u5206\u5e03\u7684\u4e58\u79ef p(X)p(Y) \u7684\u76f8\u4f3c\u7a0b\u5ea6\u3002\u4e92\u4fe1\u606f\u7684\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a \u5176\u4e2d\uff0cp(x,y)\u662fX\u548cY\u7684\u8054\u5408\u6982\u7387\u5206\u5e03\u51fd\u6570\uff0cp(x)\u548cp(y)\u5206\u522b\u4e3aX\u548cY\u7684\u8fb9\u7f18\u6982\u7387\u5206\u5e03\u51fd\u6570\u3002 \u5f53\u4f7f\u7528\u4e92\u4fe1\u606f\u4f5c\u4e3a\u5173\u952e\u8bcd\u63d0\u53d6\u7684\u7279\u5f81\u91cf\u5316\u65f6\uff0c\u5e94\u7528\u6587\u672c\u7684\u6b63\u6587\u548c\u6807\u9898\u6784\u9020PAT\u6811\uff0c\u7136\u540e\u8ba1\u7b97\u5b57\u7b26\u4e32\u5de6\u53f3\u7684\u4e92\u4fe1\u606f\u3002","title":"\u4e92\u4fe1\u606f"},{"location":"pages/nlp/nlpinfo/keywords_extract/#\u8bcd\u8de8\u5ea6","text":"\u8bcd\u8de8\u5ea6\u662f\u6307\u4e00\u4e2a\u8bcd\u6216\u8005\u77ed\u8bed\u5b57\u6587\u4e2d\u9996\u6b21\u51fa\u73b0\u548c\u672b\u6b21\u51fa\u73b0\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u8bcd\u8de8\u5ea6\u8d8a\u5927\u8bf4\u660e\u8fd9\u4e2a\u8bcd\u5bf9\u6587\u672c\u8d8a\u91cd\u8981\uff0c\u53ef\u4ee5\u53cd\u6620\u6587\u672c\u7684\u4e3b\u9898\u3002\u4e00\u4e2a\u8bcd\u7684\u8de8\u5ea6\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a \u5176\u4e2d\uff0c \u8868\u793a\u8bcdi\u5728\u6587\u672c\u4e2d\u6700\u540e\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c \u8868\u793a\u8bcd i \u5728\u6587\u672c\u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0csum\u8868\u793a\u6587\u672c\u4e2d\u8bcd\u7684\u603b\u6570\u3002 \u8bcd\u8de8\u5ea6\u88ab\u4f5c\u4e3a\u63d0\u53d6\u5173\u952e\u8bcd\u7684\u65b9\u6cd5\u662f\u56e0\u4e3a\u5728\u73b0\u5b9e\u4e2d\uff0c\u6587\u672c\u4e2d\u603b\u662f\u6709\u5f88\u591a\u566a\u58f0\uff08\u6307\u4e0d\u662f\u5173\u952e\u8bcd\u7684\u90a3\u4e9b\u8bcd\uff09\uff0c\u4f7f\u7528\u8bcd\u8de8\u5ea6\u53ef\u4ee5\u51cf\u5c11\u8fd9\u4e9b\u566a\u58f0\u3002","title":"\u8bcd\u8de8\u5ea6"},{"location":"pages/nlp/nlpinfo/keywords_extract/#TF-IDF\u503c","text":"\u4e00\u4e2a\u8bcd\u7684TF\u662f\u6307\u8fd9\u4e2a\u8bcd\u5728\u6587\u6863\u4e2d\u51fa\u73b0\u7684\u9891\u7387\uff0c\u5047\u8bbe\u4e00\u4e2a\u8bcdw\u5728\u6587\u672c\u4e2d\u51fa\u73b0\u4e86m\u6b21\uff0c\u800c\u6587\u672c\u4e2d\u8bcd\u7684\u603b\u6570\u4e3an\uff0c\u90a3\u4e48 \u3002\u4e00\u4e2a\u8bcd\u7684IDF\u662f\u6839\u636e\u8bed\u6599\u5e93\u5f97\u51fa\u7684\uff0c\u8868\u793a\u8fd9\u4e2a\u8bcd\u5728\u6574\u4e2a\u8bed\u6599\u5e93\u4e2d\u51fa\u73b0\u7684\u9891\u7387\u3002\u5047\u8bbe\u6574\u4e2a\u8bed\u6599\u5e93\u4e2d\uff0c\u5305\u542b\u8bcdw\u7684\u6587\u672c\u4e00\u5171\u6709M\u7bc7\uff0c\u8bed\u6599\u5e93\u4e2d\u7684\u6587\u672c\u4e00\u5171\u6709N\u7bc7\uff0c\u5219 \u7531\u6b64\u53ef\u5f97\u8bcdw\u7684TF-IDF\u503c\u4e3a\uff1a TF-IDF\u7684\u4f18\u70b9\u662f\u5b9e\u73b0\u7b80\u5355\uff0c\u76f8\u5bf9\u5bb9\u6613\u7406\u89e3\u3002 \u4f46\u662f\uff0cTFIDF\u7b97\u6cd5\u63d0\u53d6\u5173\u952e\u8bcd\u7684\u7f3a\u70b9\u4e5f\u5f88\u660e\u663e\uff0c\u4e25\u91cd\u4f9d\u8d56\u8bed\u6599\u5e93\uff0c\u9700\u8981\u9009\u53d6\u8d28\u91cf\u8f83\u9ad8\u4e14\u548c\u6240\u5904\u7406\u6587\u672c\u76f8\u7b26\u7684\u8bed\u6599\u5e93\u8fdb\u884c\u8bad\u7ec3\u3002\u53e6\u5916\uff0c\u5bf9\u4e8eIDF\u6765\u8bf4\uff0c\u5b83\u672c\u8eab\u662f\u4e00\u79cd\u8bd5\u56fe\u6291\u5236\u566a\u58f0\u7684\u52a0\u6743\uff0c\u672c\u8eab\u503e\u5411\u4e8e\u6587\u672c\u4e2d\u9891\u7387\u5c0f\u7684\u8bcd\uff0c\u8fd9\u4f7f\u5f97TF-IDF\u7b97\u6cd5\u7684\u7cbe\u5ea6\u4e0d\u9ad8\u3002TF-IDF\u7b97\u6cd5\u8fd8\u6709\u4e00\u4e2a\u7f3a\u70b9\u5c31\u662f\u4e0d\u80fd\u53cd\u5e94\u8bcd\u7684\u4f4d\u7f6e\u4fe1\u606f\uff0c \u5728\u5bf9\u5173\u952e\u8bcd\u8fdb\u884c\u63d0\u53d6\u7684\u65f6\u5019\uff0c\u8bcd\u7684\u4f4d\u7f6e\u4fe1\u606f\uff0c\u4f8b\u5982\u6587\u672c\u7684\u6807\u9898\u3001\u6587\u672c\u7684\u9996\u53e5\u548c\u5c3e\u53e5\u7b49\u542b\u6709\u8f83\u91cd\u8981\u7684\u4fe1\u606f\uff0c\u5e94\u8be5\u8d4b\u4e88\u8f83\u9ad8\u7684\u6743\u91cd\u3002 \u57fa\u4e8e\u7edf\u8ba1\u7279\u5f81\u7684\u5173\u952e\u8bcd\u63d0\u53d6\u7b97\u6cd5\u901a\u8fc7\u4e0a\u9762\u7684\u4e00\u4e9b\u7279\u5f81\u91cf\u5316\u6307\u6807\u5c06\u5173\u952e\u8bcd\u8fdb\u884c\u6392\u5e8f\uff0c\u83b7\u53d6TopK\u4e2a\u8bcd\u4f5c\u4e3a\u5173\u952e\u8bcd\u3002 \u57fa\u4e8e\u7edf\u8ba1\u7279\u5f81\u7684\u5173\u952e\u8bcd\u7684\u91cd\u70b9\u5728\u4e8e\u7279\u5f81\u91cf\u5316\u6307\u6807\u7684\u8ba1\u7b97\uff0c\u4e0d\u540c\u7684\u91cf\u5316\u6307\u6807\u5f97\u5230\u7684\u7ed3\u679c\u4e5f\u4e0d\u5c3d\u76f8\u540c\u3002\u540c\u65f6\uff0c\u4e0d\u540c\u7684\u91cf\u5316\u6307\u6807\u4f5c\u4e3a\u4e5f\u6709\u5176\u5404\u81ea\u7684\u4f18\u7f3a\u70b9\uff0c\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u901a\u5e38\u662f\u91c7\u7528\u4e0d\u540c\u7684\u91cf\u5316\u6307\u6807\u76f8\u7ed3\u5408\u7684\u65b9\u5f0f\u5f97\u5230Topk\u4e2a\u8bcd\u4f5c\u4e3a\u5173\u952e\u8bcd\u3002","title":"TF-IDF\u503c"},{"location":"pages/nlp/nlpinfo/keywords_extract/#NO2-\u57fa\u4e8e\u8bcd\u56fe\u6a21\u578b\u7684\u5173\u952e\u8bcd\u62bd\u53d6\u7b97\u6cd5","text":"\u57fa\u4e8e\u8bcd\u56fe\u6a21\u578b\u7684\u5173\u952e\u8bcd\u62bd\u53d6\u9996\u5148\u8981\u6784\u5efa\u6587\u6863\u7684\u8bed\u8a00\u7f51\u7edc\u56fe\uff0c\u7136\u540e\u5bf9\u8bed\u8a00\u8fdb\u884c\u7f51\u7edc\u56fe\u5206\u6790\uff0c\u5728\u8fd9\u4e2a\u56fe\u4e0a\u5bfb\u627e\u5177\u6709\u91cd\u8981\u4f5c\u7528\u7684\u8bcd\u6216\u8005\u77ed\u8bed\uff0c\u8fd9\u4e9b\u77ed\u8bed\u5c31\u662f\u6587\u6863\u7684\u5173\u952e\u8bcd\u3002\u8bed\u8a00\u7f51\u7edc\u56fe\u4e2d\u8282\u70b9\u57fa\u672c\u4e0a\u90fd\u662f\u8bcd\uff0c\u6839\u636e\u8bcd\u7684\u94fe\u63a5\u65b9\u5f0f\u4e0d\u540c\uff0c\u8bed\u8a00\u7f51\u7edc\u7684\u4e3b\u8981\u5f62\u5f0f\u5206\u4e3a\u56db\u79cd\uff1a \u5171\u73b0\u7f51\u7edc\u56fe\u3001\u8bed\u6cd5\u7f51\u7edc\u56fe\u3001\u8bed\u4e49\u7f51\u7edc\u56fe\u548c\u5176\u4ed6\u7f51\u7edc\u56fe\u3002 \u5728\u8bed\u8a00\u7f51\u7edc\u56fe\u7684\u6784\u5efa\u8fc7\u7a0b\u4e2d\uff0c\u90fd\u662f\u4ee5\u9884\u5904\u7406\u8fc7\u540e\u7684\u8bcd\u4f5c\u4e3a\u8282\u70b9\uff0c\u8bcd\u4e0e\u8bcd\u4e4b\u95f4\u7684\u5173\u7cfb\u4f5c\u4e3a\u8fb9\u3002\u8bed\u8a00\u7f51\u7edc\u56fe\u4e2d\uff0c\u8fb9\u4e0e\u8fb9\u4e4b\u95f4\u7684\u6743\u91cd\u4e00\u822c\u7528\u8bcd\u4e4b\u95f4\u7684\u5173\u8054\u5ea6\u6765\u8868\u793a\u3002\u5728\u4f7f\u7528\u8bed\u8a00\u7f51\u7edc\u56fe\u83b7\u5f97\u5173\u952e\u8bcd\u7684\u65f6\u5019\uff0c\u9700\u8981\u8bc4\u4f30\u5404\u4e2a\u8282\u70b9\u7684\u91cd\u8981\u6027\uff0c\u7136\u540e\u6839\u636e\u91cd\u8981\u6027\u5c06\u8282\u70b9\u8fdb\u884c\u6392\u5e8f\uff0c\u9009\u53d6TopK\u4e2a\u8282\u70b9\u6240\u4ee3\u8868\u7684\u8bcd\u4f5c\u4e3a\u5173\u952e\u8bcd\u3002\u8282\u70b9\u7684\u91cd\u8981\u6027\u8ba1\u7b97\u65b9\u6cd5\u6709\u4ee5\u4e0b\u51e0\u79cd\u65b9\u6cd5\u3002","title":"NO.2 \u57fa\u4e8e\u8bcd\u56fe\u6a21\u578b\u7684\u5173\u952e\u8bcd\u62bd\u53d6\u7b97\u6cd5"},{"location":"pages/nlp/nlpinfo/keywords_extract/#1-\u7efc\u5408\u7279\u5f81\u6cd5","text":"\u7efc\u5408\u7279\u5f81\u6cd5\u4e5f\u53eb\u793e\u4f1a\u7f51\u7edc\u4e2d\u5fc3\u6027\u5206\u6790\u65b9\u6cd5\uff0c\u8fd9\u79cd\u65b9\u6cd5\u7684\u6838\u5fc3\u601d\u60f3\u662f\u8282\u70b9\u4e2d\u91cd\u8981\u6027\u7b49\u4e8e\u8282\u70b9\u7684\u663e\u8457\u6027\uff0c\u4ee5\u4e0d\u7834\u574f\u7f51\u7edc\u7684\u6574\u4f53\u6027\u4e3a\u57fa\u7840\u3002\u6b64\u65b9\u6cd5\u5c31\u662f\u4ece\u7f51\u7edc\u7684\u5c40\u90e8\u5c5e\u6027\u548c\u5168\u5c40\u5c5e\u6027\u89d2\u5ea6\u53bb\u5b9a\u91cf\u5206\u6790\u7f51\u7edc\u7ed3\u6784\u7684\u62d3\u6251\u6027\u8d28\uff0c\u5e38\u7528\u7684\u5b9a\u91cf\u8ba1\u7b97\u65b9\u6cd5\u5982\u4e0b\u3002","title":"1 \u7efc\u5408\u7279\u5f81\u6cd5"},{"location":"pages/nlp/nlpinfo/keywords_extract/#\u5ea6","text":"\u8282\u70b9\u7684\u5ea6\u662f\u6307\u4e0e\u8be5\u8282\u70b9\u76f4\u63a5\u5411\u91cf\u7684\u8282\u70b9\u6570\u76ee\uff0c\u8868\u793a\u7684\u662f\u8282\u70b9\u7684\u5c40\u90e8\u5f71\u54cd\u529b\uff0c\u5bf9\u4e8e\u975e\u52a0\u6743\u7f51\u7edc\uff0c\u8282\u70b9\u7684\u5ea6\u4e3a\uff1a \u5bf9\u4e8e\u52a0\u6743\u7f51\u7edc\uff0c\u8282\u70b9\u7684\u5ea6\u53c8\u79f0\u4e3a\u8282\u70b9\u7684\u5f3a\u5ea6\uff0c\u8ba1\u7b97\u516c\u5f0f\u4e3a\uff1a","title":"\u5ea6"},{"location":"pages/nlp/nlpinfo/keywords_extract/#\u63a5\u8fd1\u6027","text":"\u8282\u70b9\u7684\u63a5\u8fd1\u6027\u662f\u6307\u8282\u70b9\u5230\u5176\u4ed6\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u4e4b\u548c\u7684\u5012\u6570\uff0c\u8868\u793a\u7684\u662f\u4fe1\u606f\u4f20\u64ad\u7684\u7d27\u5bc6\u7a0b\u5ea6\uff0c\u5176\u8ba1\u7b97\u516c\u5f0f\u4e3a\uff1a","title":"\u63a5\u8fd1\u6027"},{"location":"pages/nlp/nlpinfo/keywords_extract/#\u7279\u5f81\u5411\u91cf","text":"\u7279\u5f81\u5411\u91cf\u7684\u601d\u60f3\u662f\u8282\u70b9\u7684\u4e2d\u5fc3\u5316\u6d4b\u8bd5\u503c\u7531\u5468\u56f4\u6240\u6709\u8fde\u63a5\u7684\u8282\u70b9\u51b3\u5b9a\uff0c\u5373\u4e00\u4e2a\u8282\u70b9\u7684\u4e2d\u5fc3\u5316\u6307\u6807\u5e94\u8be5\u7b49\u4e8e\u5176\u76f8\u90bb\u8282\u70b9\u7684\u4e2d\u5fc3\u5316\u6307\u6807\u4e4b\u7ebf\u6027\u53e0\u52a0\uff0c\u8868\u793a\u7684\u662f\u901a\u8fc7\u4e0e\u5177\u6709\u9ad8\u5ea6\u503c\u7684\u76f8\u90bb\u8282\u70b9\u6240\u83b7\u5f97\u7684\u95f4\u63a5\u5f71\u54cd\u529b\u3002\u7279\u5f81\u5411\u91cf\u7684\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a","title":"\u7279\u5f81\u5411\u91cf"},{"location":"pages/nlp/nlpinfo/keywords_extract/#\u96c6\u805a\u7cfb\u6570","text":"\u8282\u70b9\u7684\u96c6\u805a\u7cfb\u6570\u662f\u5b83\u7684\u76f8\u90bb\u7684\u8282\u70b9\u4e4b\u95f4\u7684\u8fde\u63a5\u6570\u4e0e\u4ed6\u4eec\u6240\u6709\u53ef\u80fd\u5b58\u5728\u6765\u94fe\u63a5\u7684\u6570\u91cf\u7684\u6bd4\u503c\uff0c\u7528\u6765\u63cf\u8ff0\u56fe\u7684\u9876\u70b9\u4e4b\u95f4\u9636\u7ea7\u6210\u56e2\u7684\u7a0b\u5ea6\u7684\u7cfb\u6570\uff0c\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a","title":"\u96c6\u805a\u7cfb\u6570"},{"location":"pages/nlp/nlpinfo/keywords_extract/#\u5e73\u5747\u6700\u77ed\u8def\u5f84","text":"\u8282\u70b9\u7684\u5e73\u5c40\u6700\u77ed\u8def\u5f84\u4e5f\u53eb\u7d27\u5bc6\u4e2d\u5fc3\u6027\uff0c\u662f\u8282\u70b9\u7684\u6240\u6709\u6700\u77ed\u8def\u5f84\u4e4b\u548c\u7684\u5e73\u5747\u503c\uff0c\u8868\u793a\u7684\u662f\u4e00\u4e2a\u8282\u70b9\u4f20\u64ad\u4fe1\u606f\u65f6\u5bf9\u5176\u4ed6\u8282\u70b9\u7684\u4f9d\u8d56\u7a0b\u5ea6\u3002\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u79bb\u5176\u4ed6\u8282\u70b9\u8d8a\u8fd1\uff0c\u90a3\u4e48\u4ed6\u4f20\u64ad\u4fe1\u606f\u7684\u65f6\u5019\u4e5f\u5c31\u8d8a\u4e0d\u9700\u8981\u4f9d\u8d56\u5176\u4ed6\u4eba\u3002\u4e00\u4e2a\u8282\u70b9\u5230\u7f51\u7edc\u4e2d\u5404\u70b9\u7684\u8ddd\u79bb\u90fd\u5f88\u77ed\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u5c31\u4e0d\u4f1a\u53d7\u5236\u4e8e\u5176\u4ed6\u8282\u70b9\u3002\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a \u56e0\u4e3a\u6bcf\u4e2a\u7b97\u6cd5\u7684\u4fa7\u91cd\u65b9\u5411\u7684\u4e0d\u540c\uff0c\u5728\u5b9e\u9645\u7684\u95ee\u9898\u4e2d\u6240\u9009\u53d6\u7684\u5b9a\u91cf\u5206\u6790\u65b9\u6cd5\u4e5f\u4f1a\u4e0d\u4e00\u6837\u3002\u540c\u65f6\uff0c\u5bf9\u4e8e\u5173\u952e\u8bcd\u63d0\u53d6\u6765\u8bf4\uff0c\u4e5f\u53ef\u4ee5\u548c\u4e0a\u4e00\u8282\u6240\u63d0\u51fa\u7684\u7edf\u8ba1\u6cd5\u5f97\u5230\u7684\u8bcd\u7684\u6743\u91cd\uff0c\u4f8b\u5982\u8bcd\u6027\u7b49\u76f8\u7ed3\u5408\u6784\u5efa\u8bcd\u642d\u914d\u7f51\u7edc\uff0c\u7136\u540e\u5229\u7528\u4e0a\u8ff0\u65b9\u6cd5\u5f97\u5230\u5173\u952e\u8bcd\u3002","title":"\u5e73\u5747\u6700\u77ed\u8def\u5f84"},{"location":"pages/nlp/nlpinfo/keywords_extract/#2-\u7cfb\u7edf\u79d1\u5b66\u6cd5","text":"\u7cfb\u7edf\u79d1\u5b66\u6cd5\u8fdb\u884c\u4e2d\u5fc3\u6027\u5206\u6790\u7684\u601d\u60f3\u662f\u8282\u70b9\u91cd\u8981\u6027\u7b49\u4e8e\u8fd9\u4e2a\u8282\u70b9\u88ab\u5220\u9664\u540e\u5bf9\u4e8e\u6574\u4e2a\u8bed\u8a00\u7f51\u7edc\u56fe\u7684\u7834\u574f\u7a0b\u5ea6\u3002\u91cd\u8981\u7684\u8282\u70b9\u88ab\u5220\u9664\u540e\u4f1a\u5bf9\u7f51\u7edc\u7684\u5443\u8fde\u901a\u6027\u7b49\u4ea7\u751f\u53d8\u5316\u3002\u5982\u679c\u6211\u4eec\u5728\u7f51\u7edc\u56fe\u4e2d\u5220\u9664\u67d0\u4e00\u4e2a\u8282\u70b9\uff0c\u56fe\u7684\u67d0\u4e9b\u6307\u5b9a\u7279\u6027\u4ea7\u751f\u4e86\u6539\u53d8\uff0c\u53ef\u4ee5\u6839\u636e\u7279\u6027\u6539\u53d8\u7684\u5927\u5c0f\u83b7\u5f97\u8282\u70b9\u7684\u91cd\u8981\u6027\uff0c\u4ece\u800c\u5bf9\u8282\u70b9\u8fdb\u884c\u7b5b\u9009\u3002","title":"2 \u7cfb\u7edf\u79d1\u5b66\u6cd5"},{"location":"pages/nlp/nlpinfo/keywords_extract/#3-\u968f\u673a\u6e38\u8d70\u6cd5","text":"\u968f\u673a\u6e38\u8d70\u7b97\u6cd5\u65f6\u7f51\u7edc\u56fe\u4e2d\u4e00\u4e2a\u975e\u5e38\u8457\u540d\u7684\u7b97\u6cd5\uff0c\u5b83\u4ece\u7ed9\u5b9a\u56fe\u548c\u51fa\u53d1\u70b9\uff0c\u968f\u673a\u5730\u9009\u62e9\u90bb\u5c45\u8282\u70b9\u79fb\u52a8\u5230\u90bb\u5c45\u8282\u70b9\u4e0a\uff0c\u7136\u540e\u518d\u628a\u73b0\u5728\u7684\u8282\u70b9\u4f5c\u4e3a\u51fa\u53d1\u70b9\uff0c\u8fed\u4ee3\u4e0a\u8ff0\u8fc7\u7a0b\u3002 \u968f\u673a\u6e38\u8d70\u7b97\u6cd5\u4e00\u4e2a\u5f88\u51fa\u540d\u7684\u5e94\u7528\u662f\u5927\u540d\u9f0e\u9f0e\u7684PageRank\u7b97\u6cd5\uff0cPageRank\u7b97\u6cd5\u662f\u6574\u4e2agoogle\u641c\u7d22\u7684\u6838\u5fc3\u7b97\u6cd5\uff0c\u662f\u4e00\u79cd\u901a\u8fc7\u7f51\u9875\u4e4b\u95f4\u7684\u8d85\u94fe\u63a5\u6765\u8ba1\u7b97\u7f51\u9875\u91cd\u8981\u6027\u7684\u6280\u672f\uff0c\u5176\u5173\u952e\u7684\u601d\u60f3\u662f\u91cd\u8981\u6027\u4f20\u9012\u3002 \u5728\u5173\u952e\u8bcd\u63d0\u53d6\u9886\u57df\uff0c Mihalcea \u7b49\u4eba\u6240\u63d0\u51fa\u7684TextRank\u7b97\u6cd5\u5c31\u662f\u5728\u6587\u672c\u5173\u952e\u8bcd\u63d0\u53d6\u9886\u57df\u501f\u9274\u4e86\u8fd9\u79cd\u601d\u60f3\u3002 PageRank\u7b97\u6cd5\u5c06\u6574\u4e2a\u4e92\u8054\u7f51\u770b\u4f5c\u4e00\u5f20\u6709\u5411\u56fe\uff0c\u7f51\u9875\u662f\u56fe\u4e2d\u7684\u8282\u70b9\uff0c\u800c\u7f51\u9875\u4e4b\u95f4\u7684\u94fe\u63a5\u5c31\u662f\u56fe\u4e2d\u7684\u8fb9\u3002\u6839\u636e\u91cd\u8981\u6027\u4f20\u9012\u7684\u601d\u60f3\uff0c\u5982\u679c\u4e00\u4e2a\u5927\u578b\u7f51\u7ad9A\u542b\u6709\u4e00\u4e2a\u8d85\u94fe\u63a5\u6307\u5411\u4e86\u7f51\u9875B\uff0c\u90a3\u4e48\u7f51\u9875B\u7684\u91cd\u8981\u6027\u6392\u540d\u4f1a\u6839\u636eA\u7684\u91cd\u8981\u6027\u6765\u63d0\u5347\u3002\u7f51\u9875\u91cd\u8981\u6027\u7684\u4f20\u9012\u601d\u60f3\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u56fe 2 PageRank\u7b80\u5355\u63cf\u8ff0\uff08\u6765\u81eaPageRank\u8bba\u6587\uff09 \u5728PageRank\u7b97\u6cd5\u4e2d\uff0c\u6700\u4e3b\u8981\u7684\u662f\u5bf9\u4e8e\u521d\u59cb\u7f51\u9875\u91cd\u8981\u6027\uff08PR\u503c\uff09\u7684\u8ba1\u7b97\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u4e0a\u56fe\u4e2d\u7684\u7f51\u9875A\u7684\u91cd\u8981\u6027\u6211\u4eec\u662f\u65e0\u6cd5\u9884\u77e5\u7684\u3002\u4f46\u662f\uff0c\u5728\u539f\u59cb\u8bba\u6587\u4e2d\u7ed9\u51fa\u4e86\u4e00\u79cd\u8fed\u4ee3\u65b9\u6cd5\u6c42\u51fa\u8fd9\u4e2a\u91cd\u8981\u6027\uff0c\u8bba\u6587\u4e2d\u6307\u51fa\uff0c\u5e42\u6cd5\u6c42\u77e9\u9635\u7279\u5f81\u503c\u4e0e\u77e9\u9635\u7684\u521d\u59cb\u503c\u65e0\u5173\u3002\u90a3\u4e48\uff0c\u5c31\u53ef\u4ee5\u4e3a\u6bcf\u4e2a\u7f51\u9875\u968f\u673a\u7ed9\u4e00\u4e2a\u521d\u59cb\u503c\uff0c\u7136\u540e\u8fed\u4ee3\u5f97\u5230\u6536\u655b\u503c\uff0c\u5e76\u4e14\u6536\u655b\u503c\u4e0e\u521d\u59cb\u503c\u65e0\u5173\u3002 PageRank\u6c42\u7f51\u9875i\u7684PR\u503c\u8ba1\u7b97\u5982\u4e0b\uff1a \u5176\u4e2d\uff0cd\u4e3a\u963b\u5c3c\u7cfb\u6570\uff0c\u901a\u5e38\u4e3a0.85\u3002 \u662f\u6307\u5411\u7f51\u9875 i \u7684\u7f51\u9875\u96c6\u5408\u3002 \u662f\u6307\u7f51\u9875j\u4e2d\u7684\u94fe\u63a5\u6307\u5411\u7684\u96c6\u5408\uff0c \u662f\u6307\u96c6\u5408\u4e2d\u5143\u7d20\u7684\u4e2a\u6570\u3002 TextRank\u5728\u6784\u5efa\u56fe\u7684\u65f6\u5019\u5c06\u8282\u70b9\u7531\u7f51\u9875\u6539\u6210\u4e86\u53e5\u5b50\uff0c\u5e76\u4e3a\u8282\u70b9\u4e4b\u95f4\u7684\u8fb9\u5f15\u5165\u4e86\u6743\u503c\uff0c\u5176\u4e2d\u6743\u503c\u8868\u793a\u4e24\u4e2a\u53e5\u5b50\u7684\u76f8\u4f3c\u7a0b\u5ea6\u3002\u5176\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a \u516c\u5f0f\u4e2d\u7684 \u4e3a\u56fe\u4e2d\u8282\u70b9 \u548c\u7684\u8fb9 \u7684\u6743\u91cd\u3002\u5176\u4ed6\u7b26\u53f7\u4e0ePageRank\u516c\u5f0f\u76f8\u540c\u3002 TextRank\u7b97\u6cd5\u9664\u4e86\u505a\u6587\u672c\u5173\u952e\u8bcd\u63d0\u53d6\uff0c\u8fd8\u53ef\u4ee5\u505a\u6587\u672c\u6458\u8981\u63d0\u53d6\uff0c\u6548\u679c\u4e0d\u9519\u3002\u4f46\u662fTextRank\u7684\u8ba1\u7b97\u590d\u6742\u5ea6\u5f88\u9ad8\uff0c\u5e94\u7528\u4e0d\u5e7f\u3002","title":"3 \u968f\u673a\u6e38\u8d70\u6cd5"},{"location":"pages/nlp/nlpinfo/keywords_extract/#NO3-\u57fa\u4e8e\u4e3b\u9898\u6a21\u578b\u7684\u5173\u952e\u8bcd\u62bd\u53d6","text":"\u57fa\u4e8e\u4e3b\u9898\u5173\u952e\u8bcd\u63d0\u53d6\u7b97\u6cd5\u4e3b\u8981\u5229\u7528\u7684\u662f\u4e3b\u9898\u6a21\u578b\u4e2d\u5173\u4e8e\u4e3b\u9898\u7684\u5206\u5e03\u7684\u6027\u8d28\u8fdb\u884c\u5173\u952e\u8bcd\u63d0\u53d6\u3002\u7b97\u6cd5\u6b65\u9aa4\u5982\u4e0b\uff1a","title":"NO.3 \u57fa\u4e8e\u4e3b\u9898\u6a21\u578b\u7684\u5173\u952e\u8bcd\u62bd\u53d6"},{"location":"pages/nlp/nlpinfo/keywords_extract/#1-\u83b7\u53d6\u5019\u9009\u5173\u952e\u8bcd","text":"\u4ece\u6587\u7ae0\u4e2d\u83b7\u53d6\u5019\u9009\u5173\u952e\u8bcd\u3002\u5373\u5c06\u6587\u672c\u5206\u8bcd\uff0c\u4e5f\u53ef\u4ee5\u518d\u6839\u636e\u8bcd\u6027\u9009\u53d6\u5019\u9009\u5173\u952e\u8bcd\u3002","title":"1 \u83b7\u53d6\u5019\u9009\u5173\u952e\u8bcd"},{"location":"pages/nlp/nlpinfo/keywords_extract/#2-\u8bed\u6599\u5b66\u4e60","text":"\u6839\u636e\u5927\u89c4\u6a21\u9884\u6599\u5b66\u4e60\u5f97\u5230\u4e3b\u9898\u6a21\u578b\u3002","title":"2 \u8bed\u6599\u5b66\u4e60"},{"location":"pages/nlp/nlpinfo/keywords_extract/#3-\u8ba1\u7b97\u6587\u7ae0\u4e3b\u9898\u5206\u90e8","text":"\u6839\u636e\u5f97\u5230\u7684\u9690\u542b\u4e3b\u9898\u6a21\u578b\uff0c\u8ba1\u7b97\u6587\u7ae0\u7684\u4e3b\u9898\u5206\u5e03\u548c\u5019\u9009\u5173\u952e\u8bcd\u5206\u5e03\u3002","title":"3 \u8ba1\u7b97\u6587\u7ae0\u4e3b\u9898\u5206\u90e8"},{"location":"pages/nlp/nlpinfo/keywords_extract/#4-\u6392\u5e8f","text":"\u8ba1\u7b97\u6587\u6863\u548c\u5019\u9009\u5173\u952e\u8bcd\u7684\u4e3b\u9898\u76f8\u4f3c\u5ea6\u5e76\u6392\u5e8f\uff0c\u9009\u53d6\u524dn\u4e2a\u8bcd\u4f5c\u4e3a\u5173\u952e\u8bcd\u3002 \u7b97\u6cd5\u7684\u5173\u952e\u5728\u4e8e\u4e3b\u9898\u6a21\u578b\u7684\u6784\u5efa\u3002 \u4e3b\u9898\u6a21\u578b\u662f\u4e00\u79cd\u6587\u6863\u751f\u6210\u6a21\u578b\uff0c\u5bf9\u4e8e\u4e00\u7bc7\u6587\u7ae0\uff0c\u6211\u4eec\u7684\u6784\u601d\u601d\u8def\u662f\u5148\u786e\u5b9a\u51e0\u4e2a\u4e3b\u9898\uff0c\u7136\u540e\u6839\u636e\u4e3b\u9898\u60f3\u597d\u63cf\u8ff0\u4e3b\u9898\u7684\u8bcd\u6c47\uff0c\u5c06\u8bcd\u6c47\u6309\u7167\u8bed\u6cd5\u89c4\u5219\u7ec4\u6210\u53e5\u5b50\uff0c\u6bb5\u843d\uff0c\u6700\u540e\u751f\u6210\u4e00\u7bc7\u6587\u7ae0\u3002 \u4e3b\u9898\u6a21\u578b\u4e5f\u662f\u57fa\u4e8e\u8fd9\u4e2a\u601d\u60f3\uff0c\u5b83\u8ba4\u4e3a\u6587\u6863\u662f\u4e00\u4e9b\u4e3b\u9898\u7684\u6df7\u5408\u5206\u5e03\uff0c\u4e3b\u9898\u53c8\u662f\u8bcd\u8bed\u7684\u6982\u7387\u5206\u5e03\uff0cpLSA\u6a21\u578b\u5c31\u662f\u7b2c\u4e00\u4e2a\u6839\u636e\u8fd9\u4e2a\u60f3\u6cd5\u6784\u5efa\u7684\u6a21\u578b\u3002\u540c\u6837\u5730\uff0c\u6211\u4eec\u53cd\u8fc7\u6765\u60f3\uff0c\u6211\u4eec\u627e\u5230\u4e86\u6587\u6863\u7684\u4e3b\u9898\uff0c\u7136\u540e\u4e3b\u9898\u4e2d\u6709\u4ee3\u8868\u6027\u7684\u8bcd\u5c31\u80fd\u8868\u793a\u8fd9\u7bc7\u6587\u6863\u7684\u6838\u5fc3\u610f\u601d\uff0c\u5c31\u662f\u6587\u6863\u7684\u5173\u952e\u8bcd\u3002 pLSA\u6a21\u578b\u8ba4\u4e3a\uff0c\u4e00\u7bc7\u6587\u6863\u4e2d\u7684\u6bcf\u4e00\u4e2a\u8bcd\u90fd\u662f\u901a\u8fc7\u4e00\u5b9a\u6982\u7387\u9009\u53d6\u67d0\u4e2a\u4e3b\u9898\uff0c\u7136\u540e\u518d\u6309\u7167\u4e00\u5b9a\u7684\u6982\u7387\u4ece\u4e3b\u9898\u4e2d\u9009\u53d6\u5f97\u5230\u8fd9\u4e2a\u8bcd\u8bed\uff0c\u8fd9\u4e2a\u8bcd\u8bed\u7684\u8ba1\u7b97\u516c\u5f0f\u4e3a\uff1a \u4e00\u4e9b\u8d1d\u53f6\u65af\u5b66\u6d3e\u7684\u7814\u7a76\u8005\u5bf9\u4e8epLSA\u6a21\u578b\u8fdb\u884c\u4e86\u6539\u8fdb\uff0c\u4ed6\u4eec\u8ba4\u4e3a\uff0c\u6587\u7ae0\u5bf9\u5e94\u4e3b\u9898\u7684\u6982\u7387\u4ee5\u53ca\u4e3b\u9898\u5bf9\u5e94\u8bcd\u8bed\u7684\u6982\u7387\u4e0d\u662f\u4e00\u5b9a\u7684\uff0c\u4e5f\u670d\u4ece\u4e00\u5b9a\u7684\u6982\u7387\uff0c\u4e8e\u662f\u5c31\u6709\u4e86\u73b0\u9636\u6bb5\u5e38\u7528\u7684\u4e3b\u9898\u6a21\u578b--LDA\u4e3b\u9898\u6a21\u578b\u3002 LDA\u662fD.M.Blei\u57282003\u5e74\u63d0\u51fa\u7684\u3002LDA\u91c7\u7528\u4e86\u8bcd\u888b\u6a21\u578b\u7684\u65b9\u6cd5\u7b80\u5316\u4e86\u95ee\u9898\u7684\u590d\u6742\u6027\u3002\u5728LDA\u6a21\u578b\u4e2d\uff0c\u6bcf\u4e00\u7bc7\u6587\u6863\u662f\u4e00\u4e9b\u4e3b\u9898\u7684\u6784\u6210\u7684\u6982\u7387\u5206\u5e03\uff0c\u800c\u6bcf\u4e00\u4e2a\u4e3b\u9898\u53c8\u662f\u5f88\u591a\u5355\u8bcd\u6784\u6210\u7684\u4e00\u4e2a\u6982\u7387\u5206\u5e03\u3002\u540c\u65f6\uff0c\u65e0\u8bba\u662f\u4e3b\u9898\u6784\u6210\u7684\u6982\u7387\u5206\u5e03\u8fd8\u662f\u5355\u8bcd\u6784\u6210\u7684\u6982\u7387\u5206\u5e03\u4e5f\u4e0d\u662f\u4e00\u5b9a\u7684\uff0c\u8fd9\u4e9b\u5206\u5e03\u4e5f\u670d\u4eceDirichlet \u5148\u9a8c\u5206\u5e03\u3002 \u6587\u6863\u7684\u751f\u6210\u6a21\u578b\u53ef\u4ee5\u7528\u5982\u4e0b\u56fe\u6a21\u578b\u8868\u793a\uff1a \u5176\u4e2d \u548c \u4e3a\u5148\u9a8c\u5206\u5e03\u7684\u8d85\u53c2\u6570\uff0c \u4e3a\u7b2ck\u4e2a\u4e3b\u9898\u4e0b\u7684\u6240\u6709\u5355\u8bcd\u7684\u5206\u5e03\uff0c \u4e3a\u6587\u6863\u7684\u4e3b\u9898\u5206\u5e03\uff0cw\u4e3a\u6587\u6863\u7684\u8bcd\uff0cz\u4e3aw\u6240\u5bf9\u5e94\u7684\u4e3b\u9898\u3002 \u56fe 3 Blei\u5728\u8bba\u6587\u4e2d\u7684\u56fe\u6a21\u578b DA\u6316\u6398\u4e86\u6587\u672c\u7684\u6df1\u5c42\u8bed\u4e49\u5373\u6587\u672c\u7684\u4e3b\u9898\uff0c\u7528\u6587\u672c\u7684\u4e3b\u9898\u6765\u8868\u793a\u6587\u672c\u7684\u4e5f\u4ece\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u964d\u4f4e\u4e86\u6587\u672c\u5411\u91cf\u7684\u7ef4\u5ea6\uff0c\u5f88\u591a\u4eba\u7528\u8fd9\u79cd\u65b9\u5f0f\u5bf9\u6587\u672c\u505a\u5206\u7c7b\uff0c\u53d6\u5f97\u4e86\u4e0d\u9519\u7684\u6548\u679c\u3002 LDA\u5173\u952e\u8bcd\u63d0\u53d6\u7b97\u6cd5\u5229\u7528\u6587\u6863\u7684\u9690\u542b\u8bed\u4e49\u4fe1\u606f\u6765\u63d0\u53d6\u5173\u952e\u8bcd\uff0c\u4f46\u662f\u4e3b\u9898\u6a21\u578b\u63d0\u53d6\u7684\u5173\u952e\u8bcd\u6bd4\u8f83\u5bbd\u6cdb\uff0c\u4e0d\u80fd\u5f88\u597d\u7684\u53cd\u5e94\u6587\u6863\u4e3b\u9898\u3002\u53e6\u5916\uff0c\u5bf9\u4e8eLDA\u6a21\u578b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u8f83\u9ad8\uff0c\u9700\u8981\u5927\u91cf\u7684\u5b9e\u8df5\u8bad\u7ec3\u3002","title":"4 \u6392\u5e8f"},{"location":"pages/nlp/nlpinfo/keywords_extract/#NO4-\u5e94\u7528","text":"\u73b0\u9636\u6bb5\uff0c\u6587\u672c\u7684\u5173\u952e\u8bcd\u63d0\u53d6\u5728\u57fa\u4e8e\u6587\u672c\u7684\u641c\u7d22\u3001\u63a8\u8350\u4ee5\u53ca\u6570\u636e\u6316\u6398\u9886\u57df\u6709\u7740\u5f88\u5e7f\u6cdb\u7684\u5e94\u7528\u3002\u540c\u65f6\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u56e0\u4e3a\u5e94\u7528\u73af\u5883\u7684\u590d\u6742\u6027\uff0c\u5bf9\u4e8e\u4e0d\u540c\u7c7b\u578b\u7684\u6587\u672c\uff0c\u4f8b\u5982\u957f\u6587\u672c\u548c\u77ed\u6587\u672c\uff0c\u7528\u540c\u4e00\u79cd\u6587\u672c\u5173\u952e\u8bcd\u63d0\u53d6\u65b9\u6cd5\u5f97\u5230\u7684\u6548\u679c\u5e76\u76f8\u540c\u3002\u56e0\u6b64\uff0c\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u9488\u5bf9\u4e0d\u540c\u7684\u6761\u4ef6\u73af\u5883\u6240\u91c7\u7528\u7684\u7b97\u6cd5\u4f1a\u6709\u6240\u4e0d\u540c\uff0c\u6ca1\u6709\u67d0\u4e00\u7c7b\u7b97\u6cd5\u5728\u6240\u6709\u7684\u73af\u5883\u4e0b\u90fd\u6709\u5f88\u597d\u7684\u6548\u679c\u3002 \u76f8\u5bf9\u4e8e\u4e0a\u6587\u4e2d\u6240\u63d0\u5230\u7684\u7b97\u6cd5\uff0c\u4e00\u4e9b\u7ec4\u5408\u7b97\u6cd5\u5728\u5de5\u7a0b\u4e0a\u88ab\u5927\u91cf\u5e94\u7528\u4ee5\u5f25\u8865\u5355\u7b97\u6cd5\u7684\u4e0d\u8db3\uff0c\u4f8b\u5982\u5c06TF-IDF\u7b97\u6cd5\u4e0eTextRank\u7b97\u6cd5\u76f8\u7ed3\u5408\uff0c\u6216\u8005\u7efc\u5408TF-IDF\u4e0e\u8bcd\u6027\u5f97\u5230\u5173\u952e\u8bcd\u7b49\u3002\u540c\u65f6\uff0c\u5de5\u7a0b\u4e0a\u5bf9\u4e8e\u6587\u672c\u7684\u9884\u5904\u7406\u4ee5\u53ca\u6587\u672c\u5206\u8bcd\u7684\u51c6\u786e\u6027\u4e5f\u6709\u5f88\u5927\u7684\u4f9d\u8d56\u3002\u5bf9\u4e8e\u6587\u672c\u7684\u9519\u522b\u5b57\uff0c\u53d8\u5f62\u8bcd\u7b49\u4fe1\u606f\uff0c\u9700\u8981\u5728\u9884\u5904\u7406\u9636\u6bb5\u4e88\u4ee5\u89e3\u51b3\uff0c\u5206\u8bcd\u7b97\u6cd5\u7684\u9009\u62e9\uff0c\u672a\u767b\u5f55\u8bcd\u4ee5\u53ca\u6b67\u4e49\u8bcd\u7684\u8bc6\u522b\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u5bf9\u4e8e\u5173\u952e\u8bcd\u7a81\u63d0\u53d6\u4f1a\u53c8\u5f88\u5927\u7684\u5f71\u54cd\u3002 \u5173\u952e\u8bcd\u63d0\u53d6\u662f\u4e00\u4e2a\u770b\u4f3c\u7b80\u5355\uff0c\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u5374\u5341\u5206\u68d8\u624b\u7684\u4efb\u52a1\uff0c\u4ece\u73b0\u6709\u7684\u7b97\u6cd5\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u5de5\u7a0b\u4f18\u5316\uff0c\u8fbe\u89c2\u6570\u636e\u5728\u8fd9\u65b9\u9762\u505a\u4e86\u5f88\u5927\u7684\u52aa\u529b\u5e76\u4e14\u53d6\u5f97\u4e86\u4e0d\u9519\u7684\u6548\u679c\u3002","title":"NO.4 \u5e94\u7528"},{"location":"pages/nlp/nlpinfo/keywords_extract/#NO5-\u603b\u7ed3","text":"\u672c\u6587\u4ecb\u7ecd\u4e86\u4e09\u79cd\u5e38\u7528\u7684\u65e0\u76d1\u7763\u7684\u5173\u952e\u8bcd\u63d0\u53d6\u7b97\u6cd5\uff0c\u5e76\u4ecb\u7ecd\u4e86\u5176\u4f18\u7f3a\u70b9\u3002\u5173\u952e\u8bcd\u63d0\u53d6\u5728\u6587\u672c\u6316\u6398\u9886\u57df\u5177\u6709\u5f88\u5e7f\u9614\u7684\u5e94\u7528\uff0c\u73b0\u6709\u7684\u65b9\u6cd5\u4e5f\u5b58\u5728\u4e00\u5b9a\u7684\u95ee\u9898\uff0c\u6211\u4eec\u4f9d\u7136\u4f1a\u5728\u5173\u952e\u8bcd\u63d0\u53d6\u7684\u95ee\u9898\u4e0a\u7ee7\u7eed\u52aa\u529b\u7814\u7a76\uff0c\u4e5f\u6b22\u8fce\u5927\u5bb6\u79ef\u6781\u4ea4\u6d41\u3002","title":"NO.5 \u603b\u7ed3"},{"location":"pages/nlp/nlpinfo/keywords_extract/#\u53c2\u8003\u6587\u732e","text":"[1] TextRank\u7b97\u6cd5\u63d0\u53d6\u5173\u952e\u8bcd\u548c\u6458\u8981http://xiaosheng.me/2017/04/08/article49/ [2] Page L, Brin S, Motwani R,et al. The PageRank citation ranking: Bringing order to the web[R]. StanfordInfoLab, 1999. [3] \u5218\u77e5\u8fdc. \u57fa\u4e8e\u6587\u6863\u4e3b\u9898\u7ed3\u6784\u7684\u5173\u952e\u8bcd\u62bd\u53d6\u65b9\u6cd5\u7814\u7a76[D]. \u5317\u4eac: \u6e05\u534e\u5927\u5b66, 2011. [4] tf-idf\uff0c https://zh.wikipedia.org/zh-hans/Tf-idf [5] \u4e00\u6587\u8be6\u89e3\u673a\u5668\u9886\u57df\u7684LDA\u4e3b\u9898\u6a21\u578b https://zhuanlan.zhihu.com/p/31470216 [6] Blei D M, Ng A Y, Jordan MI. Latent dirichlet allocation[J]. Journal of machine Learning research, 2003,3(Jan): 993-1022. [7] \u8d75\u4eac\u80dc, \u6731\u5de7\u660e, \u5468\u56fd\u680b, \u7b49. \u81ea\u52a8\u5173\u952e\u8bcd\u62bd\u53d6\u7814\u7a76\u7efc\u8ff0[J]. \u8f6f\u4ef6\u5b66\u62a5, 2017,28(9): 2431-2449. \u4f5c\u8005\u7b80\u4ecb \u97e9\u4f1f\uff1a\u8fbe\u89c2\u6570\u636e\u6570\u636e\u6316\u6398\u5de5\u7a0b\u5e08\uff0c\u8d1f\u8d23\u8fbe\u89c2\u6570\u636e\u6587\u672c\u65b9\u9762\u7684\u6316\u6398\u4e0e\u5e94\u7528\u3002\u4e3b\u8981\u53c2\u4e0e\u8fbe\u89c2\u6570\u636e\u6807\u7b7e\u63d0\u53d6\u4e0e\u6587\u672c\u5206\u7c7b\u7cfb\u7edf\u7684\u6784\u5efa\u4e0e\u5b9e\u73b0\uff0c\u5bf9\u6df1\u5ea6\u5b66\u4e60\uff0cNLP\u6570\u636e\u6316\u6398\u9886\u57df\u6709\u6d53\u539a\u5174\u8da3\u3002","title":"\u53c2\u8003\u6587\u732e"},{"location":"pages/nlp/nlpinfo/ml-precision-recall/","text":"\u673a\u5668\u5b66\u4e60\u7684\u8bc4\u4ef7\u6307\u6807\uff1a\u51c6\u786e\u7387(Precision)\u3001\u53ec\u56de\u7387(Recall)\u3001F\u503c(F-Measure)\u3001ROC\u66f2\u7ebf\u7b49_Never-Giveup\u7684\u535a\u5ba2-CSDN\u535a\u5ba2_\u673a\u5668\u5b66\u4e60\u51c6\u786e\u7387 \u00b6 \u5728\u4ecb\u7ecd\u6307\u6807\u524d\u5fc5\u987b\u5148\u4e86\u89e3\u201c\u6df7\u6dc6\u77e9\u9635\u201d\uff1a \u6df7\u6dc6\u77e9\u9635 True Positive(\u771f\u6b63\uff0cTP)\uff1a\u5c06\u6b63\u7c7b\u9884\u6d4b\u4e3a\u6b63\u7c7b\u6570 True Negative(\u771f\u8d1f\uff0cTN)\uff1a\u5c06\u8d1f\u7c7b\u9884\u6d4b\u4e3a\u8d1f\u7c7b\u6570 False Positive(\u5047\u6b63\uff0cFP)\uff1a\u5c06\u8d1f\u7c7b\u9884\u6d4b\u4e3a\u6b63\u7c7b\u6570\u8bef\u62a5 (Type I error) False Negative(\u5047\u8d1f\uff0cFN)\uff1a\u5c06\u6b63\u7c7b\u9884\u6d4b\u4e3a\u8d1f\u7c7b\u6570\u2192\u6f0f\u62a5 (Type II error) \u51c6\u786e\u7387(accuracy)\u8ba1\u7b97\u516c\u5f0f\u4e3a\uff1a \u6ce8\uff1a \u51c6\u786e\u7387\u662f\u6211\u4eec\u6700\u5e38\u89c1\u7684\u8bc4\u4ef7\u6307\u6807\uff0c\u800c\u4e14\u5f88\u5bb9\u6613\u7406\u89e3\uff0c\u5c31\u662f\u88ab\u5206\u5bf9\u7684\u6837\u672c\u6570\u9664\u4ee5\u6240\u6709\u7684\u6837\u672c\u6570\uff0c\u901a\u5e38\u6765\u8bf4\uff0c\u6b63\u786e\u7387\u8d8a\u9ad8\uff0c\u5206\u7c7b\u5668\u8d8a\u597d\u3002 \u51c6\u786e\u7387\u786e\u5b9e\u662f\u4e00\u4e2a\u5f88\u597d\u5f88\u76f4\u89c2\u7684\u8bc4\u4ef7\u6307\u6807\uff0c\u4f46\u662f\u6709\u65f6\u5019\u51c6\u786e\u7387\u9ad8\u5e76\u4e0d\u80fd\u4ee3\u8868\u4e00\u4e2a\u7b97\u6cd5\u5c31\u597d\u3002\u6bd4\u5982\u67d0\u4e2a\u5730\u533a\u67d0\u5929\u5730\u9707\u7684\u9884\u6d4b\uff0c\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u5806\u7684\u7279\u5f81\u4f5c\u4e3a\u5730\u9707\u5206\u7c7b\u7684\u5c5e\u6027\uff0c\u7c7b\u522b\u53ea\u6709\u4e24\u4e2a\uff1a0\uff1a\u4e0d\u53d1\u751f\u5730\u9707\u30011\uff1a\u53d1\u751f\u5730\u9707\u3002\u4e00\u4e2a\u4e0d\u52a0\u601d\u8003\u7684\u5206\u7c7b\u5668\uff0c\u5bf9\u6bcf\u4e00\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u90fd\u5c06\u7c7b\u522b\u5212\u5206\u4e3a0\uff0c\u90a3\u90a3\u4e48\u5b83\u5c31\u53ef\u80fd\u8fbe\u523099%\u7684\u51c6\u786e\u7387\uff0c\u4f46\u771f\u7684\u5730\u9707\u6765\u4e34\u65f6\uff0c\u8fd9\u4e2a\u5206\u7c7b\u5668\u6beb\u65e0\u5bdf\u89c9\uff0c\u8fd9\u4e2a\u5206\u7c7b\u5e26\u6765\u7684\u635f\u5931\u662f\u5de8\u5927\u7684\u3002\u4e3a\u4ec0\u4e4899%\u7684\u51c6\u786e\u7387\u7684\u5206\u7c7b\u5668\u5374\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u7684\uff0c\u56e0\u4e3a\u8fd9\u91cc\u6570\u636e\u5206\u5e03\u4e0d\u5747\u8861\uff0c\u7c7b\u522b1\u7684\u6570\u636e\u592a\u5c11\uff0c\u5b8c\u5168\u9519\u5206\u7c7b\u522b1\u4f9d\u7136\u53ef\u4ee5\u8fbe\u5230\u5f88\u9ad8\u7684\u51c6\u786e\u7387\u5374\u5ffd\u89c6\u4e86\u6211\u4eec\u5173\u6ce8\u7684\u4e1c\u897f\u3002\u518d\u4e3e\u4e2a\u4f8b\u5b50\u8bf4\u660e\u4e0b\u3002\u5728\u6b63\u8d1f\u6837\u672c\u4e0d\u5e73\u8861\u7684\u60c5\u51b5\u4e0b\uff0c\u51c6\u786e\u7387\u8fd9\u4e2a\u8bc4\u4ef7\u6307\u6807\u6709\u5f88\u5927\u7684\u7f3a\u9677\u3002\u6bd4\u5982\u5728\u4e92\u8054\u7f51\u5e7f\u544a\u91cc\u9762\uff0c\u70b9\u51fb\u7684\u6570\u91cf\u662f\u5f88\u5c11\u7684\uff0c\u4e00\u822c\u53ea\u6709\u5343\u5206\u4e4b\u51e0\uff0c\u5982\u679c\u7528acc\uff0c\u5373\u4f7f\u5168\u90e8\u9884\u6d4b\u6210\u8d1f\u7c7b\uff08\u4e0d\u70b9\u51fb\uff09acc\u4e5f\u6709 99% \u4ee5\u4e0a\uff0c\u6ca1\u6709\u610f\u4e49\u3002\u56e0\u6b64\uff0c\u5355\u7eaf\u9760\u51c6\u786e\u7387\u6765\u8bc4\u4ef7\u4e00\u4e2a\u7b97\u6cd5\u6a21\u578b\u662f\u8fdc\u8fdc\u4e0d\u591f\u79d1\u5b66\u5168\u9762\u7684 \u7cbe\u786e\u7387(precision)\u5b9a\u4e49\u4e3a\uff1a \u7cbe\u786e\u7387 \u662f\u9488\u5bf9\u6211\u4eec\u9884\u6d4b\u7ed3\u679c\u800c\u8a00\u7684\uff0c\u5b83\u8868\u793a\u7684\u662f\u9884\u6d4b\u4e3a\u6b63\u7684\u6837\u672c\u4e2d\u6709\u591a\u5c11\u662f\u5bf9\u7684\u3002\u90a3\u4e48\u9884\u6d4b\u4e3a\u6b63\u5c31\u6709\u4e24\u79cd\u53ef\u80fd\u4e86\uff0c\u4e00\u79cd\u5c31\u662f\u628a\u6b63\u7c7b\u9884\u6d4b\u4e3a\u6b63\u7c7b(TP)\uff0c\u53e6\u4e00\u79cd\u5c31\u662f\u628a\u8d1f\u7c7b\u9884\u6d4b\u4e3a\u6b63\u7c7b(FP)\u3002 \u53ec\u56de\u7387 \u662f\u9488\u5bf9\u6211\u4eec\u539f\u6765\u7684\u6837\u672c\u800c\u8a00\u7684\uff0c\u5b83\u8868\u793a\u7684\u662f\u6837\u672c\u4e2d\u7684\u6b63\u4f8b\u6709\u591a\u5c11\u88ab\u9884\u6d4b\u6b63\u786e\u4e86\u3002\u90a3\u4e5f\u6709\u4e24\u79cd\u53ef\u80fd\uff0c\u4e00\u79cd\u662f\u628a\u539f\u6765\u7684\u6b63\u7c7b\u9884\u6d4b\u6210\u6b63\u7c7b(TP)\uff0c\u53e6\u4e00\u79cd\u5c31\u662f\u628a\u539f\u6765\u7684\u6b63\u7c7b\u9884\u6d4b\u4e3a\u8d1f\u7c7b(FN) \u53ec\u56de\u7387\u662f\u8986\u76d6\u9762\u7684\u5ea6\u91cf\uff0c\u5ea6\u91cf\u6709\u591a\u4e2a\u6b63\u4f8b\u88ab\u5206\u4e3a\u6b63\u4f8b\uff0crecall=TP/(TP+FN)\u3002 P\u548cR\u6307\u6807\u6709\u65f6\u5019\u4f1a\u51fa\u73b0\u7684\u77db\u76fe\u7684\u60c5\u51b5\uff0c\u8fd9\u6837\u5c31\u9700\u8981\u7efc\u5408\u8003\u8651\u4ed6\u4eec\uff0c\u6700\u5e38\u89c1\u7684\u65b9\u6cd5\u5c31\u662fF-Measure\uff08\u53c8\u79f0\u4e3aF-Score\uff09\u3002 F-Measure\u662fPrecision\u548cRecall\u52a0\u6743\u8c03\u548c\u5e73\u5747\uff1a ROC\uff08Receiver Operating Characteristic\uff09\u66f2\u7ebf\u662f\u4ee5\u5047\u6b63\u7387\uff08FP_rate\uff09\u548c\u771f\u6b63\u7387\uff08TP_rate\uff09\u4e3a\u8f74\u7684\u66f2\u7ebf\uff0cROC\u66f2\u7ebf\u4e0b\u9762\u7684\u9762\u79ef\u6211\u4eec\u53eb\u505aAUC\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5176\u4e2d\uff1a \uff081\uff09\u66f2\u7ebf\u4e0eFP_rate\u8f74\u56f4\u6210\u7684\u9762\u79ef\uff08\u8bb0\u4f5cAUC\uff09\u8d8a\u5927\uff0c\u8bf4\u660e\u6027\u80fd\u8d8a\u597d\uff0c\u5373\u56fe\u4e0aL2\u66f2\u7ebf\u5bf9\u5e94\u7684\u6027\u80fd\u4f18\u4e8e\u66f2\u7ebfL1\u5bf9\u5e94\u7684\u6027\u80fd\u3002\u5373\uff1a\u66f2\u7ebf\u8d8a\u9760\u8fd1A\u70b9\uff08\u5de6\u4e0a\u65b9\uff09\u6027\u80fd\u8d8a\u597d\uff0c\u66f2\u7ebf\u8d8a\u9760\u8fd1B\u70b9\uff08\u53f3\u4e0b\u65b9\uff09\u66f2\u7ebf\u6027\u80fd\u8d8a\u5dee\u3002 \uff082\uff09A\u70b9\u662f\u6700\u5b8c\u7f8e\u7684performance\u70b9\uff0cB\u5904\u662f\u6027\u80fd\u6700\u5dee\u70b9\u3002 \uff083\uff09\u4f4d\u4e8eC-D\u7ebf\u4e0a\u7684\u70b9\u8bf4\u660e\u7b97\u6cd5\u6027\u80fd\u548crandom\u731c\u6d4b\u662f\u4e00\u6837\u7684\u2013\u5982C\u3001D\u3001E\u70b9\u3002\u4f4d\u4e8eC-D\u4e4b\u4e0a\uff08\u5373\u66f2\u7ebf\u4f4d\u4e8e\u767d\u8272\u7684\u4e09\u89d2\u5f62\u5185\uff09\u8bf4\u660e\u7b97\u6cd5\u6027\u80fd\u4f18\u4e8e\u968f\u673a\u731c\u6d4b\u2013\u5982G\u70b9\uff0c\u4f4d\u4e8eC-D\u4e4b\u4e0b\uff08\u5373\u66f2\u7ebf\u4f4d\u4e8e\u7070\u8272\u7684\u4e09\u89d2\u5f62\u5185\uff09\u8bf4\u660e\u7b97\u6cd5\u6027\u80fd\u5dee\u4e8e\u968f\u673a\u731c\u6d4b\u2013\u5982F\u70b9\u3002 \uff084\uff09 \u867d\u7136ROC\u66f2\u7ebf\u76f8\u6bd4\u8f83\u4e8ePrecision\u548cRecall\u7b49\u8861\u91cf\u6307\u6807\u66f4\u52a0\u5408\u7406\uff0c\u4f46\u662f\u5176\u5728\u9ad8\u4e0d\u5e73\u8861\u6570\u636e\u6761\u4ef6\u4e0b\u7684\u7684\u8868\u73b0\u4ecd\u7136\u8fc7\u4e8e\u7406\u60f3\uff0c\u4e0d\u80fd\u591f\u5f88\u597d\u7684\u5c55\u793a\u5b9e\u9645\u60c5\u51b5\u3002 AUC\uff08Area Under Curve\uff09\u88ab\u5b9a\u4e49\u4e3aROC\u66f2\u7ebf\u4e0b\u7684\u9762\u79ef\uff0c\u663e\u7136\u8fd9\u4e2a\u9762\u79ef\u7684\u6570\u503c\u4e0d\u4f1a\u5927\u4e8e1\u3002 \u7b80\u5355\u8bf4\uff1aAUC\u503c\u8d8a\u5927\u7684\u5206\u7c7b\u5668\uff0c\u6b63\u786e\u7387\u8d8a\u9ad8 \u5b8c\u7f8e\u5206\u7c7b\u5668\uff0c\u91c7\u7528\u8fd9\u4e2a\u9884\u6d4b\u6a21\u578b\u65f6\uff0c\u4e0d\u7ba1\u8bbe\u5b9a\u4ec0\u4e48\u9608\u503c\u90fd\u80fd\u5f97\u51fa\u5b8c\u7f8e\u9884\u6d4b\u3002\u7edd\u5927\u591a\u6570\u9884\u6d4b\u7684\u573a\u5408\uff0c\u4e0d\u5b58\u5728\u5b8c\u7f8e\u5206\u7c7b\u5668\u3002 \u4f18\u4e8e\u968f\u673a\u731c\u6d4b\u3002\u8fd9\u4e2a\u5206\u7c7b\u5668\uff08\u6a21\u578b\uff09\u59a5\u5584\u8bbe\u5b9a\u9608\u503c\u7684\u8bdd\uff0c\u80fd\u6709\u9884\u6d4b\u4ef7\u503c\u3002 \u8ddf\u968f\u673a\u731c\u6d4b\u4e00\u6837\uff08\u4f8b\uff1a\u4e22\u94dc\u677f\uff09\uff0c\u6a21\u578b\u6ca1\u6709\u9884\u6d4b\u4ef7\u503c\u3002 \u6bd4\u968f\u673a\u731c\u6d4b\u8fd8\u5dee\uff1b\u4f46\u53ea\u8981\u603b\u662f\u53cd\u9884\u6d4b\u800c\u884c\uff0c\u5c31\u4f18\u4e8e\u968f\u673a\u731c\u6d4b\uff0c\u56e0\u6b64\u4e0d\u5b58\u5728 \u7684\u60c5\u51b5\u3002 \u65e2\u7136\u5df2\u7ecf\u8fd9\u4e48\u591a\u8bc4\u4ef7\u6807\u51c6\uff0c\u4e3a\u4ec0\u4e48\u8fd8\u8981\u4f7f\u7528ROC\u548cAUC\u5462\uff1f\u56e0\u4e3aROC\u66f2\u7ebf\u6709\u4e2a\u5f88\u597d\u7684\u7279\u6027\uff1a\u5f53\u6d4b\u8bd5\u96c6\u4e2d\u7684\u6b63\u8d1f\u6837\u672c\u7684\u5206\u5e03\u53d8\u5316\u7684\u65f6\u5019\uff0cROC\u66f2\u7ebf\u80fd\u591f\u4fdd\u6301\u4e0d\u53d8\u3002\u5728\u5b9e\u9645\u7684\u6570\u636e\u96c6\u4e2d\u7ecf\u5e38\u4f1a\u51fa\u73b0\u7c7b\u4e0d\u5e73\u8861\uff08class imbalance\uff09\u73b0\u8c61\uff0c\u5373\u8d1f\u6837\u672c\u6bd4\u6b63\u6837\u672c\u591a\u5f88\u591a\uff08\u6216\u8005\u76f8\u53cd\uff09 \u518d\u8c08ROC\u548cAUC \u00b6 \u4e00 \u3001roc\u66f2\u7ebf \u00b6 1\u3001roc\u66f2\u7ebf\uff1a\u63a5\u6536\u8005\u64cd\u4f5c\u7279\u5f81(receiveroperating characteristic),roc\u66f2\u7ebf\u4e0a\u6bcf\u4e2a\u70b9\u53cd\u6620\u7740\u5bf9\u540c\u4e00\u4fe1\u53f7\u523a\u6fc0\u7684\u611f\u53d7\u6027\u3002 \u6a2a\u8f74\uff1a\u5047\u6b63\u7c7b\u7387(false postive rate FPR)\u7279\u5f02\u5ea6\uff0c\u5212\u5206\u5b9e\u4f8b\u4e2d\u6240\u6709\u8d1f\u4f8b\u5360\u6240\u6709\u8d1f\u4f8b\u7684\u6bd4\u4f8b\uff1b(1-Specificity) \u7eb5\u8f74\uff1a\u771f\u6b63\u7c7b\u7387(true postive rate TPR)\u7075\u654f\u5ea6\uff0cSensitivity(\u6b63\u7c7b\u8986\u76d6\u7387) 2\u3001\u9488\u5bf9\u4e00\u4e2a\u4e8c\u5206\u7c7b\u95ee\u9898\uff0c\u5c06\u5b9e\u4f8b\u5206\u6210\u6b63\u7c7b(postive)\u6216\u8005\u8d1f\u7c7b(negative)\u3002\u4f46\u662f\u5b9e\u9645\u4e2d\u5206\u7c7b\u65f6\uff0c\u4f1a\u51fa\u73b0\u56db\u79cd\u60c5\u51b5. (1)\u82e5\u4e00\u4e2a\u5b9e\u4f8b\u662f\u6b63\u7c7b\u5e76\u4e14\u88ab\u9884\u6d4b\u4e3a\u6b63\u7c7b\uff0c\u5373\u4e3a\u771f\u6b63\u7c7b(True Postive TP) (2)\u82e5\u4e00\u4e2a\u5b9e\u4f8b\u662f\u6b63\u7c7b\uff0c\u4f46\u662f\u88ab\u9884\u6d4b\u6210\u4e3a\u8d1f\u7c7b\uff0c\u5373\u4e3a\u5047\u8d1f\u7c7b(False Negative FN) (3)\u82e5\u4e00\u4e2a\u5b9e\u4f8b\u662f\u8d1f\u7c7b\uff0c\u4f46\u662f\u88ab\u9884\u6d4b\u6210\u4e3a\u6b63\u7c7b\uff0c\u5373\u4e3a\u5047\u6b63\u7c7b(False Postive FP) (4)\u82e5\u4e00\u4e2a\u5b9e\u4f8b\u662f\u8d1f\u7c7b\uff0c\u4f46\u662f\u88ab\u9884\u6d4b\u6210\u4e3a\u8d1f\u7c7b\uff0c\u5373\u4e3a\u771f\u8d1f\u7c7b(True Negative TN) TP:\u6b63\u786e\u7684\u80af\u5b9a\u6570\u76ee FN:\u6f0f\u62a5\uff0c\u6ca1\u6709\u627e\u5230\u6b63\u786e\u5339\u914d\u7684\u6570\u76ee FP:\u8bef\u62a5\uff0c\u6ca1\u6709\u7684\u5339\u914d\u4e0d\u6b63\u786e TN:\u6b63\u786e\u62d2\u7edd\u7684\u975e\u5339\u914d\u6570\u76ee \u5217\u8054\u8868\u5982\u4e0b\uff0c1\u4ee3\u8868\u6b63\u7c7b\uff0c0\u4ee3\u8868\u8d1f\u7c7b\uff1a \u7531\u4e0a\u8868\u53ef\u5f97\u51fa\u6a2a\uff0c\u7eb5\u8f74\u7684\u8ba1\u7b97\u516c\u5f0f\uff1a (1)\u771f\u6b63\u7c7b\u7387(True Postive Rate)TPR: TP/(TP+FN),\u4ee3\u8868\u5206\u7c7b\u5668\u9884\u6d4b\u7684\u6b63\u7c7b\u4e2d\u5b9e\u9645\u6b63\u5b9e\u4f8b\u5360\u6240\u6709\u6b63\u5b9e\u4f8b\u7684\u6bd4\u4f8b\u3002Sensitivity (2)\u5047\u6b63\u7c7b\u7387(False Postive Rate)FPR: FP/(FP+TN)\uff0c\u4ee3\u8868\u5206\u7c7b\u5668\u9884\u6d4b\u7684\u6b63\u7c7b\u4e2d\u5b9e\u9645\u8d1f\u5b9e\u4f8b\u5360\u6240\u6709\u8d1f\u5b9e\u4f8b\u7684\u6bd4\u4f8b\u30021-Specificity (3)\u771f\u8d1f\u7c7b\u7387(True Negative Rate)TNR: TN/(FP+TN),\u4ee3\u8868\u5206\u7c7b\u5668\u9884\u6d4b\u7684\u8d1f\u7c7b\u4e2d\u5b9e\u9645\u8d1f\u5b9e\u4f8b\u5360\u6240\u6709\u8d1f\u5b9e\u4f8b\u7684\u6bd4\u4f8b\uff0cTNR=1-FPR\u3002Specificity \u5047\u8bbe\u91c7\u7528\u903b\u8f91\u56de\u5f52\u5206\u7c7b\u5668\uff0c\u5176\u7ed9\u51fa\u9488\u5bf9\u6bcf\u4e2a\u5b9e\u4f8b\u4e3a\u6b63\u7c7b\u7684\u6982\u7387\uff0c\u90a3\u4e48\u901a\u8fc7\u8bbe\u5b9a\u4e00\u4e2a\u9608\u503c\u59820.6\uff0c\u6982\u7387\u5927\u4e8e\u7b49\u4e8e0.6\u7684\u4e3a\u6b63\u7c7b\uff0c\u5c0f\u4e8e0.6\u7684\u4e3a\u8d1f\u7c7b\u3002\u5bf9\u5e94\u7684\u5c31\u53ef\u4ee5\u7b97\u51fa\u4e00\u7ec4(FPR,TPR),\u5728\u5e73\u9762\u4e2d\u5f97\u5230\u5bf9\u5e94\u5750\u6807\u70b9\u3002\u968f\u7740\u9608\u503c\u7684\u9010\u6e10\u51cf\u5c0f\uff0c\u8d8a\u6765\u8d8a\u591a\u7684\u5b9e\u4f8b\u88ab\u5212\u5206\u4e3a\u6b63\u7c7b\uff0c\u4f46\u662f\u8fd9\u4e9b\u6b63\u7c7b\u4e2d\u540c\u6837\u4e5f\u63ba\u6742\u7740\u771f\u6b63\u7684\u8d1f\u5b9e\u4f8b\uff0c\u5373TPR\u548cFPR\u4f1a\u540c\u65f6\u589e\u5927\u3002\u9608\u503c\u6700\u5927\u65f6\uff0c\u5bf9\u5e94\u5750\u6807\u70b9\u4e3a(0,0),\u9608\u503c\u6700\u5c0f\u65f6\uff0c\u5bf9\u5e94\u5750\u6807\u70b9(1,1)\u3002 \u5982\u4e0b\u9762\u8fd9\u5e45\u56fe\uff0c(a)\u56fe\u4e2d\u5b9e\u7ebf\u4e3aROC\u66f2\u7ebf\uff0c\u7ebf\u4e0a\u6bcf\u4e2a\u70b9\u5bf9\u5e94\u4e00\u4e2a\u9608\u503c\u3002 \u6a2a\u8f74FPR:1-TNR,1-Specificity\uff0cFPR\u8d8a\u5927\uff0c\u9884\u6d4b\u6b63\u7c7b\u4e2d\u5b9e\u9645\u8d1f\u7c7b\u8d8a\u591a\u3002 \u7eb5\u8f74TPR\uff1aSensitivity(\u6b63\u7c7b\u8986\u76d6\u7387),TPR\u8d8a\u5927\uff0c\u9884\u6d4b\u6b63\u7c7b\u4e2d\u5b9e\u9645\u6b63\u7c7b\u8d8a\u591a\u3002 \u7406\u60f3\u76ee\u6807\uff1aTPR=1\uff0cFPR=0,\u5373\u56fe\u4e2d(0,1)\u70b9\uff0c\u6545ROC\u66f2\u7ebf\u8d8a\u9760\u62e2(0,1)\u70b9\uff0c\u8d8a\u504f\u79bb45\u5ea6\u5bf9\u89d2\u7ebf\u8d8a\u597d\uff0cSensitivity\u3001Specificity\u8d8a\u5927\u6548\u679c\u8d8a\u597d\u3002","title":"\u8bc4\u4ef7\u6307\u6807\uff1a\u51c6\u786e\u7387(Precision)\u3001\u53ec\u56de\u7387(Recall)\u3001F\u503c(F-Measure)"},{"location":"pages/nlp/nlpinfo/ml-precision-recall/#\u673a\u5668\u5b66\u4e60\u7684\u8bc4\u4ef7\u6307\u6807\u51c6\u786e\u7387Precision\u53ec\u56de\u7387RecallF\u503cF-MeasureROC\u66f2\u7ebf\u7b49_Never-Giveup\u7684\u535a\u5ba2-CSDN\u535a\u5ba2_\u673a\u5668\u5b66\u4e60\u51c6\u786e\u7387","text":"\u5728\u4ecb\u7ecd\u6307\u6807\u524d\u5fc5\u987b\u5148\u4e86\u89e3\u201c\u6df7\u6dc6\u77e9\u9635\u201d\uff1a \u6df7\u6dc6\u77e9\u9635 True Positive(\u771f\u6b63\uff0cTP)\uff1a\u5c06\u6b63\u7c7b\u9884\u6d4b\u4e3a\u6b63\u7c7b\u6570 True Negative(\u771f\u8d1f\uff0cTN)\uff1a\u5c06\u8d1f\u7c7b\u9884\u6d4b\u4e3a\u8d1f\u7c7b\u6570 False Positive(\u5047\u6b63\uff0cFP)\uff1a\u5c06\u8d1f\u7c7b\u9884\u6d4b\u4e3a\u6b63\u7c7b\u6570\u8bef\u62a5 (Type I error) False Negative(\u5047\u8d1f\uff0cFN)\uff1a\u5c06\u6b63\u7c7b\u9884\u6d4b\u4e3a\u8d1f\u7c7b\u6570\u2192\u6f0f\u62a5 (Type II error) \u51c6\u786e\u7387(accuracy)\u8ba1\u7b97\u516c\u5f0f\u4e3a\uff1a \u6ce8\uff1a \u51c6\u786e\u7387\u662f\u6211\u4eec\u6700\u5e38\u89c1\u7684\u8bc4\u4ef7\u6307\u6807\uff0c\u800c\u4e14\u5f88\u5bb9\u6613\u7406\u89e3\uff0c\u5c31\u662f\u88ab\u5206\u5bf9\u7684\u6837\u672c\u6570\u9664\u4ee5\u6240\u6709\u7684\u6837\u672c\u6570\uff0c\u901a\u5e38\u6765\u8bf4\uff0c\u6b63\u786e\u7387\u8d8a\u9ad8\uff0c\u5206\u7c7b\u5668\u8d8a\u597d\u3002 \u51c6\u786e\u7387\u786e\u5b9e\u662f\u4e00\u4e2a\u5f88\u597d\u5f88\u76f4\u89c2\u7684\u8bc4\u4ef7\u6307\u6807\uff0c\u4f46\u662f\u6709\u65f6\u5019\u51c6\u786e\u7387\u9ad8\u5e76\u4e0d\u80fd\u4ee3\u8868\u4e00\u4e2a\u7b97\u6cd5\u5c31\u597d\u3002\u6bd4\u5982\u67d0\u4e2a\u5730\u533a\u67d0\u5929\u5730\u9707\u7684\u9884\u6d4b\uff0c\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u5806\u7684\u7279\u5f81\u4f5c\u4e3a\u5730\u9707\u5206\u7c7b\u7684\u5c5e\u6027\uff0c\u7c7b\u522b\u53ea\u6709\u4e24\u4e2a\uff1a0\uff1a\u4e0d\u53d1\u751f\u5730\u9707\u30011\uff1a\u53d1\u751f\u5730\u9707\u3002\u4e00\u4e2a\u4e0d\u52a0\u601d\u8003\u7684\u5206\u7c7b\u5668\uff0c\u5bf9\u6bcf\u4e00\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u90fd\u5c06\u7c7b\u522b\u5212\u5206\u4e3a0\uff0c\u90a3\u90a3\u4e48\u5b83\u5c31\u53ef\u80fd\u8fbe\u523099%\u7684\u51c6\u786e\u7387\uff0c\u4f46\u771f\u7684\u5730\u9707\u6765\u4e34\u65f6\uff0c\u8fd9\u4e2a\u5206\u7c7b\u5668\u6beb\u65e0\u5bdf\u89c9\uff0c\u8fd9\u4e2a\u5206\u7c7b\u5e26\u6765\u7684\u635f\u5931\u662f\u5de8\u5927\u7684\u3002\u4e3a\u4ec0\u4e4899%\u7684\u51c6\u786e\u7387\u7684\u5206\u7c7b\u5668\u5374\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u7684\uff0c\u56e0\u4e3a\u8fd9\u91cc\u6570\u636e\u5206\u5e03\u4e0d\u5747\u8861\uff0c\u7c7b\u522b1\u7684\u6570\u636e\u592a\u5c11\uff0c\u5b8c\u5168\u9519\u5206\u7c7b\u522b1\u4f9d\u7136\u53ef\u4ee5\u8fbe\u5230\u5f88\u9ad8\u7684\u51c6\u786e\u7387\u5374\u5ffd\u89c6\u4e86\u6211\u4eec\u5173\u6ce8\u7684\u4e1c\u897f\u3002\u518d\u4e3e\u4e2a\u4f8b\u5b50\u8bf4\u660e\u4e0b\u3002\u5728\u6b63\u8d1f\u6837\u672c\u4e0d\u5e73\u8861\u7684\u60c5\u51b5\u4e0b\uff0c\u51c6\u786e\u7387\u8fd9\u4e2a\u8bc4\u4ef7\u6307\u6807\u6709\u5f88\u5927\u7684\u7f3a\u9677\u3002\u6bd4\u5982\u5728\u4e92\u8054\u7f51\u5e7f\u544a\u91cc\u9762\uff0c\u70b9\u51fb\u7684\u6570\u91cf\u662f\u5f88\u5c11\u7684\uff0c\u4e00\u822c\u53ea\u6709\u5343\u5206\u4e4b\u51e0\uff0c\u5982\u679c\u7528acc\uff0c\u5373\u4f7f\u5168\u90e8\u9884\u6d4b\u6210\u8d1f\u7c7b\uff08\u4e0d\u70b9\u51fb\uff09acc\u4e5f\u6709 99% \u4ee5\u4e0a\uff0c\u6ca1\u6709\u610f\u4e49\u3002\u56e0\u6b64\uff0c\u5355\u7eaf\u9760\u51c6\u786e\u7387\u6765\u8bc4\u4ef7\u4e00\u4e2a\u7b97\u6cd5\u6a21\u578b\u662f\u8fdc\u8fdc\u4e0d\u591f\u79d1\u5b66\u5168\u9762\u7684 \u7cbe\u786e\u7387(precision)\u5b9a\u4e49\u4e3a\uff1a \u7cbe\u786e\u7387 \u662f\u9488\u5bf9\u6211\u4eec\u9884\u6d4b\u7ed3\u679c\u800c\u8a00\u7684\uff0c\u5b83\u8868\u793a\u7684\u662f\u9884\u6d4b\u4e3a\u6b63\u7684\u6837\u672c\u4e2d\u6709\u591a\u5c11\u662f\u5bf9\u7684\u3002\u90a3\u4e48\u9884\u6d4b\u4e3a\u6b63\u5c31\u6709\u4e24\u79cd\u53ef\u80fd\u4e86\uff0c\u4e00\u79cd\u5c31\u662f\u628a\u6b63\u7c7b\u9884\u6d4b\u4e3a\u6b63\u7c7b(TP)\uff0c\u53e6\u4e00\u79cd\u5c31\u662f\u628a\u8d1f\u7c7b\u9884\u6d4b\u4e3a\u6b63\u7c7b(FP)\u3002 \u53ec\u56de\u7387 \u662f\u9488\u5bf9\u6211\u4eec\u539f\u6765\u7684\u6837\u672c\u800c\u8a00\u7684\uff0c\u5b83\u8868\u793a\u7684\u662f\u6837\u672c\u4e2d\u7684\u6b63\u4f8b\u6709\u591a\u5c11\u88ab\u9884\u6d4b\u6b63\u786e\u4e86\u3002\u90a3\u4e5f\u6709\u4e24\u79cd\u53ef\u80fd\uff0c\u4e00\u79cd\u662f\u628a\u539f\u6765\u7684\u6b63\u7c7b\u9884\u6d4b\u6210\u6b63\u7c7b(TP)\uff0c\u53e6\u4e00\u79cd\u5c31\u662f\u628a\u539f\u6765\u7684\u6b63\u7c7b\u9884\u6d4b\u4e3a\u8d1f\u7c7b(FN) \u53ec\u56de\u7387\u662f\u8986\u76d6\u9762\u7684\u5ea6\u91cf\uff0c\u5ea6\u91cf\u6709\u591a\u4e2a\u6b63\u4f8b\u88ab\u5206\u4e3a\u6b63\u4f8b\uff0crecall=TP/(TP+FN)\u3002 P\u548cR\u6307\u6807\u6709\u65f6\u5019\u4f1a\u51fa\u73b0\u7684\u77db\u76fe\u7684\u60c5\u51b5\uff0c\u8fd9\u6837\u5c31\u9700\u8981\u7efc\u5408\u8003\u8651\u4ed6\u4eec\uff0c\u6700\u5e38\u89c1\u7684\u65b9\u6cd5\u5c31\u662fF-Measure\uff08\u53c8\u79f0\u4e3aF-Score\uff09\u3002 F-Measure\u662fPrecision\u548cRecall\u52a0\u6743\u8c03\u548c\u5e73\u5747\uff1a ROC\uff08Receiver Operating Characteristic\uff09\u66f2\u7ebf\u662f\u4ee5\u5047\u6b63\u7387\uff08FP_rate\uff09\u548c\u771f\u6b63\u7387\uff08TP_rate\uff09\u4e3a\u8f74\u7684\u66f2\u7ebf\uff0cROC\u66f2\u7ebf\u4e0b\u9762\u7684\u9762\u79ef\u6211\u4eec\u53eb\u505aAUC\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5176\u4e2d\uff1a \uff081\uff09\u66f2\u7ebf\u4e0eFP_rate\u8f74\u56f4\u6210\u7684\u9762\u79ef\uff08\u8bb0\u4f5cAUC\uff09\u8d8a\u5927\uff0c\u8bf4\u660e\u6027\u80fd\u8d8a\u597d\uff0c\u5373\u56fe\u4e0aL2\u66f2\u7ebf\u5bf9\u5e94\u7684\u6027\u80fd\u4f18\u4e8e\u66f2\u7ebfL1\u5bf9\u5e94\u7684\u6027\u80fd\u3002\u5373\uff1a\u66f2\u7ebf\u8d8a\u9760\u8fd1A\u70b9\uff08\u5de6\u4e0a\u65b9\uff09\u6027\u80fd\u8d8a\u597d\uff0c\u66f2\u7ebf\u8d8a\u9760\u8fd1B\u70b9\uff08\u53f3\u4e0b\u65b9\uff09\u66f2\u7ebf\u6027\u80fd\u8d8a\u5dee\u3002 \uff082\uff09A\u70b9\u662f\u6700\u5b8c\u7f8e\u7684performance\u70b9\uff0cB\u5904\u662f\u6027\u80fd\u6700\u5dee\u70b9\u3002 \uff083\uff09\u4f4d\u4e8eC-D\u7ebf\u4e0a\u7684\u70b9\u8bf4\u660e\u7b97\u6cd5\u6027\u80fd\u548crandom\u731c\u6d4b\u662f\u4e00\u6837\u7684\u2013\u5982C\u3001D\u3001E\u70b9\u3002\u4f4d\u4e8eC-D\u4e4b\u4e0a\uff08\u5373\u66f2\u7ebf\u4f4d\u4e8e\u767d\u8272\u7684\u4e09\u89d2\u5f62\u5185\uff09\u8bf4\u660e\u7b97\u6cd5\u6027\u80fd\u4f18\u4e8e\u968f\u673a\u731c\u6d4b\u2013\u5982G\u70b9\uff0c\u4f4d\u4e8eC-D\u4e4b\u4e0b\uff08\u5373\u66f2\u7ebf\u4f4d\u4e8e\u7070\u8272\u7684\u4e09\u89d2\u5f62\u5185\uff09\u8bf4\u660e\u7b97\u6cd5\u6027\u80fd\u5dee\u4e8e\u968f\u673a\u731c\u6d4b\u2013\u5982F\u70b9\u3002 \uff084\uff09 \u867d\u7136ROC\u66f2\u7ebf\u76f8\u6bd4\u8f83\u4e8ePrecision\u548cRecall\u7b49\u8861\u91cf\u6307\u6807\u66f4\u52a0\u5408\u7406\uff0c\u4f46\u662f\u5176\u5728\u9ad8\u4e0d\u5e73\u8861\u6570\u636e\u6761\u4ef6\u4e0b\u7684\u7684\u8868\u73b0\u4ecd\u7136\u8fc7\u4e8e\u7406\u60f3\uff0c\u4e0d\u80fd\u591f\u5f88\u597d\u7684\u5c55\u793a\u5b9e\u9645\u60c5\u51b5\u3002 AUC\uff08Area Under Curve\uff09\u88ab\u5b9a\u4e49\u4e3aROC\u66f2\u7ebf\u4e0b\u7684\u9762\u79ef\uff0c\u663e\u7136\u8fd9\u4e2a\u9762\u79ef\u7684\u6570\u503c\u4e0d\u4f1a\u5927\u4e8e1\u3002 \u7b80\u5355\u8bf4\uff1aAUC\u503c\u8d8a\u5927\u7684\u5206\u7c7b\u5668\uff0c\u6b63\u786e\u7387\u8d8a\u9ad8 \u5b8c\u7f8e\u5206\u7c7b\u5668\uff0c\u91c7\u7528\u8fd9\u4e2a\u9884\u6d4b\u6a21\u578b\u65f6\uff0c\u4e0d\u7ba1\u8bbe\u5b9a\u4ec0\u4e48\u9608\u503c\u90fd\u80fd\u5f97\u51fa\u5b8c\u7f8e\u9884\u6d4b\u3002\u7edd\u5927\u591a\u6570\u9884\u6d4b\u7684\u573a\u5408\uff0c\u4e0d\u5b58\u5728\u5b8c\u7f8e\u5206\u7c7b\u5668\u3002 \u4f18\u4e8e\u968f\u673a\u731c\u6d4b\u3002\u8fd9\u4e2a\u5206\u7c7b\u5668\uff08\u6a21\u578b\uff09\u59a5\u5584\u8bbe\u5b9a\u9608\u503c\u7684\u8bdd\uff0c\u80fd\u6709\u9884\u6d4b\u4ef7\u503c\u3002 \u8ddf\u968f\u673a\u731c\u6d4b\u4e00\u6837\uff08\u4f8b\uff1a\u4e22\u94dc\u677f\uff09\uff0c\u6a21\u578b\u6ca1\u6709\u9884\u6d4b\u4ef7\u503c\u3002 \u6bd4\u968f\u673a\u731c\u6d4b\u8fd8\u5dee\uff1b\u4f46\u53ea\u8981\u603b\u662f\u53cd\u9884\u6d4b\u800c\u884c\uff0c\u5c31\u4f18\u4e8e\u968f\u673a\u731c\u6d4b\uff0c\u56e0\u6b64\u4e0d\u5b58\u5728 \u7684\u60c5\u51b5\u3002 \u65e2\u7136\u5df2\u7ecf\u8fd9\u4e48\u591a\u8bc4\u4ef7\u6807\u51c6\uff0c\u4e3a\u4ec0\u4e48\u8fd8\u8981\u4f7f\u7528ROC\u548cAUC\u5462\uff1f\u56e0\u4e3aROC\u66f2\u7ebf\u6709\u4e2a\u5f88\u597d\u7684\u7279\u6027\uff1a\u5f53\u6d4b\u8bd5\u96c6\u4e2d\u7684\u6b63\u8d1f\u6837\u672c\u7684\u5206\u5e03\u53d8\u5316\u7684\u65f6\u5019\uff0cROC\u66f2\u7ebf\u80fd\u591f\u4fdd\u6301\u4e0d\u53d8\u3002\u5728\u5b9e\u9645\u7684\u6570\u636e\u96c6\u4e2d\u7ecf\u5e38\u4f1a\u51fa\u73b0\u7c7b\u4e0d\u5e73\u8861\uff08class imbalance\uff09\u73b0\u8c61\uff0c\u5373\u8d1f\u6837\u672c\u6bd4\u6b63\u6837\u672c\u591a\u5f88\u591a\uff08\u6216\u8005\u76f8\u53cd\uff09","title":"\u673a\u5668\u5b66\u4e60\u7684\u8bc4\u4ef7\u6307\u6807\uff1a\u51c6\u786e\u7387(Precision)\u3001\u53ec\u56de\u7387(Recall)\u3001F\u503c(F-Measure)\u3001ROC\u66f2\u7ebf\u7b49_Never-Giveup\u7684\u535a\u5ba2-CSDN\u535a\u5ba2_\u673a\u5668\u5b66\u4e60\u51c6\u786e\u7387"},{"location":"pages/nlp/nlpinfo/ml-precision-recall/#\u518d\u8c08ROC\u548cAUC","text":"","title":"\u518d\u8c08ROC\u548cAUC"},{"location":"pages/nlp/nlpinfo/ml-precision-recall/#\u4e00-roc\u66f2\u7ebf","text":"1\u3001roc\u66f2\u7ebf\uff1a\u63a5\u6536\u8005\u64cd\u4f5c\u7279\u5f81(receiveroperating characteristic),roc\u66f2\u7ebf\u4e0a\u6bcf\u4e2a\u70b9\u53cd\u6620\u7740\u5bf9\u540c\u4e00\u4fe1\u53f7\u523a\u6fc0\u7684\u611f\u53d7\u6027\u3002 \u6a2a\u8f74\uff1a\u5047\u6b63\u7c7b\u7387(false postive rate FPR)\u7279\u5f02\u5ea6\uff0c\u5212\u5206\u5b9e\u4f8b\u4e2d\u6240\u6709\u8d1f\u4f8b\u5360\u6240\u6709\u8d1f\u4f8b\u7684\u6bd4\u4f8b\uff1b(1-Specificity) \u7eb5\u8f74\uff1a\u771f\u6b63\u7c7b\u7387(true postive rate TPR)\u7075\u654f\u5ea6\uff0cSensitivity(\u6b63\u7c7b\u8986\u76d6\u7387) 2\u3001\u9488\u5bf9\u4e00\u4e2a\u4e8c\u5206\u7c7b\u95ee\u9898\uff0c\u5c06\u5b9e\u4f8b\u5206\u6210\u6b63\u7c7b(postive)\u6216\u8005\u8d1f\u7c7b(negative)\u3002\u4f46\u662f\u5b9e\u9645\u4e2d\u5206\u7c7b\u65f6\uff0c\u4f1a\u51fa\u73b0\u56db\u79cd\u60c5\u51b5. (1)\u82e5\u4e00\u4e2a\u5b9e\u4f8b\u662f\u6b63\u7c7b\u5e76\u4e14\u88ab\u9884\u6d4b\u4e3a\u6b63\u7c7b\uff0c\u5373\u4e3a\u771f\u6b63\u7c7b(True Postive TP) (2)\u82e5\u4e00\u4e2a\u5b9e\u4f8b\u662f\u6b63\u7c7b\uff0c\u4f46\u662f\u88ab\u9884\u6d4b\u6210\u4e3a\u8d1f\u7c7b\uff0c\u5373\u4e3a\u5047\u8d1f\u7c7b(False Negative FN) (3)\u82e5\u4e00\u4e2a\u5b9e\u4f8b\u662f\u8d1f\u7c7b\uff0c\u4f46\u662f\u88ab\u9884\u6d4b\u6210\u4e3a\u6b63\u7c7b\uff0c\u5373\u4e3a\u5047\u6b63\u7c7b(False Postive FP) (4)\u82e5\u4e00\u4e2a\u5b9e\u4f8b\u662f\u8d1f\u7c7b\uff0c\u4f46\u662f\u88ab\u9884\u6d4b\u6210\u4e3a\u8d1f\u7c7b\uff0c\u5373\u4e3a\u771f\u8d1f\u7c7b(True Negative TN) TP:\u6b63\u786e\u7684\u80af\u5b9a\u6570\u76ee FN:\u6f0f\u62a5\uff0c\u6ca1\u6709\u627e\u5230\u6b63\u786e\u5339\u914d\u7684\u6570\u76ee FP:\u8bef\u62a5\uff0c\u6ca1\u6709\u7684\u5339\u914d\u4e0d\u6b63\u786e TN:\u6b63\u786e\u62d2\u7edd\u7684\u975e\u5339\u914d\u6570\u76ee \u5217\u8054\u8868\u5982\u4e0b\uff0c1\u4ee3\u8868\u6b63\u7c7b\uff0c0\u4ee3\u8868\u8d1f\u7c7b\uff1a \u7531\u4e0a\u8868\u53ef\u5f97\u51fa\u6a2a\uff0c\u7eb5\u8f74\u7684\u8ba1\u7b97\u516c\u5f0f\uff1a (1)\u771f\u6b63\u7c7b\u7387(True Postive Rate)TPR: TP/(TP+FN),\u4ee3\u8868\u5206\u7c7b\u5668\u9884\u6d4b\u7684\u6b63\u7c7b\u4e2d\u5b9e\u9645\u6b63\u5b9e\u4f8b\u5360\u6240\u6709\u6b63\u5b9e\u4f8b\u7684\u6bd4\u4f8b\u3002Sensitivity (2)\u5047\u6b63\u7c7b\u7387(False Postive Rate)FPR: FP/(FP+TN)\uff0c\u4ee3\u8868\u5206\u7c7b\u5668\u9884\u6d4b\u7684\u6b63\u7c7b\u4e2d\u5b9e\u9645\u8d1f\u5b9e\u4f8b\u5360\u6240\u6709\u8d1f\u5b9e\u4f8b\u7684\u6bd4\u4f8b\u30021-Specificity (3)\u771f\u8d1f\u7c7b\u7387(True Negative Rate)TNR: TN/(FP+TN),\u4ee3\u8868\u5206\u7c7b\u5668\u9884\u6d4b\u7684\u8d1f\u7c7b\u4e2d\u5b9e\u9645\u8d1f\u5b9e\u4f8b\u5360\u6240\u6709\u8d1f\u5b9e\u4f8b\u7684\u6bd4\u4f8b\uff0cTNR=1-FPR\u3002Specificity \u5047\u8bbe\u91c7\u7528\u903b\u8f91\u56de\u5f52\u5206\u7c7b\u5668\uff0c\u5176\u7ed9\u51fa\u9488\u5bf9\u6bcf\u4e2a\u5b9e\u4f8b\u4e3a\u6b63\u7c7b\u7684\u6982\u7387\uff0c\u90a3\u4e48\u901a\u8fc7\u8bbe\u5b9a\u4e00\u4e2a\u9608\u503c\u59820.6\uff0c\u6982\u7387\u5927\u4e8e\u7b49\u4e8e0.6\u7684\u4e3a\u6b63\u7c7b\uff0c\u5c0f\u4e8e0.6\u7684\u4e3a\u8d1f\u7c7b\u3002\u5bf9\u5e94\u7684\u5c31\u53ef\u4ee5\u7b97\u51fa\u4e00\u7ec4(FPR,TPR),\u5728\u5e73\u9762\u4e2d\u5f97\u5230\u5bf9\u5e94\u5750\u6807\u70b9\u3002\u968f\u7740\u9608\u503c\u7684\u9010\u6e10\u51cf\u5c0f\uff0c\u8d8a\u6765\u8d8a\u591a\u7684\u5b9e\u4f8b\u88ab\u5212\u5206\u4e3a\u6b63\u7c7b\uff0c\u4f46\u662f\u8fd9\u4e9b\u6b63\u7c7b\u4e2d\u540c\u6837\u4e5f\u63ba\u6742\u7740\u771f\u6b63\u7684\u8d1f\u5b9e\u4f8b\uff0c\u5373TPR\u548cFPR\u4f1a\u540c\u65f6\u589e\u5927\u3002\u9608\u503c\u6700\u5927\u65f6\uff0c\u5bf9\u5e94\u5750\u6807\u70b9\u4e3a(0,0),\u9608\u503c\u6700\u5c0f\u65f6\uff0c\u5bf9\u5e94\u5750\u6807\u70b9(1,1)\u3002 \u5982\u4e0b\u9762\u8fd9\u5e45\u56fe\uff0c(a)\u56fe\u4e2d\u5b9e\u7ebf\u4e3aROC\u66f2\u7ebf\uff0c\u7ebf\u4e0a\u6bcf\u4e2a\u70b9\u5bf9\u5e94\u4e00\u4e2a\u9608\u503c\u3002 \u6a2a\u8f74FPR:1-TNR,1-Specificity\uff0cFPR\u8d8a\u5927\uff0c\u9884\u6d4b\u6b63\u7c7b\u4e2d\u5b9e\u9645\u8d1f\u7c7b\u8d8a\u591a\u3002 \u7eb5\u8f74TPR\uff1aSensitivity(\u6b63\u7c7b\u8986\u76d6\u7387),TPR\u8d8a\u5927\uff0c\u9884\u6d4b\u6b63\u7c7b\u4e2d\u5b9e\u9645\u6b63\u7c7b\u8d8a\u591a\u3002 \u7406\u60f3\u76ee\u6807\uff1aTPR=1\uff0cFPR=0,\u5373\u56fe\u4e2d(0,1)\u70b9\uff0c\u6545ROC\u66f2\u7ebf\u8d8a\u9760\u62e2(0,1)\u70b9\uff0c\u8d8a\u504f\u79bb45\u5ea6\u5bf9\u89d2\u7ebf\u8d8a\u597d\uff0cSensitivity\u3001Specificity\u8d8a\u5927\u6548\u679c\u8d8a\u597d\u3002","title":"\u4e00 \u3001roc\u66f2\u7ebf"},{"location":"pages/nlp/nlpinfo/nlp-dependency-parsing/","text":"\u4f9d\u5b58\u5206\u6790\u4e0e\u4f9d\u5b58\u6811 dependency parse \u00b6 \u53e5\u6cd5\u662f\u6307\u53e5\u5b50\u7684\u5404\u4e2a\u7ec4\u6210\u90e8\u5206\u7684\u76f8\u4e92\u5173\u7cfb\uff0c\u53e5\u6cd5\u5206\u6790\u5206\u4e3a\u53e5\u6cd5\u7ed3\u6784\u5206\u6790\uff08syntactic structure parsing\uff09\u548c\u4f9d\u5b58\u5173\u7cfb\u5206\u6790(dependency parsing)\u3002\u53e5\u6cd5\u7ed3\u6784\u5206\u6790\u7528\u4e8e\u83b7\u53d6\u6574\u4e2a\u53e5\u5b50\u7684\u53e5\u6cd5\u7ed3\u6784\uff0c\u4f9d\u5b58\u5206\u6790\u7528\u4e8e\u83b7\u53d6\u8bcd\u6c47\u4e4b\u95f4\u7684\u4f9d\u5b58\u5173\u7cfb\uff0c\u76ee\u524d\u7684\u53e5\u6cd5\u5206\u6790\u5df2\u7ecf\u4ece\u53e5\u6cd5\u7ed3\u6784\u5206\u6790\u8f6c\u5411\u4f9d\u5b58\u53e5\u6cd5\u5206\u6790\u3002 \u4f9d\u5b58\u8bed\u6cd5\u901a\u8fc7\u5206\u6790\u8bed\u8a00\u5355\u4f4d\u5185\u6210\u5206\u4e4b\u95f4\u7684\u4f9d\u5b58\u5173\u7cfb\u63ed\u793a\u5176\u53e5\u6cd5\u7ed3\u6784\uff0c\u4e3b\u5f20\u53e5\u5b50\u4e2d\u6838\u5fc3\u52a8\u8bcd\u662f\u652f\u914d\u5176\u5b83\u6210\u5206\u7684\u4e2d\u5fc3\u6210\u5206\uff0c\u800c\u5b83\u672c\u8eab\u5374\u4e0d\u53d7\u5176\u5b83\u4efb\u4f55\u6210\u5206\u7684\u652f\u914d\uff0c\u6240\u6709\u53d7\u652f\u914d\u6210\u5206\u90fd\u4ee5\u67d0\u79cd\u4f9d\u5b58\u5173\u7cfb\u4ece\u5c5e\u4e8e\u652f\u914d\u8005\u3002 \u572820\u4e16\u7eaa70\u5e74\u4ee3\uff0cRobinson\u63d0\u51fa\u4f9d\u5b58\u8bed\u6cd5\u4e2d\u5173\u4e8e\u4f9d\u5b58\u5173\u7cfb\u7684\u56db\u6761\u516c\u7406\uff1a \u4e00\u4e2a\u53e5\u5b50\u4e2d\u53ea\u6709\u4e00\u4e2a\u6210\u5206\u662f\u72ec\u7acb\u7684\uff1b \u5176\u5b83\u6210\u5206\u76f4\u63a5\u4f9d\u5b58\u4e8e\u67d0\u4e00\u6210\u5206\uff1b \u4efb\u4f55\u4e00\u4e2a\u6210\u5206\u90fd\u4e0d\u80fd\u4f9d\u5b58\u4e0e\u4e24\u4e2a\u6216\u4e24\u4e2a\u4ee5\u4e0a\u7684\u6210\u5206\uff1b \u5982\u679cA\u6210\u5206\u76f4\u63a5\u4f9d\u5b58\u4e8eB\u6210\u5206\uff0c\u800cC\u6210\u5206\u5728\u53e5\u4e2d\u4f4d\u4e8eA\u548cB\u4e4b\u95f4\uff0c\u90a3\u4e48C\u6216\u8005\u76f4\u63a5\u4f9d\u5b58\u4e8eB\uff0c\u6216\u8005\u76f4\u63a5\u4f9d\u5b58\u4e8eA\u548cB\u4e4b\u95f4\u7684\u67d0\u4e00\u6210\u5206\uff1b \u4e00\uff0c\u4f9d\u5b58\u5173\u7cfb \u00b6 \u4f9d\u5b58\u5173\u7cfb\u662f\u4e00\u4e2a\u4e2d\u5fc3\u8bcd\u4e0e\u5176\u4ece\u5c5e\u4e4b\u95f4\u7684\u4e8c\u5143\u975e\u5bf9\u79f0\u5173\u7cfb\uff0c\u4e00\u4e2a\u53e5\u5b50\u7684\u4e2d\u5fc3\u8bcd\u901a\u5e38\u662f\u52a8\u8bcd\uff08Verb\uff09\uff0c\u6240\u6709\u5176\u4ed6\u8bcd\u8981\u4e48\u4f9d\u8d56\u4e8e\u4e2d\u5fc3\u8bcd\uff0c\u8981\u4e48\u901a\u8fc7\u4f9d\u8d56\u8def\u5f84\u4e0e\u5b83\u5173\u8054\u3002 1\uff0c\u4f9d\u5b58\u5173\u7cfb \u4f9d\u5b58\u7ed3\u6784\u662f\u52a0\u6807\u7b7e\u7684\u6709\u5411\u56fe\uff0c\u7bad\u5934\u4ece\u4e2d\u5fc3\u8bcd\u6307\u5411\u4ece\u5c5e\uff0c\u5177\u4f53\u6765\u8bf4\uff0c\u7bad\u5934\u662f\u4ecehead\u6307\u5411child\uff0c\u4ece\u8be5\u89e3\u6790\u6811\u53ef\u4ee5\u770b\u51fa\uff0c\u6bcf\u4e2aToken\u53ea\u6709\u4e00\u4e2aHead\u3002 2\uff0c\u5173\u7cfb\u6807\u7b7e \u6807\u7b7e\u8868\u793a\u4ece\u5c5e\u7684\u8bed\u6cd5\u529f\u80fd\uff0c\u540d\u8bcd\u6027\u7684\u6807\u7b7e\u662f\uff1a root\uff1a\u4e2d\u5fc3\u8bcd\uff0c\u901a\u5e38\u662f\u52a8\u8bcd nsubj\uff1a\u540d\u8bcd\u6027\u4e3b\u8bed\uff08nominal subject\uff09 dobj\uff1a\u76f4\u63a5\u5bbe\u8bed\uff08direct object\uff09 prep\uff1a\u4ecb\u8bcd pobj\uff1a\u4ecb\u8bcd\u5bbe\u8bed cc\uff1a\u8fde\u8bcd \u5176\u4ed6\u5e38\u7528\u7684\u6807\u7b7e\uff1a compound\uff1a\u590d\u5408\u8bcd advmod\uff1a\u72b6\u8bed det\uff1a\u9650\u5b9a\u8bcd amod\uff1a\u5f62\u5bb9\u8bcd\u4fee\u9970\u8bed \u4e8c\uff0c\u89e3\u6790\u4f9d\u5b58\u5173\u7cfb \u00b6 SpaCy\u80fd\u591f\u5feb\u901f\u51c6\u786e\u5730\u89e3\u6790\u53e5\u5b50\u7684\u4f9d\u5b58\u5173\u7cfb\uff0c\u5e76\u4e14\u5177\u6709\u4e30\u5bcc\u7684API\u7528\u4e8e\u5bfc\u822a\u4f9d\u5b58\u5173\u7cfb\u6811\uff0cSpaCy\u4f7f\u7528head\u548cchild\u6765\u63cf\u8ff0\u4f9d\u5b58\u5173\u7cfb\u4e2d\u7684\u8fde\u63a5\uff0c\u8bc6\u522b\u6bcf\u4e2aToken\u7684\u4f9d\u5b58\u5173\u7cfb\uff1a token.text\uff1atoken\u7684\u6587\u672c token.head\uff1a\u5f53\u524dToken\u7684Parent Token\uff0c\u4ece\u8bed\u6cd5\u5173\u7cfb\u4e0a\u6765\u770b\uff0c\u6bcf\u4e00\u4e2aToken\u90fd\u53ea\u6709\u4e00\u4e2aHead\u3002 token.dep_\uff1a\u4f9d\u5b58\u5173\u7cfb token.children\uff1a\u8bed\u6cd5\u4e0a\u7684\u76f4\u63a5\u5b50\u8282\u70b9 token.ancestors\uff1a\u8bed\u6cd5\u4e0a\u7684\u7236\u8282\u70b9 _pos\uff1a\u8bcd\u6027 _tag\uff1a\u8bcd\u6027 \u8ba9\u6211\u4f7f\u7528SpaCy\u6765\u5bf9\u53e5\u5b50\u8fdb\u884c\u4f9d\u5b58\u5206\u6790\uff1a 1 2 3 4 5 6 import spacy nlp = spacy.load('en') doc = nlp( \"spaCy uses the terms head and child to describe the words\" ) for token in doc: print('{0}({1}) <-- {2} -- {3}({4})'.format(token.text, token.tag_, token.dep_, token.head.text, token.head.tag_)) \u6253\u5370\u6bcf\u4e2aToken\u7684\u4f9d\u5b58\u5173\u7cfb\u548chead\u8282\u70b9\uff0c\u7bad\u5934\u8868\u793a\u4ece\u5c5e\u5173\u7cfb\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u662f\uff1a 1 2 3 4 5 6 7 8 9 10 11 spaCy(NNP) <-- nsubj -- uses(VBZ) uses(VBZ) <-- ROOT -- uses(VBZ) the(DT) <-- det -- head(NN) terms(NNS) <-- compound -- head(NN) head(NN) <-- dobj -- uses(VBZ) and(CC) <-- cc -- head(NN) child(NN) <-- conj -- head(NN) to(TO) <-- aux -- describe(VB) describe(VB) <-- xcomp -- uses(VBZ) the(DT) <-- det -- words(NNS) words(NNS) <-- dobj -- describe(VB) \u4e5f\u53ef\u4ee5\u4f7f\u7528display\u6765\u663e\u793a\u4f9d\u5b58\u5173\u7cfb\uff0c\u5728\u6d4f\u89c8\u5668\u4e2d\u8f93\u5165 http://localhost:5000 \u663e\u793a\u4f9d\u5b58\u7ed3\u6784\uff1a 1 2 3 4 5 6 import spacy from spacy import displacy nlp = spacy.load('en') doc = nlp( \"spaCy uses the terms head and child to describe the words\" ) displacy.serve(doc, style='dep') \u4e09\uff0c \u4f9d\u5b58\u6811\u7684\u6765\u9f99\u53bb\u8109\u53ca\u7528\u6cd5 \u00b6 \u6765\u5386 \u00b6 a. \u7b80\u5355\u7684\u77ed\u8bed\u5206\u8bcd \uff08\u6b63\u5411\u9006\u5411\u6700\u5927\u5339\u914d\uff0cn-gram\uff0c\u673a\u5668\u5b66\u4e60...\uff09(\u4ee5\u5355\u4e2a\u8bcd\u4e3a\u91cd\u70b9) \u6bd4\u5982: \u7334\u5b50\u559c\u6b22\u5403\u9999\u8549\u3002->\u7334\u5b50 \u559c\u6b22 \u5403 \u9999\u8549 \u3002 b. \u7531\u5206\u8bcd\u8f6c\u5411\u8bcd\u6027\u6807\u6ce8 \u7334\u5b50/NN \u559c\u6b22/VV \u5403/VV \u9999\u8549/NN \u3002/PU \uff08\u4f46\u662f\u80fd\u4e0d\u80fd\u7ad9\u5728\u53e5\u5b50\u4e0a\u5206\u6790\u5462\uff1f\u5c31\u6709\u4e86\u4e0b\u9762\u7684\u53d1\u5c55\uff09 c. \u7531\u8bcd\u6027\u6807\u6ce8\u751f\u6210\u77ed\u8bed\u53e5\u6cd5\u6811 \uff08\u4ece\u6574\u4e2a\u53e5\u5b50\u5206\u6790\uff09 \u77ed\u8bed\u53e5\u6cd5\u6811\u7684\u8ba1\u7b97\u673a\u8868\u793a \u77ed\u8bed\u53e5\u6cd5\u6811\u7684\u903b\u8f91\u8868\u793a d.\u7531\u77ed\u8bed\u53e5\u6cd5\u6811\u8f6c\u6210\u4f9d\u5b58\u6811\uff08\u4f9d\u5b58\u5173\u7cfb\u53ef\u4ee5\u7528\u6811\u5f62\u56fe\u8868\u793a\uff0c\u8868\u793a\u4f9d\u5b58\u5173\u7cfb\u7684\u6811\u5f62\u56fe\u79f0\u4e3a\u4f9d\u5b58\u6811dependency tree\uff09 \u8f6c\u6362\u7684\u4f9d\u5b58\u6811\u957f\u8fd9\u4e2a\u6837\u5b50\uff1a \u8f6c\u6362\u7684\u4f9d\u5b58\u6811\u957f\u8fd9\u4e2a\u6837\u5b50\uff1a \u4f9d\u5b58\u6295\u5c04\u6811 \u4f46\u662f\u8ba1\u7b97\u673a\u4e2d\u80af\u5b9a\u5c31\u4e0d\u662f\u8fd9\u4e48\u5b58\u7684\u4e86\u3002\u6bd4\u5982Stanford Parser \u662f\u8fd9\u4e2a\u6837\u5b50\u7684\uff1a Stanford Parser Dependency Tree \u8fd9\u91cc\u7684\u6570\u5b57\u662f\u8fd9\u4e2a\u8bcd\u7684\u5e8f\u5217\uff1a \u7334\u5b50 -1\uff0c\u559c\u6b22-2\uff0c\u5403-3\uff0c\u9999\u8549-4 (\u7b26\u53f7\u88ab\u629b\u5f03) \u6bd4\u5982\uff1ansubj ( \u559c\u6b22-2\uff0c\u7334\u5b50-1) nsubj\u662f\u8868\u793a\u540e\u4e24\u8005\u7684\u5173\u7cfb\uff0c\u8fd9\u91cc\u524d\u8005\u662f\u7236\u4eb2\uff0c\u540e\u8005\u662f\u513f\u5b50\uff0c\u4e5f\u5c31\u662f \u7334\u5b50 \u4f9d\u5b58\u4e8e \u559c\u6b22 \u3002 \u4e24\u4e2a\u57fa\u672c\u95ee\u9898 \u00b6 \u90fd\u633a\u7b80\u5355\u7684\u6570\u636e\u7ed3\u6784\u95ee\u9898(\u591a\u53c9\u6811\u7684\u8282\u70b9\u95ee\u9898)\uff1a a. \u5df2\u77e5\u4e00\u4e2a\u8282\u70b9\u600e\u4e48\u627e\u5230\u5b83\u7684\u7236(\u5b50)\u8282\u70b9\u3002 b. \u6c42\u4e24\u4e2a\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84 \u5c31\u662f\u627e\u5230\u4e00\u4e2a\u8282\u70b9\uff0c\u628a\u81ea\u5df1\u548c\u6240\u6709\u7236\u8282\u70b9\u653e\u5230\u4e00\u4e2a\u6570\u7ec4\u91cc\uff0c\u518d\u5728\u53e6\u4e00\u4e2a\u8282\u70b9\uff0c\u4ece\u672c\u8eab\u5f00\u59cb\u987a\u7740\u7236\u8282\u70b9\u627e\uff0c\u76f4\u5230\u627e\u5230\u548c\u7b2c\u4e00\u4e2a\u8282\u70b9\u5e76\u4e14\u5b58\u5728\u4e8e\u7b2c\u4e00\u4e2a\u6570\u7ec4\u91cc\uff0c\u8fd9\u6837\uff0c\u7b2c\u4e00\u4e2a\u6570\u7ec4\u4ece0\u5f00\u59cb\u5230\u8fd9\u4e2a\u516c\u5171\u8282\u70b9\u548c\u7b2c\u4e8c\u4e2a\u8282\u70b9\u7684\u4ece\u8fd9\u4e2a\u8282\u70b9\u5230\u81ea\u5df1\u672c\u8eab\u7684\u6240\u6709\u8282\u70b9\u5c31\u662f\u8fd9\u4fe9\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u3002 \u4e3e\u4e2a\u5b9e\u5728\u4f8b\u5b50(\u610f\u89c1\u62bd\u53d6)\uff1a \u00b6 dependency tree\u662f\uff1a \u5c5e\u6027\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\uff1a \u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e2a\u8def\u5f84\u4e0a\u6bcf\u6b21\u7ecf\u8fc7\u7684\u7ebf(\u4e5f\u5c31\u662f\u4ed6\u4eec\u4fe9\u7684\u5173\u7cfb),\u8fd9\u91cc\u7684\u8def\u5f84\u5c31\u662f\u8fd9\u4e2a\u3002 \u5c5e\u6027\u4e0e\u8bc4\u4ef7\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\uff1a \u4ece\u8fd9\u4e24\u7ec4\u6700\u77ed\u8def\u5f84\u5f88\u660e\u663e\u770b\u51fa\u8c01\u8ddf\u8c01\u66f4\u4eb2\u8fd1\uff0c\u8fd9\u4e5f\u662f\u6700\u77ed\u8def\u5f84\u7684\u4e00\u4e2a\u5e94\u7528\u3002 \u5e94\u7528 \u00b6 \u77ed\u8bed\u7f29\u53e5 \u63d0\u53d6\u6587\u672c\u4e3b\u8981\u5185\u5bb9 \u6587\u672c\u5206\u7c7b \u60c5\u611f\u5206\u6790 \u610f\u89c1\u62bd\u53d6\u7b49 \u53c2\u8003\u6587\u6863\uff1a Complete Guide to spaCy SpaCy Dependency Parse","title":"\u4f9d\u5b58\u5206\u6790\u4e0e\u4f9d\u5b58\u6811 dependency parse"},{"location":"pages/nlp/nlpinfo/nlp-dependency-parsing/#\u4f9d\u5b58\u5206\u6790\u4e0e\u4f9d\u5b58\u6811-dependency-parse","text":"\u53e5\u6cd5\u662f\u6307\u53e5\u5b50\u7684\u5404\u4e2a\u7ec4\u6210\u90e8\u5206\u7684\u76f8\u4e92\u5173\u7cfb\uff0c\u53e5\u6cd5\u5206\u6790\u5206\u4e3a\u53e5\u6cd5\u7ed3\u6784\u5206\u6790\uff08syntactic structure parsing\uff09\u548c\u4f9d\u5b58\u5173\u7cfb\u5206\u6790(dependency parsing)\u3002\u53e5\u6cd5\u7ed3\u6784\u5206\u6790\u7528\u4e8e\u83b7\u53d6\u6574\u4e2a\u53e5\u5b50\u7684\u53e5\u6cd5\u7ed3\u6784\uff0c\u4f9d\u5b58\u5206\u6790\u7528\u4e8e\u83b7\u53d6\u8bcd\u6c47\u4e4b\u95f4\u7684\u4f9d\u5b58\u5173\u7cfb\uff0c\u76ee\u524d\u7684\u53e5\u6cd5\u5206\u6790\u5df2\u7ecf\u4ece\u53e5\u6cd5\u7ed3\u6784\u5206\u6790\u8f6c\u5411\u4f9d\u5b58\u53e5\u6cd5\u5206\u6790\u3002 \u4f9d\u5b58\u8bed\u6cd5\u901a\u8fc7\u5206\u6790\u8bed\u8a00\u5355\u4f4d\u5185\u6210\u5206\u4e4b\u95f4\u7684\u4f9d\u5b58\u5173\u7cfb\u63ed\u793a\u5176\u53e5\u6cd5\u7ed3\u6784\uff0c\u4e3b\u5f20\u53e5\u5b50\u4e2d\u6838\u5fc3\u52a8\u8bcd\u662f\u652f\u914d\u5176\u5b83\u6210\u5206\u7684\u4e2d\u5fc3\u6210\u5206\uff0c\u800c\u5b83\u672c\u8eab\u5374\u4e0d\u53d7\u5176\u5b83\u4efb\u4f55\u6210\u5206\u7684\u652f\u914d\uff0c\u6240\u6709\u53d7\u652f\u914d\u6210\u5206\u90fd\u4ee5\u67d0\u79cd\u4f9d\u5b58\u5173\u7cfb\u4ece\u5c5e\u4e8e\u652f\u914d\u8005\u3002 \u572820\u4e16\u7eaa70\u5e74\u4ee3\uff0cRobinson\u63d0\u51fa\u4f9d\u5b58\u8bed\u6cd5\u4e2d\u5173\u4e8e\u4f9d\u5b58\u5173\u7cfb\u7684\u56db\u6761\u516c\u7406\uff1a \u4e00\u4e2a\u53e5\u5b50\u4e2d\u53ea\u6709\u4e00\u4e2a\u6210\u5206\u662f\u72ec\u7acb\u7684\uff1b \u5176\u5b83\u6210\u5206\u76f4\u63a5\u4f9d\u5b58\u4e8e\u67d0\u4e00\u6210\u5206\uff1b \u4efb\u4f55\u4e00\u4e2a\u6210\u5206\u90fd\u4e0d\u80fd\u4f9d\u5b58\u4e0e\u4e24\u4e2a\u6216\u4e24\u4e2a\u4ee5\u4e0a\u7684\u6210\u5206\uff1b \u5982\u679cA\u6210\u5206\u76f4\u63a5\u4f9d\u5b58\u4e8eB\u6210\u5206\uff0c\u800cC\u6210\u5206\u5728\u53e5\u4e2d\u4f4d\u4e8eA\u548cB\u4e4b\u95f4\uff0c\u90a3\u4e48C\u6216\u8005\u76f4\u63a5\u4f9d\u5b58\u4e8eB\uff0c\u6216\u8005\u76f4\u63a5\u4f9d\u5b58\u4e8eA\u548cB\u4e4b\u95f4\u7684\u67d0\u4e00\u6210\u5206\uff1b","title":"\u4f9d\u5b58\u5206\u6790\u4e0e\u4f9d\u5b58\u6811 dependency parse"},{"location":"pages/nlp/nlpinfo/nlp-dependency-parsing/#\u4e00\u4f9d\u5b58\u5173\u7cfb","text":"\u4f9d\u5b58\u5173\u7cfb\u662f\u4e00\u4e2a\u4e2d\u5fc3\u8bcd\u4e0e\u5176\u4ece\u5c5e\u4e4b\u95f4\u7684\u4e8c\u5143\u975e\u5bf9\u79f0\u5173\u7cfb\uff0c\u4e00\u4e2a\u53e5\u5b50\u7684\u4e2d\u5fc3\u8bcd\u901a\u5e38\u662f\u52a8\u8bcd\uff08Verb\uff09\uff0c\u6240\u6709\u5176\u4ed6\u8bcd\u8981\u4e48\u4f9d\u8d56\u4e8e\u4e2d\u5fc3\u8bcd\uff0c\u8981\u4e48\u901a\u8fc7\u4f9d\u8d56\u8def\u5f84\u4e0e\u5b83\u5173\u8054\u3002 1\uff0c\u4f9d\u5b58\u5173\u7cfb \u4f9d\u5b58\u7ed3\u6784\u662f\u52a0\u6807\u7b7e\u7684\u6709\u5411\u56fe\uff0c\u7bad\u5934\u4ece\u4e2d\u5fc3\u8bcd\u6307\u5411\u4ece\u5c5e\uff0c\u5177\u4f53\u6765\u8bf4\uff0c\u7bad\u5934\u662f\u4ecehead\u6307\u5411child\uff0c\u4ece\u8be5\u89e3\u6790\u6811\u53ef\u4ee5\u770b\u51fa\uff0c\u6bcf\u4e2aToken\u53ea\u6709\u4e00\u4e2aHead\u3002 2\uff0c\u5173\u7cfb\u6807\u7b7e \u6807\u7b7e\u8868\u793a\u4ece\u5c5e\u7684\u8bed\u6cd5\u529f\u80fd\uff0c\u540d\u8bcd\u6027\u7684\u6807\u7b7e\u662f\uff1a root\uff1a\u4e2d\u5fc3\u8bcd\uff0c\u901a\u5e38\u662f\u52a8\u8bcd nsubj\uff1a\u540d\u8bcd\u6027\u4e3b\u8bed\uff08nominal subject\uff09 dobj\uff1a\u76f4\u63a5\u5bbe\u8bed\uff08direct object\uff09 prep\uff1a\u4ecb\u8bcd pobj\uff1a\u4ecb\u8bcd\u5bbe\u8bed cc\uff1a\u8fde\u8bcd \u5176\u4ed6\u5e38\u7528\u7684\u6807\u7b7e\uff1a compound\uff1a\u590d\u5408\u8bcd advmod\uff1a\u72b6\u8bed det\uff1a\u9650\u5b9a\u8bcd amod\uff1a\u5f62\u5bb9\u8bcd\u4fee\u9970\u8bed","title":"\u4e00\uff0c\u4f9d\u5b58\u5173\u7cfb"},{"location":"pages/nlp/nlpinfo/nlp-dependency-parsing/#\u4e8c\u89e3\u6790\u4f9d\u5b58\u5173\u7cfb","text":"SpaCy\u80fd\u591f\u5feb\u901f\u51c6\u786e\u5730\u89e3\u6790\u53e5\u5b50\u7684\u4f9d\u5b58\u5173\u7cfb\uff0c\u5e76\u4e14\u5177\u6709\u4e30\u5bcc\u7684API\u7528\u4e8e\u5bfc\u822a\u4f9d\u5b58\u5173\u7cfb\u6811\uff0cSpaCy\u4f7f\u7528head\u548cchild\u6765\u63cf\u8ff0\u4f9d\u5b58\u5173\u7cfb\u4e2d\u7684\u8fde\u63a5\uff0c\u8bc6\u522b\u6bcf\u4e2aToken\u7684\u4f9d\u5b58\u5173\u7cfb\uff1a token.text\uff1atoken\u7684\u6587\u672c token.head\uff1a\u5f53\u524dToken\u7684Parent Token\uff0c\u4ece\u8bed\u6cd5\u5173\u7cfb\u4e0a\u6765\u770b\uff0c\u6bcf\u4e00\u4e2aToken\u90fd\u53ea\u6709\u4e00\u4e2aHead\u3002 token.dep_\uff1a\u4f9d\u5b58\u5173\u7cfb token.children\uff1a\u8bed\u6cd5\u4e0a\u7684\u76f4\u63a5\u5b50\u8282\u70b9 token.ancestors\uff1a\u8bed\u6cd5\u4e0a\u7684\u7236\u8282\u70b9 _pos\uff1a\u8bcd\u6027 _tag\uff1a\u8bcd\u6027 \u8ba9\u6211\u4f7f\u7528SpaCy\u6765\u5bf9\u53e5\u5b50\u8fdb\u884c\u4f9d\u5b58\u5206\u6790\uff1a 1 2 3 4 5 6 import spacy nlp = spacy.load('en') doc = nlp( \"spaCy uses the terms head and child to describe the words\" ) for token in doc: print('{0}({1}) <-- {2} -- {3}({4})'.format(token.text, token.tag_, token.dep_, token.head.text, token.head.tag_)) \u6253\u5370\u6bcf\u4e2aToken\u7684\u4f9d\u5b58\u5173\u7cfb\u548chead\u8282\u70b9\uff0c\u7bad\u5934\u8868\u793a\u4ece\u5c5e\u5173\u7cfb\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u662f\uff1a 1 2 3 4 5 6 7 8 9 10 11 spaCy(NNP) <-- nsubj -- uses(VBZ) uses(VBZ) <-- ROOT -- uses(VBZ) the(DT) <-- det -- head(NN) terms(NNS) <-- compound -- head(NN) head(NN) <-- dobj -- uses(VBZ) and(CC) <-- cc -- head(NN) child(NN) <-- conj -- head(NN) to(TO) <-- aux -- describe(VB) describe(VB) <-- xcomp -- uses(VBZ) the(DT) <-- det -- words(NNS) words(NNS) <-- dobj -- describe(VB) \u4e5f\u53ef\u4ee5\u4f7f\u7528display\u6765\u663e\u793a\u4f9d\u5b58\u5173\u7cfb\uff0c\u5728\u6d4f\u89c8\u5668\u4e2d\u8f93\u5165 http://localhost:5000 \u663e\u793a\u4f9d\u5b58\u7ed3\u6784\uff1a 1 2 3 4 5 6 import spacy from spacy import displacy nlp = spacy.load('en') doc = nlp( \"spaCy uses the terms head and child to describe the words\" ) displacy.serve(doc, style='dep')","title":"\u4e8c\uff0c\u89e3\u6790\u4f9d\u5b58\u5173\u7cfb"},{"location":"pages/nlp/nlpinfo/nlp-dependency-parsing/#\u4e09-\u4f9d\u5b58\u6811\u7684\u6765\u9f99\u53bb\u8109\u53ca\u7528\u6cd5","text":"","title":"\u4e09\uff0c \u4f9d\u5b58\u6811\u7684\u6765\u9f99\u53bb\u8109\u53ca\u7528\u6cd5"},{"location":"pages/nlp/nlpinfo/nlp-dependency-parsing/#\u6765\u5386","text":"a. \u7b80\u5355\u7684\u77ed\u8bed\u5206\u8bcd \uff08\u6b63\u5411\u9006\u5411\u6700\u5927\u5339\u914d\uff0cn-gram\uff0c\u673a\u5668\u5b66\u4e60...\uff09(\u4ee5\u5355\u4e2a\u8bcd\u4e3a\u91cd\u70b9) \u6bd4\u5982: \u7334\u5b50\u559c\u6b22\u5403\u9999\u8549\u3002->\u7334\u5b50 \u559c\u6b22 \u5403 \u9999\u8549 \u3002 b. \u7531\u5206\u8bcd\u8f6c\u5411\u8bcd\u6027\u6807\u6ce8 \u7334\u5b50/NN \u559c\u6b22/VV \u5403/VV \u9999\u8549/NN \u3002/PU \uff08\u4f46\u662f\u80fd\u4e0d\u80fd\u7ad9\u5728\u53e5\u5b50\u4e0a\u5206\u6790\u5462\uff1f\u5c31\u6709\u4e86\u4e0b\u9762\u7684\u53d1\u5c55\uff09 c. \u7531\u8bcd\u6027\u6807\u6ce8\u751f\u6210\u77ed\u8bed\u53e5\u6cd5\u6811 \uff08\u4ece\u6574\u4e2a\u53e5\u5b50\u5206\u6790\uff09 \u77ed\u8bed\u53e5\u6cd5\u6811\u7684\u8ba1\u7b97\u673a\u8868\u793a \u77ed\u8bed\u53e5\u6cd5\u6811\u7684\u903b\u8f91\u8868\u793a d.\u7531\u77ed\u8bed\u53e5\u6cd5\u6811\u8f6c\u6210\u4f9d\u5b58\u6811\uff08\u4f9d\u5b58\u5173\u7cfb\u53ef\u4ee5\u7528\u6811\u5f62\u56fe\u8868\u793a\uff0c\u8868\u793a\u4f9d\u5b58\u5173\u7cfb\u7684\u6811\u5f62\u56fe\u79f0\u4e3a\u4f9d\u5b58\u6811dependency tree\uff09 \u8f6c\u6362\u7684\u4f9d\u5b58\u6811\u957f\u8fd9\u4e2a\u6837\u5b50\uff1a \u8f6c\u6362\u7684\u4f9d\u5b58\u6811\u957f\u8fd9\u4e2a\u6837\u5b50\uff1a \u4f9d\u5b58\u6295\u5c04\u6811 \u4f46\u662f\u8ba1\u7b97\u673a\u4e2d\u80af\u5b9a\u5c31\u4e0d\u662f\u8fd9\u4e48\u5b58\u7684\u4e86\u3002\u6bd4\u5982Stanford Parser \u662f\u8fd9\u4e2a\u6837\u5b50\u7684\uff1a Stanford Parser Dependency Tree \u8fd9\u91cc\u7684\u6570\u5b57\u662f\u8fd9\u4e2a\u8bcd\u7684\u5e8f\u5217\uff1a \u7334\u5b50 -1\uff0c\u559c\u6b22-2\uff0c\u5403-3\uff0c\u9999\u8549-4 (\u7b26\u53f7\u88ab\u629b\u5f03) \u6bd4\u5982\uff1ansubj ( \u559c\u6b22-2\uff0c\u7334\u5b50-1) nsubj\u662f\u8868\u793a\u540e\u4e24\u8005\u7684\u5173\u7cfb\uff0c\u8fd9\u91cc\u524d\u8005\u662f\u7236\u4eb2\uff0c\u540e\u8005\u662f\u513f\u5b50\uff0c\u4e5f\u5c31\u662f \u7334\u5b50 \u4f9d\u5b58\u4e8e \u559c\u6b22 \u3002","title":"\u6765\u5386"},{"location":"pages/nlp/nlpinfo/nlp-dependency-parsing/#\u4e24\u4e2a\u57fa\u672c\u95ee\u9898","text":"\u90fd\u633a\u7b80\u5355\u7684\u6570\u636e\u7ed3\u6784\u95ee\u9898(\u591a\u53c9\u6811\u7684\u8282\u70b9\u95ee\u9898)\uff1a a. \u5df2\u77e5\u4e00\u4e2a\u8282\u70b9\u600e\u4e48\u627e\u5230\u5b83\u7684\u7236(\u5b50)\u8282\u70b9\u3002 b. \u6c42\u4e24\u4e2a\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84 \u5c31\u662f\u627e\u5230\u4e00\u4e2a\u8282\u70b9\uff0c\u628a\u81ea\u5df1\u548c\u6240\u6709\u7236\u8282\u70b9\u653e\u5230\u4e00\u4e2a\u6570\u7ec4\u91cc\uff0c\u518d\u5728\u53e6\u4e00\u4e2a\u8282\u70b9\uff0c\u4ece\u672c\u8eab\u5f00\u59cb\u987a\u7740\u7236\u8282\u70b9\u627e\uff0c\u76f4\u5230\u627e\u5230\u548c\u7b2c\u4e00\u4e2a\u8282\u70b9\u5e76\u4e14\u5b58\u5728\u4e8e\u7b2c\u4e00\u4e2a\u6570\u7ec4\u91cc\uff0c\u8fd9\u6837\uff0c\u7b2c\u4e00\u4e2a\u6570\u7ec4\u4ece0\u5f00\u59cb\u5230\u8fd9\u4e2a\u516c\u5171\u8282\u70b9\u548c\u7b2c\u4e8c\u4e2a\u8282\u70b9\u7684\u4ece\u8fd9\u4e2a\u8282\u70b9\u5230\u81ea\u5df1\u672c\u8eab\u7684\u6240\u6709\u8282\u70b9\u5c31\u662f\u8fd9\u4fe9\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u3002","title":"\u4e24\u4e2a\u57fa\u672c\u95ee\u9898"},{"location":"pages/nlp/nlpinfo/nlp-dependency-parsing/#\u4e3e\u4e2a\u5b9e\u5728\u4f8b\u5b50\u610f\u89c1\u62bd\u53d6","text":"dependency tree\u662f\uff1a \u5c5e\u6027\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\uff1a \u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e2a\u8def\u5f84\u4e0a\u6bcf\u6b21\u7ecf\u8fc7\u7684\u7ebf(\u4e5f\u5c31\u662f\u4ed6\u4eec\u4fe9\u7684\u5173\u7cfb),\u8fd9\u91cc\u7684\u8def\u5f84\u5c31\u662f\u8fd9\u4e2a\u3002 \u5c5e\u6027\u4e0e\u8bc4\u4ef7\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\uff1a \u4ece\u8fd9\u4e24\u7ec4\u6700\u77ed\u8def\u5f84\u5f88\u660e\u663e\u770b\u51fa\u8c01\u8ddf\u8c01\u66f4\u4eb2\u8fd1\uff0c\u8fd9\u4e5f\u662f\u6700\u77ed\u8def\u5f84\u7684\u4e00\u4e2a\u5e94\u7528\u3002","title":"\u4e3e\u4e2a\u5b9e\u5728\u4f8b\u5b50(\u610f\u89c1\u62bd\u53d6)\uff1a"},{"location":"pages/nlp/nlpinfo/nlp-dependency-parsing/#\u5e94\u7528","text":"\u77ed\u8bed\u7f29\u53e5 \u63d0\u53d6\u6587\u672c\u4e3b\u8981\u5185\u5bb9 \u6587\u672c\u5206\u7c7b \u60c5\u611f\u5206\u6790 \u610f\u89c1\u62bd\u53d6\u7b49 \u53c2\u8003\u6587\u6863\uff1a Complete Guide to spaCy SpaCy Dependency Parse","title":"\u5e94\u7528"},{"location":"pages/nlp/nlpinfo/nlp-hanlp-dictionary/","text":"NLP \u8bcd\u5178\u5206\u8bcd \u00b6 NLP \u8bcd\u5178\u5206\u8bcd: \u4e2d\u6587\u5206\u8bcd \uff1a\u6307\u7684\u662f\u5c06\u4e00\u6bb5\u6587\u672c\u62c6\u5206\u4e3a\u4e00\u7cfb\u5217\u5355\u8bcd\u7684\u8fc7\u7a0b\uff0c\u8fd9\u4e9b\u5355\u8bcd\u987a\u5e8f\u62fc\u63a5\u540e\u7b49\u4e8e\u539f\u6587\u672c\u3002 \u4e2d\u6587\u5206\u8bcd\u7b97\u6cd5\u5927\u81f4\u5206\u4e3a \u57fa\u4e8e\u8bcd\u5178\u89c4\u5219 \u4e0e \u57fa\u4e8e\u673a\u5668\u5b66\u4e60 \u8fd9\u4e24\u5927\u6d3e\u3002 \u4ec0\u4e48\u662f\u8bcd \u00b6 \u5728\u57fa\u4e8e\u8bcd\u5178\u7684\u4e2d\u6587\u5206\u8bcd\u4e2d\uff0c\u8bcd\u7684\u5b9a\u4e49\u8981\u73b0\u5b9e\u5f97\u591a\uff1a \u8bcd\u5178\u4e2d\u7684\u5b57\u7b26\u4e32\u5c31\u662f\u8bcd \u3002 \u8bcd\u7684\u6027\u8d28\u2013 \u9f50\u592b\u5b9a\u5f8b \uff1a\u4e00\u4e2a\u5355\u8bcd\u7684\u8bcd\u9891\u4e0e\u5b83\u7684\u8bcd\u9891\u6392\u540d\u6210\u53cd\u6bd4\u3002 \u8bcd\u5178 \u00b6 \u4e92\u8054\u7f51\u8bcd\u5e93(SogouW\uff0c 15\u4e07\u4e2a\u8bcd\u6761)\u3001\u6e05\u534e\u5927\u5b66\u5f00\u653e\u4e2d\u6587\u8bcd\u5e93(THUOCL)\u3001HanLP\u8bcd\u5e93(\u5343\u4e07\u7ea7\u8bcd\u6761) \u8fd9\u91cc\u4ee5HanLP\u9644\u5e26\u7684\u8ff7\u4f60\u6838\u5fc3\u8bcd\u5178\u4e3a\u4f8b(\u672c\u9879\u76ee\u8def\u5f84)\uff1a CoreNatureDictionary.mini.txt 1 2 3 4 5 6 7 \u4e0a\u5347 v 98 vn 18 \u4e0a\u5347\u671f n 1 \u4e0a\u5347\u80a1 n 1 \u4e0a\u5348 t 147 \u4e0a\u534a\u53f6 t 3 \u4e0a\u534a\u573a n 2 \u4e0a\u534a\u591c t 1 HanLP\u4e2d\u7684\u8bcd\u5178\u683c\u5f0f\u662f\u4e00\u79cd\u4ee5\u7a7a\u683c\u5206\u9694\u7684\u8868\u683c\u5f62\u5f0f\uff0c\u7b2c\u4e00\u5217\u662f\u5355\u8bcd\u672c\u8eab\uff0c\u4e4b\u540e\u6bcf\u4e24\u5217\u5206\u522b\u8868\u793a\u8bcd\u6027\u4e0e\u76f8\u5e94\u7684\u8bcd\u9891\u3002 \u5207\u5206\u7b97\u6cd5 \u00b6 \u9996\u5148\uff0c\u52a0\u8f7d\u8bcd\u5178\uff1a 1 2 3 4 5 6 7 8 def load_dictionary(): dic = set() # \u6309\u884c\u8bfb\u53d6\u5b57\u5178\u6587\u4ef6\uff0c\u6bcf\u884c\u7b2c\u4e00\u4e2a\u7a7a\u683c\u4e4b\u524d\u7684\u5b57\u7b26\u4e32\u63d0\u53d6\u51fa\u6765\u3002 for line in open(\"CoreNatureDictionary.mini.txt\",\"r\"): dic.add(line[0:line.find(' ')]) return dic \u5b8c\u5168\u5207\u5206 \u6307\u7684\u662f\uff0c\u627e\u51fa\u4e00\u6bb5\u6587\u672c\u4e2d\u7684\u6240\u6709\u5355\u8bcd\u3002 1 2 3 4 5 6 7 8 9 10 11 def fully_segment(text, dic): word_list = [] for i in range(len(text)): # i \u4ece 0 \u5230text\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7684\u4e0b\u6807\u904d\u5386 for j in range(i + 1, len(text) + 1): # j \u904d\u5386[i + 1, len(text)]\u533a\u95f4 word = text[i:j] # \u53d6\u51fa\u8fde\u7eed\u533a\u95f4[i, j]\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32 if word in dic: # \u5982\u679c\u5728\u8bcd\u5178\u4e2d\uff0c\u5219\u8ba4\u4e3a\u662f\u4e00\u4e2a\u8bcd word_list.append(word) return word_list dic = load_dictionary() print(fully_segment('\u5c31\u8bfb\u5317\u4eac\u5927\u5b66', dic)) \u8f93\u51fa\uff1a 1 ['\u5c31', '\u5c31\u8bfb', '\u8bfb', '\u5317', '\u5317\u4eac', '\u5317\u4eac\u5927\u5b66', '\u4eac', '\u5927', '\u5927\u5b66', '\u5b66'] \u8f93\u51fa\u4e86\u6240\u6709\u53ef\u80fd\u7684\u5355\u8bcd\u3002\u7531\u4e8e\u8bcd\u5e93\u4e2d\u542b\u6709\u5355\u5b57\uff0c\u6240\u4ee5\u7ed3\u679c\u4e2d\u4e5f\u51fa\u73b0\u4e86\u4e00\u4e9b\u5355\u5b57\u3002 \u6b63\u5411\u6700\u957f\u5339\u914d \u4e0a\u9762\u7684\u8f93\u51fa\u5e76\u4e0d\u662f\u4e2d\u6587\u5206\u8bcd\uff0c\u6211\u4eec\u66f4\u9700\u8981\u90a3\u79cd\u6709\u610f\u4e49\u7684\u8bcd\u8bed\u5e8f\u5217\uff0c\u800c\u4e0d\u662f\u6240\u6709\u51fa\u73b0\u5728\u8bcd\u5178\u4e2d\u7684\u5355\u8bcd\u6240\u6784\u6210\u7684\u94fe\u8868\u3002\u6bd4\u5982\uff0c\u6211\u4eec\u5e0c\u671b\u201c\u5317\u4eac\u5927\u5b66\u201d\u6210\u4e3a\u4e00\u6574\u4e2a\u8bcd\uff0c\u800c\u4e0d\u662f\u201c\u5317\u4eac + \u5927\u5b66\u201d\u4e4b\u7c7b\u7684\u788e\u7247\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u5c31\u662f\u5728\u4ee5\u67d0\u4e2a\u4e0b\u6807\u4e3a\u8d77\u70b9\u9012\u589e\u67e5\u8bcd\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4f18\u5148\u8f93\u51fa\u66f4\u957f\u7684\u5355\u8bcd\uff0c\u8fd9\u79cd\u89c4\u5219\u88ab\u79f0\u4e3a \u6700\u957f\u5339\u914d\u7b97\u6cd5 \u3002\u4ece\u524d\u5f80\u540e\u5339\u914d\u5219\u79f0\u4e3a \u6b63\u5411\u6700\u957f\u5339\u914d \uff0c\u53cd\u4e4b\u5219\u79f0\u4e3a \u9006\u5411\u6700\u957f\u5339\u914d \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 def forward_segment(text, dic): word_list = [] i = 0 while i < len(text): longest_word = text[i] # \u5f53\u524d\u626b\u63cf\u4f4d\u7f6e\u7684\u5355\u5b57 for j in range(i + 1, len(text) + 1): # \u6240\u6709\u53ef\u80fd\u7684\u7ed3\u5c3e word = text[i:j] # \u4ece\u5f53\u524d\u4f4d\u7f6e\u5230\u7ed3\u5c3e\u7684\u8fde\u7eed\u5b57\u7b26\u4e32 if word in dic: # \u5728\u8bcd\u5178\u4e2d if len(word) > len(longest_word): # \u5e76\u4e14\u66f4\u957f longest_word = word # \u5219\u66f4\u4f18\u5148\u8f93\u51fa word_list.append(longest_word) # \u8f93\u51fa\u6700\u957f\u8bcd i += len(longest_word) # \u6b63\u5411\u626b\u63cf return word_list dic = load_dictionary() print(forward_segment('\u5c31\u8bfb\u5317\u4eac\u5927\u5b66', dic)) print(forward_segment('\u7814\u7a76\u751f\u547d\u8d77\u6e90', dic)) \u8f93\u51fa\uff1a 1 2 ['\u5c31\u8bfb', '\u5317\u4eac\u5927\u5b66'] ['\u7814\u7a76\u751f', '\u547d', '\u8d77\u6e90'] \u7b2c\u4e8c\u53e5\u8bdd\u5c31\u4f1a\u4ea7\u751f\u8bef\u5dee\u4e86\uff0c\u6211\u4eec\u662f\u9700\u8981\u628a\u201c\u7814\u7a76\u201d\u63d0\u53d6\u51fa\u6765\uff0c\u7ed3\u679c\u6309\u7167\u6b63\u5411\u6700\u957f\u5339\u914d\u7b97\u6cd5\u5c31\u63d0\u53d6\u51fa\u4e86\u201c\u7814\u7a76\u751f\u201d\uff0c\u6240\u4ee5\u4eba\u4eec\u5c31\u60f3\u51fa\u4e86\u9006\u5411\u6700\u957f\u5339\u914d\u3002 \u9006\u5411\u6700\u957f\u5339\u914d 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 def backward_segment(text, dic): word_list = [] i = len(text) - 1 while i >= 0: # \u626b\u63cf\u4f4d\u7f6e\u4f5c\u4e3a\u7ec8\u70b9 longest_word = text[i] # \u626b\u63cf\u4f4d\u7f6e\u7684\u5355\u5b57 for j in range(0, i): # \u904d\u5386[0, i]\u533a\u95f4\u4f5c\u4e3a\u5f85\u67e5\u8be2\u8bcd\u8bed\u7684\u8d77\u70b9 word = text[j: i + 1] # \u53d6\u51fa[j, i]\u533a\u95f4\u4f5c\u4e3a\u5f85\u67e5\u8be2\u5355\u8bcd if word in dic: if len(word) > len(longest_word): # \u8d8a\u957f\u4f18\u5148\u7ea7\u8d8a\u9ad8 longest_word = word break word_list.insert(0, longest_word) # \u9006\u5411\u626b\u63cf\uff0c\u6240\u4ee5\u8d8a\u5148\u67e5\u51fa\u7684\u5355\u8bcd\u5728\u4f4d\u7f6e\u4e0a\u8d8a\u9760\u540e i -= len(longest_word) return word_list dic = load_dictionary() print(backward_segment('\u7814\u7a76\u751f\u547d\u8d77\u6e90', dic)) print(backward_segment('\u9879\u76ee\u7684\u7814\u7a76', dic)) \u8f93\u51fa\uff1a 1 2 ['\u7814\u7a76', '\u751f\u547d', '\u8d77\u6e90'] ['\u9879', '\u76ee\u7684', '\u7814\u7a76'] \u7b2c\u4e00\u53e5\u6b63\u786e\u4e86\uff0c\u4f46\u4e0b\u4e00\u53e5\u53c8\u51fa\u9519\u4e86\uff0c\u53ef\u8c13\u62c6\u4e1c\u5899\u8865\u897f\u5899\u3002\u53e6\u4e00\u4e9b\u4eba\u63d0\u51fa\u7efc\u5408\u4e24\u79cd\u89c4\u5219\uff0c\u671f\u5f85\u5b83\u4eec\u53d6\u957f\u8865\u77ed\uff0c\u79f0\u4e3a\u53cc\u5411\u6700\u957f\u5339\u914d\u3002 \u53cc\u5411\u6700\u957f\u5339\u914d \u8fd9\u662f\u4e00\u79cd\u878d\u5408\u4e24\u79cd\u5339\u914d\u65b9\u6cd5\u7684\u590d\u6742\u89c4\u5219\u96c6\uff0c\u6d41\u7a0b\u5982\u4e0b\uff1a \u540c\u65f6\u6267\u884c\u6b63\u5411\u548c\u9006\u5411\u6700\u957f\u5339\u914d\uff0c\u82e5\u4e24\u8005\u7684\u8bcd\u6570\u4e0d\u540c\uff0c\u5219\u8fd4\u56de\u8bcd\u6570\u66f4\u5c11\u7684\u90a3\u4e00\u4e2a\u3002 \u5426\u5219\uff0c\u8fd4\u56de\u4e24\u8005\u4e2d\u5355\u5b57\u66f4\u5c11\u7684\u90a3\u4e00\u4e2a\u3002\u5f53\u5355\u5b57\u6570\u4e5f\u76f8\u540c\u65f6\uff0c\u4f18\u5148\u8fd4\u56de\u9006\u5411\u6700\u957f\u5339\u914d\u7684\u7ed3\u679c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 def count_single_char(word_list: list): # \u7edf\u8ba1\u5355\u5b57\u6210\u8bcd\u7684\u4e2a\u6570 return sum(1 for word in word_list if len(word) == 1) def bidirectional_segment(text, dic): f = forward_segment(text, dic) b = backward_segment(text, dic) if len(f) < len(b): # \u8bcd\u6570\u66f4\u5c11\u4f18\u5148\u7ea7\u66f4\u9ad8 return f elif len(f) > len(b): return b else: if count_single_char(f) < count_single_char(b): # \u5355\u5b57\u66f4\u5c11\u4f18\u5148\u7ea7\u66f4\u9ad8 return f else: return b # \u90fd\u76f8\u7b49\u65f6\u9006\u5411\u5339\u914d\u4f18\u5148\u7ea7\u66f4\u9ad8 print(bidirectional_segment('\u7814\u7a76\u751f\u547d\u8d77\u6e90', dic)) print(bidirectional_segment('\u9879\u76ee\u7684\u7814\u7a76', dic)) \u8f93\u51fa\uff1a 1 2 ['\u7814\u7a76', '\u751f\u547d', '\u8d77\u6e90'] ['\u9879', '\u76ee\u7684', '\u7814\u7a76'] \u901a\u8fc7\u4ee5\u4e0a\u51e0\u79cd\u5207\u5206\u7b97\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u505a\u4e00\u4e2a\u5bf9\u6bd4\uff1a \u4e0a\u56fe\u663e\u793a\uff0c\u53cc\u5411\u6700\u957f\u5339\u914d\u7684\u786e\u57282\u30013\u30015\u8fd93\u79cd\u60c5\u51b5\u4e0b\u9009\u62e9\u51fa\u4e86\u6700\u597d\u7684\u7ed3\u679c\uff0c\u4f46\u57284\u53f7\u53e5\u5b50\u4e0a\u9009\u62e9\u4e86\u9519\u8bef\u7684\u7ed3\u679c\uff0c\u4f7f\u5f97\u6700\u7ec8\u6b63\u786e\u7387 3/6 \u53cd\u800c\u5c0f\u4e8e\u9006\u5411\u6700\u957f\u5339\u914d\u7684 4/6 \uff0c \u7531\u6b64\uff0c\u89c4\u5219\u7cfb\u7edf\u7684\u8106\u5f31\u53ef\u89c1\u4e00\u6591\u3002\u89c4\u5219\u96c6\u7684\u7ef4\u62a4\u6709\u65f6\u662f\u62c6\u4e1c\u5899\u8865\u897f\u5899\uff0c\u6709\u65f6\u662f\u5e2e\u5012\u5fd9\u3002 \u5b57\u5178\u6811 \u00b6 \u5339\u914d\u7b97\u6cd5\u7684\u74f6\u9888\u4e4b\u4e00\u5728\u4e8e\u5982\u4f55\u5224\u65ad\u96c6\u5408(\u8bcd\u5178)\u4e2d\u662f\u5426\u542b\u6709\u5b57\u7b26\u4e32\u3002\u5982\u679c\u7528\u6709\u5e8f\u96c6\u5408TreeMap)\u7684\u8bdd\uff0c\u590d\u6742\u5ea6\u662fo(logn) ( n\u662f\u8bcd\u5178\u5927\u5c0f);\u5982\u679c\u7528\u6563\u5217\u8868( Java\u7684HashMap. Python\u7684dict )\u7684\u8bdd\uff0c\u8d26\u9762\u4e0a\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u867d\u7136\u4e0b\u964d\u4e86\uff0c\u4f46\u5185\u5b58\u590d\u6742\u5ea6\u5374\u4e0a\u53bb\u4e86\u3002\u6709\u6ca1\u6709\u901f\u5ea6\u53c8\u5feb\u3001\u5185\u5b58\u53c8\u7701\u7684\u6570\u636e\u7ed3\u6784\u5462\uff1f\u8fd9\u5c31\u662f \u5b57\u5178\u6811 \u3002 \u4ec0\u4e48\u662f\u5b57\u5178\u6811 \u5b57\u7b26\u4e32\u96c6\u5408\u5e38\u7528\u5b87\u5178\u6811(trie\u6811\u3001\u524d\u7f00\u6811)\u5b58\u50a8\uff0c\u8fd9\u662f\u4e00\u79cd\u5b57\u7b26\u4e32\u4e0a\u7684\u6811\u5f62\u6570\u636e\u7ed3\u6784\u3002\u5b57\u5178\u6811\u4e2d\u6bcf\u6761\u8fb9\u90fd\u5bf9\u5e94\u4e00\u4e2a\u5b57\uff0c \u4ece\u6839\u8282\u70b9\u5f80\u4e0b\u7684\u8def\u5f84\u6784\u6210\u4e00\u4e2a\u4e2a\u5b57\u7b26\u4e32\u3002\u5b57\u5178\u6811\u5e76\u4e0d\u76f4\u63a5\u5728\u8282\u70b9\u4e0a\u5b58\u50a8\u5b57\u7b26\u4e32\uff0c \u800c\u662f\u5c06\u8bcd\u8bed\u89c6\u4f5c\u6839\u8282\u70b9\u5230\u67d0\u8282\u70b9\u4e4b\u95f4\u7684\u4e00\u6761\u8def\u5f84\uff0c\u5e76\u5728\u7ec8\u70b9\u8282\u70b9(\u84dd\u8272) \u4e0a\u505a\u4e2a\u6807\u8bb0\u201c\u8be5\u8282\u70b9\u5bf9\u5e94\u8bcd\u8bed\u7684\u7ed3\u5c3e\u201d\u3002\u5b57\u7b26\u4e32\u5c31\u662f\u4e00 \u6761\u8def\u5f84\uff0c\u8981\u67e5\u8be2\u4e00\u4e2a\u5355\u8bcd\uff0c\u53ea\u9700\u987a\u7740\u8fd9\u6761\u8def\u5f84\u4ece\u6839\u8282\u70b9\u5f80\u4e0b\u8d70\u3002\u5982\u679c\u80fd\u8d70\u5230\u7279\u6b8a\u6807\u8bb0\u7684\u8282\u70b9\uff0c\u5219\u8bf4\u660e\u8be5\u5b57\u7b26\u4e32\u5728\u96c6\u5408\u4e2d\uff0c\u5426\u5219\u8bf4\u660e\u4e0d\u5b58\u5728\u3002\u4e00\u4e2a\u5178\u578b\u7684\u5b57\u5178\u6811\u5982\u4e0b\u56fe\u6240\u793a\u6240\u793a\u3002 \u5176\u4e2d\uff0c\u84dd\u8272\u6807\u8bb0\u7740\u8be5\u8282\u70b9\u662f\u4e00\u4e2a\u8bcd\u7684\u7ed3\u5c3e\uff0c\u6570\u5b57\u662f\u4eba\u4e3a\u7684\u7f16\u53f7\u3002\u6309\u7167\u8def\u5f84\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u5982\u4e0b\u8868\u6240\u793a\uff1a \u8bcd\u8bed \u8def\u5f84 \u5165\u95e8 0-1-2 \u81ea\u7136 0-3-4 \u81ea\u7136\u4eba 0-3-4-5 \u81ea\u7136\u8bed\u8a00 0-3-4-6-7 \u81ea\u8bed 0-3-8 \u5f53\u8bcd\u5178\u5927\u5c0f\u4e3a n \u65f6\uff0c\u867d\u7136\u6700\u574f\u60c5\u51b5\u4e0b\u5b57\u5178\u6811\u7684\u590d\u6742\u5ea6\u4f9d\u7136\u662fO(logn) (\u5047\u8bbe\u5b50\u8282\u70b9\u7528\u5bf9\u6570\u590d\u6742\u5ea6\u7684\u6570\u636e\u7ed3\u6784\u5b58\u50a8\uff0c\u6240\u6709\u8bcd\u8bed\u90fd\u662f\u5355\u5b57)\uff0c\u4f46\u5b83\u7684\u5b9e\u9645\u901f\u5ea6\u6bd4\u4e8c\u5206\u67e5\u627e\u5feb\u3002\u8fd9\u662f\u56e0\u4e3a\u968f\u7740\u8def\u5f84\u7684\u6df1\u5165\uff0c\u524d\u7f00\u5339\u914d\u662f\u9012\u8fdb\u7684\u8fc7\u7a0b\uff0c\u7b97\u6cd5\u4e0d\u5fc5\u6bd4\u8f83\u5b57\u7b26\u4e32\u7684\u524d\u7f00\u3002 \u5b57\u5178\u6811\u7684\u5b9e\u73b0 \u7531\u4e0a\u56fe\u53ef\u77e5\uff0c\u6bcf\u4e2a\u8282\u70b9\u90fd\u5e94\u8be5\u81f3\u5c11\u77e5\u9053\u81ea\u5df1\u7684\u5b50\u8282\u70b9\u4e0e\u5bf9\u5e94\u7684\u8fb9\uff0c\u4ee5\u53ca\u81ea\u5df1\u662f\u5426\u5bf9\u5e94\u4e00\u4e2a\u8bcd\u3002\u5982\u679c\u8981\u5b9e\u73b0\u6620\u5c04\u800c\u4e0d\u662f\u96c6\u5408\u7684\u8bdd\uff0c\u8fd8\u9700\u8981\u77e5\u9053\u81ea\u5df1\u5bf9\u5e94\u7684\u503c\u3002\u6211\u4eec\u7ea6\u5b9a\u7528\u503c\u4e3aNone\u8868\u793a\u8282\u70b9\u4e0d\u5bf9\u5e94\u8bcd\u8bed\uff0c\u867d\u7136\u8fd9\u6837\u5c31\u4e0d\u80fd\u63d2\u4eba\u503c\u4e3aNone\u7684\u952e\u4e86\uff0c\u4f46\u5b9e\u73b0\u8d77\u6765\u66f4\u7b80\u6d01\u3002\u90a3\u4e48\u5b57\u5178\u6811\u7684\u5b9e\u73b0\u53c2\u89c1\u9879\u76ee\u8def\u5f84(\u4e0e\u4e66\u4e0a\u7565\u6709\u4e0d\u540c\uff0c\u6211\u5199\u7684\u6bd4\u8f83\u7b80\u6d01)\uff1a code/ch02/trie.py \u901a\u8fc7 debug\u8fd0\u884c trie.py \u4ee3\u7801 \uff0c\u53ef\u4ee5\u89c2\u5bdf\u5230 trie \u7c7b\u7684\u5b57\u5178\u6811\u7ed3\u6784\uff1a \u57fa\u4e8e\u5b57\u5178\u6811\u7684\u5176\u5b83\u7b97\u6cd5 \u00b6 \u5b57\u5178\u6811\u7684\u6570\u636e\u7ed3\u6784\u5728\u4ee5\u4e0a\u7684\u5207\u5206\u7b97\u6cd5\u4e2d\u5df2\u7ecf\u5f88\u5feb\u4e86\uff0c\u4f46\u5389\u5bb3\u7684\u662f\u4f5c\u8005\u901a\u8fc7\u81ea\u5df1\u7684\u52aa\u529b\u6539\u8fdb\u4e86\u57fa\u4e8e\u5b57\u5178\u6811\u7684\u7b97\u6cd5\uff0c\u628a\u5206\u8bcd\u901f\u5ea6\u63a8\u5411\u4e86\u5343\u4e07\u5b57\u6bcf\u79d2\u7684\u7ea7\u522b\uff0c\u8fd9\u91cc\u4e0d\u4e00\u4e00\u8be6\u7ec6\u4ecb\u7ecd\uff0c\u8be6\u60c5\u89c1\u4e66\uff0c\u4e3b\u8981\u6309\u7167\u4ee5\u4e0b\u9012\u8fdb\u5173\u7cfb\u4f18\u5316\uff1a \u9996\u5b57\u6563\u5217\u5176\u4f59\u4e8c\u5206\u7684\u5b57\u5178\u6811 \u53cc\u6570\u7ec4\u5b57\u5178\u6811 AC\u81ea\u52a8\u673a(\u591a\u6a21\u5f0f\u5339\u914d) \u57fa\u4e8e\u53cc\u6570\u7ec4\u5b57\u5178\u6811\u7684AC\u81ea\u52a8\u673a HanLP\u7684\u8bcd\u5178\u5206\u8bcd\u5b9e\u73b0 \u00b6 DoubleArrayTrieSegment DoubleArrayTrieSegment\u5206\u8bcd\u5668\u662f\u5bf9DAT\u6700\u957f\u5339\u914d\u7684\u5c01\u88c5\uff0c\u9ed8\u8ba4\u52a0\u8f7dhanlp.properties\u4e2dCoreDictionaryPath\u5236\u5b9a\u7684\u8bcd\u5178\u3002 1 2 3 4 5 6 7 8 9 10 11 12 from pyhanlp import * # \u4e0d\u663e\u793a\u8bcd\u6027 HanLP.Config.ShowTermNature = False # \u53ef\u4f20\u5165\u81ea\u5b9a\u4e49\u5b57\u5178 [dir1, dir2] segment = DoubleArrayTrieSegment() # \u6fc0\u6d3b\u6570\u5b57\u548c\u82f1\u6587\u8bc6\u522b segment.enablePartOfSpeechTagging(True) print(segment.seg(\"\u6c5f\u897f\u9131\u9633\u6e56\u5e72\u67af\uff0c\u4e2d\u56fd\u6700\u5927\u6de1\u6c34\u6e56\u53d8\u6210\u5927\u8349\u539f\")) print(segment.seg(\"\u4e0a\u6d77\u5e02\u8679\u53e3\u533a\u5927\u8fde\u897f\u8def550\u53f7SISU\")) \u8f93\u51fa\uff1a 1 2 [\u6c5f\u897f, \u9131\u9633\u6e56, \u5e72\u67af, \uff0c, \u4e2d\u56fd, \u6700\u5927, \u6de1\u6c34\u6e56, \u53d8\u6210, \u5927\u8349\u539f] [\u4e0a\u6d77\u5e02, \u8679\u53e3\u533a, \u5927\u8fde, \u897f\u8def, 550, \u53f7, SISU] \u53bb\u6389\u505c\u7528\u8bcd \u505c\u7528\u8bcd\u8bcd\u5178\u6587\u4ef6\uff1a stopwords.txt \u8be5\u8bcd\u5178\u6536\u5f55\u4e86\u5e38\u89c1\u7684\u4e2d\u82f1\u6587\u65e0\u610f\u4e49\u8bcd\u6c47(\u4e0d\u542b\u654f\u611f\u8bcd)\uff0c\u6bcf\u884c\u4e00\u4e2a\u8bcd\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 def load_from_file(path): \"\"\" \u4ece\u8bcd\u5178\u6587\u4ef6\u52a0\u8f7dDoubleArrayTrie :param path: \u8bcd\u5178\u8def\u5f84 :return: \u53cc\u6570\u7ec4trie\u6811 \"\"\" map = JClass('java.util.TreeMap')() # \u521b\u5efaTreeMap\u5b9e\u4f8b with open(path) as src: for word in src: word = word.strip() # \u53bb\u6389Python\u8bfb\u5165\u7684\\n map[word] = word return JClass('com.hankcs.hanlp.collection.trie.DoubleArrayTrie')(map) ## \u53bb\u6389\u505c\u7528\u8bcd def remove_stopwords_termlist(termlist, trie): return [term.word for term in termlist if not trie.containsKey(term.word)] trie = load_from_file('stopwords.txt') termlist = segment.seg(\"\u6c5f\u897f\u9131\u9633\u6e56\u5e72\u67af\u4e86\uff0c\u4e2d\u56fd\u6700\u5927\u7684\u6de1\u6c34\u6e56\u53d8\u6210\u4e86\u5927\u8349\u539f\") print('\u53bb\u6389\u505c\u7528\u8bcd\u524d\uff1a', termlist) print('\u53bb\u6389\u505c\u7528\u8bcd\u540e\uff1a', remove_stopwords_termlist(termlist, trie)) \u8f93\u51fa\uff1a 1 2 \u53bb\u6389\u505c\u7528\u8bcd\u524d\uff1a [\u6c5f\u897f, \u9131\u9633\u6e56, \u5e72\u67af, \u4e86, \uff0c, \u4e2d\u56fd, \u6700\u5927, \u7684, \u6de1\u6c34\u6e56, \u53d8\u6210, \u4e86, \u5927\u8349\u539f] \u53bb\u6389\u505c\u7528\u8bcd\u540e\uff1a ['\u6c5f\u897f', '\u9131\u9633\u6e56', '\u5e72\u67af', '\u4e2d\u56fd', '\u6700\u5927', '\u6de1\u6c34\u6e56', '\u53d8\u6210', '\u5927\u8349\u539f']","title":"NLP HanNLP \u8bcd\u5178\u5206\u8bcd"},{"location":"pages/nlp/nlpinfo/nlp-hanlp-dictionary/#NLP-\u8bcd\u5178\u5206\u8bcd","text":"NLP \u8bcd\u5178\u5206\u8bcd: \u4e2d\u6587\u5206\u8bcd \uff1a\u6307\u7684\u662f\u5c06\u4e00\u6bb5\u6587\u672c\u62c6\u5206\u4e3a\u4e00\u7cfb\u5217\u5355\u8bcd\u7684\u8fc7\u7a0b\uff0c\u8fd9\u4e9b\u5355\u8bcd\u987a\u5e8f\u62fc\u63a5\u540e\u7b49\u4e8e\u539f\u6587\u672c\u3002 \u4e2d\u6587\u5206\u8bcd\u7b97\u6cd5\u5927\u81f4\u5206\u4e3a \u57fa\u4e8e\u8bcd\u5178\u89c4\u5219 \u4e0e \u57fa\u4e8e\u673a\u5668\u5b66\u4e60 \u8fd9\u4e24\u5927\u6d3e\u3002","title":"NLP \u8bcd\u5178\u5206\u8bcd"},{"location":"pages/nlp/nlpinfo/nlp-hanlp-dictionary/#\u4ec0\u4e48\u662f\u8bcd","text":"\u5728\u57fa\u4e8e\u8bcd\u5178\u7684\u4e2d\u6587\u5206\u8bcd\u4e2d\uff0c\u8bcd\u7684\u5b9a\u4e49\u8981\u73b0\u5b9e\u5f97\u591a\uff1a \u8bcd\u5178\u4e2d\u7684\u5b57\u7b26\u4e32\u5c31\u662f\u8bcd \u3002 \u8bcd\u7684\u6027\u8d28\u2013 \u9f50\u592b\u5b9a\u5f8b \uff1a\u4e00\u4e2a\u5355\u8bcd\u7684\u8bcd\u9891\u4e0e\u5b83\u7684\u8bcd\u9891\u6392\u540d\u6210\u53cd\u6bd4\u3002","title":"\u4ec0\u4e48\u662f\u8bcd"},{"location":"pages/nlp/nlpinfo/nlp-hanlp-dictionary/#\u8bcd\u5178","text":"\u4e92\u8054\u7f51\u8bcd\u5e93(SogouW\uff0c 15\u4e07\u4e2a\u8bcd\u6761)\u3001\u6e05\u534e\u5927\u5b66\u5f00\u653e\u4e2d\u6587\u8bcd\u5e93(THUOCL)\u3001HanLP\u8bcd\u5e93(\u5343\u4e07\u7ea7\u8bcd\u6761) \u8fd9\u91cc\u4ee5HanLP\u9644\u5e26\u7684\u8ff7\u4f60\u6838\u5fc3\u8bcd\u5178\u4e3a\u4f8b(\u672c\u9879\u76ee\u8def\u5f84)\uff1a CoreNatureDictionary.mini.txt 1 2 3 4 5 6 7 \u4e0a\u5347 v 98 vn 18 \u4e0a\u5347\u671f n 1 \u4e0a\u5347\u80a1 n 1 \u4e0a\u5348 t 147 \u4e0a\u534a\u53f6 t 3 \u4e0a\u534a\u573a n 2 \u4e0a\u534a\u591c t 1 HanLP\u4e2d\u7684\u8bcd\u5178\u683c\u5f0f\u662f\u4e00\u79cd\u4ee5\u7a7a\u683c\u5206\u9694\u7684\u8868\u683c\u5f62\u5f0f\uff0c\u7b2c\u4e00\u5217\u662f\u5355\u8bcd\u672c\u8eab\uff0c\u4e4b\u540e\u6bcf\u4e24\u5217\u5206\u522b\u8868\u793a\u8bcd\u6027\u4e0e\u76f8\u5e94\u7684\u8bcd\u9891\u3002","title":"\u8bcd\u5178"},{"location":"pages/nlp/nlpinfo/nlp-hanlp-dictionary/#\u5207\u5206\u7b97\u6cd5","text":"\u9996\u5148\uff0c\u52a0\u8f7d\u8bcd\u5178\uff1a 1 2 3 4 5 6 7 8 def load_dictionary(): dic = set() # \u6309\u884c\u8bfb\u53d6\u5b57\u5178\u6587\u4ef6\uff0c\u6bcf\u884c\u7b2c\u4e00\u4e2a\u7a7a\u683c\u4e4b\u524d\u7684\u5b57\u7b26\u4e32\u63d0\u53d6\u51fa\u6765\u3002 for line in open(\"CoreNatureDictionary.mini.txt\",\"r\"): dic.add(line[0:line.find(' ')]) return dic \u5b8c\u5168\u5207\u5206 \u6307\u7684\u662f\uff0c\u627e\u51fa\u4e00\u6bb5\u6587\u672c\u4e2d\u7684\u6240\u6709\u5355\u8bcd\u3002 1 2 3 4 5 6 7 8 9 10 11 def fully_segment(text, dic): word_list = [] for i in range(len(text)): # i \u4ece 0 \u5230text\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7684\u4e0b\u6807\u904d\u5386 for j in range(i + 1, len(text) + 1): # j \u904d\u5386[i + 1, len(text)]\u533a\u95f4 word = text[i:j] # \u53d6\u51fa\u8fde\u7eed\u533a\u95f4[i, j]\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32 if word in dic: # \u5982\u679c\u5728\u8bcd\u5178\u4e2d\uff0c\u5219\u8ba4\u4e3a\u662f\u4e00\u4e2a\u8bcd word_list.append(word) return word_list dic = load_dictionary() print(fully_segment('\u5c31\u8bfb\u5317\u4eac\u5927\u5b66', dic)) \u8f93\u51fa\uff1a 1 ['\u5c31', '\u5c31\u8bfb', '\u8bfb', '\u5317', '\u5317\u4eac', '\u5317\u4eac\u5927\u5b66', '\u4eac', '\u5927', '\u5927\u5b66', '\u5b66'] \u8f93\u51fa\u4e86\u6240\u6709\u53ef\u80fd\u7684\u5355\u8bcd\u3002\u7531\u4e8e\u8bcd\u5e93\u4e2d\u542b\u6709\u5355\u5b57\uff0c\u6240\u4ee5\u7ed3\u679c\u4e2d\u4e5f\u51fa\u73b0\u4e86\u4e00\u4e9b\u5355\u5b57\u3002 \u6b63\u5411\u6700\u957f\u5339\u914d \u4e0a\u9762\u7684\u8f93\u51fa\u5e76\u4e0d\u662f\u4e2d\u6587\u5206\u8bcd\uff0c\u6211\u4eec\u66f4\u9700\u8981\u90a3\u79cd\u6709\u610f\u4e49\u7684\u8bcd\u8bed\u5e8f\u5217\uff0c\u800c\u4e0d\u662f\u6240\u6709\u51fa\u73b0\u5728\u8bcd\u5178\u4e2d\u7684\u5355\u8bcd\u6240\u6784\u6210\u7684\u94fe\u8868\u3002\u6bd4\u5982\uff0c\u6211\u4eec\u5e0c\u671b\u201c\u5317\u4eac\u5927\u5b66\u201d\u6210\u4e3a\u4e00\u6574\u4e2a\u8bcd\uff0c\u800c\u4e0d\u662f\u201c\u5317\u4eac + \u5927\u5b66\u201d\u4e4b\u7c7b\u7684\u788e\u7247\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u5c31\u662f\u5728\u4ee5\u67d0\u4e2a\u4e0b\u6807\u4e3a\u8d77\u70b9\u9012\u589e\u67e5\u8bcd\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4f18\u5148\u8f93\u51fa\u66f4\u957f\u7684\u5355\u8bcd\uff0c\u8fd9\u79cd\u89c4\u5219\u88ab\u79f0\u4e3a \u6700\u957f\u5339\u914d\u7b97\u6cd5 \u3002\u4ece\u524d\u5f80\u540e\u5339\u914d\u5219\u79f0\u4e3a \u6b63\u5411\u6700\u957f\u5339\u914d \uff0c\u53cd\u4e4b\u5219\u79f0\u4e3a \u9006\u5411\u6700\u957f\u5339\u914d \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 def forward_segment(text, dic): word_list = [] i = 0 while i < len(text): longest_word = text[i] # \u5f53\u524d\u626b\u63cf\u4f4d\u7f6e\u7684\u5355\u5b57 for j in range(i + 1, len(text) + 1): # \u6240\u6709\u53ef\u80fd\u7684\u7ed3\u5c3e word = text[i:j] # \u4ece\u5f53\u524d\u4f4d\u7f6e\u5230\u7ed3\u5c3e\u7684\u8fde\u7eed\u5b57\u7b26\u4e32 if word in dic: # \u5728\u8bcd\u5178\u4e2d if len(word) > len(longest_word): # \u5e76\u4e14\u66f4\u957f longest_word = word # \u5219\u66f4\u4f18\u5148\u8f93\u51fa word_list.append(longest_word) # \u8f93\u51fa\u6700\u957f\u8bcd i += len(longest_word) # \u6b63\u5411\u626b\u63cf return word_list dic = load_dictionary() print(forward_segment('\u5c31\u8bfb\u5317\u4eac\u5927\u5b66', dic)) print(forward_segment('\u7814\u7a76\u751f\u547d\u8d77\u6e90', dic)) \u8f93\u51fa\uff1a 1 2 ['\u5c31\u8bfb', '\u5317\u4eac\u5927\u5b66'] ['\u7814\u7a76\u751f', '\u547d', '\u8d77\u6e90'] \u7b2c\u4e8c\u53e5\u8bdd\u5c31\u4f1a\u4ea7\u751f\u8bef\u5dee\u4e86\uff0c\u6211\u4eec\u662f\u9700\u8981\u628a\u201c\u7814\u7a76\u201d\u63d0\u53d6\u51fa\u6765\uff0c\u7ed3\u679c\u6309\u7167\u6b63\u5411\u6700\u957f\u5339\u914d\u7b97\u6cd5\u5c31\u63d0\u53d6\u51fa\u4e86\u201c\u7814\u7a76\u751f\u201d\uff0c\u6240\u4ee5\u4eba\u4eec\u5c31\u60f3\u51fa\u4e86\u9006\u5411\u6700\u957f\u5339\u914d\u3002 \u9006\u5411\u6700\u957f\u5339\u914d 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 def backward_segment(text, dic): word_list = [] i = len(text) - 1 while i >= 0: # \u626b\u63cf\u4f4d\u7f6e\u4f5c\u4e3a\u7ec8\u70b9 longest_word = text[i] # \u626b\u63cf\u4f4d\u7f6e\u7684\u5355\u5b57 for j in range(0, i): # \u904d\u5386[0, i]\u533a\u95f4\u4f5c\u4e3a\u5f85\u67e5\u8be2\u8bcd\u8bed\u7684\u8d77\u70b9 word = text[j: i + 1] # \u53d6\u51fa[j, i]\u533a\u95f4\u4f5c\u4e3a\u5f85\u67e5\u8be2\u5355\u8bcd if word in dic: if len(word) > len(longest_word): # \u8d8a\u957f\u4f18\u5148\u7ea7\u8d8a\u9ad8 longest_word = word break word_list.insert(0, longest_word) # \u9006\u5411\u626b\u63cf\uff0c\u6240\u4ee5\u8d8a\u5148\u67e5\u51fa\u7684\u5355\u8bcd\u5728\u4f4d\u7f6e\u4e0a\u8d8a\u9760\u540e i -= len(longest_word) return word_list dic = load_dictionary() print(backward_segment('\u7814\u7a76\u751f\u547d\u8d77\u6e90', dic)) print(backward_segment('\u9879\u76ee\u7684\u7814\u7a76', dic)) \u8f93\u51fa\uff1a 1 2 ['\u7814\u7a76', '\u751f\u547d', '\u8d77\u6e90'] ['\u9879', '\u76ee\u7684', '\u7814\u7a76'] \u7b2c\u4e00\u53e5\u6b63\u786e\u4e86\uff0c\u4f46\u4e0b\u4e00\u53e5\u53c8\u51fa\u9519\u4e86\uff0c\u53ef\u8c13\u62c6\u4e1c\u5899\u8865\u897f\u5899\u3002\u53e6\u4e00\u4e9b\u4eba\u63d0\u51fa\u7efc\u5408\u4e24\u79cd\u89c4\u5219\uff0c\u671f\u5f85\u5b83\u4eec\u53d6\u957f\u8865\u77ed\uff0c\u79f0\u4e3a\u53cc\u5411\u6700\u957f\u5339\u914d\u3002 \u53cc\u5411\u6700\u957f\u5339\u914d \u8fd9\u662f\u4e00\u79cd\u878d\u5408\u4e24\u79cd\u5339\u914d\u65b9\u6cd5\u7684\u590d\u6742\u89c4\u5219\u96c6\uff0c\u6d41\u7a0b\u5982\u4e0b\uff1a \u540c\u65f6\u6267\u884c\u6b63\u5411\u548c\u9006\u5411\u6700\u957f\u5339\u914d\uff0c\u82e5\u4e24\u8005\u7684\u8bcd\u6570\u4e0d\u540c\uff0c\u5219\u8fd4\u56de\u8bcd\u6570\u66f4\u5c11\u7684\u90a3\u4e00\u4e2a\u3002 \u5426\u5219\uff0c\u8fd4\u56de\u4e24\u8005\u4e2d\u5355\u5b57\u66f4\u5c11\u7684\u90a3\u4e00\u4e2a\u3002\u5f53\u5355\u5b57\u6570\u4e5f\u76f8\u540c\u65f6\uff0c\u4f18\u5148\u8fd4\u56de\u9006\u5411\u6700\u957f\u5339\u914d\u7684\u7ed3\u679c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 def count_single_char(word_list: list): # \u7edf\u8ba1\u5355\u5b57\u6210\u8bcd\u7684\u4e2a\u6570 return sum(1 for word in word_list if len(word) == 1) def bidirectional_segment(text, dic): f = forward_segment(text, dic) b = backward_segment(text, dic) if len(f) < len(b): # \u8bcd\u6570\u66f4\u5c11\u4f18\u5148\u7ea7\u66f4\u9ad8 return f elif len(f) > len(b): return b else: if count_single_char(f) < count_single_char(b): # \u5355\u5b57\u66f4\u5c11\u4f18\u5148\u7ea7\u66f4\u9ad8 return f else: return b # \u90fd\u76f8\u7b49\u65f6\u9006\u5411\u5339\u914d\u4f18\u5148\u7ea7\u66f4\u9ad8 print(bidirectional_segment('\u7814\u7a76\u751f\u547d\u8d77\u6e90', dic)) print(bidirectional_segment('\u9879\u76ee\u7684\u7814\u7a76', dic)) \u8f93\u51fa\uff1a 1 2 ['\u7814\u7a76', '\u751f\u547d', '\u8d77\u6e90'] ['\u9879', '\u76ee\u7684', '\u7814\u7a76'] \u901a\u8fc7\u4ee5\u4e0a\u51e0\u79cd\u5207\u5206\u7b97\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u505a\u4e00\u4e2a\u5bf9\u6bd4\uff1a \u4e0a\u56fe\u663e\u793a\uff0c\u53cc\u5411\u6700\u957f\u5339\u914d\u7684\u786e\u57282\u30013\u30015\u8fd93\u79cd\u60c5\u51b5\u4e0b\u9009\u62e9\u51fa\u4e86\u6700\u597d\u7684\u7ed3\u679c\uff0c\u4f46\u57284\u53f7\u53e5\u5b50\u4e0a\u9009\u62e9\u4e86\u9519\u8bef\u7684\u7ed3\u679c\uff0c\u4f7f\u5f97\u6700\u7ec8\u6b63\u786e\u7387 3/6 \u53cd\u800c\u5c0f\u4e8e\u9006\u5411\u6700\u957f\u5339\u914d\u7684 4/6 \uff0c \u7531\u6b64\uff0c\u89c4\u5219\u7cfb\u7edf\u7684\u8106\u5f31\u53ef\u89c1\u4e00\u6591\u3002\u89c4\u5219\u96c6\u7684\u7ef4\u62a4\u6709\u65f6\u662f\u62c6\u4e1c\u5899\u8865\u897f\u5899\uff0c\u6709\u65f6\u662f\u5e2e\u5012\u5fd9\u3002","title":"\u5207\u5206\u7b97\u6cd5"},{"location":"pages/nlp/nlpinfo/nlp-hanlp-dictionary/#\u5b57\u5178\u6811","text":"\u5339\u914d\u7b97\u6cd5\u7684\u74f6\u9888\u4e4b\u4e00\u5728\u4e8e\u5982\u4f55\u5224\u65ad\u96c6\u5408(\u8bcd\u5178)\u4e2d\u662f\u5426\u542b\u6709\u5b57\u7b26\u4e32\u3002\u5982\u679c\u7528\u6709\u5e8f\u96c6\u5408TreeMap)\u7684\u8bdd\uff0c\u590d\u6742\u5ea6\u662fo(logn) ( n\u662f\u8bcd\u5178\u5927\u5c0f);\u5982\u679c\u7528\u6563\u5217\u8868( Java\u7684HashMap. Python\u7684dict )\u7684\u8bdd\uff0c\u8d26\u9762\u4e0a\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u867d\u7136\u4e0b\u964d\u4e86\uff0c\u4f46\u5185\u5b58\u590d\u6742\u5ea6\u5374\u4e0a\u53bb\u4e86\u3002\u6709\u6ca1\u6709\u901f\u5ea6\u53c8\u5feb\u3001\u5185\u5b58\u53c8\u7701\u7684\u6570\u636e\u7ed3\u6784\u5462\uff1f\u8fd9\u5c31\u662f \u5b57\u5178\u6811 \u3002 \u4ec0\u4e48\u662f\u5b57\u5178\u6811 \u5b57\u7b26\u4e32\u96c6\u5408\u5e38\u7528\u5b87\u5178\u6811(trie\u6811\u3001\u524d\u7f00\u6811)\u5b58\u50a8\uff0c\u8fd9\u662f\u4e00\u79cd\u5b57\u7b26\u4e32\u4e0a\u7684\u6811\u5f62\u6570\u636e\u7ed3\u6784\u3002\u5b57\u5178\u6811\u4e2d\u6bcf\u6761\u8fb9\u90fd\u5bf9\u5e94\u4e00\u4e2a\u5b57\uff0c \u4ece\u6839\u8282\u70b9\u5f80\u4e0b\u7684\u8def\u5f84\u6784\u6210\u4e00\u4e2a\u4e2a\u5b57\u7b26\u4e32\u3002\u5b57\u5178\u6811\u5e76\u4e0d\u76f4\u63a5\u5728\u8282\u70b9\u4e0a\u5b58\u50a8\u5b57\u7b26\u4e32\uff0c \u800c\u662f\u5c06\u8bcd\u8bed\u89c6\u4f5c\u6839\u8282\u70b9\u5230\u67d0\u8282\u70b9\u4e4b\u95f4\u7684\u4e00\u6761\u8def\u5f84\uff0c\u5e76\u5728\u7ec8\u70b9\u8282\u70b9(\u84dd\u8272) \u4e0a\u505a\u4e2a\u6807\u8bb0\u201c\u8be5\u8282\u70b9\u5bf9\u5e94\u8bcd\u8bed\u7684\u7ed3\u5c3e\u201d\u3002\u5b57\u7b26\u4e32\u5c31\u662f\u4e00 \u6761\u8def\u5f84\uff0c\u8981\u67e5\u8be2\u4e00\u4e2a\u5355\u8bcd\uff0c\u53ea\u9700\u987a\u7740\u8fd9\u6761\u8def\u5f84\u4ece\u6839\u8282\u70b9\u5f80\u4e0b\u8d70\u3002\u5982\u679c\u80fd\u8d70\u5230\u7279\u6b8a\u6807\u8bb0\u7684\u8282\u70b9\uff0c\u5219\u8bf4\u660e\u8be5\u5b57\u7b26\u4e32\u5728\u96c6\u5408\u4e2d\uff0c\u5426\u5219\u8bf4\u660e\u4e0d\u5b58\u5728\u3002\u4e00\u4e2a\u5178\u578b\u7684\u5b57\u5178\u6811\u5982\u4e0b\u56fe\u6240\u793a\u6240\u793a\u3002 \u5176\u4e2d\uff0c\u84dd\u8272\u6807\u8bb0\u7740\u8be5\u8282\u70b9\u662f\u4e00\u4e2a\u8bcd\u7684\u7ed3\u5c3e\uff0c\u6570\u5b57\u662f\u4eba\u4e3a\u7684\u7f16\u53f7\u3002\u6309\u7167\u8def\u5f84\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u5982\u4e0b\u8868\u6240\u793a\uff1a \u8bcd\u8bed \u8def\u5f84 \u5165\u95e8 0-1-2 \u81ea\u7136 0-3-4 \u81ea\u7136\u4eba 0-3-4-5 \u81ea\u7136\u8bed\u8a00 0-3-4-6-7 \u81ea\u8bed 0-3-8 \u5f53\u8bcd\u5178\u5927\u5c0f\u4e3a n \u65f6\uff0c\u867d\u7136\u6700\u574f\u60c5\u51b5\u4e0b\u5b57\u5178\u6811\u7684\u590d\u6742\u5ea6\u4f9d\u7136\u662fO(logn) (\u5047\u8bbe\u5b50\u8282\u70b9\u7528\u5bf9\u6570\u590d\u6742\u5ea6\u7684\u6570\u636e\u7ed3\u6784\u5b58\u50a8\uff0c\u6240\u6709\u8bcd\u8bed\u90fd\u662f\u5355\u5b57)\uff0c\u4f46\u5b83\u7684\u5b9e\u9645\u901f\u5ea6\u6bd4\u4e8c\u5206\u67e5\u627e\u5feb\u3002\u8fd9\u662f\u56e0\u4e3a\u968f\u7740\u8def\u5f84\u7684\u6df1\u5165\uff0c\u524d\u7f00\u5339\u914d\u662f\u9012\u8fdb\u7684\u8fc7\u7a0b\uff0c\u7b97\u6cd5\u4e0d\u5fc5\u6bd4\u8f83\u5b57\u7b26\u4e32\u7684\u524d\u7f00\u3002 \u5b57\u5178\u6811\u7684\u5b9e\u73b0 \u7531\u4e0a\u56fe\u53ef\u77e5\uff0c\u6bcf\u4e2a\u8282\u70b9\u90fd\u5e94\u8be5\u81f3\u5c11\u77e5\u9053\u81ea\u5df1\u7684\u5b50\u8282\u70b9\u4e0e\u5bf9\u5e94\u7684\u8fb9\uff0c\u4ee5\u53ca\u81ea\u5df1\u662f\u5426\u5bf9\u5e94\u4e00\u4e2a\u8bcd\u3002\u5982\u679c\u8981\u5b9e\u73b0\u6620\u5c04\u800c\u4e0d\u662f\u96c6\u5408\u7684\u8bdd\uff0c\u8fd8\u9700\u8981\u77e5\u9053\u81ea\u5df1\u5bf9\u5e94\u7684\u503c\u3002\u6211\u4eec\u7ea6\u5b9a\u7528\u503c\u4e3aNone\u8868\u793a\u8282\u70b9\u4e0d\u5bf9\u5e94\u8bcd\u8bed\uff0c\u867d\u7136\u8fd9\u6837\u5c31\u4e0d\u80fd\u63d2\u4eba\u503c\u4e3aNone\u7684\u952e\u4e86\uff0c\u4f46\u5b9e\u73b0\u8d77\u6765\u66f4\u7b80\u6d01\u3002\u90a3\u4e48\u5b57\u5178\u6811\u7684\u5b9e\u73b0\u53c2\u89c1\u9879\u76ee\u8def\u5f84(\u4e0e\u4e66\u4e0a\u7565\u6709\u4e0d\u540c\uff0c\u6211\u5199\u7684\u6bd4\u8f83\u7b80\u6d01)\uff1a code/ch02/trie.py \u901a\u8fc7 debug\u8fd0\u884c trie.py \u4ee3\u7801 \uff0c\u53ef\u4ee5\u89c2\u5bdf\u5230 trie \u7c7b\u7684\u5b57\u5178\u6811\u7ed3\u6784\uff1a","title":"\u5b57\u5178\u6811"},{"location":"pages/nlp/nlpinfo/nlp-hanlp-dictionary/#\u57fa\u4e8e\u5b57\u5178\u6811\u7684\u5176\u5b83\u7b97\u6cd5","text":"\u5b57\u5178\u6811\u7684\u6570\u636e\u7ed3\u6784\u5728\u4ee5\u4e0a\u7684\u5207\u5206\u7b97\u6cd5\u4e2d\u5df2\u7ecf\u5f88\u5feb\u4e86\uff0c\u4f46\u5389\u5bb3\u7684\u662f\u4f5c\u8005\u901a\u8fc7\u81ea\u5df1\u7684\u52aa\u529b\u6539\u8fdb\u4e86\u57fa\u4e8e\u5b57\u5178\u6811\u7684\u7b97\u6cd5\uff0c\u628a\u5206\u8bcd\u901f\u5ea6\u63a8\u5411\u4e86\u5343\u4e07\u5b57\u6bcf\u79d2\u7684\u7ea7\u522b\uff0c\u8fd9\u91cc\u4e0d\u4e00\u4e00\u8be6\u7ec6\u4ecb\u7ecd\uff0c\u8be6\u60c5\u89c1\u4e66\uff0c\u4e3b\u8981\u6309\u7167\u4ee5\u4e0b\u9012\u8fdb\u5173\u7cfb\u4f18\u5316\uff1a \u9996\u5b57\u6563\u5217\u5176\u4f59\u4e8c\u5206\u7684\u5b57\u5178\u6811 \u53cc\u6570\u7ec4\u5b57\u5178\u6811 AC\u81ea\u52a8\u673a(\u591a\u6a21\u5f0f\u5339\u914d) \u57fa\u4e8e\u53cc\u6570\u7ec4\u5b57\u5178\u6811\u7684AC\u81ea\u52a8\u673a","title":"\u57fa\u4e8e\u5b57\u5178\u6811\u7684\u5176\u5b83\u7b97\u6cd5"},{"location":"pages/nlp/nlpinfo/nlp-hanlp-dictionary/#HanLP\u7684\u8bcd\u5178\u5206\u8bcd\u5b9e\u73b0","text":"DoubleArrayTrieSegment DoubleArrayTrieSegment\u5206\u8bcd\u5668\u662f\u5bf9DAT\u6700\u957f\u5339\u914d\u7684\u5c01\u88c5\uff0c\u9ed8\u8ba4\u52a0\u8f7dhanlp.properties\u4e2dCoreDictionaryPath\u5236\u5b9a\u7684\u8bcd\u5178\u3002 1 2 3 4 5 6 7 8 9 10 11 12 from pyhanlp import * # \u4e0d\u663e\u793a\u8bcd\u6027 HanLP.Config.ShowTermNature = False # \u53ef\u4f20\u5165\u81ea\u5b9a\u4e49\u5b57\u5178 [dir1, dir2] segment = DoubleArrayTrieSegment() # \u6fc0\u6d3b\u6570\u5b57\u548c\u82f1\u6587\u8bc6\u522b segment.enablePartOfSpeechTagging(True) print(segment.seg(\"\u6c5f\u897f\u9131\u9633\u6e56\u5e72\u67af\uff0c\u4e2d\u56fd\u6700\u5927\u6de1\u6c34\u6e56\u53d8\u6210\u5927\u8349\u539f\")) print(segment.seg(\"\u4e0a\u6d77\u5e02\u8679\u53e3\u533a\u5927\u8fde\u897f\u8def550\u53f7SISU\")) \u8f93\u51fa\uff1a 1 2 [\u6c5f\u897f, \u9131\u9633\u6e56, \u5e72\u67af, \uff0c, \u4e2d\u56fd, \u6700\u5927, \u6de1\u6c34\u6e56, \u53d8\u6210, \u5927\u8349\u539f] [\u4e0a\u6d77\u5e02, \u8679\u53e3\u533a, \u5927\u8fde, \u897f\u8def, 550, \u53f7, SISU] \u53bb\u6389\u505c\u7528\u8bcd \u505c\u7528\u8bcd\u8bcd\u5178\u6587\u4ef6\uff1a stopwords.txt \u8be5\u8bcd\u5178\u6536\u5f55\u4e86\u5e38\u89c1\u7684\u4e2d\u82f1\u6587\u65e0\u610f\u4e49\u8bcd\u6c47(\u4e0d\u542b\u654f\u611f\u8bcd)\uff0c\u6bcf\u884c\u4e00\u4e2a\u8bcd\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 def load_from_file(path): \"\"\" \u4ece\u8bcd\u5178\u6587\u4ef6\u52a0\u8f7dDoubleArrayTrie :param path: \u8bcd\u5178\u8def\u5f84 :return: \u53cc\u6570\u7ec4trie\u6811 \"\"\" map = JClass('java.util.TreeMap')() # \u521b\u5efaTreeMap\u5b9e\u4f8b with open(path) as src: for word in src: word = word.strip() # \u53bb\u6389Python\u8bfb\u5165\u7684\\n map[word] = word return JClass('com.hankcs.hanlp.collection.trie.DoubleArrayTrie')(map) ## \u53bb\u6389\u505c\u7528\u8bcd def remove_stopwords_termlist(termlist, trie): return [term.word for term in termlist if not trie.containsKey(term.word)] trie = load_from_file('stopwords.txt') termlist = segment.seg(\"\u6c5f\u897f\u9131\u9633\u6e56\u5e72\u67af\u4e86\uff0c\u4e2d\u56fd\u6700\u5927\u7684\u6de1\u6c34\u6e56\u53d8\u6210\u4e86\u5927\u8349\u539f\") print('\u53bb\u6389\u505c\u7528\u8bcd\u524d\uff1a', termlist) print('\u53bb\u6389\u505c\u7528\u8bcd\u540e\uff1a', remove_stopwords_termlist(termlist, trie)) \u8f93\u51fa\uff1a 1 2 \u53bb\u6389\u505c\u7528\u8bcd\u524d\uff1a [\u6c5f\u897f, \u9131\u9633\u6e56, \u5e72\u67af, \u4e86, \uff0c, \u4e2d\u56fd, \u6700\u5927, \u7684, \u6de1\u6c34\u6e56, \u53d8\u6210, \u4e86, \u5927\u8349\u539f] \u53bb\u6389\u505c\u7528\u8bcd\u540e\uff1a ['\u6c5f\u897f', '\u9131\u9633\u6e56', '\u5e72\u67af', '\u4e2d\u56fd', '\u6700\u5927', '\u6de1\u6c34\u6e56', '\u53d8\u6210', '\u5927\u8349\u539f']","title":"HanLP\u7684\u8bcd\u5178\u5206\u8bcd\u5b9e\u73b0"},{"location":"pages/nlp/nlpinfo/nlp-new-entry/","text":"NLP \u65b0\u624b\u4e0a\u8def \u00b6 \u81ea\u7136\u8bed\u8a00\u5904\u7406 (Natural Language Processing\uff0cNLP)\u662f\u4e00\u95e8\u878d\u5408\u4e86\u8ba1\u7b97\u673a\u79d1\u5b66\u3001\u4eba\u5de5\u667a\u80fd\u53ca\u8bed\u8a00\u5b66\u7684\u4ea4\u53c9\u5b66\u79d1\uff0c\u5b83\u4eec\u7684\u5173\u7cfb\u5982\u4e0b\u56fe\u6240\u793a\u3002\u8fd9\u95e8\u5b66\u79d1\u7814\u7a76\u7684\u662f\u5982\u4f55\u901a\u8fc7\u673a\u5668\u5b66\u4e60\u7b49\u6280\u672f\uff0c\u8ba9\u8ba1\u7b97\u673a\u5b66\u4f1a\u5904\u7406\u4eba\u7c7b\u8bed\u8a00\uff0c\u4e43\u81f3\u5b9e\u73b0\u7ec8\u6781\u76ee\u6807\u2013\u7406\u89e3\u4eba\u7c7b\u8bed\u8a00\u6216\u4eba\u5de5\u667a\u80fd\u3002 \u7f8e\u56fd\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6Bill Manaris\u5728\u300a\u8ba1\u7b97\u673a\u8fdb\u5c55\u300b( Advances in Computers)\u7b2c47\u5377\u7684\u300a\u4ece\u4eba\u673a\u4ea4\u4e92\u7684\u89d2\u5ea6\u770b\u81ea\u7136\u8bed\u8a00\u5904\u7406\u300b\u4e00\u6587\u4e2d\u66fe\u7ecf\u7ed9 \u81ea\u7136\u8bed\u8a00\u5904\u7406\u63d0\u51fa\u4e86\u5982\u4e0b\u7684\u5b9a\u4e49 : \u201c\u81ea\u7136\u8bed\u8a00\u5904\u7406\u53ef\u4ee5\u5b9a\u4e49\u4e3a\u7814\u7a76\u5728\u4eba\u4e0e\u4eba\u4ea4\u9645\u4e2d\u4ee5\u53ca\u5728\u4eba\u4e0e\u8ba1\u7b97\u673a\u4ea4\u9645\u4e2d\u7684\u8bed\u8a00\u95ee\u9898\u7684\u4e00\u95e8\u5b66\u79d1\u3002\u81ea\u7136\u8bed\u8a00\u5904\u7406\u8981\u7814\u5236\u8868\u793a\u8bed\u8a00\u80fd\u529b\u548c\u8bed\u8a00\u5e94\u7528\u7684\u6a21\u578b\uff0c\u5efa\u7acb\u8ba1\u7b97\u6846\u67b6\u6765\u5b9e\u73b0\u8fd9\u6837\u7684\u8bed\u8a00\u6a21\u578b\uff0c\u63d0\u51fa\u76f8\u5e94\u7684\u65b9\u6cd5\u6765\u4e0d\u65ad\u5730\u5b8c\u5584\u8fd9\u6837\u7684\u8bed\u8a00\u6a21\u578b\uff0c\u6839\u636e\u8fd9\u6837\u7684\u8bed\u8a00\u6a21\u578b\u8bbe\u8ba1\u5404\u79cd\u5b9e\u7528\u7cfb\u7edf\uff0c\u5e76\u63a2\u8ba8\u8fd9\u4e9b\u5b9e\u7528\u7cfb\u7edf\u7684\u8bc4\u6d4b\u6280\u672f\u3002\u201d \u81ea\u7136\u8bed\u8a00\u4e0e\u7f16\u7a0b\u8bed\u8a00\u7684\u6bd4\u8f83 \u00b6 \u6bd4\u8f83 \u4e0d\u540c \u4f8b\u5b50 **\u8bcd\u6c47\u91cf** \u81ea\u7136\u8bed\u8a00\u4e2d\u7684\u8bcd\u6c47\u6bd4\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u5173\u952e\u8bcd\u4e30\u5bcc\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u968f\u65f6\u521b\u9020\u5404\u79cd\u7c7b\u578b\u7684\u65b0\u8bcd \u84dd\u7626\u3001\u9999\u83c7 **\u7ed3\u6784\u5316** \u81ea\u7136\u8bed\u8a00\u662f\u975e\u7ed3\u6784\u5316\u7684\uff0c\u800c\u7f16\u7a0b\u8bed\u8a00\u662f\u7ed3\u6784\u5316\u7684 **\u6b67\u4e49\u6027** \u81ea\u7136\u8bed\u8a00\u542b\u6709\u5927\u91cf\u6b67\u4e49\uff0c\u800c\u7f16\u7a0b\u8bed\u8a00\u662f\u786e\u5b9a\u6027\u7684 \u8fd9\u4eba\u771f\u6709\u610f\u601d:\u6ca1\u610f\u601d **\u5bb9\u9519\u6027** \u81ea\u7136\u8bed\u8a00\u9519\u8bef\u968f\u5904\u53ef\u89c1\uff0c\u800c\u7f16\u7a0b\u8bed\u8a00\u9519\u8bef\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u4e0d\u901a\u8fc7 \u7684\u3001\u5730\u7684\u7528\u6cd5\u9519\u8bef **\u6613\u53d8\u6027** \u81ea\u7136\u8bed\u8a00\u53d8\u5316\u76f8\u5bf9\u8fc5\u901f\u5608\u6742\u4e00\u4e9b\uff0c\u800c\u7f16\u7a0b\u8bed\u8a00\u7684\u53d8\u5316\u8981\u7f13\u6162\u5f97\u591a \u65b0\u65f6\u4ee3\u8bcd\u6c47 **\u7b80\u7565\u6027** \u81ea\u7136\u8bed\u8a00\u5f80\u5f80\u7b80\u6d01\u3001\u5e72\u7ec3\uff0c\u800c\u7f16\u7a0b\u8bed\u8a00\u5c31\u8981\u660e\u786e\u5b9a\u4e49 \u201c\u8001\u5730\u65b9\u201d\u4e0d\u5fc5\u6307\u51fa \u81ea\u7136\u8bed\u8a00\u5904\u7406\u7684\u5c42\u6b21 \u00b6 \u8bed\u97f3\u3001\u56fe\u50cf\u548c\u6587\u672c \u81ea\u7136\u8bed\u8a00\u5904\u7406\u7cfb\u7edf\u7684\u8f93\u5165\u6e90\u4e00\u5171\u67093\u4e2a\uff0c\u5373\u8bed\u97f3\u3001\u56fe\u50cf\u4e0e\u6587\u672c\u3002\u8bed\u97f3\u548c\u56fe\u50cf\u8fd9\u4e24\u79cd\u5f62\u5f0f\u4e00\u822c\u7ecf\u8fc7\u8bc6\u522b\u540e\u8f6c\u5316\u4e3a\u6587\u5b57\uff0c\u8f6c\u5316\u540e\u5c31\u53ef\u4ee5\u8fdb\u884c\u540e\u7eed\u7684NLP\u4efb\u52a1\u4e86\u3002 \u4e2d\u6587\u5206\u8bcd\u3001\u8bcd\u6027\u6807\u6ce8\u548c\u547d\u540d\u5b9e\u4f53\u8bc6\u522b \u8fd93\u4e2a\u4efb\u52a1\u90fd\u662f\u56f4\u7ed5\u8bcd\u8bed\u8fdb\u884c\u7684\u5206\u6790\uff0c\u6240\u4ee5\u7edf\u79f0 \u8bcd\u6cd5\u5206\u6790 \u3002\u8bcd\u6cd5\u5206\u6790\u7684\u4e3b\u8981\u4efb\u52a1\u662f\u5c06\u6587\u672c\u5206\u9694\u4e3a\u6709\u610f\u4e49\u7684\u8bcd\u8bed( \u4e2d\u6587\u5206\u8bcd )\uff0c\u786e\u5b9a\u6bcf\u4e2a\u8bcd\u8bed\u7684\u7c7b\u522b\u548c\u6d45\u5c42\u7684\u6b67\u4e49\u6d88\u9664( \u8bcd\u6027\u6807\u6ce8 )\uff0c\u5e76\u4e14\u8bc6\u522b\u51fa\u4e00\u4e9b\u8f83\u957f\u7684\u4e13\u6709\u540d\u8bcd( \u547d\u540d\u5b9e\u4f53\u8bc6\u522b )\u3002\u5bf9\u4e2d\u6587\u800c\u8a00\uff0c\u8bcd\u6cd5\u5206\u6790\u5e38\u5e38\u662f\u540e\u7eed\u9ad8\u7ea7\u4efb\u52a1\u7684\u57fa\u7840\u3002 \u4fe1\u606f\u62bd\u53d6 \u8bcd\u6cd5\u5206\u6790\u4e4b\u540e\uff0c\u6587\u672c\u5df2\u7ecf\u5448\u73b0\u51fa\u90e8\u5206\u7ed3\u6784\u5316\u7684\u8d8b\u52bf\uff0c\u6839\u636e\u5206\u6790\u51fa\u6765\u7684\u6bcf\u4e2a\u5355\u8bcd\u548c\u9644\u6709\u81ea\u5df1\u8bcd\u6027\u53ca\u5176\u4ed6\u6807\u7b7e\u7684\u6570\u636e\uff0c\u62bd\u53d6\u51fa\u4e00\u90e8\u5206\u6709\u7528\u7684\u4fe1\u606f\uff0c\u5173\u952e\u8bcd\u3001\u4e13\u4e1a\u672f\u8bed\u7b49\uff0c\u4e5f\u53ef\u4ee5\u6839\u636e\u7edf\u8ba1\u5b66\u4fe1\u606f\u62bd\u53d6\u51fa\u66f4\u5927\u9897\u7c92\u5ea6\u7684\u6587\u672c\u3002 \u6587\u672c\u5206\u7c7b\u4e0e\u6587\u672c\u805a\u7c7b \u5c06\u6587\u672c\u62c6\u5206\u4e3a\u4e00\u7cfb\u5217\u8bcd\u8bed\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u5bf9\u6587\u672c\u8fdb\u884c\u5206\u7c7b\u548c\u805a\u7c7b\u64cd\u4f5c\uff0c\u627e\u51fa\u76f8\u7c7b\u4f3c\u7684\u6587\u672c\u3002 \u53e5\u6cd5\u5206\u6790 \u8bcd\u6cd5\u5206\u6790\u53ea\u80fd\u5f97\u5230\u96f6\u6563\u7684\u8bcd\u6c47\u4fe1\u606f\uff0c\u8ba1\u7b97\u673a\u4e0d\u77e5\u9053\u8bcd\u8bed\u4e4b\u95f4\u7684\u5173\u7cfb\u3002\u5728\u4e00\u4e9b\u95ee\u7b54\u7cfb\u7edf\u4e2d\uff0c\u9700\u8981\u5f97\u5230\u53e5\u5b50\u7684\u4e3b\u8c13\u5bbe\u7ed3\u6784\uff0c\u8fd9\u5c31\u662f\u53e5\u6cd5\u5206\u6790\u5f97\u5230\u7684\u7ed3\u679c\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u4e0d\u4ec5\u662f\u95ee\u7b54\u7cfb\u7edf\u6216\u641c\u7d22\u5f15\u64ce\uff0c\u53e5\u6cd5\u5206\u6790\u8fd8\u7ecf\u5e38\u5e94\u7528\u6709\u57fa\u4e8e\u77ed\u8bed\u7684\u673a\u5668\u7ffb\u8bd1\uff0c\u7ed9\u8bd1\u6587\u7684\u8bcd\u8bed\u91cd\u65b0\u6392\u5e8f\u3002 \u8bed\u4e49\u5206\u6790\u4e0e\u7bc7\u7ae0\u5206\u6790 \u76f8\u8f83\u4e8e\u53e5\u6cd5\u5206\u6790\uff0c\u8bed\u4e49\u5206\u6790\u4fa7\u91cd\u8bed\u4e49\u800c\u975e\u8bed\u6cd5\u3002\u5b83\u5305\u62ec \u8bcd\u4e49\u6d88\u6b67 (\u786e\u5b9a\u4e00\u4e2a\u8bcd\u5728\u8bed\u5883\u4e2d\u7684\u542b\u4e49\uff0c\u800c\u4e0d\u662f\u7b80\u5355\u7684\u8bcd\u6027)\u3001 \u8bed\u4e49\u89d2\u8272\u6807\u6ce8 (\u6807\u6ce8\u53e5\u5b50\u4e2d\u7684\u8c13\u8bed\u4e0e\u5176\u4ed6\u6210\u5206\u7684\u5173\u7cfb)\u4e43\u81f3 \u8bed\u4e49\u4f9d\u5b58\u5206\u6790 (\u5206\u6790\u53e5\u5b50\u4e2d\u8bcd\u8bed\u4e4b\u95f4\u7684\u8bed\u4e49\u5173\u7cfb)\u3002 \u5176\u4ed6\u9ad8\u7ea7\u4efb\u52a1 \u81ea\u52a8\u95ee\u7b54\u3001\u81ea\u52a8\u6458\u8981\u3001\u673a\u5668\u7ffb\u8bd1 \u6ce8\u610f\uff0c\u4e00\u822c\u8ba4\u4e3a\u4fe1\u606f\u68c0\u7d22(Information Retrieve\uff0cIR)\u662f\u533a\u522b\u4e8e\u81ea\u7136\u8bed\u8a00\u5904\u7406\u7684\u72ec\u7acb\u5b66\u79d1\uff0cIR\u7684\u76ee\u6807\u662f\u67e5\u8be2\u4fe1\u606f\uff0c\u800cNLP\u7684\u76ee\u6807\u662f\u7406\u89e3\u8bed\u8a00\u3002 \u81ea\u7136\u8bed\u8a00\u5904\u7406\u7684\u6d41\u6d3e \u00b6 \u57fa\u4e8e\u89c4\u5219\u7684\u4e13\u5bb6\u7cfb\u7edf \u89c4\u5219\uff0c\u6307\u7684\u662f\u7531\u4e13\u5bb6\u624b\u5de5\u5236\u5b9a\u7684\u786e\u5b9a\u6027\u6d41\u7a0b\u3002\u4e13\u5bb6\u7cfb\u7edf\u8981\u6c42\u8bbe\u8ba1\u8005\u5bf9\u6240\u5904\u7406\u7684\u95ee\u9898\u5177\u5907\u6df1\u5165\u7684\u7406\u89e3\uff0c\u5e76\u4e14\u5c3d\u91cf\u4ee5\u4eba\u529b\u5168\u9762\u8003\u8651\u6240\u6709\u53ef\u80fd\u7684\u60c5\u51b5\u3002\u5b83\u6700\u5927\u7684\u5f31\u70b9\u662f\u96be\u4ee5\u62d3\u5c55\u3002\u5f53\u89c4\u5219\u6570\u91cf\u589e\u52a0\u6216\u8005\u591a\u4e2a\u4e13\u5bb6\u7ef4\u62a4\u540c\u4e00\u4e2a\u7cfb\u7edf\u65f6\uff0c\u5c31\u5bb9\u6613\u51fa\u73b0\u51b2\u7a81\u3002 \u57fa\u4e8e\u7edf\u8ba1\u7684\u5b66\u4e60\u65b9\u6cd5 \u4eba\u4eec\u4f7f\u7528\u7edf\u8ba1\u65b9\u6cd5\u8ba9\u8ba1\u7b97\u673a\u81ea\u52a8\u5b66\u4e60\u8bed\u8a00\u3002\u6240\u8c13\u201c \u7edf\u8ba1 \u201d\uff0c\u6307\u7684\u662f\u5728\u8bed\u6599\u5e93\u4e0a\u8fdb\u884c\u7684\u7edf\u8ba1\u3002\u6240\u8c13\u201c \u8bed\u6599\u5e93 \u201d\uff0c\u6307\u7684\u662f\u4eba\u5de5\u6807\u6ce8\u7684\u7ed3\u6784\u5316\u6587\u672c\u3002 \u7edf\u8ba1\u5b66\u4e60\u65b9\u6cd5\u5176\u5b9e\u662f\u673a\u5668\u5b66\u4e60\u7684\u522b\u79f0\uff0c\u800c\u673a\u5668\u5b66\u4e60\u5219\u662f\u5f53\u4ee3\u5b9e\u73b0\u4eba\u5de5\u667a\u80fd\u7684\u4e3b\u8981\u9014\u5f84\u3002 \u5386\u53f2 \u673a\u5668\u5b66\u4e60 \u00b6 \u4ec0\u4e48\u662f\u673a\u5668\u5b66\u4e60 \u7f8e\u56fd\u5de5\u7a0b\u9662\u9662\u58eb Tom Mitchell \u7ed9\u8fc7\u4e00\u4e2a\u66f4\u660e\u786e\u7684\u5b9a\u4e49\uff0c \u673a\u5668\u5b66\u4e60 \u6307\u7684\u662f\u8ba1\u7b97\u673a\u901a\u8fc7\u67d0\u9879\u4efb\u52a1\u7684\u7ecf\u9a8c\u6570\u636e\u63d0\u9ad8\u4e86\u5728\u8be5\u9879\u4efb\u52a1\u4e0a\u7684\u80fd\u529b\u3002 \u6a21\u578b \u6a21\u578b\u662f\u5bf9\u73b0\u5b9e\u95ee\u9898\u7684\u6570\u5b66\u62bd\u8c61\uff0c\u7531\u4e00\u4e2a\u5047\u8bbe\u51fd\u6570\u4ee5\u53ca\u4e00\u7cfb\u5217\u53c2\u6570\u6784\u6210\u3002\u4ee5\u4e0b\u5c31\u662f\u6700\u7b80\u5355\u7684\u6a21\u578b\u516c\u5f0f\uff1a \u5176\u4e2d\uff0cw \u548c b \u662f\u51fd\u6570\u7684\u53c2\u6570\uff0c\u800c x \u662f\u51fd\u6570\u7684\u81ea\u53d8\u91cf\u3002\u4e0d\u8fc7\u6a21\u578b\u5e76\u4e0d\u5305\u62ec\u5177\u4f53\u7684\u81ea\u53d8\u91cfx\uff0c\u56e0\u4e3a\u81ea\u53d8\u91cf\u662f\u7531\u7528\u6237\u8f93\u5165\u7684\u3002\u81ea\u53d8\u91cf x \u662f\u4e00\u4e2a\u7279\u5f81\u5411\u91cf\uff0c\u7528\u6765\u8868\u793a\u4e00\u4e2a\u5bf9\u8c61\u7684\u7279\u5f81\u3002 \u7279\u5f81 \u7279\u5f81 \u6307\u7684\u662f\u4e8b\u7269\u7684\u7279\u70b9\u8f6c\u5316\u7684\u6570\u503c\u3002 \u5982\u4f55\u6311\u9009\u7279\u5f81\uff0c\u5982\u4f55\u8bbe\u8ba1\u7279\u5f81\u6a21\u677f\uff0c\u8fd9\u79f0\u4f5c \u7279\u5f81\u5de5\u7a0b \u3002\u7279\u5f81\u8d8a\u591a\uff0c\u53c2\u6570\u5c31\u8d8a\u591a\uff1b\u53c2\u6570\u8d8a\u591a\uff0c\u6a21\u578b\u5c31\u8d8a\u590d\u6742\u3002 \u6570\u636e\u96c6 \u6837\u672c\u7684\u96c6\u5408\u5728\u673a\u5668\u5b66\u4e60\u9886\u57df\u79f0\u4f5c \u6570\u636e\u96c6 \uff0c\u5728\u81ea\u7136\u8bed\u8a00\u5904\u7406\u9886\u57df\u79f0\u4f5c \u8bed\u6599\u5e93 \u3002 \u76d1\u7763\u5b66\u4e60 \u5982\u679c\u6570\u636e\u96c6\u9644\u5e26\u6807\u51c6\u7b54\u6848 y\uff0c\u5219\u6b64\u65f6\u7684\u5b66\u4e60\u7b97\u6cd5\u79f0\u4f5c \u76d1\u7763\u5b66\u4e60 \u3002\u5b66\u4e60\u4e00\u904d\u8bef\u5dee\u8fd8\u4e0d\u591f\u5c0f\uff0c\u9700\u8981\u53cd\u590d\u5b66\u4e60\u3001\u53cd\u590d\u8c03\u6574\u3002\u6b64\u65f6\u7684\u7b97\u6cd5\u662f\u4e00\u79cd\u8fed\u4ee3\u5f0f\u7684\u7b97\u6cd5\uff0c\u6bcf\u4e00\u904d\u5b66\u4e60\u79f0\u4f5c \u4e00\u6b21\u8fed\u4ee3 \u3002\u8fd9\u79cd\u5728\u6709\u6807\u7b7e\u7684\u6570\u636e\u96c6\u4e0a\u8fed\u4ee3\u5b66\u4e60\u7684\u8fc7\u7a0b\u79f0\u4f5c \u8bad\u7ec3 \u3002 \u65e0\u76d1\u7763\u5b66\u4e60 \u5982\u679c\u6211\u4eec\u53ea\u7ed9\u673a\u5668\u505a\u9898\uff0c\u5374\u4e0d\u544a\u8bc9\u5b83\u53c2\u8003\u7b54\u6848\uff0c\u673a\u5668\u4ecd\u7136\u53ef\u4ee5\u5b66\u5230\u77e5\u8bc6\u5417\uff1f\u53ef\u4ee5\uff0c\u6b64\u65f6\u7684\u5b66\u4e60\u79f0\u4f5c \u65e0\u76d1\u7763\u5b66\u4e60 \uff0c\u800c\u4e0d\u542b\u6807\u51c6\u7b54\u6848\u7684\u6570\u636e\u96c6\u88ab\u79f0\u4f5c \u65e0\u6807\u6ce8\u7684\u6570\u636e\u96c6 \u3002\u65e0\u76d1\u7763\u5b66\u4e60\u4e00\u822c\u7528\u4e8e\u805a\u7c7b\u548c\u964d\u7ef4\uff0c \u964d\u7ef4 \u6307\u7684\u662f\u5c06\u6837\u672c\u70b9\u4ece\u9ad8\u7ef4\u7a7a\u95f4\u53d8\u6362\u6210\u4f4e\u7ef4\u7a7a\u95f4\u7684\u8fc7\u7a0b\u3002 \u5176\u4ed6\u7c7b\u578b\u7684\u673a\u5668\u5b66\u4e60\u7b97\u6cd5 \u534a\u76d1\u7763\u5b66\u4e60 \uff1a\u5982\u679c\u6211\u4eec\u8bad\u7ec3\u591a\u4e2a\u6a21\u578b\uff0c\u7136\u540e\u5bf9\u540c\u4e00\u4e2a\u5b9e\u4f8b\u6267\u884c\u9884\u6d4b\uff0c\u4f1a\u5f97\u5230\u591a\u4e2a\u7ed3\u679c\u3002\u5982\u679c\u8fd9\u4e9b\u7ed3\u679c\u591a\u6570\u4e00\u81f4\uff0c\u5219\u53ef\u4ee5\u5c06\u8be5\u5b9e\u4f8b\u548c\u7ed3\u679c\u653e\u5230\u4e00\u8d77\u4f5c\u4e3a\u65b0\u7684\u8bad\u7ec3\u6837\u672c\uff0c\u7528\u529b\u554a\u6269\u5145\u8bad\u7ec3\u96c6\u3002\u8fd9\u6837\u7684\u7b97\u6cd5\u88ab\u79f0\u4e3a\u534a\u76d1\u7763\u5b66\u4e60\u3002 \u5f3a\u5316\u5b66\u4e60 \uff1a\u73b0\u5b9e\u4e16\u754c\u4e2d\u7684\u4e8b\u7269\u4e4b\u95f4\u5f80\u5f80\u6709\u5f88\u957f\u7684\u56e0\u679c\u94fe\uff1a\u6211\u4eec\u8981\u6b63\u786e\u5730\u6267\u884c\u4e00\u7cfb\u5217\u5f7c\u6b64\u5173\u8054\u7684\u51b3\u7b56\uff0c\u624d\u80fd\u5f97\u5230\u6700\u7ec8\u7684\u6210\u679c\u3002\u8fd9\u7c7b\u95ee\u9898\u5f80\u5f80\u9700\u8981\u4e00\u8fb9\u9884\u6d4b\uff0c\u4e00\u8fb9\u6839\u636e\u73af\u5883\u7684\u53cd\u9988\u89c4\u5212\u4e0b\u6b21\u51b3\u7b56\u3002\u8fd9\u7c7b\u7b97\u6cd5\u88ab\u79f0\u4e3a\u5f3a\u5316\u5b66\u4e60\u3002 \u8bed\u6599\u5e93 \u00b6 \u4e2d\u6587\u5206\u8bcd\u8bed\u6599\u5e93 \u4e2d\u6587\u5206\u8bcd\u8bed\u6599\u5e93\u6307\u7684\u662f\uff0c\u7531\u4eba\u5de5\u6b63\u786e\u5207\u5206\u7684\u53e5\u5b50\u96c6\u5408\u3002\u4ee5\u8457\u540d\u76841998\u5e74\u300a\u4eba\u6c11\u65e5\u62a5\u300b\u8bed\u6599\u5e93\u4e3a\u4f8b\uff1a \u5148 \u6709 \u901a\u8d27\u81a8\u80c0 \u5e72\u6270\uff0c\u540e \u6709 \u901a\u8d27 \u7d27\u7f29 \u53eb\u677f\u3002 \u8bcd\u6027\u6807\u6ce8\u8bed\u6599\u5e93 \u5b83\u6307\u7684\u662f\u5207\u5206\u5e76\u4e3a\u6bcf\u4e2a\u8bcd\u8bed\u5236\u5b9a\u4e00\u4e2a\u8bcd\u6027\u7684\u8bed\u6599\u3002\u4f9d\u7136\u4ee5\u300a\u4eba\u6c11\u65e5\u62a5\u300b\u8bed\u6599\u5e93\u4e3a\u4f8b\uff1a \u8fc8\u5411/v \u5145\u6ee1/v \u5e0c\u671b/n \u7684/u \u65b0/a \u4e16\u7eaa/n \u2013/w \u4e00\u4e5d\u4e5d\u516b\u5e74/t \u65b0\u5e74/t \u8bb2\u8bdd/n \u8fd9\u91cc\u6bcf\u4e2a\u5355\u8bcd\u540e\u9762\u7528\u659c\u6760\u9694\u5f00\u7684\u5c31\u662f\u8bcd\u6027\u6807\u7b7e\u3002 \u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u8bed\u6599\u5e93 \u8fd9\u79cd\u8bed\u6599\u5e93\u4eba\u5de5\u6807\u6ce8\u4e86\u6587\u672c\u5185\u90e8\u5236\u4f5c\u8005\u5173\u5fc3\u7684\u5b9e\u4f53\u540d\u8bcd\u4ee5\u53ca\u5b9e\u4f53\u7c7b\u522b\u3002\u6bd4\u5982\u300a\u4eba\u6c11\u65e5\u62a5\u300b\u8bed\u6599\u5e93\u4e2d-\u5171\u542b\u6709\u4eba\u540d\u3001\u5730\u540d\u548c\u673a\u6784\u540d3\u79cd\u547d\u540d\u5b9e\u4f53: \u8428\u54c8\u592b/nr \u8bf4/v ,/w \u4f0a\u62c9\u514b/ns \u5c06/d \u540c/p [\u8054\u5408\u56fd/nt \u9500\u6bc1/v \u4f0a\u62c9\u514b/ns \u5927\u89c4\u6a21/b \u6740\u4f24\u6027/n \u6b66\u5668/n \u7279\u522b/a \u59d4\u5458\u4f1a/n] /nt \u7ee7\u7eed/v \u4fdd\u6301/v \u5408\u4f5c/v \u3002/w \u8fd9\u4e2a\u53e5\u5b50\u4e2d\u7684\u52a0\u7c97\u8bcd\u8bed\u5206\u522b\u662f\u4eba\u540d\u3001\u5730\u540d\u548c\u673a\u6784\u540d\u3002\u4e2d\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u662f\u590d\u5408\u8bcd\uff0c\u6211\u4eec\u53ef\u4ee5\u89c2\u5bdf\u5230:\u6709\u65f6\u5019\u673a\u6784\u540d\u548c\u5730\u540d\u590d\u5408\u8d77\u6765\u4f1a\u6784\u6210\u66f4\u957f\u7684\u673a\u6784\u540d\uff0c\u8fd9\u79cd\u6784\u8bcd\u6cd5\u4e0a\u7684\u5d4c\u5957\u73b0\u8c61\u589e\u52a0\u4e86\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u7684\u96be\u5ea6\u3002 \u53e5\u6cd5\u5206\u6790\u8bed\u6599\u5e93 \u6c49\u8bed\u4e2d\u5e38\u7528\u7684\u53e5\u6cd5\u5206\u6790\u8bed\u6599\u5e93\u6709CTB(Chinese Treebank\uff0c\u4e2d\u6587\u6811\u5e93)\uff0c\u5176\u4e2d\u4e00\u4e2a\u53e5\u5b50\u53ef\u89c6\u5316\u540e\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u4e2d\u6587\u5355\u8bcd\u4e0a\u9762\u7684\u82f1\u6587\u6807\u7b7e\u6807\u793a\u8bcd\u6027\uff0c\u800c\u7bad\u5934\u8868\u793a\u6709\u8bed\u6cd5\u8054\u7cfb\u7684\u4e24\u4e2a\u5355\u8bcd\uff0c\u5177\u4f53\u662f\u4f55\u79cd\u8054\u7cfb\u7531\u7bad\u5934\u4e0a\u7684\u6807\u7b7e\u6807\u793a\u3002 \u6587\u672c\u5206\u7c7b\u8bed\u6599\u5e93 \u5b83\u6307\u7684\u662f\u4eba\u5de5\u6807\u6ce8\u4e86\u6240\u5c5e\u5206\u7c7b\u7684\u6587\u7ae0\u6784\u6210\u7684\u8bed\u6599\u5e93\u3002 \u8bed\u6599\u5e93\u7684\u5efa\u8bbe \u8bed\u6599\u5e93\u5efa\u8bbe\u6307\u7684\u662f\u6784\u5efa\u4e00\u4efd\u8bed\u6599\u5e93\u7684\u8fc7\u7a0b\uff0c\u5206\u4e3a\u89c4\u8303\u5236\u5b9a\u3001\u4eba\u5458\u57f9\u8bad\u4e0e\u4eba\u5de5\u6807\u6ce8\u8fd9\u4e09\u4e2a\u9636\u6bb5\u3002\u9488\u5bf9\u4e0d\u540c\u7c7b\u578b\u7684\u4efb\u52a1\uff0c\u4eba\u4eec\u5f00\u53d1\u51fa\u8bb8\u591a\u6807\u6ce8\u8f6f\u4ef6\uff0c\u5176\u4e2d\u6bd4\u8f83\u6210\u719f\u7684\u4e00\u6b3e\u662fbrat\uff0c\u5b83\u652f\u6301\u8bcd\u6027\u6807\u6ce8\u3001\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u548c\u53e5\u6cd5\u5206\u6790\u7b49\u4efb\u52a1\u3002 \u5f00\u6e90\u5de5\u5177 \u00b6 \u4e3b\u6d41NLP\u5de5\u5177\u6bd4\u8f83 \u53e6\u5916\uff0c\u4e5f\u7814\u7a76\u8fc7\u5176\u4ed6\u5f00\u6e90\u9879\u76ee\u7684\u539f\u7406\uff0c\u501f\u9274\u4e86\u5176\u4e2d\u4f18\u79c0\u7684\u8bbe\u8ba1\u3002\u4f46\u6bd5\u7adf\u8fd8\u662f\u81ea\u5df1\u5199\u7684\u4ee3\u7801\u8bb2\u5f97\u6700\u6e05\u695a\uff0c\u6240\u4ee5\u7efc\u5408\u4ee5\u4e0a\u5404\u79cd\u8003\u8651\uff0c\u6700\u540e\u9009\u53d6\u4e86 HanLP\u4f5c\u4e3a\u672c\u4e66\u7684\u5b9e\u73b0 \u3002 Python\u63a5\u53e3 HanLP \u7684 Python \u63a5\u53e3\u7531 pyhanlp \u5305\u63d0\u4f9b\uff0c\u5176\u5b89\u88c5\u53ea\u9700\u4e00\u53e5\u547d\u4ee4\uff1a 1 $ pip install pyhanlp \u603b\u7ed3 \u00b6 \u672c\u7ae0\u7ed9\u51fa\u4e86\u4eba\u5de5\u667a\u80fd\u3001\u673a\u5668\u5b66\u4e60\u4e0e\u81ea\u7136\u8bed\u8a00\u5904\u7406\u7684\u5b8f\u89c2\u7f29\u7565\u56fe\u4e0e\u53d1\u5c55\u65f6\u95f4\u7ebf\u3002\u673a\u5668\u5b66\u4e60\u662f\u4eba\u5de5\u667a\u80fd\u7684\u5b50\u96c6\uff0c\u800c\u81ea\u7136\u8bed\u8a00\u5904\u7406\u5219\u662f\u4eba\u5de5\u667a\u80fd\u4e0e\u8bed\u8a00\u5b66\u3001\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u4ea4\u96c6\u3002\u8fd9\u4e2a\u4ea4\u96c6\u867d\u7136\u5c0f\uff0c\u5b83\u7684\u96be\u5ea6\u5374\u5f88\u5927\u3002\u4e3a\u4e86\u5b9e\u73b0\u7406\u89e3\u81ea\u7136\u8bed\u8a00\u8fd9\u4e2a\u5b8f\u4f1f\u76ee\u6807\uff0c\u4eba\u4eec\u5c1d\u8bd5\u4e86\u89c4\u5219\u7cfb\u7edf\uff0c\u5e76\u6700\u7ec8\u53d1\u5c55\u5230\u57fa\u4e8e\u5927\u89c4\u6a21\u8bed\u6599\u5e93\u7684\u7edf\u8ba1\u5b66\u4e60\u7cfb\u7edf\u3002 \u5728\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u4e2d\uff0c\u5c31\u8ba9\u6211\u4eec\u6309\u7167\u8fd9\u79cd\u7531\u6613\u5230\u96be\u7684\u53d1\u5c55\u89c4\u5f8b\u53bb\u89e3\u51b3\u7b2c\u4e00\u4e2aNLP\u95ee\u9898\u4e00\u4e2d\u6587\u5206\u8bcd\u3002\u6211\u4eec\u5c06\u5148\u4ece\u89c4\u5219\u7cfb\u7edf\u4eba\u624b\uff0c\u4ecb\u7ecd\u4e00\u4e9b\u5feb\u800c\u4e0d\u51c6\u7684\u7b97\u6cd5\uff0c\u7136\u540e\u9010\u6b65\u8fdb\u5316\u5230\u66f4\u52a0\u51c6\u786e\u7684\u7edf\u8ba1\u6a21\u578b\u3002","title":"NLP \u65b0\u624b\u4e0a\u8def"},{"location":"pages/nlp/nlpinfo/nlp-new-entry/#NLP-\u65b0\u624b\u4e0a\u8def","text":"\u81ea\u7136\u8bed\u8a00\u5904\u7406 (Natural Language Processing\uff0cNLP)\u662f\u4e00\u95e8\u878d\u5408\u4e86\u8ba1\u7b97\u673a\u79d1\u5b66\u3001\u4eba\u5de5\u667a\u80fd\u53ca\u8bed\u8a00\u5b66\u7684\u4ea4\u53c9\u5b66\u79d1\uff0c\u5b83\u4eec\u7684\u5173\u7cfb\u5982\u4e0b\u56fe\u6240\u793a\u3002\u8fd9\u95e8\u5b66\u79d1\u7814\u7a76\u7684\u662f\u5982\u4f55\u901a\u8fc7\u673a\u5668\u5b66\u4e60\u7b49\u6280\u672f\uff0c\u8ba9\u8ba1\u7b97\u673a\u5b66\u4f1a\u5904\u7406\u4eba\u7c7b\u8bed\u8a00\uff0c\u4e43\u81f3\u5b9e\u73b0\u7ec8\u6781\u76ee\u6807\u2013\u7406\u89e3\u4eba\u7c7b\u8bed\u8a00\u6216\u4eba\u5de5\u667a\u80fd\u3002 \u7f8e\u56fd\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6Bill Manaris\u5728\u300a\u8ba1\u7b97\u673a\u8fdb\u5c55\u300b( Advances in Computers)\u7b2c47\u5377\u7684\u300a\u4ece\u4eba\u673a\u4ea4\u4e92\u7684\u89d2\u5ea6\u770b\u81ea\u7136\u8bed\u8a00\u5904\u7406\u300b\u4e00\u6587\u4e2d\u66fe\u7ecf\u7ed9 \u81ea\u7136\u8bed\u8a00\u5904\u7406\u63d0\u51fa\u4e86\u5982\u4e0b\u7684\u5b9a\u4e49 : \u201c\u81ea\u7136\u8bed\u8a00\u5904\u7406\u53ef\u4ee5\u5b9a\u4e49\u4e3a\u7814\u7a76\u5728\u4eba\u4e0e\u4eba\u4ea4\u9645\u4e2d\u4ee5\u53ca\u5728\u4eba\u4e0e\u8ba1\u7b97\u673a\u4ea4\u9645\u4e2d\u7684\u8bed\u8a00\u95ee\u9898\u7684\u4e00\u95e8\u5b66\u79d1\u3002\u81ea\u7136\u8bed\u8a00\u5904\u7406\u8981\u7814\u5236\u8868\u793a\u8bed\u8a00\u80fd\u529b\u548c\u8bed\u8a00\u5e94\u7528\u7684\u6a21\u578b\uff0c\u5efa\u7acb\u8ba1\u7b97\u6846\u67b6\u6765\u5b9e\u73b0\u8fd9\u6837\u7684\u8bed\u8a00\u6a21\u578b\uff0c\u63d0\u51fa\u76f8\u5e94\u7684\u65b9\u6cd5\u6765\u4e0d\u65ad\u5730\u5b8c\u5584\u8fd9\u6837\u7684\u8bed\u8a00\u6a21\u578b\uff0c\u6839\u636e\u8fd9\u6837\u7684\u8bed\u8a00\u6a21\u578b\u8bbe\u8ba1\u5404\u79cd\u5b9e\u7528\u7cfb\u7edf\uff0c\u5e76\u63a2\u8ba8\u8fd9\u4e9b\u5b9e\u7528\u7cfb\u7edf\u7684\u8bc4\u6d4b\u6280\u672f\u3002\u201d","title":"NLP \u65b0\u624b\u4e0a\u8def"},{"location":"pages/nlp/nlpinfo/nlp-new-entry/#\u81ea\u7136\u8bed\u8a00\u4e0e\u7f16\u7a0b\u8bed\u8a00\u7684\u6bd4\u8f83","text":"\u6bd4\u8f83 \u4e0d\u540c \u4f8b\u5b50 **\u8bcd\u6c47\u91cf** \u81ea\u7136\u8bed\u8a00\u4e2d\u7684\u8bcd\u6c47\u6bd4\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u5173\u952e\u8bcd\u4e30\u5bcc\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u968f\u65f6\u521b\u9020\u5404\u79cd\u7c7b\u578b\u7684\u65b0\u8bcd \u84dd\u7626\u3001\u9999\u83c7 **\u7ed3\u6784\u5316** \u81ea\u7136\u8bed\u8a00\u662f\u975e\u7ed3\u6784\u5316\u7684\uff0c\u800c\u7f16\u7a0b\u8bed\u8a00\u662f\u7ed3\u6784\u5316\u7684 **\u6b67\u4e49\u6027** \u81ea\u7136\u8bed\u8a00\u542b\u6709\u5927\u91cf\u6b67\u4e49\uff0c\u800c\u7f16\u7a0b\u8bed\u8a00\u662f\u786e\u5b9a\u6027\u7684 \u8fd9\u4eba\u771f\u6709\u610f\u601d:\u6ca1\u610f\u601d **\u5bb9\u9519\u6027** \u81ea\u7136\u8bed\u8a00\u9519\u8bef\u968f\u5904\u53ef\u89c1\uff0c\u800c\u7f16\u7a0b\u8bed\u8a00\u9519\u8bef\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u4e0d\u901a\u8fc7 \u7684\u3001\u5730\u7684\u7528\u6cd5\u9519\u8bef **\u6613\u53d8\u6027** \u81ea\u7136\u8bed\u8a00\u53d8\u5316\u76f8\u5bf9\u8fc5\u901f\u5608\u6742\u4e00\u4e9b\uff0c\u800c\u7f16\u7a0b\u8bed\u8a00\u7684\u53d8\u5316\u8981\u7f13\u6162\u5f97\u591a \u65b0\u65f6\u4ee3\u8bcd\u6c47 **\u7b80\u7565\u6027** \u81ea\u7136\u8bed\u8a00\u5f80\u5f80\u7b80\u6d01\u3001\u5e72\u7ec3\uff0c\u800c\u7f16\u7a0b\u8bed\u8a00\u5c31\u8981\u660e\u786e\u5b9a\u4e49 \u201c\u8001\u5730\u65b9\u201d\u4e0d\u5fc5\u6307\u51fa","title":"\u81ea\u7136\u8bed\u8a00\u4e0e\u7f16\u7a0b\u8bed\u8a00\u7684\u6bd4\u8f83"},{"location":"pages/nlp/nlpinfo/nlp-new-entry/#\u81ea\u7136\u8bed\u8a00\u5904\u7406\u7684\u5c42\u6b21","text":"\u8bed\u97f3\u3001\u56fe\u50cf\u548c\u6587\u672c \u81ea\u7136\u8bed\u8a00\u5904\u7406\u7cfb\u7edf\u7684\u8f93\u5165\u6e90\u4e00\u5171\u67093\u4e2a\uff0c\u5373\u8bed\u97f3\u3001\u56fe\u50cf\u4e0e\u6587\u672c\u3002\u8bed\u97f3\u548c\u56fe\u50cf\u8fd9\u4e24\u79cd\u5f62\u5f0f\u4e00\u822c\u7ecf\u8fc7\u8bc6\u522b\u540e\u8f6c\u5316\u4e3a\u6587\u5b57\uff0c\u8f6c\u5316\u540e\u5c31\u53ef\u4ee5\u8fdb\u884c\u540e\u7eed\u7684NLP\u4efb\u52a1\u4e86\u3002 \u4e2d\u6587\u5206\u8bcd\u3001\u8bcd\u6027\u6807\u6ce8\u548c\u547d\u540d\u5b9e\u4f53\u8bc6\u522b \u8fd93\u4e2a\u4efb\u52a1\u90fd\u662f\u56f4\u7ed5\u8bcd\u8bed\u8fdb\u884c\u7684\u5206\u6790\uff0c\u6240\u4ee5\u7edf\u79f0 \u8bcd\u6cd5\u5206\u6790 \u3002\u8bcd\u6cd5\u5206\u6790\u7684\u4e3b\u8981\u4efb\u52a1\u662f\u5c06\u6587\u672c\u5206\u9694\u4e3a\u6709\u610f\u4e49\u7684\u8bcd\u8bed( \u4e2d\u6587\u5206\u8bcd )\uff0c\u786e\u5b9a\u6bcf\u4e2a\u8bcd\u8bed\u7684\u7c7b\u522b\u548c\u6d45\u5c42\u7684\u6b67\u4e49\u6d88\u9664( \u8bcd\u6027\u6807\u6ce8 )\uff0c\u5e76\u4e14\u8bc6\u522b\u51fa\u4e00\u4e9b\u8f83\u957f\u7684\u4e13\u6709\u540d\u8bcd( \u547d\u540d\u5b9e\u4f53\u8bc6\u522b )\u3002\u5bf9\u4e2d\u6587\u800c\u8a00\uff0c\u8bcd\u6cd5\u5206\u6790\u5e38\u5e38\u662f\u540e\u7eed\u9ad8\u7ea7\u4efb\u52a1\u7684\u57fa\u7840\u3002 \u4fe1\u606f\u62bd\u53d6 \u8bcd\u6cd5\u5206\u6790\u4e4b\u540e\uff0c\u6587\u672c\u5df2\u7ecf\u5448\u73b0\u51fa\u90e8\u5206\u7ed3\u6784\u5316\u7684\u8d8b\u52bf\uff0c\u6839\u636e\u5206\u6790\u51fa\u6765\u7684\u6bcf\u4e2a\u5355\u8bcd\u548c\u9644\u6709\u81ea\u5df1\u8bcd\u6027\u53ca\u5176\u4ed6\u6807\u7b7e\u7684\u6570\u636e\uff0c\u62bd\u53d6\u51fa\u4e00\u90e8\u5206\u6709\u7528\u7684\u4fe1\u606f\uff0c\u5173\u952e\u8bcd\u3001\u4e13\u4e1a\u672f\u8bed\u7b49\uff0c\u4e5f\u53ef\u4ee5\u6839\u636e\u7edf\u8ba1\u5b66\u4fe1\u606f\u62bd\u53d6\u51fa\u66f4\u5927\u9897\u7c92\u5ea6\u7684\u6587\u672c\u3002 \u6587\u672c\u5206\u7c7b\u4e0e\u6587\u672c\u805a\u7c7b \u5c06\u6587\u672c\u62c6\u5206\u4e3a\u4e00\u7cfb\u5217\u8bcd\u8bed\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u5bf9\u6587\u672c\u8fdb\u884c\u5206\u7c7b\u548c\u805a\u7c7b\u64cd\u4f5c\uff0c\u627e\u51fa\u76f8\u7c7b\u4f3c\u7684\u6587\u672c\u3002 \u53e5\u6cd5\u5206\u6790 \u8bcd\u6cd5\u5206\u6790\u53ea\u80fd\u5f97\u5230\u96f6\u6563\u7684\u8bcd\u6c47\u4fe1\u606f\uff0c\u8ba1\u7b97\u673a\u4e0d\u77e5\u9053\u8bcd\u8bed\u4e4b\u95f4\u7684\u5173\u7cfb\u3002\u5728\u4e00\u4e9b\u95ee\u7b54\u7cfb\u7edf\u4e2d\uff0c\u9700\u8981\u5f97\u5230\u53e5\u5b50\u7684\u4e3b\u8c13\u5bbe\u7ed3\u6784\uff0c\u8fd9\u5c31\u662f\u53e5\u6cd5\u5206\u6790\u5f97\u5230\u7684\u7ed3\u679c\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u4e0d\u4ec5\u662f\u95ee\u7b54\u7cfb\u7edf\u6216\u641c\u7d22\u5f15\u64ce\uff0c\u53e5\u6cd5\u5206\u6790\u8fd8\u7ecf\u5e38\u5e94\u7528\u6709\u57fa\u4e8e\u77ed\u8bed\u7684\u673a\u5668\u7ffb\u8bd1\uff0c\u7ed9\u8bd1\u6587\u7684\u8bcd\u8bed\u91cd\u65b0\u6392\u5e8f\u3002 \u8bed\u4e49\u5206\u6790\u4e0e\u7bc7\u7ae0\u5206\u6790 \u76f8\u8f83\u4e8e\u53e5\u6cd5\u5206\u6790\uff0c\u8bed\u4e49\u5206\u6790\u4fa7\u91cd\u8bed\u4e49\u800c\u975e\u8bed\u6cd5\u3002\u5b83\u5305\u62ec \u8bcd\u4e49\u6d88\u6b67 (\u786e\u5b9a\u4e00\u4e2a\u8bcd\u5728\u8bed\u5883\u4e2d\u7684\u542b\u4e49\uff0c\u800c\u4e0d\u662f\u7b80\u5355\u7684\u8bcd\u6027)\u3001 \u8bed\u4e49\u89d2\u8272\u6807\u6ce8 (\u6807\u6ce8\u53e5\u5b50\u4e2d\u7684\u8c13\u8bed\u4e0e\u5176\u4ed6\u6210\u5206\u7684\u5173\u7cfb)\u4e43\u81f3 \u8bed\u4e49\u4f9d\u5b58\u5206\u6790 (\u5206\u6790\u53e5\u5b50\u4e2d\u8bcd\u8bed\u4e4b\u95f4\u7684\u8bed\u4e49\u5173\u7cfb)\u3002 \u5176\u4ed6\u9ad8\u7ea7\u4efb\u52a1 \u81ea\u52a8\u95ee\u7b54\u3001\u81ea\u52a8\u6458\u8981\u3001\u673a\u5668\u7ffb\u8bd1 \u6ce8\u610f\uff0c\u4e00\u822c\u8ba4\u4e3a\u4fe1\u606f\u68c0\u7d22(Information Retrieve\uff0cIR)\u662f\u533a\u522b\u4e8e\u81ea\u7136\u8bed\u8a00\u5904\u7406\u7684\u72ec\u7acb\u5b66\u79d1\uff0cIR\u7684\u76ee\u6807\u662f\u67e5\u8be2\u4fe1\u606f\uff0c\u800cNLP\u7684\u76ee\u6807\u662f\u7406\u89e3\u8bed\u8a00\u3002","title":"\u81ea\u7136\u8bed\u8a00\u5904\u7406\u7684\u5c42\u6b21"},{"location":"pages/nlp/nlpinfo/nlp-new-entry/#\u81ea\u7136\u8bed\u8a00\u5904\u7406\u7684\u6d41\u6d3e","text":"\u57fa\u4e8e\u89c4\u5219\u7684\u4e13\u5bb6\u7cfb\u7edf \u89c4\u5219\uff0c\u6307\u7684\u662f\u7531\u4e13\u5bb6\u624b\u5de5\u5236\u5b9a\u7684\u786e\u5b9a\u6027\u6d41\u7a0b\u3002\u4e13\u5bb6\u7cfb\u7edf\u8981\u6c42\u8bbe\u8ba1\u8005\u5bf9\u6240\u5904\u7406\u7684\u95ee\u9898\u5177\u5907\u6df1\u5165\u7684\u7406\u89e3\uff0c\u5e76\u4e14\u5c3d\u91cf\u4ee5\u4eba\u529b\u5168\u9762\u8003\u8651\u6240\u6709\u53ef\u80fd\u7684\u60c5\u51b5\u3002\u5b83\u6700\u5927\u7684\u5f31\u70b9\u662f\u96be\u4ee5\u62d3\u5c55\u3002\u5f53\u89c4\u5219\u6570\u91cf\u589e\u52a0\u6216\u8005\u591a\u4e2a\u4e13\u5bb6\u7ef4\u62a4\u540c\u4e00\u4e2a\u7cfb\u7edf\u65f6\uff0c\u5c31\u5bb9\u6613\u51fa\u73b0\u51b2\u7a81\u3002 \u57fa\u4e8e\u7edf\u8ba1\u7684\u5b66\u4e60\u65b9\u6cd5 \u4eba\u4eec\u4f7f\u7528\u7edf\u8ba1\u65b9\u6cd5\u8ba9\u8ba1\u7b97\u673a\u81ea\u52a8\u5b66\u4e60\u8bed\u8a00\u3002\u6240\u8c13\u201c \u7edf\u8ba1 \u201d\uff0c\u6307\u7684\u662f\u5728\u8bed\u6599\u5e93\u4e0a\u8fdb\u884c\u7684\u7edf\u8ba1\u3002\u6240\u8c13\u201c \u8bed\u6599\u5e93 \u201d\uff0c\u6307\u7684\u662f\u4eba\u5de5\u6807\u6ce8\u7684\u7ed3\u6784\u5316\u6587\u672c\u3002 \u7edf\u8ba1\u5b66\u4e60\u65b9\u6cd5\u5176\u5b9e\u662f\u673a\u5668\u5b66\u4e60\u7684\u522b\u79f0\uff0c\u800c\u673a\u5668\u5b66\u4e60\u5219\u662f\u5f53\u4ee3\u5b9e\u73b0\u4eba\u5de5\u667a\u80fd\u7684\u4e3b\u8981\u9014\u5f84\u3002 \u5386\u53f2","title":"\u81ea\u7136\u8bed\u8a00\u5904\u7406\u7684\u6d41\u6d3e"},{"location":"pages/nlp/nlpinfo/nlp-new-entry/#\u673a\u5668\u5b66\u4e60","text":"\u4ec0\u4e48\u662f\u673a\u5668\u5b66\u4e60 \u7f8e\u56fd\u5de5\u7a0b\u9662\u9662\u58eb Tom Mitchell \u7ed9\u8fc7\u4e00\u4e2a\u66f4\u660e\u786e\u7684\u5b9a\u4e49\uff0c \u673a\u5668\u5b66\u4e60 \u6307\u7684\u662f\u8ba1\u7b97\u673a\u901a\u8fc7\u67d0\u9879\u4efb\u52a1\u7684\u7ecf\u9a8c\u6570\u636e\u63d0\u9ad8\u4e86\u5728\u8be5\u9879\u4efb\u52a1\u4e0a\u7684\u80fd\u529b\u3002 \u6a21\u578b \u6a21\u578b\u662f\u5bf9\u73b0\u5b9e\u95ee\u9898\u7684\u6570\u5b66\u62bd\u8c61\uff0c\u7531\u4e00\u4e2a\u5047\u8bbe\u51fd\u6570\u4ee5\u53ca\u4e00\u7cfb\u5217\u53c2\u6570\u6784\u6210\u3002\u4ee5\u4e0b\u5c31\u662f\u6700\u7b80\u5355\u7684\u6a21\u578b\u516c\u5f0f\uff1a \u5176\u4e2d\uff0cw \u548c b \u662f\u51fd\u6570\u7684\u53c2\u6570\uff0c\u800c x \u662f\u51fd\u6570\u7684\u81ea\u53d8\u91cf\u3002\u4e0d\u8fc7\u6a21\u578b\u5e76\u4e0d\u5305\u62ec\u5177\u4f53\u7684\u81ea\u53d8\u91cfx\uff0c\u56e0\u4e3a\u81ea\u53d8\u91cf\u662f\u7531\u7528\u6237\u8f93\u5165\u7684\u3002\u81ea\u53d8\u91cf x \u662f\u4e00\u4e2a\u7279\u5f81\u5411\u91cf\uff0c\u7528\u6765\u8868\u793a\u4e00\u4e2a\u5bf9\u8c61\u7684\u7279\u5f81\u3002 \u7279\u5f81 \u7279\u5f81 \u6307\u7684\u662f\u4e8b\u7269\u7684\u7279\u70b9\u8f6c\u5316\u7684\u6570\u503c\u3002 \u5982\u4f55\u6311\u9009\u7279\u5f81\uff0c\u5982\u4f55\u8bbe\u8ba1\u7279\u5f81\u6a21\u677f\uff0c\u8fd9\u79f0\u4f5c \u7279\u5f81\u5de5\u7a0b \u3002\u7279\u5f81\u8d8a\u591a\uff0c\u53c2\u6570\u5c31\u8d8a\u591a\uff1b\u53c2\u6570\u8d8a\u591a\uff0c\u6a21\u578b\u5c31\u8d8a\u590d\u6742\u3002 \u6570\u636e\u96c6 \u6837\u672c\u7684\u96c6\u5408\u5728\u673a\u5668\u5b66\u4e60\u9886\u57df\u79f0\u4f5c \u6570\u636e\u96c6 \uff0c\u5728\u81ea\u7136\u8bed\u8a00\u5904\u7406\u9886\u57df\u79f0\u4f5c \u8bed\u6599\u5e93 \u3002 \u76d1\u7763\u5b66\u4e60 \u5982\u679c\u6570\u636e\u96c6\u9644\u5e26\u6807\u51c6\u7b54\u6848 y\uff0c\u5219\u6b64\u65f6\u7684\u5b66\u4e60\u7b97\u6cd5\u79f0\u4f5c \u76d1\u7763\u5b66\u4e60 \u3002\u5b66\u4e60\u4e00\u904d\u8bef\u5dee\u8fd8\u4e0d\u591f\u5c0f\uff0c\u9700\u8981\u53cd\u590d\u5b66\u4e60\u3001\u53cd\u590d\u8c03\u6574\u3002\u6b64\u65f6\u7684\u7b97\u6cd5\u662f\u4e00\u79cd\u8fed\u4ee3\u5f0f\u7684\u7b97\u6cd5\uff0c\u6bcf\u4e00\u904d\u5b66\u4e60\u79f0\u4f5c \u4e00\u6b21\u8fed\u4ee3 \u3002\u8fd9\u79cd\u5728\u6709\u6807\u7b7e\u7684\u6570\u636e\u96c6\u4e0a\u8fed\u4ee3\u5b66\u4e60\u7684\u8fc7\u7a0b\u79f0\u4f5c \u8bad\u7ec3 \u3002 \u65e0\u76d1\u7763\u5b66\u4e60 \u5982\u679c\u6211\u4eec\u53ea\u7ed9\u673a\u5668\u505a\u9898\uff0c\u5374\u4e0d\u544a\u8bc9\u5b83\u53c2\u8003\u7b54\u6848\uff0c\u673a\u5668\u4ecd\u7136\u53ef\u4ee5\u5b66\u5230\u77e5\u8bc6\u5417\uff1f\u53ef\u4ee5\uff0c\u6b64\u65f6\u7684\u5b66\u4e60\u79f0\u4f5c \u65e0\u76d1\u7763\u5b66\u4e60 \uff0c\u800c\u4e0d\u542b\u6807\u51c6\u7b54\u6848\u7684\u6570\u636e\u96c6\u88ab\u79f0\u4f5c \u65e0\u6807\u6ce8\u7684\u6570\u636e\u96c6 \u3002\u65e0\u76d1\u7763\u5b66\u4e60\u4e00\u822c\u7528\u4e8e\u805a\u7c7b\u548c\u964d\u7ef4\uff0c \u964d\u7ef4 \u6307\u7684\u662f\u5c06\u6837\u672c\u70b9\u4ece\u9ad8\u7ef4\u7a7a\u95f4\u53d8\u6362\u6210\u4f4e\u7ef4\u7a7a\u95f4\u7684\u8fc7\u7a0b\u3002 \u5176\u4ed6\u7c7b\u578b\u7684\u673a\u5668\u5b66\u4e60\u7b97\u6cd5 \u534a\u76d1\u7763\u5b66\u4e60 \uff1a\u5982\u679c\u6211\u4eec\u8bad\u7ec3\u591a\u4e2a\u6a21\u578b\uff0c\u7136\u540e\u5bf9\u540c\u4e00\u4e2a\u5b9e\u4f8b\u6267\u884c\u9884\u6d4b\uff0c\u4f1a\u5f97\u5230\u591a\u4e2a\u7ed3\u679c\u3002\u5982\u679c\u8fd9\u4e9b\u7ed3\u679c\u591a\u6570\u4e00\u81f4\uff0c\u5219\u53ef\u4ee5\u5c06\u8be5\u5b9e\u4f8b\u548c\u7ed3\u679c\u653e\u5230\u4e00\u8d77\u4f5c\u4e3a\u65b0\u7684\u8bad\u7ec3\u6837\u672c\uff0c\u7528\u529b\u554a\u6269\u5145\u8bad\u7ec3\u96c6\u3002\u8fd9\u6837\u7684\u7b97\u6cd5\u88ab\u79f0\u4e3a\u534a\u76d1\u7763\u5b66\u4e60\u3002 \u5f3a\u5316\u5b66\u4e60 \uff1a\u73b0\u5b9e\u4e16\u754c\u4e2d\u7684\u4e8b\u7269\u4e4b\u95f4\u5f80\u5f80\u6709\u5f88\u957f\u7684\u56e0\u679c\u94fe\uff1a\u6211\u4eec\u8981\u6b63\u786e\u5730\u6267\u884c\u4e00\u7cfb\u5217\u5f7c\u6b64\u5173\u8054\u7684\u51b3\u7b56\uff0c\u624d\u80fd\u5f97\u5230\u6700\u7ec8\u7684\u6210\u679c\u3002\u8fd9\u7c7b\u95ee\u9898\u5f80\u5f80\u9700\u8981\u4e00\u8fb9\u9884\u6d4b\uff0c\u4e00\u8fb9\u6839\u636e\u73af\u5883\u7684\u53cd\u9988\u89c4\u5212\u4e0b\u6b21\u51b3\u7b56\u3002\u8fd9\u7c7b\u7b97\u6cd5\u88ab\u79f0\u4e3a\u5f3a\u5316\u5b66\u4e60\u3002","title":"\u673a\u5668\u5b66\u4e60"},{"location":"pages/nlp/nlpinfo/nlp-new-entry/#\u8bed\u6599\u5e93","text":"\u4e2d\u6587\u5206\u8bcd\u8bed\u6599\u5e93 \u4e2d\u6587\u5206\u8bcd\u8bed\u6599\u5e93\u6307\u7684\u662f\uff0c\u7531\u4eba\u5de5\u6b63\u786e\u5207\u5206\u7684\u53e5\u5b50\u96c6\u5408\u3002\u4ee5\u8457\u540d\u76841998\u5e74\u300a\u4eba\u6c11\u65e5\u62a5\u300b\u8bed\u6599\u5e93\u4e3a\u4f8b\uff1a \u5148 \u6709 \u901a\u8d27\u81a8\u80c0 \u5e72\u6270\uff0c\u540e \u6709 \u901a\u8d27 \u7d27\u7f29 \u53eb\u677f\u3002 \u8bcd\u6027\u6807\u6ce8\u8bed\u6599\u5e93 \u5b83\u6307\u7684\u662f\u5207\u5206\u5e76\u4e3a\u6bcf\u4e2a\u8bcd\u8bed\u5236\u5b9a\u4e00\u4e2a\u8bcd\u6027\u7684\u8bed\u6599\u3002\u4f9d\u7136\u4ee5\u300a\u4eba\u6c11\u65e5\u62a5\u300b\u8bed\u6599\u5e93\u4e3a\u4f8b\uff1a \u8fc8\u5411/v \u5145\u6ee1/v \u5e0c\u671b/n \u7684/u \u65b0/a \u4e16\u7eaa/n \u2013/w \u4e00\u4e5d\u4e5d\u516b\u5e74/t \u65b0\u5e74/t \u8bb2\u8bdd/n \u8fd9\u91cc\u6bcf\u4e2a\u5355\u8bcd\u540e\u9762\u7528\u659c\u6760\u9694\u5f00\u7684\u5c31\u662f\u8bcd\u6027\u6807\u7b7e\u3002 \u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u8bed\u6599\u5e93 \u8fd9\u79cd\u8bed\u6599\u5e93\u4eba\u5de5\u6807\u6ce8\u4e86\u6587\u672c\u5185\u90e8\u5236\u4f5c\u8005\u5173\u5fc3\u7684\u5b9e\u4f53\u540d\u8bcd\u4ee5\u53ca\u5b9e\u4f53\u7c7b\u522b\u3002\u6bd4\u5982\u300a\u4eba\u6c11\u65e5\u62a5\u300b\u8bed\u6599\u5e93\u4e2d-\u5171\u542b\u6709\u4eba\u540d\u3001\u5730\u540d\u548c\u673a\u6784\u540d3\u79cd\u547d\u540d\u5b9e\u4f53: \u8428\u54c8\u592b/nr \u8bf4/v ,/w \u4f0a\u62c9\u514b/ns \u5c06/d \u540c/p [\u8054\u5408\u56fd/nt \u9500\u6bc1/v \u4f0a\u62c9\u514b/ns \u5927\u89c4\u6a21/b \u6740\u4f24\u6027/n \u6b66\u5668/n \u7279\u522b/a \u59d4\u5458\u4f1a/n] /nt \u7ee7\u7eed/v \u4fdd\u6301/v \u5408\u4f5c/v \u3002/w \u8fd9\u4e2a\u53e5\u5b50\u4e2d\u7684\u52a0\u7c97\u8bcd\u8bed\u5206\u522b\u662f\u4eba\u540d\u3001\u5730\u540d\u548c\u673a\u6784\u540d\u3002\u4e2d\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u662f\u590d\u5408\u8bcd\uff0c\u6211\u4eec\u53ef\u4ee5\u89c2\u5bdf\u5230:\u6709\u65f6\u5019\u673a\u6784\u540d\u548c\u5730\u540d\u590d\u5408\u8d77\u6765\u4f1a\u6784\u6210\u66f4\u957f\u7684\u673a\u6784\u540d\uff0c\u8fd9\u79cd\u6784\u8bcd\u6cd5\u4e0a\u7684\u5d4c\u5957\u73b0\u8c61\u589e\u52a0\u4e86\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u7684\u96be\u5ea6\u3002 \u53e5\u6cd5\u5206\u6790\u8bed\u6599\u5e93 \u6c49\u8bed\u4e2d\u5e38\u7528\u7684\u53e5\u6cd5\u5206\u6790\u8bed\u6599\u5e93\u6709CTB(Chinese Treebank\uff0c\u4e2d\u6587\u6811\u5e93)\uff0c\u5176\u4e2d\u4e00\u4e2a\u53e5\u5b50\u53ef\u89c6\u5316\u540e\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u4e2d\u6587\u5355\u8bcd\u4e0a\u9762\u7684\u82f1\u6587\u6807\u7b7e\u6807\u793a\u8bcd\u6027\uff0c\u800c\u7bad\u5934\u8868\u793a\u6709\u8bed\u6cd5\u8054\u7cfb\u7684\u4e24\u4e2a\u5355\u8bcd\uff0c\u5177\u4f53\u662f\u4f55\u79cd\u8054\u7cfb\u7531\u7bad\u5934\u4e0a\u7684\u6807\u7b7e\u6807\u793a\u3002 \u6587\u672c\u5206\u7c7b\u8bed\u6599\u5e93 \u5b83\u6307\u7684\u662f\u4eba\u5de5\u6807\u6ce8\u4e86\u6240\u5c5e\u5206\u7c7b\u7684\u6587\u7ae0\u6784\u6210\u7684\u8bed\u6599\u5e93\u3002 \u8bed\u6599\u5e93\u7684\u5efa\u8bbe \u8bed\u6599\u5e93\u5efa\u8bbe\u6307\u7684\u662f\u6784\u5efa\u4e00\u4efd\u8bed\u6599\u5e93\u7684\u8fc7\u7a0b\uff0c\u5206\u4e3a\u89c4\u8303\u5236\u5b9a\u3001\u4eba\u5458\u57f9\u8bad\u4e0e\u4eba\u5de5\u6807\u6ce8\u8fd9\u4e09\u4e2a\u9636\u6bb5\u3002\u9488\u5bf9\u4e0d\u540c\u7c7b\u578b\u7684\u4efb\u52a1\uff0c\u4eba\u4eec\u5f00\u53d1\u51fa\u8bb8\u591a\u6807\u6ce8\u8f6f\u4ef6\uff0c\u5176\u4e2d\u6bd4\u8f83\u6210\u719f\u7684\u4e00\u6b3e\u662fbrat\uff0c\u5b83\u652f\u6301\u8bcd\u6027\u6807\u6ce8\u3001\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u548c\u53e5\u6cd5\u5206\u6790\u7b49\u4efb\u52a1\u3002","title":"\u8bed\u6599\u5e93"},{"location":"pages/nlp/nlpinfo/nlp-new-entry/#\u5f00\u6e90\u5de5\u5177","text":"\u4e3b\u6d41NLP\u5de5\u5177\u6bd4\u8f83 \u53e6\u5916\uff0c\u4e5f\u7814\u7a76\u8fc7\u5176\u4ed6\u5f00\u6e90\u9879\u76ee\u7684\u539f\u7406\uff0c\u501f\u9274\u4e86\u5176\u4e2d\u4f18\u79c0\u7684\u8bbe\u8ba1\u3002\u4f46\u6bd5\u7adf\u8fd8\u662f\u81ea\u5df1\u5199\u7684\u4ee3\u7801\u8bb2\u5f97\u6700\u6e05\u695a\uff0c\u6240\u4ee5\u7efc\u5408\u4ee5\u4e0a\u5404\u79cd\u8003\u8651\uff0c\u6700\u540e\u9009\u53d6\u4e86 HanLP\u4f5c\u4e3a\u672c\u4e66\u7684\u5b9e\u73b0 \u3002 Python\u63a5\u53e3 HanLP \u7684 Python \u63a5\u53e3\u7531 pyhanlp \u5305\u63d0\u4f9b\uff0c\u5176\u5b89\u88c5\u53ea\u9700\u4e00\u53e5\u547d\u4ee4\uff1a 1 $ pip install pyhanlp","title":"\u5f00\u6e90\u5de5\u5177"},{"location":"pages/nlp/nlpinfo/nlp-new-entry/#\u603b\u7ed3","text":"\u672c\u7ae0\u7ed9\u51fa\u4e86\u4eba\u5de5\u667a\u80fd\u3001\u673a\u5668\u5b66\u4e60\u4e0e\u81ea\u7136\u8bed\u8a00\u5904\u7406\u7684\u5b8f\u89c2\u7f29\u7565\u56fe\u4e0e\u53d1\u5c55\u65f6\u95f4\u7ebf\u3002\u673a\u5668\u5b66\u4e60\u662f\u4eba\u5de5\u667a\u80fd\u7684\u5b50\u96c6\uff0c\u800c\u81ea\u7136\u8bed\u8a00\u5904\u7406\u5219\u662f\u4eba\u5de5\u667a\u80fd\u4e0e\u8bed\u8a00\u5b66\u3001\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u4ea4\u96c6\u3002\u8fd9\u4e2a\u4ea4\u96c6\u867d\u7136\u5c0f\uff0c\u5b83\u7684\u96be\u5ea6\u5374\u5f88\u5927\u3002\u4e3a\u4e86\u5b9e\u73b0\u7406\u89e3\u81ea\u7136\u8bed\u8a00\u8fd9\u4e2a\u5b8f\u4f1f\u76ee\u6807\uff0c\u4eba\u4eec\u5c1d\u8bd5\u4e86\u89c4\u5219\u7cfb\u7edf\uff0c\u5e76\u6700\u7ec8\u53d1\u5c55\u5230\u57fa\u4e8e\u5927\u89c4\u6a21\u8bed\u6599\u5e93\u7684\u7edf\u8ba1\u5b66\u4e60\u7cfb\u7edf\u3002 \u5728\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u4e2d\uff0c\u5c31\u8ba9\u6211\u4eec\u6309\u7167\u8fd9\u79cd\u7531\u6613\u5230\u96be\u7684\u53d1\u5c55\u89c4\u5f8b\u53bb\u89e3\u51b3\u7b2c\u4e00\u4e2aNLP\u95ee\u9898\u4e00\u4e2d\u6587\u5206\u8bcd\u3002\u6211\u4eec\u5c06\u5148\u4ece\u89c4\u5219\u7cfb\u7edf\u4eba\u624b\uff0c\u4ecb\u7ecd\u4e00\u4e9b\u5feb\u800c\u4e0d\u51c6\u7684\u7b97\u6cd5\uff0c\u7136\u540e\u9010\u6b65\u8fdb\u5316\u5230\u66f4\u52a0\u51c6\u786e\u7684\u7edf\u8ba1\u6a21\u578b\u3002","title":"\u603b\u7ed3"},{"location":"pages/nlp/nlpinfo/nlp-tookits/","text":"\u5e38\u7528\u7684NLP\u5de5\u5177\u5e93 \u00b6 spaCy \u6781\u5176\u4f18\u5316\u7684NLP\u5e93\uff0c\u53ef\u4e0e\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\uff08\u5982TensorFlow\u6216PyTorch\uff09\u4e00\u8d77\u8fd0\u884c\u3002\u8be5\u5e93\u63d0\u4f9b\u4e86\u5927\u591a\u6570\u6807\u51c6\u529f\u80fd\uff08\u6807\u8bb0\u5316\uff0cPoS\u6807\u8bb0\uff0c\u89e3\u6790\uff0c\u547d\u540d\u5b9e\u4f53\u8bc6\u522b......\uff09\uff0c\u5e76\u4e14\u6784\u5efa\u5feb\u901f\u3002spaCy\u4e5f\u5f88\u597d\u5730\u4e0e\u6240\u6709\u4e3b\u8981\u7684\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u63a5\u53e3\uff0c\u5e76\u9884\u88c5\u4e86\u4e00\u4e9b\u975e\u5e38\u597d\u7684\u548c\u6709\u7528\u7684\u8bed\u8a00\u6a21\u578b\u3002\u4e0b\u9762\u6240\u6709\u7684\u4f8b\u5b50\u90fd\u662f\u7528Jupter\u8fd0\u884c\u8fc7\u540e\u7684\u3002 spaCy \u4f8b\u5b50 Gensim \u53ef\u6269\u5c55\u7684\u7edf\u8ba1\u8bed\u4e49\uff0c\u5206\u6790\u7eaf\u6587\u672c\u6587\u6863\u7684\u8bed\u4e49\u7ed3\u6784\uff0c\u68c0\u7d22\u8bed\u4e49\u76f8\u4f3c\u7684\u6587\u6863\u3002 Gensim Tutorials example Pattern Pattern\u662fPython\u7f16\u7a0b\u8bed\u8a00\u7684Web\u6316\u6398\u6a21\u5757\u3002\u5b83\u5177\u6709\u6570\u636e\u6316\u6398\u5de5\u5177\uff08\u8c37\u6b4c\uff0cTwitter\u548c\u7ef4\u57fa\u767e\u79d1API\uff0c\u7f51\u7edc\u722c\u866b\uff0cHTML DOM\u89e3\u6790\u5668\uff09\uff0c\u81ea\u7136\u8bed\u8a00\u5904\u7406\uff08\u8bcd\u6027\u6807\u6ce8\uff0cn-gram\u641c\u7d22\uff0c\u60c5\u611f\u5206\u6790\uff0cWordNet\uff09\uff0c\u673a\u5668\u5b66\u4e60\uff08\u77e2\u91cf\uff09\u7a7a\u95f4\u6a21\u578b\uff0c\u805a\u7c7b\uff0cSVM\uff09\uff0c\u7f51\u7edc\u5206\u6790\u548c <canvas> \u53ef\u89c6\u5316\u7b49\u529f\u80fd\u3002 Natural Language Toolkit / NLTK NLTK\u662f\u6784\u5efaPython\u7a0b\u5e8f\u4ee5\u4f7f\u7528\u4eba\u7c7b\u8bed\u8a00\u6570\u636e\u7684\u9886\u5148\u5e73\u53f0\u3002\u5b83\u4e3a50\u591a\u79cd\u8bed\u6599\u5e93\u548c\u8bcd\u6c47\u8d44\u6e90\uff08\u5982WordNet\uff09\u63d0\u4f9b\u4e86\u6613\u4e8e\u4f7f\u7528\u7684\u754c\u9762\uff0c\u8fd8\u63d0\u4f9b\u4e86\u4e00\u5957\u7528\u4e8e\u5206\u7c7b\uff0c\u6807\u8bb0\u5316\uff0c\u8bcd\u5e72\u5316\uff0c\u6807\u8bb0\uff0c\u89e3\u6790\u548c\u8bed\u4e49\u63a8\u7406\u7684\u6587\u672c\u5904\u7406\u5e93\uff0c\u7528\u4e8e\u5de5\u4e1a\u7ea7NLP\u5e93\u7684\u5305\u88c5\u5668\uff0c\u548c\u79ef\u6781\u7684\u8ba8\u8bba\u8bba\u575b\u3002\u7531\u4e8e\u5b9e\u8df5\u6307\u5357\u4ecb\u7ecd\u4e86\u7f16\u7a0b\u57fa\u7840\u77e5\u8bc6\u4ee5\u53ca\u8ba1\u7b97\u8bed\u8a00\u5b66\u7684\u4e3b\u9898\uff0c\u4ee5\u53ca\u5168\u9762\u7684API\u6587\u6863\uff0cNLTK\u9002\u7528\u4e8e\u8bed\u8a00\u5b66\u5bb6\uff0c\u5de5\u7a0b\u5e08\uff0c\u5b66\u751f\uff0c\u6559\u80b2\u5de5\u4f5c\u8005\uff0c\u7814\u7a76\u4eba\u5458\u548c\u884c\u4e1a\u7528\u6237\u7b49\u3002 NLTK\u9002\u7528\u4e8eWindows\uff0cMac OS X\u548cLinux\u3002\u6700\u91cd\u8981\u7684\u662f\uff0cNLTK\u662f\u4e00\u4e2a\u514d\u8d39\u7684\uff0c\u5f00\u6e90\u7684\uff0c\u793e\u533a\u9a71\u52a8\u7684\u9879\u76ee\u3002 TextBlob TextBlob\u662f\u4e00\u4e2a\u7528\u4e8e\u5904\u7406\u6587\u672c\u6570\u636e\u7684Python\uff082\u548c3\uff09\u5e93\u3002\u5b83\u4e3a\u5e38\u89c1\u7684\u81ea\u7136\u8bed\u8a00\u5904\u7406\uff08NLP\uff09\u4efb\u52a1\u63d0\u4f9b\u4e86\u4e00\u81f4\u7684API\uff0c\u4f8b\u5982\u8bcd\u6027\u6807\u6ce8\uff0c\u540d\u8bcd\u77ed\u8bed\u63d0\u53d6\uff0c\u5206\u6790\u7b49\u3002 \u5e38\u89c1\u529f\u80fd\uff1a Noun phrase extraction Part-of-speech tagging Sentiment analysis Classification (Naive Bayes, Decision Tree) Language translation and detection powered by Google Translate Tokenization (splitting text into words and sentences) Word and phrase frequencies Parsing n-grams Word inflection (pluralization and singularization) and lemmatization Spelling correction Add new models or languages through extensions WordNet integration Polyglot \u5728\u67d0\u4e9b\u65b9\u9762\u4e0e\u4e0a\u9762\u7684\u7684\u622a\u7136\u4e0d\u540c\u3002\u867d\u7136\u5b83\u5177\u6709\u7c7b\u4f3c\u7684\u529f\u80fd\uff08\u6807\u8bb0\u5316\uff0cPoS\u6807\u8bb0\uff0c\u5b57\u5d4c\u5165\uff0c\u547d\u540d\u6027\u8bc6\u522b\u7b49\uff09\uff0c\u4f46Polyglot\u4e3b\u8981\u7528\u4e8e\u591a\u8bed\u8a00\u5e94\u7528\u7a0b\u5e8f\u3002\u5728\u540c\u65f6\u5904\u7406\u5404\u79cd\u8bed\u8a00\u7684\u7a7a\u95f4\u5185\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e9b\u975e\u5e38\u6709\u8da3\u7684\u529f\u80fd\uff0c\u4f8b\u5982\u8bed\u8a00\u68c0\u6d4b\u548c\u97f3\u8bd1\uff0c\u8fd9\u4e9b\u529f\u80fd\u5728\u5176\u4ed6\u5305\u4e2d\u901a\u5e38\u4e0d\u90a3\u4e48\u660e\u663e\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u627e\u51fa\u7ed9\u5b9a\u6587\u672c\u7684\u8bed\u8a00\uff0c\u6211\u4eec\u53ef\u4ee5\u5728Polyglot\u4e2d\u6267\u884c\u6b64\u64cd\u4f5c\uff1a Vocabulary \u8bcd\u6c47\u8868\u662f\u53e6\u4e00\u4e2a\u76f8\u5f53\u5c0f\u7684Python\u5e93\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e9b\u975e\u5e38\u6709\u8da3\u548c\u4e13\u4e1a\u7684\u529f\u80fd\u3002\u987e\u540d\u601d\u4e49\uff0c\u8bcd\u6c47\u8868\u57fa\u672c\u4e0a\u662fPython\u6a21\u5757\u5f62\u5f0f\u7684\u5b57\u5178\u3002\u51c6\u786e\u5730\u8bf4\uff0c\u8bcd\u6c47\u8868\u5c06\u4e3a\u60a8\u63d0\u4f9b\u7ed9\u5b9a\u5355\u8bcd\u7684\u542b\u4e49\uff0c\u540c\u4e49\u8bcd\uff0c\u53cd\u4e49\u8bcd\uff0c\u8bcd\u6027\uff0c\u7ffb\u8bd1\uff0c\u793a\u4f8b\uff0c\u53d1\u97f3\u548c\u8fde\u5b57\u7b26\u3002 PyNLPl PyNLPl\uff0c\u6216\u7b80\u79f0\u4e3a\u201c\u83e0\u841d\u201d\uff0c\u662f\u4e00\u79cd\u9c9c\u4e3a\u4eba\u77e5\u7684NLP\u5e93\uff0c\u7279\u522b\u9002\u7528\u4e8e\u8bfb\u5199NLP\u7a7a\u95f4\u4e2d\u5e38\u89c1\uff08\u548c\u4e0d\u592a\u5e38\u89c1\uff09\u7684\u6587\u4ef6\u683c\u5f0f\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u9700\u8981\u4f7f\u7528\u6709\u65f6\u96be\u4ee5\u9605\u8bfb\u548c\u89e3\u6790\u7684FoLiA XML\uff08Linguistic Annoation\uff09\u6216GIZA ++\u6587\u4ef6\uff0cPyNLPl\u53ef\u4ee5\u6d3e\u4e0a\u7528\u573a\u3002PyNLPl\u53ef\u4ee5\u5728\u4e00\u4e9b\u76f8\u5f53\u5177\u4f53\u7684\u60c5\u51b5\u4e0b\u4e3a\u60a8\u8282\u7701\u5927\u91cf\u65f6\u95f4\u3002\u5982\u679c\u60a8\u53d1\u73b0\u81ea\u5df1\u5904\u4e8e\u9700\u8981\u4f7f\u7528FoLiA\uff0cGIZA\uff0cMoses\uff0cARPA\uff0cTimble\u6216CQL\u7684\u60c5\u51b5\u4e0b\uff0c\u8bf7\u8bb0\u4f4f\u6709\u4e00\u4e2a\u53cb\u597d\u7684\u83e0\u841d\u53ef\u4ee5\u63d0\u4f9b\u5e2e\u52a9\u3002 Stanford CoreNLP Python CoreNLP\u6b63\u5728\u65af\u5766\u798f\u5927\u5b66\u7684\u81ea\u7136\u8bed\u8a00\u5904\u7406\u5c0f\u7ec4\u79ef\u6781\u5f00\u53d1.\u8be5\u5de5\u5177\u5305\u63d0\u4f9b\u4e86\u975e\u5e38\u5f3a\u5927\uff0c\u51c6\u786e\u548c\u4f18\u5316\u7684\u6280\u672f\uff0c\u7528\u4e8e\u6807\u8bb0\uff0c\u89e3\u6790\u548c\u5206\u6790\u5404\u79cd\u8bed\u8a00\u7684\u6587\u672c\u3002\u5b83\u8fd8\u652f\u6301\u6ce8\u91ca\u7ba1\u9053\uff0c\u5e76\u4e14\u6613\u4e8e\u6269\u5c55\u548c\u8bbf\u95ee\u3002\u603b\u7684\u6765\u8bf4\uff0cCoreNLP\u662fNLP\u5de5\u5177\u5305\u4e4b\u4e00\uff0c\u5df2\u7ecf\u5e76\u4e14\u80af\u5b9a\u5728\u751f\u4ea7\u4e2d\u4f7f\u7528\u4e86\u5f88\u591a\u3002 MontyLingua MontyLingua\u65e8\u5728\u8ba9\u4e8b\u60c5\u53d8\u5f97\u5c3d\u53ef\u80fd\u7b80\u5355\u3002\u60a8\u63d0\u4f9b\u539f\u59cb\u6587\u672c\uff0c\u60a8\u5c06\u6536\u5230\u5bf9\u8be5\u6587\u672c\u7684\u4e00\u4e9b\u8bed\u4e49\u89e3\u91ca - \u5f00\u7bb1\u5373\u7528\u3002\u5b83\u4e0d\u662f\u4f9d\u8d56\u590d\u6742\u7684\u673a\u5668\u5b66\u4e60\u6280\u672f\uff0c\u800c\u662f\u914d\u5907\u4e86\u6240\u8c13\u7684\u201c\u5e38\u8bc6\u77e5\u8bc6\u201d\uff0c\u5373\u5173\u4e8e\u65e5\u5e38\u60c5\u5883\u7684\u89c4\u5219\u548c\u77e5\u8bc6\uff0c\u4e30\u5bcc\u4e86\u7cfb\u7edf\u7684\u89e3\u91ca\u3002\u55ef\uff0c\u516c\u5e73\u5730\u8bf4\uff0c\u8fd9\u4e9b\u89c4\u5219\u662f\u57fa\u4e8e\u201c\u5f00\u653e\u601d\u7ef4\u5e38\u8bc6\u201d\u9879\u76ee\uff0c\u8be5\u9879\u76ee\u4f9d\u8d56\u4e8eAI\u3002 Polyglot github Polyglot \u652f\u6301\u5bf9\u6d77\u91cf\u6587\u672c\u548c\u591a\u8bed\u8a00\u7684\u5904\u7406\u3002\u5b83\u652f\u6301\u5bf9165\u79cd\u8bed\u8a00\u7684\u5206\u8bcd\uff0c\u5bf9196\u4e2d\u8bed\u8a00\u7684\u8fa8\u8bc6\uff0c40\u79cd\u8bed\u8a00\u7684\u4e13\u6709\u540d\u8bcd\u8bc6\u522b\uff0c16\u79cd\u8bed\u8a00\u7684\u8bcd\u6027\u6807\u6ce8\uff0c136\u79cd\u8bed\u8a00\u7684\u60c5\u611f\u5206\u6790\uff0c137\u79cd\u8bed\u8a00\u7684\u5d4c\u5165\uff0c135\u79cd\u8bed\u8a00\u7684\u5f62\u6001\u5206\u6790\uff0c\u4ee5\u53ca69\u4e2d\u8bed\u8a00\u7684\u7ffb\u8bd1\u3002 BERT BERT \u662f\u4e00\u4e2a\u57fa\u4e8e\u53cc\u5411 Transformer \u7684\u5927\u89c4\u6a21\u9884\u8bad\u7ec3\u8bed\u8a00\u6a21\u578b\uff0c\u7528\u4e8e\u5bf9\u5927\u91cf\u672a\u6807\u8bb0\u7684\u6587\u672c\u6570\u636e\u8fdb\u884c\u9884\u8bad\u7ec3\uff0c\u4ee5\u5b66\u4e60\u4e00\u79cd\u8bed\u8a00\u8868\u793a\u5f62\u5f0f\uff0c\u8fd9\u79cd\u8bed\u8a00\u8868\u793a\u5f62\u5f0f\u53ef\u7528\u4e8e\u5bf9\u7279\u5b9a\u673a\u5668\u5b66\u4e60\u4efb\u52a1\u8fdb\u884c\u5fae\u8c03\u3002BERT \u88ab\u79f0\u4e3a\u662f NLP \u9886\u57df\u4e2d\u91cc\u7a0b\u7891\u7684\u8fdb\u5c55\u3002BERT\u53ef\u4ee5\u975e\u5e38\u597d\u5730\u5e94\u7528\u5728Question Answer (QA\uff0c\u95ee\u7b54\u7cfb\u7edf) \u4e0e\u9605\u8bfb\u7406\u89e3\u3001\u641c\u7d22\u4e0e\u4fe1\u606f\u68c0\u7d22\uff08IR\uff09\u3001\u5bf9\u8bdd\u7cfb\u7edf\uff0f\u804a\u5929\u673a\u5668\u4eba\uff08Dialog System or Chatbot\uff09\u3001\u6587\u672c\u6458\u8981(\u751f\u6210\u5f0f\u3001\u62bd\u53d6\u5f0f)\u3001\u6587\u672c\u5206\u7c7b\u3001\u5e8f\u5217\u6807\u6ce8\u7b49\u9886\u57df\u3002 \u8fd9\u4e9b\u5de5\u5177\u7528Python\u7f16\u5199\uff0c\u4e5f\u53ef\u7528Java\u7f16\u5199\uff0c\u7531\u516d\u4e2a\u6a21\u5757\u7ec4\u6210\uff0c\u8fd9\u4e9b\u6a21\u5757\u63d0\u4f9b\u6807\u8bb0\u5316\uff0c\u6807\u8bb0\uff0c\u5206\u5757\uff0c\u77ed\u8bed\u63d0\u53d6\uff0c\u8bcd\u5178\u5316\u548c\u8bed\u8a00\u751f\u6210\u529f\u80fd\u3002 \u6b64\u5916\uff0c https://pypi.org/search/?q=nlp \u63d0\u4f9b\u4e86\u5927\u6982500 \u4e2a\u5de6\u53f3\u7684NLP \u4e00\u4e2a\u65b0\u5174\u7684NLP\u5e93\u7c7b\u522b\u6d89\u53ca\u4e3a\u5404\u79cd\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u63d0\u4f9b\u66f4\u9ad8\u7ea7\u522b\u7684\u63a5\u53e3\u3002\u4f8b\u5982\uff0cfinch\uff0c\u63d0\u4f9bTensorFlow\u7684\u8bbf\u95ee\u548c\u6a21\u578b\u7684\u5e93\u3002 \u5176\u6b21\uff0c\u6709\u5404\u79cd\u975e\u5e38\u6709\u8da3\u7684\u5e93\u662f\u8d85\u7ea7\u4e13\u4e1a\u7684\u3002\u4e3e\u51e0\u4e2a\u4f8b\u5b50\uff1aCLTK\u662f\u5e0c\u814a\u8bed\u548c\u62c9\u4e01\u8bed\u7b49\u7ecf\u5178\u8bed\u8a00\u7684\u9996\u9009\u5e93\u3002 PyTextRank\u662fMihalcea\uff082004\uff09\u548c\u5176\u4ed6\u4eba\u63d0\u51fa\u7684TextRank\u7b97\u6cd5/\u65b9\u6cd5\u7684\u76f4\u63a5\u5b9e\u73b0\u3002 newspaper \u53ef\u4ee5\u5e2e\u52a9\u60a8\u4ece\u7f51\u7edc\u4e0a\u6784\u5efa\u548c\u5206\u6790\u62a5\u7eb8\u8bed\u6599\u5e93\u3002\u8fd9\u79cd\uff08\u9ad8\u5ea6\uff09\u4e13\u4e1a\u5316\u7684\u5e93\uff08\u6216\u73b0\u6709\u5e93\u7684\u9644\u52a0\u7ec4\u4ef6\uff0c\u5982textblob-de\uff09\u5728\u4f7f\u7528\u8f83\u5c11\u7684\u201c\u5df2\u77e5\u201d\uff08\u8bed\u8a00\u65f6\u4e5f\u662f\u4e0d\u53ef\u6216\u7f3a\u7684\u3002 \u7b2c\u4e09\uff0c\uff08\u6807\u51c6\uff09'\u6570\u636e\u79d1\u5b66'NLP\u80fd\u529b\u5e93\u3002\u4f8b\u5982\uff0cscikit-learn\u4e0d\u4ec5\u63d0\u4f9b\u4e86\u4e00\u4e9b\u793a\u4f8b\u6570\u636e\uff0c\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e9b\u975e\u5e38\u6709\u7528\u7684\u81ea\u7136\u8bed\u8a00\u5904\u7406\u6a21\u578b\u548c\u7b97\u6cd5\u3002","title":"nlp\u5e38\u7528\u5de5\u5177\u96c6"},{"location":"pages/nlp/nlpinfo/nlp-tookits/#\u5e38\u7528\u7684NLP\u5de5\u5177\u5e93","text":"spaCy \u6781\u5176\u4f18\u5316\u7684NLP\u5e93\uff0c\u53ef\u4e0e\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\uff08\u5982TensorFlow\u6216PyTorch\uff09\u4e00\u8d77\u8fd0\u884c\u3002\u8be5\u5e93\u63d0\u4f9b\u4e86\u5927\u591a\u6570\u6807\u51c6\u529f\u80fd\uff08\u6807\u8bb0\u5316\uff0cPoS\u6807\u8bb0\uff0c\u89e3\u6790\uff0c\u547d\u540d\u5b9e\u4f53\u8bc6\u522b......\uff09\uff0c\u5e76\u4e14\u6784\u5efa\u5feb\u901f\u3002spaCy\u4e5f\u5f88\u597d\u5730\u4e0e\u6240\u6709\u4e3b\u8981\u7684\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u63a5\u53e3\uff0c\u5e76\u9884\u88c5\u4e86\u4e00\u4e9b\u975e\u5e38\u597d\u7684\u548c\u6709\u7528\u7684\u8bed\u8a00\u6a21\u578b\u3002\u4e0b\u9762\u6240\u6709\u7684\u4f8b\u5b50\u90fd\u662f\u7528Jupter\u8fd0\u884c\u8fc7\u540e\u7684\u3002 spaCy \u4f8b\u5b50 Gensim \u53ef\u6269\u5c55\u7684\u7edf\u8ba1\u8bed\u4e49\uff0c\u5206\u6790\u7eaf\u6587\u672c\u6587\u6863\u7684\u8bed\u4e49\u7ed3\u6784\uff0c\u68c0\u7d22\u8bed\u4e49\u76f8\u4f3c\u7684\u6587\u6863\u3002 Gensim Tutorials example Pattern Pattern\u662fPython\u7f16\u7a0b\u8bed\u8a00\u7684Web\u6316\u6398\u6a21\u5757\u3002\u5b83\u5177\u6709\u6570\u636e\u6316\u6398\u5de5\u5177\uff08\u8c37\u6b4c\uff0cTwitter\u548c\u7ef4\u57fa\u767e\u79d1API\uff0c\u7f51\u7edc\u722c\u866b\uff0cHTML DOM\u89e3\u6790\u5668\uff09\uff0c\u81ea\u7136\u8bed\u8a00\u5904\u7406\uff08\u8bcd\u6027\u6807\u6ce8\uff0cn-gram\u641c\u7d22\uff0c\u60c5\u611f\u5206\u6790\uff0cWordNet\uff09\uff0c\u673a\u5668\u5b66\u4e60\uff08\u77e2\u91cf\uff09\u7a7a\u95f4\u6a21\u578b\uff0c\u805a\u7c7b\uff0cSVM\uff09\uff0c\u7f51\u7edc\u5206\u6790\u548c <canvas> \u53ef\u89c6\u5316\u7b49\u529f\u80fd\u3002 Natural Language Toolkit / NLTK NLTK\u662f\u6784\u5efaPython\u7a0b\u5e8f\u4ee5\u4f7f\u7528\u4eba\u7c7b\u8bed\u8a00\u6570\u636e\u7684\u9886\u5148\u5e73\u53f0\u3002\u5b83\u4e3a50\u591a\u79cd\u8bed\u6599\u5e93\u548c\u8bcd\u6c47\u8d44\u6e90\uff08\u5982WordNet\uff09\u63d0\u4f9b\u4e86\u6613\u4e8e\u4f7f\u7528\u7684\u754c\u9762\uff0c\u8fd8\u63d0\u4f9b\u4e86\u4e00\u5957\u7528\u4e8e\u5206\u7c7b\uff0c\u6807\u8bb0\u5316\uff0c\u8bcd\u5e72\u5316\uff0c\u6807\u8bb0\uff0c\u89e3\u6790\u548c\u8bed\u4e49\u63a8\u7406\u7684\u6587\u672c\u5904\u7406\u5e93\uff0c\u7528\u4e8e\u5de5\u4e1a\u7ea7NLP\u5e93\u7684\u5305\u88c5\u5668\uff0c\u548c\u79ef\u6781\u7684\u8ba8\u8bba\u8bba\u575b\u3002\u7531\u4e8e\u5b9e\u8df5\u6307\u5357\u4ecb\u7ecd\u4e86\u7f16\u7a0b\u57fa\u7840\u77e5\u8bc6\u4ee5\u53ca\u8ba1\u7b97\u8bed\u8a00\u5b66\u7684\u4e3b\u9898\uff0c\u4ee5\u53ca\u5168\u9762\u7684API\u6587\u6863\uff0cNLTK\u9002\u7528\u4e8e\u8bed\u8a00\u5b66\u5bb6\uff0c\u5de5\u7a0b\u5e08\uff0c\u5b66\u751f\uff0c\u6559\u80b2\u5de5\u4f5c\u8005\uff0c\u7814\u7a76\u4eba\u5458\u548c\u884c\u4e1a\u7528\u6237\u7b49\u3002 NLTK\u9002\u7528\u4e8eWindows\uff0cMac OS X\u548cLinux\u3002\u6700\u91cd\u8981\u7684\u662f\uff0cNLTK\u662f\u4e00\u4e2a\u514d\u8d39\u7684\uff0c\u5f00\u6e90\u7684\uff0c\u793e\u533a\u9a71\u52a8\u7684\u9879\u76ee\u3002 TextBlob TextBlob\u662f\u4e00\u4e2a\u7528\u4e8e\u5904\u7406\u6587\u672c\u6570\u636e\u7684Python\uff082\u548c3\uff09\u5e93\u3002\u5b83\u4e3a\u5e38\u89c1\u7684\u81ea\u7136\u8bed\u8a00\u5904\u7406\uff08NLP\uff09\u4efb\u52a1\u63d0\u4f9b\u4e86\u4e00\u81f4\u7684API\uff0c\u4f8b\u5982\u8bcd\u6027\u6807\u6ce8\uff0c\u540d\u8bcd\u77ed\u8bed\u63d0\u53d6\uff0c\u5206\u6790\u7b49\u3002 \u5e38\u89c1\u529f\u80fd\uff1a Noun phrase extraction Part-of-speech tagging Sentiment analysis Classification (Naive Bayes, Decision Tree) Language translation and detection powered by Google Translate Tokenization (splitting text into words and sentences) Word and phrase frequencies Parsing n-grams Word inflection (pluralization and singularization) and lemmatization Spelling correction Add new models or languages through extensions WordNet integration Polyglot \u5728\u67d0\u4e9b\u65b9\u9762\u4e0e\u4e0a\u9762\u7684\u7684\u622a\u7136\u4e0d\u540c\u3002\u867d\u7136\u5b83\u5177\u6709\u7c7b\u4f3c\u7684\u529f\u80fd\uff08\u6807\u8bb0\u5316\uff0cPoS\u6807\u8bb0\uff0c\u5b57\u5d4c\u5165\uff0c\u547d\u540d\u6027\u8bc6\u522b\u7b49\uff09\uff0c\u4f46Polyglot\u4e3b\u8981\u7528\u4e8e\u591a\u8bed\u8a00\u5e94\u7528\u7a0b\u5e8f\u3002\u5728\u540c\u65f6\u5904\u7406\u5404\u79cd\u8bed\u8a00\u7684\u7a7a\u95f4\u5185\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e9b\u975e\u5e38\u6709\u8da3\u7684\u529f\u80fd\uff0c\u4f8b\u5982\u8bed\u8a00\u68c0\u6d4b\u548c\u97f3\u8bd1\uff0c\u8fd9\u4e9b\u529f\u80fd\u5728\u5176\u4ed6\u5305\u4e2d\u901a\u5e38\u4e0d\u90a3\u4e48\u660e\u663e\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u627e\u51fa\u7ed9\u5b9a\u6587\u672c\u7684\u8bed\u8a00\uff0c\u6211\u4eec\u53ef\u4ee5\u5728Polyglot\u4e2d\u6267\u884c\u6b64\u64cd\u4f5c\uff1a Vocabulary \u8bcd\u6c47\u8868\u662f\u53e6\u4e00\u4e2a\u76f8\u5f53\u5c0f\u7684Python\u5e93\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e9b\u975e\u5e38\u6709\u8da3\u548c\u4e13\u4e1a\u7684\u529f\u80fd\u3002\u987e\u540d\u601d\u4e49\uff0c\u8bcd\u6c47\u8868\u57fa\u672c\u4e0a\u662fPython\u6a21\u5757\u5f62\u5f0f\u7684\u5b57\u5178\u3002\u51c6\u786e\u5730\u8bf4\uff0c\u8bcd\u6c47\u8868\u5c06\u4e3a\u60a8\u63d0\u4f9b\u7ed9\u5b9a\u5355\u8bcd\u7684\u542b\u4e49\uff0c\u540c\u4e49\u8bcd\uff0c\u53cd\u4e49\u8bcd\uff0c\u8bcd\u6027\uff0c\u7ffb\u8bd1\uff0c\u793a\u4f8b\uff0c\u53d1\u97f3\u548c\u8fde\u5b57\u7b26\u3002 PyNLPl PyNLPl\uff0c\u6216\u7b80\u79f0\u4e3a\u201c\u83e0\u841d\u201d\uff0c\u662f\u4e00\u79cd\u9c9c\u4e3a\u4eba\u77e5\u7684NLP\u5e93\uff0c\u7279\u522b\u9002\u7528\u4e8e\u8bfb\u5199NLP\u7a7a\u95f4\u4e2d\u5e38\u89c1\uff08\u548c\u4e0d\u592a\u5e38\u89c1\uff09\u7684\u6587\u4ef6\u683c\u5f0f\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u9700\u8981\u4f7f\u7528\u6709\u65f6\u96be\u4ee5\u9605\u8bfb\u548c\u89e3\u6790\u7684FoLiA XML\uff08Linguistic Annoation\uff09\u6216GIZA ++\u6587\u4ef6\uff0cPyNLPl\u53ef\u4ee5\u6d3e\u4e0a\u7528\u573a\u3002PyNLPl\u53ef\u4ee5\u5728\u4e00\u4e9b\u76f8\u5f53\u5177\u4f53\u7684\u60c5\u51b5\u4e0b\u4e3a\u60a8\u8282\u7701\u5927\u91cf\u65f6\u95f4\u3002\u5982\u679c\u60a8\u53d1\u73b0\u81ea\u5df1\u5904\u4e8e\u9700\u8981\u4f7f\u7528FoLiA\uff0cGIZA\uff0cMoses\uff0cARPA\uff0cTimble\u6216CQL\u7684\u60c5\u51b5\u4e0b\uff0c\u8bf7\u8bb0\u4f4f\u6709\u4e00\u4e2a\u53cb\u597d\u7684\u83e0\u841d\u53ef\u4ee5\u63d0\u4f9b\u5e2e\u52a9\u3002 Stanford CoreNLP Python CoreNLP\u6b63\u5728\u65af\u5766\u798f\u5927\u5b66\u7684\u81ea\u7136\u8bed\u8a00\u5904\u7406\u5c0f\u7ec4\u79ef\u6781\u5f00\u53d1.\u8be5\u5de5\u5177\u5305\u63d0\u4f9b\u4e86\u975e\u5e38\u5f3a\u5927\uff0c\u51c6\u786e\u548c\u4f18\u5316\u7684\u6280\u672f\uff0c\u7528\u4e8e\u6807\u8bb0\uff0c\u89e3\u6790\u548c\u5206\u6790\u5404\u79cd\u8bed\u8a00\u7684\u6587\u672c\u3002\u5b83\u8fd8\u652f\u6301\u6ce8\u91ca\u7ba1\u9053\uff0c\u5e76\u4e14\u6613\u4e8e\u6269\u5c55\u548c\u8bbf\u95ee\u3002\u603b\u7684\u6765\u8bf4\uff0cCoreNLP\u662fNLP\u5de5\u5177\u5305\u4e4b\u4e00\uff0c\u5df2\u7ecf\u5e76\u4e14\u80af\u5b9a\u5728\u751f\u4ea7\u4e2d\u4f7f\u7528\u4e86\u5f88\u591a\u3002 MontyLingua MontyLingua\u65e8\u5728\u8ba9\u4e8b\u60c5\u53d8\u5f97\u5c3d\u53ef\u80fd\u7b80\u5355\u3002\u60a8\u63d0\u4f9b\u539f\u59cb\u6587\u672c\uff0c\u60a8\u5c06\u6536\u5230\u5bf9\u8be5\u6587\u672c\u7684\u4e00\u4e9b\u8bed\u4e49\u89e3\u91ca - \u5f00\u7bb1\u5373\u7528\u3002\u5b83\u4e0d\u662f\u4f9d\u8d56\u590d\u6742\u7684\u673a\u5668\u5b66\u4e60\u6280\u672f\uff0c\u800c\u662f\u914d\u5907\u4e86\u6240\u8c13\u7684\u201c\u5e38\u8bc6\u77e5\u8bc6\u201d\uff0c\u5373\u5173\u4e8e\u65e5\u5e38\u60c5\u5883\u7684\u89c4\u5219\u548c\u77e5\u8bc6\uff0c\u4e30\u5bcc\u4e86\u7cfb\u7edf\u7684\u89e3\u91ca\u3002\u55ef\uff0c\u516c\u5e73\u5730\u8bf4\uff0c\u8fd9\u4e9b\u89c4\u5219\u662f\u57fa\u4e8e\u201c\u5f00\u653e\u601d\u7ef4\u5e38\u8bc6\u201d\u9879\u76ee\uff0c\u8be5\u9879\u76ee\u4f9d\u8d56\u4e8eAI\u3002 Polyglot github Polyglot \u652f\u6301\u5bf9\u6d77\u91cf\u6587\u672c\u548c\u591a\u8bed\u8a00\u7684\u5904\u7406\u3002\u5b83\u652f\u6301\u5bf9165\u79cd\u8bed\u8a00\u7684\u5206\u8bcd\uff0c\u5bf9196\u4e2d\u8bed\u8a00\u7684\u8fa8\u8bc6\uff0c40\u79cd\u8bed\u8a00\u7684\u4e13\u6709\u540d\u8bcd\u8bc6\u522b\uff0c16\u79cd\u8bed\u8a00\u7684\u8bcd\u6027\u6807\u6ce8\uff0c136\u79cd\u8bed\u8a00\u7684\u60c5\u611f\u5206\u6790\uff0c137\u79cd\u8bed\u8a00\u7684\u5d4c\u5165\uff0c135\u79cd\u8bed\u8a00\u7684\u5f62\u6001\u5206\u6790\uff0c\u4ee5\u53ca69\u4e2d\u8bed\u8a00\u7684\u7ffb\u8bd1\u3002 BERT BERT \u662f\u4e00\u4e2a\u57fa\u4e8e\u53cc\u5411 Transformer \u7684\u5927\u89c4\u6a21\u9884\u8bad\u7ec3\u8bed\u8a00\u6a21\u578b\uff0c\u7528\u4e8e\u5bf9\u5927\u91cf\u672a\u6807\u8bb0\u7684\u6587\u672c\u6570\u636e\u8fdb\u884c\u9884\u8bad\u7ec3\uff0c\u4ee5\u5b66\u4e60\u4e00\u79cd\u8bed\u8a00\u8868\u793a\u5f62\u5f0f\uff0c\u8fd9\u79cd\u8bed\u8a00\u8868\u793a\u5f62\u5f0f\u53ef\u7528\u4e8e\u5bf9\u7279\u5b9a\u673a\u5668\u5b66\u4e60\u4efb\u52a1\u8fdb\u884c\u5fae\u8c03\u3002BERT \u88ab\u79f0\u4e3a\u662f NLP \u9886\u57df\u4e2d\u91cc\u7a0b\u7891\u7684\u8fdb\u5c55\u3002BERT\u53ef\u4ee5\u975e\u5e38\u597d\u5730\u5e94\u7528\u5728Question Answer (QA\uff0c\u95ee\u7b54\u7cfb\u7edf) \u4e0e\u9605\u8bfb\u7406\u89e3\u3001\u641c\u7d22\u4e0e\u4fe1\u606f\u68c0\u7d22\uff08IR\uff09\u3001\u5bf9\u8bdd\u7cfb\u7edf\uff0f\u804a\u5929\u673a\u5668\u4eba\uff08Dialog System or Chatbot\uff09\u3001\u6587\u672c\u6458\u8981(\u751f\u6210\u5f0f\u3001\u62bd\u53d6\u5f0f)\u3001\u6587\u672c\u5206\u7c7b\u3001\u5e8f\u5217\u6807\u6ce8\u7b49\u9886\u57df\u3002 \u8fd9\u4e9b\u5de5\u5177\u7528Python\u7f16\u5199\uff0c\u4e5f\u53ef\u7528Java\u7f16\u5199\uff0c\u7531\u516d\u4e2a\u6a21\u5757\u7ec4\u6210\uff0c\u8fd9\u4e9b\u6a21\u5757\u63d0\u4f9b\u6807\u8bb0\u5316\uff0c\u6807\u8bb0\uff0c\u5206\u5757\uff0c\u77ed\u8bed\u63d0\u53d6\uff0c\u8bcd\u5178\u5316\u548c\u8bed\u8a00\u751f\u6210\u529f\u80fd\u3002 \u6b64\u5916\uff0c https://pypi.org/search/?q=nlp \u63d0\u4f9b\u4e86\u5927\u6982500 \u4e2a\u5de6\u53f3\u7684NLP \u4e00\u4e2a\u65b0\u5174\u7684NLP\u5e93\u7c7b\u522b\u6d89\u53ca\u4e3a\u5404\u79cd\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u63d0\u4f9b\u66f4\u9ad8\u7ea7\u522b\u7684\u63a5\u53e3\u3002\u4f8b\u5982\uff0cfinch\uff0c\u63d0\u4f9bTensorFlow\u7684\u8bbf\u95ee\u548c\u6a21\u578b\u7684\u5e93\u3002 \u5176\u6b21\uff0c\u6709\u5404\u79cd\u975e\u5e38\u6709\u8da3\u7684\u5e93\u662f\u8d85\u7ea7\u4e13\u4e1a\u7684\u3002\u4e3e\u51e0\u4e2a\u4f8b\u5b50\uff1aCLTK\u662f\u5e0c\u814a\u8bed\u548c\u62c9\u4e01\u8bed\u7b49\u7ecf\u5178\u8bed\u8a00\u7684\u9996\u9009\u5e93\u3002 PyTextRank\u662fMihalcea\uff082004\uff09\u548c\u5176\u4ed6\u4eba\u63d0\u51fa\u7684TextRank\u7b97\u6cd5/\u65b9\u6cd5\u7684\u76f4\u63a5\u5b9e\u73b0\u3002 newspaper \u53ef\u4ee5\u5e2e\u52a9\u60a8\u4ece\u7f51\u7edc\u4e0a\u6784\u5efa\u548c\u5206\u6790\u62a5\u7eb8\u8bed\u6599\u5e93\u3002\u8fd9\u79cd\uff08\u9ad8\u5ea6\uff09\u4e13\u4e1a\u5316\u7684\u5e93\uff08\u6216\u73b0\u6709\u5e93\u7684\u9644\u52a0\u7ec4\u4ef6\uff0c\u5982textblob-de\uff09\u5728\u4f7f\u7528\u8f83\u5c11\u7684\u201c\u5df2\u77e5\u201d\uff08\u8bed\u8a00\u65f6\u4e5f\u662f\u4e0d\u53ef\u6216\u7f3a\u7684\u3002 \u7b2c\u4e09\uff0c\uff08\u6807\u51c6\uff09'\u6570\u636e\u79d1\u5b66'NLP\u80fd\u529b\u5e93\u3002\u4f8b\u5982\uff0cscikit-learn\u4e0d\u4ec5\u63d0\u4f9b\u4e86\u4e00\u4e9b\u793a\u4f8b\u6570\u636e\uff0c\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e9b\u975e\u5e38\u6709\u7528\u7684\u81ea\u7136\u8bed\u8a00\u5904\u7406\u6a21\u578b\u548c\u7b97\u6cd5\u3002","title":"\u5e38\u7528\u7684NLP\u5de5\u5177\u5e93"},{"location":"pages/nlp/nlpinfo/nltk-basic/","text":"\u81ea\u7136\u8bed\u8a00\u5904\u7406\u5de5\u5177\u5305\u4e4bNLTK \u00b6 \u76ee\u5f55 __ NLTK\u7b80\u4ecb NLTK\u7684\u5b89\u88c5 NLTK\u7684\u4f7f\u7528 \u5207\u5206\uff08\u5206\u8bcd\uff09 \u8bcd\u6027\u6807\u6ce8 \u547d\u540d\u5b9e\u4f53\u8bc6\u522b \u53e5\u6cd5\u5206\u6790 WordNet\u7684\u4f7f\u7528 \u8bcd\u5e72\u63d0\u53d6\uff08stemming\uff09\u4e0e\u8bcd\u5f62\u8fd8\u539f\uff08lemmatization\uff09 \u5bf9\u6587\u672c\u8fdb\u884c\u7b80\u5355\u7684\u5206\u6790 \u5bf9\u6587\u6863\u7528\u8bcd\u8fdb\u884c\u5206\u5e03\u7edf\u8ba1 NLTK\u81ea\u5e26\u7684\u8bed\u6599\u5e93 \u76f8\u5173\u6587\u7ae0: NLTK\u7b80\u4ecb \u00b6 NLTK(Natural Language Toolkit)\u662f\u7531\u5bbe\u5915\u6cd5\u5c3c\u4e9a\u5927\u5b66\u8ba1\u7b97\u673a\u548c\u4fe1\u606f\u79d1\u5b66\u4f7f\u7528python\u8bed\u8a00\u5b9e\u73b0\u7684\u4e00\u79cd\u81ea\u7136\u8bed\u8a00\u5de5\u5177\u5305\uff0c\u5176\u6536\u96c6\u7684\u5927\u91cf\u516c\u5f00\u6570\u636e\u96c6\u3001\u6a21\u578b\u4e0a\u63d0\u4f9b\u4e86\u5168\u9762\u3001\u6613\u7528\u7684\u63a5\u53e3\uff0c\u6db5\u76d6\u4e86\u5206\u8bcd\u3001\u8bcd\u6027\u6807\u6ce8(Part-Of-Speech tag, POS-tag)\u3001\u547d\u540d\u5b9e\u4f53\u8bc6\u522b(Named Entity Recognition, NER)\u3001\u53e5\u6cd5\u5206\u6790(Syntactic Parse)\u7b49\u5404\u9879 NLP \u9886\u57df\u7684\u529f\u80fd\u3002 NLTK\u7684\u5b89\u88c5 \u00b6 NLTK\u7684\u5b89\u88c5\u76f8\u5bf9\u6bd4\u8f83\u7b80\u5355\u3002\u4ec5\u9700\u6267\u884cpip install nltk \u5373\u53ef\u3002\u4f46\u662f\u5b89\u88c5\u540e\u8fd8\u9700\u8981\u8fdb\u4e00\u6b65\u5b89\u88c5\u6240\u9700\u8981\u7684\u4e00\u4e9b\u6570\u636e\uff08\u8bed\u6599\u4e0e\u6a21\u578b\uff09\u3002 \u65b9\u6848\u4e00\uff1a\u4f7f\u7528\u81ea\u5e26\u7684dowmload\u5de5\u5177\u8fdb\u884c\u5b89\u88c5 1 2 import nltk nltk.download() \u4e5f\u53ef\u4ee5\u5355\u72ec\u6307\u5b9a\u67d0\u4e2a\u8d44\u6e90\u8fdb\u884c\u4e0b\u8f7d\uff1a 1 2 import nltk nltk.download(\"comparative_sentences\") \u76ee\u524d\u5305\u542b\u7684\u8d44\u6e90\u53ef\u4ee5\u4ece\uff1a http://www.nltk.org/nltk_data/ \u67e5\u8be2\u5230\u3002\u4e0b\u8f7d\u8fc7\u7a0b\u4e2d\u4e5f\u53ef\u4ee5\u8bbe\u7f6e\u4ee3\u7406\u6765\u63d0\u5347\u4e0b\u8f7d\u901f\u5ea6\uff1a 1 2 3 import nltk nltk.set_proxy('http://proxy', ('USERNAME', 'PASSWORD')) nltk.download(\"comparative_sentences\") \u65b9\u6848\u4e8c\uff1a\u79bb\u7ebf\u4e0b\u8f7d\u597d\u540e\u653e\u5728\u6307\u5b9a\u76ee\u5f55 \u76f4\u63a5\u4ece https://github.com/nltk/nltk_data \u4e0b\u8f7d\u6570\u636e\uff0c\u5176\u4e2dpackages\u6587\u4ef6\u4e0b\u7684\u5185\u5bb9\u5373\u4e3a\u6211\u4eec\u60f3\u8981\u7684\u6570\u636e\uff0c\u5c06\u6570\u636e\u653e\u5165\u5982\u4e0b\u4efb\u4f55\u4e00\u4e2a\u6587\u4ef6\u5939\u4e0b\u5373\u53ef\u3002 1 2 3 import nltk for path in nltk.data.path: print(path) 1 2 3 4 5 6 7 8 C:\\Users\\qw.TCENT/nltk_data D:\\CodeHub\\NLP\\venv\\nltk_data D:\\CodeHub\\NLP\\venv\\share\\nltk_data D:\\CodeHub\\NLP\\venv\\lib\\nltk_data C:\\Users\\qw.TCENT\\AppData\\Roaming\\nltk_data C:\\nltk_data D:\\nltk_data E:\\nltk_data \u6ce8\u610f\uff0c\u5c06\u6570\u636e\u653e\u5165\u6587\u4ef6\u5939\u65f6\uff0c\u9700\u8981\u5c06\u5404\u4e2a\u76ee\u5f55\u4e0b\u7684.zip\u6587\u4ef6\u89e3\u538b\uff0c\u5426\u5219\u4e0d\u80fd\u6b63\u5e38\u7684\u8bfb\u53d6\u5230\u6570\u636e\u3002 NLTK\u7684\u4f7f\u7528 \u00b6 \u5207\u5206\uff08\u5206\u8bcd\uff09 \u00b6 \u5207\u5206\u53ef\u4ee5\u5206\u4e3a\u53e5\u5b50\u5207\u5206\u548c\u8bcd\u5207\u5206\uff0cnltk\u9ed8\u8ba4\u7528PunktSentenceTokenizer\u5206\u53e5\uff0c\u7528\u57fa\u4e8e\u5bbe\u5dde\u6811\u5e93\u5206\u8bcd\u89c4\u8303\u7684TreebankWordTokenizer\u5206\u8bcd\u3002\u5177\u4f53\u7528\u4ee5\u4e0b\u547d\u4ee4\u505a\u5230\uff1a 1 2 3 4 5 6 7 import nltk EXAMPLE_TEXT = \"Hello World! Isn't it good to see you? Thanks for buying this book.\" sentences = nltk.sent_tokenize(EXAMPLE_TEXT) print(sentences) # \u5206\u53e5 tokens = nltk.word_tokenize(EXAMPLE_TEXT) print(tokens) # \u5206\u8bcd \u9ed8\u8ba4\u7684\u5206\u8bcd\u5728\u9047\u5230Isn\u2019t\u8fd9\u6837\u7684\u7f29\u5199(contraction)\u65f6\u4f1a\u5206\u6210Is\u548cn\u2019t\uff0c\u5982\u679c\u4e0d\u559c\u6b22\uff0c\u53ef\u4ee5\u7528dir(nltk.tokenize)\u67e5\u770b\u522b\u7684\u5206\u8bcd\u5668\u5e76\u4f7f\u7528\u3002 1 2 3 for tokenize in dir(nltk.tokenize): if \"Tokenizer\" in tokenize: print(tokenize) \u76ee\u524d\u652f\u6301\u7684\u5206\u8bcd\u5668\uff1a BlanklineTokenizer\uff1a\u662fRegexpTokenizer\u7684\u5b50\u7c7b\uff0c\u5185\u90e8\u9884\u8bbe\u4e86\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0fr\u2019\\s \\n\\s \\n\\s*\u2019\u8fdb\u884c\u5206\u5272\u3002 LineTokenizer\uff1a\u5c06\u6587\u672c\u5207\u5206\u4e3a\u884c\u6765\u6267\u884c\u5207\u5206 MWETokenizer\uff1a\u8be5\u65b9\u6cd5\u53ef\u5bf9\u5df2\u7ecf\u5148\u4fdd\u7559\u7684\u4e00\u4e9b\u77ed\u8bed\uff0c\u6216\u8005\u7ec4\u5408\uff0c\u8fdb\u884c\u91cd\u7ec4 PunktSentenceTokenizer\uff1aKiss&Strunk\uff082006\uff09\u63d0\u51fa\u7684\u65e0\u76d1\u7763\u7b97\u6cd5 RegexpTokenizer\uff1a\u5b9e\u4f8b\u5316RegexpTokenizer \u4f1a\u6309\u7167\u6b63\u5219\u8868\u8fbe\u5f0f\u8fdb\u884cfindall() ReppTokenizer\uff1a SExprTokenizer\uff1a\u53ef\u4ee5\u5c06\u5b57\u7b26\u4e32\u540c\u65f6\u6309\u7167\u7a7a\u683c\u548c\u62ec\u53f7\u5207\u5206 SpaceTokenizer\uff1a\u6309\u7a7a\u683c\u5206\u8bcd SyllableTokenizer TabTokenizer\uff1a\u6839\u636etab\u8fdb\u884c\u5207\u5206 TextTilingTokenizer ToktokTokenizer\uff1a TreebankWordTokenizer\uff1a\u901a\u8fc7\u5206\u79bb\u7f29\u7565\u8bcd\u6765\u5b9e\u73b0\u5207\u5206 TweetTokenizer\uff1a\u6309\u7a7a\u683c\u8fdb\u884c\u5206\u8bcd\uff0c\u540c\u65f6\u9488\u5bf9\u63a8\u6587\u4e00\u4e9b\u7279\u6027\uff0c\u53bb\u9664@\u7528\u6237\u540d\uff0c\u4fdd\u7559\u8868\u60c5\u7b49\u4e00\u4e9b\u7279\u6b8a\u7b26\u53f7\u3002 WhitespaceTokenizer\uff1a\u662fRegexpTokenizer\u7684\u5b50\u7c7b \u901a\u8fc7\u7a7a\u683c\u3001\u95f4\u9694\u3001\u6362\u884c\u7b49\u6765\u5b8c\u6210\uff0c\u5185\u90e8\u9884\u8bbe\u4e86\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0fr\u2019\\s+\u2019\u8fdb\u884c\u5206\u5272 WordPunctTokenizer\uff1a\u901a\u8fc7\u5c06\u6807\u70b9\u8f6c\u5316\u4e3a\u4e00\u4e2a\u5168\u65b0\u7684\u6807\u8bc6\u7b26\u6765\u5b9e\u73b0\u5207\u5206 \u5907\u6ce8\uff1a\u4e0a\u9762\u63d0\u5230\u7684\u65b9\u6cd5\u4e0d\u652f\u6301\u4e2d\u6587\u3002 \u505c\u7528\u8bcd \u82f1\u6587\u4e2d\u7684\u505c\u7528\u8bcd\u5982 \u201cthe\u201d\uff0c\u201cis\u201d\uff0c\u201care\u201d \u7b49\u7b49\u3002\u5728\u81ea\u7136\u8bed\u8a00\u5904\u7406\uff08NLP\uff09\u4e2d\u6ca1\u6709\u901a\u7528\u7684\u505c\u7528\u8bcd\u5217\u8868\uff0c\u7136\u800c\u8fd9\u91cc\uff0c\u5728 NLTK \u6a21\u5757\u6709\u5176\u81ea\u5e26\u7684\u505c\u7528\u8bcd\u5217\u8868\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import nltk from nltk.corpus import stopwords EXAMPLE_TEXT = \"Hello World! Isn't it good to see you? Thanks for buying this book.\" stop_words = set(stopwords.words('english')) words = nltk.word_tokenize(EXAMPLE_TEXT) words_filtered = [] for w in words: if w not in stop_words: words_filtered.append(w) print(words_filtered) \u8bcd\u6027\u6807\u6ce8 \u00b6 \u5bf9\u53e5\u5b50\u8fdb\u884c\u8bcd\u6027\u6807\u6ce8\u9700\u8981\u5148\u8fdb\u884c\u5207\u5206\u3002\u9ed8\u8ba4\u4f7f\u7528\u7684\u6807\u8bb0\u683c\u5f0f\u662f\u5bbe\u5dde\u6811\u5e93\u4f7f\u7528\u7684\uff0c\u5177\u4f53\u89c1\u6b64\uff1a Alphabetical list of part-of-speech tags used in the Penn Treebank Project \u4e5f\u53ef\u76f4\u63a5\u4f7f\u7528\u201cnltk.help.upenn_tagset()\u201d\u67e5\u770b\u5b98\u65b9\u82f1\u6587\u8bf4\u660e\u3002 1 2 3 4 5 6 7 import nltk EXAMPLE_TEXT = \"Hello World! Isn't it good to see you? Thanks for buying this book.\" tokens = nltk.word_tokenize(EXAMPLE_TEXT) tagged = nltk.pos_tag(tokens) print(tagged[0:10]) # \u8bcd\u6027\u6807\u6ce8 \u547d\u540d\u5b9e\u4f53\u8bc6\u522b \u00b6 \u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u7c7b\u4f3c\u4e8e\u4e00\u79cdchunking\uff0c\u53ef\u4ee5\u628a\u662f\u547d\u540d\u5b9e\u4f53\u7684\u90e8\u5206\u62ec\u8d77\u6765\uff0c\u9700\u8981\u5728\u6807\u8bb0\u7684\u6587\u672c\u57fa\u7840\u4e0a\u8fdb\u884c\u3002 1 2 3 4 5 6 7 8 import nltk EXAMPLE_TEXT = \"I am very excited about the next generation of Apple products.\" tokens = nltk.word_tokenize(EXAMPLE_TEXT) tagged = nltk.pos_tag(tokens) entities = nltk.chunk.ne_chunk(tagged) print(entities) \u53e5\u6cd5\u5206\u6790 \u00b6 NLTK\u6709\u81ea\u5e26\u5bbe\u5dde\u6811\u5e93\u7b49\u6811\u5e93\uff0c\u4f46\u662f\u81ea\u8eab\u6ca1\u6709\u5bf9\u751f\u6587\u672c\u8fdb\u884c\u53e5\u6cd5\u5206\u6790\u7684\u80fd\u529b\uff0c\u9700\u8981\u8c03\u7528stanford parser\u7b49\u5916\u90e8\u5de5\u5177\u3002 1 2 3 4 from nltk.corpus import treebank t = treebank.parsed_sents('wsj_0001.mrg')[0] t.draw() tree\u7c7b\u6709\u5f88\u591a\u65b9\u6cd5\u53ef\u4ee5\u8c03\u7528\uff0c\u6bd4\u5982\u53ef\u4ee5\u7528fromstring\u4ece\u6587\u672c\u751f\u6210tree\u7c7b\u3002\u5982\u4f55\u904d\u5386tree\u53ef\u4ee5\u89c1 nltk\u7684\u5b98\u65b9\u6559\u7a0b \u3002 WordNet\u7684\u4f7f\u7528 \u00b6 WordNet\u53ef\u4ee5\u88ab\u770b\u4f5c\u662f\u4e00\u4e2a\u540c\u4e49\u8bcd\u8bcd\u5178\u3002\u91cc\u9762\u7684\u8bcd\u90fd\u662f\u4ee5\u540c\u4e49\u8bcd\u96c6\u5408\uff08synset\uff09\u4f5c\u4e3a\u57fa\u672c\u5efa\u6784\u5355\u4f4d\u8fdb\u884c\u7ec4\u7ec7\u3002\u6211\u4eec\u53ef\u4ee5\u7528\u4ee5\u4e0b\u65b9\u6cd5\u67e5\u770b\u67d0\u4e2a\u8bcd\u7684\u8fd1\u4e49\u8bcd\uff0c\u5e76\u53ef\u4ee5\u7528\u6765\u5224\u65ad\u8fd9\u4e2a\u8bcd\u5b58\u4e0d\u5b58\u5728\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 from nltk.corpus import wordnet # \u7ed9\u5b9a\u8bcd\u7684\u5b9a\u4e49\u548c\u4f8b\u53e5 syn = wordnet.synsets(\"pain\") print(syn[0].definition()) print(syn[0].examples()) # \u540c\u4e49\u8bcd synonyms = [] for syn in wordnet.synsets('Computer'): for lemma in syn.lemmas(): synonyms.append(lemma.name()) print(synonyms) # \u53cd\u4e49\u8bcd antonyms = [] for syn in wordnet.synsets(\"small\"): for l in syn.lemmas(): if l.antonyms(): antonyms.append(l.antonyms()[0].name()) print(antonyms) \u8bcd\u5e72\u63d0\u53d6\uff08stemming\uff09\u4e0e\u8bcd\u5f62\u8fd8\u539f\uff08lemmatization\uff09 \u00b6 \u8bed\u8a00\u5f62\u6001\u5b66\u548c\u4fe1\u606f\u68c0\u7d22\u91cc\uff0c\u8bcd\u5e72\u63d0\u53d6\u662f\u53bb\u9664\u8bcd\u7f00\u5f97\u5230\u8bcd\u6839\u7684\u8fc7\u7a0b\uff0c\u4f8b\u5982working\u7684\u8bcd\u5e72\u4e3awork\u3002\u641c\u7d22\u5f15\u64ce\u5728\u7d22\u5f15\u9875\u9762\u65f6\u5c31\u4f1a\u4f7f\u7528\u8fd9\u79cd\u6280\u672f\uff0c\u6240\u4ee5\u5f88\u591a\u4eba\u4e3a\u76f8\u540c\u7684\u5355\u8bcd\u5199\u51fa\u4e0d\u540c\u7684\u7248\u672c\u3002\u8bcd\u5e72\u63d0\u53d6\u7684\u7b97\u6cd5\u6709\u5f88\u591a\uff0c\u4f46\u6700\u5e38\u7528\u7684\u7b97\u6cd5\u662f Porter \u63d0\u53d6\u7b97\u6cd5\u3002NLTK \u6709\u4e00\u4e2a PorterStemmer \u7c7b\uff0c\u4f7f\u7528\u7684\u5c31\u662f Porter \u63d0\u53d6\u7b97\u6cd5\u3002 1 2 3 4 5 from nltk.stem import PorterStemmer stemmer = PorterStemmer() print(stemmer.stem('working')) print(stemmer.stem('worked')) \u8fd8\u6709\u5176\u4ed6\u4e00\u4e9b\u63d0\u53d6\u7b97\u6cd5\uff0c\u5982 Lancaster \u63d0\u53d6\u7b97\u6cd5\u3002\u8fd9\u4e2a\u7b97\u6cd5\u7684\u8f93\u51fa\u540c Porter \u7b97\u6cd5\u7684\u7ed3\u679c\u5728\u51e0\u4e2a\u5355\u8bcd\u4e0a\u4e0d\u540c\u3002\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u4ed6\u4eec\u4e24\u4e2a\u7b97\u6cd5\u6765\u67e5\u770b\u6709\u54ea\u4e9b\u4e0d\u540c\u7ed3\u679c\u3002 \u8bcd\u5f62\u8fd8\u539f\uff08lemmatization\uff09\u5219\u4f1a\u628a\u8bcd\u8f6c\u6362\u4e3a\u6700\u57fa\u672c\u7684\u8bcd\uff0c\u65b9\u6cd5\u5982\u4e0b\uff1a 1 2 3 4 5 6 from nltk.stem import WordNetLemmatizer lemmatizer = WordNetLemmatizer() print(lemmatizer.lemmatize('cooking')) print(lemmatizer.lemmatize('cooking', pos='v')) print(lemmatizer.lemmatize('cookbooks')) \u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0clemma\u9700\u8981\u6839\u636e\u8bcd\u6027\u6765\u8fdb\u884c\u8fd8\u539f\uff0c\u6bd4\u5982cooking\u4f5c\u4e3a\u540d\u8bcd\uff0c\u5b83\u672c\u8eab\u5c31\u662f\u4e00\u4e2alemma\uff0c\u800c\u505a\u52a8\u8bcd\u4f7f\u7528\u65f6lemma\u662fcook\u3002\u6240\u4ee5\u50cf\u65af\u5766\u798fCoreNLP\u8fdb\u884c\u8bcd\u5f62\u8fd8\u539f\u65f6\u90fd\u9700\u8981\u5148\u8fdb\u884c\u8bcd\u6027\u6807\u6ce8\u3002 \u8bcd\u5e72\u63d0\u53d6\u548c\u8bcd\u5f62\u8fd8\u539f\u7684\u4e3b\u8981\u5dee\u522b\u8fd8\u53ef\u4ee5\u4ece\u4ee5\u4e0b\u4f8b\u5b50\u4e2d\u770b\u51fa\uff1a 1 2 3 4 5 6 7 from nltk.stem import PorterStemmer, WordNetLemmatizer stemmer = PorterStemmer() lemmatizer = WordNetLemmatizer() print(stemmer.stem('believes')) # believ print(lemmatizer.lemmatize('believes')) # belief \u8bcd\u5e72\u63d0\u53d6\u7684\u65b9\u6cd5\u53ef\u4ee5\u5728\u4e0d\u77e5\u9053\u8bed\u5883\u7684\u60c5\u51b5\u4e0b\u5bf9\u8bcd\u6c47\u4f7f\u7528\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5b83\u76f8\u8f83\u8bcd\u5f62\u8fd8\u539f\u65b9\u6cd5\u901f\u5ea6\u66f4\u5feb\u4f46\u51c6\u786e\u7387\u66f4\u4f4e\u3002\u5728\u6211\u770b\u6765\uff0c\u8bcd\u5f62\u8fd8\u539f\u6bd4\u63d0\u53d6\u8bcd\u5e72\u7684\u65b9\u6cd5\u66f4\u597d\u3002\u8bcd\u5f62\u8fd8\u539f\uff0c\u5982\u679c\u5b9e\u5728\u65e0\u6cd5\u8fd4\u56de\u8fd9\u4e2a\u8bcd\u7684\u53d8\u5f62\uff0c\u4e5f\u4f1a\u8fd4\u56de\u53e6\u4e00\u4e2a\u771f\u6b63\u7684\u5355\u8bcd;\u8fd9\u4e2a\u5355\u8bcd\u53ef\u80fd\u662f\u4e00\u4e2a\u540c\u4e49\u8bcd\uff0c\u4f46\u4e0d\u7ba1\u600e\u6837\u8fd9\u662f\u4e00\u4e2a\u771f\u6b63\u7684\u5355\u8bcd\u3002\u5f53\u6709\u65f6\u5019\uff0c\u4f60\u4e0d\u5173\u5fc3\u51c6\u786e\u5ea6\uff0c\u9700\u8981\u7684\u53ea\u662f\u901f\u5ea6\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8bcd\u5e72\u63d0\u53d6\u7684\u65b9\u6cd5\u66f4\u597d\u3002 \u5bf9\u6587\u672c\u8fdb\u884c\u7b80\u5355\u7684\u5206\u6790 \u00b6 nltk.text.Text() nltk.text.Text()\u7c7b\u7528\u4e8e\u5bf9\u6587\u672c\u8fdb\u884c\u521d\u7ea7\u7684\u7edf\u8ba1\u4e0e\u5206\u6790\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a\u8bcd\u7684\u5217\u8868\u4f5c\u4e3a\u53c2\u6570\u3002Text\u7c7b\u63d0\u4f9b\u4e86\u4e0b\u5217\u65b9\u6cd5\u3002 Text(words) \u5bf9\u8c61\u6784\u9020 concordance(word, width=79, lines=25)\uff1a\u663e\u793aword\u51fa\u73b0\u7684\u4e0a\u4e0b\u6587 common_contexts(words)\uff1a\u663e\u793awords\u51fa\u73b0\u7684\u76f8\u540c\u6a21\u5f0f similar(word)\uff1a\u663e\u793aword\u7684\u76f8\u4f3c\u8bcd collocations(num=20, window_size=2)\uff1a\u663e\u793a\u6700\u5e38\u89c1\u7684\u4e8c\u8bcd\u642d\u914d count(word)\uff1aword\u51fa\u73b0\u7684\u8bcd\u6570 dispersion_plot(words)\uff1a\u7ed8\u5236words\u4e2d\u6587\u6863\u4e2d\u51fa\u73b0\u7684\u4f4d\u7f6e\u56fe vocab()\uff1a\u8fd4\u56de\u6587\u7ae0\u53bb\u91cd\u7684\u8bcd\u5178 \u793a\u4f8b1\uff1a 1 2 3 4 5 6 7 8 9 10 import nltk import jieba novel_data = open('data/\u4e09\u4f53(\u5218\u6148\u6b23).txt', encoding='utf-8').read() text = nltk.text.Text(jieba.lcut(novel_data)) print(text.concordance(word='\u4e09\u4f53', width=20, lines=10)) # \u6253\u5370\u5bbd\u5ea620\u5b57\u7b26\uff0c\u517110\u884c\u7684\u4e0a\u4e0b\u6587 print(text.similar(word='\u5730\u7403', num=10)) print(text.common_contexts(['\u4e16\u754c', '\u5b87\u5b99'])) # \u591a\u4e2a\u8bcd\u7684\u4e0a\u4e0b\u6587 print(text.count(word='\u4e09\u4f53')) # \u7edf\u8ba1\u8bcd\u8bed\u9891\u6570 text.generate(text_seed=['\u5730\u7403', '\u4e09\u4f53'], length=30) # \u9020\u53e5 \u793a\u4f8b2\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 import nltk import jieba from pylab import mpl mpl.rcParams['font.sans-serif'] = ['FangSong'] # \u6307\u5b9a\u9ed8\u8ba4\u5b57\u4f53 mpl.rcParams['axes.unicode_minus'] = False # \u89e3\u51b3\u4fdd\u5b58\u56fe\u50cf\u662f\u8d1f\u53f7'-'\u663e\u793a\u4e3a\u65b9\u5757\u7684\u95ee\u9898 words = ['\u6c6a\u6dfc', '\u53f6\u6587\u6d01', '\u7ae0\u5317\u6d77', '\u7533\u7389\u83f2', '\u7f57\u8f91', '\u53f2\u5f3a', '\u5e84\u989c', '\u7ef4\u5fb7', '\u7a0b\u5fc3', '\u827eAA', '\u4e91\u5929\u660e'] for w in words: jieba.add_word(w) # \u6dfb\u52a0\u81ea\u5b9a\u4e49\u8bcd\u5178 novel_data = open('data/\u4e09\u4f53(\u5218\u6148\u6b23).txt', encoding='utf-8').read() text = nltk.text.Text(jieba.lcut(novel_data)) text.dispersion_plot(words) \u753b\u51fa\u4e09\u4f53\u4eba\u7269\u51fa\u73b0\u4f4d\u7f6e\uff0c\u6a2a\u5750\u6807\u4e3a\u6bcf\u4e2a\u8bcd\u51fa\u73b0\u5728text\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e\u4ece\u56fe\u4e2d\u57fa\u672c\u4e0a\u53ef\u4ee5\u770b\u51fa\u6bcf\u4e2a\u4eba\u7269\u7684\u51fa\u73b0\u5728\u5c0f\u8bf4\u4e2d\u7684\u987a\u5e8f\u3002 \u6c6a\u6dfc\u548c\u53f6\u6587\u6d01\u51fa\u73b0\u5728\u300a\u4e09\u4f53\u300b\u5f00\u5934 \u7f57\u8f91\u51e0\u4e4e\u8d2f\u7a7f\u300a\u4e09\u4f53\u300b \u7ef4\u5fb7\u3001\u7a0b\u5fc3\u3001\u4e91\u5929\u660e\u51fa\u73b0\u5728\u300a\u4e09\u4f53\u300b\u672b\u5c3e nltk.text.TextCollection nltk.text.TextCollection\u7c7b\u662fText\u7684\u96c6\u5408\uff0c\u63d0\u4f9b\u4e0b\u5217\u65b9\u6cd5 text.TextCollection([text1,text2,])\uff1a\u5bf9\u8c61\u6784\u9020 idf(term)\uff1a\u8ba1\u7b97\u8bcdterm\u5728\u8bed\u6599\u5e93\u4e2d\u7684\u9006\u6587\u6863\u9891\u7387\uff0c\u5373log\u603b\u6587\u7ae0\u6570\u6587\u4e2d\u51fa\u73b0term\u7684\u6587\u7ae0\u6570log\u603b\u6587\u7ae0\u6570\u6587\u4e2d\u51fa\u73b0term\u7684\u6587\u7ae0\u6570 tf(term,text)\uff1a\u7edf\u8ba1term\u5728text\u4e2d\u7684\u8bcd\u9891 tf_idf(term,text)\uff1a\u8ba1\u7b97term\u5728\u53e5\u5b50\u4e2d\u7684tf_idf,\u5373tf*idf \u793a\u4f8b3\uff1a\u8ba1\u7b97\u67d0\u4e2a\u8bcd\u4e0e\u5176\u4ed6\u6240\u6709\u8bcd\u7684\u76f8\u4f3c\u5ea6 1 2 3 4 5 6 7 8 9 import nltk import jieba novel_data = open('data/\u4e09\u4f53(\u5218\u6148\u6b23).txt', encoding='utf-8').read() content_index = nltk.text.ContextIndex(jieba.lcut(novel_data)) similarity_scores = content_index.word_similarity_dict(word='\u4e09\u4f53') for key, value in similarity_scores.items(): if value > 0.05: print(key, value) \u793a\u4f8b4\uff1a\u8ba1\u7b97TF-IDF 1 2 3 4 5 6 7 8 9 10 11 import nltk import jieba novel_data = open('data/\u4e09\u4f53(\u5218\u6148\u6b23).txt', encoding='utf-8').read() word_list = jieba.lcut(novel_data) text = \"\".join(word_list) my_text = nltk.text.TextCollection(word_list) print(my_text.idf(\"\u4e09\u4f53\")) print(my_text.tf(\"\u4e09\u4f53\", text)) print(my_text.tf_idf(\"\u4e09\u4f53\", text)) \u5bf9\u6587\u6863\u7528\u8bcd\u8fdb\u884c\u5206\u5e03\u7edf\u8ba1 \u00b6 FreqDist\u7c7b \u8fd9\u4e2a\u7c7b\u4e3b\u8981\u8bb0\u5f55\u4e86\u6bcf\u4e2a\u8bcd\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u6839\u636e\u7edf\u8ba1\u6570\u636e\u751f\u6210\u8868\u683c\uff0c\u6216\u7ed8\u56fe\u3002\u5176\u7ed3\u6784\u5f88\u7b80\u5355\uff0c\u7528\u4e00\u4e2a\u6709\u5e8f\u8bcd\u5178\u8fdb\u884c\u5b9e\u73b0\u3002\u6240\u4ee5dict\u7c7b\u578b\u7684\u65b9\u6cd5\u5728\u6b64\u7c7b\u4e5f\u662f\u9002\u7528\u7684\u3002\u5982keys()\u7b49\u3002 B()\uff1a\u8fd4\u56de\u8bcd\u5178\u7684\u957f\u5ea6 plot(title,cumulative=False)\uff1a\u7ed8\u5236\u9891\u7387\u5206\u5e03\u56fe\uff0c\u82e5cumu\u4e3aTrue\uff0c\u5219\u662f\u7d2f\u79ef\u9891\u7387\u5206\u5e03\u56fe tabulate()\uff1a\u751f\u6210\u9891\u7387\u5206\u5e03\u7684\u8868\u683c\u5f62\u5f0f most_common()\uff1a\u8fd4\u56de\u51fa\u73b0\u6b21\u6570\u6700\u9891\u7e41\u7684\u8bcd\u4e0e\u9891\u5ea6 hapaxes()\uff1a\u8fd4\u56de\u53ea\u51fa\u73b0\u8fc7\u4e00\u6b21\u7684\u8bcd \u793a\u4f8b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 import nltk import jieba from pylab import mpl mpl.rcParams['font.sans-serif'] = ['FangSong'] # \u6307\u5b9a\u9ed8\u8ba4\u5b57\u4f53 mpl.rcParams['axes.unicode_minus'] = False # \u89e3\u51b3\u4fdd\u5b58\u56fe\u50cf\u662f\u8d1f\u53f7'-'\u663e\u793a\u4e3a\u65b9\u5757\u7684\u95ee\u9898 novel_data = open('data/\u4e09\u4f53(\u5218\u6148\u6b23).txt', encoding='utf-8').read() stopwords = open('data/CNENstopwords.txt', encoding='utf-8').read().splitlines() word_list = jieba.lcut(novel_data) new_list = [] for w in word_list: if w not in stopwords: new_list.append(w) fdist = nltk.FreqDist(new_list) print(fdist.keys()) # \u6253\u5370\u8bcd\u8bed\u5217\u8868 print(fdist.items()) # \u6253\u5370\u8bcd\u8bed\u4e0e\u9891\u6570\u5bf9 print(fdist.most_common(20)) # \u6253\u5370\u9891\u6570\u6700\u9ad8\u7684\u8bcd print(fdist.N()) # \u8bcd\u8bed\u603b\u6570 print(fdist.max()) # \u6253\u5370\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u8bcd\u8bed print(fdist['\u4e09\u4f53']) # \u8f93\u51fa\u67d0\u4e2a\u8bcd\u7684\u51fa\u73b0\u6b21\u6570 print(fdist.freq('\u4e09\u4f53')) # \u8ba1\u7b97\u8bcd\u9891 fdist.plot(20, cumulative=False) # \u7ed8\u5236\u524d20\u4e2a\u8bcd\u9891\u6570\u7d2f\u8ba1\u56fe NLTK\u81ea\u5e26\u7684\u8bed\u6599\u5e93 \u00b6 \u5728nltk.corpus\u5305\u4e0b\uff0c\u63d0\u4f9b\u4e86\u51e0\u7c7b\u6807\u6ce8\u597d\u7684\u8bed\u6599\u5e93\uff1a gutenberg\uff1a\u4e00\u4e2a\u6709\u82e5\u5e72\u4e07\u90e8\u7684\u5c0f\u8bf4\u8bed\u6599\u5e93\uff0c\u591a\u662f\u53e4\u5178\u4f5c\u54c1 webtext\uff1a\u6536\u96c6\u7684\u7f51\u7edc\u5e7f\u544a\u7b49\u5185\u5bb9 nps_chat\uff1a\u6709\u4e0a\u4e07\u6761\u804a\u5929\u6d88\u606f\u8bed\u6599\u5e93\uff0c\u5373\u65f6\u804a\u5929\u6d88\u606f\u4e3a\u4e3b brown\uff1a\u4e00\u4e2a\u767e\u4e07\u8bcd\u7ea7\u7684\u82f1\u8bed\u8bed\u6599\u5e93\uff0c\u6309\u6587\u4f53\u8fdb\u884c\u5206\u7c7b reuters\uff1a\u8def\u900f\u793e\u8bed\u6599\u5e93\uff0c\u4e0a\u4e07\u7bc7\u65b0\u95fb\u65b9\u6863\uff0c\u7ea6\u67091\u767e\u4e07\u5b57\uff0c\u520690\u4e2a\u4e3b\u9898\uff0c\u5e76\u5206\u4e3a\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u4e24\u7ec4 inaugural\uff1a\u6f14\u8bb2\u8bed\u6599\u5e93\uff0c\u51e0\u5341\u4e2a\u6587\u672c\uff0c\u90fd\u662f\u603b\u7edf\u6f14\u8bf4 \u8bed\u6599\u5e93\u5904\u7406\uff1a fileids()\uff1a\u8fd4\u56de\u8bed\u6599\u5e93\u4e2d\u6587\u4ef6\u540d\u5217\u8868 fileids[categories]\uff1a\u8fd4\u56de\u6307\u5b9a\u7c7b\u522b\u7684\u6587\u4ef6\u540d\u5217\u8868 raw(fid=[c1,c2])\uff1a\u8fd4\u56de\u6307\u5b9a\u6587\u4ef6\u540d\u7684\u6587\u672c\u5b57\u7b26\u4e32 raw(catergories=[])\uff1a\u8fd4\u56de\u6307\u5b9a\u5206\u7c7b\u7684\u539f\u59cb\u6587\u672c sents(fid=[c1,c2])\uff1a\u8fd4\u56de\u6307\u5b9a\u6587\u4ef6\u540d\u7684\u8bed\u53e5\u5217\u8868 sents(catergories=[c1,c2])\uff1a\u6309\u5206\u7c7b\u8fd4\u56de\u8bed\u53e5\u5217\u8868 words(filename)\uff1a\u8fd4\u56de\u6307\u5b9a\u6587\u4ef6\u540d\u7684\u5355\u8bcd\u5217\u8868 words(catogories=[])\uff1a\u8fd4\u56de\u6307\u5b9a\u5206\u7c7b\u7684\u5355\u8bcd\u5217\u8868 \u53c2\u8003\u94fe\u63a5\uff1a https://github.com/nltk/nltk/wiki https://www.osgeo.cn/nltk/ Python \u6570\u636e\u79d1\u5b66\u5165\u95e8\u6559\u7a0b\uff1aNLTK \u76f8\u5173\u6587\u7ae0: \u00b6 Word2vec\u5b9e\u6218\uff1a\u4e2d\u6587\u7ef4\u57fa\u767e\u79d1\u8bed\u6599\u8bad\u7ec3 Python\u89e3\u6790\u62fc\u97f3\u8f93\u5165\u6cd5\u8bcd\u5e93 Facebook\u8bcd\u5411\u91cf\u5de5\u5177FastText \u817e\u8bafAI Lab\u4e2d\u6587\u8bcd\u5411\u91cf\u6570\u636e\u4f7f\u7528 \u81ea\u7136\u8bed\u8a00\u5904\u7406\u4e4b\u81ea\u52a8\u6458\u8981","title":"\u81ea\u7136\u8bed\u8a00\u5904\u7406\u5de5\u5177\u5305\u4e4bNLTK"},{"location":"pages/nlp/nlpinfo/nltk-basic/#\u81ea\u7136\u8bed\u8a00\u5904\u7406\u5de5\u5177\u5305\u4e4bNLTK","text":"\u76ee\u5f55 __ NLTK\u7b80\u4ecb NLTK\u7684\u5b89\u88c5 NLTK\u7684\u4f7f\u7528 \u5207\u5206\uff08\u5206\u8bcd\uff09 \u8bcd\u6027\u6807\u6ce8 \u547d\u540d\u5b9e\u4f53\u8bc6\u522b \u53e5\u6cd5\u5206\u6790 WordNet\u7684\u4f7f\u7528 \u8bcd\u5e72\u63d0\u53d6\uff08stemming\uff09\u4e0e\u8bcd\u5f62\u8fd8\u539f\uff08lemmatization\uff09 \u5bf9\u6587\u672c\u8fdb\u884c\u7b80\u5355\u7684\u5206\u6790 \u5bf9\u6587\u6863\u7528\u8bcd\u8fdb\u884c\u5206\u5e03\u7edf\u8ba1 NLTK\u81ea\u5e26\u7684\u8bed\u6599\u5e93 \u76f8\u5173\u6587\u7ae0:","title":"\u81ea\u7136\u8bed\u8a00\u5904\u7406\u5de5\u5177\u5305\u4e4bNLTK"},{"location":"pages/nlp/nlpinfo/nltk-basic/#NLTK\u7b80\u4ecb","text":"NLTK(Natural Language Toolkit)\u662f\u7531\u5bbe\u5915\u6cd5\u5c3c\u4e9a\u5927\u5b66\u8ba1\u7b97\u673a\u548c\u4fe1\u606f\u79d1\u5b66\u4f7f\u7528python\u8bed\u8a00\u5b9e\u73b0\u7684\u4e00\u79cd\u81ea\u7136\u8bed\u8a00\u5de5\u5177\u5305\uff0c\u5176\u6536\u96c6\u7684\u5927\u91cf\u516c\u5f00\u6570\u636e\u96c6\u3001\u6a21\u578b\u4e0a\u63d0\u4f9b\u4e86\u5168\u9762\u3001\u6613\u7528\u7684\u63a5\u53e3\uff0c\u6db5\u76d6\u4e86\u5206\u8bcd\u3001\u8bcd\u6027\u6807\u6ce8(Part-Of-Speech tag, POS-tag)\u3001\u547d\u540d\u5b9e\u4f53\u8bc6\u522b(Named Entity Recognition, NER)\u3001\u53e5\u6cd5\u5206\u6790(Syntactic Parse)\u7b49\u5404\u9879 NLP \u9886\u57df\u7684\u529f\u80fd\u3002","title":"NLTK\u7b80\u4ecb"},{"location":"pages/nlp/nlpinfo/nltk-basic/#NLTK\u7684\u5b89\u88c5","text":"NLTK\u7684\u5b89\u88c5\u76f8\u5bf9\u6bd4\u8f83\u7b80\u5355\u3002\u4ec5\u9700\u6267\u884cpip install nltk \u5373\u53ef\u3002\u4f46\u662f\u5b89\u88c5\u540e\u8fd8\u9700\u8981\u8fdb\u4e00\u6b65\u5b89\u88c5\u6240\u9700\u8981\u7684\u4e00\u4e9b\u6570\u636e\uff08\u8bed\u6599\u4e0e\u6a21\u578b\uff09\u3002 \u65b9\u6848\u4e00\uff1a\u4f7f\u7528\u81ea\u5e26\u7684dowmload\u5de5\u5177\u8fdb\u884c\u5b89\u88c5 1 2 import nltk nltk.download() \u4e5f\u53ef\u4ee5\u5355\u72ec\u6307\u5b9a\u67d0\u4e2a\u8d44\u6e90\u8fdb\u884c\u4e0b\u8f7d\uff1a 1 2 import nltk nltk.download(\"comparative_sentences\") \u76ee\u524d\u5305\u542b\u7684\u8d44\u6e90\u53ef\u4ee5\u4ece\uff1a http://www.nltk.org/nltk_data/ \u67e5\u8be2\u5230\u3002\u4e0b\u8f7d\u8fc7\u7a0b\u4e2d\u4e5f\u53ef\u4ee5\u8bbe\u7f6e\u4ee3\u7406\u6765\u63d0\u5347\u4e0b\u8f7d\u901f\u5ea6\uff1a 1 2 3 import nltk nltk.set_proxy('http://proxy', ('USERNAME', 'PASSWORD')) nltk.download(\"comparative_sentences\") \u65b9\u6848\u4e8c\uff1a\u79bb\u7ebf\u4e0b\u8f7d\u597d\u540e\u653e\u5728\u6307\u5b9a\u76ee\u5f55 \u76f4\u63a5\u4ece https://github.com/nltk/nltk_data \u4e0b\u8f7d\u6570\u636e\uff0c\u5176\u4e2dpackages\u6587\u4ef6\u4e0b\u7684\u5185\u5bb9\u5373\u4e3a\u6211\u4eec\u60f3\u8981\u7684\u6570\u636e\uff0c\u5c06\u6570\u636e\u653e\u5165\u5982\u4e0b\u4efb\u4f55\u4e00\u4e2a\u6587\u4ef6\u5939\u4e0b\u5373\u53ef\u3002 1 2 3 import nltk for path in nltk.data.path: print(path) 1 2 3 4 5 6 7 8 C:\\Users\\qw.TCENT/nltk_data D:\\CodeHub\\NLP\\venv\\nltk_data D:\\CodeHub\\NLP\\venv\\share\\nltk_data D:\\CodeHub\\NLP\\venv\\lib\\nltk_data C:\\Users\\qw.TCENT\\AppData\\Roaming\\nltk_data C:\\nltk_data D:\\nltk_data E:\\nltk_data \u6ce8\u610f\uff0c\u5c06\u6570\u636e\u653e\u5165\u6587\u4ef6\u5939\u65f6\uff0c\u9700\u8981\u5c06\u5404\u4e2a\u76ee\u5f55\u4e0b\u7684.zip\u6587\u4ef6\u89e3\u538b\uff0c\u5426\u5219\u4e0d\u80fd\u6b63\u5e38\u7684\u8bfb\u53d6\u5230\u6570\u636e\u3002","title":"NLTK\u7684\u5b89\u88c5"},{"location":"pages/nlp/nlpinfo/nltk-basic/#NLTK\u7684\u4f7f\u7528","text":"","title":"NLTK\u7684\u4f7f\u7528"},{"location":"pages/nlp/nlpinfo/nltk-basic/#\u5207\u5206\u5206\u8bcd","text":"\u5207\u5206\u53ef\u4ee5\u5206\u4e3a\u53e5\u5b50\u5207\u5206\u548c\u8bcd\u5207\u5206\uff0cnltk\u9ed8\u8ba4\u7528PunktSentenceTokenizer\u5206\u53e5\uff0c\u7528\u57fa\u4e8e\u5bbe\u5dde\u6811\u5e93\u5206\u8bcd\u89c4\u8303\u7684TreebankWordTokenizer\u5206\u8bcd\u3002\u5177\u4f53\u7528\u4ee5\u4e0b\u547d\u4ee4\u505a\u5230\uff1a 1 2 3 4 5 6 7 import nltk EXAMPLE_TEXT = \"Hello World! Isn't it good to see you? Thanks for buying this book.\" sentences = nltk.sent_tokenize(EXAMPLE_TEXT) print(sentences) # \u5206\u53e5 tokens = nltk.word_tokenize(EXAMPLE_TEXT) print(tokens) # \u5206\u8bcd \u9ed8\u8ba4\u7684\u5206\u8bcd\u5728\u9047\u5230Isn\u2019t\u8fd9\u6837\u7684\u7f29\u5199(contraction)\u65f6\u4f1a\u5206\u6210Is\u548cn\u2019t\uff0c\u5982\u679c\u4e0d\u559c\u6b22\uff0c\u53ef\u4ee5\u7528dir(nltk.tokenize)\u67e5\u770b\u522b\u7684\u5206\u8bcd\u5668\u5e76\u4f7f\u7528\u3002 1 2 3 for tokenize in dir(nltk.tokenize): if \"Tokenizer\" in tokenize: print(tokenize) \u76ee\u524d\u652f\u6301\u7684\u5206\u8bcd\u5668\uff1a BlanklineTokenizer\uff1a\u662fRegexpTokenizer\u7684\u5b50\u7c7b\uff0c\u5185\u90e8\u9884\u8bbe\u4e86\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0fr\u2019\\s \\n\\s \\n\\s*\u2019\u8fdb\u884c\u5206\u5272\u3002 LineTokenizer\uff1a\u5c06\u6587\u672c\u5207\u5206\u4e3a\u884c\u6765\u6267\u884c\u5207\u5206 MWETokenizer\uff1a\u8be5\u65b9\u6cd5\u53ef\u5bf9\u5df2\u7ecf\u5148\u4fdd\u7559\u7684\u4e00\u4e9b\u77ed\u8bed\uff0c\u6216\u8005\u7ec4\u5408\uff0c\u8fdb\u884c\u91cd\u7ec4 PunktSentenceTokenizer\uff1aKiss&Strunk\uff082006\uff09\u63d0\u51fa\u7684\u65e0\u76d1\u7763\u7b97\u6cd5 RegexpTokenizer\uff1a\u5b9e\u4f8b\u5316RegexpTokenizer \u4f1a\u6309\u7167\u6b63\u5219\u8868\u8fbe\u5f0f\u8fdb\u884cfindall() ReppTokenizer\uff1a SExprTokenizer\uff1a\u53ef\u4ee5\u5c06\u5b57\u7b26\u4e32\u540c\u65f6\u6309\u7167\u7a7a\u683c\u548c\u62ec\u53f7\u5207\u5206 SpaceTokenizer\uff1a\u6309\u7a7a\u683c\u5206\u8bcd SyllableTokenizer TabTokenizer\uff1a\u6839\u636etab\u8fdb\u884c\u5207\u5206 TextTilingTokenizer ToktokTokenizer\uff1a TreebankWordTokenizer\uff1a\u901a\u8fc7\u5206\u79bb\u7f29\u7565\u8bcd\u6765\u5b9e\u73b0\u5207\u5206 TweetTokenizer\uff1a\u6309\u7a7a\u683c\u8fdb\u884c\u5206\u8bcd\uff0c\u540c\u65f6\u9488\u5bf9\u63a8\u6587\u4e00\u4e9b\u7279\u6027\uff0c\u53bb\u9664@\u7528\u6237\u540d\uff0c\u4fdd\u7559\u8868\u60c5\u7b49\u4e00\u4e9b\u7279\u6b8a\u7b26\u53f7\u3002 WhitespaceTokenizer\uff1a\u662fRegexpTokenizer\u7684\u5b50\u7c7b \u901a\u8fc7\u7a7a\u683c\u3001\u95f4\u9694\u3001\u6362\u884c\u7b49\u6765\u5b8c\u6210\uff0c\u5185\u90e8\u9884\u8bbe\u4e86\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0fr\u2019\\s+\u2019\u8fdb\u884c\u5206\u5272 WordPunctTokenizer\uff1a\u901a\u8fc7\u5c06\u6807\u70b9\u8f6c\u5316\u4e3a\u4e00\u4e2a\u5168\u65b0\u7684\u6807\u8bc6\u7b26\u6765\u5b9e\u73b0\u5207\u5206 \u5907\u6ce8\uff1a\u4e0a\u9762\u63d0\u5230\u7684\u65b9\u6cd5\u4e0d\u652f\u6301\u4e2d\u6587\u3002 \u505c\u7528\u8bcd \u82f1\u6587\u4e2d\u7684\u505c\u7528\u8bcd\u5982 \u201cthe\u201d\uff0c\u201cis\u201d\uff0c\u201care\u201d \u7b49\u7b49\u3002\u5728\u81ea\u7136\u8bed\u8a00\u5904\u7406\uff08NLP\uff09\u4e2d\u6ca1\u6709\u901a\u7528\u7684\u505c\u7528\u8bcd\u5217\u8868\uff0c\u7136\u800c\u8fd9\u91cc\uff0c\u5728 NLTK \u6a21\u5757\u6709\u5176\u81ea\u5e26\u7684\u505c\u7528\u8bcd\u5217\u8868\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import nltk from nltk.corpus import stopwords EXAMPLE_TEXT = \"Hello World! Isn't it good to see you? Thanks for buying this book.\" stop_words = set(stopwords.words('english')) words = nltk.word_tokenize(EXAMPLE_TEXT) words_filtered = [] for w in words: if w not in stop_words: words_filtered.append(w) print(words_filtered)","title":"\u5207\u5206\uff08\u5206\u8bcd\uff09"},{"location":"pages/nlp/nlpinfo/nltk-basic/#\u8bcd\u6027\u6807\u6ce8","text":"\u5bf9\u53e5\u5b50\u8fdb\u884c\u8bcd\u6027\u6807\u6ce8\u9700\u8981\u5148\u8fdb\u884c\u5207\u5206\u3002\u9ed8\u8ba4\u4f7f\u7528\u7684\u6807\u8bb0\u683c\u5f0f\u662f\u5bbe\u5dde\u6811\u5e93\u4f7f\u7528\u7684\uff0c\u5177\u4f53\u89c1\u6b64\uff1a Alphabetical list of part-of-speech tags used in the Penn Treebank Project \u4e5f\u53ef\u76f4\u63a5\u4f7f\u7528\u201cnltk.help.upenn_tagset()\u201d\u67e5\u770b\u5b98\u65b9\u82f1\u6587\u8bf4\u660e\u3002 1 2 3 4 5 6 7 import nltk EXAMPLE_TEXT = \"Hello World! Isn't it good to see you? Thanks for buying this book.\" tokens = nltk.word_tokenize(EXAMPLE_TEXT) tagged = nltk.pos_tag(tokens) print(tagged[0:10]) # \u8bcd\u6027\u6807\u6ce8","title":"\u8bcd\u6027\u6807\u6ce8"},{"location":"pages/nlp/nlpinfo/nltk-basic/#\u547d\u540d\u5b9e\u4f53\u8bc6\u522b","text":"\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\u7c7b\u4f3c\u4e8e\u4e00\u79cdchunking\uff0c\u53ef\u4ee5\u628a\u662f\u547d\u540d\u5b9e\u4f53\u7684\u90e8\u5206\u62ec\u8d77\u6765\uff0c\u9700\u8981\u5728\u6807\u8bb0\u7684\u6587\u672c\u57fa\u7840\u4e0a\u8fdb\u884c\u3002 1 2 3 4 5 6 7 8 import nltk EXAMPLE_TEXT = \"I am very excited about the next generation of Apple products.\" tokens = nltk.word_tokenize(EXAMPLE_TEXT) tagged = nltk.pos_tag(tokens) entities = nltk.chunk.ne_chunk(tagged) print(entities)","title":"\u547d\u540d\u5b9e\u4f53\u8bc6\u522b"},{"location":"pages/nlp/nlpinfo/nltk-basic/#\u53e5\u6cd5\u5206\u6790","text":"NLTK\u6709\u81ea\u5e26\u5bbe\u5dde\u6811\u5e93\u7b49\u6811\u5e93\uff0c\u4f46\u662f\u81ea\u8eab\u6ca1\u6709\u5bf9\u751f\u6587\u672c\u8fdb\u884c\u53e5\u6cd5\u5206\u6790\u7684\u80fd\u529b\uff0c\u9700\u8981\u8c03\u7528stanford parser\u7b49\u5916\u90e8\u5de5\u5177\u3002 1 2 3 4 from nltk.corpus import treebank t = treebank.parsed_sents('wsj_0001.mrg')[0] t.draw() tree\u7c7b\u6709\u5f88\u591a\u65b9\u6cd5\u53ef\u4ee5\u8c03\u7528\uff0c\u6bd4\u5982\u53ef\u4ee5\u7528fromstring\u4ece\u6587\u672c\u751f\u6210tree\u7c7b\u3002\u5982\u4f55\u904d\u5386tree\u53ef\u4ee5\u89c1 nltk\u7684\u5b98\u65b9\u6559\u7a0b \u3002","title":"\u53e5\u6cd5\u5206\u6790"},{"location":"pages/nlp/nlpinfo/nltk-basic/#WordNet\u7684\u4f7f\u7528","text":"WordNet\u53ef\u4ee5\u88ab\u770b\u4f5c\u662f\u4e00\u4e2a\u540c\u4e49\u8bcd\u8bcd\u5178\u3002\u91cc\u9762\u7684\u8bcd\u90fd\u662f\u4ee5\u540c\u4e49\u8bcd\u96c6\u5408\uff08synset\uff09\u4f5c\u4e3a\u57fa\u672c\u5efa\u6784\u5355\u4f4d\u8fdb\u884c\u7ec4\u7ec7\u3002\u6211\u4eec\u53ef\u4ee5\u7528\u4ee5\u4e0b\u65b9\u6cd5\u67e5\u770b\u67d0\u4e2a\u8bcd\u7684\u8fd1\u4e49\u8bcd\uff0c\u5e76\u53ef\u4ee5\u7528\u6765\u5224\u65ad\u8fd9\u4e2a\u8bcd\u5b58\u4e0d\u5b58\u5728\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 from nltk.corpus import wordnet # \u7ed9\u5b9a\u8bcd\u7684\u5b9a\u4e49\u548c\u4f8b\u53e5 syn = wordnet.synsets(\"pain\") print(syn[0].definition()) print(syn[0].examples()) # \u540c\u4e49\u8bcd synonyms = [] for syn in wordnet.synsets('Computer'): for lemma in syn.lemmas(): synonyms.append(lemma.name()) print(synonyms) # \u53cd\u4e49\u8bcd antonyms = [] for syn in wordnet.synsets(\"small\"): for l in syn.lemmas(): if l.antonyms(): antonyms.append(l.antonyms()[0].name()) print(antonyms)","title":"WordNet\u7684\u4f7f\u7528"},{"location":"pages/nlp/nlpinfo/nltk-basic/#\u8bcd\u5e72\u63d0\u53d6stemming\u4e0e\u8bcd\u5f62\u8fd8\u539flemmatization","text":"\u8bed\u8a00\u5f62\u6001\u5b66\u548c\u4fe1\u606f\u68c0\u7d22\u91cc\uff0c\u8bcd\u5e72\u63d0\u53d6\u662f\u53bb\u9664\u8bcd\u7f00\u5f97\u5230\u8bcd\u6839\u7684\u8fc7\u7a0b\uff0c\u4f8b\u5982working\u7684\u8bcd\u5e72\u4e3awork\u3002\u641c\u7d22\u5f15\u64ce\u5728\u7d22\u5f15\u9875\u9762\u65f6\u5c31\u4f1a\u4f7f\u7528\u8fd9\u79cd\u6280\u672f\uff0c\u6240\u4ee5\u5f88\u591a\u4eba\u4e3a\u76f8\u540c\u7684\u5355\u8bcd\u5199\u51fa\u4e0d\u540c\u7684\u7248\u672c\u3002\u8bcd\u5e72\u63d0\u53d6\u7684\u7b97\u6cd5\u6709\u5f88\u591a\uff0c\u4f46\u6700\u5e38\u7528\u7684\u7b97\u6cd5\u662f Porter \u63d0\u53d6\u7b97\u6cd5\u3002NLTK \u6709\u4e00\u4e2a PorterStemmer \u7c7b\uff0c\u4f7f\u7528\u7684\u5c31\u662f Porter \u63d0\u53d6\u7b97\u6cd5\u3002 1 2 3 4 5 from nltk.stem import PorterStemmer stemmer = PorterStemmer() print(stemmer.stem('working')) print(stemmer.stem('worked')) \u8fd8\u6709\u5176\u4ed6\u4e00\u4e9b\u63d0\u53d6\u7b97\u6cd5\uff0c\u5982 Lancaster \u63d0\u53d6\u7b97\u6cd5\u3002\u8fd9\u4e2a\u7b97\u6cd5\u7684\u8f93\u51fa\u540c Porter \u7b97\u6cd5\u7684\u7ed3\u679c\u5728\u51e0\u4e2a\u5355\u8bcd\u4e0a\u4e0d\u540c\u3002\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u4ed6\u4eec\u4e24\u4e2a\u7b97\u6cd5\u6765\u67e5\u770b\u6709\u54ea\u4e9b\u4e0d\u540c\u7ed3\u679c\u3002 \u8bcd\u5f62\u8fd8\u539f\uff08lemmatization\uff09\u5219\u4f1a\u628a\u8bcd\u8f6c\u6362\u4e3a\u6700\u57fa\u672c\u7684\u8bcd\uff0c\u65b9\u6cd5\u5982\u4e0b\uff1a 1 2 3 4 5 6 from nltk.stem import WordNetLemmatizer lemmatizer = WordNetLemmatizer() print(lemmatizer.lemmatize('cooking')) print(lemmatizer.lemmatize('cooking', pos='v')) print(lemmatizer.lemmatize('cookbooks')) \u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0clemma\u9700\u8981\u6839\u636e\u8bcd\u6027\u6765\u8fdb\u884c\u8fd8\u539f\uff0c\u6bd4\u5982cooking\u4f5c\u4e3a\u540d\u8bcd\uff0c\u5b83\u672c\u8eab\u5c31\u662f\u4e00\u4e2alemma\uff0c\u800c\u505a\u52a8\u8bcd\u4f7f\u7528\u65f6lemma\u662fcook\u3002\u6240\u4ee5\u50cf\u65af\u5766\u798fCoreNLP\u8fdb\u884c\u8bcd\u5f62\u8fd8\u539f\u65f6\u90fd\u9700\u8981\u5148\u8fdb\u884c\u8bcd\u6027\u6807\u6ce8\u3002 \u8bcd\u5e72\u63d0\u53d6\u548c\u8bcd\u5f62\u8fd8\u539f\u7684\u4e3b\u8981\u5dee\u522b\u8fd8\u53ef\u4ee5\u4ece\u4ee5\u4e0b\u4f8b\u5b50\u4e2d\u770b\u51fa\uff1a 1 2 3 4 5 6 7 from nltk.stem import PorterStemmer, WordNetLemmatizer stemmer = PorterStemmer() lemmatizer = WordNetLemmatizer() print(stemmer.stem('believes')) # believ print(lemmatizer.lemmatize('believes')) # belief \u8bcd\u5e72\u63d0\u53d6\u7684\u65b9\u6cd5\u53ef\u4ee5\u5728\u4e0d\u77e5\u9053\u8bed\u5883\u7684\u60c5\u51b5\u4e0b\u5bf9\u8bcd\u6c47\u4f7f\u7528\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5b83\u76f8\u8f83\u8bcd\u5f62\u8fd8\u539f\u65b9\u6cd5\u901f\u5ea6\u66f4\u5feb\u4f46\u51c6\u786e\u7387\u66f4\u4f4e\u3002\u5728\u6211\u770b\u6765\uff0c\u8bcd\u5f62\u8fd8\u539f\u6bd4\u63d0\u53d6\u8bcd\u5e72\u7684\u65b9\u6cd5\u66f4\u597d\u3002\u8bcd\u5f62\u8fd8\u539f\uff0c\u5982\u679c\u5b9e\u5728\u65e0\u6cd5\u8fd4\u56de\u8fd9\u4e2a\u8bcd\u7684\u53d8\u5f62\uff0c\u4e5f\u4f1a\u8fd4\u56de\u53e6\u4e00\u4e2a\u771f\u6b63\u7684\u5355\u8bcd;\u8fd9\u4e2a\u5355\u8bcd\u53ef\u80fd\u662f\u4e00\u4e2a\u540c\u4e49\u8bcd\uff0c\u4f46\u4e0d\u7ba1\u600e\u6837\u8fd9\u662f\u4e00\u4e2a\u771f\u6b63\u7684\u5355\u8bcd\u3002\u5f53\u6709\u65f6\u5019\uff0c\u4f60\u4e0d\u5173\u5fc3\u51c6\u786e\u5ea6\uff0c\u9700\u8981\u7684\u53ea\u662f\u901f\u5ea6\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8bcd\u5e72\u63d0\u53d6\u7684\u65b9\u6cd5\u66f4\u597d\u3002","title":"\u8bcd\u5e72\u63d0\u53d6\uff08stemming\uff09\u4e0e\u8bcd\u5f62\u8fd8\u539f\uff08lemmatization\uff09"},{"location":"pages/nlp/nlpinfo/nltk-basic/#\u5bf9\u6587\u672c\u8fdb\u884c\u7b80\u5355\u7684\u5206\u6790","text":"nltk.text.Text() nltk.text.Text()\u7c7b\u7528\u4e8e\u5bf9\u6587\u672c\u8fdb\u884c\u521d\u7ea7\u7684\u7edf\u8ba1\u4e0e\u5206\u6790\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a\u8bcd\u7684\u5217\u8868\u4f5c\u4e3a\u53c2\u6570\u3002Text\u7c7b\u63d0\u4f9b\u4e86\u4e0b\u5217\u65b9\u6cd5\u3002 Text(words) \u5bf9\u8c61\u6784\u9020 concordance(word, width=79, lines=25)\uff1a\u663e\u793aword\u51fa\u73b0\u7684\u4e0a\u4e0b\u6587 common_contexts(words)\uff1a\u663e\u793awords\u51fa\u73b0\u7684\u76f8\u540c\u6a21\u5f0f similar(word)\uff1a\u663e\u793aword\u7684\u76f8\u4f3c\u8bcd collocations(num=20, window_size=2)\uff1a\u663e\u793a\u6700\u5e38\u89c1\u7684\u4e8c\u8bcd\u642d\u914d count(word)\uff1aword\u51fa\u73b0\u7684\u8bcd\u6570 dispersion_plot(words)\uff1a\u7ed8\u5236words\u4e2d\u6587\u6863\u4e2d\u51fa\u73b0\u7684\u4f4d\u7f6e\u56fe vocab()\uff1a\u8fd4\u56de\u6587\u7ae0\u53bb\u91cd\u7684\u8bcd\u5178 \u793a\u4f8b1\uff1a 1 2 3 4 5 6 7 8 9 10 import nltk import jieba novel_data = open('data/\u4e09\u4f53(\u5218\u6148\u6b23).txt', encoding='utf-8').read() text = nltk.text.Text(jieba.lcut(novel_data)) print(text.concordance(word='\u4e09\u4f53', width=20, lines=10)) # \u6253\u5370\u5bbd\u5ea620\u5b57\u7b26\uff0c\u517110\u884c\u7684\u4e0a\u4e0b\u6587 print(text.similar(word='\u5730\u7403', num=10)) print(text.common_contexts(['\u4e16\u754c', '\u5b87\u5b99'])) # \u591a\u4e2a\u8bcd\u7684\u4e0a\u4e0b\u6587 print(text.count(word='\u4e09\u4f53')) # \u7edf\u8ba1\u8bcd\u8bed\u9891\u6570 text.generate(text_seed=['\u5730\u7403', '\u4e09\u4f53'], length=30) # \u9020\u53e5 \u793a\u4f8b2\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 import nltk import jieba from pylab import mpl mpl.rcParams['font.sans-serif'] = ['FangSong'] # \u6307\u5b9a\u9ed8\u8ba4\u5b57\u4f53 mpl.rcParams['axes.unicode_minus'] = False # \u89e3\u51b3\u4fdd\u5b58\u56fe\u50cf\u662f\u8d1f\u53f7'-'\u663e\u793a\u4e3a\u65b9\u5757\u7684\u95ee\u9898 words = ['\u6c6a\u6dfc', '\u53f6\u6587\u6d01', '\u7ae0\u5317\u6d77', '\u7533\u7389\u83f2', '\u7f57\u8f91', '\u53f2\u5f3a', '\u5e84\u989c', '\u7ef4\u5fb7', '\u7a0b\u5fc3', '\u827eAA', '\u4e91\u5929\u660e'] for w in words: jieba.add_word(w) # \u6dfb\u52a0\u81ea\u5b9a\u4e49\u8bcd\u5178 novel_data = open('data/\u4e09\u4f53(\u5218\u6148\u6b23).txt', encoding='utf-8').read() text = nltk.text.Text(jieba.lcut(novel_data)) text.dispersion_plot(words) \u753b\u51fa\u4e09\u4f53\u4eba\u7269\u51fa\u73b0\u4f4d\u7f6e\uff0c\u6a2a\u5750\u6807\u4e3a\u6bcf\u4e2a\u8bcd\u51fa\u73b0\u5728text\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e\u4ece\u56fe\u4e2d\u57fa\u672c\u4e0a\u53ef\u4ee5\u770b\u51fa\u6bcf\u4e2a\u4eba\u7269\u7684\u51fa\u73b0\u5728\u5c0f\u8bf4\u4e2d\u7684\u987a\u5e8f\u3002 \u6c6a\u6dfc\u548c\u53f6\u6587\u6d01\u51fa\u73b0\u5728\u300a\u4e09\u4f53\u300b\u5f00\u5934 \u7f57\u8f91\u51e0\u4e4e\u8d2f\u7a7f\u300a\u4e09\u4f53\u300b \u7ef4\u5fb7\u3001\u7a0b\u5fc3\u3001\u4e91\u5929\u660e\u51fa\u73b0\u5728\u300a\u4e09\u4f53\u300b\u672b\u5c3e nltk.text.TextCollection nltk.text.TextCollection\u7c7b\u662fText\u7684\u96c6\u5408\uff0c\u63d0\u4f9b\u4e0b\u5217\u65b9\u6cd5 text.TextCollection([text1,text2,])\uff1a\u5bf9\u8c61\u6784\u9020 idf(term)\uff1a\u8ba1\u7b97\u8bcdterm\u5728\u8bed\u6599\u5e93\u4e2d\u7684\u9006\u6587\u6863\u9891\u7387\uff0c\u5373log\u603b\u6587\u7ae0\u6570\u6587\u4e2d\u51fa\u73b0term\u7684\u6587\u7ae0\u6570log\u603b\u6587\u7ae0\u6570\u6587\u4e2d\u51fa\u73b0term\u7684\u6587\u7ae0\u6570 tf(term,text)\uff1a\u7edf\u8ba1term\u5728text\u4e2d\u7684\u8bcd\u9891 tf_idf(term,text)\uff1a\u8ba1\u7b97term\u5728\u53e5\u5b50\u4e2d\u7684tf_idf,\u5373tf*idf \u793a\u4f8b3\uff1a\u8ba1\u7b97\u67d0\u4e2a\u8bcd\u4e0e\u5176\u4ed6\u6240\u6709\u8bcd\u7684\u76f8\u4f3c\u5ea6 1 2 3 4 5 6 7 8 9 import nltk import jieba novel_data = open('data/\u4e09\u4f53(\u5218\u6148\u6b23).txt', encoding='utf-8').read() content_index = nltk.text.ContextIndex(jieba.lcut(novel_data)) similarity_scores = content_index.word_similarity_dict(word='\u4e09\u4f53') for key, value in similarity_scores.items(): if value > 0.05: print(key, value) \u793a\u4f8b4\uff1a\u8ba1\u7b97TF-IDF 1 2 3 4 5 6 7 8 9 10 11 import nltk import jieba novel_data = open('data/\u4e09\u4f53(\u5218\u6148\u6b23).txt', encoding='utf-8').read() word_list = jieba.lcut(novel_data) text = \"\".join(word_list) my_text = nltk.text.TextCollection(word_list) print(my_text.idf(\"\u4e09\u4f53\")) print(my_text.tf(\"\u4e09\u4f53\", text)) print(my_text.tf_idf(\"\u4e09\u4f53\", text))","title":"\u5bf9\u6587\u672c\u8fdb\u884c\u7b80\u5355\u7684\u5206\u6790"},{"location":"pages/nlp/nlpinfo/nltk-basic/#\u5bf9\u6587\u6863\u7528\u8bcd\u8fdb\u884c\u5206\u5e03\u7edf\u8ba1","text":"FreqDist\u7c7b \u8fd9\u4e2a\u7c7b\u4e3b\u8981\u8bb0\u5f55\u4e86\u6bcf\u4e2a\u8bcd\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u6839\u636e\u7edf\u8ba1\u6570\u636e\u751f\u6210\u8868\u683c\uff0c\u6216\u7ed8\u56fe\u3002\u5176\u7ed3\u6784\u5f88\u7b80\u5355\uff0c\u7528\u4e00\u4e2a\u6709\u5e8f\u8bcd\u5178\u8fdb\u884c\u5b9e\u73b0\u3002\u6240\u4ee5dict\u7c7b\u578b\u7684\u65b9\u6cd5\u5728\u6b64\u7c7b\u4e5f\u662f\u9002\u7528\u7684\u3002\u5982keys()\u7b49\u3002 B()\uff1a\u8fd4\u56de\u8bcd\u5178\u7684\u957f\u5ea6 plot(title,cumulative=False)\uff1a\u7ed8\u5236\u9891\u7387\u5206\u5e03\u56fe\uff0c\u82e5cumu\u4e3aTrue\uff0c\u5219\u662f\u7d2f\u79ef\u9891\u7387\u5206\u5e03\u56fe tabulate()\uff1a\u751f\u6210\u9891\u7387\u5206\u5e03\u7684\u8868\u683c\u5f62\u5f0f most_common()\uff1a\u8fd4\u56de\u51fa\u73b0\u6b21\u6570\u6700\u9891\u7e41\u7684\u8bcd\u4e0e\u9891\u5ea6 hapaxes()\uff1a\u8fd4\u56de\u53ea\u51fa\u73b0\u8fc7\u4e00\u6b21\u7684\u8bcd \u793a\u4f8b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 import nltk import jieba from pylab import mpl mpl.rcParams['font.sans-serif'] = ['FangSong'] # \u6307\u5b9a\u9ed8\u8ba4\u5b57\u4f53 mpl.rcParams['axes.unicode_minus'] = False # \u89e3\u51b3\u4fdd\u5b58\u56fe\u50cf\u662f\u8d1f\u53f7'-'\u663e\u793a\u4e3a\u65b9\u5757\u7684\u95ee\u9898 novel_data = open('data/\u4e09\u4f53(\u5218\u6148\u6b23).txt', encoding='utf-8').read() stopwords = open('data/CNENstopwords.txt', encoding='utf-8').read().splitlines() word_list = jieba.lcut(novel_data) new_list = [] for w in word_list: if w not in stopwords: new_list.append(w) fdist = nltk.FreqDist(new_list) print(fdist.keys()) # \u6253\u5370\u8bcd\u8bed\u5217\u8868 print(fdist.items()) # \u6253\u5370\u8bcd\u8bed\u4e0e\u9891\u6570\u5bf9 print(fdist.most_common(20)) # \u6253\u5370\u9891\u6570\u6700\u9ad8\u7684\u8bcd print(fdist.N()) # \u8bcd\u8bed\u603b\u6570 print(fdist.max()) # \u6253\u5370\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u8bcd\u8bed print(fdist['\u4e09\u4f53']) # \u8f93\u51fa\u67d0\u4e2a\u8bcd\u7684\u51fa\u73b0\u6b21\u6570 print(fdist.freq('\u4e09\u4f53')) # \u8ba1\u7b97\u8bcd\u9891 fdist.plot(20, cumulative=False) # \u7ed8\u5236\u524d20\u4e2a\u8bcd\u9891\u6570\u7d2f\u8ba1\u56fe","title":"\u5bf9\u6587\u6863\u7528\u8bcd\u8fdb\u884c\u5206\u5e03\u7edf\u8ba1"},{"location":"pages/nlp/nlpinfo/nltk-basic/#NLTK\u81ea\u5e26\u7684\u8bed\u6599\u5e93","text":"\u5728nltk.corpus\u5305\u4e0b\uff0c\u63d0\u4f9b\u4e86\u51e0\u7c7b\u6807\u6ce8\u597d\u7684\u8bed\u6599\u5e93\uff1a gutenberg\uff1a\u4e00\u4e2a\u6709\u82e5\u5e72\u4e07\u90e8\u7684\u5c0f\u8bf4\u8bed\u6599\u5e93\uff0c\u591a\u662f\u53e4\u5178\u4f5c\u54c1 webtext\uff1a\u6536\u96c6\u7684\u7f51\u7edc\u5e7f\u544a\u7b49\u5185\u5bb9 nps_chat\uff1a\u6709\u4e0a\u4e07\u6761\u804a\u5929\u6d88\u606f\u8bed\u6599\u5e93\uff0c\u5373\u65f6\u804a\u5929\u6d88\u606f\u4e3a\u4e3b brown\uff1a\u4e00\u4e2a\u767e\u4e07\u8bcd\u7ea7\u7684\u82f1\u8bed\u8bed\u6599\u5e93\uff0c\u6309\u6587\u4f53\u8fdb\u884c\u5206\u7c7b reuters\uff1a\u8def\u900f\u793e\u8bed\u6599\u5e93\uff0c\u4e0a\u4e07\u7bc7\u65b0\u95fb\u65b9\u6863\uff0c\u7ea6\u67091\u767e\u4e07\u5b57\uff0c\u520690\u4e2a\u4e3b\u9898\uff0c\u5e76\u5206\u4e3a\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u4e24\u7ec4 inaugural\uff1a\u6f14\u8bb2\u8bed\u6599\u5e93\uff0c\u51e0\u5341\u4e2a\u6587\u672c\uff0c\u90fd\u662f\u603b\u7edf\u6f14\u8bf4 \u8bed\u6599\u5e93\u5904\u7406\uff1a fileids()\uff1a\u8fd4\u56de\u8bed\u6599\u5e93\u4e2d\u6587\u4ef6\u540d\u5217\u8868 fileids[categories]\uff1a\u8fd4\u56de\u6307\u5b9a\u7c7b\u522b\u7684\u6587\u4ef6\u540d\u5217\u8868 raw(fid=[c1,c2])\uff1a\u8fd4\u56de\u6307\u5b9a\u6587\u4ef6\u540d\u7684\u6587\u672c\u5b57\u7b26\u4e32 raw(catergories=[])\uff1a\u8fd4\u56de\u6307\u5b9a\u5206\u7c7b\u7684\u539f\u59cb\u6587\u672c sents(fid=[c1,c2])\uff1a\u8fd4\u56de\u6307\u5b9a\u6587\u4ef6\u540d\u7684\u8bed\u53e5\u5217\u8868 sents(catergories=[c1,c2])\uff1a\u6309\u5206\u7c7b\u8fd4\u56de\u8bed\u53e5\u5217\u8868 words(filename)\uff1a\u8fd4\u56de\u6307\u5b9a\u6587\u4ef6\u540d\u7684\u5355\u8bcd\u5217\u8868 words(catogories=[])\uff1a\u8fd4\u56de\u6307\u5b9a\u5206\u7c7b\u7684\u5355\u8bcd\u5217\u8868 \u53c2\u8003\u94fe\u63a5\uff1a https://github.com/nltk/nltk/wiki https://www.osgeo.cn/nltk/ Python \u6570\u636e\u79d1\u5b66\u5165\u95e8\u6559\u7a0b\uff1aNLTK","title":"NLTK\u81ea\u5e26\u7684\u8bed\u6599\u5e93"},{"location":"pages/nlp/nlpinfo/nltk-basic/#\u76f8\u5173\u6587\u7ae0","text":"Word2vec\u5b9e\u6218\uff1a\u4e2d\u6587\u7ef4\u57fa\u767e\u79d1\u8bed\u6599\u8bad\u7ec3 Python\u89e3\u6790\u62fc\u97f3\u8f93\u5165\u6cd5\u8bcd\u5e93 Facebook\u8bcd\u5411\u91cf\u5de5\u5177FastText \u817e\u8bafAI Lab\u4e2d\u6587\u8bcd\u5411\u91cf\u6570\u636e\u4f7f\u7528 \u81ea\u7136\u8bed\u8a00\u5904\u7406\u4e4b\u81ea\u52a8\u6458\u8981","title":"\u76f8\u5173\u6587\u7ae0:"},{"location":"pages/nlp/nlpinfo/opensource-projects-2020list/","text":"\u5f00\u6e90\u9879\u76ee\uff0c\u6db5\u76d6 11 \u7c7b AI \u5b66\u4e60\u6846\u67b6\u3001\u5e73\u53f0 \u00b6 \u76ee\u5f55\uff1a \u2160\u3001\u7ecf\u5178\u673a\u5668\u5b66\u4e60\uff081-3\uff09 \u2161\u3001\u6df1\u5ea6\u5b66\u4e60\uff084-8\uff09 \u2162\u3001\u5f3a\u5316\u5b66\u4e60\uff089-12\uff09 \u2163\u3001\u81ea\u7136\u8bed\u8a00\u5904\u7406\uff0813-18\uff09 \u2164\u3001\u8bed\u97f3\u8bc6\u522b\uff0819-21\uff09 \u2165\u3001\u8ba1\u7b97\u673a\u89c6\u89c9\uff0822-26\uff09 \u2166\u3001\u5206\u5e03\u5f0f\u8bad\u7ec3\uff0827-31\uff09 \u2167\u3001\u81ea\u52a8\u5efa\u6a21\uff0832-35\uff09 \u2168\u3001IDEs\u7cfb\u7edf\uff0836-38\uff09 \u2169\u3001\u5e73\u53f0\uff0839-41\uff09 \u216a\u3001\u8bc4\u5206\u63a8\u7406\u7cfb\u7edf\uff0842-43\uff09 \u9002\u7528\u4e8e\u7ecf\u5178\u673a\u5668\u5b66\u4e60\u7684\u5de5\u5177 1. SciKit-learn star 39.2k fork 19.2k \u00b6 scikit-learn \u662f\u4e00\u79cd\u5f3a\u5927\u7684\u57fa\u4e8e Python \u8bed\u8a00\u7684\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u5e93\uff08 https://scikit-learn.org/stable/ \uff09\u3002\u5176\u4e2d\uff0c\u5305\u542b\u4e86\u7b97\u6cd5\u9884\u5904\u7406\uff0c\u6a21\u578b\u53c2\u6570\u62e9\u4f18\uff0c\u56de\u5f52\u4e0e\u5206\u7c7b\u7b49\u7b97\u6cd5\uff0c\u5b98\u65b9\u6587\u6863\u5305\u542b\u4e86\u6bcf\u4e00\u79cd\u7b97\u6cd5\u7684\u4f8b\u5b50\uff0c\u4ee3\u7801\u7b80\u6d01\u4f18\u7f8e\uff0c\u53ef\u89c6\u5316\u4e86\u6bcf\u4e00\u79cd\u7b97\u6cd5\u7ed3\u679c\uff0c\u5373\u80fd\u5b66\u4e60 python\uff0c\u4e5f\u662f\u5e2e\u52a9\u5f00\u53d1\u8005\u66f4\u597d\u7406\u89e3\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u7684\u4fbf\u5229\u5de5\u5177\u3002 \u5c24\u5176\u5728\u76d1\u7763\u5b66\u4e60\u90e8\u5206\uff0cScikit-learn \u63d0\u4f9b\u4e86\u5e7f\u4e49\u7ebf\u6027\u6a21\u578b\u3001\u652f\u6301\u5411\u91cf\u673a\u3001\u6700\u8fd1\u90bb\u7b97\u6cd5\u3001\u9ad8\u65af\u8fc7\u7a0b\u3001\u6734\u7d20\u8d1d\u53f6\u65af\u3001\u51b3\u7b56\u6811\u548c\u96c6\u6210\u65b9\u6cd5\u7b49\u7b97\u6cd5\u6559\u7a0b\uff0c\u540c\u65f6\u8fd8\u4ecb\u7ecd\u4e86\u7279\u5f81\u9009\u62e9\u3001\u968f\u5373\u68af\u5ea6\u4e0b\u964d\u7b97\u6cd5\u3001\u7ebf\u6027\u4e0e\u4e8c\u6b21\u5224\u522b\u5206\u6790\u7b49\u5728\u76d1\u7763\u5b66\u4e60\u4e2d\u975e\u5e38\u91cd\u8981\u7684\u6982\u5ff5\uff1b\u800c\u5728\u534a\u76d1\u7763\u5b66\u4e60\u4e2d\u7684\u6807\u7b7e\u4f20\u64ad\u7b97\u6cd5\u548c\u65e0\u76d1\u7763\u5b66\u4e60\u4e2d\u7684\u805a\u7c7b\u4e0e\u964d\u7ef4\u7b97\u6cd5\u65b9\u9762\uff0c\u4e5f\u6709\u975e\u5e38\u591a\u7684\u6559\u7a0b\u3002 GitHub \u5730\u5740 2. XGBoost star 18.3k fork 7.3k \u00b6 xgboost \u7684\u5168\u79f0\u662f eXtreme Gradient Boosting\uff0c\u5b83\u5728 Gradient Boosting \u6846\u67b6\u4e0b\u5b9e\u73b0\u4e86 c++\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u3002 XGBoost \u6700\u5927\u7684\u7279\u70b9\u5728\u4e8e\uff0c\u5b83\u80fd\u591f\u81ea\u52a8\u5229\u7528 CPU \u7684\u591a\u7ebf\u7a0b\u8fdb\u884c\u5e76\u884c\uff0c\u540c\u65f6\u5728\u7b97\u6cd5\u4e0a\u52a0\u4ee5\u6539\u8fdb\u63d0\u9ad8\u4e86\u7cbe\u5ea6\u3002\u5b83\u662f\u7ecf\u8fc7\u4f18\u5316\u7684\u5206\u5e03\u5f0f\u68af\u5ea6\u63d0\u5347\u5e93\uff0c\u53ef\u6269\u5c55\u6027\u5f3a\uff0c\u9ad8\u6548\u3001\u7075\u6d3b\u4e14\u53ef\u79fb\u690d\u3002 GitHub \u5730\u5740 3. Accord.NET star 3.7k fork 1.7k \u00b6 Accord.NET Framework \u662f\u4e00\u4e2a.NET \u673a\u5668\u5b66\u4e60\u6846\u67b6\uff0c\u7ed3\u5408\u4e86\u5b8c\u5168\u7528 C\uff03\u7f16\u5199\u7684\u97f3\u9891\u548c\u56fe\u50cf\u5904\u7406\u5e93\uff08 http://accord-framework.net/ \uff09\u3002 \u5b83\u53ef\u7528\u4e8e\u6784\u5efa\u751f\u4ea7\u7ea7\u8ba1\u7b97\u673a\u89c6\u89c9\u3001\u8ba1\u7b97\u673a\u8bd5\u542c\u3001\u4fe1\u53f7\u5904\u7406\u548c\u7edf\u8ba1\u5e94\u7528\u7a0b\u5e8f\u751a\u81f3\u7528\u4e8e\u5546\u4e1a\u7528\u9014\u7684\u5b8c\u6574\u6846\u67b6\uff0c\u5e76\u4e3a.NET \u7684\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u7edf\u8ba1\u5206\u6790\u3001\u673a\u5668\u5b66\u4e60\u3001\u56fe\u50cf\u5904\u7406\u3001\u8ba1\u7b97\u673a\u89c6\u89c9\u76f8\u5173\u7684\u7b97\u6cd5\u3002 GitHub \u5730\u5740 \u9002\u7528\u4e8e\u6df1\u5ea6\u5b66\u4e60\u7684\u5de5\u5177 4. TensorFlow star 141k fork 79.8k \u00b6 TensorFlow \u662f\u7528\u4e8e\u673a\u5668\u5b66\u4e60\u7684\u7aef\u5230\u7aef\u5f00\u6e90\u5e73\u53f0\uff08 https://tensorflow.org \uff09\uff0c\u4e5f\u662f 2019 \u5e74\u5ea6 GitHub \u4e0a\u6700\u53d7\u6b22\u8fce\u7684\u9879\u76ee\u3002 \u5b83\u5177\u6709\u5de5\u5177\u3001\u5e93\u3001\u793e\u533a\u8d44\u6e90\u5168\u9762\u4e14\u7075\u6d3b\u7684\u751f\u6001\u7cfb\u7edf\uff0c\u63d0\u4f9b\u7a33\u5b9a\u7684 Python \u548c C ++ API\uff0c\u4ee5\u53ca\u5176\u4ed6\u8bed\u8a00\u7684\u975e\u4fdd\u8bc1\u5411\u540e\u517c\u5bb9 API\uff1b\u80fd\u591f\u5e2e\u52a9\u5f00\u53d1\u8005\u4eec\u5728 ML \u9886\u57df\u7684\u7814\u7a76\u4e0e\u53d1\u5c55\uff0c\u5e76\u4f7f\u5f00\u53d1\u4eba\u5458\u8f7b\u677e\u6784\u5efa\u548c\u90e8\u7f72 ML \u652f\u6301\u7684\u5e94\u7528\u7a0b\u5e8f\u3002 GitHub \u5730\u5740 5. PyTorch star 35.8k fork 9k \u00b6 \u4f5c\u4e3a TensorFlow \u5f3a\u6709\u529b\u7ade\u4e89\u5bf9\u624b\u7684 PyTorch\uff0c\u4e5f\u662f\u76ee\u524d\u8f83\u4e3a\u4e3b\u6d41\u7684\u6df1\u5ea6\u5b66\u4e60\u5de5\u5177\u4e4b\u4e00\u3002 PyTorch \u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u673a\u5668\u5b66\u4e60\u6846\u67b6\uff0c\u63d0\u4f9b\u4e86\u4e24\u4e2a\u9ad8\u7ea7\u529f\u80fd\uff0c\u5305\u62ec\uff1a\u5177\u6709\u5f3a\u6709\u529b\u7684 GPU \u52a0\u901f\u5ea6\u7684\u5f20\u91cf\u8ba1\u7b97\uff08\u5982 NumPy\uff09\uff0c\u4ee5\u53ca\u57fa\u4e8e\u78c1\u5e26\u81ea\u52a8\u8c03\u6574\u7cfb\u7edf\u6784\u5efa\u7684\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc\uff1b\u53ef\u52a0\u5feb\u4ece\u7814\u7a76\u539f\u578b\u5230\u751f\u4ea7\u90e8\u7f72\u7684\u8fc7\u7a0b\u3002 \u6b64\u524d\uff0cOpenAI \u5b98\u65b9\u5ba3\u5e03\u4e86\u300c\u5168\u9762\u8f6c\u5411 PyTorch\u300d\u7684\u6d88\u606f\uff0c\u8ba1\u5212\u5c06\u81ea\u5bb6\u5e73\u53f0\u7684\u6240\u6709\u6846\u67b6\u7edf\u4e00\u4e3a PyTorch\uff0c\u4e5f\u8fdb\u4e00\u6b65\u4f53\u73b0\u4e86 PyTorch \u5728\u6df1\u5ea6\u5b66\u4e60\u65b9\u9762\u7684\u6f5c\u529b\u3002 GitHub \u5730\u5740 6. MXNET star 18.4k fork 6.5k \u00b6 MXNet \u662f\u4e00\u4e2a\u529f\u80fd\u9f50\u5168\uff0c\u53ef\u7f16\u7a0b\u548c\u53ef\u6269\u5c55\u7684\u6df1\u5165\u5b66\u4e60\u6846\u67b6\uff0c\u652f\u6301\u6700\u5148\u8fdb\u7684\u6df1\u5165\u5b66\u4e60\u6a21\u5f0f\uff08 https://mxnet.apache.org/ \uff09\u3002 MXNet \u63d0\u4f9b\u4e86\u6df7\u5408\u7f16\u7a0b\u6a21\u578b\uff08\u547d\u4ee4\u5f0f\u548c\u58f0\u660e\u5f0f\uff09\u548c\u5927\u91cf\u7f16\u7a0b\u8bed\u8a00\u7684\u4ee3\u7801\uff08\u5305\u62ec Python\u3001C++\u3001R\u3001Scala\u3001Julia\u3001Matlab \u548c JavaScript\uff09\u7684\u80fd\u529b\uff0c\u662f\u4e00\u4e2a\u6613\u5b89\u88c5\u6613\u4e0a\u624b\u7684\u5f00\u6e90\u6df1\u5ea6\u5b66\u4e60\u5de5\u5177\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e2a python \u63a5\u53e3 gluon\uff0c\u80fd\u591f\u8ba9\u5f00\u53d1\u8005\u8fc5\u901f\u642d\u5efa\u8d77\u795e\u7ecf\u7f51\u7edc\uff0c\u5e76\u8fdb\u884c\u9ad8\u6548\u8bad\u7ec3\u3002 GitHub \u5730\u5740\uff1a https://github.com/apache/incubator-mxnet \u4e03\u3001Sonnet star 8.1k fork 1.2k Sonnet \u662f\u7531 DeepMind \u53d1\u5e03\u7684\uff0c\u5728 TensorFlow \u4e0a\u7528\u4e8e\u6784\u5efa\u590d\u6742\u795e\u7ecf\u7f51\u7edc\u7684\u5f00\u6e90\u5e93\u3002 Sonnet \u4e3b\u8981\u7528\u4e8e\u8ba9 DeepMind \u5f00\u53d1\u7684\u5176\u5b83\u6a21\u578b\u66f4\u5bb9\u6613\u5171\u4eab\uff0cSonnet \u53ef\u4ee5\u5728\u5185\u90e8\u7684\u5176\u5b83\u5b50\u6a21\u5757\u4e2d\u7f16\u5199\u6a21\u5757\uff0c\u6216\u8005\u5728\u6784\u5efa\u65b0\u6a21\u5757\u65f6\u4f20\u9012\u5176\u5b83\u6a21\u578b\u4f5c\u4e3a\u53c2\u6570\uff1b\u540c\u65f6\uff0cSonnet \u63d0\u4f9b\u5b9e\u7528\u7a0b\u5e8f\u6765\u5904\u7406\u8fd9\u4e9b\u4efb\u610f\u5c42\u6b21\u7ed3\u6784\uff0c\u4ee5\u4fbf\u4e8e\u4f7f\u7528\u4e0d\u540c\u7684 RNN \u8fdb\u884c\u5b9e\u9a8c\uff0c\u6574\u4e2a\u8fc7\u7a0b\u65e0\u9700\u7e41\u7410\u7684\u4ee3\u7801\u6539\u5199\u3002 GitHub \u5730\u5740\uff1a https://github.com/deepmind/sonnet \u516b\u3001DL4J star 11.5k fork 4.8k DL4J \u662f\u91c7\u7528 java \u548c jvm \u7f16\u5199\u7684\u5f00\u6e90\u6df1\u5ea6\u5b66\u4e60\u5e93\uff0c\u652f\u6301\u5404\u79cd\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u3002DL4J \u6700\u91cd\u8981\u7684\u7279\u70b9\u662f\u652f\u6301\u5206\u5e03\u5f0f\uff0c\u53ef\u4ee5\u5728 Spark \u548c Hadoop \u4e0a\u8fd0\u884c\uff0c\u5b83\u652f\u6301\u5206\u5e03\u5f0f CPU \u548c GPU \u8fd0\u884c\uff0c\u5e76\u53ef\u4ee5\u5229\u7528 Spark \u5728\u591a\u53f0\u670d\u52a1\u5668\u591a\u4e2a GPU \u4e0a\u5f00\u5c55\u5206\u5e03\u5f0f\u7684\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u8bad\u7ec3\uff0c\u8ba9\u6a21\u578b\u8fd0\u884c\u66f4\u5feb\u3002 DL4J \u7684\u57fa\u672c\u7279\u6027\u5305\u62ec\uff1aDL4J \u4e2d\u7684\u795e\u7ecf\u7f51\u7edc\u8bad\u7ec3\u901a\u8fc7\u7c07\u7684\u8fed\u4ee3\u5e76\u884c\u8ba1\u7b97\uff1b\u6574\u4e2a\u8fc7\u7a0b\u7531 Hadoop \u548c Spark \u67b6\u6784\u652f\u6301\uff1b\u4f7f\u7528 Java \u5141\u8bb8\u5f00\u53d1\u8005\u5728 Android \u8bbe\u5907\u7684\u7a0b\u5e8f\u5f00\u53d1\u5468\u671f\u4e2d\u4f7f\u7528\u3002 GitHub \u5730\u5740\uff1a https://github.com/eclipse/deeplearning4j \u9002\u7528\u4e8e\u5f3a\u5316\u5b66\u4e60\u7684\u5de5\u5177 \u4e5d\u3001Gym star 19.6k fork 5.5k Gym \u662f\u4e00\u4e2a\u7528\u4e8e\u5f00\u53d1\u548c\u6bd4\u8f83\u5f3a\u5316\u5b66\u4e60\u7b97\u6cd5\u7684\u5de5\u5177\uff08 https://gym.openai.com/ \uff09\u3002 \u5b83\u65e0\u9700\u5bf9 agent \u7684\u5148\u9a8c\u77e5\u8bc6\uff0c\u5e76\u4e14\u91c7\u7528 python \u4f5c\u4e3a\u4e3b\u8981\u5f00\u53d1\u8bed\u8a00\uff0c\u56e0\u6b64\u53ef\u4ee5\u7b80\u5355\u7684\u548c TensorFlow \u7b49\u6df1\u5ea6\u5b66\u4e60\u5e93\u8fdb\u884c\u5f00\u53d1\u96c6\u6210\uff0c\u540c\u65f6\u76f4\u89c2\u7684\u5c06\u5b66\u4e60\u7ed3\u679c\u7528\u753b\u9762\u76f4\u89c2\u7684\u5c55\u793a\u51fa\u6765\u3002Gym \u5e93\u4e2d\u5305\u542b\u8bb8\u591a\u53ef\u4ee5\u7528\u4e8e\u5236\u5b9a\u5f3a\u5316\u5b66\u4e60\u7b97\u6cd5\u7684\u6d4b\u8bd5\u95ee\u9898\uff08\u5373\u73af\u5883\uff09\uff0c\u8fd9\u4e9b\u73af\u5883\u6709\u5171\u4eab\u63a5\u53e3\uff0c\u5141\u8bb8\u7f16\u5199\u901a\u7528\u7684\u7b97\u6cd5\u3002 GitHub \u5730\u5740\uff1a https://github.com/openai/gym \u5341\u3001Dopamine star 8.7k fork 1.1k \u4e00\u6b3e\u57fa\u4e8e Tensorflow \u7684\u6846\u67b6\uff0c\u65e8\u5728\u4e3a\u65b0\u624b\u548c\u7ecf\u9a8c\u4e30\u5bcc\u7684\u5f3a\u5316\u5b66\u4e60\u7814\u7a76\u4eba\u5458\u63d0\u4f9b\u517c\u5177\u7075\u6d3b\u6027\u3001\u7a33\u5b9a\u6027\u548c\u53ef\u91cd\u590d\u6027\u7684\u65b0\u5de5\u5177\u3002 \u8be5\u6846\u67b6\u7684\u7075\u611f\u6765\u6e90\u4e8e\u5927\u8111\u4e2d\u5956\u52b1-\u52a8\u673a\u884c\u4e3a\u7684\u4e3b\u8981\u6210\u5206\u300c\u591a\u5df4\u80fa\u53d7\u4f53\u300d\uff0c\u8fd9\u53cd\u6620\u4e86\u795e\u7ecf\u79d1\u5b66\u4e0e\u5f3a\u5316\u5b66\u4e60\u7814\u7a76\u4e4b\u95f4\u7684\u5f3a\u5927\u7684\u5386\u53f2\u8054\u7cfb\uff0c\u662f\u4e00\u4e2a\u5f3a\u5316\u5b66\u4e60\u7b97\u6cd5\u5feb\u901f\u539f\u578b\u7684\u7814\u7a76\u6846\u67b6\u3002 GitHub \u5730\u5740\uff1a https://github.com/google/dopamine \u5341\u4e00\u3001ReAgent star 2.4k fork 312 Facebook \u63a8\u51fa\u7684\u4e00\u4e2a\u6784\u5efa\u51b3\u7b56\u63a8\u7406\u7cfb\u7edf\u7684\u6a21\u5757\u5316\u7aef\u5230\u7aef\u5e73\u53f0\uff0c\u7528\u4e8e\u63a8\u7406\u7cfb\u7edf\uff08\u5f3a\u5316\u5b66\u4e60\u3001\u4e0a\u4e0b\u6587\u7ba1\u7406\u7b49\uff09, \u53ef\u4ee5\u663e\u8457\u7b80\u5316\u63a8\u7406\u6a21\u578b\u6784\u5efa\u8fc7\u7a0b\u3002 ReAgent \u7531\u4e09\u90e8\u5206\u7ec4\u6210\uff1a\u751f\u6210\u51b3\u7b56\u5e76\u63a5\u6536\u51b3\u7b56\u53cd\u9988\u7684\u6a21\u578b\u3001\u7528\u4e8e\u8bc4\u4f30\u65b0\u6a21\u578b\u90e8\u7f72\u524d\u6027\u80fd\u7684\u6a21\u5757\u53ca\u5feb\u901f\u8fed\u4ee3\u7684\u670d\u52a1\u5e73\u53f0\u3002\u540c\u65f6\uff0cReAgent \u4e5f\u662f\u521b\u5efa\u57fa\u4e8e AI \u7684\u63a8\u7406\u7cfb\u7edf\u7684\u6700\u5168\u9762\u3001\u6a21\u5757\u5316\u5f00\u6e90\u5e73\u53f0\uff0c\u5e76\u4e14\u662f\u7b2c\u4e00\u4e2a\u5305\u542b\u7b56\u7565\u8bc4\u4f30\u7684\u5e73\u53f0\uff0c\u5c06\u4f1a\u52a0\u901f\u76f8\u5173\u51b3\u7b56\u7cfb\u7edf\u7684\u90e8\u7f72\u3002 GitHub \u5730\u5740\uff1a https://github.com/facebookresearch/ReAgent \u5341\u4e8c\u3001Tensorlayer star 5.9k fork 1.3k \u8fd9\u662f\u4e00\u4e2a\u9762\u5411\u79d1\u5b66\u5bb6\u7684\u6df1\u5ea6\u5b66\u4e60\u548c\u5f3a\u5316\u5b66\u4e60\u5e93\u3002TensorLayer \u7531\u5e95\u5c42\u5230\u4e0a\u5c42\u53ef\u4ee5\u5206\u4e3a\u4e09\u5927\u6a21\u5757\uff1a\u795e\u7ecf\u7f51\u7edc\u6a21\u5757\u3001\u5de5\u4f5c\u6d41\u6a21\u5757\u3001\u5e94\u7528\u6a21\u5757\u3002 \u4e0e Keras \u548c Pytorch \u76f8\u6bd4\uff0cTensorLayer \u63d0\u9ad8\u4e86\u795e\u7ecf\u7f51\u7edc\u6a21\u5757\u7684\u62bd\u8c61\u5316\u8bbe\u8ba1\uff0c\u540c\u65f6\u5b9e\u73b0\u4e86\u964d\u4f4e\u4f7f\u7528\u73b0\u6709\u5c42\u548c\u5f00\u53d1\u65b0\u5c42\u7684\u5de5\u4f5c\u91cf\u3002 GitHub \u5730\u5740\uff1a https://github.com/tensorlayer/tensorlayer \u9002\u7528\u4e8e\u81ea\u7136\u8bed\u8a00\u5904\u7406\u7684\u5de5\u5177 \u5341\u4e09\u3001BERT star 21.3k fork 5.8k BERT \u662f\u4e00\u4e2a\u57fa\u4e8e\u53cc\u5411 Transformer \u7684\u5927\u89c4\u6a21\u9884\u8bad\u7ec3\u8bed\u8a00\u6a21\u578b\uff0c\u7528\u4e8e\u5bf9\u5927\u91cf\u672a\u6807\u8bb0\u7684\u6587\u672c\u6570\u636e\u8fdb\u884c\u9884\u8bad\u7ec3\uff0c\u4ee5\u5b66\u4e60\u4e00\u79cd\u8bed\u8a00\u8868\u793a\u5f62\u5f0f\uff0c\u8fd9\u79cd\u8bed\u8a00\u8868\u793a\u5f62\u5f0f\u53ef\u7528\u4e8e\u5bf9\u7279\u5b9a\u673a\u5668\u5b66\u4e60\u4efb\u52a1\u8fdb\u884c\u5fae\u8c03\u3002 BERT \u88ab\u79f0\u4e3a\u662f NLP \u9886\u57df\u4e2d\u91cc\u7a0b\u7891\u7684\u8fdb\u5c55\uff1b\u76ee\u524d\uff0cBERT \u4e5f\u662f NLP \u6df1\u5ea6\u5b66\u4e60\u4e2d\u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206\uff0c\u5f88\u591a\u4e4b\u540e\u7684\u81ea\u7136\u8bed\u8a00\u5904\u7406\u6a21\u578b\u90fd\u662f\u5728\u6b64\u57fa\u7840\u4e0a\u4f18\u5316\u4e0e\u6539\u8fdb\u800c\u5f97\u3002 GitHub \u5730\u5740\uff1a https://github.com/google-research/bert \u5341\u56db\u3001Transformers star 21.7k fork 4.8k Transformers \u662f\u795e\u7ecf\u673a\u5668\u7ffb\u8bd1\u4e2d\u4f7f\u7528\u7684\u4e00\u79cd\u795e\u7ecf\u7f51\u7edc\uff0c\u5b83\u4e3b\u8981\u6d89\u53ca\u5c06\u8f93\u5165\u5e8f\u5217\u8f6c\u6362\u4e3a\u8f93\u51fa\u5e8f\u5217\u7684\u4efb\u52a1\uff0c\u8fd9\u4e9b\u4efb\u52a1\u5305\u62ec\u8bed\u97f3\u8bc6\u522b\u548c\u6587\u672c\u8f6c\u6362\u8bed\u97f3\u3002 \u8fd9\u7c7b\u4efb\u52a1\u9700\u8981\u300c\u8bb0\u5fc6\u300d\uff0c\u4e0b\u4e00\u4e2a\u53e5\u5b50\u5fc5\u987b\u4e0e\u524d\u4e00\u4e2a\u53e5\u7684\u4e0a\u4e0b\u6587\u76f8\u5173\u8054\uff08\u8fd9\u662f\u76f8\u5f53\u5173\u952e\u7684\uff09\uff0c\u4ee5\u514d\u4e22\u5931\u91cd\u8981\u7684\u4fe1\u606f\u3002\u901a\u8fc7\u5c06 attention \u5e94\u7528\u5230\u6b63\u5728\u4f7f\u7528\u7684\u5355\u8bcd\u4e0a\uff0c\u5219\u53ef\u4ee5\u89e3\u51b3\u5f53\u53e5\u5b50\u592a\u957f\u7684\u65f6\uff0cRNN \u6216 CNN \u65e0\u6cd5\u8ddf\u8e2a\u4e0a\u4e0b\u6587\u548c\u5185\u5bb9\u7684\u95ee\u9898\u3002 GitHub \u5730\u5740\uff1a https://github.com/huggingface/transformers \u5341\u4e94\u3001AllenNLP star 8k fork 1.7k \u4e00\u4e2a\u57fa\u4e8e PyTorch \u7684 NLP \u7814\u7a76\u5e93\uff0c\u5229\u7528\u6df1\u5ea6\u5b66\u4e60\u6765\u8fdb\u884c\u81ea\u7136\u8bed\u8a00\u7406\u89e3\uff0c\u901a\u8fc7\u5904\u7406\u4f4e\u5c42\u6b21\u7684\u7ec6\u8282\u3001\u63d0\u4f9b\u9ad8\u8d28\u91cf\u7684\u53c2\u8003\u5b9e\u73b0\uff0c\u80fd\u8f7b\u677e\u5feb\u901f\u5730\u5e2e\u52a9\u7814\u7a76\u5458\u6784\u5efa\u65b0\u7684\u8bed\u8a00\u7406\u89e3\u6a21\u578b\u3002 AllenNLP \u80fd\u8ba9\u8bbe\u8ba1\u548c\u8bc4\u4f30\u65b0\u7684\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u53d8\u5f97\u7b80\u5355\uff0c\u51e0\u4e4e\u9002\u7528\u4e8e\u4efb\u4f55 NLP \u95ee\u9898\uff0c\u901a\u8fc7\u5229\u7528\u4e00\u4e9b\u57fa\u7840\u7ec4\u4ef6\uff0c\u4f60\u53ef\u4ee5\u8f7b\u677e\u5730\u5728\u4e91\u7aef\u6216\u662f\u4f60\u81ea\u5df1\u7684\u7b14\u8bb0\u672c\u4e0a\u8dd1\u6a21\u578b\u3002 GitHub \u5730\u5740\uff1a https://github.com/allenai/allennlp \u5341\u516d\u3001flair star 8.1k fork 1k \u4e00\u6b3e\u7b80\u5355\u6613\u7528\u7684 Python NLP \u5e93\uff0c\u5141\u8bb8\u5c06\u5f53\u524d\u6700\u4f18\u81ea\u7136\u8bed\u8a00\u5904\u7406\uff08NLP\uff09\u6a21\u578b\u5e94\u7528\u4e8e\u6587\u672c\uff0c\u5982\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\uff08NER\uff09\u3001\u8bcd\u6027\u6807\u6ce8\uff08PoS\uff09\u3001\u8bcd\u4e49\u6d88\u6b67\u548c\u5206\u7c7b\u3002 Flair \u57fa\u4e8e Pytorch \u7684 NLP \u6846\u67b6\uff0c\u5b83\u7684\u63a5\u53e3\u76f8\u5bf9\u66f4\u7b80\u5355\uff0c\u5141\u8bb8\u7528\u6237\u4f7f\u7528\u548c\u7ed3\u5408\u4e0d\u540c\u7684\u8bcd\u5d4c\u5165\u548c\u6587\u6863\u5d4c\u5165\uff0c\u5305\u62ec Flair \u5d4c\u5165\u3001BERT \u5d4c\u5165\u548c ELMo \u5d4c\u5165\u3002 GitHub \u5730\u5740\uff1a https://github.com/flairNLP/flair \u5341\u4e03\u3001spaCy star 15.7k fork 2.8k \u8fd9\u662f\u4e00\u4e2a\u5177\u6709\u5de5\u4e1a\u5f3a\u5ea6\u7ea7\u7684 Python \u81ea\u7136\u8bed\u8a00\u5904\u7406\u5de5\u5177\u5305\u3002 \u5b83\u5df2\u7ecf\u6210\u4e3a Python \u4e2d\u6700\u5e7f\u6cdb\u4f7f\u7528\u7684\u5de5\u4e1a\u7ea7\u81ea\u7136\u8bed\u8a00\u5e93\u4e4b\u4e00\uff0c\u5b83\u63d0\u4f9b\u4e86\u5f53\u524d\u6700\u4f73\u7684\u51c6\u786e\u6027\u548c\u6548\u7387\uff0c\u5e76\u4e14\u6709\u4e00\u4e2a\u6d3b\u8dc3\u7684\u5f00\u6e90\u793e\u533a\u652f\u6301\u3002 GitHub \u5730\u5740\uff1a https://github.com/explosion/spaCy \u5341\u516b\u3001fastText star 20.5k fork 3.9k FastText \u662f Facebook \u4eba\u5de5\u667a\u80fd\u7814\u7a76\u5b9e\u9a8c\u5ba4\uff08FAIR\uff09\u5f00\u6e90\u7684\u4e00\u4e2a\u6587\u672c\u5904\u7406\u5e93\uff0c\u4ed6\u662f\u4e00\u4e2a\u4e13\u95e8\u7528\u4e8e\u6587\u672c\u5206\u7c7b\u548c\u5916\u6587\u672c\u8868\u793a\u7684\u5e93\uff0c\u7528\u4e8e\u9ad8\u6548\u6587\u672c\u5206\u7c7b\u548c\u8868\u793a\u5b66\u4e60\u3002 fastText \u7684\u6838\u5fc3\u662f\u4f7f\u7528\u300c\u8bcd\u888b\u300d\u7684\u65b9\u5f0f\uff0c\u4e0d\u7ba1\u6587\u5b57\u7684\u987a\u5e8f\uff1b\u4f46\u5b83\u4e0d\u662f\u7ebf\u6027\u7684\uff0c\u800c\u662f\u4f7f\u7528\u5206\u5c42\u5206\u7c7b\u5668\u6765\u5c06\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u4f4e\u5230\u5bf9\u6570\u7ea7\u522b\uff0c\u5e76\u4e14\u5728\u5177\u6709\u66f4\u9ad8\u5206\u7c7b\u6570\u91cf\u7684\u5927\u6570\u636e\u96c6\u4e0a\u66f4\u9ad8\u6548\u3002 GitHub \u5730\u5740\uff1a https://github.com/facebookresearch/fastText \u9002\u7528\u4e8e\u8bed\u97f3\u8bc6\u522b\u7684\u5de5\u5177 \u5341\u4e5d\u3001Kaldi star 8.2k fork 3.7k Kaldi \u662f\u76ee\u524d\u4f7f\u7528\u5e7f\u6cdb\u7684\u5f00\u53d1\u8bed\u97f3\u8bc6\u522b\u5e94\u7528\u7684\u6846\u67b6\u3002 \u8be5\u8bed\u97f3\u8bc6\u522b\u5de5\u5177\u5305\u4f7f\u7528\u4e86 C ++\u7f16\u5199\uff0c\u7814\u7a76\u5f00\u53d1\u4eba\u5458\u5229\u7528 Kaldi \u53ef\u4ee5\u8bad\u7ec3\u51fa\u8bed\u97f3\u8bc6\u522b\u795e\u7ecf\u7f51\u8def\u6a21\u578b\uff0c\u4f46\u5982\u679c\u9700\u8981\u5c06\u8bad\u7ec3\u5f97\u5230\u7684\u6a21\u578b\u90e8\u7f72\u5230\u79fb\u52a8\u7aef\u8bbe\u5907\u4e0a\uff0c\u901a\u5e38\u9700\u8981\u5927\u91cf\u7684\u79fb\u690d\u5f00\u53d1\u5de5\u4f5c\u3002 GitHub \u5730\u5740\uff1a https://github.com/kaldi-asr/kaldi \u4e8c\u5341\u3001DeepSpeech star 13k fork 2.4k DeepSpeech \u662f\u4e00\u4e2a\u5f00\u6e90\u8bed\u97f3\u8f6c\u6587\u672c\u5f15\u64ce\uff0c\u4f7f\u7528\u57fa\u4e8e\u767e\u5ea6\u6df1\u5ea6\u8bed\u97f3\u7814\u7a76\u8bba\u6587\u7684\u673a\u5668\u5b66\u4e60\u6280\u672f\u8bad\u7ec3\u7684\u6a21\u578b\u3002\u5176\u4e2d\uff0c\u8be5\u9879\u76ee\u8fd0\u7528\u5230\u4e86 Google \u7684 TensorFlow \u6765\u7b80\u5316\u5b9e\u65bd\u8fc7\u7a0b\u3002 GitHub \u5730\u5740\uff1a https://github.com/mozilla/DeepSpeech \u4e8c\u5341\u4e00\u3001wav2letter star 4.8k fork 770 \u8fd9\u662f\u7531 Facebook \u4eba\u5de5\u667a\u80fd\u7814\u7a76\u9662\u53d1\u5e03\u7684\u9996\u4e2a\u5168\u5377\u79ef\u81ea\u52a8\u8bed\u97f3\u8bc6\u522b\u5de5\u5177\u5305\uff0c\u5b83\u662f\u4e00\u4e2a\u7b80\u5355\u9ad8\u6548\u7684\u7aef\u5230\u7aef\u81ea\u52a8\u8bed\u97f3\u8bc6\u522b\uff08ASR\uff09\u7cfb\u7edf\u3002 wav2letter \u7684\u6838\u5fc3\u8bbe\u8ba1\u57fa\u4e8e\u4e09\u4e2a\u5173\u952e\u539f\u5219\uff0c\u5305\u62ec\uff1a\u5b9e\u73b0\u5728\u5305\u542b\u6210\u5343\u4e0a\u4e07\u5c0f\u65f6\u8bed\u97f3\u6570\u636e\u96c6\u4e0a\u7684\u9ad8\u6548\u6a21\u578b\u8bad\u7ec3\uff1b\u7b80\u5355\u53ef\u6269\u5c55\u6a21\u578b\uff0c\u53ef\u4ee5\u63a5\u5165\u65b0\u7684\u7f51\u7edc\u67b6\u6784\u3001\u635f\u5931\u51fd\u6570\u4ee5\u53ca\u5176\u4ed6\u8bed\u97f3\u8bc6\u522b\u7cfb\u7edf\u4e2d\u7684\u6838\u5fc3\u64cd\u4f5c\uff1b\u4ee5\u53ca\u5e73\u6ed1\u8bed\u97f3\u8bc6\u522b\u6a21\u578b\u4ece\u7814\u7a76\u5230\u751f\u4ea7\u90e8\u7f72\u7684\u8fc7\u6e21\u3002 GitHub \u5730\u5740\uff1a https://github.com/facebookresearch/wav2letter \u9002\u7528\u4e8e\u8ba1\u7b97\u673a\u89c6\u89c9\u7684\u5de5\u5177 \u4e8c\u5341\u4e8c\u3001YOLO star 16.2k fork 10.4k YOLO \u662f\u5f53\u524d\u6df1\u5ea6\u5b66\u4e60\u9886\u57df\u89e3\u51b3\u56fe\u50cf\u68c0\u6d4b\u95ee\u9898\u6700\u5148\u8fdb\u7684\u5b9e\u65f6\u7cfb\u7edf\u3002\u5728\u68c0\u6d4b\u8fc7\u7a0b\u4e2d\uff0cYOLO \u9996\u5148\u5c06\u56fe\u50cf\u5212\u5206\u4e3a\u89c4\u5b9a\u7684\u8fb9\u754c\u6846\uff0c\u7136\u540e\u5bf9\u6240\u6709\u8fb9\u754c\u6846\u5e76\u884c\u8fd0\u884c\u8bc6\u522b\u7b97\u6cd5\uff0c\u6765\u786e\u5b9a\u7269\u4f53\u6240\u5c5e\u7684\u7c7b\u522b\u3002\u786e\u5b9a\u7c7b\u522b\u4e4b\u540e\uff0cYOLO \u518d\u667a\u80fd\u5730\u5408\u5e76\u8fd9\u4e9b\u8fb9\u754c\u6846\uff0c\u5728\u7269\u4f53\u5468\u56f4\u5f62\u6210\u6700\u4f18\u8fb9\u754c\u6846\u3002 \u8fd9\u4e9b\u6b65\u9aa4\u5168\u90e8\u5e76\u884c\u8fdb\u884c\uff0c\u56e0\u6b64 YOLO \u80fd\u591f\u5b9e\u73b0\u5b9e\u65f6\u8fd0\u884c\uff0c\u5e76\u4e14\u6bcf\u79d2\u5904\u7406\u591a\u8fbe 40 \u5f20\u56fe\u50cf\u3002\u636e\u5b98\u7f51\u663e\u793a\uff0c\u5728 Pascal Titan X \u4e0a\uff0c\u5b83\u4ee5 30 FPS \u7684\u901f\u5ea6\u5904\u7406\u56fe\u50cf\uff0c\u5e76\u4e14\u5728 COCO \u6d4b\u8bd5\u5f00\u53d1\u4e2d\u7684 mAP \u4e3a 57.9\uff05\u3002 GitHub \u5730\u5740\uff1a https://github.com/allanzelener/YAD2K \u4e8c\u5341\u4e09\u3001OpenCV star 41.9k fork 32.4k OpenCV \u662f\u82f1\u7279\u5c14\u5f00\u6e90\u7684\u8de8\u5e73\u53f0\u8ba1\u7b97\u673a\u89c6\u89c9\u5e93\uff08 https://opencv.org \uff09\uff0c\u88ab\u79f0\u4e3a CV \u9886\u57df\u5f00\u53d1\u8005\u4e0e\u7814\u7a76\u8005\u7684\u5fc5\u5907\u5de5\u5177\u5305\u3002 \u8fd9\u662f\u4e00\u5957\u5305\u542b\u4ece\u56fe\u50cf\u9884\u5904\u7406\u5230\u9884\u8bad\u7ec3\u6a21\u578b\u8c03\u7528\u7b49\u5927\u91cf\u89c6\u89c9 API \u7684\u5e93\uff0c\u5e76\u53ef\u4ee5\u5904\u7406\u56fe\u50cf\u8bc6\u522b\u3001\u76ee\u6807\u68c0\u6d4b\u3001\u56fe\u50cf\u5206\u5272\u548c\u884c\u4eba\u518d\u8bc6\u522b\u7b49\u4e3b\u6d41\u89c6\u89c9\u4efb\u52a1\u3002\u5176\u6700\u663e\u8457\u7684\u7279\u70b9\u662f\u5b83\u63d0\u4f9b\u4e86\u6574\u5957\u6d41\u7a0b\u7684\u5de5\u5177\uff0c\u56e0\u6b64\u5f00\u53d1\u8005\u65e0\u9700\u4e86\u89e3\u5404\u4e2a\u6a21\u578b\u7684\u539f\u7406\u5c31\u80fd\u7528 API \u6784\u5efa\u89c6\u89c9\u4efb\u52a1\u3002\u5b83\u5177\u5907 C++\u3001Python \u548c Java \u63a5\u53e3\uff0c\u652f\u6301 Windows\u3001Linux\u3001Mac OS\u3001iOS \u548c Android \u7cfb\u7edf\u3002 GitHub \u5730\u5740\uff1a https://github.com/opencv/opencv \u4e8c\u5341\u56db\u3001Detectron2 star 7.7k fork 1.4k Detectron2 \u5219\u662f PyTorch 1.3 \u4e2d\u4e00\u91cd\u5927\u65b0\u5de5\u5177\uff0c\u5b83\u6e90\u4e8e maskrcnn \u57fa\u51c6\u6d4b\u8bd5\uff0c\u4e5f\u662f\u5bf9\u5148\u524d\u7248\u672c detectron \u7684\u4e00\u6b21\u5f7b\u5e95\u91cd\u5199\u3002 Detectron2 \u901a\u8fc7\u5168\u65b0\u7684\u6a21\u5757\u5316\u8bbe\u8ba1\uff0c\u53d8\u5f97\u66f4\u7075\u6d3b\u4e14\u6613\u4e8e\u6269\u5c55\uff0c\u5b83\u80fd\u591f\u5728\u5355\u4e2a\u6216\u591a\u4e2a GPU \u670d\u52a1\u5668\u4e0a\u63d0\u4f9b\u66f4\u5feb\u901f\u7684\u8bad\u7ec3\u901f\u5ea6\uff0c\u5305\u542b\u4e86\u66f4\u5927\u7684\u7075\u6d3b\u6027\u4e0e\u6269\u5c55\u6027\uff0c\u5e76\u589e\u5f3a\u4e86\u53ef\u7ef4\u62a4\u6027\u548c\u53ef\u4f38\u7f29\u6027\uff0c\u4ee5\u652f\u6301\u5728\u751f\u4ea7\u4e2d\u7684\u7528\u4f8b\u3002 GitHub \u5730\u5740\uff1a https://github.com/facebookresearch/detectron2 \u4e8c\u5341\u4e94\u3001OpenPose star 15.9k fork 4.7k OpenPose \u4eba\u4f53\u59ff\u6001\u8bc6\u522b\u9879\u76ee\u662f\u7f8e\u56fd\u5361\u8010\u57fa\u6885\u9686\u5927\u5b66\uff08CMU\uff09\u57fa\u4e8e\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u548c\u76d1\u7763\u5b66\u4e60\u5e76\u4ee5 caffe \u4e3a\u6846\u67b6\u5f00\u53d1\u7684\u5f00\u6e90\u5e93\u3002 \u5b83\u53ef\u4ee5\u5b9e\u73b0\u4eba\u4f53\u52a8\u4f5c\u3001\u9762\u90e8\u8868\u60c5\u3001\u624b\u6307\u8fd0\u52a8\u7b49\u59ff\u6001\u4f30\u8ba1\u3002\u9002\u7528\u4e8e\u5355\u4eba\u548c\u591a\u4eba\uff0c\u5177\u6709\u6781\u597d\u7684\u9c81\u68d2\u6027\u3002\u662f\u4e16\u754c\u4e0a\u9996\u4e2a\u57fa\u4e8e\u6df1\u5ea6\u5b66\u4e60\u7684\u5b9e\u65f6\u591a\u4eba\u4e8c\u7ef4\u59ff\u6001\u4f30\u8ba1\u5e94\u7528\uff0c\u5f88\u591a\u4eba\u4f53\u59ff\u6001\u4f30\u8ba1\u5b9e\u4f8b\u90fd\u662f\u57fa\u4e8e\u5b83\u5b9e\u73b0\uff0c\u5982\u52a8\u4f5c\u91c7\u96c6\u30013D \u8bd5\u8863\u3001\u7ed8\u753b\u8f85\u52a9\u7b49\u3002 GitHub \u5730\u5740\uff1a https://github.com/CMU-Perceptual-Computing-Lab/openpose \u4e8c\u5341\u516d\u3001facenet star 10k fork 4.1k FaceNet \u91c7\u7528\u4e86\u6df1\u5ea6\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\uff08CNN\uff09\u5b66\u4e60\u5c06\u56fe\u50cf\u6620\u5c04\u5230\u6b27\u5f0f\u7a7a\u95f4\uff0c\u4e5f\u88ab\u79f0\u4e3a\u901a\u7528\u4eba\u8138\u8bc6\u522b\u7cfb\u7edf\u3002 \u8be5\u7cfb\u7edf\u53ef\u4ece\u4eba\u8138\u4e2d\u63d0\u53d6\u9ad8\u8d28\u91cf\u7684\u7279\u5f81\uff0c\u79f0\u4e3a\u4eba\u8138\u5d4c\u5165\uff08face embeddings\uff09\uff0c\u53ef\u7528\u4e8e\u8bad\u7ec3\u4eba\u8138\u8bc6\u522b\u7cfb\u7edf\uff0c\u4ece\u800c\u5b9e\u73b0\u5bf9\u4eba\u8138\u7684\u9a8c\u8bc1\u3002\u5b83\u5728 LFW \u6570\u636e\u96c6\u4e0a\u6d4b\u8bd5\u7684\u51c6\u786e\u7387\u8fbe\u5230\u4e86 99.63%\uff0c\u5728 YouTube Faces DB \u6570\u636e\u96c6\u4e0a\u51c6\u786e\u7387\u4e3a 95.12%\u3002 GitHub \u5730\u5740\uff1a https://github.com/davidsandberg/facenet \u9002\u7528\u4e8e\u5206\u5e03\u5f0f\u8bad\u7ec3\u7684\u5de5\u5177 \u4e8c\u5341\u4e03\u3001Spark MLlib star 25.1k fork 21.1k Spark \u662f\u4e00\u4e2a\u5f00\u6e90\u96c6\u7fa4\u8fd0\u7b97\u6846\u67b6\uff0c\u4e5f\u662f\u73b0\u5728\u5927\u6570\u636e\u9886\u57df\u70ed\u95e8\u5f00\u6e90\u8f6f\u4ef6\u4e4b\u4e00\uff08 https://spark.apache.org/mllib/ \uff09\u3002 \u7531\u4e8e Spark \u4f7f\u7528\u4e86\u5185\u5b58\u5185\u8fd0\u7b97\u6280\u672f\uff0c\u5b83\u5728\u5185\u5b58\u4e0a\u7684\u8fd0\u7b97\u901f\u5ea6\u6bd4 Hadoop MapReduce \u7684\u8fd0\u7b97\u901f\u5ea6\u5feb\u4e0a 100 \u500d\uff1b\u8fd9\u4e5f\u4f7f\u5f97 Spark MLlib \u5206\u5e03\u5f0f\u8ba1\u7b97\u6846\u67b6\u8fd0\u884c\u975e\u5e38\u9ad8\u6548\u3001\u5feb\u901f\u3002\u5b83\u53ef\u4ee5\u5b9e\u73b0\u5927\u90e8\u5206\u673a\u5668\u5b66\u4e60\uff0c\u5982\uff1a\u805a\u7c7b\u3001\u5206\u7c7b\u3001\u56de\u5f52\u7b49\u7b97\u6cd5\uff0c\u5e76\u5141\u8bb8\u5c06\u6570\u636e\u52a0\u8f7d\u81f3\u96c6\u7fa4\u5185\u5b58\uff0c\u591a\u6b21\u5bf9\u5176\u8fdb\u884c\u67e5\u8be2\uff0c\u6240\u4ee5\u975e\u5e38\u9002\u5408\u7528\u4e8e\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u3002 GitHub \u5730\u5740\uff1a https://github.com/apache/spark \u4e8c\u5341\u516b\u3001Mahout star 1.8k fork 930 Mahout \u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u7ebf\u6027\u4ee3\u6570\u6846\u67b6\uff0c\u7528\u4e8e\u5feb\u901f\u521b\u5efa\u53ef\u6269\u5c55\u7684\u9ad8\u6027\u80fd\u673a\u5668\u5b66\u4e60\u5e94\u7528\u7a0b\u5e8f\uff08 http://mahout.apache.org/ \uff09\u3002 Mahout \u6846\u67b6\u957f\u671f\u4ee5\u6765\u4e00\u76f4\u4e0e Hadoop \u7ed1\u5b9a\uff0c\u4f46\u5b83\u7684\u8bb8\u591a\u7b97\u6cd5\u4e5f\u53ef\u4ee5\u5728 Hadoop \u4e4b\u5916\u8fd0\u884c\u3002\u5b83\u5141\u8bb8\u591a\u79cd\u7b97\u6cd5\u53ef\u4ee5\u8de8\u8d8a\u5206\u5e03\u5f0f Spark \u7fa4\u96c6\u4e0a\u8fd0\u884c\uff0c\u5e76\u4e14\u652f\u6301 CPU \u548c GPU \u8fd0\u884c\u3002 GitHub \u5730\u5740\uff1a https://github.com/apache/mahout \u4e8c\u5341\u4e5d\u3001Horovod star 8.5k fork 1.3k \u8fd9\u662f\u7531 Uber \u5f00\u6e90\u7684\u4e00\u4e2a\u8de8\u591a\u53f0\u673a\u5668\u7684\u5206\u5e03\u5f0f\u6df1\u5ea6\u5b66\u4e60\u7684 TensorFlow \u8bad\u7ec3\u6846\u67b6\uff0c\u53ef\u4ee5\u4f7f\u5206\u5e03\u5f0f\u6df1\u5ea6\u5b66\u4e60\u5feb\u901f\u4e14\u6613\u4e8e\u4f7f\u7528\u3002 \u636e\u4ecb\u7ecd\uff0cHorovod \u8ba9\u5f00\u53d1\u4eba\u5458\u53ea\u9700\u51e0\u884c\u4ee3\u7801\u5c31\u53ef\u4ee5\u5b8c\u6210\u4efb\u52a1\u3002\u8fd9\u4e0d\u4ec5\u52a0\u5feb\u4e86\u521d\u59cb\u4fee\u6539\u8fc7\u7a0b\uff0c\u800c\u4e14\u8fdb\u4e00\u6b65\u7b80\u5316\u4e86\u8c03\u8bd5\u3002\u8003\u8651\u5230\u6df1\u5ea6\u5b66\u4e60\u9879\u76ee\u7684\u9ad8\u5ea6\u8fed\u4ee3\u6027\uff0c\u8fd9\u4e5f\u53ef\u4ee5\u8282\u7701\u5927\u91cf\u65f6\u95f4\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u5b83\u8fd8\u7ed3\u5408\u4e86\u9ad8\u6027\u80fd\u548c\u4fee\u8865\u4f4e\u7ea7\u6a21\u578b\u7ec6\u8282\u7684\u80fd\u529b\uff0c\u4f8b\u5982\uff1a\u540c\u65f6\u4f7f\u7528\u9ad8\u7ea7 api\uff0c\u5e76\u4f7f\u7528 NVIDIA \u7684 CUDA \u5de5\u5177\u5305\u5b9e\u73b0\u81ea\u5df1\u7684\u81ea\u5b9a\u4e49\u64cd\u4f5c\u7b26\u3002 GitHub \u5730\u5740\uff1a https://github.com/horovod/horovod \u4e09\u5341\u3001Dask star 6.2k fork 994 \u5f53\u5f00\u53d1\u8005\u9700\u8981\u5e76\u884c\u5316\u5230\u591a\u6838\u65f6\uff0c\u53ef\u4ee5\u7528 Dask \u6765\u5c06\u8ba1\u7b97\u6269\u5c55\u5230\u591a\u4e2a\u5185\u6838\u751a\u81f3\u591a\u4e2a\u673a\u5668\u3002 Dask \u63d0\u4f9b\u4e86 NumPy Arrays\uff0cPandas Dataframes \u548c\u5e38\u89c4\u5217\u8868\u7684\u62bd\u8c61\uff0c\u80fd\u591f\u5728\u65e0\u6cd5\u653e\u5165\u4e3b\u5185\u5b58\u7684\u6570\u636e\u96c6\u4e0a\u5e76\u884c\u8fd0\u884c\u3002\u5bf9\u5927\u578b\u6570\u636e\u96c6\u6765\u8bf4\uff0cDask \u7684\u9ad8\u7ea7\u96c6\u5408\u662f NumPy \u548c Pandas \u7684\u66ff\u4ee3\u65b9\u6848\u3002 GitHub \u5730\u5740\uff1a https://github.com/dask/dask \u4e09\u5341\u4e00\u3001Ray star 10.3k fork 1.5k Ray \u662f\u4e00\u4e2a\u9ad8\u6027\u80fd\u5206\u5e03\u5f0f\u6267\u884c\u6846\u67b6\uff0c\u5b83\u4f7f\u7528\u4e86\u548c\u4f20\u7edf\u5206\u5e03\u5f0f\u8ba1\u7b97\u7cfb\u7edf\u4e0d\u4e00\u6837\u7684\u67b6\u6784\u548c\u5bf9\u5206\u5e03\u5f0f\u8ba1\u7b97\u7684\u62bd\u8c61\u65b9\u5f0f\uff0c\u7528\u4e8e\u5feb\u901f\u800c\u7b80\u5355\u7684\u6784\u5efa\u548c\u8fd0\u884c\u5206\u5e03\u5f0f\u5e94\u7528\u7a0b\u5e8f\u3002 Ray \u6309\u7167\u5178\u578b\u7684 Master-Slave \u8fdb\u884c\u8bbe\u8ba1\u3002\u5176\u4e2d\uff0cMaster \u8d1f\u8d23\u5168\u5c40\u534f\u8c03\u548c\u72b6\u6001\u7ef4\u62a4\uff0cSlave \u6267\u884c\u5206\u5e03\u5f0f\u8ba1\u7b97\u4efb\u52a1\u3002\u4e0d\u8fc7\u548c\u4f20\u7edf\u7684\u5206\u5e03\u5f0f\u8ba1\u7b97\u7cfb\u7edf\u4e0d\u540c\u7684\u662f\uff0cRay \u4f7f\u7528\u4e86\u6df7\u5408\u4efb\u52a1\u8c03\u5ea6\u7684\u601d\u8def\uff0c\u6027\u80fd\u66f4\u5f3a\u3002 GitHub \u5730\u5740\uff1a https://github.com/ray-project/ray \u9002\u7528\u4e8e\u81ea\u52a8\u5efa\u6a21\u7684\u5de5\u5177 \u4e09\u5341\u4e8c\u3001TPOT star 6.7k fork 1.2k TPOT \u662f\u4e00\u4e2a Python \u7f16\u5199\u7684\u8f6f\u4ef6\u5305\uff0c\u5229\u7528\u9057\u4f20\u7b97\u6cd5\u884c\u7279\u5f81\u9009\u62e9\u548c\u7b97\u6cd5\u6a21\u578b\u9009\u62e9\uff0c\u4ec5\u9700\u51e0\u884c\u4ee3\u7801\uff0c\u5c31\u80fd\u751f\u6210\u5b8c\u6574\u7684\u673a\u5668\u5b66\u4e60\u4ee3\u7801\u3002 \u5728\u673a\u5668\u5b66\u4e60\u6a21\u578b\u5f00\u53d1\u56fe\u4e2d\uff0cTPOT \u6240\u5b8c\u6210\u7684\u5373\u901a\u8fc7\u5229\u7528\u9057\u4f20\u7b97\u6cd5\uff0c\u5206\u6790\u6570\u5343\u79cd\u53ef\u80fd\u7684\u7ec4\u5408\uff0c\u4e3a\u6a21\u578b\u3001\u53c2\u6570\u627e\u5230\u6700\u4f73\u7684\u7ec4\u5408\uff0c\u4ece\u800c\u81ea\u52a8\u5316\u673a\u5668\u5b66\u4e60\u4e2d\u7684\u6a21\u578b\u9009\u62e9\u53ca\u8c03\u53c2\u90e8\u5206\u3002 GitHub \u5730\u5740\uff1a https://github.com/EpistasisLab/tpot \u4e09\u5341\u4e09\u3001AutoKeras star 6.6k fork 1.1k \u5b83\u4f7f\u7528\u4e86\u9ad8\u6548\u795e\u7ecf\u67b6\u6784\u641c\u7d22\uff08ENAS\uff0c https://arxiv.org/abs/1802.03268 \uff09\uff0c\u53ea\u9700\u4f7f\u7528 pip install autokeras \u5c31\u80fd\u5feb\u901f\u8f7b\u677e\u5730\u5b89\u88c5\u8f6f\u4ef6\u5305\uff0c\u7136\u540e\u5c31\u80fd\u7528\u81ea\u5df1\u7684\u6570\u636e\u96c6\u6765\u6267\u884c\u81ea\u5df1\u7684\u67b6\u6784\u641c\u7d22\u6784\u5efa\u601d\u8def\u3002 \u76f8\u6bd4\u8c37\u6b4c AutoML\uff0c\u4e24\u8005\u6784\u5efa\u601d\u8def\u7c7b\u4f3c\uff0c\u4f46\u4e0d\u540c\u7684\u662f\uff0cAutoKeras \u6240\u6709\u4ee3\u7801\u90fd\u5df2\u7ecf\u5f00\u6e90\uff0c\u53ef\u4f9b\u5f00\u53d1\u8005\u65e0\u507f\u4f7f\u7528\u3002 GitHub \u5730\u5740\uff1a https://github.com/keras-team/autokeras \u4e09\u5341\u56db\u3001Featuretools star 4.6k fork 602 \u8fd9\u662f\u4e00\u4e2a\u7528\u4e8e\u81ea\u52a8\u5316\u7279\u6027\u5de5\u7a0b\u7684\u5f00\u6e90 python \u6846\u67b6\uff08 https://www.featuretools.com/ \uff09\u3002 \u5b83\u53ef\u4ee5\u5e2e\u52a9\u5f00\u53d1\u8005\u4ece\u4e00\u7ec4\u76f8\u5173\u6570\u636e\u8868\u4e2d\u81ea\u52a8\u6784\u9020\u7279\u5f81\u3002\u5f00\u53d1\u8005\u53ea\u9700\u8981\u77e5\u9053\u6570\u636e\u8868\u7684\u57fa\u672c\u7ed3\u6784\u548c\u5b83\u4eec\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u7136\u540e\u5728\u5b9e\u4f53\u96c6\uff08\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff09\u4e2d\u6307\u660e\u3002\u7136\u540e\u5728\u6709\u4e86\u5b9e\u4f53\u96c6\u4e4b\u540e\uff0c\u4f7f\u7528\u4e00\u4e2a\u540d\u4e3a\u6df1\u5ea6\u7279\u5f81\u5408\u6210\uff08DFS\uff09\u7684\u65b9\u6cd5\uff0c\u5728\u4e00\u4e2a\u51fd\u6570\u8c03\u7528\u4e2d\u6784\u5efa\u51fa\u6570\u5343\u4e2a\u7279\u5f81\u3002 GitHub \u5730\u5740\uff1a https://github.com/FeatureLabs/featuretools https://github.com/FeatureLabs/featuretools \u4e09\u5341\u4e94\u3001NNI star 5.3k fork 683 NNI \u662f\u7531\u5fae\u8f6f\u53d1\u5e03\u7684\u4e00\u4e2a\u7528\u4e8e\u795e\u7ecf\u7f51\u7edc\u8d85\u53c2\u6570\u8c03\u6574\u7684\u5f00\u6e90 AutoML \u5de5\u5177\u5305\uff0c\u4e5f\u662f\u76ee\u524d\u8f83\u4e3a\u70ed\u95e8\u7684 AutoML \u5f00\u6e90\u9879\u76ee\u4e4b\u4e00\u3002 \u6700\u65b0\u7248\u672c\u7684 NNI \u5bf9\u673a\u5668\u5b66\u4e60\u751f\u547d\u5468\u671f\u7684\u5404\u4e2a\u73af\u8282\u505a\u4e86\u66f4\u52a0\u5168\u9762\u7684\u652f\u6301\uff0c\u5305\u62ec\uff1a\u7279\u5f81\u5de5\u7a0b\u3001\u795e\u7ecf\u7f51\u7edc\u67b6\u6784\u641c\u7d22\uff08NAS\uff09\u3001\u8d85\u53c2\u8c03\u4f18\u548c\u6a21\u578b\u538b\u7f29\uff0c\u5f00\u53d1\u8005\u90fd\u80fd\u4f7f\u7528\u81ea\u52a8\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u6765\u5b8c\u6210\uff0c\u5373\u4f7f\u662f\u5f00\u53d1\u5c0f\u767d\u4e5f\u80fd\u8f7b\u677e\u4e0a\u624b\u3002 GitHub \u5730\u5740\uff1a https://github.com/microsoft/nni \u4e09\u5341\u516d\u3001AdaNet star 3k fork 443 AdaNet \u662f\u7531\u8c37\u6b4c\u5f00\u6e90\u7684\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u7684\u57fa\u4e8e TensorFlow \u6846\u67b6\uff08 https://adanet.readthedocs.io/en/v0.8.0/ \uff09\u3002 AdaNet \u6613\u4e8e\u4f7f\u7528\uff0c\u5e76\u80fd\u521b\u5efa\u9ad8\u8d28\u91cf\u7684\u6a21\u578b\uff0c\u4e3a ML \u5b9e\u8df5\u8005\u8282\u7701\u4e86\u7528\u4e8e\u9009\u62e9\u6700\u4f73\u795e\u7ecf\u7f51\u7edc\u67b6\u6784\u7684\u65f6\u95f4\uff0c\u5b9e\u73b0\u4e86\u4e00\u79cd\u5c06\u5b66\u4e60\u795e\u7ecf\u67b6\u6784\u4f5c\u4e3a\u5b50\u7f51\u7edc\u96c6\u5408\u7684\u81ea\u9002\u5e94\u7b97\u6cd5\u3002 GitHub \u5730\u5740\uff1a https://github.com/tensorflow/adanet IDEs \u7cfb\u7edf \u4e09\u5341\u4e03\u3001Jupyter star 9.3k fork 2.2k Jupyter \u662f\u4e00\u79cd Web \u5e94\u7528\uff0c\u6db5\u76d6\u4e86\u8de8\u6570\u5341\u79cd\u7f16\u7a0b\u8bed\u8a00\u7684\u4ea4\u4e92\u5f0f\u8ba1\u7b97\u3002 \u5b83\u80fd\u8ba9\u7528\u6237\u5c06\u8bf4\u660e\u6587\u672c\u3001\u6570\u5b66\u65b9\u7a0b\u3001\u4ee3\u7801\u548c\u53ef\u89c6\u5316\u5185\u5bb9\u5168\u90e8\u7ec4\u5408\u5230\u4e00\u4e2a\u6613\u4e8e\u5171\u4eab\u7684\u6587\u6863\u4e2d\uff0c\u975e\u5e38\u65b9\u4fbf\u7814\u7a76\u548c\u6559\u5b66\u3002\u5728\u6570\u636e\u6316\u6398\u5e73\u53f0 Kaggle \u4e0a\uff0c\u4f7f\u7528 Python \u7684\u6570\u636e\u5f00\u53d1\u8005\u5927\u591a\u6570\u9009\u62e9\u4e86 jupyter \u6765\u5b9e\u73b0\u5206\u6790\u548c\u5efa\u6a21\u7684\u8fc7\u7a0b\u3002 GitHub \u5730\u5740\uff1a https://github.com/jupyter/jupyter \u4e09\u5341\u516b\u3001Spyder star 5.1k fork 1k Spyder \u662f\u4e00\u4e2a \u7528\u4e8e\u79d1\u5b66\u8ba1\u7b97\u7684\u4f7f\u7528 Python \u7f16\u7a0b\u8bed\u8a00\u7684\u96c6\u6210\u5f00\u53d1\u73af\u5883\uff08IDE\uff09\u3002 \u5b83\u7ed3\u5408\u4e86\u7efc\u5408\u5f00\u53d1\u5de5\u5177\u7684\u9ad8\u7ea7\u7f16\u8f91\u3001\u5206\u6790\u3001\u8c03\u8bd5\u529f\u80fd\u4ee5\u53ca\u6570\u636e\u63a2\u7d22\u3001\u4ea4\u4e92\u5f0f\u6267\u884c\u3001\u6df1\u5ea6\u68c0\u67e5\u548c\u79d1\u5b66\u5305\u7684\u53ef\u89c6\u5316\u529f\u80fd\uff0c\u5bf9\u4e8e\u521d\u5b66\u8005\u4e5f\u975e\u5e38\u53cb\u597d\u3002 GitHub \u5730\u5740\uff1a https://github.com/spyder-ide/spyder \u4e09\u5341\u4e5d\u3001Zeppelin star 4.6k fork 2.2k Zeppelin \u662f\u4e00\u6b3e\u57fa\u4e8e Web \u7684\u4ea4\u4e92\u5f0f\u6570\u636e\u5206\u6790\u5e73\u53f0\u3002\u5b83\u57fa\u4e8e\u7f51\u7edc\u7684\u7b14\u8bb0\u672c\uff0c\u9ed8\u8ba4\u4f7f\u7528 Spark \u96c6\u7fa4\u4f5c\u4e3a\u5206\u6790\u5f15\u64ce\uff0c\u63d0\u4f9b\u6570\u636e\u53ef\u89c6\u5316\u7684\u6846\u67b6\uff0c\u652f\u6301\u6570\u636e\u9a71\u52a8\u7684\u4ea4\u4e92\u5f0f\u6570\u636e\u5206\u6790\u3002 \u901a\u8fc7\u914d\u7f6e\uff0c\u5b83\u4e5f\u652f\u6301\u5305\u62ec SQL\u3001Python\u3001R \u7b49\u591a\u79cd\u6570\u636e\u5206\u6790\u8bed\u8a00\uff0c\u63d0\u4f9b\u6570\u636e\u5e93\u67e5\u8be2\u3001\u52a8\u6001\u56fe\u8868\u5c55\u793a\u3001\u5730\u56fe\u7b49\u6570\u636e\u53ef\u89c6\u5316\u80fd\u529b\uff0c\u5e76\u80fd\u591f\u4ee5 Notebook \u7684\u5f62\u5f0f\u4fdd\u5b58\u548c\u5206\u53d1\u4ee3\u7801\u53ca\u5206\u6790\u7ed3\u679c\u3002 GitHub \u5730\u5740\uff1a https://github.com/apache/zeppelin \u5e73\u53f0 \u56db\u5341\u3001H2O star 4.6k fork 1.7k H2O \u662f H2O.ai \u516c\u53f8\u7684\u5b8c\u5168\u5f00\u6e90\u7684\u5206\u5e03\u5f0f\u5185\u5b58\u673a\u5668\u5b66\u4e60\u5e73\u53f0\u3002H2O \u540c\u65f6\u652f\u6301 R \u548c Python\uff0c\u652f\u6301\u6700\u5e7f\u6cdb\u4f7f\u7528\u7684\u7edf\u8ba1\u548c\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\uff0c\u5305\u62ec\u68af\u5ea6\u63d0\u5347\uff08Gradient Boosting\uff09\u673a\u5668\u3001\u5e7f\u4e49\u7ebf\u6027\u6a21\u578b\u3001\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u7b49\u3002 H2O \u5305\u62ec\u4e00\u4e2a\u81ea\u52a8\u673a\u5668\u5b66\u4e60\u6a21\u5757\uff0c\u4f7f\u7528\u81ea\u5df1\u7684\u7b97\u6cd5\u6765\u6784\u5efa\u7ba1\u9053\u3002\u5b83\u5bf9\u7279\u5f81\u5de5\u7a0b\u65b9\u6cd5\u548c\u6a21\u578b\u8d85\u53c2\u6570\u91c7\u7528\u4e86\u7a77\u4e3e\u641c\u7d22\uff0c\u4f18\u5316\u4e86\u7ba1\u9053\u3002H2O \u81ea\u52a8\u5316\u4e86\u4e00\u4e9b\u6700\u590d\u6742\u7684\u6570\u636e\u79d1\u5b66\u548c\u673a\u5668\u5b66\u4e60\u5de5\u4f5c\uff0c\u4f8b\u5982\u7279\u5f81\u5de5\u7a0b\u3001\u6a21\u578b\u9a8c\u8bc1\u3001\u6a21\u578b\u8c03\u6574\u3001\u6a21\u578b\u9009\u62e9 \u548c \u6a21\u578b\u90e8\u7f72\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u5b83\u8fd8\u63d0\u4f9b\u4e86\u81ea\u52a8\u53ef\u89c6\u5316\u4ee5\u53ca\u673a\u5668\u5b66\u4e60\u7684\u89e3\u91ca\u80fd\u529b\uff08MLI\uff09\u3002 GitHub \u5730\u5740\uff1a https://github.com/h2oai/h2o-3 \u56db\u5341\u4e00\u3001MLflow star 5.9k fork 1.2k MLflow \u662f\u673a\u5668\u5b66\u4e60\u751f\u547d\u5468\u671f\u7684\u5f00\u6e90\u5e73\u53f0\uff0c\u5f00\u653e\u63a5\u53e3\uff0c\u53ef\u4e0e\u4efb\u4f55\u673a\u5668\u5b66\u4e60\u5e93\u3001\u7b97\u6cd5\u3001\u90e8\u7f72\u5de5\u5177\u6216\u7f16\u7a0b\u8bed\u8a00\u4e00\u8d77\u4f7f\u7528\uff0c\u57fa\u4e8e REST API \u548c\u7b80\u5355\u7684\u6570\u636e\u683c\u5f0f\u800c\u6784\u5efa\u3002\u662f\u4e00\u4e2a\u5f00\u6e90\u9879\u76ee\uff0c\u5141\u8bb8\u7528\u6237\u548c\u673a\u5668\u5b66\u4e60\u5e93\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u5bf9\u5176\u8fdb\u884c\u6269\u5c55\u3002 MLflow \u73b0 alpha \u7248\uff0c\u63d0\u4f9b\u8ddf\u8e2a\u3001\u9879\u76ee\u548c\u6a21\u578b\u4e09\u5927\u7ec4\u4ef6\u3002MLflow \u7684\u8ddf\u8e2a\u7ec4\u4ef6\u652f\u6301\u8bb0\u5f55\u548c\u67e5\u8be2\u5b9e\u9a8c\u6570\u636e\uff0c\u5982\u8bc4\u4f30\u5ea6\u91cf\u6307\u6807\u548c\u53c2\u6570\u3002MLflow \u7684\u9879\u76ee\u7ec4\u4ef6\u63d0\u4f9b\u4e86\u53ef\u91cd\u590d\u8fd0\u884c\u7684\u7b80\u5355\u5305\u88c5\u683c\u5f0f\u3002\u6700\u540e\uff0cMLflow \u7684\u6a21\u578b\u7ec4\u4ef6\u63d0\u4f9b\u4e86\u7528\u4e8e\u7ba1\u7406\u548c\u90e8\u7f72\u6a21\u578b\u7684\u5de5\u5177\u3002 GitHub \u5730\u5740\uff1a https://github.com/mlflow/mlflow \u56db\u5341\u4e8c\u3001Kubeflow star 8.3k fork 1.3k Kubeflow \u9879\u76ee\u65e8\u5728\u4f7f Kubernetes \u4e0a\u7684\u673a\u5668\u5b66\u4e60\u53d8\u7684\u8f7b\u677e\u3001\u4fbf\u6377\u3001\u53ef\u6269\u5c55\uff0c\u5176\u76ee\u6807\u4e0d\u662f\u91cd\u5efa\u5176\u4ed6\u670d\u52a1\uff0c\u800c\u662f\u63d0\u4f9b\u4e00\u79cd\u7b80\u4fbf\u7684\u65b9\u5f0f\u627e\u5230\u6700\u597d\u7684 OSS \u89e3\u51b3\u65b9\u6848\u3002\u5bf9\u5206\u5e03\u5f0f\u8bad\u7ec3\u4efb\u52a1\u652f\u6301\u3002 \u7528\u4e8e\u521b\u5efa\u548c\u7ba1\u7406\u4ea4\u4e92\u5f0f Jupyter notebook \u7684 JupyterHub\uff0c\u53ef\u914d\u7f6e\u4e3a\u4f7f\u7528 CPU \u6216 GPU\uff0c\u5e76\u901a\u8fc7\u5355\u4e00\u8bbe\u7f6e\u8c03\u6574\u81f3\u5355\u4e2a\u96c6\u7fa4\u5927\u5c0f\u7684 TensorFlow \u8bad\u7ec3\u63a7\u5236\u5668\uff08Tensorflow Training Controller\uff09\uff0c\u7528\u4e8e TF \u670d\u52a1\u5bb9\u5668\uff08TF Serving container\uff09 GitHub \u5730\u5740\uff1a https://github.com/kubeflow/kubeflow \u8bc4\u5206\u63a8\u7406\u7cfb\u7edf \u56db\u5341\u4e09\u3001ONNX star 7.8k fork 1.3k ONNX \u662f\u4e00\u79cd\u9488\u5bf9\u673a\u5668\u5b66\u4e60\u6240\u8bbe\u8ba1\u7684\u5f00\u653e\u5f0f\u7684\u6587\u4ef6\u683c\u5f0f\uff0c\u7528\u4e8e\u5b58\u50a8\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u3002\u5b83\u4f7f\u5f97\u4e0d\u540c\u7684\u4eba\u5de5\u667a\u80fd\u6846\u67b6\uff08\u5982 Pytorch, MXNet\uff09\u53ef\u4ee5\u91c7\u7528\u76f8\u540c\u683c\u5f0f\u5b58\u50a8\u6a21\u578b\u6570\u636e\u5e76\u4ea4\u4e92\u3002ONNX \u7684\u89c4\u8303\u53ca\u4ee3\u7801\u4e3b\u8981\u7531\u5fae\u8f6f\uff0c\u4e9a\u9a6c\u900a\uff0cFacebook \u548c IBM \u7b49\u516c\u53f8\u5171\u540c\u5f00\u53d1\uff0c\u4ee5\u5f00\u653e\u6e90\u4ee3\u7801\u7684\u65b9\u5f0f\u6258\u7ba1\u5728 Github \u4e0a\u3002 \u76ee\u524d\u5b98\u65b9\u652f\u6301\u52a0\u8f7d ONNX \u6a21\u578b\u5e76\u8fdb\u884c\u63a8\u7406\u7684\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u6709\uff1a Caffe2, PyTorch, MXNet\uff0cML.NET\uff0cTensorRT \u548c Microsoft CNTK\uff0c\u5e76\u4e14 TensorFlow \u4e5f\u975e\u5b98\u65b9\u7684\u652f\u6301 ONNX\u3002 GitHub \u5730\u5740\uff1a https://github.com/onnx/onnx \u56db\u5341\u56db\u3001Seldon star 1.4k fork 296 \u5f00\u6e90\u673a\u5668\u5b66\u4e60\u90e8\u7f72\u5e73\u53f0 Seldon Core\uff0c\u8ba9\u673a\u5668\u5b66\u4e60\u6a21\u578b\u53ef\u4ee5\u90e8\u7f72\u4e8e Kubernetes \u4e0a\u3002Seldon Core \u7684\u76ee\u6807\uff0c\u8981\u8ba9\u7814\u7a76\u4eba\u5458\u53ef\u4ee5\u7528\u4efb\u4f55\u5de5\u5177\u5305\u3001\u7a0b\u5e8f\u8bed\u8a00\u5efa\u7acb\u673a\u5668\u5b66\u4e60\u6a21\u578b\u3002 \u73b0\u9636\u6bb5\u8be5\u5de5\u5177\u652f\u6301\u6a21\u578b\u5305\u542b\u4ee5 Python \u4e3a\u57fa\u7840\u7684 TensorFlow\u3001Sklearn\uff0c\u8fd8\u6709 Spark\u3001H2O\u3001R \u7b49\u77e5\u540d\u6a21\u578b\u3002\u6b64\u5916\uff0cSeldon Core \u4e5f\u8ba9\u673a\u5668\u5b66\u4e60\u6a21\u578b\u53ef\u652f\u63f4 REST\u3001gRPC\uff0c\u8ba9\u4f7f\u7528\u8005\u53ef\u4ee5\u66f4\u7b80\u5355\u5730\u6574\u5408\u76f8\u5173\u4f01\u4e1a\u5e94\u7528\u3002 GitHub \u5730\u5740","title":"\u5f00\u6e90\u9879\u76ee\uff0c\u6db5\u76d6 11 \u7c7b AI \u5b66\u4e60\u6846\u67b6\u3001\u5e73\u53f0"},{"location":"pages/nlp/nlpinfo/opensource-projects-2020list/#\u5f00\u6e90\u9879\u76ee\u6db5\u76d6-11-\u7c7b-AI-\u5b66\u4e60\u6846\u67b6\u5e73\u53f0","text":"\u76ee\u5f55\uff1a \u2160\u3001\u7ecf\u5178\u673a\u5668\u5b66\u4e60\uff081-3\uff09 \u2161\u3001\u6df1\u5ea6\u5b66\u4e60\uff084-8\uff09 \u2162\u3001\u5f3a\u5316\u5b66\u4e60\uff089-12\uff09 \u2163\u3001\u81ea\u7136\u8bed\u8a00\u5904\u7406\uff0813-18\uff09 \u2164\u3001\u8bed\u97f3\u8bc6\u522b\uff0819-21\uff09 \u2165\u3001\u8ba1\u7b97\u673a\u89c6\u89c9\uff0822-26\uff09 \u2166\u3001\u5206\u5e03\u5f0f\u8bad\u7ec3\uff0827-31\uff09 \u2167\u3001\u81ea\u52a8\u5efa\u6a21\uff0832-35\uff09 \u2168\u3001IDEs\u7cfb\u7edf\uff0836-38\uff09 \u2169\u3001\u5e73\u53f0\uff0839-41\uff09 \u216a\u3001\u8bc4\u5206\u63a8\u7406\u7cfb\u7edf\uff0842-43\uff09 \u9002\u7528\u4e8e\u7ecf\u5178\u673a\u5668\u5b66\u4e60\u7684\u5de5\u5177","title":"\u5f00\u6e90\u9879\u76ee\uff0c\u6db5\u76d6 11 \u7c7b AI \u5b66\u4e60\u6846\u67b6\u3001\u5e73\u53f0"},{"location":"pages/nlp/nlpinfo/opensource-projects-2020list/#1-SciKit-learn-star-392k-fork-192k","text":"scikit-learn \u662f\u4e00\u79cd\u5f3a\u5927\u7684\u57fa\u4e8e Python \u8bed\u8a00\u7684\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u5e93\uff08 https://scikit-learn.org/stable/ \uff09\u3002\u5176\u4e2d\uff0c\u5305\u542b\u4e86\u7b97\u6cd5\u9884\u5904\u7406\uff0c\u6a21\u578b\u53c2\u6570\u62e9\u4f18\uff0c\u56de\u5f52\u4e0e\u5206\u7c7b\u7b49\u7b97\u6cd5\uff0c\u5b98\u65b9\u6587\u6863\u5305\u542b\u4e86\u6bcf\u4e00\u79cd\u7b97\u6cd5\u7684\u4f8b\u5b50\uff0c\u4ee3\u7801\u7b80\u6d01\u4f18\u7f8e\uff0c\u53ef\u89c6\u5316\u4e86\u6bcf\u4e00\u79cd\u7b97\u6cd5\u7ed3\u679c\uff0c\u5373\u80fd\u5b66\u4e60 python\uff0c\u4e5f\u662f\u5e2e\u52a9\u5f00\u53d1\u8005\u66f4\u597d\u7406\u89e3\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u7684\u4fbf\u5229\u5de5\u5177\u3002 \u5c24\u5176\u5728\u76d1\u7763\u5b66\u4e60\u90e8\u5206\uff0cScikit-learn \u63d0\u4f9b\u4e86\u5e7f\u4e49\u7ebf\u6027\u6a21\u578b\u3001\u652f\u6301\u5411\u91cf\u673a\u3001\u6700\u8fd1\u90bb\u7b97\u6cd5\u3001\u9ad8\u65af\u8fc7\u7a0b\u3001\u6734\u7d20\u8d1d\u53f6\u65af\u3001\u51b3\u7b56\u6811\u548c\u96c6\u6210\u65b9\u6cd5\u7b49\u7b97\u6cd5\u6559\u7a0b\uff0c\u540c\u65f6\u8fd8\u4ecb\u7ecd\u4e86\u7279\u5f81\u9009\u62e9\u3001\u968f\u5373\u68af\u5ea6\u4e0b\u964d\u7b97\u6cd5\u3001\u7ebf\u6027\u4e0e\u4e8c\u6b21\u5224\u522b\u5206\u6790\u7b49\u5728\u76d1\u7763\u5b66\u4e60\u4e2d\u975e\u5e38\u91cd\u8981\u7684\u6982\u5ff5\uff1b\u800c\u5728\u534a\u76d1\u7763\u5b66\u4e60\u4e2d\u7684\u6807\u7b7e\u4f20\u64ad\u7b97\u6cd5\u548c\u65e0\u76d1\u7763\u5b66\u4e60\u4e2d\u7684\u805a\u7c7b\u4e0e\u964d\u7ef4\u7b97\u6cd5\u65b9\u9762\uff0c\u4e5f\u6709\u975e\u5e38\u591a\u7684\u6559\u7a0b\u3002 GitHub \u5730\u5740","title":"1. SciKit-learn star 39.2k fork 19.2k"},{"location":"pages/nlp/nlpinfo/opensource-projects-2020list/#2-XGBoost-star-183k-fork-73k","text":"xgboost \u7684\u5168\u79f0\u662f eXtreme Gradient Boosting\uff0c\u5b83\u5728 Gradient Boosting \u6846\u67b6\u4e0b\u5b9e\u73b0\u4e86 c++\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u3002 XGBoost \u6700\u5927\u7684\u7279\u70b9\u5728\u4e8e\uff0c\u5b83\u80fd\u591f\u81ea\u52a8\u5229\u7528 CPU \u7684\u591a\u7ebf\u7a0b\u8fdb\u884c\u5e76\u884c\uff0c\u540c\u65f6\u5728\u7b97\u6cd5\u4e0a\u52a0\u4ee5\u6539\u8fdb\u63d0\u9ad8\u4e86\u7cbe\u5ea6\u3002\u5b83\u662f\u7ecf\u8fc7\u4f18\u5316\u7684\u5206\u5e03\u5f0f\u68af\u5ea6\u63d0\u5347\u5e93\uff0c\u53ef\u6269\u5c55\u6027\u5f3a\uff0c\u9ad8\u6548\u3001\u7075\u6d3b\u4e14\u53ef\u79fb\u690d\u3002 GitHub \u5730\u5740","title":"2. XGBoost star 18.3k fork 7.3k"},{"location":"pages/nlp/nlpinfo/opensource-projects-2020list/#3-AccordNET-star-37k-fork-17k","text":"Accord.NET Framework \u662f\u4e00\u4e2a.NET \u673a\u5668\u5b66\u4e60\u6846\u67b6\uff0c\u7ed3\u5408\u4e86\u5b8c\u5168\u7528 C\uff03\u7f16\u5199\u7684\u97f3\u9891\u548c\u56fe\u50cf\u5904\u7406\u5e93\uff08 http://accord-framework.net/ \uff09\u3002 \u5b83\u53ef\u7528\u4e8e\u6784\u5efa\u751f\u4ea7\u7ea7\u8ba1\u7b97\u673a\u89c6\u89c9\u3001\u8ba1\u7b97\u673a\u8bd5\u542c\u3001\u4fe1\u53f7\u5904\u7406\u548c\u7edf\u8ba1\u5e94\u7528\u7a0b\u5e8f\u751a\u81f3\u7528\u4e8e\u5546\u4e1a\u7528\u9014\u7684\u5b8c\u6574\u6846\u67b6\uff0c\u5e76\u4e3a.NET \u7684\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u7edf\u8ba1\u5206\u6790\u3001\u673a\u5668\u5b66\u4e60\u3001\u56fe\u50cf\u5904\u7406\u3001\u8ba1\u7b97\u673a\u89c6\u89c9\u76f8\u5173\u7684\u7b97\u6cd5\u3002 GitHub \u5730\u5740 \u9002\u7528\u4e8e\u6df1\u5ea6\u5b66\u4e60\u7684\u5de5\u5177","title":"3. Accord.NET star 3.7k fork 1.7k"},{"location":"pages/nlp/nlpinfo/opensource-projects-2020list/#4-TensorFlow-star-141k-fork-798k","text":"TensorFlow \u662f\u7528\u4e8e\u673a\u5668\u5b66\u4e60\u7684\u7aef\u5230\u7aef\u5f00\u6e90\u5e73\u53f0\uff08 https://tensorflow.org \uff09\uff0c\u4e5f\u662f 2019 \u5e74\u5ea6 GitHub \u4e0a\u6700\u53d7\u6b22\u8fce\u7684\u9879\u76ee\u3002 \u5b83\u5177\u6709\u5de5\u5177\u3001\u5e93\u3001\u793e\u533a\u8d44\u6e90\u5168\u9762\u4e14\u7075\u6d3b\u7684\u751f\u6001\u7cfb\u7edf\uff0c\u63d0\u4f9b\u7a33\u5b9a\u7684 Python \u548c C ++ API\uff0c\u4ee5\u53ca\u5176\u4ed6\u8bed\u8a00\u7684\u975e\u4fdd\u8bc1\u5411\u540e\u517c\u5bb9 API\uff1b\u80fd\u591f\u5e2e\u52a9\u5f00\u53d1\u8005\u4eec\u5728 ML \u9886\u57df\u7684\u7814\u7a76\u4e0e\u53d1\u5c55\uff0c\u5e76\u4f7f\u5f00\u53d1\u4eba\u5458\u8f7b\u677e\u6784\u5efa\u548c\u90e8\u7f72 ML \u652f\u6301\u7684\u5e94\u7528\u7a0b\u5e8f\u3002 GitHub \u5730\u5740","title":"4. TensorFlow star 141k fork 79.8k"},{"location":"pages/nlp/nlpinfo/opensource-projects-2020list/#5-PyTorch-star-358k-fork-9k","text":"\u4f5c\u4e3a TensorFlow \u5f3a\u6709\u529b\u7ade\u4e89\u5bf9\u624b\u7684 PyTorch\uff0c\u4e5f\u662f\u76ee\u524d\u8f83\u4e3a\u4e3b\u6d41\u7684\u6df1\u5ea6\u5b66\u4e60\u5de5\u5177\u4e4b\u4e00\u3002 PyTorch \u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u673a\u5668\u5b66\u4e60\u6846\u67b6\uff0c\u63d0\u4f9b\u4e86\u4e24\u4e2a\u9ad8\u7ea7\u529f\u80fd\uff0c\u5305\u62ec\uff1a\u5177\u6709\u5f3a\u6709\u529b\u7684 GPU \u52a0\u901f\u5ea6\u7684\u5f20\u91cf\u8ba1\u7b97\uff08\u5982 NumPy\uff09\uff0c\u4ee5\u53ca\u57fa\u4e8e\u78c1\u5e26\u81ea\u52a8\u8c03\u6574\u7cfb\u7edf\u6784\u5efa\u7684\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc\uff1b\u53ef\u52a0\u5feb\u4ece\u7814\u7a76\u539f\u578b\u5230\u751f\u4ea7\u90e8\u7f72\u7684\u8fc7\u7a0b\u3002 \u6b64\u524d\uff0cOpenAI \u5b98\u65b9\u5ba3\u5e03\u4e86\u300c\u5168\u9762\u8f6c\u5411 PyTorch\u300d\u7684\u6d88\u606f\uff0c\u8ba1\u5212\u5c06\u81ea\u5bb6\u5e73\u53f0\u7684\u6240\u6709\u6846\u67b6\u7edf\u4e00\u4e3a PyTorch\uff0c\u4e5f\u8fdb\u4e00\u6b65\u4f53\u73b0\u4e86 PyTorch \u5728\u6df1\u5ea6\u5b66\u4e60\u65b9\u9762\u7684\u6f5c\u529b\u3002 GitHub \u5730\u5740","title":"5. PyTorch star 35.8k fork 9k"},{"location":"pages/nlp/nlpinfo/opensource-projects-2020list/#6-MXNET-star-184k-fork-65k","text":"MXNet \u662f\u4e00\u4e2a\u529f\u80fd\u9f50\u5168\uff0c\u53ef\u7f16\u7a0b\u548c\u53ef\u6269\u5c55\u7684\u6df1\u5165\u5b66\u4e60\u6846\u67b6\uff0c\u652f\u6301\u6700\u5148\u8fdb\u7684\u6df1\u5165\u5b66\u4e60\u6a21\u5f0f\uff08 https://mxnet.apache.org/ \uff09\u3002 MXNet \u63d0\u4f9b\u4e86\u6df7\u5408\u7f16\u7a0b\u6a21\u578b\uff08\u547d\u4ee4\u5f0f\u548c\u58f0\u660e\u5f0f\uff09\u548c\u5927\u91cf\u7f16\u7a0b\u8bed\u8a00\u7684\u4ee3\u7801\uff08\u5305\u62ec Python\u3001C++\u3001R\u3001Scala\u3001Julia\u3001Matlab \u548c JavaScript\uff09\u7684\u80fd\u529b\uff0c\u662f\u4e00\u4e2a\u6613\u5b89\u88c5\u6613\u4e0a\u624b\u7684\u5f00\u6e90\u6df1\u5ea6\u5b66\u4e60\u5de5\u5177\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e2a python \u63a5\u53e3 gluon\uff0c\u80fd\u591f\u8ba9\u5f00\u53d1\u8005\u8fc5\u901f\u642d\u5efa\u8d77\u795e\u7ecf\u7f51\u7edc\uff0c\u5e76\u8fdb\u884c\u9ad8\u6548\u8bad\u7ec3\u3002 GitHub \u5730\u5740\uff1a https://github.com/apache/incubator-mxnet \u4e03\u3001Sonnet star 8.1k fork 1.2k Sonnet \u662f\u7531 DeepMind \u53d1\u5e03\u7684\uff0c\u5728 TensorFlow \u4e0a\u7528\u4e8e\u6784\u5efa\u590d\u6742\u795e\u7ecf\u7f51\u7edc\u7684\u5f00\u6e90\u5e93\u3002 Sonnet \u4e3b\u8981\u7528\u4e8e\u8ba9 DeepMind \u5f00\u53d1\u7684\u5176\u5b83\u6a21\u578b\u66f4\u5bb9\u6613\u5171\u4eab\uff0cSonnet \u53ef\u4ee5\u5728\u5185\u90e8\u7684\u5176\u5b83\u5b50\u6a21\u5757\u4e2d\u7f16\u5199\u6a21\u5757\uff0c\u6216\u8005\u5728\u6784\u5efa\u65b0\u6a21\u5757\u65f6\u4f20\u9012\u5176\u5b83\u6a21\u578b\u4f5c\u4e3a\u53c2\u6570\uff1b\u540c\u65f6\uff0cSonnet \u63d0\u4f9b\u5b9e\u7528\u7a0b\u5e8f\u6765\u5904\u7406\u8fd9\u4e9b\u4efb\u610f\u5c42\u6b21\u7ed3\u6784\uff0c\u4ee5\u4fbf\u4e8e\u4f7f\u7528\u4e0d\u540c\u7684 RNN \u8fdb\u884c\u5b9e\u9a8c\uff0c\u6574\u4e2a\u8fc7\u7a0b\u65e0\u9700\u7e41\u7410\u7684\u4ee3\u7801\u6539\u5199\u3002 GitHub \u5730\u5740\uff1a https://github.com/deepmind/sonnet \u516b\u3001DL4J star 11.5k fork 4.8k DL4J \u662f\u91c7\u7528 java \u548c jvm \u7f16\u5199\u7684\u5f00\u6e90\u6df1\u5ea6\u5b66\u4e60\u5e93\uff0c\u652f\u6301\u5404\u79cd\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u3002DL4J \u6700\u91cd\u8981\u7684\u7279\u70b9\u662f\u652f\u6301\u5206\u5e03\u5f0f\uff0c\u53ef\u4ee5\u5728 Spark \u548c Hadoop \u4e0a\u8fd0\u884c\uff0c\u5b83\u652f\u6301\u5206\u5e03\u5f0f CPU \u548c GPU \u8fd0\u884c\uff0c\u5e76\u53ef\u4ee5\u5229\u7528 Spark \u5728\u591a\u53f0\u670d\u52a1\u5668\u591a\u4e2a GPU \u4e0a\u5f00\u5c55\u5206\u5e03\u5f0f\u7684\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u8bad\u7ec3\uff0c\u8ba9\u6a21\u578b\u8fd0\u884c\u66f4\u5feb\u3002 DL4J \u7684\u57fa\u672c\u7279\u6027\u5305\u62ec\uff1aDL4J \u4e2d\u7684\u795e\u7ecf\u7f51\u7edc\u8bad\u7ec3\u901a\u8fc7\u7c07\u7684\u8fed\u4ee3\u5e76\u884c\u8ba1\u7b97\uff1b\u6574\u4e2a\u8fc7\u7a0b\u7531 Hadoop \u548c Spark \u67b6\u6784\u652f\u6301\uff1b\u4f7f\u7528 Java \u5141\u8bb8\u5f00\u53d1\u8005\u5728 Android \u8bbe\u5907\u7684\u7a0b\u5e8f\u5f00\u53d1\u5468\u671f\u4e2d\u4f7f\u7528\u3002 GitHub \u5730\u5740\uff1a https://github.com/eclipse/deeplearning4j \u9002\u7528\u4e8e\u5f3a\u5316\u5b66\u4e60\u7684\u5de5\u5177 \u4e5d\u3001Gym star 19.6k fork 5.5k Gym \u662f\u4e00\u4e2a\u7528\u4e8e\u5f00\u53d1\u548c\u6bd4\u8f83\u5f3a\u5316\u5b66\u4e60\u7b97\u6cd5\u7684\u5de5\u5177\uff08 https://gym.openai.com/ \uff09\u3002 \u5b83\u65e0\u9700\u5bf9 agent \u7684\u5148\u9a8c\u77e5\u8bc6\uff0c\u5e76\u4e14\u91c7\u7528 python \u4f5c\u4e3a\u4e3b\u8981\u5f00\u53d1\u8bed\u8a00\uff0c\u56e0\u6b64\u53ef\u4ee5\u7b80\u5355\u7684\u548c TensorFlow \u7b49\u6df1\u5ea6\u5b66\u4e60\u5e93\u8fdb\u884c\u5f00\u53d1\u96c6\u6210\uff0c\u540c\u65f6\u76f4\u89c2\u7684\u5c06\u5b66\u4e60\u7ed3\u679c\u7528\u753b\u9762\u76f4\u89c2\u7684\u5c55\u793a\u51fa\u6765\u3002Gym \u5e93\u4e2d\u5305\u542b\u8bb8\u591a\u53ef\u4ee5\u7528\u4e8e\u5236\u5b9a\u5f3a\u5316\u5b66\u4e60\u7b97\u6cd5\u7684\u6d4b\u8bd5\u95ee\u9898\uff08\u5373\u73af\u5883\uff09\uff0c\u8fd9\u4e9b\u73af\u5883\u6709\u5171\u4eab\u63a5\u53e3\uff0c\u5141\u8bb8\u7f16\u5199\u901a\u7528\u7684\u7b97\u6cd5\u3002 GitHub \u5730\u5740\uff1a https://github.com/openai/gym \u5341\u3001Dopamine star 8.7k fork 1.1k \u4e00\u6b3e\u57fa\u4e8e Tensorflow \u7684\u6846\u67b6\uff0c\u65e8\u5728\u4e3a\u65b0\u624b\u548c\u7ecf\u9a8c\u4e30\u5bcc\u7684\u5f3a\u5316\u5b66\u4e60\u7814\u7a76\u4eba\u5458\u63d0\u4f9b\u517c\u5177\u7075\u6d3b\u6027\u3001\u7a33\u5b9a\u6027\u548c\u53ef\u91cd\u590d\u6027\u7684\u65b0\u5de5\u5177\u3002 \u8be5\u6846\u67b6\u7684\u7075\u611f\u6765\u6e90\u4e8e\u5927\u8111\u4e2d\u5956\u52b1-\u52a8\u673a\u884c\u4e3a\u7684\u4e3b\u8981\u6210\u5206\u300c\u591a\u5df4\u80fa\u53d7\u4f53\u300d\uff0c\u8fd9\u53cd\u6620\u4e86\u795e\u7ecf\u79d1\u5b66\u4e0e\u5f3a\u5316\u5b66\u4e60\u7814\u7a76\u4e4b\u95f4\u7684\u5f3a\u5927\u7684\u5386\u53f2\u8054\u7cfb\uff0c\u662f\u4e00\u4e2a\u5f3a\u5316\u5b66\u4e60\u7b97\u6cd5\u5feb\u901f\u539f\u578b\u7684\u7814\u7a76\u6846\u67b6\u3002 GitHub \u5730\u5740\uff1a https://github.com/google/dopamine \u5341\u4e00\u3001ReAgent star 2.4k fork 312 Facebook \u63a8\u51fa\u7684\u4e00\u4e2a\u6784\u5efa\u51b3\u7b56\u63a8\u7406\u7cfb\u7edf\u7684\u6a21\u5757\u5316\u7aef\u5230\u7aef\u5e73\u53f0\uff0c\u7528\u4e8e\u63a8\u7406\u7cfb\u7edf\uff08\u5f3a\u5316\u5b66\u4e60\u3001\u4e0a\u4e0b\u6587\u7ba1\u7406\u7b49\uff09, \u53ef\u4ee5\u663e\u8457\u7b80\u5316\u63a8\u7406\u6a21\u578b\u6784\u5efa\u8fc7\u7a0b\u3002 ReAgent \u7531\u4e09\u90e8\u5206\u7ec4\u6210\uff1a\u751f\u6210\u51b3\u7b56\u5e76\u63a5\u6536\u51b3\u7b56\u53cd\u9988\u7684\u6a21\u578b\u3001\u7528\u4e8e\u8bc4\u4f30\u65b0\u6a21\u578b\u90e8\u7f72\u524d\u6027\u80fd\u7684\u6a21\u5757\u53ca\u5feb\u901f\u8fed\u4ee3\u7684\u670d\u52a1\u5e73\u53f0\u3002\u540c\u65f6\uff0cReAgent \u4e5f\u662f\u521b\u5efa\u57fa\u4e8e AI \u7684\u63a8\u7406\u7cfb\u7edf\u7684\u6700\u5168\u9762\u3001\u6a21\u5757\u5316\u5f00\u6e90\u5e73\u53f0\uff0c\u5e76\u4e14\u662f\u7b2c\u4e00\u4e2a\u5305\u542b\u7b56\u7565\u8bc4\u4f30\u7684\u5e73\u53f0\uff0c\u5c06\u4f1a\u52a0\u901f\u76f8\u5173\u51b3\u7b56\u7cfb\u7edf\u7684\u90e8\u7f72\u3002 GitHub \u5730\u5740\uff1a https://github.com/facebookresearch/ReAgent \u5341\u4e8c\u3001Tensorlayer star 5.9k fork 1.3k \u8fd9\u662f\u4e00\u4e2a\u9762\u5411\u79d1\u5b66\u5bb6\u7684\u6df1\u5ea6\u5b66\u4e60\u548c\u5f3a\u5316\u5b66\u4e60\u5e93\u3002TensorLayer \u7531\u5e95\u5c42\u5230\u4e0a\u5c42\u53ef\u4ee5\u5206\u4e3a\u4e09\u5927\u6a21\u5757\uff1a\u795e\u7ecf\u7f51\u7edc\u6a21\u5757\u3001\u5de5\u4f5c\u6d41\u6a21\u5757\u3001\u5e94\u7528\u6a21\u5757\u3002 \u4e0e Keras \u548c Pytorch \u76f8\u6bd4\uff0cTensorLayer \u63d0\u9ad8\u4e86\u795e\u7ecf\u7f51\u7edc\u6a21\u5757\u7684\u62bd\u8c61\u5316\u8bbe\u8ba1\uff0c\u540c\u65f6\u5b9e\u73b0\u4e86\u964d\u4f4e\u4f7f\u7528\u73b0\u6709\u5c42\u548c\u5f00\u53d1\u65b0\u5c42\u7684\u5de5\u4f5c\u91cf\u3002 GitHub \u5730\u5740\uff1a https://github.com/tensorlayer/tensorlayer \u9002\u7528\u4e8e\u81ea\u7136\u8bed\u8a00\u5904\u7406\u7684\u5de5\u5177 \u5341\u4e09\u3001BERT star 21.3k fork 5.8k BERT \u662f\u4e00\u4e2a\u57fa\u4e8e\u53cc\u5411 Transformer \u7684\u5927\u89c4\u6a21\u9884\u8bad\u7ec3\u8bed\u8a00\u6a21\u578b\uff0c\u7528\u4e8e\u5bf9\u5927\u91cf\u672a\u6807\u8bb0\u7684\u6587\u672c\u6570\u636e\u8fdb\u884c\u9884\u8bad\u7ec3\uff0c\u4ee5\u5b66\u4e60\u4e00\u79cd\u8bed\u8a00\u8868\u793a\u5f62\u5f0f\uff0c\u8fd9\u79cd\u8bed\u8a00\u8868\u793a\u5f62\u5f0f\u53ef\u7528\u4e8e\u5bf9\u7279\u5b9a\u673a\u5668\u5b66\u4e60\u4efb\u52a1\u8fdb\u884c\u5fae\u8c03\u3002 BERT \u88ab\u79f0\u4e3a\u662f NLP \u9886\u57df\u4e2d\u91cc\u7a0b\u7891\u7684\u8fdb\u5c55\uff1b\u76ee\u524d\uff0cBERT \u4e5f\u662f NLP \u6df1\u5ea6\u5b66\u4e60\u4e2d\u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206\uff0c\u5f88\u591a\u4e4b\u540e\u7684\u81ea\u7136\u8bed\u8a00\u5904\u7406\u6a21\u578b\u90fd\u662f\u5728\u6b64\u57fa\u7840\u4e0a\u4f18\u5316\u4e0e\u6539\u8fdb\u800c\u5f97\u3002 GitHub \u5730\u5740\uff1a https://github.com/google-research/bert \u5341\u56db\u3001Transformers star 21.7k fork 4.8k Transformers \u662f\u795e\u7ecf\u673a\u5668\u7ffb\u8bd1\u4e2d\u4f7f\u7528\u7684\u4e00\u79cd\u795e\u7ecf\u7f51\u7edc\uff0c\u5b83\u4e3b\u8981\u6d89\u53ca\u5c06\u8f93\u5165\u5e8f\u5217\u8f6c\u6362\u4e3a\u8f93\u51fa\u5e8f\u5217\u7684\u4efb\u52a1\uff0c\u8fd9\u4e9b\u4efb\u52a1\u5305\u62ec\u8bed\u97f3\u8bc6\u522b\u548c\u6587\u672c\u8f6c\u6362\u8bed\u97f3\u3002 \u8fd9\u7c7b\u4efb\u52a1\u9700\u8981\u300c\u8bb0\u5fc6\u300d\uff0c\u4e0b\u4e00\u4e2a\u53e5\u5b50\u5fc5\u987b\u4e0e\u524d\u4e00\u4e2a\u53e5\u7684\u4e0a\u4e0b\u6587\u76f8\u5173\u8054\uff08\u8fd9\u662f\u76f8\u5f53\u5173\u952e\u7684\uff09\uff0c\u4ee5\u514d\u4e22\u5931\u91cd\u8981\u7684\u4fe1\u606f\u3002\u901a\u8fc7\u5c06 attention \u5e94\u7528\u5230\u6b63\u5728\u4f7f\u7528\u7684\u5355\u8bcd\u4e0a\uff0c\u5219\u53ef\u4ee5\u89e3\u51b3\u5f53\u53e5\u5b50\u592a\u957f\u7684\u65f6\uff0cRNN \u6216 CNN \u65e0\u6cd5\u8ddf\u8e2a\u4e0a\u4e0b\u6587\u548c\u5185\u5bb9\u7684\u95ee\u9898\u3002 GitHub \u5730\u5740\uff1a https://github.com/huggingface/transformers \u5341\u4e94\u3001AllenNLP star 8k fork 1.7k \u4e00\u4e2a\u57fa\u4e8e PyTorch \u7684 NLP \u7814\u7a76\u5e93\uff0c\u5229\u7528\u6df1\u5ea6\u5b66\u4e60\u6765\u8fdb\u884c\u81ea\u7136\u8bed\u8a00\u7406\u89e3\uff0c\u901a\u8fc7\u5904\u7406\u4f4e\u5c42\u6b21\u7684\u7ec6\u8282\u3001\u63d0\u4f9b\u9ad8\u8d28\u91cf\u7684\u53c2\u8003\u5b9e\u73b0\uff0c\u80fd\u8f7b\u677e\u5feb\u901f\u5730\u5e2e\u52a9\u7814\u7a76\u5458\u6784\u5efa\u65b0\u7684\u8bed\u8a00\u7406\u89e3\u6a21\u578b\u3002 AllenNLP \u80fd\u8ba9\u8bbe\u8ba1\u548c\u8bc4\u4f30\u65b0\u7684\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u53d8\u5f97\u7b80\u5355\uff0c\u51e0\u4e4e\u9002\u7528\u4e8e\u4efb\u4f55 NLP \u95ee\u9898\uff0c\u901a\u8fc7\u5229\u7528\u4e00\u4e9b\u57fa\u7840\u7ec4\u4ef6\uff0c\u4f60\u53ef\u4ee5\u8f7b\u677e\u5730\u5728\u4e91\u7aef\u6216\u662f\u4f60\u81ea\u5df1\u7684\u7b14\u8bb0\u672c\u4e0a\u8dd1\u6a21\u578b\u3002 GitHub \u5730\u5740\uff1a https://github.com/allenai/allennlp \u5341\u516d\u3001flair star 8.1k fork 1k \u4e00\u6b3e\u7b80\u5355\u6613\u7528\u7684 Python NLP \u5e93\uff0c\u5141\u8bb8\u5c06\u5f53\u524d\u6700\u4f18\u81ea\u7136\u8bed\u8a00\u5904\u7406\uff08NLP\uff09\u6a21\u578b\u5e94\u7528\u4e8e\u6587\u672c\uff0c\u5982\u547d\u540d\u5b9e\u4f53\u8bc6\u522b\uff08NER\uff09\u3001\u8bcd\u6027\u6807\u6ce8\uff08PoS\uff09\u3001\u8bcd\u4e49\u6d88\u6b67\u548c\u5206\u7c7b\u3002 Flair \u57fa\u4e8e Pytorch \u7684 NLP \u6846\u67b6\uff0c\u5b83\u7684\u63a5\u53e3\u76f8\u5bf9\u66f4\u7b80\u5355\uff0c\u5141\u8bb8\u7528\u6237\u4f7f\u7528\u548c\u7ed3\u5408\u4e0d\u540c\u7684\u8bcd\u5d4c\u5165\u548c\u6587\u6863\u5d4c\u5165\uff0c\u5305\u62ec Flair \u5d4c\u5165\u3001BERT \u5d4c\u5165\u548c ELMo \u5d4c\u5165\u3002 GitHub \u5730\u5740\uff1a https://github.com/flairNLP/flair \u5341\u4e03\u3001spaCy star 15.7k fork 2.8k \u8fd9\u662f\u4e00\u4e2a\u5177\u6709\u5de5\u4e1a\u5f3a\u5ea6\u7ea7\u7684 Python \u81ea\u7136\u8bed\u8a00\u5904\u7406\u5de5\u5177\u5305\u3002 \u5b83\u5df2\u7ecf\u6210\u4e3a Python \u4e2d\u6700\u5e7f\u6cdb\u4f7f\u7528\u7684\u5de5\u4e1a\u7ea7\u81ea\u7136\u8bed\u8a00\u5e93\u4e4b\u4e00\uff0c\u5b83\u63d0\u4f9b\u4e86\u5f53\u524d\u6700\u4f73\u7684\u51c6\u786e\u6027\u548c\u6548\u7387\uff0c\u5e76\u4e14\u6709\u4e00\u4e2a\u6d3b\u8dc3\u7684\u5f00\u6e90\u793e\u533a\u652f\u6301\u3002 GitHub \u5730\u5740\uff1a https://github.com/explosion/spaCy \u5341\u516b\u3001fastText star 20.5k fork 3.9k FastText \u662f Facebook \u4eba\u5de5\u667a\u80fd\u7814\u7a76\u5b9e\u9a8c\u5ba4\uff08FAIR\uff09\u5f00\u6e90\u7684\u4e00\u4e2a\u6587\u672c\u5904\u7406\u5e93\uff0c\u4ed6\u662f\u4e00\u4e2a\u4e13\u95e8\u7528\u4e8e\u6587\u672c\u5206\u7c7b\u548c\u5916\u6587\u672c\u8868\u793a\u7684\u5e93\uff0c\u7528\u4e8e\u9ad8\u6548\u6587\u672c\u5206\u7c7b\u548c\u8868\u793a\u5b66\u4e60\u3002 fastText \u7684\u6838\u5fc3\u662f\u4f7f\u7528\u300c\u8bcd\u888b\u300d\u7684\u65b9\u5f0f\uff0c\u4e0d\u7ba1\u6587\u5b57\u7684\u987a\u5e8f\uff1b\u4f46\u5b83\u4e0d\u662f\u7ebf\u6027\u7684\uff0c\u800c\u662f\u4f7f\u7528\u5206\u5c42\u5206\u7c7b\u5668\u6765\u5c06\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u4f4e\u5230\u5bf9\u6570\u7ea7\u522b\uff0c\u5e76\u4e14\u5728\u5177\u6709\u66f4\u9ad8\u5206\u7c7b\u6570\u91cf\u7684\u5927\u6570\u636e\u96c6\u4e0a\u66f4\u9ad8\u6548\u3002 GitHub \u5730\u5740\uff1a https://github.com/facebookresearch/fastText \u9002\u7528\u4e8e\u8bed\u97f3\u8bc6\u522b\u7684\u5de5\u5177 \u5341\u4e5d\u3001Kaldi star 8.2k fork 3.7k Kaldi \u662f\u76ee\u524d\u4f7f\u7528\u5e7f\u6cdb\u7684\u5f00\u53d1\u8bed\u97f3\u8bc6\u522b\u5e94\u7528\u7684\u6846\u67b6\u3002 \u8be5\u8bed\u97f3\u8bc6\u522b\u5de5\u5177\u5305\u4f7f\u7528\u4e86 C ++\u7f16\u5199\uff0c\u7814\u7a76\u5f00\u53d1\u4eba\u5458\u5229\u7528 Kaldi \u53ef\u4ee5\u8bad\u7ec3\u51fa\u8bed\u97f3\u8bc6\u522b\u795e\u7ecf\u7f51\u8def\u6a21\u578b\uff0c\u4f46\u5982\u679c\u9700\u8981\u5c06\u8bad\u7ec3\u5f97\u5230\u7684\u6a21\u578b\u90e8\u7f72\u5230\u79fb\u52a8\u7aef\u8bbe\u5907\u4e0a\uff0c\u901a\u5e38\u9700\u8981\u5927\u91cf\u7684\u79fb\u690d\u5f00\u53d1\u5de5\u4f5c\u3002 GitHub \u5730\u5740\uff1a https://github.com/kaldi-asr/kaldi \u4e8c\u5341\u3001DeepSpeech star 13k fork 2.4k DeepSpeech \u662f\u4e00\u4e2a\u5f00\u6e90\u8bed\u97f3\u8f6c\u6587\u672c\u5f15\u64ce\uff0c\u4f7f\u7528\u57fa\u4e8e\u767e\u5ea6\u6df1\u5ea6\u8bed\u97f3\u7814\u7a76\u8bba\u6587\u7684\u673a\u5668\u5b66\u4e60\u6280\u672f\u8bad\u7ec3\u7684\u6a21\u578b\u3002\u5176\u4e2d\uff0c\u8be5\u9879\u76ee\u8fd0\u7528\u5230\u4e86 Google \u7684 TensorFlow \u6765\u7b80\u5316\u5b9e\u65bd\u8fc7\u7a0b\u3002 GitHub \u5730\u5740\uff1a https://github.com/mozilla/DeepSpeech \u4e8c\u5341\u4e00\u3001wav2letter star 4.8k fork 770 \u8fd9\u662f\u7531 Facebook \u4eba\u5de5\u667a\u80fd\u7814\u7a76\u9662\u53d1\u5e03\u7684\u9996\u4e2a\u5168\u5377\u79ef\u81ea\u52a8\u8bed\u97f3\u8bc6\u522b\u5de5\u5177\u5305\uff0c\u5b83\u662f\u4e00\u4e2a\u7b80\u5355\u9ad8\u6548\u7684\u7aef\u5230\u7aef\u81ea\u52a8\u8bed\u97f3\u8bc6\u522b\uff08ASR\uff09\u7cfb\u7edf\u3002 wav2letter \u7684\u6838\u5fc3\u8bbe\u8ba1\u57fa\u4e8e\u4e09\u4e2a\u5173\u952e\u539f\u5219\uff0c\u5305\u62ec\uff1a\u5b9e\u73b0\u5728\u5305\u542b\u6210\u5343\u4e0a\u4e07\u5c0f\u65f6\u8bed\u97f3\u6570\u636e\u96c6\u4e0a\u7684\u9ad8\u6548\u6a21\u578b\u8bad\u7ec3\uff1b\u7b80\u5355\u53ef\u6269\u5c55\u6a21\u578b\uff0c\u53ef\u4ee5\u63a5\u5165\u65b0\u7684\u7f51\u7edc\u67b6\u6784\u3001\u635f\u5931\u51fd\u6570\u4ee5\u53ca\u5176\u4ed6\u8bed\u97f3\u8bc6\u522b\u7cfb\u7edf\u4e2d\u7684\u6838\u5fc3\u64cd\u4f5c\uff1b\u4ee5\u53ca\u5e73\u6ed1\u8bed\u97f3\u8bc6\u522b\u6a21\u578b\u4ece\u7814\u7a76\u5230\u751f\u4ea7\u90e8\u7f72\u7684\u8fc7\u6e21\u3002 GitHub \u5730\u5740\uff1a https://github.com/facebookresearch/wav2letter \u9002\u7528\u4e8e\u8ba1\u7b97\u673a\u89c6\u89c9\u7684\u5de5\u5177 \u4e8c\u5341\u4e8c\u3001YOLO star 16.2k fork 10.4k YOLO \u662f\u5f53\u524d\u6df1\u5ea6\u5b66\u4e60\u9886\u57df\u89e3\u51b3\u56fe\u50cf\u68c0\u6d4b\u95ee\u9898\u6700\u5148\u8fdb\u7684\u5b9e\u65f6\u7cfb\u7edf\u3002\u5728\u68c0\u6d4b\u8fc7\u7a0b\u4e2d\uff0cYOLO \u9996\u5148\u5c06\u56fe\u50cf\u5212\u5206\u4e3a\u89c4\u5b9a\u7684\u8fb9\u754c\u6846\uff0c\u7136\u540e\u5bf9\u6240\u6709\u8fb9\u754c\u6846\u5e76\u884c\u8fd0\u884c\u8bc6\u522b\u7b97\u6cd5\uff0c\u6765\u786e\u5b9a\u7269\u4f53\u6240\u5c5e\u7684\u7c7b\u522b\u3002\u786e\u5b9a\u7c7b\u522b\u4e4b\u540e\uff0cYOLO \u518d\u667a\u80fd\u5730\u5408\u5e76\u8fd9\u4e9b\u8fb9\u754c\u6846\uff0c\u5728\u7269\u4f53\u5468\u56f4\u5f62\u6210\u6700\u4f18\u8fb9\u754c\u6846\u3002 \u8fd9\u4e9b\u6b65\u9aa4\u5168\u90e8\u5e76\u884c\u8fdb\u884c\uff0c\u56e0\u6b64 YOLO \u80fd\u591f\u5b9e\u73b0\u5b9e\u65f6\u8fd0\u884c\uff0c\u5e76\u4e14\u6bcf\u79d2\u5904\u7406\u591a\u8fbe 40 \u5f20\u56fe\u50cf\u3002\u636e\u5b98\u7f51\u663e\u793a\uff0c\u5728 Pascal Titan X \u4e0a\uff0c\u5b83\u4ee5 30 FPS \u7684\u901f\u5ea6\u5904\u7406\u56fe\u50cf\uff0c\u5e76\u4e14\u5728 COCO \u6d4b\u8bd5\u5f00\u53d1\u4e2d\u7684 mAP \u4e3a 57.9\uff05\u3002 GitHub \u5730\u5740\uff1a https://github.com/allanzelener/YAD2K \u4e8c\u5341\u4e09\u3001OpenCV star 41.9k fork 32.4k OpenCV \u662f\u82f1\u7279\u5c14\u5f00\u6e90\u7684\u8de8\u5e73\u53f0\u8ba1\u7b97\u673a\u89c6\u89c9\u5e93\uff08 https://opencv.org \uff09\uff0c\u88ab\u79f0\u4e3a CV \u9886\u57df\u5f00\u53d1\u8005\u4e0e\u7814\u7a76\u8005\u7684\u5fc5\u5907\u5de5\u5177\u5305\u3002 \u8fd9\u662f\u4e00\u5957\u5305\u542b\u4ece\u56fe\u50cf\u9884\u5904\u7406\u5230\u9884\u8bad\u7ec3\u6a21\u578b\u8c03\u7528\u7b49\u5927\u91cf\u89c6\u89c9 API \u7684\u5e93\uff0c\u5e76\u53ef\u4ee5\u5904\u7406\u56fe\u50cf\u8bc6\u522b\u3001\u76ee\u6807\u68c0\u6d4b\u3001\u56fe\u50cf\u5206\u5272\u548c\u884c\u4eba\u518d\u8bc6\u522b\u7b49\u4e3b\u6d41\u89c6\u89c9\u4efb\u52a1\u3002\u5176\u6700\u663e\u8457\u7684\u7279\u70b9\u662f\u5b83\u63d0\u4f9b\u4e86\u6574\u5957\u6d41\u7a0b\u7684\u5de5\u5177\uff0c\u56e0\u6b64\u5f00\u53d1\u8005\u65e0\u9700\u4e86\u89e3\u5404\u4e2a\u6a21\u578b\u7684\u539f\u7406\u5c31\u80fd\u7528 API \u6784\u5efa\u89c6\u89c9\u4efb\u52a1\u3002\u5b83\u5177\u5907 C++\u3001Python \u548c Java \u63a5\u53e3\uff0c\u652f\u6301 Windows\u3001Linux\u3001Mac OS\u3001iOS \u548c Android \u7cfb\u7edf\u3002 GitHub \u5730\u5740\uff1a https://github.com/opencv/opencv \u4e8c\u5341\u56db\u3001Detectron2 star 7.7k fork 1.4k Detectron2 \u5219\u662f PyTorch 1.3 \u4e2d\u4e00\u91cd\u5927\u65b0\u5de5\u5177\uff0c\u5b83\u6e90\u4e8e maskrcnn \u57fa\u51c6\u6d4b\u8bd5\uff0c\u4e5f\u662f\u5bf9\u5148\u524d\u7248\u672c detectron \u7684\u4e00\u6b21\u5f7b\u5e95\u91cd\u5199\u3002 Detectron2 \u901a\u8fc7\u5168\u65b0\u7684\u6a21\u5757\u5316\u8bbe\u8ba1\uff0c\u53d8\u5f97\u66f4\u7075\u6d3b\u4e14\u6613\u4e8e\u6269\u5c55\uff0c\u5b83\u80fd\u591f\u5728\u5355\u4e2a\u6216\u591a\u4e2a GPU \u670d\u52a1\u5668\u4e0a\u63d0\u4f9b\u66f4\u5feb\u901f\u7684\u8bad\u7ec3\u901f\u5ea6\uff0c\u5305\u542b\u4e86\u66f4\u5927\u7684\u7075\u6d3b\u6027\u4e0e\u6269\u5c55\u6027\uff0c\u5e76\u589e\u5f3a\u4e86\u53ef\u7ef4\u62a4\u6027\u548c\u53ef\u4f38\u7f29\u6027\uff0c\u4ee5\u652f\u6301\u5728\u751f\u4ea7\u4e2d\u7684\u7528\u4f8b\u3002 GitHub \u5730\u5740\uff1a https://github.com/facebookresearch/detectron2 \u4e8c\u5341\u4e94\u3001OpenPose star 15.9k fork 4.7k OpenPose \u4eba\u4f53\u59ff\u6001\u8bc6\u522b\u9879\u76ee\u662f\u7f8e\u56fd\u5361\u8010\u57fa\u6885\u9686\u5927\u5b66\uff08CMU\uff09\u57fa\u4e8e\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u548c\u76d1\u7763\u5b66\u4e60\u5e76\u4ee5 caffe \u4e3a\u6846\u67b6\u5f00\u53d1\u7684\u5f00\u6e90\u5e93\u3002 \u5b83\u53ef\u4ee5\u5b9e\u73b0\u4eba\u4f53\u52a8\u4f5c\u3001\u9762\u90e8\u8868\u60c5\u3001\u624b\u6307\u8fd0\u52a8\u7b49\u59ff\u6001\u4f30\u8ba1\u3002\u9002\u7528\u4e8e\u5355\u4eba\u548c\u591a\u4eba\uff0c\u5177\u6709\u6781\u597d\u7684\u9c81\u68d2\u6027\u3002\u662f\u4e16\u754c\u4e0a\u9996\u4e2a\u57fa\u4e8e\u6df1\u5ea6\u5b66\u4e60\u7684\u5b9e\u65f6\u591a\u4eba\u4e8c\u7ef4\u59ff\u6001\u4f30\u8ba1\u5e94\u7528\uff0c\u5f88\u591a\u4eba\u4f53\u59ff\u6001\u4f30\u8ba1\u5b9e\u4f8b\u90fd\u662f\u57fa\u4e8e\u5b83\u5b9e\u73b0\uff0c\u5982\u52a8\u4f5c\u91c7\u96c6\u30013D \u8bd5\u8863\u3001\u7ed8\u753b\u8f85\u52a9\u7b49\u3002 GitHub \u5730\u5740\uff1a https://github.com/CMU-Perceptual-Computing-Lab/openpose \u4e8c\u5341\u516d\u3001facenet star 10k fork 4.1k FaceNet \u91c7\u7528\u4e86\u6df1\u5ea6\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\uff08CNN\uff09\u5b66\u4e60\u5c06\u56fe\u50cf\u6620\u5c04\u5230\u6b27\u5f0f\u7a7a\u95f4\uff0c\u4e5f\u88ab\u79f0\u4e3a\u901a\u7528\u4eba\u8138\u8bc6\u522b\u7cfb\u7edf\u3002 \u8be5\u7cfb\u7edf\u53ef\u4ece\u4eba\u8138\u4e2d\u63d0\u53d6\u9ad8\u8d28\u91cf\u7684\u7279\u5f81\uff0c\u79f0\u4e3a\u4eba\u8138\u5d4c\u5165\uff08face embeddings\uff09\uff0c\u53ef\u7528\u4e8e\u8bad\u7ec3\u4eba\u8138\u8bc6\u522b\u7cfb\u7edf\uff0c\u4ece\u800c\u5b9e\u73b0\u5bf9\u4eba\u8138\u7684\u9a8c\u8bc1\u3002\u5b83\u5728 LFW \u6570\u636e\u96c6\u4e0a\u6d4b\u8bd5\u7684\u51c6\u786e\u7387\u8fbe\u5230\u4e86 99.63%\uff0c\u5728 YouTube Faces DB \u6570\u636e\u96c6\u4e0a\u51c6\u786e\u7387\u4e3a 95.12%\u3002 GitHub \u5730\u5740\uff1a https://github.com/davidsandberg/facenet \u9002\u7528\u4e8e\u5206\u5e03\u5f0f\u8bad\u7ec3\u7684\u5de5\u5177 \u4e8c\u5341\u4e03\u3001Spark MLlib star 25.1k fork 21.1k Spark \u662f\u4e00\u4e2a\u5f00\u6e90\u96c6\u7fa4\u8fd0\u7b97\u6846\u67b6\uff0c\u4e5f\u662f\u73b0\u5728\u5927\u6570\u636e\u9886\u57df\u70ed\u95e8\u5f00\u6e90\u8f6f\u4ef6\u4e4b\u4e00\uff08 https://spark.apache.org/mllib/ \uff09\u3002 \u7531\u4e8e Spark \u4f7f\u7528\u4e86\u5185\u5b58\u5185\u8fd0\u7b97\u6280\u672f\uff0c\u5b83\u5728\u5185\u5b58\u4e0a\u7684\u8fd0\u7b97\u901f\u5ea6\u6bd4 Hadoop MapReduce \u7684\u8fd0\u7b97\u901f\u5ea6\u5feb\u4e0a 100 \u500d\uff1b\u8fd9\u4e5f\u4f7f\u5f97 Spark MLlib \u5206\u5e03\u5f0f\u8ba1\u7b97\u6846\u67b6\u8fd0\u884c\u975e\u5e38\u9ad8\u6548\u3001\u5feb\u901f\u3002\u5b83\u53ef\u4ee5\u5b9e\u73b0\u5927\u90e8\u5206\u673a\u5668\u5b66\u4e60\uff0c\u5982\uff1a\u805a\u7c7b\u3001\u5206\u7c7b\u3001\u56de\u5f52\u7b49\u7b97\u6cd5\uff0c\u5e76\u5141\u8bb8\u5c06\u6570\u636e\u52a0\u8f7d\u81f3\u96c6\u7fa4\u5185\u5b58\uff0c\u591a\u6b21\u5bf9\u5176\u8fdb\u884c\u67e5\u8be2\uff0c\u6240\u4ee5\u975e\u5e38\u9002\u5408\u7528\u4e8e\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u3002 GitHub \u5730\u5740\uff1a https://github.com/apache/spark \u4e8c\u5341\u516b\u3001Mahout star 1.8k fork 930 Mahout \u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u7ebf\u6027\u4ee3\u6570\u6846\u67b6\uff0c\u7528\u4e8e\u5feb\u901f\u521b\u5efa\u53ef\u6269\u5c55\u7684\u9ad8\u6027\u80fd\u673a\u5668\u5b66\u4e60\u5e94\u7528\u7a0b\u5e8f\uff08 http://mahout.apache.org/ \uff09\u3002 Mahout \u6846\u67b6\u957f\u671f\u4ee5\u6765\u4e00\u76f4\u4e0e Hadoop \u7ed1\u5b9a\uff0c\u4f46\u5b83\u7684\u8bb8\u591a\u7b97\u6cd5\u4e5f\u53ef\u4ee5\u5728 Hadoop \u4e4b\u5916\u8fd0\u884c\u3002\u5b83\u5141\u8bb8\u591a\u79cd\u7b97\u6cd5\u53ef\u4ee5\u8de8\u8d8a\u5206\u5e03\u5f0f Spark \u7fa4\u96c6\u4e0a\u8fd0\u884c\uff0c\u5e76\u4e14\u652f\u6301 CPU \u548c GPU \u8fd0\u884c\u3002 GitHub \u5730\u5740\uff1a https://github.com/apache/mahout \u4e8c\u5341\u4e5d\u3001Horovod star 8.5k fork 1.3k \u8fd9\u662f\u7531 Uber \u5f00\u6e90\u7684\u4e00\u4e2a\u8de8\u591a\u53f0\u673a\u5668\u7684\u5206\u5e03\u5f0f\u6df1\u5ea6\u5b66\u4e60\u7684 TensorFlow \u8bad\u7ec3\u6846\u67b6\uff0c\u53ef\u4ee5\u4f7f\u5206\u5e03\u5f0f\u6df1\u5ea6\u5b66\u4e60\u5feb\u901f\u4e14\u6613\u4e8e\u4f7f\u7528\u3002 \u636e\u4ecb\u7ecd\uff0cHorovod \u8ba9\u5f00\u53d1\u4eba\u5458\u53ea\u9700\u51e0\u884c\u4ee3\u7801\u5c31\u53ef\u4ee5\u5b8c\u6210\u4efb\u52a1\u3002\u8fd9\u4e0d\u4ec5\u52a0\u5feb\u4e86\u521d\u59cb\u4fee\u6539\u8fc7\u7a0b\uff0c\u800c\u4e14\u8fdb\u4e00\u6b65\u7b80\u5316\u4e86\u8c03\u8bd5\u3002\u8003\u8651\u5230\u6df1\u5ea6\u5b66\u4e60\u9879\u76ee\u7684\u9ad8\u5ea6\u8fed\u4ee3\u6027\uff0c\u8fd9\u4e5f\u53ef\u4ee5\u8282\u7701\u5927\u91cf\u65f6\u95f4\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u5b83\u8fd8\u7ed3\u5408\u4e86\u9ad8\u6027\u80fd\u548c\u4fee\u8865\u4f4e\u7ea7\u6a21\u578b\u7ec6\u8282\u7684\u80fd\u529b\uff0c\u4f8b\u5982\uff1a\u540c\u65f6\u4f7f\u7528\u9ad8\u7ea7 api\uff0c\u5e76\u4f7f\u7528 NVIDIA \u7684 CUDA \u5de5\u5177\u5305\u5b9e\u73b0\u81ea\u5df1\u7684\u81ea\u5b9a\u4e49\u64cd\u4f5c\u7b26\u3002 GitHub \u5730\u5740\uff1a https://github.com/horovod/horovod \u4e09\u5341\u3001Dask star 6.2k fork 994 \u5f53\u5f00\u53d1\u8005\u9700\u8981\u5e76\u884c\u5316\u5230\u591a\u6838\u65f6\uff0c\u53ef\u4ee5\u7528 Dask \u6765\u5c06\u8ba1\u7b97\u6269\u5c55\u5230\u591a\u4e2a\u5185\u6838\u751a\u81f3\u591a\u4e2a\u673a\u5668\u3002 Dask \u63d0\u4f9b\u4e86 NumPy Arrays\uff0cPandas Dataframes \u548c\u5e38\u89c4\u5217\u8868\u7684\u62bd\u8c61\uff0c\u80fd\u591f\u5728\u65e0\u6cd5\u653e\u5165\u4e3b\u5185\u5b58\u7684\u6570\u636e\u96c6\u4e0a\u5e76\u884c\u8fd0\u884c\u3002\u5bf9\u5927\u578b\u6570\u636e\u96c6\u6765\u8bf4\uff0cDask \u7684\u9ad8\u7ea7\u96c6\u5408\u662f NumPy \u548c Pandas \u7684\u66ff\u4ee3\u65b9\u6848\u3002 GitHub \u5730\u5740\uff1a https://github.com/dask/dask \u4e09\u5341\u4e00\u3001Ray star 10.3k fork 1.5k Ray \u662f\u4e00\u4e2a\u9ad8\u6027\u80fd\u5206\u5e03\u5f0f\u6267\u884c\u6846\u67b6\uff0c\u5b83\u4f7f\u7528\u4e86\u548c\u4f20\u7edf\u5206\u5e03\u5f0f\u8ba1\u7b97\u7cfb\u7edf\u4e0d\u4e00\u6837\u7684\u67b6\u6784\u548c\u5bf9\u5206\u5e03\u5f0f\u8ba1\u7b97\u7684\u62bd\u8c61\u65b9\u5f0f\uff0c\u7528\u4e8e\u5feb\u901f\u800c\u7b80\u5355\u7684\u6784\u5efa\u548c\u8fd0\u884c\u5206\u5e03\u5f0f\u5e94\u7528\u7a0b\u5e8f\u3002 Ray \u6309\u7167\u5178\u578b\u7684 Master-Slave \u8fdb\u884c\u8bbe\u8ba1\u3002\u5176\u4e2d\uff0cMaster \u8d1f\u8d23\u5168\u5c40\u534f\u8c03\u548c\u72b6\u6001\u7ef4\u62a4\uff0cSlave \u6267\u884c\u5206\u5e03\u5f0f\u8ba1\u7b97\u4efb\u52a1\u3002\u4e0d\u8fc7\u548c\u4f20\u7edf\u7684\u5206\u5e03\u5f0f\u8ba1\u7b97\u7cfb\u7edf\u4e0d\u540c\u7684\u662f\uff0cRay \u4f7f\u7528\u4e86\u6df7\u5408\u4efb\u52a1\u8c03\u5ea6\u7684\u601d\u8def\uff0c\u6027\u80fd\u66f4\u5f3a\u3002 GitHub \u5730\u5740\uff1a https://github.com/ray-project/ray \u9002\u7528\u4e8e\u81ea\u52a8\u5efa\u6a21\u7684\u5de5\u5177 \u4e09\u5341\u4e8c\u3001TPOT star 6.7k fork 1.2k TPOT \u662f\u4e00\u4e2a Python \u7f16\u5199\u7684\u8f6f\u4ef6\u5305\uff0c\u5229\u7528\u9057\u4f20\u7b97\u6cd5\u884c\u7279\u5f81\u9009\u62e9\u548c\u7b97\u6cd5\u6a21\u578b\u9009\u62e9\uff0c\u4ec5\u9700\u51e0\u884c\u4ee3\u7801\uff0c\u5c31\u80fd\u751f\u6210\u5b8c\u6574\u7684\u673a\u5668\u5b66\u4e60\u4ee3\u7801\u3002 \u5728\u673a\u5668\u5b66\u4e60\u6a21\u578b\u5f00\u53d1\u56fe\u4e2d\uff0cTPOT \u6240\u5b8c\u6210\u7684\u5373\u901a\u8fc7\u5229\u7528\u9057\u4f20\u7b97\u6cd5\uff0c\u5206\u6790\u6570\u5343\u79cd\u53ef\u80fd\u7684\u7ec4\u5408\uff0c\u4e3a\u6a21\u578b\u3001\u53c2\u6570\u627e\u5230\u6700\u4f73\u7684\u7ec4\u5408\uff0c\u4ece\u800c\u81ea\u52a8\u5316\u673a\u5668\u5b66\u4e60\u4e2d\u7684\u6a21\u578b\u9009\u62e9\u53ca\u8c03\u53c2\u90e8\u5206\u3002 GitHub \u5730\u5740\uff1a https://github.com/EpistasisLab/tpot \u4e09\u5341\u4e09\u3001AutoKeras star 6.6k fork 1.1k \u5b83\u4f7f\u7528\u4e86\u9ad8\u6548\u795e\u7ecf\u67b6\u6784\u641c\u7d22\uff08ENAS\uff0c https://arxiv.org/abs/1802.03268 \uff09\uff0c\u53ea\u9700\u4f7f\u7528 pip install autokeras \u5c31\u80fd\u5feb\u901f\u8f7b\u677e\u5730\u5b89\u88c5\u8f6f\u4ef6\u5305\uff0c\u7136\u540e\u5c31\u80fd\u7528\u81ea\u5df1\u7684\u6570\u636e\u96c6\u6765\u6267\u884c\u81ea\u5df1\u7684\u67b6\u6784\u641c\u7d22\u6784\u5efa\u601d\u8def\u3002 \u76f8\u6bd4\u8c37\u6b4c AutoML\uff0c\u4e24\u8005\u6784\u5efa\u601d\u8def\u7c7b\u4f3c\uff0c\u4f46\u4e0d\u540c\u7684\u662f\uff0cAutoKeras \u6240\u6709\u4ee3\u7801\u90fd\u5df2\u7ecf\u5f00\u6e90\uff0c\u53ef\u4f9b\u5f00\u53d1\u8005\u65e0\u507f\u4f7f\u7528\u3002 GitHub \u5730\u5740\uff1a https://github.com/keras-team/autokeras \u4e09\u5341\u56db\u3001Featuretools star 4.6k fork 602 \u8fd9\u662f\u4e00\u4e2a\u7528\u4e8e\u81ea\u52a8\u5316\u7279\u6027\u5de5\u7a0b\u7684\u5f00\u6e90 python \u6846\u67b6\uff08 https://www.featuretools.com/ \uff09\u3002 \u5b83\u53ef\u4ee5\u5e2e\u52a9\u5f00\u53d1\u8005\u4ece\u4e00\u7ec4\u76f8\u5173\u6570\u636e\u8868\u4e2d\u81ea\u52a8\u6784\u9020\u7279\u5f81\u3002\u5f00\u53d1\u8005\u53ea\u9700\u8981\u77e5\u9053\u6570\u636e\u8868\u7684\u57fa\u672c\u7ed3\u6784\u548c\u5b83\u4eec\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u7136\u540e\u5728\u5b9e\u4f53\u96c6\uff08\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff09\u4e2d\u6307\u660e\u3002\u7136\u540e\u5728\u6709\u4e86\u5b9e\u4f53\u96c6\u4e4b\u540e\uff0c\u4f7f\u7528\u4e00\u4e2a\u540d\u4e3a\u6df1\u5ea6\u7279\u5f81\u5408\u6210\uff08DFS\uff09\u7684\u65b9\u6cd5\uff0c\u5728\u4e00\u4e2a\u51fd\u6570\u8c03\u7528\u4e2d\u6784\u5efa\u51fa\u6570\u5343\u4e2a\u7279\u5f81\u3002 GitHub \u5730\u5740\uff1a https://github.com/FeatureLabs/featuretools https://github.com/FeatureLabs/featuretools \u4e09\u5341\u4e94\u3001NNI star 5.3k fork 683 NNI \u662f\u7531\u5fae\u8f6f\u53d1\u5e03\u7684\u4e00\u4e2a\u7528\u4e8e\u795e\u7ecf\u7f51\u7edc\u8d85\u53c2\u6570\u8c03\u6574\u7684\u5f00\u6e90 AutoML \u5de5\u5177\u5305\uff0c\u4e5f\u662f\u76ee\u524d\u8f83\u4e3a\u70ed\u95e8\u7684 AutoML \u5f00\u6e90\u9879\u76ee\u4e4b\u4e00\u3002 \u6700\u65b0\u7248\u672c\u7684 NNI \u5bf9\u673a\u5668\u5b66\u4e60\u751f\u547d\u5468\u671f\u7684\u5404\u4e2a\u73af\u8282\u505a\u4e86\u66f4\u52a0\u5168\u9762\u7684\u652f\u6301\uff0c\u5305\u62ec\uff1a\u7279\u5f81\u5de5\u7a0b\u3001\u795e\u7ecf\u7f51\u7edc\u67b6\u6784\u641c\u7d22\uff08NAS\uff09\u3001\u8d85\u53c2\u8c03\u4f18\u548c\u6a21\u578b\u538b\u7f29\uff0c\u5f00\u53d1\u8005\u90fd\u80fd\u4f7f\u7528\u81ea\u52a8\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u6765\u5b8c\u6210\uff0c\u5373\u4f7f\u662f\u5f00\u53d1\u5c0f\u767d\u4e5f\u80fd\u8f7b\u677e\u4e0a\u624b\u3002 GitHub \u5730\u5740\uff1a https://github.com/microsoft/nni \u4e09\u5341\u516d\u3001AdaNet star 3k fork 443 AdaNet \u662f\u7531\u8c37\u6b4c\u5f00\u6e90\u7684\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u7684\u57fa\u4e8e TensorFlow \u6846\u67b6\uff08 https://adanet.readthedocs.io/en/v0.8.0/ \uff09\u3002 AdaNet \u6613\u4e8e\u4f7f\u7528\uff0c\u5e76\u80fd\u521b\u5efa\u9ad8\u8d28\u91cf\u7684\u6a21\u578b\uff0c\u4e3a ML \u5b9e\u8df5\u8005\u8282\u7701\u4e86\u7528\u4e8e\u9009\u62e9\u6700\u4f73\u795e\u7ecf\u7f51\u7edc\u67b6\u6784\u7684\u65f6\u95f4\uff0c\u5b9e\u73b0\u4e86\u4e00\u79cd\u5c06\u5b66\u4e60\u795e\u7ecf\u67b6\u6784\u4f5c\u4e3a\u5b50\u7f51\u7edc\u96c6\u5408\u7684\u81ea\u9002\u5e94\u7b97\u6cd5\u3002 GitHub \u5730\u5740\uff1a https://github.com/tensorflow/adanet IDEs \u7cfb\u7edf \u4e09\u5341\u4e03\u3001Jupyter star 9.3k fork 2.2k Jupyter \u662f\u4e00\u79cd Web \u5e94\u7528\uff0c\u6db5\u76d6\u4e86\u8de8\u6570\u5341\u79cd\u7f16\u7a0b\u8bed\u8a00\u7684\u4ea4\u4e92\u5f0f\u8ba1\u7b97\u3002 \u5b83\u80fd\u8ba9\u7528\u6237\u5c06\u8bf4\u660e\u6587\u672c\u3001\u6570\u5b66\u65b9\u7a0b\u3001\u4ee3\u7801\u548c\u53ef\u89c6\u5316\u5185\u5bb9\u5168\u90e8\u7ec4\u5408\u5230\u4e00\u4e2a\u6613\u4e8e\u5171\u4eab\u7684\u6587\u6863\u4e2d\uff0c\u975e\u5e38\u65b9\u4fbf\u7814\u7a76\u548c\u6559\u5b66\u3002\u5728\u6570\u636e\u6316\u6398\u5e73\u53f0 Kaggle \u4e0a\uff0c\u4f7f\u7528 Python \u7684\u6570\u636e\u5f00\u53d1\u8005\u5927\u591a\u6570\u9009\u62e9\u4e86 jupyter \u6765\u5b9e\u73b0\u5206\u6790\u548c\u5efa\u6a21\u7684\u8fc7\u7a0b\u3002 GitHub \u5730\u5740\uff1a https://github.com/jupyter/jupyter \u4e09\u5341\u516b\u3001Spyder star 5.1k fork 1k Spyder \u662f\u4e00\u4e2a \u7528\u4e8e\u79d1\u5b66\u8ba1\u7b97\u7684\u4f7f\u7528 Python \u7f16\u7a0b\u8bed\u8a00\u7684\u96c6\u6210\u5f00\u53d1\u73af\u5883\uff08IDE\uff09\u3002 \u5b83\u7ed3\u5408\u4e86\u7efc\u5408\u5f00\u53d1\u5de5\u5177\u7684\u9ad8\u7ea7\u7f16\u8f91\u3001\u5206\u6790\u3001\u8c03\u8bd5\u529f\u80fd\u4ee5\u53ca\u6570\u636e\u63a2\u7d22\u3001\u4ea4\u4e92\u5f0f\u6267\u884c\u3001\u6df1\u5ea6\u68c0\u67e5\u548c\u79d1\u5b66\u5305\u7684\u53ef\u89c6\u5316\u529f\u80fd\uff0c\u5bf9\u4e8e\u521d\u5b66\u8005\u4e5f\u975e\u5e38\u53cb\u597d\u3002 GitHub \u5730\u5740\uff1a https://github.com/spyder-ide/spyder \u4e09\u5341\u4e5d\u3001Zeppelin star 4.6k fork 2.2k Zeppelin \u662f\u4e00\u6b3e\u57fa\u4e8e Web \u7684\u4ea4\u4e92\u5f0f\u6570\u636e\u5206\u6790\u5e73\u53f0\u3002\u5b83\u57fa\u4e8e\u7f51\u7edc\u7684\u7b14\u8bb0\u672c\uff0c\u9ed8\u8ba4\u4f7f\u7528 Spark \u96c6\u7fa4\u4f5c\u4e3a\u5206\u6790\u5f15\u64ce\uff0c\u63d0\u4f9b\u6570\u636e\u53ef\u89c6\u5316\u7684\u6846\u67b6\uff0c\u652f\u6301\u6570\u636e\u9a71\u52a8\u7684\u4ea4\u4e92\u5f0f\u6570\u636e\u5206\u6790\u3002 \u901a\u8fc7\u914d\u7f6e\uff0c\u5b83\u4e5f\u652f\u6301\u5305\u62ec SQL\u3001Python\u3001R \u7b49\u591a\u79cd\u6570\u636e\u5206\u6790\u8bed\u8a00\uff0c\u63d0\u4f9b\u6570\u636e\u5e93\u67e5\u8be2\u3001\u52a8\u6001\u56fe\u8868\u5c55\u793a\u3001\u5730\u56fe\u7b49\u6570\u636e\u53ef\u89c6\u5316\u80fd\u529b\uff0c\u5e76\u80fd\u591f\u4ee5 Notebook \u7684\u5f62\u5f0f\u4fdd\u5b58\u548c\u5206\u53d1\u4ee3\u7801\u53ca\u5206\u6790\u7ed3\u679c\u3002 GitHub \u5730\u5740\uff1a https://github.com/apache/zeppelin \u5e73\u53f0 \u56db\u5341\u3001H2O star 4.6k fork 1.7k H2O \u662f H2O.ai \u516c\u53f8\u7684\u5b8c\u5168\u5f00\u6e90\u7684\u5206\u5e03\u5f0f\u5185\u5b58\u673a\u5668\u5b66\u4e60\u5e73\u53f0\u3002H2O \u540c\u65f6\u652f\u6301 R \u548c Python\uff0c\u652f\u6301\u6700\u5e7f\u6cdb\u4f7f\u7528\u7684\u7edf\u8ba1\u548c\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\uff0c\u5305\u62ec\u68af\u5ea6\u63d0\u5347\uff08Gradient Boosting\uff09\u673a\u5668\u3001\u5e7f\u4e49\u7ebf\u6027\u6a21\u578b\u3001\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u7b49\u3002 H2O \u5305\u62ec\u4e00\u4e2a\u81ea\u52a8\u673a\u5668\u5b66\u4e60\u6a21\u5757\uff0c\u4f7f\u7528\u81ea\u5df1\u7684\u7b97\u6cd5\u6765\u6784\u5efa\u7ba1\u9053\u3002\u5b83\u5bf9\u7279\u5f81\u5de5\u7a0b\u65b9\u6cd5\u548c\u6a21\u578b\u8d85\u53c2\u6570\u91c7\u7528\u4e86\u7a77\u4e3e\u641c\u7d22\uff0c\u4f18\u5316\u4e86\u7ba1\u9053\u3002H2O \u81ea\u52a8\u5316\u4e86\u4e00\u4e9b\u6700\u590d\u6742\u7684\u6570\u636e\u79d1\u5b66\u548c\u673a\u5668\u5b66\u4e60\u5de5\u4f5c\uff0c\u4f8b\u5982\u7279\u5f81\u5de5\u7a0b\u3001\u6a21\u578b\u9a8c\u8bc1\u3001\u6a21\u578b\u8c03\u6574\u3001\u6a21\u578b\u9009\u62e9 \u548c \u6a21\u578b\u90e8\u7f72\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u5b83\u8fd8\u63d0\u4f9b\u4e86\u81ea\u52a8\u53ef\u89c6\u5316\u4ee5\u53ca\u673a\u5668\u5b66\u4e60\u7684\u89e3\u91ca\u80fd\u529b\uff08MLI\uff09\u3002 GitHub \u5730\u5740\uff1a https://github.com/h2oai/h2o-3 \u56db\u5341\u4e00\u3001MLflow star 5.9k fork 1.2k MLflow \u662f\u673a\u5668\u5b66\u4e60\u751f\u547d\u5468\u671f\u7684\u5f00\u6e90\u5e73\u53f0\uff0c\u5f00\u653e\u63a5\u53e3\uff0c\u53ef\u4e0e\u4efb\u4f55\u673a\u5668\u5b66\u4e60\u5e93\u3001\u7b97\u6cd5\u3001\u90e8\u7f72\u5de5\u5177\u6216\u7f16\u7a0b\u8bed\u8a00\u4e00\u8d77\u4f7f\u7528\uff0c\u57fa\u4e8e REST API \u548c\u7b80\u5355\u7684\u6570\u636e\u683c\u5f0f\u800c\u6784\u5efa\u3002\u662f\u4e00\u4e2a\u5f00\u6e90\u9879\u76ee\uff0c\u5141\u8bb8\u7528\u6237\u548c\u673a\u5668\u5b66\u4e60\u5e93\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u5bf9\u5176\u8fdb\u884c\u6269\u5c55\u3002 MLflow \u73b0 alpha \u7248\uff0c\u63d0\u4f9b\u8ddf\u8e2a\u3001\u9879\u76ee\u548c\u6a21\u578b\u4e09\u5927\u7ec4\u4ef6\u3002MLflow \u7684\u8ddf\u8e2a\u7ec4\u4ef6\u652f\u6301\u8bb0\u5f55\u548c\u67e5\u8be2\u5b9e\u9a8c\u6570\u636e\uff0c\u5982\u8bc4\u4f30\u5ea6\u91cf\u6307\u6807\u548c\u53c2\u6570\u3002MLflow \u7684\u9879\u76ee\u7ec4\u4ef6\u63d0\u4f9b\u4e86\u53ef\u91cd\u590d\u8fd0\u884c\u7684\u7b80\u5355\u5305\u88c5\u683c\u5f0f\u3002\u6700\u540e\uff0cMLflow \u7684\u6a21\u578b\u7ec4\u4ef6\u63d0\u4f9b\u4e86\u7528\u4e8e\u7ba1\u7406\u548c\u90e8\u7f72\u6a21\u578b\u7684\u5de5\u5177\u3002 GitHub \u5730\u5740\uff1a https://github.com/mlflow/mlflow \u56db\u5341\u4e8c\u3001Kubeflow star 8.3k fork 1.3k Kubeflow \u9879\u76ee\u65e8\u5728\u4f7f Kubernetes \u4e0a\u7684\u673a\u5668\u5b66\u4e60\u53d8\u7684\u8f7b\u677e\u3001\u4fbf\u6377\u3001\u53ef\u6269\u5c55\uff0c\u5176\u76ee\u6807\u4e0d\u662f\u91cd\u5efa\u5176\u4ed6\u670d\u52a1\uff0c\u800c\u662f\u63d0\u4f9b\u4e00\u79cd\u7b80\u4fbf\u7684\u65b9\u5f0f\u627e\u5230\u6700\u597d\u7684 OSS \u89e3\u51b3\u65b9\u6848\u3002\u5bf9\u5206\u5e03\u5f0f\u8bad\u7ec3\u4efb\u52a1\u652f\u6301\u3002 \u7528\u4e8e\u521b\u5efa\u548c\u7ba1\u7406\u4ea4\u4e92\u5f0f Jupyter notebook \u7684 JupyterHub\uff0c\u53ef\u914d\u7f6e\u4e3a\u4f7f\u7528 CPU \u6216 GPU\uff0c\u5e76\u901a\u8fc7\u5355\u4e00\u8bbe\u7f6e\u8c03\u6574\u81f3\u5355\u4e2a\u96c6\u7fa4\u5927\u5c0f\u7684 TensorFlow \u8bad\u7ec3\u63a7\u5236\u5668\uff08Tensorflow Training Controller\uff09\uff0c\u7528\u4e8e TF \u670d\u52a1\u5bb9\u5668\uff08TF Serving container\uff09 GitHub \u5730\u5740\uff1a https://github.com/kubeflow/kubeflow \u8bc4\u5206\u63a8\u7406\u7cfb\u7edf \u56db\u5341\u4e09\u3001ONNX star 7.8k fork 1.3k ONNX \u662f\u4e00\u79cd\u9488\u5bf9\u673a\u5668\u5b66\u4e60\u6240\u8bbe\u8ba1\u7684\u5f00\u653e\u5f0f\u7684\u6587\u4ef6\u683c\u5f0f\uff0c\u7528\u4e8e\u5b58\u50a8\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u3002\u5b83\u4f7f\u5f97\u4e0d\u540c\u7684\u4eba\u5de5\u667a\u80fd\u6846\u67b6\uff08\u5982 Pytorch, MXNet\uff09\u53ef\u4ee5\u91c7\u7528\u76f8\u540c\u683c\u5f0f\u5b58\u50a8\u6a21\u578b\u6570\u636e\u5e76\u4ea4\u4e92\u3002ONNX \u7684\u89c4\u8303\u53ca\u4ee3\u7801\u4e3b\u8981\u7531\u5fae\u8f6f\uff0c\u4e9a\u9a6c\u900a\uff0cFacebook \u548c IBM \u7b49\u516c\u53f8\u5171\u540c\u5f00\u53d1\uff0c\u4ee5\u5f00\u653e\u6e90\u4ee3\u7801\u7684\u65b9\u5f0f\u6258\u7ba1\u5728 Github \u4e0a\u3002 \u76ee\u524d\u5b98\u65b9\u652f\u6301\u52a0\u8f7d ONNX \u6a21\u578b\u5e76\u8fdb\u884c\u63a8\u7406\u7684\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u6709\uff1a Caffe2, PyTorch, MXNet\uff0cML.NET\uff0cTensorRT \u548c Microsoft CNTK\uff0c\u5e76\u4e14 TensorFlow \u4e5f\u975e\u5b98\u65b9\u7684\u652f\u6301 ONNX\u3002 GitHub \u5730\u5740\uff1a https://github.com/onnx/onnx \u56db\u5341\u56db\u3001Seldon star 1.4k fork 296 \u5f00\u6e90\u673a\u5668\u5b66\u4e60\u90e8\u7f72\u5e73\u53f0 Seldon Core\uff0c\u8ba9\u673a\u5668\u5b66\u4e60\u6a21\u578b\u53ef\u4ee5\u90e8\u7f72\u4e8e Kubernetes \u4e0a\u3002Seldon Core \u7684\u76ee\u6807\uff0c\u8981\u8ba9\u7814\u7a76\u4eba\u5458\u53ef\u4ee5\u7528\u4efb\u4f55\u5de5\u5177\u5305\u3001\u7a0b\u5e8f\u8bed\u8a00\u5efa\u7acb\u673a\u5668\u5b66\u4e60\u6a21\u578b\u3002 \u73b0\u9636\u6bb5\u8be5\u5de5\u5177\u652f\u6301\u6a21\u578b\u5305\u542b\u4ee5 Python \u4e3a\u57fa\u7840\u7684 TensorFlow\u3001Sklearn\uff0c\u8fd8\u6709 Spark\u3001H2O\u3001R \u7b49\u77e5\u540d\u6a21\u578b\u3002\u6b64\u5916\uff0cSeldon Core \u4e5f\u8ba9\u673a\u5668\u5b66\u4e60\u6a21\u578b\u53ef\u652f\u63f4 REST\u3001gRPC\uff0c\u8ba9\u4f7f\u7528\u8005\u53ef\u4ee5\u66f4\u7b80\u5355\u5730\u6574\u5408\u76f8\u5173\u4f01\u4e1a\u5e94\u7528\u3002 GitHub \u5730\u5740","title":"6. MXNET star 18.4k fork 6.5k"},{"location":"pages/nlp/nlpinfo/server-less-textsummary-keywords-extract/","text":"Serverless \u5b9e\u6218\uff1a\u5982\u4f55\u7ed3\u5408 NLP \u5b9e\u73b0\u6587\u672c\u6458\u8981\u548c\u5173\u952e\u8bcd\u63d0\u53d6? \u00b6 \u5bf9\u6587\u672c\u8fdb\u884c\u81ea\u52a8\u6458\u8981\u7684\u63d0\u53d6\u548c\u5173\u952e\u8bcd\u7684\u63d0\u53d6\uff0c\u5c5e\u4e8e\u81ea\u7136\u8bed\u8a00\u5904\u7406\u7684\u8303\u7574\u3002\u63d0\u53d6\u6458\u8981\u7684\u4e00\u4e2a\u597d\u5904\u662f\u53ef\u4ee5\u8ba9\u9605\u8bfb\u8005\u901a\u8fc7\u6700\u5c11\u7684\u4fe1\u606f\u5224\u65ad\u51fa\u8fd9\u4e2a\u6587\u7ae0\u5bf9\u81ea\u5df1\u662f\u5426\u6709\u610f\u4e49\u6216\u8005\u4ef7\u503c\uff0c\u662f\u5426\u9700\u8981\u8fdb\u884c\u66f4\u52a0\u8be6\u7ec6\u7684\u9605\u8bfb\uff1b\u800c\u63d0\u53d6\u5173\u952e\u8bcd\u7684\u597d\u5904\u662f\u53ef\u4ee5\u8ba9\u6587\u7ae0\u4e0e\u6587\u7ae0\u4e4b\u95f4\u4ea7\u751f\u5173\u8054\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u8ba9\u8bfb\u8005\u901a\u8fc7\u5173\u952e\u8bcd\u5feb\u901f\u5b9a\u4f4d\u5230\u548c\u8be5\u5173\u952e\u8bcd\u76f8\u5173\u7684\u6587\u7ae0\u5185\u5bb9\u3002 \u6587\u672c\u6458\u8981\u548c\u5173\u952e\u8bcd\u63d0\u53d6\u90fd\u53ef\u4ee5\u548c\u4f20\u7edf\u7684 CMS \u8fdb\u884c\u7ed3\u5408\uff0c\u901a\u8fc7\u5bf9\u6587\u7ae0 / \u65b0\u95fb\u7b49\u53d1\u5e03\u529f\u80fd\u8fdb\u884c\u6539\u9020\uff0c\u540c\u6b65\u63d0\u53d6\u5173\u952e\u8bcd\u548c\u6458\u8981\uff0c\u653e\u5230 HTML \u9875\u9762\u4e2d\u4f5c\u4e3a Description \u548c Keyworks\u3002\u8fd9\u6837\u505a\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u6709\u5229\u4e8e\u641c\u7d22\u5f15\u64ce\u6536\u5f55\uff0c\u5c5e\u4e8e SEO \u4f18\u5316\u7684\u8303\u7574\u3002 \u5173\u952e\u8bcd\u63d0\u53d6 \u00b6 \u5173\u952e\u8bcd\u63d0\u53d6\u7684\u65b9\u6cd5\u5f88\u591a\uff0c\u4f46\u662f\u6700\u5e38\u89c1\u7684\u5e94\u8be5\u5c31\u662f tf-idf \u4e86\u3002 \u901a\u8fc7 jieba \u5b9e\u73b0\u57fa\u4e8e tf-idf \u5173\u952e\u8bcd\u63d0\u53d6\u7684\u65b9\u6cd5\uff1a 1 jieba.analyse.extract_tags(text, topK=5, withWeight=False, allowPOS=('n', 'vn', 'v')) \u6587\u672c\u6458\u8981 \u00b6 \u6587\u672c\u6458\u8981\u7684\u65b9\u6cd5\u4e5f\u6709\u5f88\u591a\uff0c\u5982\u679c\u4ece\u5e7f\u4e49\u4e0a\u6765\u5212\u5206\uff0c\u5305\u62ec\u63d0\u53d6\u5f0f\u548c\u751f\u6210\u5f0f\u3002\u5176\u4e2d\u63d0\u53d6\u5f0f\u5c31\u662f\u5728\u6587\u7ae0\u4e2d\u901a\u8fc7 TextRank \u7b49\u7b97\u6cd5\uff0c\u627e\u51fa\u5173\u952e\u53e5\u7136\u540e\u8fdb\u884c\u62fc\u88c5\uff0c\u5f62\u6210\u6458\u8981\uff0c\u8fd9\u79cd\u65b9\u6cd5\u76f8\u5bf9\u6765\u8bf4\u6bd4\u8f83\u7b80\u5355\uff0c\u4f46\u662f\u5f88\u96be\u63d0\u53d6\u51fa\u771f\u5b9e\u7684\u8bed\u4e49\u7b49\uff1b\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u751f\u6210\u5f0f\uff0c\u901a\u8fc7\u6df1\u5ea6\u5b66\u4e60\u7b49\u65b9\u6cd5\uff0c\u5bf9\u6587\u672c\u8bed\u4e49\u8fdb\u884c\u63d0\u53d6\u518d\u751f\u6210\u6458\u8981\u3002 \u5982\u679c\u7b80\u5355\u7406\u89e3\uff0c\u63d0\u53d6\u5f0f\u65b9\u5f0f\u751f\u6210\u7684\u6458\u8981\uff0c\u6240\u6709\u53e5\u5b50\u6765\u81ea\u539f\u6587\uff0c\u800c\u751f\u6210\u5f0f\u65b9\u6cd5\u5219\u662f\u72ec\u7acb\u751f\u6210\u7684\u3002 \u4e3a\u4e86\u7b80\u5316\u96be\u5ea6\uff0c\u672c\u6587\u5c06\u91c7\u7528\u63d0\u53d6\u5f0f\u6765\u5b9e\u73b0\u6587\u672c\u6458\u8981\u529f\u80fd\uff0c\u901a\u8fc7 SnowNLP \u7b2c\u4e09\u65b9\u5e93\uff0c\u5b9e\u73b0\u57fa\u4e8e TextRank \u7684\u6587\u672c\u6458\u8981\u529f\u80fd\u3002\u6211\u4eec\u4ee5\u300a\u6d77\u5e95\u4e24\u4e07\u91cc\u300b\u90e8\u5206\u5185\u5bb9\u4f5c\u4e3a\u539f\u6587\uff0c\u8fdb\u884c\u6458\u8981\u751f\u6210\uff1a \u539f\u6587\uff1a \u8fd9\u4e9b\u4e8b\u4ef6\u53d1\u751f\u65f6\uff0c\u6211\u521a\u4ece\u7f8e\u56fd\u5185\u5e03\u62c9\u65af\u52a0\u5dde\u7684\u8d2b\u7620\u5730\u533a\u505a\u5b8c\u4e00\u9879\u79d1\u8003\u5de5\u4f5c\u56de\u6765\u3002\u6211\u5f53\u65f6\u662f\u5df4\u9ece\u81ea\u7136\u53f2\u535a\u7269\u9986\u7684\u5ba2\u5ea7\u6559\u6388\uff0c\u6cd5\u56fd\u653f\u5e9c\u6d3e\u6211\u53c2\u52a0\u8fd9\u6b21\u8003\u5bdf\u6d3b\u52a8\u3002\u6211\u5728\u5185\u5e03\u62c9\u65af\u52a0\u5dde\u5ea6\u8fc7\u4e86\u534a\u5e74\u65f6\u95f4\uff0c\u6536\u96c6\u4e86\u8bb8\u591a\u73cd\u8d35\u8d44\u6599\uff0c\u6ee1\u8f7d\u800c\u5f52\uff0c3 \u6708\u5e95\u62b5\u8fbe\u7ebd\u7ea6\u3002\u6211\u51b3\u5b9a 5 \u6708\u521d\u52a8\u8eab\u56de\u6cd5\u56fd\u3002\u4e8e\u662f\uff0c\u6211\u5c31\u6293\u7d27\u8fd9\u6bb5\u5019\u8239\u9017\u7559\u65f6\u95f4\uff0c\u628a\u6536\u96c6\u5230\u7684\u77ff\u7269\u548c\u52a8\u690d\u7269\u6807\u672c\u8fdb\u884c\u5206\u7c7b\u6574\u7406\uff0c\u53ef\u5c31\u5728\u8fd9\u65f6\uff0c\u65af\u79d1\u820d\u53f7\u51fa\u4e8b\u4e86\u3002 \u6211\u5bf9\u5f53\u65f6\u7684\u8857\u8c08\u5df7\u8bae\u81ea\u7136\u4e86\u5982\u6307\u638c\uff0c\u518d\u8bf4\u4e86\uff0c\u6211\u600e\u80fd\u542c\u800c\u4e0d\u95fb\u3001\u65e0\u52a8\u4e8e\u8877\u5462\uff1f\u6211\u628a\u7f8e\u56fd\u548c\u6b27\u6d32\u7684\u5404\u79cd\u62a5\u520a\u8bfb\u4e86\u53c8\u8bfb\uff0c\u4f46\u672a\u80fd\u6df1\u5165\u4e86\u89e3\u771f\u76f8\u3002\u795e\u79d8\u83ab\u6d4b\uff0c\u767e\u601d\u4e0d\u5f97\u5176\u89e3\u3002\u6211\u5de6\u601d\u53f3\u60f3\uff0c\u6447\u6446\u4e8e\u4e24\u4e2a\u6781\u7aef\u4e4b\u95f4\uff0c\u59cb\u7ec8\u5f62\u4e0d\u6210\u4e00\u79cd\u89c1\u89e3\u3002\u5176\u4e2d\u80af\u5b9a\u6709\u540d\u5802\uff0c\u8fd9\u662f\u4e0d\u5bb9\u7f6e\u7591\u7684\uff0c\u5982\u679c\u6709\u4eba\u8868\u793a\u6000\u7591\uff0c\u5c31\u8bf7\u4ed6\u4eec\u53bb\u6478\u4e00\u6478\u65af\u79d1\u820d\u53f7\u7684\u4f24\u53e3\u597d\u4e86\u3002 \u6211\u5230\u7ebd\u7ea6\u65f6\uff0c\u8fd9\u4e2a\u95ee\u9898\u6b63\u7092\u5f97\u6cb8\u53cd\u76c8\u5929\u3002\u67d0\u4e9b\u4e0d\u5b66\u65e0\u672f\u4e4b\u5f92\u63d0\u51fa\u8bbe\u60f3\uff0c\u6709\u8bf4\u662f\u6d6e\u52a8\u7684\u5c0f\u5c9b\uff0c\u4e5f\u6709\u8bf4\u662f\u4e0d\u53ef\u6349\u6478\u7684\u6697\u7901\uff0c\u4e0d\u8fc7\uff0c\u8fd9\u4e9b\u4e2a\u5047\u8bbe\u901a\u901a\u90fd\u88ab\u63a8\u7ffb\u4e86\u3002\u5f88\u663e\u7136\uff0c\u9664\u975e\u8fd9\u6697\u7901\u8179\u90e8\u88c5\u6709\u673a\u5668\uff0c\u4e0d\u7136\u7684\u8bdd\uff0c\u5b83\u600e\u80fd\u5982\u6b64\u5feb\u901f\u5730\u8f6c\u79fb\u5462\uff1f \u540c\u6837\u7684\u9053\u7406\uff0c\u8bf4\u5b83\u662f\u4e00\u5757\u6d6e\u52a8\u7684\u8239\u4f53\u6216\u662f\u4e00\u5806\u5927\u8239\u6b8b\u7247\uff0c\u8fd9\u79cd\u5047\u8bbe\u4e5f\u4e0d\u80fd\u6210\u7acb\uff0c\u7406\u7531\u4ecd\u7136\u662f\u79fb\u52a8\u901f\u5ea6\u592a\u5feb\u3002 \u90a3\u4e48\uff0c\u95ee\u9898\u53ea\u80fd\u6709\u4e24\u79cd\u89e3\u91ca\uff0c\u4eba\u4eec\u5404\u6301\u5df1\u89c1\uff0c\u81ea\u7136\u5c31\u5206\u6210\u89c2\u70b9\u622a\u7136\u4e0d\u540c\u7684\u4e24\u6d3e\uff1a\u4e00\u6d3e\u8bf4\u8fd9\u662f\u4e00\u4e2a\u529b\u5927\u65e0\u6bd4\u7684\u602a\u7269\uff0c\u53e6\u4e00\u6d3e\u8bf4\u8fd9\u662f\u4e00\u8258\u52a8\u529b\u6781\u5f3a\u7684\u201c\u6f5c\u6c34\u8239\u201d\u3002 \u54e6\uff0c\u6700\u540e\u90a3\u79cd\u5047\u8bbe\u56fa\u7136\u53ef\u4ee5\u63a5\u53d7\uff0c\u4f46\u5230\u6b27\u7f8e\u5404\u56fd\u8c03\u67e5\u4e4b\u540e\uff0c\u4e5f\u5c31\u96be\u4ee5\u81ea\u5706\u5176\u8bf4\u4e86\u3002\u6709\u54ea\u4e2a\u666e\u901a\u4eba\u4f1a\u62e5\u6709\u5982\u6b64\u5f3a\u5927\u52a8\u529b\u7684\u673a\u68b0\uff1f\u8fd9\u662f\u4e0d\u53ef\u80fd\u7684\u3002\u4ed6\u5728\u4f55\u5730\u4f55\u65f6\u53eb\u4f55\u4eba\u5236\u9020\u4e86\u8fd9\u4e48\u4e2a\u5e9e\u7136\u5927\u7269\uff0c\u800c\u4e14\u5982\u4f55\u80fd\u5728\u5efa\u9020\u4e2d\u505a\u5230\u98ce\u58f0\u4e0d\u8d70\u6f0f\u5462\uff1f \u770b\u6765\uff0c\u53ea\u6709\u653f\u5e9c\u624d\u6709\u53ef\u80fd\u62e5\u6709\u8fd9\u79cd\u7834\u574f\u6027\u7684\u673a\u5668\uff0c\u5728\u8fd9\u4e2a\u707e\u96be\u6df1\u91cd\u7684\u65f6\u4ee3\uff0c\u4eba\u4eec\u5343\u65b9\u767e\u8ba1\u8981\u589e\u5f3a\u6218\u4e89\u6b66\u5668\u5a01\u529b\uff0c\u90a3\u5c31\u6709\u8fd9\u79cd\u53ef\u80fd\uff0c\u4e00\u4e2a\u56fd\u5bb6\u7792\u7740\u5176\u4ed6\u56fd\u5bb6\u5728\u8bd5\u5236\u8fd9\u7c7b\u9a87\u4eba\u542c\u95fb\u7684\u6b66\u5668\u3002\u7ee7\u590f\u65af\u52c3\u6b65\u67aa\u4e4b\u540e\u6709\u6c34\u96f7\uff0c\u6c34\u96f7\u4e4b\u540e\u6709\u6c34\u4e0b\u649e\u9524\uff0c\u7136\u540e\u9b54\u9053\u6500\u5347\u53cd\u5e94\uff0c\u4e8b\u6001\u6108\u6f14\u6108\u70c8\u3002\u81f3\u5c11\uff0c\u6211\u662f\u8fd9\u6837\u60f3\u7684\u3002 \u901a\u8fc7 SnowNLP \u63d0\u4f9b\u7684\u7b97\u6cd5\uff1a 1 2 3 4 5 from snownlp import SnowNLP text = \" \u4e0a\u9762\u7684\u539f\u6587\u5185\u5bb9\uff0c\u6b64\u5904\u7701\u7565 \" s = SnowNLP(text) print(\"\u3002\".join(s.summary(5))) \u8f93\u51fa\u7ed3\u679c\uff1a 1 \u81ea\u7136\u5c31\u5206\u6210\u89c2\u70b9\u622a\u7136\u4e0d\u540c\u7684\u4e24\u6d3e\uff1a\u4e00\u6d3e\u8bf4\u8fd9\u662f\u4e00\u4e2a\u529b\u5927\u65e0\u6bd4\u7684\u602a\u7269\u3002\u8fd9\u79cd\u5047\u8bbe\u4e5f\u4e0d\u80fd\u6210\u7acb\u3002\u6211\u5230\u7ebd\u7ea6\u65f6\u3002\u8bf4\u5b83\u662f\u4e00\u5757\u6d6e\u52a8\u7684\u8239\u4f53\u6216\u662f\u4e00\u5806\u5927\u8239\u6b8b\u7247\u3002\u53e6\u4e00\u6d3e\u8bf4\u8fd9\u662f\u4e00\u8258\u52a8\u529b\u6781\u5f3a\u7684\u201c\u6f5c\u6c34\u8239\u201d \u521d\u6b65\u6765\u770b\uff0c\u6548\u679c\u5e76\u4e0d\u662f\u5f88\u597d\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u81ea\u5df1\u8ba1\u7b97\u53e5\u5b50\u6743\u91cd\uff0c\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684\u6458\u8981\u529f\u80fd\uff0c\u8fd9\u4e2a\u5c31\u9700\u8981 jieba \uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 import re import jieba.analyse import jieba.posseg class TextSummary: def __init__(self, text): self.text = text def splitSentence(self): sectionNum = 0 self.sentences = [] for eveSection in self.text.split(\"\\n\"): if eveSection: sentenceNum = 0 for eveSentence in re.split(\"!|\u3002|\uff1f\", eveSection): if eveSentence: mark = [] if sectionNum == 0: mark.append(\"FIRSTSECTION\") if sentenceNum == 0: mark.append(\"FIRSTSENTENCE\") self.sentences.append({ \"text\": eveSentence, \"pos\": { \"x\": sectionNum, \"y\": sentenceNum, \"mark\": mark } }) sentenceNum = sentenceNum + 1 sectionNum = sectionNum + 1 self.sentences[-1][\"pos\"][\"mark\"].append(\"LASTSENTENCE\") for i in range(0, len(self.sentences)): if self.sentences[i][\"pos\"][\"x\"] == self.sentences[-1][\"pos\"][\"x\"]: self.sentences[i][\"pos\"][\"mark\"].append(\"LASTSECTION\") def getKeywords(self): self.keywords = jieba.analyse.extract_tags(self.text, topK=20, withWeight=False, allowPOS=('n', 'vn', 'v')) def sentenceWeight(self): # \u8ba1\u7b97\u53e5\u5b50\u7684\u4f4d\u7f6e\u6743\u91cd for sentence in self.sentences: mark = sentence[\"pos\"][\"mark\"] weightPos = 0 if \"FIRSTSECTION\" in mark: weightPos = weightPos + 2 if \"FIRSTSENTENCE\" in mark: weightPos = weightPos + 2 if \"LASTSENTENCE\" in mark: weightPos = weightPos + 1 if \"LASTSECTION\" in mark: weightPos = weightPos + 1 sentence[\"weightPos\"] = weightPos # \u8ba1\u7b97\u53e5\u5b50\u7684\u7ebf\u7d22\u8bcd\u6743\u91cd index = [\" \u603b\u4e4b \", \" \u603b\u800c\u8a00\u4e4b \"] for sentence in self.sentences: sentence[\"weightCueWords\"] = 0 sentence[\"weightKeywords\"] = 0 for i in index: for sentence in self.sentences: if sentence[\"text\"].find(i) >= 0: sentence[\"weightCueWords\"] = 1 for keyword in self.keywords: for sentence in self.sentences: if sentence[\"text\"].find(keyword) >= 0: sentence[\"weightKeywords\"] = sentence[\"weightKeywords\"] + 1 for sentence in self.sentences: sentence[\"weight\"] = sentence[\"weightPos\"] + 2 * sentence[\"weightCueWords\"] + sentence[\"weightKeywords\"] def getSummary(self, ratio=0.1): self.keywords = list() self.sentences = list() self.summary = list() # \u8c03\u7528\u65b9\u6cd5\uff0c\u5206\u522b\u8ba1\u7b97\u5173\u952e\u8bcd\u3001\u5206\u53e5\uff0c\u8ba1\u7b97\u6743\u91cd self.getKeywords() self.splitSentence() self.sentenceWeight() # \u5bf9\u53e5\u5b50\u7684\u6743\u91cd\u503c\u8fdb\u884c\u6392\u5e8f self.sentences = sorted(self.sentences, key=lambda k: k['weight'], reverse=True) # \u6839\u636e\u6392\u5e8f\u7ed3\u679c\uff0c\u53d6\u6392\u540d\u5360\u524d ratio% \u7684\u53e5\u5b50\u4f5c\u4e3a\u6458\u8981 for i in range(len(self.sentences)): if i < ratio * len(self.sentences): sentence = self.sentences[i] self.summary.append(sentence[\"text\"]) return self.summary \u8fd9\u6bb5\u4ee3\u7801\u4e3b\u8981\u662f\u901a\u8fc7 tf-idf \u5b9e\u73b0\u5173\u952e\u8bcd\u63d0\u53d6\uff0c\u7136\u540e\u901a\u8fc7\u5173\u952e\u8bcd\u63d0\u53d6\u5bf9\u53e5\u5b50\u5c3d\u5fc3\u6743\u91cd\u8d4b\u4e88\uff0c\u6700\u540e\u83b7\u5f97\u5230\u6574\u4f53\u7684\u7ed3\u679c\uff0c\u8fd0\u884c\uff1a 1 2 testSummary = TextSummary(text) print(\"\u3002\".join(testSummary.getSummary())) \u53ef\u4ee5\u5f97\u5230\u7ed3\u679c\uff1a 1 2 3 4 5 Building prefix dict from the default dictionary ... Loading model from cache /var/folders/yb/wvy_7wm91mzd7cjg4444gvdjsglgs8/T/jieba.cache Loading model cost 0.721 seconds. Prefix dict has been built successfully. \u770b\u6765\uff0c\u53ea\u6709\u653f\u5e9c\u624d\u6709\u53ef\u80fd\u62e5\u6709\u8fd9\u79cd\u7834\u574f\u6027\u7684\u673a\u5668\uff0c\u5728\u8fd9\u4e2a\u707e\u96be\u6df1\u91cd\u7684\u65f6\u4ee3\uff0c\u4eba\u4eec\u5343\u65b9\u767e\u8ba1\u8981\u589e\u5f3a\u6218\u4e89\u6b66\u5668\u5a01\u529b\uff0c\u90a3\u5c31\u6709\u8fd9\u79cd\u53ef\u80fd\uff0c\u4e00\u4e2a\u56fd\u5bb6\u7792\u7740\u5176\u4ed6\u56fd\u5bb6\u5728\u8bd5\u5236\u8fd9\u7c7b\u9a87\u4eba\u542c\u95fb\u7684\u6b66\u5668\u3002\u4e8e\u662f\uff0c\u6211\u5c31\u6293\u7d27\u8fd9\u6bb5\u5019\u8239\u9017\u7559\u65f6\u95f4\uff0c\u628a\u6536\u96c6\u5230\u7684\u77ff\u7269\u548c\u52a8\u690d\u7269\u6807\u672c\u8fdb\u884c\u5206\u7c7b\u6574\u7406\uff0c\u53ef\u5c31\u5728\u8fd9\u65f6\uff0c\u65af\u79d1\u820d\u53f7\u51fa\u4e8b\u4e86\u3002\u540c\u6837\u7684\u9053\u7406\uff0c\u8bf4\u5b83\u662f\u4e00\u5757\u6d6e\u52a8\u7684\u8239\u4f53\u6216\u662f\u4e00\u5806\u5927\u8239\u6b8b\u7247\uff0c\u8fd9\u79cd\u5047\u8bbe\u4e5f\u4e0d\u80fd\u6210\u7acb\uff0c\u7406\u7531\u4ecd\u7136\u662f\u79fb\u52a8\u901f\u5ea6\u592a\u5feb \u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u6574\u4f53\u6548\u679c\u8981\u6bd4\u521a\u624d\u7684\u597d\u4e00\u4e9b\u3002 \u53d1\u5e03 API \u00b6 \u901a\u8fc7 Serverless \u67b6\u6784\uff0c\u5c06\u4e0a\u9762\u4ee3\u7801\u8fdb\u884c\u6574\u7406\uff0c\u5e76\u53d1\u5e03\u3002 \u4ee3\u7801\u6574\u7406\u7ed3\u679c\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 import re, json import jieba.analyse import jieba.posseg class NLPAttr: def __init__(self, text): self.text = text def splitSentence(self): sectionNum = 0 self.sentences = [] for eveSection in self.text.split(\"\\n\"): if eveSection: sentenceNum = 0 for eveSentence in re.split(\"!|\u3002|\uff1f\", eveSection): if eveSentence: mark = [] if sectionNum == 0: mark.append(\"FIRSTSECTION\") if sentenceNum == 0: mark.append(\"FIRSTSENTENCE\") self.sentences.append({ \"text\": eveSentence, \"pos\": { \"x\": sectionNum, \"y\": sentenceNum, \"mark\": mark } }) sentenceNum = sentenceNum + 1 sectionNum = sectionNum + 1 self.sentences[-1][\"pos\"][\"mark\"].append(\"LASTSENTENCE\") for i in range(0, len(self.sentences)): if self.sentences[i][\"pos\"][\"x\"] == self.sentences[-1][\"pos\"][\"x\"]: self.sentences[i][\"pos\"][\"mark\"].append(\"LASTSECTION\") def getKeywords(self): self.keywords = jieba.analyse.extract_tags(self.text, topK=20, withWeight=False, allowPOS=('n', 'vn', 'v')) return self.keywords def sentenceWeight(self): # \u8ba1\u7b97\u53e5\u5b50\u7684\u4f4d\u7f6e\u6743\u91cd for sentence in self.sentences: mark = sentence[\"pos\"][\"mark\"] weightPos = 0 if \"FIRSTSECTION\" in mark: weightPos = weightPos + 2 if \"FIRSTSENTENCE\" in mark: weightPos = weightPos + 2 if \"LASTSENTENCE\" in mark: weightPos = weightPos + 1 if \"LASTSECTION\" in mark: weightPos = weightPos + 1 sentence[\"weightPos\"] = weightPos # \u8ba1\u7b97\u53e5\u5b50\u7684\u7ebf\u7d22\u8bcd\u6743\u91cd index = [\" \u603b\u4e4b \", \" \u603b\u800c\u8a00\u4e4b \"] for sentence in self.sentences: sentence[\"weightCueWords\"] = 0 sentence[\"weightKeywords\"] = 0 for i in index: for sentence in self.sentences: if sentence[\"text\"].find(i) >= 0: sentence[\"weightCueWords\"] = 1 for keyword in self.keywords: for sentence in self.sentences: if sentence[\"text\"].find(keyword) >= 0: sentence[\"weightKeywords\"] = sentence[\"weightKeywords\"] + 1 for sentence in self.sentences: sentence[\"weight\"] = sentence[\"weightPos\"] + 2 * sentence[\"weightCueWords\"] + sentence[\"weightKeywords\"] def getSummary(self, ratio=0.1): self.keywords = list() self.sentences = list() self.summary = list() # \u8c03\u7528\u65b9\u6cd5\uff0c\u5206\u522b\u8ba1\u7b97\u5173\u952e\u8bcd\u3001\u5206\u53e5\uff0c\u8ba1\u7b97\u6743\u91cd self.getKeywords() self.splitSentence() self.sentenceWeight() # \u5bf9\u53e5\u5b50\u7684\u6743\u91cd\u503c\u8fdb\u884c\u6392\u5e8f self.sentences = sorted(self.sentences, key=lambda k: k['weight'], reverse=True) # \u6839\u636e\u6392\u5e8f\u7ed3\u679c\uff0c\u53d6\u6392\u540d\u5360\u524d ratio% \u7684\u53e5\u5b50\u4f5c\u4e3a\u6458\u8981 for i in range(len(self.sentences)): if i < ratio * len(self.sentences): sentence = self.sentences[i] self.summary.append(sentence[\"text\"]) return self.summary def main_handler(event, context): nlp = NLPAttr(json.loads(event['body'])['text']) return { \"keywords\": nlp.getKeywords(), \"summary\": \"\u3002\".join(nlp.getSummary()) } \u7f16\u5199\u9879\u76ee serverless.yaml \u6587\u4ef6\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 nlpDemo: component: \"@serverless/tencent-scf\" inputs: name: nlpDemo codeUri: ./ handler: index.main_handler runtime: Python3.6 region: ap-guangzhou description: \u6587\u672c\u6458\u8981 / \u5173\u952e\u8bcd\u529f\u80fd memorySize: 256 timeout: 10 events: - apigw: name: nlpDemo_apigw_service parameters: protocols: - http serviceName: serverless description: \u6587\u672c\u6458\u8981 / \u5173\u952e\u8bcd\u529f\u80fd environment: release endpoints: - path: /nlp method: ANY \u7531\u4e8e\u9879\u76ee\u4e2d\u4f7f\u7528\u4e86 jieba \uff0c\u6240\u4ee5\u5728\u5b89\u88c5\u7684\u65f6\u5019\u63a8\u8350\u5728 CentOS \u7cfb\u7edf\u4e0b\u4e0e\u5bf9\u5e94\u7684 Python \u7248\u672c\u4e0b\u5b89\u88c5\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6211\u4e4b\u524d\u4e3a\u4e86\u65b9\u4fbf\u505a\u7684\u4e00\u4e2a\u4f9d\u8d56\u5de5\u5177\uff1a \u901a\u8fc7 sls --debug \u8fdb\u884c\u90e8\u7f72\uff1a \u90e8\u7f72\u5b8c\u6210\uff0c\u53ef\u4ee5\u901a\u8fc7 PostMan \u8fdb\u884c\u7b80\u5355\u7684\u6d4b\u8bd5\uff1a \u4ece\u4e0a\u56fe\u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u5df2\u7ecf\u6309\u7167\u9884\u671f\u8f93\u51fa\u4e86\u76ee\u6807\u7ed3\u679c\u3002\u81f3\u6b64\uff0c\u6587\u672c\u6458\u8981 / \u5173\u952e\u8bcd\u63d0\u53d6\u7684 API \u5df2\u7ecf\u90e8\u7f72\u5b8c\u6210\u3002 \u603b\u7ed3 \u00b6 \u76f8\u5bf9\u6765\u8bf4\uff0c\u901a\u8fc7 Serveless \u67b6\u6784\u505a API \u662f\u975e\u5e38\u5bb9\u6613\u548c\u65b9\u4fbf\u7684\uff0c\u53ef\u5b9e\u73b0 API \u7684\u63d2\u62d4\u884c\uff0c\u7ec4\u4ef6\u5316\uff0c\u5e0c\u671b\u672c\u6587\u80fd\u591f\u7ed9\u8bfb\u8005\u66f4\u591a\u7684\u601d\u8def\u548c\u542f\u53d1\u3002","title":"Serverless \u5b9e\u6218\uff1a\u5982\u4f55\u7ed3\u5408 NLP \u5b9e\u73b0\u6587\u672c\u6458\u8981\u548c\u5173\u952e\u8bcd\u63d0\u53d6?"},{"location":"pages/nlp/nlpinfo/server-less-textsummary-keywords-extract/#Serverless-\u5b9e\u6218\u5982\u4f55\u7ed3\u5408-NLP-\u5b9e\u73b0\u6587\u672c\u6458\u8981\u548c\u5173\u952e\u8bcd\u63d0\u53d6","text":"\u5bf9\u6587\u672c\u8fdb\u884c\u81ea\u52a8\u6458\u8981\u7684\u63d0\u53d6\u548c\u5173\u952e\u8bcd\u7684\u63d0\u53d6\uff0c\u5c5e\u4e8e\u81ea\u7136\u8bed\u8a00\u5904\u7406\u7684\u8303\u7574\u3002\u63d0\u53d6\u6458\u8981\u7684\u4e00\u4e2a\u597d\u5904\u662f\u53ef\u4ee5\u8ba9\u9605\u8bfb\u8005\u901a\u8fc7\u6700\u5c11\u7684\u4fe1\u606f\u5224\u65ad\u51fa\u8fd9\u4e2a\u6587\u7ae0\u5bf9\u81ea\u5df1\u662f\u5426\u6709\u610f\u4e49\u6216\u8005\u4ef7\u503c\uff0c\u662f\u5426\u9700\u8981\u8fdb\u884c\u66f4\u52a0\u8be6\u7ec6\u7684\u9605\u8bfb\uff1b\u800c\u63d0\u53d6\u5173\u952e\u8bcd\u7684\u597d\u5904\u662f\u53ef\u4ee5\u8ba9\u6587\u7ae0\u4e0e\u6587\u7ae0\u4e4b\u95f4\u4ea7\u751f\u5173\u8054\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u8ba9\u8bfb\u8005\u901a\u8fc7\u5173\u952e\u8bcd\u5feb\u901f\u5b9a\u4f4d\u5230\u548c\u8be5\u5173\u952e\u8bcd\u76f8\u5173\u7684\u6587\u7ae0\u5185\u5bb9\u3002 \u6587\u672c\u6458\u8981\u548c\u5173\u952e\u8bcd\u63d0\u53d6\u90fd\u53ef\u4ee5\u548c\u4f20\u7edf\u7684 CMS \u8fdb\u884c\u7ed3\u5408\uff0c\u901a\u8fc7\u5bf9\u6587\u7ae0 / \u65b0\u95fb\u7b49\u53d1\u5e03\u529f\u80fd\u8fdb\u884c\u6539\u9020\uff0c\u540c\u6b65\u63d0\u53d6\u5173\u952e\u8bcd\u548c\u6458\u8981\uff0c\u653e\u5230 HTML \u9875\u9762\u4e2d\u4f5c\u4e3a Description \u548c Keyworks\u3002\u8fd9\u6837\u505a\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u6709\u5229\u4e8e\u641c\u7d22\u5f15\u64ce\u6536\u5f55\uff0c\u5c5e\u4e8e SEO \u4f18\u5316\u7684\u8303\u7574\u3002","title":"Serverless \u5b9e\u6218\uff1a\u5982\u4f55\u7ed3\u5408 NLP \u5b9e\u73b0\u6587\u672c\u6458\u8981\u548c\u5173\u952e\u8bcd\u63d0\u53d6?"},{"location":"pages/nlp/nlpinfo/server-less-textsummary-keywords-extract/#\u5173\u952e\u8bcd\u63d0\u53d6","text":"\u5173\u952e\u8bcd\u63d0\u53d6\u7684\u65b9\u6cd5\u5f88\u591a\uff0c\u4f46\u662f\u6700\u5e38\u89c1\u7684\u5e94\u8be5\u5c31\u662f tf-idf \u4e86\u3002 \u901a\u8fc7 jieba \u5b9e\u73b0\u57fa\u4e8e tf-idf \u5173\u952e\u8bcd\u63d0\u53d6\u7684\u65b9\u6cd5\uff1a 1 jieba.analyse.extract_tags(text, topK=5, withWeight=False, allowPOS=('n', 'vn', 'v'))","title":"\u5173\u952e\u8bcd\u63d0\u53d6"},{"location":"pages/nlp/nlpinfo/server-less-textsummary-keywords-extract/#\u6587\u672c\u6458\u8981","text":"\u6587\u672c\u6458\u8981\u7684\u65b9\u6cd5\u4e5f\u6709\u5f88\u591a\uff0c\u5982\u679c\u4ece\u5e7f\u4e49\u4e0a\u6765\u5212\u5206\uff0c\u5305\u62ec\u63d0\u53d6\u5f0f\u548c\u751f\u6210\u5f0f\u3002\u5176\u4e2d\u63d0\u53d6\u5f0f\u5c31\u662f\u5728\u6587\u7ae0\u4e2d\u901a\u8fc7 TextRank \u7b49\u7b97\u6cd5\uff0c\u627e\u51fa\u5173\u952e\u53e5\u7136\u540e\u8fdb\u884c\u62fc\u88c5\uff0c\u5f62\u6210\u6458\u8981\uff0c\u8fd9\u79cd\u65b9\u6cd5\u76f8\u5bf9\u6765\u8bf4\u6bd4\u8f83\u7b80\u5355\uff0c\u4f46\u662f\u5f88\u96be\u63d0\u53d6\u51fa\u771f\u5b9e\u7684\u8bed\u4e49\u7b49\uff1b\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u751f\u6210\u5f0f\uff0c\u901a\u8fc7\u6df1\u5ea6\u5b66\u4e60\u7b49\u65b9\u6cd5\uff0c\u5bf9\u6587\u672c\u8bed\u4e49\u8fdb\u884c\u63d0\u53d6\u518d\u751f\u6210\u6458\u8981\u3002 \u5982\u679c\u7b80\u5355\u7406\u89e3\uff0c\u63d0\u53d6\u5f0f\u65b9\u5f0f\u751f\u6210\u7684\u6458\u8981\uff0c\u6240\u6709\u53e5\u5b50\u6765\u81ea\u539f\u6587\uff0c\u800c\u751f\u6210\u5f0f\u65b9\u6cd5\u5219\u662f\u72ec\u7acb\u751f\u6210\u7684\u3002 \u4e3a\u4e86\u7b80\u5316\u96be\u5ea6\uff0c\u672c\u6587\u5c06\u91c7\u7528\u63d0\u53d6\u5f0f\u6765\u5b9e\u73b0\u6587\u672c\u6458\u8981\u529f\u80fd\uff0c\u901a\u8fc7 SnowNLP \u7b2c\u4e09\u65b9\u5e93\uff0c\u5b9e\u73b0\u57fa\u4e8e TextRank \u7684\u6587\u672c\u6458\u8981\u529f\u80fd\u3002\u6211\u4eec\u4ee5\u300a\u6d77\u5e95\u4e24\u4e07\u91cc\u300b\u90e8\u5206\u5185\u5bb9\u4f5c\u4e3a\u539f\u6587\uff0c\u8fdb\u884c\u6458\u8981\u751f\u6210\uff1a \u539f\u6587\uff1a \u8fd9\u4e9b\u4e8b\u4ef6\u53d1\u751f\u65f6\uff0c\u6211\u521a\u4ece\u7f8e\u56fd\u5185\u5e03\u62c9\u65af\u52a0\u5dde\u7684\u8d2b\u7620\u5730\u533a\u505a\u5b8c\u4e00\u9879\u79d1\u8003\u5de5\u4f5c\u56de\u6765\u3002\u6211\u5f53\u65f6\u662f\u5df4\u9ece\u81ea\u7136\u53f2\u535a\u7269\u9986\u7684\u5ba2\u5ea7\u6559\u6388\uff0c\u6cd5\u56fd\u653f\u5e9c\u6d3e\u6211\u53c2\u52a0\u8fd9\u6b21\u8003\u5bdf\u6d3b\u52a8\u3002\u6211\u5728\u5185\u5e03\u62c9\u65af\u52a0\u5dde\u5ea6\u8fc7\u4e86\u534a\u5e74\u65f6\u95f4\uff0c\u6536\u96c6\u4e86\u8bb8\u591a\u73cd\u8d35\u8d44\u6599\uff0c\u6ee1\u8f7d\u800c\u5f52\uff0c3 \u6708\u5e95\u62b5\u8fbe\u7ebd\u7ea6\u3002\u6211\u51b3\u5b9a 5 \u6708\u521d\u52a8\u8eab\u56de\u6cd5\u56fd\u3002\u4e8e\u662f\uff0c\u6211\u5c31\u6293\u7d27\u8fd9\u6bb5\u5019\u8239\u9017\u7559\u65f6\u95f4\uff0c\u628a\u6536\u96c6\u5230\u7684\u77ff\u7269\u548c\u52a8\u690d\u7269\u6807\u672c\u8fdb\u884c\u5206\u7c7b\u6574\u7406\uff0c\u53ef\u5c31\u5728\u8fd9\u65f6\uff0c\u65af\u79d1\u820d\u53f7\u51fa\u4e8b\u4e86\u3002 \u6211\u5bf9\u5f53\u65f6\u7684\u8857\u8c08\u5df7\u8bae\u81ea\u7136\u4e86\u5982\u6307\u638c\uff0c\u518d\u8bf4\u4e86\uff0c\u6211\u600e\u80fd\u542c\u800c\u4e0d\u95fb\u3001\u65e0\u52a8\u4e8e\u8877\u5462\uff1f\u6211\u628a\u7f8e\u56fd\u548c\u6b27\u6d32\u7684\u5404\u79cd\u62a5\u520a\u8bfb\u4e86\u53c8\u8bfb\uff0c\u4f46\u672a\u80fd\u6df1\u5165\u4e86\u89e3\u771f\u76f8\u3002\u795e\u79d8\u83ab\u6d4b\uff0c\u767e\u601d\u4e0d\u5f97\u5176\u89e3\u3002\u6211\u5de6\u601d\u53f3\u60f3\uff0c\u6447\u6446\u4e8e\u4e24\u4e2a\u6781\u7aef\u4e4b\u95f4\uff0c\u59cb\u7ec8\u5f62\u4e0d\u6210\u4e00\u79cd\u89c1\u89e3\u3002\u5176\u4e2d\u80af\u5b9a\u6709\u540d\u5802\uff0c\u8fd9\u662f\u4e0d\u5bb9\u7f6e\u7591\u7684\uff0c\u5982\u679c\u6709\u4eba\u8868\u793a\u6000\u7591\uff0c\u5c31\u8bf7\u4ed6\u4eec\u53bb\u6478\u4e00\u6478\u65af\u79d1\u820d\u53f7\u7684\u4f24\u53e3\u597d\u4e86\u3002 \u6211\u5230\u7ebd\u7ea6\u65f6\uff0c\u8fd9\u4e2a\u95ee\u9898\u6b63\u7092\u5f97\u6cb8\u53cd\u76c8\u5929\u3002\u67d0\u4e9b\u4e0d\u5b66\u65e0\u672f\u4e4b\u5f92\u63d0\u51fa\u8bbe\u60f3\uff0c\u6709\u8bf4\u662f\u6d6e\u52a8\u7684\u5c0f\u5c9b\uff0c\u4e5f\u6709\u8bf4\u662f\u4e0d\u53ef\u6349\u6478\u7684\u6697\u7901\uff0c\u4e0d\u8fc7\uff0c\u8fd9\u4e9b\u4e2a\u5047\u8bbe\u901a\u901a\u90fd\u88ab\u63a8\u7ffb\u4e86\u3002\u5f88\u663e\u7136\uff0c\u9664\u975e\u8fd9\u6697\u7901\u8179\u90e8\u88c5\u6709\u673a\u5668\uff0c\u4e0d\u7136\u7684\u8bdd\uff0c\u5b83\u600e\u80fd\u5982\u6b64\u5feb\u901f\u5730\u8f6c\u79fb\u5462\uff1f \u540c\u6837\u7684\u9053\u7406\uff0c\u8bf4\u5b83\u662f\u4e00\u5757\u6d6e\u52a8\u7684\u8239\u4f53\u6216\u662f\u4e00\u5806\u5927\u8239\u6b8b\u7247\uff0c\u8fd9\u79cd\u5047\u8bbe\u4e5f\u4e0d\u80fd\u6210\u7acb\uff0c\u7406\u7531\u4ecd\u7136\u662f\u79fb\u52a8\u901f\u5ea6\u592a\u5feb\u3002 \u90a3\u4e48\uff0c\u95ee\u9898\u53ea\u80fd\u6709\u4e24\u79cd\u89e3\u91ca\uff0c\u4eba\u4eec\u5404\u6301\u5df1\u89c1\uff0c\u81ea\u7136\u5c31\u5206\u6210\u89c2\u70b9\u622a\u7136\u4e0d\u540c\u7684\u4e24\u6d3e\uff1a\u4e00\u6d3e\u8bf4\u8fd9\u662f\u4e00\u4e2a\u529b\u5927\u65e0\u6bd4\u7684\u602a\u7269\uff0c\u53e6\u4e00\u6d3e\u8bf4\u8fd9\u662f\u4e00\u8258\u52a8\u529b\u6781\u5f3a\u7684\u201c\u6f5c\u6c34\u8239\u201d\u3002 \u54e6\uff0c\u6700\u540e\u90a3\u79cd\u5047\u8bbe\u56fa\u7136\u53ef\u4ee5\u63a5\u53d7\uff0c\u4f46\u5230\u6b27\u7f8e\u5404\u56fd\u8c03\u67e5\u4e4b\u540e\uff0c\u4e5f\u5c31\u96be\u4ee5\u81ea\u5706\u5176\u8bf4\u4e86\u3002\u6709\u54ea\u4e2a\u666e\u901a\u4eba\u4f1a\u62e5\u6709\u5982\u6b64\u5f3a\u5927\u52a8\u529b\u7684\u673a\u68b0\uff1f\u8fd9\u662f\u4e0d\u53ef\u80fd\u7684\u3002\u4ed6\u5728\u4f55\u5730\u4f55\u65f6\u53eb\u4f55\u4eba\u5236\u9020\u4e86\u8fd9\u4e48\u4e2a\u5e9e\u7136\u5927\u7269\uff0c\u800c\u4e14\u5982\u4f55\u80fd\u5728\u5efa\u9020\u4e2d\u505a\u5230\u98ce\u58f0\u4e0d\u8d70\u6f0f\u5462\uff1f \u770b\u6765\uff0c\u53ea\u6709\u653f\u5e9c\u624d\u6709\u53ef\u80fd\u62e5\u6709\u8fd9\u79cd\u7834\u574f\u6027\u7684\u673a\u5668\uff0c\u5728\u8fd9\u4e2a\u707e\u96be\u6df1\u91cd\u7684\u65f6\u4ee3\uff0c\u4eba\u4eec\u5343\u65b9\u767e\u8ba1\u8981\u589e\u5f3a\u6218\u4e89\u6b66\u5668\u5a01\u529b\uff0c\u90a3\u5c31\u6709\u8fd9\u79cd\u53ef\u80fd\uff0c\u4e00\u4e2a\u56fd\u5bb6\u7792\u7740\u5176\u4ed6\u56fd\u5bb6\u5728\u8bd5\u5236\u8fd9\u7c7b\u9a87\u4eba\u542c\u95fb\u7684\u6b66\u5668\u3002\u7ee7\u590f\u65af\u52c3\u6b65\u67aa\u4e4b\u540e\u6709\u6c34\u96f7\uff0c\u6c34\u96f7\u4e4b\u540e\u6709\u6c34\u4e0b\u649e\u9524\uff0c\u7136\u540e\u9b54\u9053\u6500\u5347\u53cd\u5e94\uff0c\u4e8b\u6001\u6108\u6f14\u6108\u70c8\u3002\u81f3\u5c11\uff0c\u6211\u662f\u8fd9\u6837\u60f3\u7684\u3002 \u901a\u8fc7 SnowNLP \u63d0\u4f9b\u7684\u7b97\u6cd5\uff1a 1 2 3 4 5 from snownlp import SnowNLP text = \" \u4e0a\u9762\u7684\u539f\u6587\u5185\u5bb9\uff0c\u6b64\u5904\u7701\u7565 \" s = SnowNLP(text) print(\"\u3002\".join(s.summary(5))) \u8f93\u51fa\u7ed3\u679c\uff1a 1 \u81ea\u7136\u5c31\u5206\u6210\u89c2\u70b9\u622a\u7136\u4e0d\u540c\u7684\u4e24\u6d3e\uff1a\u4e00\u6d3e\u8bf4\u8fd9\u662f\u4e00\u4e2a\u529b\u5927\u65e0\u6bd4\u7684\u602a\u7269\u3002\u8fd9\u79cd\u5047\u8bbe\u4e5f\u4e0d\u80fd\u6210\u7acb\u3002\u6211\u5230\u7ebd\u7ea6\u65f6\u3002\u8bf4\u5b83\u662f\u4e00\u5757\u6d6e\u52a8\u7684\u8239\u4f53\u6216\u662f\u4e00\u5806\u5927\u8239\u6b8b\u7247\u3002\u53e6\u4e00\u6d3e\u8bf4\u8fd9\u662f\u4e00\u8258\u52a8\u529b\u6781\u5f3a\u7684\u201c\u6f5c\u6c34\u8239\u201d \u521d\u6b65\u6765\u770b\uff0c\u6548\u679c\u5e76\u4e0d\u662f\u5f88\u597d\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u81ea\u5df1\u8ba1\u7b97\u53e5\u5b50\u6743\u91cd\uff0c\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684\u6458\u8981\u529f\u80fd\uff0c\u8fd9\u4e2a\u5c31\u9700\u8981 jieba \uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 import re import jieba.analyse import jieba.posseg class TextSummary: def __init__(self, text): self.text = text def splitSentence(self): sectionNum = 0 self.sentences = [] for eveSection in self.text.split(\"\\n\"): if eveSection: sentenceNum = 0 for eveSentence in re.split(\"!|\u3002|\uff1f\", eveSection): if eveSentence: mark = [] if sectionNum == 0: mark.append(\"FIRSTSECTION\") if sentenceNum == 0: mark.append(\"FIRSTSENTENCE\") self.sentences.append({ \"text\": eveSentence, \"pos\": { \"x\": sectionNum, \"y\": sentenceNum, \"mark\": mark } }) sentenceNum = sentenceNum + 1 sectionNum = sectionNum + 1 self.sentences[-1][\"pos\"][\"mark\"].append(\"LASTSENTENCE\") for i in range(0, len(self.sentences)): if self.sentences[i][\"pos\"][\"x\"] == self.sentences[-1][\"pos\"][\"x\"]: self.sentences[i][\"pos\"][\"mark\"].append(\"LASTSECTION\") def getKeywords(self): self.keywords = jieba.analyse.extract_tags(self.text, topK=20, withWeight=False, allowPOS=('n', 'vn', 'v')) def sentenceWeight(self): # \u8ba1\u7b97\u53e5\u5b50\u7684\u4f4d\u7f6e\u6743\u91cd for sentence in self.sentences: mark = sentence[\"pos\"][\"mark\"] weightPos = 0 if \"FIRSTSECTION\" in mark: weightPos = weightPos + 2 if \"FIRSTSENTENCE\" in mark: weightPos = weightPos + 2 if \"LASTSENTENCE\" in mark: weightPos = weightPos + 1 if \"LASTSECTION\" in mark: weightPos = weightPos + 1 sentence[\"weightPos\"] = weightPos # \u8ba1\u7b97\u53e5\u5b50\u7684\u7ebf\u7d22\u8bcd\u6743\u91cd index = [\" \u603b\u4e4b \", \" \u603b\u800c\u8a00\u4e4b \"] for sentence in self.sentences: sentence[\"weightCueWords\"] = 0 sentence[\"weightKeywords\"] = 0 for i in index: for sentence in self.sentences: if sentence[\"text\"].find(i) >= 0: sentence[\"weightCueWords\"] = 1 for keyword in self.keywords: for sentence in self.sentences: if sentence[\"text\"].find(keyword) >= 0: sentence[\"weightKeywords\"] = sentence[\"weightKeywords\"] + 1 for sentence in self.sentences: sentence[\"weight\"] = sentence[\"weightPos\"] + 2 * sentence[\"weightCueWords\"] + sentence[\"weightKeywords\"] def getSummary(self, ratio=0.1): self.keywords = list() self.sentences = list() self.summary = list() # \u8c03\u7528\u65b9\u6cd5\uff0c\u5206\u522b\u8ba1\u7b97\u5173\u952e\u8bcd\u3001\u5206\u53e5\uff0c\u8ba1\u7b97\u6743\u91cd self.getKeywords() self.splitSentence() self.sentenceWeight() # \u5bf9\u53e5\u5b50\u7684\u6743\u91cd\u503c\u8fdb\u884c\u6392\u5e8f self.sentences = sorted(self.sentences, key=lambda k: k['weight'], reverse=True) # \u6839\u636e\u6392\u5e8f\u7ed3\u679c\uff0c\u53d6\u6392\u540d\u5360\u524d ratio% \u7684\u53e5\u5b50\u4f5c\u4e3a\u6458\u8981 for i in range(len(self.sentences)): if i < ratio * len(self.sentences): sentence = self.sentences[i] self.summary.append(sentence[\"text\"]) return self.summary \u8fd9\u6bb5\u4ee3\u7801\u4e3b\u8981\u662f\u901a\u8fc7 tf-idf \u5b9e\u73b0\u5173\u952e\u8bcd\u63d0\u53d6\uff0c\u7136\u540e\u901a\u8fc7\u5173\u952e\u8bcd\u63d0\u53d6\u5bf9\u53e5\u5b50\u5c3d\u5fc3\u6743\u91cd\u8d4b\u4e88\uff0c\u6700\u540e\u83b7\u5f97\u5230\u6574\u4f53\u7684\u7ed3\u679c\uff0c\u8fd0\u884c\uff1a 1 2 testSummary = TextSummary(text) print(\"\u3002\".join(testSummary.getSummary())) \u53ef\u4ee5\u5f97\u5230\u7ed3\u679c\uff1a 1 2 3 4 5 Building prefix dict from the default dictionary ... Loading model from cache /var/folders/yb/wvy_7wm91mzd7cjg4444gvdjsglgs8/T/jieba.cache Loading model cost 0.721 seconds. Prefix dict has been built successfully. \u770b\u6765\uff0c\u53ea\u6709\u653f\u5e9c\u624d\u6709\u53ef\u80fd\u62e5\u6709\u8fd9\u79cd\u7834\u574f\u6027\u7684\u673a\u5668\uff0c\u5728\u8fd9\u4e2a\u707e\u96be\u6df1\u91cd\u7684\u65f6\u4ee3\uff0c\u4eba\u4eec\u5343\u65b9\u767e\u8ba1\u8981\u589e\u5f3a\u6218\u4e89\u6b66\u5668\u5a01\u529b\uff0c\u90a3\u5c31\u6709\u8fd9\u79cd\u53ef\u80fd\uff0c\u4e00\u4e2a\u56fd\u5bb6\u7792\u7740\u5176\u4ed6\u56fd\u5bb6\u5728\u8bd5\u5236\u8fd9\u7c7b\u9a87\u4eba\u542c\u95fb\u7684\u6b66\u5668\u3002\u4e8e\u662f\uff0c\u6211\u5c31\u6293\u7d27\u8fd9\u6bb5\u5019\u8239\u9017\u7559\u65f6\u95f4\uff0c\u628a\u6536\u96c6\u5230\u7684\u77ff\u7269\u548c\u52a8\u690d\u7269\u6807\u672c\u8fdb\u884c\u5206\u7c7b\u6574\u7406\uff0c\u53ef\u5c31\u5728\u8fd9\u65f6\uff0c\u65af\u79d1\u820d\u53f7\u51fa\u4e8b\u4e86\u3002\u540c\u6837\u7684\u9053\u7406\uff0c\u8bf4\u5b83\u662f\u4e00\u5757\u6d6e\u52a8\u7684\u8239\u4f53\u6216\u662f\u4e00\u5806\u5927\u8239\u6b8b\u7247\uff0c\u8fd9\u79cd\u5047\u8bbe\u4e5f\u4e0d\u80fd\u6210\u7acb\uff0c\u7406\u7531\u4ecd\u7136\u662f\u79fb\u52a8\u901f\u5ea6\u592a\u5feb \u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u6574\u4f53\u6548\u679c\u8981\u6bd4\u521a\u624d\u7684\u597d\u4e00\u4e9b\u3002","title":"\u6587\u672c\u6458\u8981"},{"location":"pages/nlp/nlpinfo/server-less-textsummary-keywords-extract/#\u53d1\u5e03-API","text":"\u901a\u8fc7 Serverless \u67b6\u6784\uff0c\u5c06\u4e0a\u9762\u4ee3\u7801\u8fdb\u884c\u6574\u7406\uff0c\u5e76\u53d1\u5e03\u3002 \u4ee3\u7801\u6574\u7406\u7ed3\u679c\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 import re, json import jieba.analyse import jieba.posseg class NLPAttr: def __init__(self, text): self.text = text def splitSentence(self): sectionNum = 0 self.sentences = [] for eveSection in self.text.split(\"\\n\"): if eveSection: sentenceNum = 0 for eveSentence in re.split(\"!|\u3002|\uff1f\", eveSection): if eveSentence: mark = [] if sectionNum == 0: mark.append(\"FIRSTSECTION\") if sentenceNum == 0: mark.append(\"FIRSTSENTENCE\") self.sentences.append({ \"text\": eveSentence, \"pos\": { \"x\": sectionNum, \"y\": sentenceNum, \"mark\": mark } }) sentenceNum = sentenceNum + 1 sectionNum = sectionNum + 1 self.sentences[-1][\"pos\"][\"mark\"].append(\"LASTSENTENCE\") for i in range(0, len(self.sentences)): if self.sentences[i][\"pos\"][\"x\"] == self.sentences[-1][\"pos\"][\"x\"]: self.sentences[i][\"pos\"][\"mark\"].append(\"LASTSECTION\") def getKeywords(self): self.keywords = jieba.analyse.extract_tags(self.text, topK=20, withWeight=False, allowPOS=('n', 'vn', 'v')) return self.keywords def sentenceWeight(self): # \u8ba1\u7b97\u53e5\u5b50\u7684\u4f4d\u7f6e\u6743\u91cd for sentence in self.sentences: mark = sentence[\"pos\"][\"mark\"] weightPos = 0 if \"FIRSTSECTION\" in mark: weightPos = weightPos + 2 if \"FIRSTSENTENCE\" in mark: weightPos = weightPos + 2 if \"LASTSENTENCE\" in mark: weightPos = weightPos + 1 if \"LASTSECTION\" in mark: weightPos = weightPos + 1 sentence[\"weightPos\"] = weightPos # \u8ba1\u7b97\u53e5\u5b50\u7684\u7ebf\u7d22\u8bcd\u6743\u91cd index = [\" \u603b\u4e4b \", \" \u603b\u800c\u8a00\u4e4b \"] for sentence in self.sentences: sentence[\"weightCueWords\"] = 0 sentence[\"weightKeywords\"] = 0 for i in index: for sentence in self.sentences: if sentence[\"text\"].find(i) >= 0: sentence[\"weightCueWords\"] = 1 for keyword in self.keywords: for sentence in self.sentences: if sentence[\"text\"].find(keyword) >= 0: sentence[\"weightKeywords\"] = sentence[\"weightKeywords\"] + 1 for sentence in self.sentences: sentence[\"weight\"] = sentence[\"weightPos\"] + 2 * sentence[\"weightCueWords\"] + sentence[\"weightKeywords\"] def getSummary(self, ratio=0.1): self.keywords = list() self.sentences = list() self.summary = list() # \u8c03\u7528\u65b9\u6cd5\uff0c\u5206\u522b\u8ba1\u7b97\u5173\u952e\u8bcd\u3001\u5206\u53e5\uff0c\u8ba1\u7b97\u6743\u91cd self.getKeywords() self.splitSentence() self.sentenceWeight() # \u5bf9\u53e5\u5b50\u7684\u6743\u91cd\u503c\u8fdb\u884c\u6392\u5e8f self.sentences = sorted(self.sentences, key=lambda k: k['weight'], reverse=True) # \u6839\u636e\u6392\u5e8f\u7ed3\u679c\uff0c\u53d6\u6392\u540d\u5360\u524d ratio% \u7684\u53e5\u5b50\u4f5c\u4e3a\u6458\u8981 for i in range(len(self.sentences)): if i < ratio * len(self.sentences): sentence = self.sentences[i] self.summary.append(sentence[\"text\"]) return self.summary def main_handler(event, context): nlp = NLPAttr(json.loads(event['body'])['text']) return { \"keywords\": nlp.getKeywords(), \"summary\": \"\u3002\".join(nlp.getSummary()) } \u7f16\u5199\u9879\u76ee serverless.yaml \u6587\u4ef6\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 nlpDemo: component: \"@serverless/tencent-scf\" inputs: name: nlpDemo codeUri: ./ handler: index.main_handler runtime: Python3.6 region: ap-guangzhou description: \u6587\u672c\u6458\u8981 / \u5173\u952e\u8bcd\u529f\u80fd memorySize: 256 timeout: 10 events: - apigw: name: nlpDemo_apigw_service parameters: protocols: - http serviceName: serverless description: \u6587\u672c\u6458\u8981 / \u5173\u952e\u8bcd\u529f\u80fd environment: release endpoints: - path: /nlp method: ANY \u7531\u4e8e\u9879\u76ee\u4e2d\u4f7f\u7528\u4e86 jieba \uff0c\u6240\u4ee5\u5728\u5b89\u88c5\u7684\u65f6\u5019\u63a8\u8350\u5728 CentOS \u7cfb\u7edf\u4e0b\u4e0e\u5bf9\u5e94\u7684 Python \u7248\u672c\u4e0b\u5b89\u88c5\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6211\u4e4b\u524d\u4e3a\u4e86\u65b9\u4fbf\u505a\u7684\u4e00\u4e2a\u4f9d\u8d56\u5de5\u5177\uff1a \u901a\u8fc7 sls --debug \u8fdb\u884c\u90e8\u7f72\uff1a \u90e8\u7f72\u5b8c\u6210\uff0c\u53ef\u4ee5\u901a\u8fc7 PostMan \u8fdb\u884c\u7b80\u5355\u7684\u6d4b\u8bd5\uff1a \u4ece\u4e0a\u56fe\u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u5df2\u7ecf\u6309\u7167\u9884\u671f\u8f93\u51fa\u4e86\u76ee\u6807\u7ed3\u679c\u3002\u81f3\u6b64\uff0c\u6587\u672c\u6458\u8981 / \u5173\u952e\u8bcd\u63d0\u53d6\u7684 API \u5df2\u7ecf\u90e8\u7f72\u5b8c\u6210\u3002","title":"\u53d1\u5e03 API"},{"location":"pages/nlp/nlpinfo/server-less-textsummary-keywords-extract/#\u603b\u7ed3","text":"\u76f8\u5bf9\u6765\u8bf4\uff0c\u901a\u8fc7 Serveless \u67b6\u6784\u505a API \u662f\u975e\u5e38\u5bb9\u6613\u548c\u65b9\u4fbf\u7684\uff0c\u53ef\u5b9e\u73b0 API \u7684\u63d2\u62d4\u884c\uff0c\u7ec4\u4ef6\u5316\uff0c\u5e0c\u671b\u672c\u6587\u80fd\u591f\u7ed9\u8bfb\u8005\u66f4\u591a\u7684\u601d\u8def\u548c\u542f\u53d1\u3002","title":"\u603b\u7ed3"},{"location":"pages/nlp/nlpinfo/text-summarization-pretrained-ncoders/","text":"\u57fa\u4e8e\u9884\u8bad\u7ec3\u6a21\u578b\u7684\u6587\u672c\u6458\u8981 \u00b6 \u6587\u672c\u6458\u8981\u4efb\u52a1 \u00b6 \u4efb\u52a1\u6982\u8ff0\uff1a\u6d4f\u89c8\u4e00\u7bc7\u65b0\u95fb\u6216\u8bba\u6587\uff0c\u7528\u7cbe\u70bc\u4e14\u6838\u5fc3\u7684\u8bed\u53e5\u6765\u6982\u62ec\u6574\u7bc7\u6587\u7ae0\u7684\u5185\u5bb9\uff0c\u7528\u6237\u53ea\u9700\u901a\u8fc7\u9605\u8bfb\u6458\u8981\u5c31\u80fd\u83b7\u53d6\u6587\u7ae0\u7684\u4e3b\u8981\u5185\u5bb9\u3002 \u6587\u672c\u6458\u8981\u901a\u8fc7\u751f\u6210\u65b9\u5f0f\u53ef\u4ee5\u5206\u4e3a \u751f\u6210\u5f0f \u548c \u62bd\u53d6\u5f0f \uff0c\u6839\u636e\u5904\u7406\u5bf9\u8c61\u7684\u4e0d\u540c\u53c8\u53ef\u4ee5\u5206\u4e3a \u5355\u6587\u6863 \u6458\u8981\u548c \u591a\u6587\u6863 \u6458\u8981\u3002 \u62bd\u53d6\u5f0f\u6458\u8981\u4e3b\u8981\u4ece\u539f\u6587\u4e2d\u62bd\u53d6\u82e5\u5e72\u4e2a\u53e5\u5b50\u4f5c\u4e3a\u6458\u8981\uff0c\u901a\u8fc7\u5bf9\u53e5\u5b50\u8fdb\u884c\u6253\u5206\uff0c\u83b7\u5f97\u53e5\u5b50\u7684\u91cd\u8981\u6027\uff0c\u5728\u901a\u987a\u7a0b\u5ea6\u4e0a\u8981\u6bd4\u751f\u6210\u5f0f\u6548\u679c\u597d\uff0c\u4f46\u4e5f\u4f1a\u51fa\u73b0\u5197\u4f59\u7684\u95ee\u9898\u3002 \u751f\u6210\u5f0f\u6458\u8981\u4e0e\u4eba\u7c7b\u901a\u8fc7\u9605\u8bfb\u6587\u7ae0\uff0c\u7136\u540e\u7ec4\u7ec7\u4e00\u4e9b\u6838\u5fc3\u8bcd\u548c\u8bed\u53e5\u6765\u751f\u6210\u6458\u8981\u65b9\u5f0f\u7c7b\u4f3c\u3002\u4e3b\u8981\u5b58\u5728\u4e00\u4e9b\u672a\u767b\u5f55\u8bcd\u3001\u751f\u6210\u5185\u5bb9\u4e0e\u539f\u6587\u4e0d\u7b26\u5408\u7684\u95ee\u9898\u3002 \u6458\u8981\u8bc4\u6d4b\u65b9\u6cd5 \u00b6 \u6587\u672c\u6458\u8981\u5c5e\u4e8e\u6587\u672c\u751f\u6210\u4efb\u52a1\u8303\u7574\uff0c\u56e0\u6b64\u4e0d\u80fd\u7528\u7b80\u5355\u7684\u51c6\u53ec\u7387\u6765\u8bc4\u6d4b\u3002\u5f53\u524d\u6bd4\u8f83\u5e38\u7528\u7684\u8bc4\u6d4b\u6587\u672c\u751f\u6210\u7684\u65b9\u6cd5\u5927\u81f4\u662fBLUE\u3001ROUGE\u7b49\u3002\u8fd9\u4e9b\u65b9\u6cd5\u7684\u7f3a\u70b9\u5728\u4e8e\u8bc4\u6d4b\u8d28\u91cf\u8fd8\u6bd4\u4e0d\u4e0a\u4eba\u5de5\uff0c\u53ea\u662f\u4ece\u57fa\u672c\u8bed\u4e49\u5355\u5143\u7684\u5339\u914d\u4e0a\u53bb\u8bc4\u6d4b\u5019\u9009\u6458\u8981\u548c\u6807\u51c6\u6458\u8981\u4e4b\u95f4\u7684\u76f8\u4f3c\u6027\uff0c\u7f3a\u5c11\u8bed\u4e49\u65b9\u9762\u7684\u7ef4\u5ea6\u3002\u56e0\u6b64\uff0c\u5982\u4f55\u8bbe\u8ba1\u4e00\u4e2a\u5408\u9002\u7684\u8bc4\u6d4b\u65b9\u6cd5\uff0c\u4e5f\u662f\u76ee\u524d\u6587\u672c\u6458\u8981\u4efb\u52a1\u7684\u4e00\u4e2a\u7814\u7a76\u65b9\u5411\u3002 \u4e0a\u9762\u7b80\u5355\u4ecb\u7ecd\u4e86\u4e00\u4e0b\u6458\u8981\u4efb\u52a1\u7c7b\u578b\u548c\u8bc4\u4ef7\u6307\u6807\u3002\u4e0b\u9762\uff0c\u4e3b\u8981\u4ecb\u7ecd\u4e00\u7bc7\u53d1\u8868\u5728EMNLP2019\u4e0a\u5173\u4e8e\u6458\u8981\u7684\u8bba\u6587\uff1a \u300aText Summarization with Pretrained Encoders\u300b \u8be5\u8bba\u6587\u4e3b\u8981\u5173\u6ce8\u751f\u6210\u5f0f\u548c\u62bd\u53d6\u5f0f\u6458\u8981\u4e0a\u4f7f\u7528\u7edf\u4e00\u7684BERT\u53d8\u4f53\uff0c\u5c55\u793a\u4e86\u9884\u8bad\u7ec3\u8bed\u8a00\u6a21\u578b\u5728\u62bd\u53d6\u5f0f\u548c\u751f\u6210\u5f0f\u6458\u8981\u4efb\u52a1\u4e2d\u7684\u6709\u6548\u6027\uff0c\u63d0\u51fa\u7684\u6a21\u578b\u4e3a\u8fdb\u4e00\u6b65\u63d0\u9ad8\u6458\u8981\u6027\u80fd\u6253\u4e0b\u4e86\u57fa\u7840\u3002 \u62bd\u53d6\u5f0f\u6458\u8981 \u00b6 \u9996\u5148\u662f\u5728\u62bd\u53d6\u5f0f\u6458\u8981\u4e0a\u7684\u5e94\u7528\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u62bd\u53d6\u5f0f\u6458\u8981\u7684\u5904\u7406\u8303\u5f0f\u662f\u9009\u62e9\u6027\u62bd\u53d6\u6587\u672c\u4e2d\u53e5\u5b50\u4f5c\u4e3a\u6458\u8981\u3002\u8fd9\u4e2a\u4efb\u52a1\u7684\u6700\u5927\u95ee\u9898\u662f\u5982\u4f55\u83b7\u5f97\u6bcf\u4e2a\u53e5\u5b50\u5411\u91cf\uff0c\u7136\u540e\u5c06\u53e5\u5b50\u5411\u91cf\u7528\u4e8e\u4e8c\u5206\u7c7b\u3002\u800cBERT\u539f\u751f\u7ed3\u6784\u53ea\u80fd\u751f\u6210\u5355\u4e2a\u53e5\u5b50\u5411\u91cf\u6216\u8005\u53e5\u5b50\u5bf9\u7684\u5411\u91cf\u3002\u56e0\u6b64\u4f5c\u8005\u8c03\u6574\u4e86BERT\u7684\u8f93\u5165\u90e8\u5206\u548cEmbedding\u6765\u4f7f\u5f97\u5b83\u4eec\u9002\u5e94\u6458\u8981\u4efb\u52a1\u3002 \u4f5c\u8005\u5728\u6bcf\u4e2a\u53e5\u5b50\u7684\u524d\u540e\u90fd\u52a0\u5165\u201c[CLS]\u201d\u548c\u201c[SEP]\u201d\u7684\u7b26\u53f7\uff0c\u6bcf\u4e00\u4e2a\u201d[CLS]\u201d\u5bf9\u5e94\u8fd9\u53e5\u8bdd\u7684\u5411\u91cf\u8868\u793a\u3002\u53e6\u5916\uff0c\u4e3a\u4e86\u533a\u522b\u4e00\u4e2a\u6587\u6863\u4e2d\u7684\u591a\u4e2a\u53e5\u5b50\uff0c\u4f5c\u8005\u4f7f\u7528\u95f4\u9694\u7b26\u53f7\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u53e5\u5b50 \\(sent_i\\) \uff0c\u4f5c\u8005\u57fa\u4e8e\u53e5\u5b50\u7684\u5355\u53cc\u7f16\u53f7\u7ed9\u4ed6\u4eec\u52a0\u4e00\u4e2asegment embedding EA/EB\uff0c\u8fd9\u6837\u5bf9\u4e8e[ \\(sent_1,sent_2,sent_3\u2026sent_5\\) ]\u800c\u8a00\uff0c\u5b83\u4eec\u7684segment embedding\u5c31\u662f[EA,EB,EA,EB,EA]\u3002 \u4e3a\u4e86\u8fdb\u4e00\u6b65\u589e\u8fdb\u53e5\u5b50\u4e4b\u95f4\u7684\u4e92\u52a8\uff0c\u5728BERT\u4e4b\u4e0a\u52a0\u4e86\u4e00\u5c42transformer\u7684Summarization Layer\uff0c\u53ea\u8f93\u5165\u6bcf\u4e2a[CLS]\u7684\u5411\u91cf\uff0c\u6700\u540e\u9884\u6d4b\u5f53\u524d\u53e5\u5b50\u662f\u5426\u4fdd\u7559\uff0c\u8fdb\u884c\u5fae\u8c03\u3002 \u751f\u6210\u5f0f\u6458\u8981 \u00b6 \u5728\u751f\u6210\u5f0f\u6458\u8981\u4e2d\u4f7f\u7528\u4e86\u6807\u51c6\u7684\u7f16\u7801\u5668-\u89e3\u7801\u5668\u6846\u67b6\u3002\u7f16\u7801\u5668\u662f\u9884\u8bad\u7ec3\u7684BERTSUM\uff0c\u89e3\u7801\u5668\u662f\u968f\u673a\u521d\u59cb\u5316\u76846\u5c42Transformer\u3002\u5bf9\u4e8e\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\uff0c\u5206\u522b\u4f7f\u7528\u4e24\u4e2a \\(\\beta_1=0.9\\) \u548c \\(\\beta_2=0.999\\) \u7684Adam\u4f18\u5316\u5668\u3002\u53e6\u5916\uff0c\u8bba\u6587\u63d0\u51fa\u4e24\u9636\u6bb5\u5fae\u8c03\u65b9\u6cd5\uff0c\u9996\u5148\u5728\u62bd\u53d6\u5f0f\u6458\u8981\u4efb\u52a1\u4e2d\u5bf9\u7f16\u7801\u5668\u8fdb\u884c\u5fae\u8c03\uff0c\u7136\u540e\u5728\u751f\u6210\u5f0f\u6458\u8981\u4e2d\u5bf9\u89e3\u7801\u5668\u8fdb\u884c\u5fae\u8c03\uff0c\u8fd9\u662f\u7531\u4e8e\u62bd\u53d6\u6458\u8981\u7684\u76ee\u6807\u6709\u5229\u4e8e\u63d0\u9ad8\u751f\u6210\u5f0f\u6458\u8981\u7684\u6027\u80fd\u3002 \u5b9e\u9a8c\u6548\u679c \u00b6 \u8fd9\u91cc\u6211\u4eec\u53ea\u770b\u6a21\u578b BERTSUM \u5728CNN/Daily Mail\u6570\u636e\u96c6\u4e0a\u7684\u6027\u80fd\u8868\u73b0\uff0c\u4ece\u56fe\u4e2d\u53ef\u4ee5\uff0c\u4e0d\u7ba1\u662f\u751f\u6210\u5f0f\u6458\u8981\u8fd8\u662f\u62bd\u53d6\u5f0f\u6458\u8981\uff0c\u8be5\u6a21\u578b\u90fd\u53d6\u5f97\u4e86\u65b0\u7684SOTA\u7ed3\u679c\uff0c\u8868\u660e\u4e86BERTSUM\u7ed3\u6784\u7684\u9c81\u68d2\u6027\u3002 \u611f\u60f3\u4e0e\u5c55\u671b \u00b6 \u4eceBERT\u4e00\u51fa\u73b0\uff0c\u5c31\u5728\u5f88\u591aNLP\u4efb\u52a1\u4e2d\u5c55\u73b0\u4e86\u5176\u5f3a\u5927\u7684\u6548\u679c\u3002\u4f46\u5982\u4f55\u5c06BERT\u5f15\u5165\u5230\u6587\u672c\u751f\u6210\u4efb\u52a1\u4e2d\uff0c\u672c\u7bc7\u8bba\u6587\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5f88\u597d\u7684\u5c1d\u8bd5\u65b9\u5f0f\uff0c\u8fd8\u878d\u5408\u4e86\u751f\u6210\u5f0f\u548c\u62bd\u53d6\u5f0f\u4e24\u4e2a\u4efb\u52a1\uff0c\u6a21\u578b\u7ed3\u6784\u65b9\u9762\u8bbe\u8ba1\u5f88\u5de7\u5999\uff0c\u4e0d\u662f\u5f88\u590d\u6742\uff0c\u8fd8\u63d0\u4f9b\u9488\u5bf9BERT\u957f\u6587\u672c\u8f93\u5165\uff08\u9650\u5236\u8f93\u5165512\u5b57\u7b26\uff09\u7684\u89e3\u51b3\u65b9\u6cd5\uff0c\u901a\u8fc7\u968f\u673a\u521d\u59cb\u5316\u957f\u5ea6\u8d85\u8fc7512\u7684\u4f4d\u7f6e\u5411\u91cf\uff0c\u4e3a\u60f3\u4f7f\u7528BERT\u8fdb\u884c\u6458\u8981\u4efb\u52a1\u7684nlper\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5f88\u597d\u65b9\u6848\u3002","title":"\u57fa\u4e8e\u9884\u8bad\u7ec3\u6a21\u578b\u7684\u6587\u672c\u6458\u8981"},{"location":"pages/nlp/nlpinfo/text-summarization-pretrained-ncoders/#\u57fa\u4e8e\u9884\u8bad\u7ec3\u6a21\u578b\u7684\u6587\u672c\u6458\u8981","text":"","title":"\u57fa\u4e8e\u9884\u8bad\u7ec3\u6a21\u578b\u7684\u6587\u672c\u6458\u8981"},{"location":"pages/nlp/nlpinfo/text-summarization-pretrained-ncoders/#\u6587\u672c\u6458\u8981\u4efb\u52a1","text":"\u4efb\u52a1\u6982\u8ff0\uff1a\u6d4f\u89c8\u4e00\u7bc7\u65b0\u95fb\u6216\u8bba\u6587\uff0c\u7528\u7cbe\u70bc\u4e14\u6838\u5fc3\u7684\u8bed\u53e5\u6765\u6982\u62ec\u6574\u7bc7\u6587\u7ae0\u7684\u5185\u5bb9\uff0c\u7528\u6237\u53ea\u9700\u901a\u8fc7\u9605\u8bfb\u6458\u8981\u5c31\u80fd\u83b7\u53d6\u6587\u7ae0\u7684\u4e3b\u8981\u5185\u5bb9\u3002 \u6587\u672c\u6458\u8981\u901a\u8fc7\u751f\u6210\u65b9\u5f0f\u53ef\u4ee5\u5206\u4e3a \u751f\u6210\u5f0f \u548c \u62bd\u53d6\u5f0f \uff0c\u6839\u636e\u5904\u7406\u5bf9\u8c61\u7684\u4e0d\u540c\u53c8\u53ef\u4ee5\u5206\u4e3a \u5355\u6587\u6863 \u6458\u8981\u548c \u591a\u6587\u6863 \u6458\u8981\u3002 \u62bd\u53d6\u5f0f\u6458\u8981\u4e3b\u8981\u4ece\u539f\u6587\u4e2d\u62bd\u53d6\u82e5\u5e72\u4e2a\u53e5\u5b50\u4f5c\u4e3a\u6458\u8981\uff0c\u901a\u8fc7\u5bf9\u53e5\u5b50\u8fdb\u884c\u6253\u5206\uff0c\u83b7\u5f97\u53e5\u5b50\u7684\u91cd\u8981\u6027\uff0c\u5728\u901a\u987a\u7a0b\u5ea6\u4e0a\u8981\u6bd4\u751f\u6210\u5f0f\u6548\u679c\u597d\uff0c\u4f46\u4e5f\u4f1a\u51fa\u73b0\u5197\u4f59\u7684\u95ee\u9898\u3002 \u751f\u6210\u5f0f\u6458\u8981\u4e0e\u4eba\u7c7b\u901a\u8fc7\u9605\u8bfb\u6587\u7ae0\uff0c\u7136\u540e\u7ec4\u7ec7\u4e00\u4e9b\u6838\u5fc3\u8bcd\u548c\u8bed\u53e5\u6765\u751f\u6210\u6458\u8981\u65b9\u5f0f\u7c7b\u4f3c\u3002\u4e3b\u8981\u5b58\u5728\u4e00\u4e9b\u672a\u767b\u5f55\u8bcd\u3001\u751f\u6210\u5185\u5bb9\u4e0e\u539f\u6587\u4e0d\u7b26\u5408\u7684\u95ee\u9898\u3002","title":"\u6587\u672c\u6458\u8981\u4efb\u52a1"},{"location":"pages/nlp/nlpinfo/text-summarization-pretrained-ncoders/#\u6458\u8981\u8bc4\u6d4b\u65b9\u6cd5","text":"\u6587\u672c\u6458\u8981\u5c5e\u4e8e\u6587\u672c\u751f\u6210\u4efb\u52a1\u8303\u7574\uff0c\u56e0\u6b64\u4e0d\u80fd\u7528\u7b80\u5355\u7684\u51c6\u53ec\u7387\u6765\u8bc4\u6d4b\u3002\u5f53\u524d\u6bd4\u8f83\u5e38\u7528\u7684\u8bc4\u6d4b\u6587\u672c\u751f\u6210\u7684\u65b9\u6cd5\u5927\u81f4\u662fBLUE\u3001ROUGE\u7b49\u3002\u8fd9\u4e9b\u65b9\u6cd5\u7684\u7f3a\u70b9\u5728\u4e8e\u8bc4\u6d4b\u8d28\u91cf\u8fd8\u6bd4\u4e0d\u4e0a\u4eba\u5de5\uff0c\u53ea\u662f\u4ece\u57fa\u672c\u8bed\u4e49\u5355\u5143\u7684\u5339\u914d\u4e0a\u53bb\u8bc4\u6d4b\u5019\u9009\u6458\u8981\u548c\u6807\u51c6\u6458\u8981\u4e4b\u95f4\u7684\u76f8\u4f3c\u6027\uff0c\u7f3a\u5c11\u8bed\u4e49\u65b9\u9762\u7684\u7ef4\u5ea6\u3002\u56e0\u6b64\uff0c\u5982\u4f55\u8bbe\u8ba1\u4e00\u4e2a\u5408\u9002\u7684\u8bc4\u6d4b\u65b9\u6cd5\uff0c\u4e5f\u662f\u76ee\u524d\u6587\u672c\u6458\u8981\u4efb\u52a1\u7684\u4e00\u4e2a\u7814\u7a76\u65b9\u5411\u3002 \u4e0a\u9762\u7b80\u5355\u4ecb\u7ecd\u4e86\u4e00\u4e0b\u6458\u8981\u4efb\u52a1\u7c7b\u578b\u548c\u8bc4\u4ef7\u6307\u6807\u3002\u4e0b\u9762\uff0c\u4e3b\u8981\u4ecb\u7ecd\u4e00\u7bc7\u53d1\u8868\u5728EMNLP2019\u4e0a\u5173\u4e8e\u6458\u8981\u7684\u8bba\u6587\uff1a \u300aText Summarization with Pretrained Encoders\u300b \u8be5\u8bba\u6587\u4e3b\u8981\u5173\u6ce8\u751f\u6210\u5f0f\u548c\u62bd\u53d6\u5f0f\u6458\u8981\u4e0a\u4f7f\u7528\u7edf\u4e00\u7684BERT\u53d8\u4f53\uff0c\u5c55\u793a\u4e86\u9884\u8bad\u7ec3\u8bed\u8a00\u6a21\u578b\u5728\u62bd\u53d6\u5f0f\u548c\u751f\u6210\u5f0f\u6458\u8981\u4efb\u52a1\u4e2d\u7684\u6709\u6548\u6027\uff0c\u63d0\u51fa\u7684\u6a21\u578b\u4e3a\u8fdb\u4e00\u6b65\u63d0\u9ad8\u6458\u8981\u6027\u80fd\u6253\u4e0b\u4e86\u57fa\u7840\u3002","title":"\u6458\u8981\u8bc4\u6d4b\u65b9\u6cd5"},{"location":"pages/nlp/nlpinfo/text-summarization-pretrained-ncoders/#\u62bd\u53d6\u5f0f\u6458\u8981","text":"\u9996\u5148\u662f\u5728\u62bd\u53d6\u5f0f\u6458\u8981\u4e0a\u7684\u5e94\u7528\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u62bd\u53d6\u5f0f\u6458\u8981\u7684\u5904\u7406\u8303\u5f0f\u662f\u9009\u62e9\u6027\u62bd\u53d6\u6587\u672c\u4e2d\u53e5\u5b50\u4f5c\u4e3a\u6458\u8981\u3002\u8fd9\u4e2a\u4efb\u52a1\u7684\u6700\u5927\u95ee\u9898\u662f\u5982\u4f55\u83b7\u5f97\u6bcf\u4e2a\u53e5\u5b50\u5411\u91cf\uff0c\u7136\u540e\u5c06\u53e5\u5b50\u5411\u91cf\u7528\u4e8e\u4e8c\u5206\u7c7b\u3002\u800cBERT\u539f\u751f\u7ed3\u6784\u53ea\u80fd\u751f\u6210\u5355\u4e2a\u53e5\u5b50\u5411\u91cf\u6216\u8005\u53e5\u5b50\u5bf9\u7684\u5411\u91cf\u3002\u56e0\u6b64\u4f5c\u8005\u8c03\u6574\u4e86BERT\u7684\u8f93\u5165\u90e8\u5206\u548cEmbedding\u6765\u4f7f\u5f97\u5b83\u4eec\u9002\u5e94\u6458\u8981\u4efb\u52a1\u3002 \u4f5c\u8005\u5728\u6bcf\u4e2a\u53e5\u5b50\u7684\u524d\u540e\u90fd\u52a0\u5165\u201c[CLS]\u201d\u548c\u201c[SEP]\u201d\u7684\u7b26\u53f7\uff0c\u6bcf\u4e00\u4e2a\u201d[CLS]\u201d\u5bf9\u5e94\u8fd9\u53e5\u8bdd\u7684\u5411\u91cf\u8868\u793a\u3002\u53e6\u5916\uff0c\u4e3a\u4e86\u533a\u522b\u4e00\u4e2a\u6587\u6863\u4e2d\u7684\u591a\u4e2a\u53e5\u5b50\uff0c\u4f5c\u8005\u4f7f\u7528\u95f4\u9694\u7b26\u53f7\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u53e5\u5b50 \\(sent_i\\) \uff0c\u4f5c\u8005\u57fa\u4e8e\u53e5\u5b50\u7684\u5355\u53cc\u7f16\u53f7\u7ed9\u4ed6\u4eec\u52a0\u4e00\u4e2asegment embedding EA/EB\uff0c\u8fd9\u6837\u5bf9\u4e8e[ \\(sent_1,sent_2,sent_3\u2026sent_5\\) ]\u800c\u8a00\uff0c\u5b83\u4eec\u7684segment embedding\u5c31\u662f[EA,EB,EA,EB,EA]\u3002 \u4e3a\u4e86\u8fdb\u4e00\u6b65\u589e\u8fdb\u53e5\u5b50\u4e4b\u95f4\u7684\u4e92\u52a8\uff0c\u5728BERT\u4e4b\u4e0a\u52a0\u4e86\u4e00\u5c42transformer\u7684Summarization Layer\uff0c\u53ea\u8f93\u5165\u6bcf\u4e2a[CLS]\u7684\u5411\u91cf\uff0c\u6700\u540e\u9884\u6d4b\u5f53\u524d\u53e5\u5b50\u662f\u5426\u4fdd\u7559\uff0c\u8fdb\u884c\u5fae\u8c03\u3002","title":"\u62bd\u53d6\u5f0f\u6458\u8981"},{"location":"pages/nlp/nlpinfo/text-summarization-pretrained-ncoders/#\u751f\u6210\u5f0f\u6458\u8981","text":"\u5728\u751f\u6210\u5f0f\u6458\u8981\u4e2d\u4f7f\u7528\u4e86\u6807\u51c6\u7684\u7f16\u7801\u5668-\u89e3\u7801\u5668\u6846\u67b6\u3002\u7f16\u7801\u5668\u662f\u9884\u8bad\u7ec3\u7684BERTSUM\uff0c\u89e3\u7801\u5668\u662f\u968f\u673a\u521d\u59cb\u5316\u76846\u5c42Transformer\u3002\u5bf9\u4e8e\u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\uff0c\u5206\u522b\u4f7f\u7528\u4e24\u4e2a \\(\\beta_1=0.9\\) \u548c \\(\\beta_2=0.999\\) \u7684Adam\u4f18\u5316\u5668\u3002\u53e6\u5916\uff0c\u8bba\u6587\u63d0\u51fa\u4e24\u9636\u6bb5\u5fae\u8c03\u65b9\u6cd5\uff0c\u9996\u5148\u5728\u62bd\u53d6\u5f0f\u6458\u8981\u4efb\u52a1\u4e2d\u5bf9\u7f16\u7801\u5668\u8fdb\u884c\u5fae\u8c03\uff0c\u7136\u540e\u5728\u751f\u6210\u5f0f\u6458\u8981\u4e2d\u5bf9\u89e3\u7801\u5668\u8fdb\u884c\u5fae\u8c03\uff0c\u8fd9\u662f\u7531\u4e8e\u62bd\u53d6\u6458\u8981\u7684\u76ee\u6807\u6709\u5229\u4e8e\u63d0\u9ad8\u751f\u6210\u5f0f\u6458\u8981\u7684\u6027\u80fd\u3002","title":"\u751f\u6210\u5f0f\u6458\u8981"},{"location":"pages/nlp/nlpinfo/text-summarization-pretrained-ncoders/#\u5b9e\u9a8c\u6548\u679c","text":"\u8fd9\u91cc\u6211\u4eec\u53ea\u770b\u6a21\u578b BERTSUM \u5728CNN/Daily Mail\u6570\u636e\u96c6\u4e0a\u7684\u6027\u80fd\u8868\u73b0\uff0c\u4ece\u56fe\u4e2d\u53ef\u4ee5\uff0c\u4e0d\u7ba1\u662f\u751f\u6210\u5f0f\u6458\u8981\u8fd8\u662f\u62bd\u53d6\u5f0f\u6458\u8981\uff0c\u8be5\u6a21\u578b\u90fd\u53d6\u5f97\u4e86\u65b0\u7684SOTA\u7ed3\u679c\uff0c\u8868\u660e\u4e86BERTSUM\u7ed3\u6784\u7684\u9c81\u68d2\u6027\u3002","title":"\u5b9e\u9a8c\u6548\u679c"},{"location":"pages/nlp/nlpinfo/text-summarization-pretrained-ncoders/#\u611f\u60f3\u4e0e\u5c55\u671b","text":"\u4eceBERT\u4e00\u51fa\u73b0\uff0c\u5c31\u5728\u5f88\u591aNLP\u4efb\u52a1\u4e2d\u5c55\u73b0\u4e86\u5176\u5f3a\u5927\u7684\u6548\u679c\u3002\u4f46\u5982\u4f55\u5c06BERT\u5f15\u5165\u5230\u6587\u672c\u751f\u6210\u4efb\u52a1\u4e2d\uff0c\u672c\u7bc7\u8bba\u6587\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5f88\u597d\u7684\u5c1d\u8bd5\u65b9\u5f0f\uff0c\u8fd8\u878d\u5408\u4e86\u751f\u6210\u5f0f\u548c\u62bd\u53d6\u5f0f\u4e24\u4e2a\u4efb\u52a1\uff0c\u6a21\u578b\u7ed3\u6784\u65b9\u9762\u8bbe\u8ba1\u5f88\u5de7\u5999\uff0c\u4e0d\u662f\u5f88\u590d\u6742\uff0c\u8fd8\u63d0\u4f9b\u9488\u5bf9BERT\u957f\u6587\u672c\u8f93\u5165\uff08\u9650\u5236\u8f93\u5165512\u5b57\u7b26\uff09\u7684\u89e3\u51b3\u65b9\u6cd5\uff0c\u901a\u8fc7\u968f\u673a\u521d\u59cb\u5316\u957f\u5ea6\u8d85\u8fc7512\u7684\u4f4d\u7f6e\u5411\u91cf\uff0c\u4e3a\u60f3\u4f7f\u7528BERT\u8fdb\u884c\u6458\u8981\u4efb\u52a1\u7684nlper\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5f88\u597d\u65b9\u6848\u3002","title":"\u611f\u60f3\u4e0e\u5c55\u671b"},{"location":"pages/nlp/nlpinfo/topicextract/","text":"\u4f60\u5728\u5de5\u4f5c\u3001\u5b66\u4e60\u4e2d\u662f\u5426\u66fe\u56e0\u4fe1\u606f\u8fc7\u8f7d\u53eb\u82e6\u4e0d\u8fed\uff1f\u6709\u4e00\u79cd\u65b9\u6cd5\u80fd\u591f\u66ff\u4f60\u8bfb\u6d77\u91cf\u6587\u7ae0\uff0c\u5e76\u5c06\u4e0d\u540c\u7684\u4e3b\u9898\u548c\u5bf9\u5e94\u7684\u5173\u952e\u8bcd\u62bd\u53d6\u51fa\u6765\uff0c\u8ba9\u4f60\u8c08\u7b11\u95f4\u89c2\u5176\u5927\u7565\u3002\u672c\u6587\u4f7f\u7528Python\u5bf9\u8d85\u8fc71000\u6761\u6587\u672c\u505a\u4e3b\u9898\u62bd\u53d6\uff0c\u4e00\u6b65\u6b65\u5e26\u4f60\u4f53\u4f1a\u975e\u76d1\u7763\u673a\u5668\u5b66\u4e60LDA\u65b9\u6cd5\u7684\u9b45\u529b\u3002\u60f3\u4e0d\u60f3\u8bd5\u8bd5\u5462\uff1f \u6df9\u6ca1 \u00b6 \u6bcf\u4e2a\u73b0\u4ee3\u4eba\uff0c\u51e0\u4e4e\u90fd\u4f53\u4f1a\u8fc7\u4fe1\u606f\u8fc7\u8f7d\u7684\u75db\u82e6\u3002\u6587\u7ae0\u8bfb\u4e0d\u8fc7\u6765\uff0c\u97f3\u4e50\u542c\u4e0d\u8fc7\u6765\uff0c\u89c6\u9891\u770b\u4e0d\u8fc7\u6765\u3002\u53ef\u662f\u73b0\u5b9e\u7684\u538b\u529b\uff0c\u4f7f\u4f60\u53c8\u4e0d\u80fd\u8f7b\u6613\u653e\u5f03\u6389\u3002 \u5047\u5982\u4f60\u662f\u4e2a\u7814\u7a76\u751f\uff0c\u6559\u79d1\u4e66\u548c\u8bba\u6587\u5c31\u662f\u4f60\u4e0d\u5f97\u4e0d\u8bfb\u7684\u5185\u5bb9\u3002\u73b0\u5728\u6709\u4e86\u5404\u79cd\u5176\u4ed6\u7684\u9605\u8bfb\u6e20\u9053\uff0c\u5fae\u4fe1\u3001\u5fae\u535a\u3001\u5f97\u5230App\u3001\u591a\u770b\u9605\u8bfb\u3001\u8c46\u74e3\u9605\u8bfb\u3001Kindle\uff0c\u8fd8\u6709\u4f60\u5728RSS\u4e0a\u8ba2\u9605\u7684\u4e00\u5927\u5806\u535a\u5ba2\u2026\u2026\u60c5\u51b5\u5c31\u53d8\u5f97\u66f4\u4e25\u91cd\u4e86\u3002 \u56e0\u4e3a\u5bf9\u6570\u636e\u79d1\u5b66\u5f88\u611f\u5174\u8da3\uff0c\u4f60\u8ba2\u9605\u4e86\u5927\u91cf\u7684\u6570\u636e\u79d1\u5b66\u7c7b\u5fae\u4fe1\u516c\u4f17\u53f7\u3002\u867d\u7136\u4f60\u5f88\u52e4\u594b\uff0c\u4f46\u4f60\u77e5\u9053\u81ea\u5df1\u4f9d\u7136\u9057\u6f0f\u4e86\u5f88\u591a\u6587\u7ae0\u3002 \u5b66\u4e60\u4e86 Python\u722c\u866b\u8bfe \u4ee5\u540e\uff0c\u4f60\u51b3\u5b9a\u5c1d\u8bd5\u4e00\u4e0b\u81ea\u5df1\u7684\u5c60\u9f99\u4e4b\u672f\u3002\u4f9d\u4ed7\u7740\u722c\u866b\u7684\u5a01\u529b\uff0c\u4f60\u6253\u7b97\u91c7\u96c6\u5230\u6240\u6709\u6570\u636e\u79d1\u5b66\u516c\u4f17\u53f7\u6587\u7ae0\u3002 \u4f60\u4ed4\u7ec6\u5206\u6790\u4e86\u5fae\u4fe1\u516c\u4f17\u53f7\u6587\u7ae0\u7684\u68c0\u7d22\u65b9\u5f0f\uff0c\u5236\u5b9a\u4e86\u5173\u952e\u8bcd\u5217\u8868\u3002\u5de7\u5999\u5229\u7528\u641c\u72d7\u641c\u7d22\u5f15\u64ce\u7684\u7279\u6027\uff0c\u4f60\u7f16\u5199\u4e86\u81ea\u5df1\u7684\u722c\u866b\uff0c\u5e76\u4e14\u6210\u529f\u5730\u4e8e\u5348\u591c\u653e\u5230\u4e86\u4e91\u7aef\u8fd0\u884c\u3002 \u5f00\u5fc3\u554a\uff0c\u6fc0\u52a8\u554a\u2026\u2026 \u7b2c\u4e8c\u5929\u4e00\u65e9\uff0c\u5929\u5149\u521a\u4eae\uff0c\u7761\u7720\u4e0d\u8db3\u7684\u4f60\u5c31\u5174\u51b2\u51b2\u5730\u722c\u8d77\u6765\u53bb\u770b\u722c\u53d6\u7ed3\u679c\u3002\u5c45\u7136\u5df2\u7ecf\u6709\u4e861000\u591a\u6761\uff01\u4f60\u6b23\u559c\u82e5\u72c2\uff0c\u5bfc\u51fa\u6210\u4e3acsv\u683c\u5f0f\uff0c\u5b58\u50a8\u5230\u4e86\u672c\u5730\u673a\u5668\uff0c\u5e76\u4e14\u6253\u5f00\u6d4f\u89c8\u3002 \u5174\u594b\u4e8610\u51e0\u5206\u949f\u4e4b\u540e\uff0c\u4f60\u51b7\u5374\u4e86\u4e0b\u6765\uff0c\u7ed9\u81ea\u5df1\u63d0\u51fa\u4e862\u4e2a\u91cd\u8981\u7684\u95ee\u9898\u3002 \u8fd9\u4e9b\u6587\u7ae0\u90fd\u503c\u5f97\u8bfb\u5417\uff1f \u8fd9\u4e9b\u6587\u7ae0\u6211\u8bfb\u5f97\u8fc7\u6765\u5417\uff1f \u4e00\u7bc7\u6570\u636e\u79d1\u5b66\u7c7b\u516c\u4f17\u53f7\uff0c\u4f60\u5e73\u5747\u9700\u89815\u5206\u949f\u9605\u8bfb\u3002\u8fd91000\u591a\u7bc7\u2026\u2026\u4f60\u62ff\u51fa\u8ba1\u7b97\u5668\u8ba4\u771f\u7b97\u4e86\u4e00\u4e0b\u3002 \u8bfb\u5b8c\u8fd9\u4e00\u5bbf\u91c7\u96c6\u5230\u7684\u6587\u7ae0\uff0c\u4f60\u4e0d\u7720\u4e0d\u4f11\u7684\u8bdd\uff0c\u4e5f\u9700\u898185\u4e2a\u5c0f\u65f6\u3002 \u5728\u4f60\u9605\u8bfb\u7684\u8fd985\u4e2a\u5c0f\u65f6\u91cc\u9762\uff0c\u8bb8\u8bb8\u591a\u591a\u7684\u6570\u636e\u79d1\u5b66\u7c7b\u516c\u4f17\u53f7\u65b0\u6587\u7ae0\u8fd8\u4f1a\u6e90\u6e90\u4e0d\u65ad\u6d8c\u73b0\u51fa\u6765\u3002 \u4f60\u611f\u89c9\u81ea\u5df1\u5feb\u88ab\u6587\u672c\u5185\u5bb9\u6df9\u6ca1\u4e86\uff0c\u6839\u672c\u900f\u4e0d\u8fc7\u6c14\u2026\u2026 \u5b66\u4e86\u8fd9\u4e48\u957f\u65f6\u95f4Python\uff0c\u4f60\u5e94\u8be5\u60f3\u5230 \u2014 \u2014 \u6211\u80fd\u5426\u7528\u81ea\u52a8\u5316\u5de5\u5177\u6765\u5206\u6790\u5b83\uff1f \u597d\u6d88\u606f\uff0c\u7b54\u6848\u662f\u53ef\u4ee5\u7684\u3002 \u4f46\u662f\u7528\u4ec0\u4e48\u6837\u7684\u5de5\u5177\u5462\uff1f \u7ffb\u4e86\u7ffb\u4f60\u81ea\u5df1\u7684\u6b66\u5668\u5e93\uff0c\u4f60\u53d1\u73b0\u4e86 \u8bcd\u4e91 \u3001 \u60c5\u611f\u5206\u6790 \u548c \u51b3\u7b56\u6811 \u3002 \u7136\u800c\uff0c\u5728\u5e2e\u4f60\u5e94\u5bf9\u4fe1\u606f\u8fc7\u8f7d\u8fd9\u4ef6\u4e8b\u513f\u4e0a\uff0c\u4e0a\u8ff0\u6b66\u5668\u597d\u50cf\u90fd\u4e0d\u5927\u5408\u9002\u3002 \u8bcd\u4e91\u4f60\u6253\u7b97\u505a\u51e0\u4e2a\uff1f\u5168\u90e8\u6587\u7ae0\u53ea\u505a\u4e00\u4e2a\u7684\u8bdd\uff0c\u5c31\u4f1a\u628a\u6240\u6709\u6587\u7ae0\u7684\u5185\u5bb9\u6df7\u6742\u8d77\u6765\uff0c\u6ca1\u6709\u610f\u4e49 \u2014 \u2014 \u56e0\u4e3a\u4f60\u77e5\u9053\u8fd9\u4e9b\u6587\u7ae0\u8c08\u7684\u5c31\u662f\u6570\u636e\u79d1\u5b66\u554a\uff01\u5982\u679c\u6bcf\u4e00\u7bc7\u6587\u7ae0\u90fd\u5206\u522b\u505a\u8bcd\u4e91\uff0c1000\u591a\u5f20\u56fe\u6d4f\u89c8\u8d77\u6765\uff0c\u597d\u50cf\u4e5f\u6ca1\u6709\u4ec0\u4e48\u76ca\u5904\u3002 \u4f60\u9605\u8bfb\u6570\u636e\u79d1\u5b66\u7c7b\u516c\u4f17\u53f7\u6587\u7ae0\u662f\u4e3a\u4e86\u83b7\u5f97\u77e5\u8bc6\u548c\u6280\u80fd\uff0c\u5206\u6790\u6587\u5b57\u4e2d\u8574\u542b\u7684\u60c5\u611f\u4f3c\u4e4e\u4e8e\u4e8b\u65e0\u8865\u3002 \u51b3\u7b56\u6811\u662f\u53ef\u4ee5\u7528\u6765\u505a\u5206\u7c7b\u7684\uff0c\u6ca1\u9519\u3002\u53ef\u662f\u5b83\u8981\u6c42\u7684\u8f93\u5165\u4fe1\u606f\u662f \u7ed3\u6784\u5316 \u7684 \u6709 \u6807\u8bb0\u6570\u636e\uff0c\u4f60\u624b\u91cc\u63e1\u7740\u7684\u8fd9\u4e00\u5927\u5806\u6587\u672c\uff0c\u5374\u521a\u597d\u662f \u975e\u7ed3\u6784\u5316 \u7684 \u65e0 \u6807\u8bb0\u6570\u636e\u3002 \u5168\u90e8\u6b66\u5668\u90fd\u54d1\u706b\u4e86\u3002 \u6ca1\u5173\u7cfb\u3002\u672c\u6587\u5e2e\u52a9\u4f60\u5728\u6570\u636e\u79d1\u5b66\u6b66\u5668\u5e93\u4e2d\u653e\u4e0a\u4e00\u4ef6\u65b0\u5f0f\u5175\u5668\u3002\u5b83\u80fd\u591f\u5904\u7406\u7684\uff0c\u5c31\u662f\u5927\u6279\u91cf\u7684\u975e\u7ed3\u6784\u65e0\u6807\u8bb0\u6570\u636e\u3002\u5728\u673a\u5668\u5b66\u4e60\u7684\u5206\u7c7b\u91cc\uff0c\u5b83\u5c5e\u4e8e\u975e\u76d1\u7763\u5b66\u4e60(unsupervised machine learning)\u8303\u7574\u3002\u5177\u4f53\u800c\u8a00\uff0c\u6211\u4eec\u9700\u8981\u7528\u5230\u7684\u65b9\u6cd5\u53eb\u4e3b\u9898\u5efa\u6a21(topic model)\u6216\u8005\u4e3b\u9898\u62bd\u53d6(topic extraction)\u3002 \u4e3b\u9898 \u00b6 \u65e2\u7136\u8981\u5efa\u6a21\uff0c\u6211\u4eec\u5c31\u9700\u8981\u5f04\u660e\u767d\u5efa\u7acb\u4ec0\u4e48\u6837\u7684\u6a21\u578b\u3002 \u6839\u636e\u7ef4\u57fa\u767e\u79d1\u7684\u5b9a\u4e49\uff0c\u4e3b\u9898\u6a21\u578b\u662f\u6307\uff1a \u5728\u673a\u5668\u5b66\u4e60\u548c\u81ea\u7136\u8bed\u8a00\u5904\u7406\u7b49\u9886\u57df\u662f\u7528\u6765\u5728\u4e00\u7cfb\u5217\u6587\u6863\u4e2d\u53d1\u73b0\u62bd\u8c61\u4e3b\u9898\u7684\u4e00\u79cd\u7edf\u8ba1\u6a21\u578b\u3002 \u8fd9\u4e2a\u5b9a\u4e49\u672c\u8eab\u597d\u50cf\u5c31\u6709\u70b9\u513f\u62bd\u8c61\uff0c\u54b1\u4eec\u4e3e\u4e2a\u4f8b\u5b50\u5427\u3002 \u8fd8\u662f\u7ef4\u57fa\u767e\u79d1\u4e0a\uff0c\u5bf9\u4e00\u6761\u53ef\u7231\u7684\u5c0f\u72d7\u6709\u8fd9\u6837\u4e00\u6bb5\u53d9\u8ff0\u3002 \u963f\u535a\uff08Bo\uff1b2008\u5e7410\u67089\u65e5\uff0d\uff09 \u662f\u7f8e\u56fd\u7b2c44\u4efb\u603b\u7edf\u5df4\u62c9\u514b\u00b7\u5965\u5df4\u9a6c\u7684\u5ba0\u7269\u72d7\uff0c\u4e5f\u662f\u5965\u5df4\u9a6c\u5bb6\u65cf\u7684\u6210\u5458\u4e4b\u4e00\u3002\u963f\u535a\u662f\u4e00\u53ea\u5df2\u9609\u5272\u7684\u96c4\u6027\u9ed1\u8272\u957f\u6bdb\u8461\u8404\u7259\u6c34\u72ac\u3002\u5965\u5df4\u9a6c\u4e00\u5bb6\u672c\u6765\u6ca1\u6709\u517b\u72d7\uff0c\u56e0\u4e3a\u4ed6\u7684\u5927\u5973\u513f\u739b\u4e3d\u4e9a\u5bf9\u72d7\u8fc7\u654f\u3002\u4f46\u4e3a\u4e86\u5ef6\u7eed\u767d\u5bab\u4e3b\u4eba\u5386\u5e74\u5747\u6709\u517b\u72d7\u7684\u4f20\u7edf\uff0c\u7b2c\u4e00\u5bb6\u5ead\u5728\u5165\u4e3b\u767d\u5bab\u540e\uff0c\u82b1\u4e86\u591a\u4e2a\u6708\u53bb\u89c2\u5bdf\u5404\u79cd\u72ac\u79cd\uff0c\u5e76\u7279\u5730\u9009\u62e9\u4e86\u8461\u8404\u7259\u6c34\u72ac\u8fd9\u4e00\u79cd\u6389\u6bdb\u5c11\u7684\u4f4e\u654f\u72d7\u3002 \u6211\u4eec\u6765\u770b\u770b\u8fd9\u6761\u53ef\u7231\u7684\u5c0f\u72d7\u7167\u7247\uff1a \u95ee\u9898\u6765\u4e86\uff0c\u8fd9\u7bc7\u6587\u7ae0\u7684\u4e3b\u9898(topic)\u662f\u4ec0\u4e48\uff1f \u4f60\u53ef\u80fd\u8131\u53e3\u800c\u51fa\uff0c\u201c\u72d7\u554a\uff01\u201d \u4e14\u6162\uff0c\u6362\u4e2a\u95ee\u6cd5\u3002\u5047\u8bbe\u4e00\u4e2a\u7528\u6237\u8bfb\u4e86\u8fd9\u7bc7\u6587\u7ae0\uff0c\u5f88\u611f\u5174\u8da3\u3002\u4f60\u60f3\u63a8\u8350\u66f4\u591a\u4ed6\u53ef\u80fd\u611f\u5174\u8da3\u7684\u6587\u7ae0\u7ed9\u4ed6\uff0c\u4ee5\u4e0b2\u6bb5\u6587\u5b57\uff0c\u54ea\u4e2a\u9009\u9879\u66f4\u5408\u9002\u5462\uff1f \u9009\u98791\uff1a \u963f\u5bcc\u6c57\u730e\u72d7\uff08Afghan Hound\uff09\u662f\u4e00\u79cd\u730e\u72ac\uff0c\u4e5f\u662f\u6700\u53e4\u8001\u7684\u72d7\u54c1\u79cd\u3002\u963f\u5bcc\u6c57\u730e\u72d7\u5916\u8868\u539a\u5b9e\uff0c\u7ec6\u817b\uff0c\u67d4\u6ed1\uff0c\u5b83\u7684\u5c3e\u5df4\u5728\u6700\u540e\u4e00\u73af\u5377\u66f2\u3002\u963f\u5bcc\u6c57\u730e\u72d7\u751f\u5b58\u4e8e\u4f0a\u6717\uff0c\u963f\u5bcc\u6c57\u4e1c\u90e8\u7684\u5bd2\u51b7\u5c71\u4e0a\uff0c\u963f\u5bcc\u6c57\u730e\u72d7\u6700\u521d\u662f\u7528\u6765\u72e9\u730e\u91ce\u5154\u548c\u77aa\u7f9a\u3002\u963f\u5bcc\u6c57\u730e\u72d7\u5176\u4ed6\u540d\u79f0\u5305\u542b\u5df4\u5c14\u8d6b\u5854\u5b50\u5e93\u5947\u730e\u72ac\uff0c\u730e\u72ac\uff0c\u4ffe\u8def\u652f\u730e\u72ac\uff0c\u5580\u5e03\u5c14\u730e\u72ac\uff0c\u6216\u975e\u6d32\u730e\u72ac\u3002 \u9009\u98792\uff1a 1989\u5e74\u590f\u5929\uff0c\u5965\u5df4\u9a6c\u5728\u897f\u5fb7\u5229\u00b7\u5965\u65af\u6c40\u5f8b\u5e08\u4e8b\u52a1\u6240\u62c5\u4efb\u6691\u671f\u5de5\u8bfb\u751f\u671f\u95f4\uff0c\u7ed3\u8bc6\u5f53\u65f6\u5df2\u662f\u5f8b\u5e08\u7684\u7c73\u6b47\u5c14\u00b7\u9c81\u6ee8\u900a\u3002\u4e24\u4eba\u4e8e1992\u5e74\u7ed3\u5a5a\uff0c\u73b0\u6709\u4e24\u4e2a\u5973\u513f \u2014 \u2014 \u5927\u5973\u513f\u739b\u4e3d\u4e9a\u57281999\u5e74\u4e8e\u829d\u52a0\u54e5\u829d\u52a0\u54e5\u5927\u5b66\u533b\u7597\u4e2d\u5fc3\u51fa\u751f\uff0c\u800c\u5c0f\u5973\u513f\u8428\u6c99\u57282001\u5e74\u4e8e\u829d\u52a0\u54e5\u5927\u5b66\u533b\u7597\u4e2d\u5fc3\u51fa\u751f\u3002 \u7ed9\u4f6030\u79d2\uff0c\u601d\u8003\u4e00\u4e0b\u3002 \u4f60\u7684\u7b54\u6848\u662f\u4ec0\u4e48\uff1f \u6211\u7684\u7b54\u6848\u662f \u2014 \u2014 \u4e0d\u786e\u5b9a\u3002 \u4eba\u7c7b\u5929\u751f\u559c\u6b22\u628a\u590d\u6742\u95ee\u9898\u7b80\u5355\u5316\u3002\u6211\u4eec\u6068\u4e0d\u5f97\u628a\u6240\u6709\u4e1c\u897f\u5212\u5206\u6210\u5177\u4f53\u7684\u3001\u4e92\u4e0d\u5e72\u6270\u7684\u5206\u7c7b\uff0c\u5c31\u5982\u540c\u836f\u94fa\u7684\u4e00\u4e2a\u4e2a\u62bd\u5c49\u4e00\u6837\u3002\u7136\u540e\u9700\u8981\u7684\u65f6\u5019\uff0c\u4ece\u5bf9\u5e94\u7684\u62bd\u5c49\u91cc\u9762\u53d6\u4e1c\u897f\u5c31\u53ef\u4ee5\u4e86\u3002 \u8fd9\u5c31\u50cf\u662f\u804c\u4e1a\u3002\u4ece\u524d\u6211\u4eec\u8bf4\u201c\u4e09\u767e\u516d\u5341\u884c\u201d\u3002\u968f\u4fbf\u62ff\u51fa\u67d0\u4e2a\u4eba\u6765\uff0c\u6211\u4eec\u5c31\u628a\u4ed6\u5f52\u5165\u5176\u4e2d\u67d0\u4e00\u884c\u3002 \u73b0\u5728\u4e0d\u884c\u4e86\uff0c\u53cd\u4f8b\u5c31\u662f\u6240\u8c13\u7684\u201c \u659c\u6760\u9752\u5e74 \u201d\u3002 \u4e3b\u9898\u8fd9\u4e2a\u4e8b\u60c5\uff0c\u4e5f\u540c\u6837\u4e0d\u90a3\u4e48\u6cfe\u6e2d\u5206\u660e\u3002\u4ecb\u7ecd\u5c0f\u72d7Bo\u7684\u6587\u7ae0\u867d\u7136\u4e0d\u957f\uff0c\u4f46\u662f\u4efb\u4f55\u5355\u4e00\u4e3b\u9898\u90fd\u65e0\u6cd5\u5b8c\u5168\u6db5\u76d6\u5b83\u3002 \u5982\u679c\u7528\u6237\u662f\u56e0\u4e3a\u5bf9\u5c0f\u72d7\u7684\u559c\u7231\uff0c\u9605\u8bfb\u4e86\u8fd9\u7bc7\u6587\u7ae0\uff0c\u90a3\u4e48\u663e\u7136\u4f60\u7ed9\u4ed6\u63a8\u8350\u9009\u98791\u4f1a\u66f4\u7406\u60f3\uff1b\u4f46\u662f\u5982\u679c\u7528\u6237\u5173\u6ce8\u7684\u662f\u5965\u5df4\u9a6c\u7684\u5bb6\u5ead\uff0c\u90a3\u4e48\u6bd4\u8d77\u9009\u98792\u6765\uff0c\u9009\u98791\u5c31\u663e\u5f97\u4e0d\u662f\u90a3\u4e48\u5408\u9002\u4e86\u3002 \u6211\u4eec\u5fc5\u987b\u653e\u5f03\u7528\u4e00\u4e2a\u8bcd\u6765\u63cf\u8ff0\u4e3b\u9898\u7684\u5c1d\u8bd5\uff0c\u8f6c\u800c\u7528\u4e00\u7cfb\u5217\u5173\u952e\u8bcd\u6765\u523b\u753b\u67d0\u4e2a\u4e3b\u9898\uff08\u4f8b\u5982\u201c\u5965\u5df4\u9a6c\u201d+\u201c\u5ba0\u7269\u201c+\u201d\u72d7\u201c+\u201d\u7b2c\u4e00\u5bb6\u5ead\u201c\uff09\u3002 \u5728\u8fd9\u79cd\u6a21\u5f0f\u4e0b\uff0c\u4ee5\u4e0b\u7684\u9009\u98793\u53ef\u80fd\u4f1a\u8131\u9896\u800c\u51fa\uff1a \u636e\u82f1\u56fd\u300a\u6bcf\u65e5\u90ae\u62a5\u300b\u62a5\u9053\uff0c\u7f8e\u56fd\u4e00\u540d\u7537\u5b50\u8fd1\u65e5\u8bd5\u56fe\u7ed1\u67b6\u603b\u7edf\u5965\u5df4\u9a6c\u592b\u5987\u7684\u5ba0\u7269\u72d7\u535a\uff08Bo\uff09\uff0c\u4e0d\u60dc\u7531\u4e8c\u5343\u591a\u516c\u91cc\u8fdc\u7684\u5317\u8fbe\u79d1\u4ed6\u5dde\u9a71\u8f66\u5f80\u534e\u76db\u987f\uff0c\u4f46\u56e0\u4e3a\u8d70\u6f0f\u98ce\u58f0\uff0c\u88ab\u7279\u52e4\u5c40\u4eba\u5458\u902e\u6355\u3002\u5965\u5df4\u9a6c\u592b\u5987\u76ee\u524d\u517b\u6709\u535a\u548c\u9633\u5149\uff08Sunny\uff09\u4e24\u53ea\u8461\u8404\u7259\u6c34\u72ac\u3002 \u8bb2\u5230\u8fd9\u91cc\uff0c\u4f60\u5927\u6982\u5f04\u660e\u767d\u4e86\u4e3b\u9898\u62bd\u53d6\u7684\u76ee\u6807\u4e86\u3002\u53ef\u662f\u9762\u5bf9\u6d69\u5982\u70df\u6d77\u7684\u6587\u7ae0\uff0c\u6211\u4eec\u600e\u4e48\u80fd\u591f\u628a\u76f8\u4f3c\u7684\u6587\u7ae0\u805a\u5408\u8d77\u6765\uff0c\u5e76\u4e14\u63d0\u53d6\u63cf\u8ff0\u805a\u5408\u540e\u4e3b\u9898\u7684\u91cd\u8981\u5173\u952e\u8bcd\u5462\uff1f \u4e3b\u9898\u62bd\u53d6\u6709\u82e5\u5e72\u65b9\u6cd5\u3002\u76ee\u524d\u6700\u4e3a\u6d41\u884c\u7684\u53eb\u505a\u9690\u542b\u72c4\u5229\u514b\u96f7\u5206\u5e03(Latent Dirichlet allocation)\uff0c\u7b80\u79f0LDA\u3002 LDA\u76f8\u5173\u539f\u7406\u90e8\u5206\uff0c\u7f6e\u4e8e\u672c\u6587\u6700\u540e\u3002\u4e0b\u9762\u6211\u4eec\u5148\u7528Python\u6765\u5c1d\u8bd5\u5b9e\u8df5\u4e00\u6b21\u4e3b\u9898\u62bd\u53d6\u3002\u5982\u679c\u4f60\u5bf9\u539f\u7406\u611f\u5174\u8da3\uff0c\u4e0d\u59a8\u518d\u505a\u5ef6\u4f38\u9605\u8bfb\u3002 \u51c6\u5907 \u00b6 \u51c6\u5907\u5de5\u4f5c\u7684\u7b2c\u4e00\u6b65\uff0c\u8fd8\u662f\u5148\u5b89\u88c5Anaconda\u5957\u88c5\u3002\u8be6\u7ec6\u7684\u6d41\u7a0b\u6b65\u9aa4\u8bf7\u53c2\u8003\u300a \u5982\u4f55\u7528Python\u505a\u8bcd\u4e91 \u300b\u4e00\u6587\u3002 \u4ece\u5fae\u4fe1\u516c\u4f17\u5e73\u53f0\u722c\u6765\u7684datascience.csv\u6587\u4ef6\uff0c\u8bf7\u4ece \u8fd9\u91cc \u4e0b\u8f7d\u3002\u4f60\u53ef\u4ee5\u7528Excel\u6253\u5f00\uff0c\u770b\u770b\u4e0b\u8f7d\u662f\u5426\u5b8c\u6574\u548c\u6b63\u786e\u3002 \u5982\u679c\u4e00\u5207\u6b63\u5e38\uff0c\u8bf7\u5c06\u8be5csv\u6587\u4ef6\u79fb\u52a8\u5230\u54b1\u4eec\u7684\u5de5\u4f5c\u76ee\u5f55demo\u4e0b\u3002 \u5230\u4f60\u7684\u7cfb\u7edf\u201c\u7ec8\u7aef\u201d(macOS, Linux)\u6216\u8005\u201c\u547d\u4ee4\u63d0\u793a\u7b26\u201d(Windows)\u4e0b\uff0c\u8fdb\u5165\u6211\u4eec\u7684\u5de5\u4f5c\u76ee\u5f55demo\uff0c\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u3002 1 2 pip install jieba pip install pyldavis \u8fd0\u884c\u73af\u5883\u914d\u7f6e\u5b8c\u6bd5\u3002 \u5728\u7ec8\u7aef\u6216\u8005\u547d\u4ee4\u63d0\u793a\u7b26\u4e0b\u952e\u5165\uff1a 1 jupyter notebook Jupyter Notebook\u5df2\u7ecf\u6b63\u786e\u8fd0\u884c\u3002\u4e0b\u9762\u6211\u4eec\u5c31\u53ef\u4ee5\u6b63\u5f0f\u7f16\u5199\u4ee3\u7801\u4e86\u3002 \u4ee3\u7801 \u00b6 \u6211\u4eec\u5728Jupyter Notebook\u4e2d\u65b0\u5efa\u4e00\u4e2aPython 2\u7b14\u8bb0\u672c\uff0c\u8d77\u540d\u4e3atopic-model\u3002 \u4e3a\u4e86\u5904\u7406\u8868\u683c\u6570\u636e\uff0c\u6211\u4eec\u4f9d\u7136\u4f7f\u7528\u6570\u636e\u6846\u5de5\u5177Pandas\u3002\u5148\u8c03\u7528\u5b83\u3002 1 import pandas as pd \u7136\u540e\u8bfb\u5165\u6211\u4eec\u7684\u6570\u636e\u6587\u4ef6datascience.csv\uff0c\u6ce8\u610f\u5b83\u7684\u7f16\u7801\u662f\u4e2d\u6587GB18030\uff0c\u4e0d\u662fPandas\u9ed8\u8ba4\u8bbe\u7f6e\u7684\u7f16\u7801\uff0c\u6240\u4ee5\u6b64\u5904\u9700\u8981\u663e\u5f0f\u6307\u5b9a\u7f16\u7801\u7c7b\u578b\uff0c\u4ee5\u514d\u51fa\u73b0\u4e71\u7801\u9519\u8bef\u3002 1 df = pd.read_csv(\"datascience.csv\", encoding='gb18030') \u6211\u4eec\u6765\u770b\u770b\u6570\u636e\u6846\u7684\u5934\u51e0\u884c\uff0c\u4ee5\u786e\u8ba4\u8bfb\u53d6\u662f\u5426\u6b63\u786e\u3002 1 df.head() \u663e\u793a\u7ed3\u679c\u5982\u4e0b\uff1a \u6ca1\u95ee\u9898\uff0c\u5934\u51e0\u884c\u5185\u5bb9\u6240\u6709\u5217\u90fd\u6b63\u786e\u8bfb\u5165\uff0c\u6587\u5b57\u663e\u5f0f\u6b63\u5e38\u3002\u6211\u4eec\u770b\u770b\u6570\u636e\u6846\u7684\u957f\u5ea6\uff0c\u4ee5\u786e\u8ba4\u6570\u636e\u662f\u5426\u8bfb\u53d6\u5b8c\u6574\u3002 1 df.shape \u6267\u884c\u7684\u7ed3\u679c\u4e3a\uff1a 1 (1024, 3) \u884c\u5217\u6570\u90fd\u4e0e\u6211\u4eec\u722c\u53d6\u5230\u7684\u6570\u91cf\u4e00\u81f4\uff0c\u901a\u8fc7\u3002 \u4e0b\u9762\u6211\u4eec\u9700\u8981\u505a\u4e00\u4ef6\u91cd\u8981\u5de5\u4f5c \u2014 \u2014 \u5206\u8bcd\u3002\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u63d0\u53d6\u6bcf\u7bc7\u6587\u7ae0\u7684\u5173\u952e\u8bcd\u3002\u800c\u4e2d\u6587\u672c\u8eab\u5e76\u4e0d\u4f7f\u7528\u7a7a\u683c\u5728\u5355\u8bcd\u95f4\u5212\u5206\u3002\u6b64\u5904\u6211\u4eec\u91c7\u7528\u201c\u7ed3\u5df4\u5206\u8bcd\u201d\u5de5\u5177\u3002\u8fd9\u4e00\u5de5\u5177\u7684\u5177\u4f53\u4ecb\u7ecd\u548c\u5176\u4ed6\u7528\u9014\u8bf7\u53c2\u89c1\u300a \u5982\u4f55\u7528Python\u505a\u4e2d\u6587\u5206\u8bcd\uff1f \u300b\u4e00\u6587\u3002 \u6211\u4eec\u9996\u5148\u8c03\u7528jieba\u5206\u8bcd\u5305\u3002 1 import jieba \u6211\u4eec\u6b64\u6b21\u9700\u8981\u5904\u7406\u7684\uff0c\u4e0d\u662f\u5355\u4e00\u6587\u672c\u6570\u636e\uff0c\u800c\u662f1000\u591a\u6761\u6587\u672c\u6570\u636e\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u628a\u8fd9\u9879\u5de5\u4f5c\u5e76\u884c\u5316\u3002\u8fd9\u5c31\u9700\u8981\u9996\u5148\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u5904\u7406\u5355\u4e00\u6587\u672c\u7684\u5206\u8bcd\u3002 1 2 def chinese_word_cut(mytext): return \" \".join(jieba.cut(mytext)) \u6709\u4e86\u8fd9\u4e2a\u51fd\u6570\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4e0d\u65ad\u8c03\u7528\u5b83\u6765\u6279\u91cf\u5904\u7406\u6570\u636e\u6846\u91cc\u9762\u7684\u5168\u90e8\u6587\u672c\uff08\u6b63\u6587\uff09\u4fe1\u606f\u4e86\u3002\u4f60\u5f53\u7136\u53ef\u4ee5\u81ea\u5df1\u5199\u4e2a\u5faa\u73af\u6765\u505a\u8fd9\u9879\u5de5\u4f5c\u3002\u4f46\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u66f4\u4e3a\u9ad8\u6548\u7684apply\u51fd\u6570\u3002\u5982\u679c\u4f60\u5bf9\u8fd9\u4e2a\u51fd\u6570\u6709\u5174\u8da3\uff0c\u53ef\u4ee5\u70b9\u51fb \u8fd9\u6bb5\u6559\u5b66\u89c6\u9891 \u67e5\u770b\u5177\u4f53\u7684\u4ecb\u7ecd\u3002 \u4e0b\u9762\u8fd9\u4e00\u6bb5\u4ee3\u7801\u6267\u884c\u8d77\u6765\uff0c\u53ef\u80fd\u9700\u8981\u4e00\u5c0f\u6bb5\u65f6\u95f4\u3002\u8bf7\u8010\u5fc3\u7b49\u5019\u3002 1 df[\"content_cutted\"] = df.content.apply(chinese_word_cut) \u6267\u884c\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u4f1a\u51fa\u73b0\u5982\u4e0b\u63d0\u793a\u3002\u6ca1\u5173\u7cfb\uff0c\u5ffd\u7565\u5c31\u597d\u3002 1 2 3 4 Building prefix dict from the default dictionary ... Loading model from cache /var/folders/8s/k8yr4zy52q1dh107gjx280mw0000gn/T/jieba.cache Loading model cost 0.406 seconds. Prefix dict has been built succesfully. \u6267\u884c\u5b8c\u6bd5\u4e4b\u540e\uff0c\u6211\u4eec\u9700\u8981\u67e5\u770b\u4e00\u4e0b\uff0c\u6587\u672c\u662f\u5426\u5df2\u7ecf\u88ab\u6b63\u786e\u5206\u8bcd\u3002 1 df.content_cutted.head() \u7ed3\u679c\u5982\u4e0b\uff1a 1 2 3 4 5 6 0 \u5927 \u6570\u636e \u4ea7\u4e1a \u53d1\u5c55 \u53d7\u5230 \u56fd\u5bb6 \u91cd\u89c6 \uff0c \u800c \u5927 \u6570\u636e \u5df2\u7ecf \u4e0a\u5347 \u4e3a \u56fd\u5bb6 \u6218\u7565 \uff0c \u672a... 1 \u70b9\u51fb \u4e0a\u65b9 \u201c \u7845\u8c37 \u5468\u8fb9 \u201d \u5173\u6ce8 \u6211 \uff0c \u6536\u5230 \u6700\u65b0 \u7684 \u6587\u7ae0 \u54e6 \uff01 \u6628\u5929 \uff0c Goo... 2 \u56fd\u52a1\u9662 \u603b\u7406 \u674e\u514b\u5f3a \u5f53\u5730 \u65f6\u95f4 20 \u65e5 \u4e0a\u5348 \u5728 \u7ebd\u7ea6 \u4e0b\u69bb \u996d\u5e97 \u540c \u7f8e\u56fd \u7ecf\u6d4e \u3001 ... 3 2016 \u5e74 \uff0c \u5168\u5cf0 \u96c6\u56e2 \u6301\u7eed \u6316\u6398 \u5927 \u6570\u636e \u3001 \u4e91 \u8ba1\u7b97 \u3001 \u201c \u4e92\u8054\u7f51 + \u201d \u7b49... 4 \u8d35\u5dde \u7406\u5de5\u5b66\u9662 \u53ec\u5f00 \u5927 \u6570\u636e\u5206\u6790 \u4e0e \u5e94\u7528 \u4e13\u9898 \u5206\u4eab \u4f1a \u501f \u201c \u521b\u54cd \u4e2d\u56fd \u201d \u8d35... Name: content_cutted, dtype: object \u5355\u8bcd\u4e4b\u95f4\u90fd\u5df2\u7ecf\u88ab\u7a7a\u683c\u533a\u5206\u5f00\u4e86\u3002\u4e0b\u9762\u6211\u4eec\u9700\u8981\u505a\u4e00\u9879\u91cd\u8981\u5de5\u4f5c\uff0c\u53eb\u505a\u6587\u672c\u7684\u5411\u91cf\u5316\u3002 \u4e0d\u8981\u88ab\u8fd9\u4e2a\u540d\u79f0\u5413\u8dd1\u3002\u5b83\u7684\u610f\u601d\u5176\u5b9e\u5f88\u7b80\u5355\u3002\u56e0\u4e3a\u8ba1\u7b97\u673a\u4e0d\u4f46\u4e0d\u8ba4\u8bc6\u4e2d\u6587\uff0c\u751a\u81f3\u8fde\u82f1\u6587\u4e5f\u4e0d\u8ba4\u8bc6\uff0c\u5b83\u53ea\u8ba4\u5f97\u6570\u5b57\u3002\u6211\u4eec\u9700\u8981\u505a\u7684\uff0c\u662f\u628a\u6587\u7ae0\u4e2d\u7684\u5173\u952e\u8bcd\u8f6c\u6362\u4e3a\u4e00\u4e2a\u4e2a\u7279\u5f81\uff08\u5217\uff09\uff0c\u7136\u540e\u5bf9\u6bcf\u4e00\u7bc7\u6587\u7ae0\u6570\u5173\u952e\u8bcd\u51fa\u73b0\u4e2a\u6570\u3002 \u5047\u5982\u8fd9\u91cc\u6709\u4e24\u53e5\u8bdd\uff1a I love the game. I hate the game. \u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u62bd\u53d6\u51fa\u4ee5\u4e0b\u7279\u5f81\uff1a I love hate the game \u7136\u540e\u4e0a\u9762\u4e24\u53e5\u8bdd\u5c31\u8f6c\u6362\u4e3a\u4ee5\u4e0b\u8868\u683c\uff1a \u7b2c\u4e00\u53e5\u8868\u793a\u4e3a[1, 1, 0, 1, 1]\uff0c\u7b2c\u4e8c\u53e5\u662f[1, 0, 1, 1, 1]\u3002\u8fd9\u5c31\u53eb\u5411\u91cf\u5316\u4e86\u3002\u673a\u5668\u5c31\u80fd\u770b\u61c2\u5b83\u4eec\u4e86\u3002 \u539f\u7406\u5f04\u6e05\u695a\u4e86\uff0c\u8ba9\u6211\u4eec\u5f15\u5165\u76f8\u5173\u8f6f\u4ef6\u5305\u5427\u3002 1 from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer \u5904\u7406\u7684\u6587\u672c\u90fd\u662f\u5fae\u4fe1\u516c\u4f17\u53f7\u6587\u7ae0\uff0c\u91cc\u9762\u53ef\u80fd\u4f1a\u6709\u5927\u91cf\u7684\u8bcd\u6c47\u3002\u6211\u4eec\u4e0d\u5e0c\u671b\u5904\u7406\u6240\u6709\u8bcd\u6c47\u3002\u56e0\u4e3a\u4e00\u6765\u5904\u7406\u65f6\u95f4\u592a\u957f\uff0c\u4e8c\u6765\u90a3\u4e9b\u5f88\u4e0d\u5e38\u7528\u7684\u8bcd\u6c47\u5bf9\u6211\u4eec\u7684\u4e3b\u9898\u62bd\u53d6\u610f\u4e49\u4e0d\u5927\u3002\u6240\u4ee5\u8fd9\u91cc\u505a\u4e86\u4e2a\u9650\u5b9a\uff0c\u53ea\u4ece\u6587\u672c\u4e2d\u63d0\u53d61000\u4e2a\u6700\u91cd\u8981\u7684\u7279\u5f81\u5173\u952e\u8bcd\uff0c\u7136\u540e\u505c\u6b62\u3002 1 n_features = 1000 \u4e0b\u9762\u6211\u4eec\u5f00\u59cb\u5173\u952e\u8bcd\u63d0\u53d6\u548c\u5411\u91cf\u8f6c\u6362\u8fc7\u7a0b\uff1a 1 2 3 4 5 6 tf_vectorizer = CountVectorizer(strip_accents = 'unicode', max_features=n_features, stop_words='english', max_df = 0.5, min_df = 10) tf = tf_vectorizer.fit_transform(df.content_cutted) \u5230\u8fd9\u91cc\uff0c\u4f3c\u4e4e\u4ec0\u4e48\u90fd\u6ca1\u6709\u53d1\u751f\u3002\u56e0\u4e3a\u6211\u4eec\u6ca1\u6709\u8981\u6c42\u7a0b\u5e8f\u505a\u4efb\u4f55\u8f93\u51fa\u3002\u4e0b\u9762\u6211\u4eec\u5c31\u8981\u653e\u51faLDA\u8fd9\u4e2a\u5927\u62db\u4e86\u3002 \u5148\u5f15\u5165\u8f6f\u4ef6\u5305\uff1a 1 from sklearn.decomposition import LatentDirichletAllocation \u7136\u540e\u6211\u4eec\u9700\u8981\u4eba\u4e3a\u8bbe\u5b9a\u4e3b\u9898\u7684\u6570\u91cf\u3002\u8fd9\u4e2a\u8981\u6c42\u8ba9\u5f88\u591a\u4eba\u5927\u8dcc\u773c\u955c \u2014 \u2014 \u6211\u600e\u4e48\u77e5\u9053\u8fd9\u4e00\u5806\u6587\u7ae0\u91cc\u9762\u591a\u5c11\u4e3b\u9898\uff1f\uff01 \u522b\u7740\u6025\u3002\u5e94\u7528LDA\u65b9\u6cd5\uff0c\u6307\u5b9a\uff08\u6216\u8005\u53eb\u778e\u731c\uff09\u4e3b\u9898\u4e2a\u6570\u662f\u5fc5\u987b\u7684\u3002\u5982\u679c\u4f60\u53ea\u9700\u8981\u628a\u6587\u7ae0\u7c97\u7565\u5212\u5206\u6210\u51e0\u4e2a\u5927\u7c7b\uff0c\u5c31\u53ef\u4ee5\u628a\u6570\u5b57\u8bbe\u5b9a\u5c0f\u4e00\u4e9b\uff1b\u76f8\u53cd\uff0c\u5982\u679c\u4f60\u5e0c\u671b\u80fd\u591f\u8bc6\u522b\u51fa\u975e\u5e38\u7ec6\u5206\u7684\u4e3b\u9898\uff0c\u5c31\u589e\u5927\u4e3b\u9898\u4e2a\u6570\u3002 \u5bf9\u5212\u5206\u7684\u7ed3\u679c\uff0c\u5982\u679c\u4f60\u89c9\u5f97\u4e0d\u591f\u6ee1\u610f\uff0c\u53ef\u4ee5\u901a\u8fc7\u7ee7\u7eed\u8fed\u4ee3\uff0c\u8c03\u6574\u4e3b\u9898\u6570\u91cf\u6765\u4f18\u5316\u3002 \u8fd9\u91cc\u6211\u4eec\u5148\u8bbe\u5b9a\u4e3a5\u4e2a\u5206\u7c7b\u8bd5\u8bd5\u3002 1 2 3 4 5 n_topics = 5 lda = LatentDirichletAllocation(n_topics=n_topics, max_iter=50, learning_method='online', learning_offset=50., random_state=0) \u628a\u6211\u4eec\u76841000\u591a\u7bc7\u5411\u91cf\u5316\u540e\u7684\u6587\u7ae0\u6254\u7ed9LDA\uff0c\u8ba9\u5b83\u6b22\u5feb\u5730\u627e\u4e3b\u9898\u5427\u3002 \u8fd9\u4e00\u90e8\u5206\u5de5\u4f5c\u91cf\u8f83\u5927\uff0c\u7a0b\u5e8f\u4f1a\u6267\u884c\u4e00\u6bb5\u65f6\u95f4\uff0cJupyter Notebook\u5728\u6267\u884c\u4e2d\u53ef\u80fd\u6682\u65f6\u6ca1\u6709\u54cd\u5e94\u3002\u7b49\u5f85\u4e00\u4f1a\u513f\u5c31\u597d\uff0c\u4e0d\u8981\u7740\u6025\u3002 1 lda.fit(tf) \u7a0b\u5e8f\u7ec8\u4e8e\u8dd1\u5b8c\u4e86\u7684\u65f6\u5019\uff0c\u4f60\u4f1a\u770b\u5230\u5982\u4e0b\u7684\u63d0\u793a\u4fe1\u606f\uff1a 1 2 3 4 5 6 LatentDirichletAllocation(batch_size=128, doc_topic_prior=None, evaluate_every=-1, learning_decay=0.7, learning_method='online', learning_offset=50.0, max_doc_update_iter=100, max_iter=50, mean_change_tol=0.001, n_jobs=1, n_topics=5, perp_tol=0.1, random_state=0, topic_word_prior=None, total_samples=1000000.0, verbose=0) \u53ef\u662f\uff0c\u8fd9\u8fd8\u662f\u4ec0\u4e48\u8f93\u51fa\u90fd\u6ca1\u6709\u554a\u3002\u5b83\u7a76\u7adf\u627e\u4e86\u4ec0\u4e48\u6837\u7684\u4e3b\u9898\uff1f \u4e3b\u9898\u6ca1\u6709\u4e00\u4e2a\u786e\u5b9a\u7684\u540d\u79f0\uff0c\u800c\u662f\u7528\u4e00\u7cfb\u5217\u5173\u952e\u8bcd\u523b\u753b\u7684\u3002\u6211\u4eec\u5b9a\u4e49\u4ee5\u4e0b\u7684\u51fd\u6570\uff0c\u628a\u6bcf\u4e2a\u4e3b\u9898\u91cc\u9762\u7684\u524d\u82e5\u5e72\u4e2a\u5173\u952e\u8bcd\u663e\u793a\u51fa\u6765\uff1a 1 2 3 4 5 6 def print_top_words(model, feature_names, n_top_words): for topic_idx, topic in enumerate(model.components_): print(\"Topic #%d:\" % topic_idx) print(\" \".join([feature_names[i] for i in topic.argsort()[:-n_top_words - 1:-1]])) print() \u5b9a\u4e49\u597d\u51fd\u6570\u4e4b\u540e\uff0c\u6211\u4eec\u6682\u5b9a\u6bcf\u4e2a\u4e3b\u9898\u8f93\u51fa\u524d20\u4e2a\u5173\u952e\u8bcd\u3002 1 n_top_words = 20 \u4ee5\u4e0b\u547d\u4ee4\u4f1a\u5e2e\u52a9\u6211\u4eec\u4f9d\u6b21\u8f93\u51fa\u6bcf\u4e2a\u4e3b\u9898\u7684\u5173\u952e\u8bcd\u8868\uff1a 1 2 tf_feature_names = tf_vectorizer.get_feature_names() print_top_words(lda, tf_feature_names, n_top_words) \u6267\u884c\u6548\u679c\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 Topic #0: \u5b66\u4e60 \u6a21\u578b \u4f7f\u7528 \u7b97\u6cd5 \u65b9\u6cd5 \u673a\u5668 \u53ef\u89c6\u5316 \u795e\u7ecf\u7f51\u7edc \u7279\u5f81 \u5904\u7406 \u8ba1\u7b97 \u7cfb\u7edf \u4e0d\u540c \u6570\u636e\u5e93 \u8bad\u7ec3 \u5206\u7c7b \u57fa\u4e8e \u5de5\u5177 \u4e00\u79cd \u6df1\u5ea6 Topic #1: \u8fd9\u4e2a \u5c31\u662f \u53ef\u80fd \u5982\u679c \u4ed6\u4eec \u6ca1\u6709 \u81ea\u5df1 \u5f88\u591a \u4ec0\u4e48 \u4e0d\u662f \u4f46\u662f \u8fd9\u6837 \u56e0\u4e3a \u4e00\u4e9b \u65f6\u5019 \u73b0\u5728 \u7528\u6237 \u6240\u4ee5 \u975e\u5e38 \u5df2\u7ecf Topic #2: \u4f01\u4e1a \u5e73\u53f0 \u670d\u52a1 \u7ba1\u7406 \u4e92\u8054\u7f51 \u516c\u53f8 \u884c\u4e1a \u6570\u636e\u5206\u6790 \u4e1a\u52a1 \u7528\u6237 \u4ea7\u54c1 \u91d1\u878d \u521b\u65b0 \u5ba2\u6237 \u5b9e\u73b0 \u7cfb\u7edf \u80fd\u529b \u4ea7\u4e1a \u5de5\u4f5c \u4ef7\u503c Topic #3: \u4e2d\u56fd 2016 \u7535\u5b50 \u589e\u957f 10 \u5e02\u573a \u57ce\u5e02 2015 \u5173\u6ce8 \u4eba\u53e3 \u68c0\u7d22 30 \u6216\u8005 \u5176\u4e2d \u9605\u8bfb \u5e94\u5f53 \u7f8e\u56fd \u5168\u56fd \u540c\u6bd4 20 Topic #4: \u4eba\u5de5\u667a\u80fd \u5b66\u4e60 \u9886\u57df \u667a\u80fd \u673a\u5668\u4eba \u673a\u5668 \u4eba\u7c7b \u516c\u53f8 \u6df1\u5ea6 \u7814\u7a76 \u672a\u6765 \u8bc6\u522b \u5df2\u7ecf \u533b\u7597 \u7cfb\u7edf \u8ba1\u7b97\u673a \u76ee\u524d \u8bed\u97f3 \u767e\u5ea6 \u65b9\u9762 () \u5728\u8fd95\u4e2a\u4e3b\u9898\u91cc\uff0c\u53ef\u4ee5\u770b\u51fa\u4e3b\u98980\u4e3b\u8981\u5173\u6ce8\u7684\u662f\u6570\u636e\u79d1\u5b66\u4e2d\u7684\u7b97\u6cd5\u548c\u6280\u672f\uff0c\u800c\u4e3b\u98984\u663e\u7136\u66f4\u6ce8\u91cd\u6570\u636e\u79d1\u5b66\u7684\u5e94\u7528\u573a\u666f\u3002 \u5269\u4e0b\u7684\u51e0\u4e2a\u4e3b\u9898\u53ef\u4ee5\u5982\u4f55\u5f52\u7eb3\uff1f\u4f5c\u4e3a\u601d\u8003\u9898\uff0c\u7559\u7ed9\u4f60\u82b1\u65f6\u95f4\u60f3\u4e00\u60f3\u5427\u3002 \u5230\u8fd9\u91cc\uff0cLDA\u5df2\u7ecf\u6210\u529f\u5e2e\u6211\u4eec\u5b8c\u6210\u4e86\u4e3b\u9898\u62bd\u53d6\u3002\u4f46\u662f\u6211\u77e5\u9053\u4f60\u4e0d\u662f\u5f88\u6ee1\u610f\uff0c\u56e0\u4e3a\u7ed3\u679c\u4e0d\u591f\u76f4\u89c2\u3002 \u90a3\u54b1\u4eec\u5c31\u8ba9\u5b83\u76f4\u89c2\u4e00\u4e9b\u597d\u4e86\u3002 \u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\uff0c\u4f1a\u6709\u6709\u8da3\u7684\u4e8b\u60c5\u53d1\u751f\u3002 1 2 3 4 import pyLDAvis import pyLDAvis.sklearn pyLDAvis.enable_notebook() pyLDAvis.sklearn.prepare(lda, tf, tf_vectorizer) \u5bf9\uff0c\u4f60\u4f1a\u770b\u5230\u5982\u4e0b\u7684\u4e00\u5f20\u56fe\uff0c\u800c\u4e14\u8fd8\u662f\u53ef\u4ea4\u4e92\u7684\u52a8\u6001\u56fe\u54e6\u3002 \u9700\u8981\u8bf4\u660e\u7684\u662f\uff0c\u7531\u4e8epyLDAvis\u8fd9\u4e2a\u5305\u517c\u5bb9\u6027\u6709\u4e9b\u95ee\u9898\u3002\u56e0\u6b64\u5728\u67d0\u4e9b\u64cd\u4f5c\u7cfb\u7edf\u548c\u8f6f\u4ef6\u73af\u5883\u4e0b\uff0c\u4f60\u6267\u884c\u4e86\u521a\u521a\u7684\u8bed\u53e5\u540e\uff0c\u6ca1\u6709\u62a5\u9519\uff0c\u5374\u4e5f\u6ca1\u6709\u56fe\u5f62\u663e\u793a\u51fa\u6765\u3002 \u6ca1\u5173\u7cfb\u3002\u8fd9\u65f6\u5019\u8bf7\u4f60\u5199\u4e0b\u4ee5\u4e0b\u8bed\u53e5\u5e76\u6267\u884c\uff1a 1 2 data = pyLDAvis.sklearn.prepare(lda, tf, tf_vectorizer) pyLDAvis.show(data) Jupyter\u4f1a\u7ed9\u4f60\u63d0\u793a\u4e00\u4e9b\u8b66\u544a\u3002\u4e0d\u7528\u7ba1\u5b83\u3002\u56e0\u4e3a\u6b64\u65f6\u4f60\u7684\u6d4f\u89c8\u5668\u4f1a\u5f39\u51fa\u4e00\u4e2a\u65b0\u7684\u6807\u7b7e\u9875\uff0c\u7ed3\u679c\u56fe\u5f62\u4f1a\u5728\u8fd9\u4e2a\u6807\u7b7e\u9875\u91cc\u6b63\u786e\u663e\u793a\u51fa\u6765\u3002 \u5982\u679c\u4f60\u770b\u5b8c\u4e86\u56fe\u540e\uff0c\u9700\u8981\u7ee7\u7eed\u7a0b\u5e8f\uff0c\u5c31\u56de\u5230\u539f\u5148\u7684\u6807\u7b7e\u9875\uff0c\u70b9\u51fbKernel\u83dc\u5355\u4e0b\u7684\u7b2c\u4e00\u9879Interrupt\u505c\u6b62\u7ed8\u56fe\uff0c\u7136\u540e\u5f80\u4e0b\u8fd0\u884c\u65b0\u7684\u8bed\u53e5\u3002 \u56fe\u7684\u5de6\u4fa7\uff0c\u7528\u5706\u5708\u4ee3\u8868\u4e0d\u540c\u7684\u4e3b\u9898\uff0c\u5706\u5708\u7684\u5927\u5c0f\u4ee3\u8868\u4e86\u6bcf\u4e2a\u4e3b\u9898\u5206\u522b\u5305\u542b\u6587\u7ae0\u7684\u6570\u91cf\u3002 \u56fe\u7684\u53f3\u4fa7\uff0c\u5217\u51fa\u4e86\u6700\u91cd\u8981\uff08\u9891\u7387\u6700\u9ad8\uff09\u768430\u4e2a\u5173\u952e\u8bcd\u5217\u8868\u3002\u6ce8\u610f\u5f53\u4f60\u6ca1\u6709\u628a\u9f20\u6807\u60ac\u505c\u5728\u4efb\u4f55\u4e3b\u9898\u4e4b\u4e0a\u7684\u65f6\u5019\uff0c\u8fd930\u4e2a\u5173\u952e\u8bcd\u4ee3\u8868\u5168\u90e8\u6587\u672c\u4e2d\u63d0\u53d6\u5230\u768430\u4e2a\u6700\u91cd\u8981\u5173\u952e\u8bcd\u3002 \u5982\u679c\u4f60\u628a\u9f20\u6807\u60ac\u505c\u57281\u53f7\u4e0a\u9762\uff1a \u53f3\u4fa7\u7684\u5173\u952e\u8bcd\u5217\u8868\u4f1a\u7acb\u5373\u53d1\u751f\u53d8\u5316\uff0c\u7ea2\u8272\u5c55\u793a\u4e86\u6bcf\u4e2a\u5173\u952e\u8bcd\u5728\u5f53\u524d\u4e3b\u9898\u4e0b\u7684\u9891\u7387\u3002 \u4ee5\u4e0a\u662f\u8ba4\u4e3a\u8bbe\u5b9a\u4e3b\u9898\u6570\u4e3a5\u7684\u60c5\u51b5\u3002\u53ef\u5982\u679c\u6211\u4eec\u628a\u4e3b\u9898\u6570\u91cf\u8bbe\u5b9a\u4e3a10\u5462\uff1f \u4f60\u4e0d\u9700\u8981\u91cd\u65b0\u8fd0\u884c\u6240\u6709\u4ee3\u7801\uff0c\u53ea\u9700\u8981\u6267\u884c\u4e0b\u9762\u8fd9\u51e0\u884c\u5c31\u53ef\u4ee5\u4e86\u3002 \u8fd9\u6bb5\u7a0b\u5e8f\u8fd8\u662f\u9700\u8981\u8fd0\u884c\u4e00\u6bb5\u65f6\u95f4\uff0c\u8bf7\u8010\u5fc3\u7b49\u5f85\u3002 1 2 3 4 5 6 7 8 n_topics = 10 lda = LatentDirichletAllocation(n_topics=n_topics, max_iter=50, learning_method='online', learning_offset=50., random_state=0) lda.fit(tf) print_top_words(lda, tf_feature_names, n_top_words) pyLDAvis.sklearn.prepare(lda, tf, tf_vectorizer) \u7a0b\u5e8f\u8f93\u51fa\u7ed9\u6211\u4eec10\u4e2a\u4e3b\u9898\u4e0b\u6700\u91cd\u8981\u768420\u4e2a\u5173\u952e\u8bcd\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 Topic #0: \u8fd9\u4e2a \u5c31\u662f \u5982\u679c \u53ef\u80fd \u7528\u6237 \u4e00\u4e9b \u4ec0\u4e48 \u5f88\u591a \u6ca1\u6709 \u8fd9\u6837 \u65f6\u5019 \u4f46\u662f \u56e0\u4e3a \u4e0d\u662f \u6240\u4ee5 \u4e0d\u540c \u5982\u4f55 \u4f7f\u7528 \u6216\u8005 \u975e\u5e38 Topic #1: \u4e2d\u56fd \u5b69\u5b50 \u589e\u957f \u5e02\u573a 2016 \u5b66\u751f 10 2015 \u57ce\u5e02 \u81ea\u5df1 \u4eba\u53e3 \u5927\u4f17 \u5173\u6ce8 \u5176\u4e2d \u6559\u80b2 \u540c\u6bd4 \u6ca1\u6709 \u7f8e\u56fd \u6295\u8d44 \u8fd9\u4e2a Topic #2: data \u53d8\u91cf \u8ddd\u79bb http \u6837\u672c com www \u68c0\u9a8c \u65b9\u6cd5 \u5206\u5e03 \u8ba1\u7b97 \u805a\u7c7b \u5982\u4e0b \u5206\u7c7b \u4e4b\u95f4 \u4e24\u4e2a \u4e00\u79cd \u5dee\u5f02 \u8868\u793a \u5e8f\u5217 Topic #3: \u7535\u5b50 \u91c7\u96c6 \u5e94\u5f53 \u6216\u8005 \u6848\u4ef6 \u4fdd\u62a4 \u89c4\u5b9a \u4fe1\u7528\u5361 \u6536\u96c6 \u662f\u5426 \u63d0\u53d6 \u8bbe\u5907 \u6cd5\u5f8b \u7533\u8bf7 \u6cd5\u9662 \u7cfb\u7edf \u8bb0\u5f55 \u76f8\u5173 \u8981\u6c42 \u65e0\u6cd5 Topic #4: \u7cfb\u7edf \u68c0\u7d22 \u4ea4\u901a \u5e73\u53f0 \u4e13\u5229 \u667a\u80fd \u76d1\u63a7 \u91c7\u96c6 \u6d77\u91cf \u7ba1\u7406 \u641c\u7d22 \u667a\u6167 \u51fa\u884c \u89c6\u9891 \u8f66\u8f86 \u8ba1\u7b97 \u5b9e\u73b0 \u57fa\u4e8e \u6570\u636e\u5e93 \u5b58\u50a8 Topic #5: \u53ef\u89c6\u5316 \u4f7f\u7528 \u5de5\u5177 \u6570\u636e\u5e93 \u5b58\u50a8 hadoop \u5904\u7406 \u56fe\u8868 \u6570\u636e\u4ed3\u5e93 \u652f\u6301 \u67e5\u8be2 \u5f00\u53d1 \u8bbe\u8ba1 sql \u5f00\u6e90 \u7528\u4e8e \u521b\u5efa \u7528\u6237 \u57fa\u4e8e \u8f6f\u4ef6 Topic #6: \u5b66\u4e60 \u7b97\u6cd5 \u6a21\u578b \u673a\u5668 \u6df1\u5ea6 \u795e\u7ecf\u7f51\u7edc \u65b9\u6cd5 \u8bad\u7ec3 \u7279\u5f81 \u5206\u7c7b \u7f51\u7edc \u4f7f\u7528 \u57fa\u4e8e \u4ecb\u7ecd \u7814\u7a76 \u9884\u6d4b \u56de\u5f52 \u51fd\u6570 \u53c2\u6570 \u56fe\u7247 Topic #7: \u4f01\u4e1a \u7ba1\u7406 \u670d\u52a1 \u4e92\u8054\u7f51 \u91d1\u878d \u5ba2\u6237 \u884c\u4e1a \u5e73\u53f0 \u5b9e\u73b0 \u5efa\u7acb \u793e\u4f1a \u653f\u5e9c \u7814\u7a76 \u8d44\u6e90 \u5b89\u5168 \u65f6\u4ee3 \u5229\u7528 \u4f20\u7edf \u4ef7\u503c \u533b\u7597 Topic #8: \u4eba\u5de5\u667a\u80fd \u9886\u57df \u673a\u5668\u4eba \u667a\u80fd \u516c\u53f8 \u4eba\u7c7b \u673a\u5668 \u5b66\u4e60 \u672a\u6765 \u5df2\u7ecf \u7814\u7a76 \u4ed6\u4eec \u8bc6\u522b \u53ef\u80fd \u8ba1\u7b97\u673a \u76ee\u524d \u8bed\u97f3 \u5de5\u4f5c \u73b0\u5728 \u80fd\u591f Topic #9: \u7528\u6237 \u516c\u53f8 \u4f01\u4e1a \u4e92\u8054\u7f51 \u5e73\u53f0 \u4e2d\u56fd \u6570\u636e\u5206\u6790 \u884c\u4e1a \u4ea7\u4e1a \u4ea7\u54c1 \u521b\u65b0 \u9879\u76ee 2016 \u670d\u52a1 \u5de5\u4f5c \u79d1\u6280 \u76f8\u5173 \u4e1a\u52a1 \u79fb\u52a8 \u5e02\u573a () \u9644\u5e26\u7684\u662f\u53ef\u89c6\u5316\u7684\u8f93\u51fa\u7ed3\u679c\uff1a \u5982\u679c\u4e0d\u80fd\u76f4\u63a5\u8f93\u51fa\u56fe\u5f62\uff0c\u8fd8\u662f\u6309\u7167\u524d\u9762\u7684\u505a\u6cd5\uff0c\u6267\u884c\uff1a 1 2 data = pyLDAvis.sklearn.prepare(lda, tf, tf_vectorizer) pyLDAvis.show(data) \u4f60\u9a6c\u4e0a\u4f1a\u53d1\u73b0\u5f53\u4e3b\u9898\u8bbe\u5b9a\u4e3a10\u7684\u65f6\u5019\uff0c\u4e00\u4e9b\u6709\u8da3\u7684\u73b0\u8c61\u53d1\u751f\u4e86 \u2014 \u2014 \u5927\u90e8\u5206\u7684\u6587\u7ae0\u62b1\u56e2\u51fa\u73b0\u5728\u53f3\u4e0a\u65b9\uff0c\u800c2\u4e2a\u5c0f\u90e8\u843d\uff088\u548c10\uff09\u4f3c\u4e4e\u79bb\u7fa4\u7d22\u5c45\u3002\u6211\u4eec\u67e5\u770b\u4e00\u4e0b\u8fd9\u91cc\u76848\u53f7\u4e3b\u9898\uff0c\u770b\u770b\u5b83\u7684\u5173\u952e\u8bcd\u6784\u6210\u3002 \u901a\u8fc7\u9ad8\u9891\u5173\u952e\u8bcd\u7684\u63cf\u8ff0\uff0c\u6211\u4eec\u53ef\u4ee5\u731c\u6d4b\u5230\u8fd9\u4e00\u4e3b\u9898\u4e3b\u8981\u63a2\u8ba8\u7684\u662f\u653f\u7b56\u548c\u6cd5\u5f8b\u6cd5\u89c4\u95ee\u9898\uff0c\u96be\u602a\u5b83\u548c\u90a3\u4e9b\u6280\u672f\u3001\u7b97\u6cd5\u4e0e\u5e94\u7528\u7684\u4e3b\u9898\u663e\u5f97\u5982\u6b64\u683c\u683c\u4e0d\u5165\u3002 \u8bf4\u660e \u00b6 \u524d\u6587\u5e2e\u52a9\u4f60\u4e00\u6b65\u6b65\u5229\u7528LDA\u505a\u4e86\u4e3b\u9898\u62bd\u53d6\u3002\u6210\u5c31\u611f\u7206\u68da\u5427\uff1f\u7136\u800c\u8fd9\u91cc\u6709\u4e24\u70b9\u5c0f\u95ee\u9898\u503c\u5f97\u8bf4\u660e\u3002 \u9996\u5148\uff0c\u4fe1\u606f\u68c0\u7d22\u7684\u4e1a\u5185\u4e13\u5bb6\u4e00\u770b\u5230\u521a\u624d\u7684\u5173\u952e\u8bcd\u5217\u8868\uff0c\u5c31\u4f1a\u54c8\u54c8\u5927\u7b11 \u2014 \u2014 \u592a\u7c97\u7cd9\u4e86\u5427\uff01\u5c45\u7136\u6ca1\u6709\u505a\u4e2d\u6587\u505c\u7528\u8bcd(stop words)\u53bb\u9664\uff01\u6ca1\u9519\uff0c\u4e3a\u4e86\u6f14\u793a\u7684\u6d41\u7545\uff0c\u6211\u4eec\u8fd9\u91cc\u5ffd\u7565\u4e86\u8bb8\u591a\u7ec6\u8282\u3002\u5f88\u591a\u5185\u5bb9\u4f7f\u7528\u7684\u662f\u9884\u7f6e\u9ed8\u8ba4\u53c2\u6570\uff0c\u800c\u4e14\u5b8c\u5168\u5ffd\u7565\u4e86\u4e2d\u6587\u505c\u7528\u8bcd\u8bbe\u7f6e\u73af\u8282\uff0c\u56e0\u6b64\u201c\u8fd9\u4e2a\u201d\u3001\u201c\u5982\u679c\u201d\u3001\u201c\u53ef\u80fd\u201d\u3001\u201c\u5c31\u662f\u201d\u8fd9\u6837\u7684\u505c\u7528\u8bcd\u624d\u4f1a\u5927\u6447\u5927\u6446\u5730\u51fa\u73b0\u5728\u7ed3\u679c\u4e2d\u3002\u4e0d\u8fc7\u6ca1\u6709\u5173\u7cfb\uff0c\u5b8c\u6210\u6bd4\u5b8c\u7f8e\u91cd\u8981\u5f97\u591a\u3002\u77e5\u9053\u4e86\u95ee\u9898\u6240\u5728\uff0c\u540e\u9762\u6539\u8fdb\u8d77\u6765\u5f88\u5bb9\u6613\u3002\u6709\u673a\u4f1a\u6211\u4f1a\u5199\u6587\u7ae0\u4ecb\u7ecd\u5982\u4f55\u52a0\u5165\u4e2d\u6587\u505c\u7528\u8bcd\u7684\u53bb\u9664\u73af\u8282\u3002 \u53e6\u5916\uff0c\u4e0d\u8bba\u662f5\u4e2a\u8fd8\u662f10\u4e2a\u4e3b\u9898\uff0c\u53ef\u80fd\u90fd\u4e0d\u662f\u6700\u4f18\u7684\u6570\u91cf\u9009\u62e9\u3002\u4f60\u53ef\u4ee5\u6839\u636e\u7a0b\u5e8f\u53cd\u9988\u7684\u7ed3\u679c\u4e0d\u65ad\u5c1d\u8bd5\u3002\u5b9e\u9645\u4e0a\uff0c\u53ef\u4ee5\u8c03\u8282\u7684\u53c2\u6570\u8fdc\u4e0d\u6b62\u8fd9\u4e00\u4e2a\u3002\u5982\u679c\u4f60\u60f3\u628a\u5168\u90e8\u53c2\u6570\u90fd\u641e\u61c2\uff0c\u53ef\u4ee5\u7ee7\u7eed\u9605\u8bfb\u4e0b\u9762\u7684\u201c\u539f\u7406\u201d\u90e8\u5206\uff0c\u6309\u56fe\u7d22\u9aa5\u5bfb\u627e\u76f8\u5173\u7684\u8bf4\u660e\u548c\u6307\u5f15\u3002 \u539f\u7406 \u00b6 \u524d\u6587\u6211\u4eec\u6ca1\u6709\u4ecb\u7ecd\u539f\u7406\uff0c\u800c\u662f\u628aLDA\u5f53\u6210\u4e86\u4e00\u4e2a\u9ed1\u7bb1\u3002\u4e0d\u662f\u6211\u4e0d\u60f3\u4ecb\u7ecd\u539f\u7406\uff0c\u800c\u662f\u8fc7\u4e8e\u590d\u6742\u3002 \u53ea\u7ed9\u4f60\u5c55\u793a\u5176\u4e2d\u7684\u4e00\u4e2a\u516c\u5f0f\uff0c\u4f60\u5c31\u80fd\u7ba1\u7aa5\u5176\u590d\u6742\u7a0b\u5ea6\u4e86\u3002 \u900f\u9732\u7ed9\u4f60\u4e00\u4e2a\u79d8\u5bc6\uff1a\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u548c\u6570\u636e\u79d1\u5b66\u7684\u5b66\u672f\u8bb2\u5ea7\u4e2d\uff0c\u8bb2\u8005\u5728\u4ecb\u7ecd\u5230LDA\u65f6\uff0c\u90fd\u5f80\u5f80\u4f1a\u628a\u539f\u7406\u8fd9\u90e8\u5206\u76f4\u63a5\u8df3\u8fc7\u53bb\u3002 \u597d\u5728\u4f60\u4e0d\u9700\u8981\u628a\u539f\u7406\u5b8c\u5168\u641e\u6e05\u695a\uff0c\u518d\u53bb\u7528LDA\u62bd\u53d6\u4e3b\u9898\u3002 \u8fd9\u5c31\u50cf\u662f\u5b66\u5f00\u8f66\uff0c\u4f60\u53ea\u8981\u61c2\u5f97\u5982\u4f55\u52a0\u901f\u3001\u5239\u8f66\u3001\u6362\u6321\u3001\u6253\u65b9\u5411\uff0c\u5c31\u80fd\u8ba9\u8f66\u5728\u8def\u4e0a\u884c\u9a76\u4e86\u3002\u5373\u4fbf\u4f60\u901a\u8fc7\u6240\u6709\u8003\u8bd5\u5e76\u53d6\u5f97\u4e86\u9a7e\u9a76\u8bc1\uff0c\u4f60\u771f\u7684\u4e86\u89e3\u53d1\u52a8\u673a\u6216\u7535\u673a\uff08\u5982\u679c\u4f60\u5f00\u7684\u662f\u7eaf\u7535\u8f66\uff09\u7684\u6784\u9020\u548c\u5de5\u4f5c\u539f\u7406\u5417\uff1f \u4f46\u662f\u5982\u679c\u4f60\u5c31\u662f\u5e0c\u671b\u4e86\u89e3LDA\u7684\u539f\u7406\uff0c\u90a3\u4e48\u6211\u7ed9\u4f60\u63a8\u83502\u4e2a\u5b66\u8d77\u6765\u4e0d\u90a3\u4e48\u75db\u82e6\u7684\u8d44\u6e90\u5427\u3002 \u9996\u5148\u662f\u6559\u7a0b\u5e7b\u706f\u3002slideshare\u662f\u4e2a\u5bfb\u627e\u6559\u7a0b\u7684\u597d\u53bb\u5904\u3002 \u8fd9\u4efd\u6559\u7a0b \u6d4f\u89c8\u91cf\u8d85\u8fc720000\uff0c\u5185\u5bb9\u6df1\u5165\u6d45\u51fa\uff0c\u8bb2\u5f97\u975e\u5e38\u6e05\u6670\u3002 \u4f46\u5982\u679c\u4f60\u8ddf\u6211\u4e00\u6837\uff0c\u662f\u4e2a\u89c6\u89c9\u5b66\u4e60\u8005\u7684\u8bdd\uff0c\u6211\u66f4\u63a8\u8350\u4f60\u770b \u8fd9\u6bb5 Youtube\u89c6\u9891\u3002 \u8bb2\u8005\u662fChristine Doig\uff0c\u6765\u81eaContinuum Analytics\u3002\u54b1\u4eec\u4e00\u76f4\u7528\u7684Python\u5957\u88c5Anaconda\u5c31\u662f\u8be5\u516c\u53f8\u7684\u4ea7\u54c1\u3002 Christine\u4f7f\u7528\u7684LDA\u539f\u7406\u89e3\u91ca\u6a21\u578b\uff0c\u4e0d\u662f\u8fd9\u4e2aLDA\u7ecf\u5178\u8bba\u6587\u4e2d\u7684\u6a21\u578b\u56fe\uff08\u5927\u90e8\u5206\u4eba\u89c9\u5f97\u8fd9\u5f20\u56fe\u4e0d\u6613\u61c2\uff09\uff1a \u5979\u6df1\u5165\u9605\u8bfb\u4e86\u5404\u79cd\u6587\u732e\u540e\uff0c\u603b\u7ed3\u4e86\u81ea\u5df1\u7684\u6a21\u578b\u56fe\u51fa\u6765\uff1a \u7528\u8fd9\u4e2a\u6a21\u578b\u6765\u89e3\u91caLDA\uff0c\u4f60\u4f1a\u7acb\u5373\u6709\u8c41\u7136\u5f00\u6717\u7684\u611f\u89c9\u3002 \u795d\u63a2\u7d22\u65c5\u7a0b\u6109\u5feb\uff01 \u5ef6\u4f38\u9605\u8bfb \u00b6 \u5982\u4f55\u7528\u300a\u7389\u6811\u829d\u5170\u300b\u5165\u95e8\u6570\u636e\u79d1\u5b66\uff1f \u6570\u636e\u79d1\u5b66\u76f8\u5173\u6587\u7ae0\u5408\u96c6\uff08\u7389\u6811\u829d\u5170\uff09","title":"\u7528Python\u4ece\u6d77\u91cf\u6587\u672c\u62bd\u53d6\u4e3b\u9898"},{"location":"pages/nlp/nlpinfo/topicextract/#\u6df9\u6ca1","text":"\u6bcf\u4e2a\u73b0\u4ee3\u4eba\uff0c\u51e0\u4e4e\u90fd\u4f53\u4f1a\u8fc7\u4fe1\u606f\u8fc7\u8f7d\u7684\u75db\u82e6\u3002\u6587\u7ae0\u8bfb\u4e0d\u8fc7\u6765\uff0c\u97f3\u4e50\u542c\u4e0d\u8fc7\u6765\uff0c\u89c6\u9891\u770b\u4e0d\u8fc7\u6765\u3002\u53ef\u662f\u73b0\u5b9e\u7684\u538b\u529b\uff0c\u4f7f\u4f60\u53c8\u4e0d\u80fd\u8f7b\u6613\u653e\u5f03\u6389\u3002 \u5047\u5982\u4f60\u662f\u4e2a\u7814\u7a76\u751f\uff0c\u6559\u79d1\u4e66\u548c\u8bba\u6587\u5c31\u662f\u4f60\u4e0d\u5f97\u4e0d\u8bfb\u7684\u5185\u5bb9\u3002\u73b0\u5728\u6709\u4e86\u5404\u79cd\u5176\u4ed6\u7684\u9605\u8bfb\u6e20\u9053\uff0c\u5fae\u4fe1\u3001\u5fae\u535a\u3001\u5f97\u5230App\u3001\u591a\u770b\u9605\u8bfb\u3001\u8c46\u74e3\u9605\u8bfb\u3001Kindle\uff0c\u8fd8\u6709\u4f60\u5728RSS\u4e0a\u8ba2\u9605\u7684\u4e00\u5927\u5806\u535a\u5ba2\u2026\u2026\u60c5\u51b5\u5c31\u53d8\u5f97\u66f4\u4e25\u91cd\u4e86\u3002 \u56e0\u4e3a\u5bf9\u6570\u636e\u79d1\u5b66\u5f88\u611f\u5174\u8da3\uff0c\u4f60\u8ba2\u9605\u4e86\u5927\u91cf\u7684\u6570\u636e\u79d1\u5b66\u7c7b\u5fae\u4fe1\u516c\u4f17\u53f7\u3002\u867d\u7136\u4f60\u5f88\u52e4\u594b\uff0c\u4f46\u4f60\u77e5\u9053\u81ea\u5df1\u4f9d\u7136\u9057\u6f0f\u4e86\u5f88\u591a\u6587\u7ae0\u3002 \u5b66\u4e60\u4e86 Python\u722c\u866b\u8bfe \u4ee5\u540e\uff0c\u4f60\u51b3\u5b9a\u5c1d\u8bd5\u4e00\u4e0b\u81ea\u5df1\u7684\u5c60\u9f99\u4e4b\u672f\u3002\u4f9d\u4ed7\u7740\u722c\u866b\u7684\u5a01\u529b\uff0c\u4f60\u6253\u7b97\u91c7\u96c6\u5230\u6240\u6709\u6570\u636e\u79d1\u5b66\u516c\u4f17\u53f7\u6587\u7ae0\u3002 \u4f60\u4ed4\u7ec6\u5206\u6790\u4e86\u5fae\u4fe1\u516c\u4f17\u53f7\u6587\u7ae0\u7684\u68c0\u7d22\u65b9\u5f0f\uff0c\u5236\u5b9a\u4e86\u5173\u952e\u8bcd\u5217\u8868\u3002\u5de7\u5999\u5229\u7528\u641c\u72d7\u641c\u7d22\u5f15\u64ce\u7684\u7279\u6027\uff0c\u4f60\u7f16\u5199\u4e86\u81ea\u5df1\u7684\u722c\u866b\uff0c\u5e76\u4e14\u6210\u529f\u5730\u4e8e\u5348\u591c\u653e\u5230\u4e86\u4e91\u7aef\u8fd0\u884c\u3002 \u5f00\u5fc3\u554a\uff0c\u6fc0\u52a8\u554a\u2026\u2026 \u7b2c\u4e8c\u5929\u4e00\u65e9\uff0c\u5929\u5149\u521a\u4eae\uff0c\u7761\u7720\u4e0d\u8db3\u7684\u4f60\u5c31\u5174\u51b2\u51b2\u5730\u722c\u8d77\u6765\u53bb\u770b\u722c\u53d6\u7ed3\u679c\u3002\u5c45\u7136\u5df2\u7ecf\u6709\u4e861000\u591a\u6761\uff01\u4f60\u6b23\u559c\u82e5\u72c2\uff0c\u5bfc\u51fa\u6210\u4e3acsv\u683c\u5f0f\uff0c\u5b58\u50a8\u5230\u4e86\u672c\u5730\u673a\u5668\uff0c\u5e76\u4e14\u6253\u5f00\u6d4f\u89c8\u3002 \u5174\u594b\u4e8610\u51e0\u5206\u949f\u4e4b\u540e\uff0c\u4f60\u51b7\u5374\u4e86\u4e0b\u6765\uff0c\u7ed9\u81ea\u5df1\u63d0\u51fa\u4e862\u4e2a\u91cd\u8981\u7684\u95ee\u9898\u3002 \u8fd9\u4e9b\u6587\u7ae0\u90fd\u503c\u5f97\u8bfb\u5417\uff1f \u8fd9\u4e9b\u6587\u7ae0\u6211\u8bfb\u5f97\u8fc7\u6765\u5417\uff1f \u4e00\u7bc7\u6570\u636e\u79d1\u5b66\u7c7b\u516c\u4f17\u53f7\uff0c\u4f60\u5e73\u5747\u9700\u89815\u5206\u949f\u9605\u8bfb\u3002\u8fd91000\u591a\u7bc7\u2026\u2026\u4f60\u62ff\u51fa\u8ba1\u7b97\u5668\u8ba4\u771f\u7b97\u4e86\u4e00\u4e0b\u3002 \u8bfb\u5b8c\u8fd9\u4e00\u5bbf\u91c7\u96c6\u5230\u7684\u6587\u7ae0\uff0c\u4f60\u4e0d\u7720\u4e0d\u4f11\u7684\u8bdd\uff0c\u4e5f\u9700\u898185\u4e2a\u5c0f\u65f6\u3002 \u5728\u4f60\u9605\u8bfb\u7684\u8fd985\u4e2a\u5c0f\u65f6\u91cc\u9762\uff0c\u8bb8\u8bb8\u591a\u591a\u7684\u6570\u636e\u79d1\u5b66\u7c7b\u516c\u4f17\u53f7\u65b0\u6587\u7ae0\u8fd8\u4f1a\u6e90\u6e90\u4e0d\u65ad\u6d8c\u73b0\u51fa\u6765\u3002 \u4f60\u611f\u89c9\u81ea\u5df1\u5feb\u88ab\u6587\u672c\u5185\u5bb9\u6df9\u6ca1\u4e86\uff0c\u6839\u672c\u900f\u4e0d\u8fc7\u6c14\u2026\u2026 \u5b66\u4e86\u8fd9\u4e48\u957f\u65f6\u95f4Python\uff0c\u4f60\u5e94\u8be5\u60f3\u5230 \u2014 \u2014 \u6211\u80fd\u5426\u7528\u81ea\u52a8\u5316\u5de5\u5177\u6765\u5206\u6790\u5b83\uff1f \u597d\u6d88\u606f\uff0c\u7b54\u6848\u662f\u53ef\u4ee5\u7684\u3002 \u4f46\u662f\u7528\u4ec0\u4e48\u6837\u7684\u5de5\u5177\u5462\uff1f \u7ffb\u4e86\u7ffb\u4f60\u81ea\u5df1\u7684\u6b66\u5668\u5e93\uff0c\u4f60\u53d1\u73b0\u4e86 \u8bcd\u4e91 \u3001 \u60c5\u611f\u5206\u6790 \u548c \u51b3\u7b56\u6811 \u3002 \u7136\u800c\uff0c\u5728\u5e2e\u4f60\u5e94\u5bf9\u4fe1\u606f\u8fc7\u8f7d\u8fd9\u4ef6\u4e8b\u513f\u4e0a\uff0c\u4e0a\u8ff0\u6b66\u5668\u597d\u50cf\u90fd\u4e0d\u5927\u5408\u9002\u3002 \u8bcd\u4e91\u4f60\u6253\u7b97\u505a\u51e0\u4e2a\uff1f\u5168\u90e8\u6587\u7ae0\u53ea\u505a\u4e00\u4e2a\u7684\u8bdd\uff0c\u5c31\u4f1a\u628a\u6240\u6709\u6587\u7ae0\u7684\u5185\u5bb9\u6df7\u6742\u8d77\u6765\uff0c\u6ca1\u6709\u610f\u4e49 \u2014 \u2014 \u56e0\u4e3a\u4f60\u77e5\u9053\u8fd9\u4e9b\u6587\u7ae0\u8c08\u7684\u5c31\u662f\u6570\u636e\u79d1\u5b66\u554a\uff01\u5982\u679c\u6bcf\u4e00\u7bc7\u6587\u7ae0\u90fd\u5206\u522b\u505a\u8bcd\u4e91\uff0c1000\u591a\u5f20\u56fe\u6d4f\u89c8\u8d77\u6765\uff0c\u597d\u50cf\u4e5f\u6ca1\u6709\u4ec0\u4e48\u76ca\u5904\u3002 \u4f60\u9605\u8bfb\u6570\u636e\u79d1\u5b66\u7c7b\u516c\u4f17\u53f7\u6587\u7ae0\u662f\u4e3a\u4e86\u83b7\u5f97\u77e5\u8bc6\u548c\u6280\u80fd\uff0c\u5206\u6790\u6587\u5b57\u4e2d\u8574\u542b\u7684\u60c5\u611f\u4f3c\u4e4e\u4e8e\u4e8b\u65e0\u8865\u3002 \u51b3\u7b56\u6811\u662f\u53ef\u4ee5\u7528\u6765\u505a\u5206\u7c7b\u7684\uff0c\u6ca1\u9519\u3002\u53ef\u662f\u5b83\u8981\u6c42\u7684\u8f93\u5165\u4fe1\u606f\u662f \u7ed3\u6784\u5316 \u7684 \u6709 \u6807\u8bb0\u6570\u636e\uff0c\u4f60\u624b\u91cc\u63e1\u7740\u7684\u8fd9\u4e00\u5927\u5806\u6587\u672c\uff0c\u5374\u521a\u597d\u662f \u975e\u7ed3\u6784\u5316 \u7684 \u65e0 \u6807\u8bb0\u6570\u636e\u3002 \u5168\u90e8\u6b66\u5668\u90fd\u54d1\u706b\u4e86\u3002 \u6ca1\u5173\u7cfb\u3002\u672c\u6587\u5e2e\u52a9\u4f60\u5728\u6570\u636e\u79d1\u5b66\u6b66\u5668\u5e93\u4e2d\u653e\u4e0a\u4e00\u4ef6\u65b0\u5f0f\u5175\u5668\u3002\u5b83\u80fd\u591f\u5904\u7406\u7684\uff0c\u5c31\u662f\u5927\u6279\u91cf\u7684\u975e\u7ed3\u6784\u65e0\u6807\u8bb0\u6570\u636e\u3002\u5728\u673a\u5668\u5b66\u4e60\u7684\u5206\u7c7b\u91cc\uff0c\u5b83\u5c5e\u4e8e\u975e\u76d1\u7763\u5b66\u4e60(unsupervised machine learning)\u8303\u7574\u3002\u5177\u4f53\u800c\u8a00\uff0c\u6211\u4eec\u9700\u8981\u7528\u5230\u7684\u65b9\u6cd5\u53eb\u4e3b\u9898\u5efa\u6a21(topic model)\u6216\u8005\u4e3b\u9898\u62bd\u53d6(topic extraction)\u3002","title":"\u6df9\u6ca1"},{"location":"pages/nlp/nlpinfo/topicextract/#\u4e3b\u9898","text":"\u65e2\u7136\u8981\u5efa\u6a21\uff0c\u6211\u4eec\u5c31\u9700\u8981\u5f04\u660e\u767d\u5efa\u7acb\u4ec0\u4e48\u6837\u7684\u6a21\u578b\u3002 \u6839\u636e\u7ef4\u57fa\u767e\u79d1\u7684\u5b9a\u4e49\uff0c\u4e3b\u9898\u6a21\u578b\u662f\u6307\uff1a \u5728\u673a\u5668\u5b66\u4e60\u548c\u81ea\u7136\u8bed\u8a00\u5904\u7406\u7b49\u9886\u57df\u662f\u7528\u6765\u5728\u4e00\u7cfb\u5217\u6587\u6863\u4e2d\u53d1\u73b0\u62bd\u8c61\u4e3b\u9898\u7684\u4e00\u79cd\u7edf\u8ba1\u6a21\u578b\u3002 \u8fd9\u4e2a\u5b9a\u4e49\u672c\u8eab\u597d\u50cf\u5c31\u6709\u70b9\u513f\u62bd\u8c61\uff0c\u54b1\u4eec\u4e3e\u4e2a\u4f8b\u5b50\u5427\u3002 \u8fd8\u662f\u7ef4\u57fa\u767e\u79d1\u4e0a\uff0c\u5bf9\u4e00\u6761\u53ef\u7231\u7684\u5c0f\u72d7\u6709\u8fd9\u6837\u4e00\u6bb5\u53d9\u8ff0\u3002 \u963f\u535a\uff08Bo\uff1b2008\u5e7410\u67089\u65e5\uff0d\uff09 \u662f\u7f8e\u56fd\u7b2c44\u4efb\u603b\u7edf\u5df4\u62c9\u514b\u00b7\u5965\u5df4\u9a6c\u7684\u5ba0\u7269\u72d7\uff0c\u4e5f\u662f\u5965\u5df4\u9a6c\u5bb6\u65cf\u7684\u6210\u5458\u4e4b\u4e00\u3002\u963f\u535a\u662f\u4e00\u53ea\u5df2\u9609\u5272\u7684\u96c4\u6027\u9ed1\u8272\u957f\u6bdb\u8461\u8404\u7259\u6c34\u72ac\u3002\u5965\u5df4\u9a6c\u4e00\u5bb6\u672c\u6765\u6ca1\u6709\u517b\u72d7\uff0c\u56e0\u4e3a\u4ed6\u7684\u5927\u5973\u513f\u739b\u4e3d\u4e9a\u5bf9\u72d7\u8fc7\u654f\u3002\u4f46\u4e3a\u4e86\u5ef6\u7eed\u767d\u5bab\u4e3b\u4eba\u5386\u5e74\u5747\u6709\u517b\u72d7\u7684\u4f20\u7edf\uff0c\u7b2c\u4e00\u5bb6\u5ead\u5728\u5165\u4e3b\u767d\u5bab\u540e\uff0c\u82b1\u4e86\u591a\u4e2a\u6708\u53bb\u89c2\u5bdf\u5404\u79cd\u72ac\u79cd\uff0c\u5e76\u7279\u5730\u9009\u62e9\u4e86\u8461\u8404\u7259\u6c34\u72ac\u8fd9\u4e00\u79cd\u6389\u6bdb\u5c11\u7684\u4f4e\u654f\u72d7\u3002 \u6211\u4eec\u6765\u770b\u770b\u8fd9\u6761\u53ef\u7231\u7684\u5c0f\u72d7\u7167\u7247\uff1a \u95ee\u9898\u6765\u4e86\uff0c\u8fd9\u7bc7\u6587\u7ae0\u7684\u4e3b\u9898(topic)\u662f\u4ec0\u4e48\uff1f \u4f60\u53ef\u80fd\u8131\u53e3\u800c\u51fa\uff0c\u201c\u72d7\u554a\uff01\u201d \u4e14\u6162\uff0c\u6362\u4e2a\u95ee\u6cd5\u3002\u5047\u8bbe\u4e00\u4e2a\u7528\u6237\u8bfb\u4e86\u8fd9\u7bc7\u6587\u7ae0\uff0c\u5f88\u611f\u5174\u8da3\u3002\u4f60\u60f3\u63a8\u8350\u66f4\u591a\u4ed6\u53ef\u80fd\u611f\u5174\u8da3\u7684\u6587\u7ae0\u7ed9\u4ed6\uff0c\u4ee5\u4e0b2\u6bb5\u6587\u5b57\uff0c\u54ea\u4e2a\u9009\u9879\u66f4\u5408\u9002\u5462\uff1f \u9009\u98791\uff1a \u963f\u5bcc\u6c57\u730e\u72d7\uff08Afghan Hound\uff09\u662f\u4e00\u79cd\u730e\u72ac\uff0c\u4e5f\u662f\u6700\u53e4\u8001\u7684\u72d7\u54c1\u79cd\u3002\u963f\u5bcc\u6c57\u730e\u72d7\u5916\u8868\u539a\u5b9e\uff0c\u7ec6\u817b\uff0c\u67d4\u6ed1\uff0c\u5b83\u7684\u5c3e\u5df4\u5728\u6700\u540e\u4e00\u73af\u5377\u66f2\u3002\u963f\u5bcc\u6c57\u730e\u72d7\u751f\u5b58\u4e8e\u4f0a\u6717\uff0c\u963f\u5bcc\u6c57\u4e1c\u90e8\u7684\u5bd2\u51b7\u5c71\u4e0a\uff0c\u963f\u5bcc\u6c57\u730e\u72d7\u6700\u521d\u662f\u7528\u6765\u72e9\u730e\u91ce\u5154\u548c\u77aa\u7f9a\u3002\u963f\u5bcc\u6c57\u730e\u72d7\u5176\u4ed6\u540d\u79f0\u5305\u542b\u5df4\u5c14\u8d6b\u5854\u5b50\u5e93\u5947\u730e\u72ac\uff0c\u730e\u72ac\uff0c\u4ffe\u8def\u652f\u730e\u72ac\uff0c\u5580\u5e03\u5c14\u730e\u72ac\uff0c\u6216\u975e\u6d32\u730e\u72ac\u3002 \u9009\u98792\uff1a 1989\u5e74\u590f\u5929\uff0c\u5965\u5df4\u9a6c\u5728\u897f\u5fb7\u5229\u00b7\u5965\u65af\u6c40\u5f8b\u5e08\u4e8b\u52a1\u6240\u62c5\u4efb\u6691\u671f\u5de5\u8bfb\u751f\u671f\u95f4\uff0c\u7ed3\u8bc6\u5f53\u65f6\u5df2\u662f\u5f8b\u5e08\u7684\u7c73\u6b47\u5c14\u00b7\u9c81\u6ee8\u900a\u3002\u4e24\u4eba\u4e8e1992\u5e74\u7ed3\u5a5a\uff0c\u73b0\u6709\u4e24\u4e2a\u5973\u513f \u2014 \u2014 \u5927\u5973\u513f\u739b\u4e3d\u4e9a\u57281999\u5e74\u4e8e\u829d\u52a0\u54e5\u829d\u52a0\u54e5\u5927\u5b66\u533b\u7597\u4e2d\u5fc3\u51fa\u751f\uff0c\u800c\u5c0f\u5973\u513f\u8428\u6c99\u57282001\u5e74\u4e8e\u829d\u52a0\u54e5\u5927\u5b66\u533b\u7597\u4e2d\u5fc3\u51fa\u751f\u3002 \u7ed9\u4f6030\u79d2\uff0c\u601d\u8003\u4e00\u4e0b\u3002 \u4f60\u7684\u7b54\u6848\u662f\u4ec0\u4e48\uff1f \u6211\u7684\u7b54\u6848\u662f \u2014 \u2014 \u4e0d\u786e\u5b9a\u3002 \u4eba\u7c7b\u5929\u751f\u559c\u6b22\u628a\u590d\u6742\u95ee\u9898\u7b80\u5355\u5316\u3002\u6211\u4eec\u6068\u4e0d\u5f97\u628a\u6240\u6709\u4e1c\u897f\u5212\u5206\u6210\u5177\u4f53\u7684\u3001\u4e92\u4e0d\u5e72\u6270\u7684\u5206\u7c7b\uff0c\u5c31\u5982\u540c\u836f\u94fa\u7684\u4e00\u4e2a\u4e2a\u62bd\u5c49\u4e00\u6837\u3002\u7136\u540e\u9700\u8981\u7684\u65f6\u5019\uff0c\u4ece\u5bf9\u5e94\u7684\u62bd\u5c49\u91cc\u9762\u53d6\u4e1c\u897f\u5c31\u53ef\u4ee5\u4e86\u3002 \u8fd9\u5c31\u50cf\u662f\u804c\u4e1a\u3002\u4ece\u524d\u6211\u4eec\u8bf4\u201c\u4e09\u767e\u516d\u5341\u884c\u201d\u3002\u968f\u4fbf\u62ff\u51fa\u67d0\u4e2a\u4eba\u6765\uff0c\u6211\u4eec\u5c31\u628a\u4ed6\u5f52\u5165\u5176\u4e2d\u67d0\u4e00\u884c\u3002 \u73b0\u5728\u4e0d\u884c\u4e86\uff0c\u53cd\u4f8b\u5c31\u662f\u6240\u8c13\u7684\u201c \u659c\u6760\u9752\u5e74 \u201d\u3002 \u4e3b\u9898\u8fd9\u4e2a\u4e8b\u60c5\uff0c\u4e5f\u540c\u6837\u4e0d\u90a3\u4e48\u6cfe\u6e2d\u5206\u660e\u3002\u4ecb\u7ecd\u5c0f\u72d7Bo\u7684\u6587\u7ae0\u867d\u7136\u4e0d\u957f\uff0c\u4f46\u662f\u4efb\u4f55\u5355\u4e00\u4e3b\u9898\u90fd\u65e0\u6cd5\u5b8c\u5168\u6db5\u76d6\u5b83\u3002 \u5982\u679c\u7528\u6237\u662f\u56e0\u4e3a\u5bf9\u5c0f\u72d7\u7684\u559c\u7231\uff0c\u9605\u8bfb\u4e86\u8fd9\u7bc7\u6587\u7ae0\uff0c\u90a3\u4e48\u663e\u7136\u4f60\u7ed9\u4ed6\u63a8\u8350\u9009\u98791\u4f1a\u66f4\u7406\u60f3\uff1b\u4f46\u662f\u5982\u679c\u7528\u6237\u5173\u6ce8\u7684\u662f\u5965\u5df4\u9a6c\u7684\u5bb6\u5ead\uff0c\u90a3\u4e48\u6bd4\u8d77\u9009\u98792\u6765\uff0c\u9009\u98791\u5c31\u663e\u5f97\u4e0d\u662f\u90a3\u4e48\u5408\u9002\u4e86\u3002 \u6211\u4eec\u5fc5\u987b\u653e\u5f03\u7528\u4e00\u4e2a\u8bcd\u6765\u63cf\u8ff0\u4e3b\u9898\u7684\u5c1d\u8bd5\uff0c\u8f6c\u800c\u7528\u4e00\u7cfb\u5217\u5173\u952e\u8bcd\u6765\u523b\u753b\u67d0\u4e2a\u4e3b\u9898\uff08\u4f8b\u5982\u201c\u5965\u5df4\u9a6c\u201d+\u201c\u5ba0\u7269\u201c+\u201d\u72d7\u201c+\u201d\u7b2c\u4e00\u5bb6\u5ead\u201c\uff09\u3002 \u5728\u8fd9\u79cd\u6a21\u5f0f\u4e0b\uff0c\u4ee5\u4e0b\u7684\u9009\u98793\u53ef\u80fd\u4f1a\u8131\u9896\u800c\u51fa\uff1a \u636e\u82f1\u56fd\u300a\u6bcf\u65e5\u90ae\u62a5\u300b\u62a5\u9053\uff0c\u7f8e\u56fd\u4e00\u540d\u7537\u5b50\u8fd1\u65e5\u8bd5\u56fe\u7ed1\u67b6\u603b\u7edf\u5965\u5df4\u9a6c\u592b\u5987\u7684\u5ba0\u7269\u72d7\u535a\uff08Bo\uff09\uff0c\u4e0d\u60dc\u7531\u4e8c\u5343\u591a\u516c\u91cc\u8fdc\u7684\u5317\u8fbe\u79d1\u4ed6\u5dde\u9a71\u8f66\u5f80\u534e\u76db\u987f\uff0c\u4f46\u56e0\u4e3a\u8d70\u6f0f\u98ce\u58f0\uff0c\u88ab\u7279\u52e4\u5c40\u4eba\u5458\u902e\u6355\u3002\u5965\u5df4\u9a6c\u592b\u5987\u76ee\u524d\u517b\u6709\u535a\u548c\u9633\u5149\uff08Sunny\uff09\u4e24\u53ea\u8461\u8404\u7259\u6c34\u72ac\u3002 \u8bb2\u5230\u8fd9\u91cc\uff0c\u4f60\u5927\u6982\u5f04\u660e\u767d\u4e86\u4e3b\u9898\u62bd\u53d6\u7684\u76ee\u6807\u4e86\u3002\u53ef\u662f\u9762\u5bf9\u6d69\u5982\u70df\u6d77\u7684\u6587\u7ae0\uff0c\u6211\u4eec\u600e\u4e48\u80fd\u591f\u628a\u76f8\u4f3c\u7684\u6587\u7ae0\u805a\u5408\u8d77\u6765\uff0c\u5e76\u4e14\u63d0\u53d6\u63cf\u8ff0\u805a\u5408\u540e\u4e3b\u9898\u7684\u91cd\u8981\u5173\u952e\u8bcd\u5462\uff1f \u4e3b\u9898\u62bd\u53d6\u6709\u82e5\u5e72\u65b9\u6cd5\u3002\u76ee\u524d\u6700\u4e3a\u6d41\u884c\u7684\u53eb\u505a\u9690\u542b\u72c4\u5229\u514b\u96f7\u5206\u5e03(Latent Dirichlet allocation)\uff0c\u7b80\u79f0LDA\u3002 LDA\u76f8\u5173\u539f\u7406\u90e8\u5206\uff0c\u7f6e\u4e8e\u672c\u6587\u6700\u540e\u3002\u4e0b\u9762\u6211\u4eec\u5148\u7528Python\u6765\u5c1d\u8bd5\u5b9e\u8df5\u4e00\u6b21\u4e3b\u9898\u62bd\u53d6\u3002\u5982\u679c\u4f60\u5bf9\u539f\u7406\u611f\u5174\u8da3\uff0c\u4e0d\u59a8\u518d\u505a\u5ef6\u4f38\u9605\u8bfb\u3002","title":"\u4e3b\u9898"},{"location":"pages/nlp/nlpinfo/topicextract/#\u51c6\u5907","text":"\u51c6\u5907\u5de5\u4f5c\u7684\u7b2c\u4e00\u6b65\uff0c\u8fd8\u662f\u5148\u5b89\u88c5Anaconda\u5957\u88c5\u3002\u8be6\u7ec6\u7684\u6d41\u7a0b\u6b65\u9aa4\u8bf7\u53c2\u8003\u300a \u5982\u4f55\u7528Python\u505a\u8bcd\u4e91 \u300b\u4e00\u6587\u3002 \u4ece\u5fae\u4fe1\u516c\u4f17\u5e73\u53f0\u722c\u6765\u7684datascience.csv\u6587\u4ef6\uff0c\u8bf7\u4ece \u8fd9\u91cc \u4e0b\u8f7d\u3002\u4f60\u53ef\u4ee5\u7528Excel\u6253\u5f00\uff0c\u770b\u770b\u4e0b\u8f7d\u662f\u5426\u5b8c\u6574\u548c\u6b63\u786e\u3002 \u5982\u679c\u4e00\u5207\u6b63\u5e38\uff0c\u8bf7\u5c06\u8be5csv\u6587\u4ef6\u79fb\u52a8\u5230\u54b1\u4eec\u7684\u5de5\u4f5c\u76ee\u5f55demo\u4e0b\u3002 \u5230\u4f60\u7684\u7cfb\u7edf\u201c\u7ec8\u7aef\u201d(macOS, Linux)\u6216\u8005\u201c\u547d\u4ee4\u63d0\u793a\u7b26\u201d(Windows)\u4e0b\uff0c\u8fdb\u5165\u6211\u4eec\u7684\u5de5\u4f5c\u76ee\u5f55demo\uff0c\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u3002 1 2 pip install jieba pip install pyldavis \u8fd0\u884c\u73af\u5883\u914d\u7f6e\u5b8c\u6bd5\u3002 \u5728\u7ec8\u7aef\u6216\u8005\u547d\u4ee4\u63d0\u793a\u7b26\u4e0b\u952e\u5165\uff1a 1 jupyter notebook Jupyter Notebook\u5df2\u7ecf\u6b63\u786e\u8fd0\u884c\u3002\u4e0b\u9762\u6211\u4eec\u5c31\u53ef\u4ee5\u6b63\u5f0f\u7f16\u5199\u4ee3\u7801\u4e86\u3002","title":"\u51c6\u5907"},{"location":"pages/nlp/nlpinfo/topicextract/#\u4ee3\u7801","text":"\u6211\u4eec\u5728Jupyter Notebook\u4e2d\u65b0\u5efa\u4e00\u4e2aPython 2\u7b14\u8bb0\u672c\uff0c\u8d77\u540d\u4e3atopic-model\u3002 \u4e3a\u4e86\u5904\u7406\u8868\u683c\u6570\u636e\uff0c\u6211\u4eec\u4f9d\u7136\u4f7f\u7528\u6570\u636e\u6846\u5de5\u5177Pandas\u3002\u5148\u8c03\u7528\u5b83\u3002 1 import pandas as pd \u7136\u540e\u8bfb\u5165\u6211\u4eec\u7684\u6570\u636e\u6587\u4ef6datascience.csv\uff0c\u6ce8\u610f\u5b83\u7684\u7f16\u7801\u662f\u4e2d\u6587GB18030\uff0c\u4e0d\u662fPandas\u9ed8\u8ba4\u8bbe\u7f6e\u7684\u7f16\u7801\uff0c\u6240\u4ee5\u6b64\u5904\u9700\u8981\u663e\u5f0f\u6307\u5b9a\u7f16\u7801\u7c7b\u578b\uff0c\u4ee5\u514d\u51fa\u73b0\u4e71\u7801\u9519\u8bef\u3002 1 df = pd.read_csv(\"datascience.csv\", encoding='gb18030') \u6211\u4eec\u6765\u770b\u770b\u6570\u636e\u6846\u7684\u5934\u51e0\u884c\uff0c\u4ee5\u786e\u8ba4\u8bfb\u53d6\u662f\u5426\u6b63\u786e\u3002 1 df.head() \u663e\u793a\u7ed3\u679c\u5982\u4e0b\uff1a \u6ca1\u95ee\u9898\uff0c\u5934\u51e0\u884c\u5185\u5bb9\u6240\u6709\u5217\u90fd\u6b63\u786e\u8bfb\u5165\uff0c\u6587\u5b57\u663e\u5f0f\u6b63\u5e38\u3002\u6211\u4eec\u770b\u770b\u6570\u636e\u6846\u7684\u957f\u5ea6\uff0c\u4ee5\u786e\u8ba4\u6570\u636e\u662f\u5426\u8bfb\u53d6\u5b8c\u6574\u3002 1 df.shape \u6267\u884c\u7684\u7ed3\u679c\u4e3a\uff1a 1 (1024, 3) \u884c\u5217\u6570\u90fd\u4e0e\u6211\u4eec\u722c\u53d6\u5230\u7684\u6570\u91cf\u4e00\u81f4\uff0c\u901a\u8fc7\u3002 \u4e0b\u9762\u6211\u4eec\u9700\u8981\u505a\u4e00\u4ef6\u91cd\u8981\u5de5\u4f5c \u2014 \u2014 \u5206\u8bcd\u3002\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u63d0\u53d6\u6bcf\u7bc7\u6587\u7ae0\u7684\u5173\u952e\u8bcd\u3002\u800c\u4e2d\u6587\u672c\u8eab\u5e76\u4e0d\u4f7f\u7528\u7a7a\u683c\u5728\u5355\u8bcd\u95f4\u5212\u5206\u3002\u6b64\u5904\u6211\u4eec\u91c7\u7528\u201c\u7ed3\u5df4\u5206\u8bcd\u201d\u5de5\u5177\u3002\u8fd9\u4e00\u5de5\u5177\u7684\u5177\u4f53\u4ecb\u7ecd\u548c\u5176\u4ed6\u7528\u9014\u8bf7\u53c2\u89c1\u300a \u5982\u4f55\u7528Python\u505a\u4e2d\u6587\u5206\u8bcd\uff1f \u300b\u4e00\u6587\u3002 \u6211\u4eec\u9996\u5148\u8c03\u7528jieba\u5206\u8bcd\u5305\u3002 1 import jieba \u6211\u4eec\u6b64\u6b21\u9700\u8981\u5904\u7406\u7684\uff0c\u4e0d\u662f\u5355\u4e00\u6587\u672c\u6570\u636e\uff0c\u800c\u662f1000\u591a\u6761\u6587\u672c\u6570\u636e\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u628a\u8fd9\u9879\u5de5\u4f5c\u5e76\u884c\u5316\u3002\u8fd9\u5c31\u9700\u8981\u9996\u5148\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u5904\u7406\u5355\u4e00\u6587\u672c\u7684\u5206\u8bcd\u3002 1 2 def chinese_word_cut(mytext): return \" \".join(jieba.cut(mytext)) \u6709\u4e86\u8fd9\u4e2a\u51fd\u6570\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4e0d\u65ad\u8c03\u7528\u5b83\u6765\u6279\u91cf\u5904\u7406\u6570\u636e\u6846\u91cc\u9762\u7684\u5168\u90e8\u6587\u672c\uff08\u6b63\u6587\uff09\u4fe1\u606f\u4e86\u3002\u4f60\u5f53\u7136\u53ef\u4ee5\u81ea\u5df1\u5199\u4e2a\u5faa\u73af\u6765\u505a\u8fd9\u9879\u5de5\u4f5c\u3002\u4f46\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u66f4\u4e3a\u9ad8\u6548\u7684apply\u51fd\u6570\u3002\u5982\u679c\u4f60\u5bf9\u8fd9\u4e2a\u51fd\u6570\u6709\u5174\u8da3\uff0c\u53ef\u4ee5\u70b9\u51fb \u8fd9\u6bb5\u6559\u5b66\u89c6\u9891 \u67e5\u770b\u5177\u4f53\u7684\u4ecb\u7ecd\u3002 \u4e0b\u9762\u8fd9\u4e00\u6bb5\u4ee3\u7801\u6267\u884c\u8d77\u6765\uff0c\u53ef\u80fd\u9700\u8981\u4e00\u5c0f\u6bb5\u65f6\u95f4\u3002\u8bf7\u8010\u5fc3\u7b49\u5019\u3002 1 df[\"content_cutted\"] = df.content.apply(chinese_word_cut) \u6267\u884c\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u4f1a\u51fa\u73b0\u5982\u4e0b\u63d0\u793a\u3002\u6ca1\u5173\u7cfb\uff0c\u5ffd\u7565\u5c31\u597d\u3002 1 2 3 4 Building prefix dict from the default dictionary ... Loading model from cache /var/folders/8s/k8yr4zy52q1dh107gjx280mw0000gn/T/jieba.cache Loading model cost 0.406 seconds. Prefix dict has been built succesfully. \u6267\u884c\u5b8c\u6bd5\u4e4b\u540e\uff0c\u6211\u4eec\u9700\u8981\u67e5\u770b\u4e00\u4e0b\uff0c\u6587\u672c\u662f\u5426\u5df2\u7ecf\u88ab\u6b63\u786e\u5206\u8bcd\u3002 1 df.content_cutted.head() \u7ed3\u679c\u5982\u4e0b\uff1a 1 2 3 4 5 6 0 \u5927 \u6570\u636e \u4ea7\u4e1a \u53d1\u5c55 \u53d7\u5230 \u56fd\u5bb6 \u91cd\u89c6 \uff0c \u800c \u5927 \u6570\u636e \u5df2\u7ecf \u4e0a\u5347 \u4e3a \u56fd\u5bb6 \u6218\u7565 \uff0c \u672a... 1 \u70b9\u51fb \u4e0a\u65b9 \u201c \u7845\u8c37 \u5468\u8fb9 \u201d \u5173\u6ce8 \u6211 \uff0c \u6536\u5230 \u6700\u65b0 \u7684 \u6587\u7ae0 \u54e6 \uff01 \u6628\u5929 \uff0c Goo... 2 \u56fd\u52a1\u9662 \u603b\u7406 \u674e\u514b\u5f3a \u5f53\u5730 \u65f6\u95f4 20 \u65e5 \u4e0a\u5348 \u5728 \u7ebd\u7ea6 \u4e0b\u69bb \u996d\u5e97 \u540c \u7f8e\u56fd \u7ecf\u6d4e \u3001 ... 3 2016 \u5e74 \uff0c \u5168\u5cf0 \u96c6\u56e2 \u6301\u7eed \u6316\u6398 \u5927 \u6570\u636e \u3001 \u4e91 \u8ba1\u7b97 \u3001 \u201c \u4e92\u8054\u7f51 + \u201d \u7b49... 4 \u8d35\u5dde \u7406\u5de5\u5b66\u9662 \u53ec\u5f00 \u5927 \u6570\u636e\u5206\u6790 \u4e0e \u5e94\u7528 \u4e13\u9898 \u5206\u4eab \u4f1a \u501f \u201c \u521b\u54cd \u4e2d\u56fd \u201d \u8d35... Name: content_cutted, dtype: object \u5355\u8bcd\u4e4b\u95f4\u90fd\u5df2\u7ecf\u88ab\u7a7a\u683c\u533a\u5206\u5f00\u4e86\u3002\u4e0b\u9762\u6211\u4eec\u9700\u8981\u505a\u4e00\u9879\u91cd\u8981\u5de5\u4f5c\uff0c\u53eb\u505a\u6587\u672c\u7684\u5411\u91cf\u5316\u3002 \u4e0d\u8981\u88ab\u8fd9\u4e2a\u540d\u79f0\u5413\u8dd1\u3002\u5b83\u7684\u610f\u601d\u5176\u5b9e\u5f88\u7b80\u5355\u3002\u56e0\u4e3a\u8ba1\u7b97\u673a\u4e0d\u4f46\u4e0d\u8ba4\u8bc6\u4e2d\u6587\uff0c\u751a\u81f3\u8fde\u82f1\u6587\u4e5f\u4e0d\u8ba4\u8bc6\uff0c\u5b83\u53ea\u8ba4\u5f97\u6570\u5b57\u3002\u6211\u4eec\u9700\u8981\u505a\u7684\uff0c\u662f\u628a\u6587\u7ae0\u4e2d\u7684\u5173\u952e\u8bcd\u8f6c\u6362\u4e3a\u4e00\u4e2a\u4e2a\u7279\u5f81\uff08\u5217\uff09\uff0c\u7136\u540e\u5bf9\u6bcf\u4e00\u7bc7\u6587\u7ae0\u6570\u5173\u952e\u8bcd\u51fa\u73b0\u4e2a\u6570\u3002 \u5047\u5982\u8fd9\u91cc\u6709\u4e24\u53e5\u8bdd\uff1a I love the game. I hate the game. \u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u62bd\u53d6\u51fa\u4ee5\u4e0b\u7279\u5f81\uff1a I love hate the game \u7136\u540e\u4e0a\u9762\u4e24\u53e5\u8bdd\u5c31\u8f6c\u6362\u4e3a\u4ee5\u4e0b\u8868\u683c\uff1a \u7b2c\u4e00\u53e5\u8868\u793a\u4e3a[1, 1, 0, 1, 1]\uff0c\u7b2c\u4e8c\u53e5\u662f[1, 0, 1, 1, 1]\u3002\u8fd9\u5c31\u53eb\u5411\u91cf\u5316\u4e86\u3002\u673a\u5668\u5c31\u80fd\u770b\u61c2\u5b83\u4eec\u4e86\u3002 \u539f\u7406\u5f04\u6e05\u695a\u4e86\uff0c\u8ba9\u6211\u4eec\u5f15\u5165\u76f8\u5173\u8f6f\u4ef6\u5305\u5427\u3002 1 from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer \u5904\u7406\u7684\u6587\u672c\u90fd\u662f\u5fae\u4fe1\u516c\u4f17\u53f7\u6587\u7ae0\uff0c\u91cc\u9762\u53ef\u80fd\u4f1a\u6709\u5927\u91cf\u7684\u8bcd\u6c47\u3002\u6211\u4eec\u4e0d\u5e0c\u671b\u5904\u7406\u6240\u6709\u8bcd\u6c47\u3002\u56e0\u4e3a\u4e00\u6765\u5904\u7406\u65f6\u95f4\u592a\u957f\uff0c\u4e8c\u6765\u90a3\u4e9b\u5f88\u4e0d\u5e38\u7528\u7684\u8bcd\u6c47\u5bf9\u6211\u4eec\u7684\u4e3b\u9898\u62bd\u53d6\u610f\u4e49\u4e0d\u5927\u3002\u6240\u4ee5\u8fd9\u91cc\u505a\u4e86\u4e2a\u9650\u5b9a\uff0c\u53ea\u4ece\u6587\u672c\u4e2d\u63d0\u53d61000\u4e2a\u6700\u91cd\u8981\u7684\u7279\u5f81\u5173\u952e\u8bcd\uff0c\u7136\u540e\u505c\u6b62\u3002 1 n_features = 1000 \u4e0b\u9762\u6211\u4eec\u5f00\u59cb\u5173\u952e\u8bcd\u63d0\u53d6\u548c\u5411\u91cf\u8f6c\u6362\u8fc7\u7a0b\uff1a 1 2 3 4 5 6 tf_vectorizer = CountVectorizer(strip_accents = 'unicode', max_features=n_features, stop_words='english', max_df = 0.5, min_df = 10) tf = tf_vectorizer.fit_transform(df.content_cutted) \u5230\u8fd9\u91cc\uff0c\u4f3c\u4e4e\u4ec0\u4e48\u90fd\u6ca1\u6709\u53d1\u751f\u3002\u56e0\u4e3a\u6211\u4eec\u6ca1\u6709\u8981\u6c42\u7a0b\u5e8f\u505a\u4efb\u4f55\u8f93\u51fa\u3002\u4e0b\u9762\u6211\u4eec\u5c31\u8981\u653e\u51faLDA\u8fd9\u4e2a\u5927\u62db\u4e86\u3002 \u5148\u5f15\u5165\u8f6f\u4ef6\u5305\uff1a 1 from sklearn.decomposition import LatentDirichletAllocation \u7136\u540e\u6211\u4eec\u9700\u8981\u4eba\u4e3a\u8bbe\u5b9a\u4e3b\u9898\u7684\u6570\u91cf\u3002\u8fd9\u4e2a\u8981\u6c42\u8ba9\u5f88\u591a\u4eba\u5927\u8dcc\u773c\u955c \u2014 \u2014 \u6211\u600e\u4e48\u77e5\u9053\u8fd9\u4e00\u5806\u6587\u7ae0\u91cc\u9762\u591a\u5c11\u4e3b\u9898\uff1f\uff01 \u522b\u7740\u6025\u3002\u5e94\u7528LDA\u65b9\u6cd5\uff0c\u6307\u5b9a\uff08\u6216\u8005\u53eb\u778e\u731c\uff09\u4e3b\u9898\u4e2a\u6570\u662f\u5fc5\u987b\u7684\u3002\u5982\u679c\u4f60\u53ea\u9700\u8981\u628a\u6587\u7ae0\u7c97\u7565\u5212\u5206\u6210\u51e0\u4e2a\u5927\u7c7b\uff0c\u5c31\u53ef\u4ee5\u628a\u6570\u5b57\u8bbe\u5b9a\u5c0f\u4e00\u4e9b\uff1b\u76f8\u53cd\uff0c\u5982\u679c\u4f60\u5e0c\u671b\u80fd\u591f\u8bc6\u522b\u51fa\u975e\u5e38\u7ec6\u5206\u7684\u4e3b\u9898\uff0c\u5c31\u589e\u5927\u4e3b\u9898\u4e2a\u6570\u3002 \u5bf9\u5212\u5206\u7684\u7ed3\u679c\uff0c\u5982\u679c\u4f60\u89c9\u5f97\u4e0d\u591f\u6ee1\u610f\uff0c\u53ef\u4ee5\u901a\u8fc7\u7ee7\u7eed\u8fed\u4ee3\uff0c\u8c03\u6574\u4e3b\u9898\u6570\u91cf\u6765\u4f18\u5316\u3002 \u8fd9\u91cc\u6211\u4eec\u5148\u8bbe\u5b9a\u4e3a5\u4e2a\u5206\u7c7b\u8bd5\u8bd5\u3002 1 2 3 4 5 n_topics = 5 lda = LatentDirichletAllocation(n_topics=n_topics, max_iter=50, learning_method='online', learning_offset=50., random_state=0) \u628a\u6211\u4eec\u76841000\u591a\u7bc7\u5411\u91cf\u5316\u540e\u7684\u6587\u7ae0\u6254\u7ed9LDA\uff0c\u8ba9\u5b83\u6b22\u5feb\u5730\u627e\u4e3b\u9898\u5427\u3002 \u8fd9\u4e00\u90e8\u5206\u5de5\u4f5c\u91cf\u8f83\u5927\uff0c\u7a0b\u5e8f\u4f1a\u6267\u884c\u4e00\u6bb5\u65f6\u95f4\uff0cJupyter Notebook\u5728\u6267\u884c\u4e2d\u53ef\u80fd\u6682\u65f6\u6ca1\u6709\u54cd\u5e94\u3002\u7b49\u5f85\u4e00\u4f1a\u513f\u5c31\u597d\uff0c\u4e0d\u8981\u7740\u6025\u3002 1 lda.fit(tf) \u7a0b\u5e8f\u7ec8\u4e8e\u8dd1\u5b8c\u4e86\u7684\u65f6\u5019\uff0c\u4f60\u4f1a\u770b\u5230\u5982\u4e0b\u7684\u63d0\u793a\u4fe1\u606f\uff1a 1 2 3 4 5 6 LatentDirichletAllocation(batch_size=128, doc_topic_prior=None, evaluate_every=-1, learning_decay=0.7, learning_method='online', learning_offset=50.0, max_doc_update_iter=100, max_iter=50, mean_change_tol=0.001, n_jobs=1, n_topics=5, perp_tol=0.1, random_state=0, topic_word_prior=None, total_samples=1000000.0, verbose=0) \u53ef\u662f\uff0c\u8fd9\u8fd8\u662f\u4ec0\u4e48\u8f93\u51fa\u90fd\u6ca1\u6709\u554a\u3002\u5b83\u7a76\u7adf\u627e\u4e86\u4ec0\u4e48\u6837\u7684\u4e3b\u9898\uff1f \u4e3b\u9898\u6ca1\u6709\u4e00\u4e2a\u786e\u5b9a\u7684\u540d\u79f0\uff0c\u800c\u662f\u7528\u4e00\u7cfb\u5217\u5173\u952e\u8bcd\u523b\u753b\u7684\u3002\u6211\u4eec\u5b9a\u4e49\u4ee5\u4e0b\u7684\u51fd\u6570\uff0c\u628a\u6bcf\u4e2a\u4e3b\u9898\u91cc\u9762\u7684\u524d\u82e5\u5e72\u4e2a\u5173\u952e\u8bcd\u663e\u793a\u51fa\u6765\uff1a 1 2 3 4 5 6 def print_top_words(model, feature_names, n_top_words): for topic_idx, topic in enumerate(model.components_): print(\"Topic #%d:\" % topic_idx) print(\" \".join([feature_names[i] for i in topic.argsort()[:-n_top_words - 1:-1]])) print() \u5b9a\u4e49\u597d\u51fd\u6570\u4e4b\u540e\uff0c\u6211\u4eec\u6682\u5b9a\u6bcf\u4e2a\u4e3b\u9898\u8f93\u51fa\u524d20\u4e2a\u5173\u952e\u8bcd\u3002 1 n_top_words = 20 \u4ee5\u4e0b\u547d\u4ee4\u4f1a\u5e2e\u52a9\u6211\u4eec\u4f9d\u6b21\u8f93\u51fa\u6bcf\u4e2a\u4e3b\u9898\u7684\u5173\u952e\u8bcd\u8868\uff1a 1 2 tf_feature_names = tf_vectorizer.get_feature_names() print_top_words(lda, tf_feature_names, n_top_words) \u6267\u884c\u6548\u679c\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 Topic #0: \u5b66\u4e60 \u6a21\u578b \u4f7f\u7528 \u7b97\u6cd5 \u65b9\u6cd5 \u673a\u5668 \u53ef\u89c6\u5316 \u795e\u7ecf\u7f51\u7edc \u7279\u5f81 \u5904\u7406 \u8ba1\u7b97 \u7cfb\u7edf \u4e0d\u540c \u6570\u636e\u5e93 \u8bad\u7ec3 \u5206\u7c7b \u57fa\u4e8e \u5de5\u5177 \u4e00\u79cd \u6df1\u5ea6 Topic #1: \u8fd9\u4e2a \u5c31\u662f \u53ef\u80fd \u5982\u679c \u4ed6\u4eec \u6ca1\u6709 \u81ea\u5df1 \u5f88\u591a \u4ec0\u4e48 \u4e0d\u662f \u4f46\u662f \u8fd9\u6837 \u56e0\u4e3a \u4e00\u4e9b \u65f6\u5019 \u73b0\u5728 \u7528\u6237 \u6240\u4ee5 \u975e\u5e38 \u5df2\u7ecf Topic #2: \u4f01\u4e1a \u5e73\u53f0 \u670d\u52a1 \u7ba1\u7406 \u4e92\u8054\u7f51 \u516c\u53f8 \u884c\u4e1a \u6570\u636e\u5206\u6790 \u4e1a\u52a1 \u7528\u6237 \u4ea7\u54c1 \u91d1\u878d \u521b\u65b0 \u5ba2\u6237 \u5b9e\u73b0 \u7cfb\u7edf \u80fd\u529b \u4ea7\u4e1a \u5de5\u4f5c \u4ef7\u503c Topic #3: \u4e2d\u56fd 2016 \u7535\u5b50 \u589e\u957f 10 \u5e02\u573a \u57ce\u5e02 2015 \u5173\u6ce8 \u4eba\u53e3 \u68c0\u7d22 30 \u6216\u8005 \u5176\u4e2d \u9605\u8bfb \u5e94\u5f53 \u7f8e\u56fd \u5168\u56fd \u540c\u6bd4 20 Topic #4: \u4eba\u5de5\u667a\u80fd \u5b66\u4e60 \u9886\u57df \u667a\u80fd \u673a\u5668\u4eba \u673a\u5668 \u4eba\u7c7b \u516c\u53f8 \u6df1\u5ea6 \u7814\u7a76 \u672a\u6765 \u8bc6\u522b \u5df2\u7ecf \u533b\u7597 \u7cfb\u7edf \u8ba1\u7b97\u673a \u76ee\u524d \u8bed\u97f3 \u767e\u5ea6 \u65b9\u9762 () \u5728\u8fd95\u4e2a\u4e3b\u9898\u91cc\uff0c\u53ef\u4ee5\u770b\u51fa\u4e3b\u98980\u4e3b\u8981\u5173\u6ce8\u7684\u662f\u6570\u636e\u79d1\u5b66\u4e2d\u7684\u7b97\u6cd5\u548c\u6280\u672f\uff0c\u800c\u4e3b\u98984\u663e\u7136\u66f4\u6ce8\u91cd\u6570\u636e\u79d1\u5b66\u7684\u5e94\u7528\u573a\u666f\u3002 \u5269\u4e0b\u7684\u51e0\u4e2a\u4e3b\u9898\u53ef\u4ee5\u5982\u4f55\u5f52\u7eb3\uff1f\u4f5c\u4e3a\u601d\u8003\u9898\uff0c\u7559\u7ed9\u4f60\u82b1\u65f6\u95f4\u60f3\u4e00\u60f3\u5427\u3002 \u5230\u8fd9\u91cc\uff0cLDA\u5df2\u7ecf\u6210\u529f\u5e2e\u6211\u4eec\u5b8c\u6210\u4e86\u4e3b\u9898\u62bd\u53d6\u3002\u4f46\u662f\u6211\u77e5\u9053\u4f60\u4e0d\u662f\u5f88\u6ee1\u610f\uff0c\u56e0\u4e3a\u7ed3\u679c\u4e0d\u591f\u76f4\u89c2\u3002 \u90a3\u54b1\u4eec\u5c31\u8ba9\u5b83\u76f4\u89c2\u4e00\u4e9b\u597d\u4e86\u3002 \u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\uff0c\u4f1a\u6709\u6709\u8da3\u7684\u4e8b\u60c5\u53d1\u751f\u3002 1 2 3 4 import pyLDAvis import pyLDAvis.sklearn pyLDAvis.enable_notebook() pyLDAvis.sklearn.prepare(lda, tf, tf_vectorizer) \u5bf9\uff0c\u4f60\u4f1a\u770b\u5230\u5982\u4e0b\u7684\u4e00\u5f20\u56fe\uff0c\u800c\u4e14\u8fd8\u662f\u53ef\u4ea4\u4e92\u7684\u52a8\u6001\u56fe\u54e6\u3002 \u9700\u8981\u8bf4\u660e\u7684\u662f\uff0c\u7531\u4e8epyLDAvis\u8fd9\u4e2a\u5305\u517c\u5bb9\u6027\u6709\u4e9b\u95ee\u9898\u3002\u56e0\u6b64\u5728\u67d0\u4e9b\u64cd\u4f5c\u7cfb\u7edf\u548c\u8f6f\u4ef6\u73af\u5883\u4e0b\uff0c\u4f60\u6267\u884c\u4e86\u521a\u521a\u7684\u8bed\u53e5\u540e\uff0c\u6ca1\u6709\u62a5\u9519\uff0c\u5374\u4e5f\u6ca1\u6709\u56fe\u5f62\u663e\u793a\u51fa\u6765\u3002 \u6ca1\u5173\u7cfb\u3002\u8fd9\u65f6\u5019\u8bf7\u4f60\u5199\u4e0b\u4ee5\u4e0b\u8bed\u53e5\u5e76\u6267\u884c\uff1a 1 2 data = pyLDAvis.sklearn.prepare(lda, tf, tf_vectorizer) pyLDAvis.show(data) Jupyter\u4f1a\u7ed9\u4f60\u63d0\u793a\u4e00\u4e9b\u8b66\u544a\u3002\u4e0d\u7528\u7ba1\u5b83\u3002\u56e0\u4e3a\u6b64\u65f6\u4f60\u7684\u6d4f\u89c8\u5668\u4f1a\u5f39\u51fa\u4e00\u4e2a\u65b0\u7684\u6807\u7b7e\u9875\uff0c\u7ed3\u679c\u56fe\u5f62\u4f1a\u5728\u8fd9\u4e2a\u6807\u7b7e\u9875\u91cc\u6b63\u786e\u663e\u793a\u51fa\u6765\u3002 \u5982\u679c\u4f60\u770b\u5b8c\u4e86\u56fe\u540e\uff0c\u9700\u8981\u7ee7\u7eed\u7a0b\u5e8f\uff0c\u5c31\u56de\u5230\u539f\u5148\u7684\u6807\u7b7e\u9875\uff0c\u70b9\u51fbKernel\u83dc\u5355\u4e0b\u7684\u7b2c\u4e00\u9879Interrupt\u505c\u6b62\u7ed8\u56fe\uff0c\u7136\u540e\u5f80\u4e0b\u8fd0\u884c\u65b0\u7684\u8bed\u53e5\u3002 \u56fe\u7684\u5de6\u4fa7\uff0c\u7528\u5706\u5708\u4ee3\u8868\u4e0d\u540c\u7684\u4e3b\u9898\uff0c\u5706\u5708\u7684\u5927\u5c0f\u4ee3\u8868\u4e86\u6bcf\u4e2a\u4e3b\u9898\u5206\u522b\u5305\u542b\u6587\u7ae0\u7684\u6570\u91cf\u3002 \u56fe\u7684\u53f3\u4fa7\uff0c\u5217\u51fa\u4e86\u6700\u91cd\u8981\uff08\u9891\u7387\u6700\u9ad8\uff09\u768430\u4e2a\u5173\u952e\u8bcd\u5217\u8868\u3002\u6ce8\u610f\u5f53\u4f60\u6ca1\u6709\u628a\u9f20\u6807\u60ac\u505c\u5728\u4efb\u4f55\u4e3b\u9898\u4e4b\u4e0a\u7684\u65f6\u5019\uff0c\u8fd930\u4e2a\u5173\u952e\u8bcd\u4ee3\u8868\u5168\u90e8\u6587\u672c\u4e2d\u63d0\u53d6\u5230\u768430\u4e2a\u6700\u91cd\u8981\u5173\u952e\u8bcd\u3002 \u5982\u679c\u4f60\u628a\u9f20\u6807\u60ac\u505c\u57281\u53f7\u4e0a\u9762\uff1a \u53f3\u4fa7\u7684\u5173\u952e\u8bcd\u5217\u8868\u4f1a\u7acb\u5373\u53d1\u751f\u53d8\u5316\uff0c\u7ea2\u8272\u5c55\u793a\u4e86\u6bcf\u4e2a\u5173\u952e\u8bcd\u5728\u5f53\u524d\u4e3b\u9898\u4e0b\u7684\u9891\u7387\u3002 \u4ee5\u4e0a\u662f\u8ba4\u4e3a\u8bbe\u5b9a\u4e3b\u9898\u6570\u4e3a5\u7684\u60c5\u51b5\u3002\u53ef\u5982\u679c\u6211\u4eec\u628a\u4e3b\u9898\u6570\u91cf\u8bbe\u5b9a\u4e3a10\u5462\uff1f \u4f60\u4e0d\u9700\u8981\u91cd\u65b0\u8fd0\u884c\u6240\u6709\u4ee3\u7801\uff0c\u53ea\u9700\u8981\u6267\u884c\u4e0b\u9762\u8fd9\u51e0\u884c\u5c31\u53ef\u4ee5\u4e86\u3002 \u8fd9\u6bb5\u7a0b\u5e8f\u8fd8\u662f\u9700\u8981\u8fd0\u884c\u4e00\u6bb5\u65f6\u95f4\uff0c\u8bf7\u8010\u5fc3\u7b49\u5f85\u3002 1 2 3 4 5 6 7 8 n_topics = 10 lda = LatentDirichletAllocation(n_topics=n_topics, max_iter=50, learning_method='online', learning_offset=50., random_state=0) lda.fit(tf) print_top_words(lda, tf_feature_names, n_top_words) pyLDAvis.sklearn.prepare(lda, tf, tf_vectorizer) \u7a0b\u5e8f\u8f93\u51fa\u7ed9\u6211\u4eec10\u4e2a\u4e3b\u9898\u4e0b\u6700\u91cd\u8981\u768420\u4e2a\u5173\u952e\u8bcd\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 Topic #0: \u8fd9\u4e2a \u5c31\u662f \u5982\u679c \u53ef\u80fd \u7528\u6237 \u4e00\u4e9b \u4ec0\u4e48 \u5f88\u591a \u6ca1\u6709 \u8fd9\u6837 \u65f6\u5019 \u4f46\u662f \u56e0\u4e3a \u4e0d\u662f \u6240\u4ee5 \u4e0d\u540c \u5982\u4f55 \u4f7f\u7528 \u6216\u8005 \u975e\u5e38 Topic #1: \u4e2d\u56fd \u5b69\u5b50 \u589e\u957f \u5e02\u573a 2016 \u5b66\u751f 10 2015 \u57ce\u5e02 \u81ea\u5df1 \u4eba\u53e3 \u5927\u4f17 \u5173\u6ce8 \u5176\u4e2d \u6559\u80b2 \u540c\u6bd4 \u6ca1\u6709 \u7f8e\u56fd \u6295\u8d44 \u8fd9\u4e2a Topic #2: data \u53d8\u91cf \u8ddd\u79bb http \u6837\u672c com www \u68c0\u9a8c \u65b9\u6cd5 \u5206\u5e03 \u8ba1\u7b97 \u805a\u7c7b \u5982\u4e0b \u5206\u7c7b \u4e4b\u95f4 \u4e24\u4e2a \u4e00\u79cd \u5dee\u5f02 \u8868\u793a \u5e8f\u5217 Topic #3: \u7535\u5b50 \u91c7\u96c6 \u5e94\u5f53 \u6216\u8005 \u6848\u4ef6 \u4fdd\u62a4 \u89c4\u5b9a \u4fe1\u7528\u5361 \u6536\u96c6 \u662f\u5426 \u63d0\u53d6 \u8bbe\u5907 \u6cd5\u5f8b \u7533\u8bf7 \u6cd5\u9662 \u7cfb\u7edf \u8bb0\u5f55 \u76f8\u5173 \u8981\u6c42 \u65e0\u6cd5 Topic #4: \u7cfb\u7edf \u68c0\u7d22 \u4ea4\u901a \u5e73\u53f0 \u4e13\u5229 \u667a\u80fd \u76d1\u63a7 \u91c7\u96c6 \u6d77\u91cf \u7ba1\u7406 \u641c\u7d22 \u667a\u6167 \u51fa\u884c \u89c6\u9891 \u8f66\u8f86 \u8ba1\u7b97 \u5b9e\u73b0 \u57fa\u4e8e \u6570\u636e\u5e93 \u5b58\u50a8 Topic #5: \u53ef\u89c6\u5316 \u4f7f\u7528 \u5de5\u5177 \u6570\u636e\u5e93 \u5b58\u50a8 hadoop \u5904\u7406 \u56fe\u8868 \u6570\u636e\u4ed3\u5e93 \u652f\u6301 \u67e5\u8be2 \u5f00\u53d1 \u8bbe\u8ba1 sql \u5f00\u6e90 \u7528\u4e8e \u521b\u5efa \u7528\u6237 \u57fa\u4e8e \u8f6f\u4ef6 Topic #6: \u5b66\u4e60 \u7b97\u6cd5 \u6a21\u578b \u673a\u5668 \u6df1\u5ea6 \u795e\u7ecf\u7f51\u7edc \u65b9\u6cd5 \u8bad\u7ec3 \u7279\u5f81 \u5206\u7c7b \u7f51\u7edc \u4f7f\u7528 \u57fa\u4e8e \u4ecb\u7ecd \u7814\u7a76 \u9884\u6d4b \u56de\u5f52 \u51fd\u6570 \u53c2\u6570 \u56fe\u7247 Topic #7: \u4f01\u4e1a \u7ba1\u7406 \u670d\u52a1 \u4e92\u8054\u7f51 \u91d1\u878d \u5ba2\u6237 \u884c\u4e1a \u5e73\u53f0 \u5b9e\u73b0 \u5efa\u7acb \u793e\u4f1a \u653f\u5e9c \u7814\u7a76 \u8d44\u6e90 \u5b89\u5168 \u65f6\u4ee3 \u5229\u7528 \u4f20\u7edf \u4ef7\u503c \u533b\u7597 Topic #8: \u4eba\u5de5\u667a\u80fd \u9886\u57df \u673a\u5668\u4eba \u667a\u80fd \u516c\u53f8 \u4eba\u7c7b \u673a\u5668 \u5b66\u4e60 \u672a\u6765 \u5df2\u7ecf \u7814\u7a76 \u4ed6\u4eec \u8bc6\u522b \u53ef\u80fd \u8ba1\u7b97\u673a \u76ee\u524d \u8bed\u97f3 \u5de5\u4f5c \u73b0\u5728 \u80fd\u591f Topic #9: \u7528\u6237 \u516c\u53f8 \u4f01\u4e1a \u4e92\u8054\u7f51 \u5e73\u53f0 \u4e2d\u56fd \u6570\u636e\u5206\u6790 \u884c\u4e1a \u4ea7\u4e1a \u4ea7\u54c1 \u521b\u65b0 \u9879\u76ee 2016 \u670d\u52a1 \u5de5\u4f5c \u79d1\u6280 \u76f8\u5173 \u4e1a\u52a1 \u79fb\u52a8 \u5e02\u573a () \u9644\u5e26\u7684\u662f\u53ef\u89c6\u5316\u7684\u8f93\u51fa\u7ed3\u679c\uff1a \u5982\u679c\u4e0d\u80fd\u76f4\u63a5\u8f93\u51fa\u56fe\u5f62\uff0c\u8fd8\u662f\u6309\u7167\u524d\u9762\u7684\u505a\u6cd5\uff0c\u6267\u884c\uff1a 1 2 data = pyLDAvis.sklearn.prepare(lda, tf, tf_vectorizer) pyLDAvis.show(data) \u4f60\u9a6c\u4e0a\u4f1a\u53d1\u73b0\u5f53\u4e3b\u9898\u8bbe\u5b9a\u4e3a10\u7684\u65f6\u5019\uff0c\u4e00\u4e9b\u6709\u8da3\u7684\u73b0\u8c61\u53d1\u751f\u4e86 \u2014 \u2014 \u5927\u90e8\u5206\u7684\u6587\u7ae0\u62b1\u56e2\u51fa\u73b0\u5728\u53f3\u4e0a\u65b9\uff0c\u800c2\u4e2a\u5c0f\u90e8\u843d\uff088\u548c10\uff09\u4f3c\u4e4e\u79bb\u7fa4\u7d22\u5c45\u3002\u6211\u4eec\u67e5\u770b\u4e00\u4e0b\u8fd9\u91cc\u76848\u53f7\u4e3b\u9898\uff0c\u770b\u770b\u5b83\u7684\u5173\u952e\u8bcd\u6784\u6210\u3002 \u901a\u8fc7\u9ad8\u9891\u5173\u952e\u8bcd\u7684\u63cf\u8ff0\uff0c\u6211\u4eec\u53ef\u4ee5\u731c\u6d4b\u5230\u8fd9\u4e00\u4e3b\u9898\u4e3b\u8981\u63a2\u8ba8\u7684\u662f\u653f\u7b56\u548c\u6cd5\u5f8b\u6cd5\u89c4\u95ee\u9898\uff0c\u96be\u602a\u5b83\u548c\u90a3\u4e9b\u6280\u672f\u3001\u7b97\u6cd5\u4e0e\u5e94\u7528\u7684\u4e3b\u9898\u663e\u5f97\u5982\u6b64\u683c\u683c\u4e0d\u5165\u3002","title":"\u4ee3\u7801"},{"location":"pages/nlp/nlpinfo/topicextract/#\u8bf4\u660e","text":"\u524d\u6587\u5e2e\u52a9\u4f60\u4e00\u6b65\u6b65\u5229\u7528LDA\u505a\u4e86\u4e3b\u9898\u62bd\u53d6\u3002\u6210\u5c31\u611f\u7206\u68da\u5427\uff1f\u7136\u800c\u8fd9\u91cc\u6709\u4e24\u70b9\u5c0f\u95ee\u9898\u503c\u5f97\u8bf4\u660e\u3002 \u9996\u5148\uff0c\u4fe1\u606f\u68c0\u7d22\u7684\u4e1a\u5185\u4e13\u5bb6\u4e00\u770b\u5230\u521a\u624d\u7684\u5173\u952e\u8bcd\u5217\u8868\uff0c\u5c31\u4f1a\u54c8\u54c8\u5927\u7b11 \u2014 \u2014 \u592a\u7c97\u7cd9\u4e86\u5427\uff01\u5c45\u7136\u6ca1\u6709\u505a\u4e2d\u6587\u505c\u7528\u8bcd(stop words)\u53bb\u9664\uff01\u6ca1\u9519\uff0c\u4e3a\u4e86\u6f14\u793a\u7684\u6d41\u7545\uff0c\u6211\u4eec\u8fd9\u91cc\u5ffd\u7565\u4e86\u8bb8\u591a\u7ec6\u8282\u3002\u5f88\u591a\u5185\u5bb9\u4f7f\u7528\u7684\u662f\u9884\u7f6e\u9ed8\u8ba4\u53c2\u6570\uff0c\u800c\u4e14\u5b8c\u5168\u5ffd\u7565\u4e86\u4e2d\u6587\u505c\u7528\u8bcd\u8bbe\u7f6e\u73af\u8282\uff0c\u56e0\u6b64\u201c\u8fd9\u4e2a\u201d\u3001\u201c\u5982\u679c\u201d\u3001\u201c\u53ef\u80fd\u201d\u3001\u201c\u5c31\u662f\u201d\u8fd9\u6837\u7684\u505c\u7528\u8bcd\u624d\u4f1a\u5927\u6447\u5927\u6446\u5730\u51fa\u73b0\u5728\u7ed3\u679c\u4e2d\u3002\u4e0d\u8fc7\u6ca1\u6709\u5173\u7cfb\uff0c\u5b8c\u6210\u6bd4\u5b8c\u7f8e\u91cd\u8981\u5f97\u591a\u3002\u77e5\u9053\u4e86\u95ee\u9898\u6240\u5728\uff0c\u540e\u9762\u6539\u8fdb\u8d77\u6765\u5f88\u5bb9\u6613\u3002\u6709\u673a\u4f1a\u6211\u4f1a\u5199\u6587\u7ae0\u4ecb\u7ecd\u5982\u4f55\u52a0\u5165\u4e2d\u6587\u505c\u7528\u8bcd\u7684\u53bb\u9664\u73af\u8282\u3002 \u53e6\u5916\uff0c\u4e0d\u8bba\u662f5\u4e2a\u8fd8\u662f10\u4e2a\u4e3b\u9898\uff0c\u53ef\u80fd\u90fd\u4e0d\u662f\u6700\u4f18\u7684\u6570\u91cf\u9009\u62e9\u3002\u4f60\u53ef\u4ee5\u6839\u636e\u7a0b\u5e8f\u53cd\u9988\u7684\u7ed3\u679c\u4e0d\u65ad\u5c1d\u8bd5\u3002\u5b9e\u9645\u4e0a\uff0c\u53ef\u4ee5\u8c03\u8282\u7684\u53c2\u6570\u8fdc\u4e0d\u6b62\u8fd9\u4e00\u4e2a\u3002\u5982\u679c\u4f60\u60f3\u628a\u5168\u90e8\u53c2\u6570\u90fd\u641e\u61c2\uff0c\u53ef\u4ee5\u7ee7\u7eed\u9605\u8bfb\u4e0b\u9762\u7684\u201c\u539f\u7406\u201d\u90e8\u5206\uff0c\u6309\u56fe\u7d22\u9aa5\u5bfb\u627e\u76f8\u5173\u7684\u8bf4\u660e\u548c\u6307\u5f15\u3002","title":"\u8bf4\u660e"},{"location":"pages/nlp/nlpinfo/topicextract/#\u539f\u7406","text":"\u524d\u6587\u6211\u4eec\u6ca1\u6709\u4ecb\u7ecd\u539f\u7406\uff0c\u800c\u662f\u628aLDA\u5f53\u6210\u4e86\u4e00\u4e2a\u9ed1\u7bb1\u3002\u4e0d\u662f\u6211\u4e0d\u60f3\u4ecb\u7ecd\u539f\u7406\uff0c\u800c\u662f\u8fc7\u4e8e\u590d\u6742\u3002 \u53ea\u7ed9\u4f60\u5c55\u793a\u5176\u4e2d\u7684\u4e00\u4e2a\u516c\u5f0f\uff0c\u4f60\u5c31\u80fd\u7ba1\u7aa5\u5176\u590d\u6742\u7a0b\u5ea6\u4e86\u3002 \u900f\u9732\u7ed9\u4f60\u4e00\u4e2a\u79d8\u5bc6\uff1a\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u548c\u6570\u636e\u79d1\u5b66\u7684\u5b66\u672f\u8bb2\u5ea7\u4e2d\uff0c\u8bb2\u8005\u5728\u4ecb\u7ecd\u5230LDA\u65f6\uff0c\u90fd\u5f80\u5f80\u4f1a\u628a\u539f\u7406\u8fd9\u90e8\u5206\u76f4\u63a5\u8df3\u8fc7\u53bb\u3002 \u597d\u5728\u4f60\u4e0d\u9700\u8981\u628a\u539f\u7406\u5b8c\u5168\u641e\u6e05\u695a\uff0c\u518d\u53bb\u7528LDA\u62bd\u53d6\u4e3b\u9898\u3002 \u8fd9\u5c31\u50cf\u662f\u5b66\u5f00\u8f66\uff0c\u4f60\u53ea\u8981\u61c2\u5f97\u5982\u4f55\u52a0\u901f\u3001\u5239\u8f66\u3001\u6362\u6321\u3001\u6253\u65b9\u5411\uff0c\u5c31\u80fd\u8ba9\u8f66\u5728\u8def\u4e0a\u884c\u9a76\u4e86\u3002\u5373\u4fbf\u4f60\u901a\u8fc7\u6240\u6709\u8003\u8bd5\u5e76\u53d6\u5f97\u4e86\u9a7e\u9a76\u8bc1\uff0c\u4f60\u771f\u7684\u4e86\u89e3\u53d1\u52a8\u673a\u6216\u7535\u673a\uff08\u5982\u679c\u4f60\u5f00\u7684\u662f\u7eaf\u7535\u8f66\uff09\u7684\u6784\u9020\u548c\u5de5\u4f5c\u539f\u7406\u5417\uff1f \u4f46\u662f\u5982\u679c\u4f60\u5c31\u662f\u5e0c\u671b\u4e86\u89e3LDA\u7684\u539f\u7406\uff0c\u90a3\u4e48\u6211\u7ed9\u4f60\u63a8\u83502\u4e2a\u5b66\u8d77\u6765\u4e0d\u90a3\u4e48\u75db\u82e6\u7684\u8d44\u6e90\u5427\u3002 \u9996\u5148\u662f\u6559\u7a0b\u5e7b\u706f\u3002slideshare\u662f\u4e2a\u5bfb\u627e\u6559\u7a0b\u7684\u597d\u53bb\u5904\u3002 \u8fd9\u4efd\u6559\u7a0b \u6d4f\u89c8\u91cf\u8d85\u8fc720000\uff0c\u5185\u5bb9\u6df1\u5165\u6d45\u51fa\uff0c\u8bb2\u5f97\u975e\u5e38\u6e05\u6670\u3002 \u4f46\u5982\u679c\u4f60\u8ddf\u6211\u4e00\u6837\uff0c\u662f\u4e2a\u89c6\u89c9\u5b66\u4e60\u8005\u7684\u8bdd\uff0c\u6211\u66f4\u63a8\u8350\u4f60\u770b \u8fd9\u6bb5 Youtube\u89c6\u9891\u3002 \u8bb2\u8005\u662fChristine Doig\uff0c\u6765\u81eaContinuum Analytics\u3002\u54b1\u4eec\u4e00\u76f4\u7528\u7684Python\u5957\u88c5Anaconda\u5c31\u662f\u8be5\u516c\u53f8\u7684\u4ea7\u54c1\u3002 Christine\u4f7f\u7528\u7684LDA\u539f\u7406\u89e3\u91ca\u6a21\u578b\uff0c\u4e0d\u662f\u8fd9\u4e2aLDA\u7ecf\u5178\u8bba\u6587\u4e2d\u7684\u6a21\u578b\u56fe\uff08\u5927\u90e8\u5206\u4eba\u89c9\u5f97\u8fd9\u5f20\u56fe\u4e0d\u6613\u61c2\uff09\uff1a \u5979\u6df1\u5165\u9605\u8bfb\u4e86\u5404\u79cd\u6587\u732e\u540e\uff0c\u603b\u7ed3\u4e86\u81ea\u5df1\u7684\u6a21\u578b\u56fe\u51fa\u6765\uff1a \u7528\u8fd9\u4e2a\u6a21\u578b\u6765\u89e3\u91caLDA\uff0c\u4f60\u4f1a\u7acb\u5373\u6709\u8c41\u7136\u5f00\u6717\u7684\u611f\u89c9\u3002 \u795d\u63a2\u7d22\u65c5\u7a0b\u6109\u5feb\uff01","title":"\u539f\u7406"},{"location":"pages/nlp/nlpinfo/topicextract/#\u5ef6\u4f38\u9605\u8bfb","text":"\u5982\u4f55\u7528\u300a\u7389\u6811\u829d\u5170\u300b\u5165\u95e8\u6570\u636e\u79d1\u5b66\uff1f \u6570\u636e\u79d1\u5b66\u76f8\u5173\u6587\u7ae0\u5408\u96c6\uff08\u7389\u6811\u829d\u5170\uff09","title":"\u5ef6\u4f38\u9605\u8bfb"},{"location":"pages/nlp/nlpinfo/website-categorization-python/","text":"\u4f7f\u7528Python\u548cGoogle NLP API\u8fdb\u884c\u7f51\u7ad9\u5206\u7c7b \u00b6 \u5728\u4eca\u5929\u7684\u5e16\u5b50\u4e2d\uff0c\u6211\u5c06\u5411\u60a8\u5c55\u793a\u5982\u4f55\u4f7f\u7528Python\uff0cGoogle Cloud NLP API\u548cGoogle Translate API\u5bf9\u4e00\u7ec4\u7f51\u7ad9\u8fdb\u884c\u5206\u7c7b\u3002\u6211\u8ba4\u4e3a\uff0c\u6b64\u8fc7\u7a0b\u5bf9\u4e8eSEO\u589e\u5f3a\u5176\u9875\u5916\u7b56\u7565\u5f88\u6709\u7528\uff0c\u56e0\u4e3a\u5b83\u4f7f\u4ed6\u4eec\u80fd\u591f\u63a2\u7d22\u94fe\u63a5\u5efa\u7acb\u7684\u673a\u4f1a\u5e76\u57fa\u4e8e\u4e3b\u9898\u6027\u5206\u6790\u53cd\u5411\u94fe\u63a5\u914d\u7f6e\u6587\u4ef6\u3002\u4f46\u662f\uff0c\u8fd9\u4e0d\u4ec5\u5bf9SEO\u6709\u6240\u5e2e\u52a9\uff0c\u800c\u4e14\u5bf9\u4fc3\u8fdb\u5176\u4ed6\u6570\u5b57\u8425\u9500\u6d3b\u52a8\u4e5f\u6709\u5e2e\u52a9\uff0c\u56e0\u4e3a\u6709\u4e86\u5b83\uff0c\u60a8\u53ef\u4ee5\u627e\u5230\u8054\u76df\u673a\u4f1a\u6216\u5206\u6790\u5c55\u793a\u5e7f\u544a\u7684\u7f51\u7ad9\u7fa4\uff0c\u4ece\u800c\u627e\u5230\u60a8\u60f3\u8981\u63d0\u9ad8\u51fa\u4ef7\u7684\u7f51\u7ad9\u7684\u6700\u4f73\u6027\u80fd\u7c7b\u578b\u3002 \u6211\u7b2c\u4e00\u6b21\u60f3\u5230\u521b\u5efa\u4e00\u4e2a\u53ef\u4ee5\u81ea\u52a8\u8fdb\u884c\u7f51\u7ad9\u5206\u7c7b\u7684Python\u811a\u672c\u65f6\uff0c\u5c31\u60f3\u5230\u4f7f\u7528\u67d0\u79cd WhoIs API\u3002\u6211\u5076\u7136\u53d1\u73b0 WhoIs API \u4f3c\u4e4e\u8fd0\u884c\u826f\u597d\uff0c\u4f46\u4e0d\u5e78\u7684\u662f\uff0c\u5bf9\u4e8e\u975e\u82f1\u8bed\u7f51\u7ad9\uff0c\u8be5API\u8fd4\u56de\u7684\u7ed3\u679c\u975e\u5e38\u4e0d\u53ef\u9760\uff0c\u56e0\u6b64\u6211\u9700\u8981\u66f4\u6709\u521b\u9020\u529b\u3002\u4e0d\u8fc7\uff0c\u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u60a8\u6253\u7b97\u5bf9\u82f1\u8bed\u7f51\u7ad9\u8fdb\u884c\u5206\u7c7b\uff0c\u5219\u6b64API\u5e94\u8be5\u53ef\u4ee5\u5f88\u597d\u5730\u5de5\u4f5c\uff0c\u5e76\u4e14\u5c06\u4f7f\u6b64\u8fc7\u7a0b\u53d8\u5f97\u66f4\u52a0\u5bb9\u6613\u3002 \u5bf9\u4e8e\u975e\u82f1\u8bed\u7f51\u7ad9\uff0c\u4e3a\u4e86\u6210\u529f\u5730\u5bf9\u8fd9\u4e9b\u7f51\u7ad9\u8fdb\u884c\u5206\u7c7b\uff0c\u6211\u4eec\u9075\u5faa\u7684\u903b\u8f91\u662f\uff1a \u4f7f\u7528\u540d\u4e3a Cloud Scraper \u7684Python\u6a21\u5757\u6765\u6293\u53d6\u5176\u67d0\u4e9b\u5185\u5bb9\u6807\u7b7e\u3002\u6211\u4eec\u4f7f\u7528Cloud Scraper\u6a21\u5757\u6765\u5c1d\u8bd5\u907f\u514d\u88abCloud Flare\u6280\u672f\u7981\u6b62\u3002 \u7531\u4e8eGoogle NLP API \u4ec5\u80fd\u5904\u7406\u82f1\u6587\u5185\u5bb9\uff0c\u56e0\u6b64\u8bf7\u7ffb\u8bd1\u4f7f\u7528 Google Translate Python\u6a21\u5757\u6293\u53d6\u7684\u5185\u5bb9\u3002\u6ce8\u610f\uff1a\u5982\u679c\u60a8\u9700\u8981\u7ffb\u8bd1\u8bb8\u591a\u7f51\u7ad9\u5e76\u786e\u4fdd\u60a8\u7684\u5de5\u4f5c\u6d41\u7a0b\u7a33\u5b9a\uff0c\u5219\u6700\u597d\u4f7f\u7528\u5b98\u65b9\u7684 Google Cloud Translation \u6a21\u5757\u3002 \u6211\u4eec\u5c06\u6bcf\u4e2a\u7f51\u7ad9\u7684\u5b57\u7b26\u6570\u51cf\u5c11\u5230\u6700\u591a1.000\u4e2a\u5b57\u7b26\uff0c\u8fd9\u8db3\u4ee5\u8ba9Google NLP API\u786e\u5b9a\u8be5\u7f51\u7ad9\u7c7b\u522b\u3002 \u6211\u4eec\u4f7f\u7528 Website Categorization Google NLP API \u6a21\u5757\u67e5\u627e\u5206\u914d\u7684\u7c7b\u522b\u53ca\u5176\u7f6e\u4fe1\u5ea6\u5f97\u5206\u3002\u7f6e\u4fe1\u5ea6\u5206\u6570\u8d8a\u63a5\u8fd1100\uff05\uff0c\u7f51\u7ad9\u5206\u7c7b\u5c31\u8d8a\u51c6\u786e\u3002 \u6700\u540e\uff0c\u6211\u4eec\u9700\u8981\u9605\u8bfbGoogle\u7f51\u7ad9\u5206\u7c7bGoogle NLP API\u8fd4\u56de\u7684\u8f93\u51fa\u3002 \u73b0\u5728\uff0c\u6211\u4eec\u73b0\u5728\u8981\u5982\u4f55\u8fdb\u884c\u7f51\u7ad9\u5206\u7c7b\uff0c\u8ba9\u6211\u4eec\u4ed8\u8bf8\u5b9e\u8df5\uff01 1.- \u6293\u53d6\u5185\u5bb9 \u00b6 \u5982\u5de5\u4f5c\u6d41\u8bf4\u660e\u4e2d\u6240\u8ff0\uff0c\u9996\u5148\u6211\u4eec\u8981\u505a\u7684\u662f\u4f7f\u7528Cloud Scraper\u6a21\u5757\u6293\u53d6\u53ef\u5728\u90a3\u4e9b\u7f51\u7ad9\u4e0a\u627e\u5230\u7684\u5185\u5bb9\u3002\u7136\u540e\uff0c\u6211\u4eec\u5c06\u4f7f\u7528Beautiful Soup\u67e5\u627e\u6211\u4eec\u611f\u5174\u8da3\u7684\u6807\u7b7e\uff1a\u5b57\u5e55\uff0c\u5143\u63cf\u8ff0\uff0c\u6bb5\u843d\u548c\u6807\u9898\u3002\u6700\u540e\uff0c\u6211\u4eec\u5c06\u6240\u6709\u8fd9\u4e9b\u5185\u5bb9\u653e\u5728\u4e00\u8d77\uff0c\u5e76\u6839\u636e\u6587\u672c\u5185\u7684\u76f8\u5bf9\u91cd\u8981\u6027\u6309\u4ee5\u4e0b\u987a\u5e8f\u5bf9\u6807\u7b7e\u8fdb\u884c\u4f18\u5148\u7ea7\u6392\u5e8f\uff1a Metatitle Metadescription Headers Paragraphs \u5e76\u4e14\u6211\u4eec\u5c06\u5b57\u7b26\u6570\u9650\u5236\u4e3a1.000\uff0c\u56e0\u4e3a\u8fd9\u8db3\u4ee5\u786e\u5b9a\u7f51\u7ad9\u7c7b\u578b\uff0c\u5e76\u4e14\u907f\u514d\u6bcf\u6b21\u8c03\u7528Google Cloud NLP API\u90fd\u6d6a\u8d39\u4e00\u4e2a\u4ee4\u724c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 import cloudscraper from bs4 import BeautifulSoup scraper = cloudscraper . create_scraper () headers = { 'user-agent' : 'Mozilla/5.0 (Linux; Android 6.0.1; Nexus 5X Build/MMB29P) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Mobile Safari/537.36 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)' } try : r = scraper . get ( < your website > , headers = headers ) soup = BeautifulSoup ( r . text , 'html.parser' ) title = soup . find ( 'title' ) . text description = soup . find ( 'meta' , attrs = { 'name' : 'description' }) if \"content\" in str ( description ): description = description . get ( \"content\" ) else : description = \"\" h1 = soup . find_all ( 'h1' ) h1_all = \"\" for x in range ( len ( h1 )): if x == len ( h1 ) - 1 : h1_all = h1_all + h1 [ x ] . text else : h1_all = h1_all + h1 [ x ] . text + \". \" paragraphs_all = \"\" paragraphs = soup . find_all ( 'p' ) for x in range ( len ( paragraphs )): if x == len ( paragraphs ) - 1 : paragraphs_all = paragraphs_all + paragraphs [ x ] . text else : paragraphs_all = paragraphs_all + paragraphs [ x ] . text + \". \" h2 = soup . find_all ( 'h2' ) h2_all = \"\" for x in range ( len ( h2 )): if x == len ( h2 ) - 1 : h2_all = h2_all + h2 [ x ] . text else : h2_all = h2_all + h2 [ x ] . text + \". \" h3 = soup . find_all ( 'h3' ) h3_all = \"\" for x in range ( len ( h3 )): if x == len ( h3 ) - 1 : h3_all = h3_all + h3 [ x ] . text else : h3_all = h3_all + h3 [ x ] . text + \". \" allthecontent = \"\" allthecontent = str ( title ) + \" \" + str ( description ) + \" \" + str ( h1_all ) + \" \" + str ( h2_all ) + \" \" + str ( h3_all ) + \" \" + str ( paragraphs_all ) allthecontent = str ( allthecontent )[ 0 : 999 ] except Exception as e : print ( e ) 2.- \u7ffb\u8bd1\u5185\u5bb9 \u00b6 \u5728\u7b2c\u4e8c\u9636\u6bb5\uff0c\u6211\u4eec\u7ffb\u8bd1\u5185\u5bb9\uff0c\u56e0\u4e3a\u6211\u4eec\u5c06\u4f7f\u7528Google Trans\u6a21\u5757\uff0c\u5c3d\u7ba1\u5982\u524d\u51e0\u6bb5\u6240\u8ff0\uff0c\u6211\u5efa\u8bae\u60a8\u4f7f\u7528Translation Cloud\u5b98\u65b9\u6a21\u5757\u3002\u7ecf\u8fc7\u66f4\u7a33\u5b9a\u7684\u89e3\u51b3\u65b9\u6848\u3002\u5982\u679c\u5728\u5f88\u77ed\u7684\u65f6\u95f4\u5185\u53d1\u51fa\u5982\u6b64\u591a\u7684\u547c\u53eb\uff0c\u5219Google Trans\u6a21\u5757\u53ef\u80fd\u4f1a\u88ab\u963b\u6b62\uff0c\u56e0\u6b64\uff0c\u5982\u679c\u8fed\u4ee3\u8fd0\u884c\u4ee5\u6279\u91cf\u6a21\u5f0f\u5bf9\u7f51\u7ad9\u8fdb\u884c\u5206\u7c7b\uff0c\u5efa\u8bae\u60a8\u4f7f\u7528\u65f6\u95f4\u6a21\u5757\u4f7f\u811a\u672c\u4f11\u7720\u5bf9\u4e8e\u76f8\u5f53\u591a\u7684\u7f51\u7ad9\u800c\u8a00\uff0c\u4e24\u6b21\u901a\u8bdd\u4e4b\u95f4\u7684\u95f4\u9694\u79d2\u6570\u5c31\u8db3\u591f\u4e86\uff09\u3002 1 2 3 4 5 6 7 8 9 10 from googletrans import Translator translator = Translator() try: translation = translator.translate(allthecontent).text translation = str(translation)[0:999] time.sleep(10) except Exception as e: print(e) 3.- \u4f7f\u7528Google NLP API\u5bf9\u7f51\u7ad9\u8fdb\u884c\u5206\u7c7b \u00b6 \u6700\u540e\uff0c\u6211\u4eec\u5c06\u4f7f\u7528Google NLP API\u5bf9\u7f51\u7ad9\u4e2d\u7684\u7ffb\u8bd1\u6587\u672c\u8fdb\u884c\u5206\u7c7b\u3002\u611f\u8c22 Greg Bernhardt \u6240\u53d1\u8868\u7684\u8fd9\u7bc7\u6587\u7ae0\uff0c\u6211\u5bf9\u6b64API\u6709\u6240\u4e86\u89e3\uff0c\u56e0\u6b64\uff0c\u5982\u679c\u60a8\u60f3\u8fdb\u4e00\u6b65\u4e86\u89e3\u8be5API\u53ef\u4ee5\u63d0\u4f9b\u7684\u6240\u6709\u529f\u80fd\uff0c\u6211\u5efa\u8bae\u60a8\u9605\u8bfb\u672c\u6587\u3002\u5728\u5f00\u59cb\u7f51\u7ad9\u5206\u7c7b\u4e4b\u524d\uff0c\u8bf7\u52a1\u5fc5\u5728 Google Cloud \u5e73\u53f0\u4e0a\u521b\u5efaAPI\u5bc6\u94a5\u3002 \u4e3a\u4e86\u5bf9\u7f51\u7ad9\u8fdb\u884c\u5206\u7c7b\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 import os from google.cloud import language_v1 from google.cloud.language_v1 import enums from google.cloud import language from google.cloud.language import types os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = <path to your credentials file> try: text_content = str(translation) text_content = text_content[0:1000] client = language_v1.LanguageServiceClient() type_ = enums.Document.Type.PLAIN_TEXT language = \"en\" document = {\"content\": text_content, \"type\": type_, \"language\": language} encoding_type = enums.EncodingType.UTF8 response = client.classify_text(document) print(response.categories[0].name) print(str(int(round(response.categories[0].confidence,3)*100))+\"%\") except Exception as e: print(e) \u4ec5\u6b64\u800c\u5df2\uff0c\u5982\u679c\u6211\u4eec\u5c06\u5176\u4ed8\u8bf8\u5b9e\u8df5\uff0c\u5e76\u5728\u4e00\u4e9b\u793a\u4f8b\u7f51\u7ad9\u4e0a\u8fd0\u884c\u811a\u672c Marca.com\uff1a\u897f\u73ed\u7259\u4f53\u80b2\u62a5\u7eb8\u3002\u4f7f\u7528NLP API\u8fdb\u884c\u5206\u7c7b\uff1a\u65b0\u95fb/\u4f53\u80b2\u65b0\u95fb\u5177\u670979\uff05\u7684\u7f6e\u4fe1\u5ea6\u3002 Happypancake.se\uff1a\u745e\u5178\u7ea6\u4f1a\u7f51\u7ad9\u3002\u4f7f\u7528NLP API\u8fdb\u884c\u5206\u7c7b\uff1a\u62e5\u670999\uff05\u7684\u4fe1\u4efb\u5ea6\u7684\u5728\u7ebf\u793e\u533a/\u7ea6\u4f1a\u548c\u4ea4\u53cb\u3002 Mavcsoport.hu\uff1a\u81f4\u529b\u4e8e\u51fa\u552e\u706b\u8f66\u7968\u7684\u5308\u7259\u5229\u7f51\u7ad9\u3002\u4f7f\u7528NLP API\u8fdb\u884c\u5206\u7c7b\uff1a60\uff05\u7684\u7f6e\u4fe1\u5ea6\u65c5\u884c/\u516c\u5171\u6c7d\u8f66\u548c\u94c1\u8def\u3002 Ilcasalingodivoghera.it\uff1a\u610f\u5927\u5229\u98df\u54c1\u7f51\u7ad9\u3002\u5f52\u7c7b\u4e3aNLP API\uff1a\u5bf9\u98df\u7269\u548c\u996e\u6599\u7684\u4fe1\u4efb\u5ea6\u4e3a76\uff05\u3002 Autoscout24.de\uff1a\u5fb7\u56fd\u8f66\u8f86\u7f51\u7ad9\u3002\u4f7f\u7528NLP API\u8fdb\u884c\u5206\u7c7b\uff1a\u62e5\u670996\uff05\u7684\u7f6e\u4fe1\u5ea6\u7684\u6c7d\u8f66\u548c\u8f66\u8f86/\u8f66\u8f86\u8d2d\u7269/\u4e8c\u624b\u8f66\u3002 Any text/graphics/videos and other articles on this website that indicate \"Source: xxx\" are reprinted on this website for the purpose of transmitting more information, which does not mean that we agree with their views or confirm the authenticity of their content. If you are involved in the content of the work, copyright and other issues, please contact this website, we will delete the content in the first time! Author: Daniel Heredia Source: https://www.danielherediamejias.com/website-categorization-python/","title":"Python \u4f7f\u7528 Google NLP API\u8fdb\u884c\u7f51\u7ad9\u5206\u7c7b"},{"location":"pages/nlp/nlpinfo/website-categorization-python/#\u4f7f\u7528Python\u548cGoogle-NLP-API\u8fdb\u884c\u7f51\u7ad9\u5206\u7c7b","text":"\u5728\u4eca\u5929\u7684\u5e16\u5b50\u4e2d\uff0c\u6211\u5c06\u5411\u60a8\u5c55\u793a\u5982\u4f55\u4f7f\u7528Python\uff0cGoogle Cloud NLP API\u548cGoogle Translate API\u5bf9\u4e00\u7ec4\u7f51\u7ad9\u8fdb\u884c\u5206\u7c7b\u3002\u6211\u8ba4\u4e3a\uff0c\u6b64\u8fc7\u7a0b\u5bf9\u4e8eSEO\u589e\u5f3a\u5176\u9875\u5916\u7b56\u7565\u5f88\u6709\u7528\uff0c\u56e0\u4e3a\u5b83\u4f7f\u4ed6\u4eec\u80fd\u591f\u63a2\u7d22\u94fe\u63a5\u5efa\u7acb\u7684\u673a\u4f1a\u5e76\u57fa\u4e8e\u4e3b\u9898\u6027\u5206\u6790\u53cd\u5411\u94fe\u63a5\u914d\u7f6e\u6587\u4ef6\u3002\u4f46\u662f\uff0c\u8fd9\u4e0d\u4ec5\u5bf9SEO\u6709\u6240\u5e2e\u52a9\uff0c\u800c\u4e14\u5bf9\u4fc3\u8fdb\u5176\u4ed6\u6570\u5b57\u8425\u9500\u6d3b\u52a8\u4e5f\u6709\u5e2e\u52a9\uff0c\u56e0\u4e3a\u6709\u4e86\u5b83\uff0c\u60a8\u53ef\u4ee5\u627e\u5230\u8054\u76df\u673a\u4f1a\u6216\u5206\u6790\u5c55\u793a\u5e7f\u544a\u7684\u7f51\u7ad9\u7fa4\uff0c\u4ece\u800c\u627e\u5230\u60a8\u60f3\u8981\u63d0\u9ad8\u51fa\u4ef7\u7684\u7f51\u7ad9\u7684\u6700\u4f73\u6027\u80fd\u7c7b\u578b\u3002 \u6211\u7b2c\u4e00\u6b21\u60f3\u5230\u521b\u5efa\u4e00\u4e2a\u53ef\u4ee5\u81ea\u52a8\u8fdb\u884c\u7f51\u7ad9\u5206\u7c7b\u7684Python\u811a\u672c\u65f6\uff0c\u5c31\u60f3\u5230\u4f7f\u7528\u67d0\u79cd WhoIs API\u3002\u6211\u5076\u7136\u53d1\u73b0 WhoIs API \u4f3c\u4e4e\u8fd0\u884c\u826f\u597d\uff0c\u4f46\u4e0d\u5e78\u7684\u662f\uff0c\u5bf9\u4e8e\u975e\u82f1\u8bed\u7f51\u7ad9\uff0c\u8be5API\u8fd4\u56de\u7684\u7ed3\u679c\u975e\u5e38\u4e0d\u53ef\u9760\uff0c\u56e0\u6b64\u6211\u9700\u8981\u66f4\u6709\u521b\u9020\u529b\u3002\u4e0d\u8fc7\uff0c\u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u60a8\u6253\u7b97\u5bf9\u82f1\u8bed\u7f51\u7ad9\u8fdb\u884c\u5206\u7c7b\uff0c\u5219\u6b64API\u5e94\u8be5\u53ef\u4ee5\u5f88\u597d\u5730\u5de5\u4f5c\uff0c\u5e76\u4e14\u5c06\u4f7f\u6b64\u8fc7\u7a0b\u53d8\u5f97\u66f4\u52a0\u5bb9\u6613\u3002 \u5bf9\u4e8e\u975e\u82f1\u8bed\u7f51\u7ad9\uff0c\u4e3a\u4e86\u6210\u529f\u5730\u5bf9\u8fd9\u4e9b\u7f51\u7ad9\u8fdb\u884c\u5206\u7c7b\uff0c\u6211\u4eec\u9075\u5faa\u7684\u903b\u8f91\u662f\uff1a \u4f7f\u7528\u540d\u4e3a Cloud Scraper \u7684Python\u6a21\u5757\u6765\u6293\u53d6\u5176\u67d0\u4e9b\u5185\u5bb9\u6807\u7b7e\u3002\u6211\u4eec\u4f7f\u7528Cloud Scraper\u6a21\u5757\u6765\u5c1d\u8bd5\u907f\u514d\u88abCloud Flare\u6280\u672f\u7981\u6b62\u3002 \u7531\u4e8eGoogle NLP API \u4ec5\u80fd\u5904\u7406\u82f1\u6587\u5185\u5bb9\uff0c\u56e0\u6b64\u8bf7\u7ffb\u8bd1\u4f7f\u7528 Google Translate Python\u6a21\u5757\u6293\u53d6\u7684\u5185\u5bb9\u3002\u6ce8\u610f\uff1a\u5982\u679c\u60a8\u9700\u8981\u7ffb\u8bd1\u8bb8\u591a\u7f51\u7ad9\u5e76\u786e\u4fdd\u60a8\u7684\u5de5\u4f5c\u6d41\u7a0b\u7a33\u5b9a\uff0c\u5219\u6700\u597d\u4f7f\u7528\u5b98\u65b9\u7684 Google Cloud Translation \u6a21\u5757\u3002 \u6211\u4eec\u5c06\u6bcf\u4e2a\u7f51\u7ad9\u7684\u5b57\u7b26\u6570\u51cf\u5c11\u5230\u6700\u591a1.000\u4e2a\u5b57\u7b26\uff0c\u8fd9\u8db3\u4ee5\u8ba9Google NLP API\u786e\u5b9a\u8be5\u7f51\u7ad9\u7c7b\u522b\u3002 \u6211\u4eec\u4f7f\u7528 Website Categorization Google NLP API \u6a21\u5757\u67e5\u627e\u5206\u914d\u7684\u7c7b\u522b\u53ca\u5176\u7f6e\u4fe1\u5ea6\u5f97\u5206\u3002\u7f6e\u4fe1\u5ea6\u5206\u6570\u8d8a\u63a5\u8fd1100\uff05\uff0c\u7f51\u7ad9\u5206\u7c7b\u5c31\u8d8a\u51c6\u786e\u3002 \u6700\u540e\uff0c\u6211\u4eec\u9700\u8981\u9605\u8bfbGoogle\u7f51\u7ad9\u5206\u7c7bGoogle NLP API\u8fd4\u56de\u7684\u8f93\u51fa\u3002 \u73b0\u5728\uff0c\u6211\u4eec\u73b0\u5728\u8981\u5982\u4f55\u8fdb\u884c\u7f51\u7ad9\u5206\u7c7b\uff0c\u8ba9\u6211\u4eec\u4ed8\u8bf8\u5b9e\u8df5\uff01","title":"\u4f7f\u7528Python\u548cGoogle NLP API\u8fdb\u884c\u7f51\u7ad9\u5206\u7c7b"},{"location":"pages/nlp/nlpinfo/website-categorization-python/#1--\u6293\u53d6\u5185\u5bb9","text":"\u5982\u5de5\u4f5c\u6d41\u8bf4\u660e\u4e2d\u6240\u8ff0\uff0c\u9996\u5148\u6211\u4eec\u8981\u505a\u7684\u662f\u4f7f\u7528Cloud Scraper\u6a21\u5757\u6293\u53d6\u53ef\u5728\u90a3\u4e9b\u7f51\u7ad9\u4e0a\u627e\u5230\u7684\u5185\u5bb9\u3002\u7136\u540e\uff0c\u6211\u4eec\u5c06\u4f7f\u7528Beautiful Soup\u67e5\u627e\u6211\u4eec\u611f\u5174\u8da3\u7684\u6807\u7b7e\uff1a\u5b57\u5e55\uff0c\u5143\u63cf\u8ff0\uff0c\u6bb5\u843d\u548c\u6807\u9898\u3002\u6700\u540e\uff0c\u6211\u4eec\u5c06\u6240\u6709\u8fd9\u4e9b\u5185\u5bb9\u653e\u5728\u4e00\u8d77\uff0c\u5e76\u6839\u636e\u6587\u672c\u5185\u7684\u76f8\u5bf9\u91cd\u8981\u6027\u6309\u4ee5\u4e0b\u987a\u5e8f\u5bf9\u6807\u7b7e\u8fdb\u884c\u4f18\u5148\u7ea7\u6392\u5e8f\uff1a Metatitle Metadescription Headers Paragraphs \u5e76\u4e14\u6211\u4eec\u5c06\u5b57\u7b26\u6570\u9650\u5236\u4e3a1.000\uff0c\u56e0\u4e3a\u8fd9\u8db3\u4ee5\u786e\u5b9a\u7f51\u7ad9\u7c7b\u578b\uff0c\u5e76\u4e14\u907f\u514d\u6bcf\u6b21\u8c03\u7528Google Cloud NLP API\u90fd\u6d6a\u8d39\u4e00\u4e2a\u4ee4\u724c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 import cloudscraper from bs4 import BeautifulSoup scraper = cloudscraper . create_scraper () headers = { 'user-agent' : 'Mozilla/5.0 (Linux; Android 6.0.1; Nexus 5X Build/MMB29P) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Mobile Safari/537.36 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)' } try : r = scraper . get ( < your website > , headers = headers ) soup = BeautifulSoup ( r . text , 'html.parser' ) title = soup . find ( 'title' ) . text description = soup . find ( 'meta' , attrs = { 'name' : 'description' }) if \"content\" in str ( description ): description = description . get ( \"content\" ) else : description = \"\" h1 = soup . find_all ( 'h1' ) h1_all = \"\" for x in range ( len ( h1 )): if x == len ( h1 ) - 1 : h1_all = h1_all + h1 [ x ] . text else : h1_all = h1_all + h1 [ x ] . text + \". \" paragraphs_all = \"\" paragraphs = soup . find_all ( 'p' ) for x in range ( len ( paragraphs )): if x == len ( paragraphs ) - 1 : paragraphs_all = paragraphs_all + paragraphs [ x ] . text else : paragraphs_all = paragraphs_all + paragraphs [ x ] . text + \". \" h2 = soup . find_all ( 'h2' ) h2_all = \"\" for x in range ( len ( h2 )): if x == len ( h2 ) - 1 : h2_all = h2_all + h2 [ x ] . text else : h2_all = h2_all + h2 [ x ] . text + \". \" h3 = soup . find_all ( 'h3' ) h3_all = \"\" for x in range ( len ( h3 )): if x == len ( h3 ) - 1 : h3_all = h3_all + h3 [ x ] . text else : h3_all = h3_all + h3 [ x ] . text + \". \" allthecontent = \"\" allthecontent = str ( title ) + \" \" + str ( description ) + \" \" + str ( h1_all ) + \" \" + str ( h2_all ) + \" \" + str ( h3_all ) + \" \" + str ( paragraphs_all ) allthecontent = str ( allthecontent )[ 0 : 999 ] except Exception as e : print ( e )","title":"1.- \u6293\u53d6\u5185\u5bb9"},{"location":"pages/nlp/nlpinfo/website-categorization-python/#2--\u7ffb\u8bd1\u5185\u5bb9","text":"\u5728\u7b2c\u4e8c\u9636\u6bb5\uff0c\u6211\u4eec\u7ffb\u8bd1\u5185\u5bb9\uff0c\u56e0\u4e3a\u6211\u4eec\u5c06\u4f7f\u7528Google Trans\u6a21\u5757\uff0c\u5c3d\u7ba1\u5982\u524d\u51e0\u6bb5\u6240\u8ff0\uff0c\u6211\u5efa\u8bae\u60a8\u4f7f\u7528Translation Cloud\u5b98\u65b9\u6a21\u5757\u3002\u7ecf\u8fc7\u66f4\u7a33\u5b9a\u7684\u89e3\u51b3\u65b9\u6848\u3002\u5982\u679c\u5728\u5f88\u77ed\u7684\u65f6\u95f4\u5185\u53d1\u51fa\u5982\u6b64\u591a\u7684\u547c\u53eb\uff0c\u5219Google Trans\u6a21\u5757\u53ef\u80fd\u4f1a\u88ab\u963b\u6b62\uff0c\u56e0\u6b64\uff0c\u5982\u679c\u8fed\u4ee3\u8fd0\u884c\u4ee5\u6279\u91cf\u6a21\u5f0f\u5bf9\u7f51\u7ad9\u8fdb\u884c\u5206\u7c7b\uff0c\u5efa\u8bae\u60a8\u4f7f\u7528\u65f6\u95f4\u6a21\u5757\u4f7f\u811a\u672c\u4f11\u7720\u5bf9\u4e8e\u76f8\u5f53\u591a\u7684\u7f51\u7ad9\u800c\u8a00\uff0c\u4e24\u6b21\u901a\u8bdd\u4e4b\u95f4\u7684\u95f4\u9694\u79d2\u6570\u5c31\u8db3\u591f\u4e86\uff09\u3002 1 2 3 4 5 6 7 8 9 10 from googletrans import Translator translator = Translator() try: translation = translator.translate(allthecontent).text translation = str(translation)[0:999] time.sleep(10) except Exception as e: print(e)","title":"2.- \u7ffb\u8bd1\u5185\u5bb9"},{"location":"pages/nlp/nlpinfo/website-categorization-python/#3--\u4f7f\u7528Google-NLP-API\u5bf9\u7f51\u7ad9\u8fdb\u884c\u5206\u7c7b","text":"\u6700\u540e\uff0c\u6211\u4eec\u5c06\u4f7f\u7528Google NLP API\u5bf9\u7f51\u7ad9\u4e2d\u7684\u7ffb\u8bd1\u6587\u672c\u8fdb\u884c\u5206\u7c7b\u3002\u611f\u8c22 Greg Bernhardt \u6240\u53d1\u8868\u7684\u8fd9\u7bc7\u6587\u7ae0\uff0c\u6211\u5bf9\u6b64API\u6709\u6240\u4e86\u89e3\uff0c\u56e0\u6b64\uff0c\u5982\u679c\u60a8\u60f3\u8fdb\u4e00\u6b65\u4e86\u89e3\u8be5API\u53ef\u4ee5\u63d0\u4f9b\u7684\u6240\u6709\u529f\u80fd\uff0c\u6211\u5efa\u8bae\u60a8\u9605\u8bfb\u672c\u6587\u3002\u5728\u5f00\u59cb\u7f51\u7ad9\u5206\u7c7b\u4e4b\u524d\uff0c\u8bf7\u52a1\u5fc5\u5728 Google Cloud \u5e73\u53f0\u4e0a\u521b\u5efaAPI\u5bc6\u94a5\u3002 \u4e3a\u4e86\u5bf9\u7f51\u7ad9\u8fdb\u884c\u5206\u7c7b\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 import os from google.cloud import language_v1 from google.cloud.language_v1 import enums from google.cloud import language from google.cloud.language import types os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = <path to your credentials file> try: text_content = str(translation) text_content = text_content[0:1000] client = language_v1.LanguageServiceClient() type_ = enums.Document.Type.PLAIN_TEXT language = \"en\" document = {\"content\": text_content, \"type\": type_, \"language\": language} encoding_type = enums.EncodingType.UTF8 response = client.classify_text(document) print(response.categories[0].name) print(str(int(round(response.categories[0].confidence,3)*100))+\"%\") except Exception as e: print(e) \u4ec5\u6b64\u800c\u5df2\uff0c\u5982\u679c\u6211\u4eec\u5c06\u5176\u4ed8\u8bf8\u5b9e\u8df5\uff0c\u5e76\u5728\u4e00\u4e9b\u793a\u4f8b\u7f51\u7ad9\u4e0a\u8fd0\u884c\u811a\u672c Marca.com\uff1a\u897f\u73ed\u7259\u4f53\u80b2\u62a5\u7eb8\u3002\u4f7f\u7528NLP API\u8fdb\u884c\u5206\u7c7b\uff1a\u65b0\u95fb/\u4f53\u80b2\u65b0\u95fb\u5177\u670979\uff05\u7684\u7f6e\u4fe1\u5ea6\u3002 Happypancake.se\uff1a\u745e\u5178\u7ea6\u4f1a\u7f51\u7ad9\u3002\u4f7f\u7528NLP API\u8fdb\u884c\u5206\u7c7b\uff1a\u62e5\u670999\uff05\u7684\u4fe1\u4efb\u5ea6\u7684\u5728\u7ebf\u793e\u533a/\u7ea6\u4f1a\u548c\u4ea4\u53cb\u3002 Mavcsoport.hu\uff1a\u81f4\u529b\u4e8e\u51fa\u552e\u706b\u8f66\u7968\u7684\u5308\u7259\u5229\u7f51\u7ad9\u3002\u4f7f\u7528NLP API\u8fdb\u884c\u5206\u7c7b\uff1a60\uff05\u7684\u7f6e\u4fe1\u5ea6\u65c5\u884c/\u516c\u5171\u6c7d\u8f66\u548c\u94c1\u8def\u3002 Ilcasalingodivoghera.it\uff1a\u610f\u5927\u5229\u98df\u54c1\u7f51\u7ad9\u3002\u5f52\u7c7b\u4e3aNLP API\uff1a\u5bf9\u98df\u7269\u548c\u996e\u6599\u7684\u4fe1\u4efb\u5ea6\u4e3a76\uff05\u3002 Autoscout24.de\uff1a\u5fb7\u56fd\u8f66\u8f86\u7f51\u7ad9\u3002\u4f7f\u7528NLP API\u8fdb\u884c\u5206\u7c7b\uff1a\u62e5\u670996\uff05\u7684\u7f6e\u4fe1\u5ea6\u7684\u6c7d\u8f66\u548c\u8f66\u8f86/\u8f66\u8f86\u8d2d\u7269/\u4e8c\u624b\u8f66\u3002 Any text/graphics/videos and other articles on this website that indicate \"Source: xxx\" are reprinted on this website for the purpose of transmitting more information, which does not mean that we agree with their views or confirm the authenticity of their content. If you are involved in the content of the work, copyright and other issues, please contact this website, we will delete the content in the first time! Author: Daniel Heredia Source: https://www.danielherediamejias.com/website-categorization-python/","title":"3.- \u4f7f\u7528Google NLP API\u5bf9\u7f51\u7ad9\u8fdb\u884c\u5206\u7c7b"},{"location":"pages/python/","text":"Python3 \u7b80\u4ecb \u00b6 Python3 \u00b6 \u7b80\u4ecb Python \u662f\u4e00\u4e2a\u9ad8\u5c42\u6b21\u7684\u7ed3\u5408\u4e86\u89e3\u91ca\u6027\u3001\u7f16\u8bd1\u6027\u3001\u4e92\u52a8\u6027\u548c\u9762\u5411\u5bf9\u8c61\u7684\u811a\u672c\u8bed\u8a00\u3002 Python \u7684\u8bbe\u8ba1\u5177\u6709\u5f88\u5f3a\u7684\u53ef\u8bfb\u6027\uff0c\u76f8\u6bd4\u5176\u4ed6\u8bed\u8a00\u7ecf\u5e38\u4f7f\u7528\u82f1\u6587\u5173\u952e\u5b57\uff0c\u5176\u4ed6\u8bed\u8a00\u7684\u4e00\u4e9b\u6807\u70b9\u7b26\u53f7\uff0c\u5b83\u5177\u6709\u6bd4\u5176\u4ed6\u8bed\u8a00\u66f4\u6709\u7279\u8272\u8bed\u6cd5\u7ed3\u6784\u3002 Python \u662f\u4e00\u79cd\u89e3\u91ca\u578b\u8bed\u8a00\uff1a \u8fd9\u610f\u5473\u7740\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u6ca1\u6709\u4e86\u7f16\u8bd1\u8fd9\u4e2a\u73af\u8282\u3002\u7c7b\u4f3c\u4e8ePHP\u548cPerl\u8bed\u8a00\u3002 Python \u662f\u4ea4\u4e92\u5f0f\u8bed\u8a00\uff1a \u8fd9\u610f\u5473\u7740\uff0c\u60a8\u53ef\u4ee5\u5728\u4e00\u4e2a Python \u63d0\u793a\u7b26 >>> \u540e\u76f4\u63a5\u6267\u884c\u4ee3\u7801\u3002 Python \u662f\u9762\u5411\u5bf9\u8c61\u8bed\u8a00: \u8fd9\u610f\u5473\u7740Python\u652f\u6301\u9762\u5411\u5bf9\u8c61\u7684\u98ce\u683c\u6216\u4ee3\u7801\u5c01\u88c5\u5728\u5bf9\u8c61\u7684\u7f16\u7a0b\u6280\u672f\u3002 Python \u662f\u521d\u5b66\u8005\u7684\u8bed\u8a00\uff1a Python \u5bf9\u521d\u7ea7\u7a0b\u5e8f\u5458\u800c\u8a00\uff0c\u662f\u4e00\u79cd\u4f1f\u5927\u7684\u8bed\u8a00\uff0c\u5b83\u652f\u6301\u5e7f\u6cdb\u7684\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\uff0c\u4ece\u7b80\u5355\u7684\u6587\u5b57\u5904\u7406\u5230 WWW \u6d4f\u89c8\u5668\u518d\u5230\u6e38\u620f\u3002 Python \u53d1\u5c55\u5386\u53f2 \u00b6 Python \u662f\u7531 Guido van Rossum \u5728\u516b\u5341\u5e74\u4ee3\u672b\u548c\u4e5d\u5341\u5e74\u4ee3\u521d\uff0c\u5728\u8377\u5170\u56fd\u5bb6\u6570\u5b66\u548c\u8ba1\u7b97\u673a\u79d1\u5b66\u7814\u7a76\u6240\u8bbe\u8ba1\u51fa\u6765\u7684\u3002 Python \u672c\u8eab\u4e5f\u662f\u7531\u8bf8\u591a\u5176\u4ed6\u8bed\u8a00\u53d1\u5c55\u800c\u6765\u7684,\u8fd9\u5305\u62ec ABC\u3001Modula-3\u3001C\u3001C++\u3001Algol-68\u3001SmallTalk\u3001Unix shell \u548c\u5176\u4ed6\u7684\u811a\u672c\u8bed\u8a00\u7b49\u7b49\u3002 \u50cf Perl \u8bed\u8a00\u4e00\u6837\uff0cPython \u6e90\u4ee3\u7801\u540c\u6837\u9075\u5faa GPL \\(GNU General Public License\\) \u534f\u8bae\u3002 \u73b0\u5728 Python \u662f\u7531\u4e00\u4e2a\u6838\u5fc3\u5f00\u53d1\u56e2\u961f\u5728\u7ef4\u62a4\uff0cGuido van Rossum \u4ecd\u7136\u5360\u636e\u7740\u81f3\u5173\u91cd\u8981\u7684\u4f5c\u7528\uff0c\u6307\u5bfc\u5176\u8fdb\u5c55\u3002 Python 2.0 \u4e8e 2000 \u5e74 10 \u6708 16 \u65e5\u53d1\u5e03\uff0c\u589e\u52a0\u4e86\u5b9e\u73b0\u5b8c\u6574\u7684\u5783\u573e\u56de\u6536\uff0c\u5e76\u4e14\u652f\u6301 Unicode\u3002 Python 3.0 \u4e8e 2008 \u5e74 12 \u6708 3 \u65e5\u53d1\u5e03\uff0c\u6b64\u7248\u4e0d\u5b8c\u5168\u517c\u5bb9\u4e4b\u524d\u7684 Python \u6e90\u4ee3\u7801\u3002\u4e0d\u8fc7\uff0c\u5f88\u591a\u65b0\u7279\u6027\u540e\u6765\u4e5f\u88ab\u79fb\u690d\u5230\u65e7\u7684Python 2.6/2.7\u7248\u672c\u3002 Python 3.0 \u7248\u672c\uff0c\u5e38\u88ab\u79f0\u4e3a Python 3000\uff0c\u6216\u7b80\u79f0 Py3k\u3002\u76f8\u5bf9\u4e8e Python \u7684\u65e9\u671f\u7248\u672c\uff0c\u8fd9\u662f\u4e00\u4e2a\u8f83\u5927\u7684\u5347\u7ea7\u3002 Python 2.7 \u88ab\u786e\u5b9a\u4e3a\u6700\u540e\u4e00\u4e2a Python 2.x \u7248\u672c\uff0c\u5b83\u9664\u4e86\u652f\u6301 Python 2.x \u8bed\u6cd5\u5916\uff0c\u8fd8\u652f\u6301\u90e8\u5206 Python 3.1 \u8bed\u6cd5\u3002 Python \u7279\u70b9 \u00b6 1.\u6613\u4e8e\u5b66\u4e60\uff1a Python\u6709\u76f8\u5bf9\u8f83\u5c11\u7684\u5173\u952e\u5b57\uff0c\u7ed3\u6784\u7b80\u5355\uff0c\u548c\u4e00\u4e2a\u660e\u786e\u5b9a\u4e49\u7684\u8bed\u6cd5\uff0c\u5b66\u4e60\u8d77\u6765\u66f4\u52a0\u7b80\u5355\u3002 2.\u6613\u4e8e\u9605\u8bfb\uff1a Python\u4ee3\u7801\u5b9a\u4e49\u7684\u66f4\u6e05\u6670\u3002 3.\u6613\u4e8e\u7ef4\u62a4\uff1a Python\u7684\u6210\u529f\u5728\u4e8e\u5b83\u7684\u6e90\u4ee3\u7801\u662f\u76f8\u5f53\u5bb9\u6613\u7ef4\u62a4\u7684\u3002 4.\u4e00\u4e2a\u5e7f\u6cdb\u7684\u6807\u51c6\u5e93\uff1a Python\u7684\u6700\u5927\u7684\u4f18\u52bf\u4e4b\u4e00\u662f\u4e30\u5bcc\u7684\u5e93\uff0c\u8de8\u5e73\u53f0\u7684\uff0c\u5728UNIX\uff0cWindows\u548cMacintosh\u517c\u5bb9\u5f88\u597d\u3002 5.\u4e92\u52a8\u6a21\u5f0f\uff1a \u4e92\u52a8\u6a21\u5f0f\u7684\u652f\u6301\uff0c\u60a8\u53ef\u4ee5\u4ece\u7ec8\u7aef\u8f93\u5165\u6267\u884c\u4ee3\u7801\u5e76\u83b7\u5f97\u7ed3\u679c\u7684\u8bed\u8a00\uff0c\u4e92\u52a8\u7684\u6d4b\u8bd5\u548c\u8c03\u8bd5\u4ee3\u7801\u7247\u65ad\u3002 6.\u53ef\u79fb\u690d\uff1a \u57fa\u4e8e\u5176\u5f00\u653e\u6e90\u4ee3\u7801\u7684\u7279\u6027\uff0cPython\u5df2\u7ecf\u88ab\u79fb\u690d\uff08\u4e5f\u5c31\u662f\u4f7f\u5176\u5de5\u4f5c\uff09\u5230\u8bb8\u591a\u5e73\u53f0\u3002 7.\u53ef\u6269\u5c55\uff1a \u5982\u679c\u4f60\u9700\u8981\u4e00\u6bb5\u8fd0\u884c\u5f88\u5feb\u7684\u5173\u952e\u4ee3\u7801\uff0c\u6216\u8005\u662f\u60f3\u8981\u7f16\u5199\u4e00\u4e9b\u4e0d\u613f\u5f00\u653e\u7684\u7b97\u6cd5\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528C\u6216C++\u5b8c\u6210\u90a3\u90e8\u5206\u7a0b\u5e8f\uff0c\u7136\u540e\u4ece\u4f60\u7684Python\u7a0b\u5e8f\u4e2d\u8c03\u7528\u3002 8.\u6570\u636e\u5e93\uff1a Python\u63d0\u4f9b\u6240\u6709\u4e3b\u8981\u7684\u5546\u4e1a\u6570\u636e\u5e93\u7684\u63a5\u53e3\u3002 9.GUI\u7f16\u7a0b\uff1a Python\u652f\u6301GUI\u53ef\u4ee5\u521b\u5efa\u548c\u79fb\u690d\u5230\u8bb8\u591a\u7cfb\u7edf\u8c03\u7528\u3002 10.\u53ef\u5d4c\u5165: \u4f60\u53ef\u4ee5\u5c06Python\u5d4c\u5165\u5230C/C++\u7a0b\u5e8f\uff0c\u8ba9\u4f60\u7684\u7a0b\u5e8f\u7684\u7528\u6237\u83b7\u5f97\"\u811a\u672c\u5316\"\u7684\u80fd\u529b\u3002 Python \u5e94\u7528 \u00b6 Youtube - \u89c6\u9891\u793e\u4ea4\u7f51\u7ad9 Reddit - \u793e\u4ea4\u5206\u4eab\u7f51\u7ad9 Dropbox - \u6587\u4ef6\u5206\u4eab\u670d\u52a1 \u8c46\u74e3\u7f51 - \u56fe\u4e66\u3001\u5531\u7247\u3001\u7535\u5f71\u7b49\u6587\u5316\u4ea7\u54c1\u7684\u8d44\u6599\u6570\u636e\u5e93\u7f51\u7ad9 \u77e5\u4e4e - \u4e00\u4e2a\u95ee\u7b54\u7f51\u7ad9 \u679c\u58f3 - \u4e00\u4e2a\u6cdb\u79d1\u6280\u4e3b\u9898\u7f51\u7ad9 Bottle - Python\u5faeWeb\u6846\u67b6 EVE - \u7f51\u7edc\u6e38\u620fEVE\u5927\u91cf\u4f7f\u7528Python\u8fdb\u884c\u5f00\u53d1 Blender - \u4f7f\u7528Python\u4f5c\u4e3a\u5efa\u6a21\u5de5\u5177\u4e0eGUI\u8bed\u8a00\u7684\u5f00\u6e903D\u7ed8\u56fe\u8f6f\u4ef6 Inkscape - \u4e00\u4e2a\u5f00\u6e90\u7684SVG\u77e2\u91cf\u56fe\u5f62\u7f16\u8f91\u5668\u3002 ... \u6559\u7a0b\u76ee\u5f55 \u00b6 Python \u8bed\u6cd5\u7ed3\u6784 Python \u6570\u636e\u7c7b\u578b Python \u5b57\u7b26\u4e32 Python f \u5b57\u7b26\u4e32 Python \u5217\u8868 Python \u5b57\u5178 Python \u96c6\u5408 Python \u6620\u5c04 Python \u8fd0\u7b97\u7b26 Python \u5173\u952e\u5b57 Python for \u5faa\u73af Python \u8fed\u4ee3\u5668\u548c\u751f\u6210\u5668 Python \u5217\u8868\u63a8\u5bfc\u5f0f Python \u53cd\u8f6c Python \u51fd\u6570 Python \u6b63\u5219\u8868\u8fbe\u5f0f Python \u9762\u5411\u5bf9\u8c61\u7f16\u7a0b Python \u6a21\u5757 Python \u4e2d\u7684\u8f6f\u4ef6\u5305 Python \u5f02\u5e38 Python \u81ea\u7701 Python Lambda \u51fd\u6570 Python \u65e5\u5fd7\u6559\u7a0b \u5e38\u7528Python \u5e93 \u00b6 Python JSON \u6559\u7a0b Python Faker \u6559\u7a0b Python bcrypt \u6559\u7a0b Python \u5957\u63a5\u5b57\u6559\u7a0b Python smtplib \u6559\u7a0b Python YAML \u6559\u7a0b Python \u54c8\u5e0c\u6559\u7a0b Python ConfigParser \u6559\u7a0b Python argparse \u6559\u7a0b Python SQLite \u6559\u7a0b Python Cerberus \u6559\u7a0b Python PyMySQL \u6559\u7a0b Python Peewee \u6559\u7a0b Python pyDAL \u6559\u7a0b Python Pytest \u5355\u5143\u6d4b\u8bd5\u6559\u7a0b BeautifulSoup \u6559\u7a0b Python pyquery \u6559\u7a0b SymPy \u6559\u7a0b Pandas \u6559\u7a0b Matplotlib \u6559\u7a0b Pillow \u6559\u7a0b Python FTP \u6559\u7a0b Python Requests \u6559\u7a0b Python Arrow \u6559\u7a0b Python \u9b54\u672f\u65b9\u6cd5 Python feedparser python Uipath Orchestrator Cloud API \u6559\u7a0b","title":"python \u57fa\u7840\u6559\u7a0b"},{"location":"pages/python/#Python3-\u7b80\u4ecb","text":"","title":"Python3 \u7b80\u4ecb"},{"location":"pages/python/#Python3","text":"\u7b80\u4ecb Python \u662f\u4e00\u4e2a\u9ad8\u5c42\u6b21\u7684\u7ed3\u5408\u4e86\u89e3\u91ca\u6027\u3001\u7f16\u8bd1\u6027\u3001\u4e92\u52a8\u6027\u548c\u9762\u5411\u5bf9\u8c61\u7684\u811a\u672c\u8bed\u8a00\u3002 Python \u7684\u8bbe\u8ba1\u5177\u6709\u5f88\u5f3a\u7684\u53ef\u8bfb\u6027\uff0c\u76f8\u6bd4\u5176\u4ed6\u8bed\u8a00\u7ecf\u5e38\u4f7f\u7528\u82f1\u6587\u5173\u952e\u5b57\uff0c\u5176\u4ed6\u8bed\u8a00\u7684\u4e00\u4e9b\u6807\u70b9\u7b26\u53f7\uff0c\u5b83\u5177\u6709\u6bd4\u5176\u4ed6\u8bed\u8a00\u66f4\u6709\u7279\u8272\u8bed\u6cd5\u7ed3\u6784\u3002 Python \u662f\u4e00\u79cd\u89e3\u91ca\u578b\u8bed\u8a00\uff1a \u8fd9\u610f\u5473\u7740\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u6ca1\u6709\u4e86\u7f16\u8bd1\u8fd9\u4e2a\u73af\u8282\u3002\u7c7b\u4f3c\u4e8ePHP\u548cPerl\u8bed\u8a00\u3002 Python \u662f\u4ea4\u4e92\u5f0f\u8bed\u8a00\uff1a \u8fd9\u610f\u5473\u7740\uff0c\u60a8\u53ef\u4ee5\u5728\u4e00\u4e2a Python \u63d0\u793a\u7b26 >>> \u540e\u76f4\u63a5\u6267\u884c\u4ee3\u7801\u3002 Python \u662f\u9762\u5411\u5bf9\u8c61\u8bed\u8a00: \u8fd9\u610f\u5473\u7740Python\u652f\u6301\u9762\u5411\u5bf9\u8c61\u7684\u98ce\u683c\u6216\u4ee3\u7801\u5c01\u88c5\u5728\u5bf9\u8c61\u7684\u7f16\u7a0b\u6280\u672f\u3002 Python \u662f\u521d\u5b66\u8005\u7684\u8bed\u8a00\uff1a Python \u5bf9\u521d\u7ea7\u7a0b\u5e8f\u5458\u800c\u8a00\uff0c\u662f\u4e00\u79cd\u4f1f\u5927\u7684\u8bed\u8a00\uff0c\u5b83\u652f\u6301\u5e7f\u6cdb\u7684\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\uff0c\u4ece\u7b80\u5355\u7684\u6587\u5b57\u5904\u7406\u5230 WWW \u6d4f\u89c8\u5668\u518d\u5230\u6e38\u620f\u3002","title":"Python3"},{"location":"pages/python/#Python-\u53d1\u5c55\u5386\u53f2","text":"Python \u662f\u7531 Guido van Rossum \u5728\u516b\u5341\u5e74\u4ee3\u672b\u548c\u4e5d\u5341\u5e74\u4ee3\u521d\uff0c\u5728\u8377\u5170\u56fd\u5bb6\u6570\u5b66\u548c\u8ba1\u7b97\u673a\u79d1\u5b66\u7814\u7a76\u6240\u8bbe\u8ba1\u51fa\u6765\u7684\u3002 Python \u672c\u8eab\u4e5f\u662f\u7531\u8bf8\u591a\u5176\u4ed6\u8bed\u8a00\u53d1\u5c55\u800c\u6765\u7684,\u8fd9\u5305\u62ec ABC\u3001Modula-3\u3001C\u3001C++\u3001Algol-68\u3001SmallTalk\u3001Unix shell \u548c\u5176\u4ed6\u7684\u811a\u672c\u8bed\u8a00\u7b49\u7b49\u3002 \u50cf Perl \u8bed\u8a00\u4e00\u6837\uff0cPython \u6e90\u4ee3\u7801\u540c\u6837\u9075\u5faa GPL \\(GNU General Public License\\) \u534f\u8bae\u3002 \u73b0\u5728 Python \u662f\u7531\u4e00\u4e2a\u6838\u5fc3\u5f00\u53d1\u56e2\u961f\u5728\u7ef4\u62a4\uff0cGuido van Rossum \u4ecd\u7136\u5360\u636e\u7740\u81f3\u5173\u91cd\u8981\u7684\u4f5c\u7528\uff0c\u6307\u5bfc\u5176\u8fdb\u5c55\u3002 Python 2.0 \u4e8e 2000 \u5e74 10 \u6708 16 \u65e5\u53d1\u5e03\uff0c\u589e\u52a0\u4e86\u5b9e\u73b0\u5b8c\u6574\u7684\u5783\u573e\u56de\u6536\uff0c\u5e76\u4e14\u652f\u6301 Unicode\u3002 Python 3.0 \u4e8e 2008 \u5e74 12 \u6708 3 \u65e5\u53d1\u5e03\uff0c\u6b64\u7248\u4e0d\u5b8c\u5168\u517c\u5bb9\u4e4b\u524d\u7684 Python \u6e90\u4ee3\u7801\u3002\u4e0d\u8fc7\uff0c\u5f88\u591a\u65b0\u7279\u6027\u540e\u6765\u4e5f\u88ab\u79fb\u690d\u5230\u65e7\u7684Python 2.6/2.7\u7248\u672c\u3002 Python 3.0 \u7248\u672c\uff0c\u5e38\u88ab\u79f0\u4e3a Python 3000\uff0c\u6216\u7b80\u79f0 Py3k\u3002\u76f8\u5bf9\u4e8e Python \u7684\u65e9\u671f\u7248\u672c\uff0c\u8fd9\u662f\u4e00\u4e2a\u8f83\u5927\u7684\u5347\u7ea7\u3002 Python 2.7 \u88ab\u786e\u5b9a\u4e3a\u6700\u540e\u4e00\u4e2a Python 2.x \u7248\u672c\uff0c\u5b83\u9664\u4e86\u652f\u6301 Python 2.x \u8bed\u6cd5\u5916\uff0c\u8fd8\u652f\u6301\u90e8\u5206 Python 3.1 \u8bed\u6cd5\u3002","title":"Python \u53d1\u5c55\u5386\u53f2"},{"location":"pages/python/#Python-\u7279\u70b9","text":"1.\u6613\u4e8e\u5b66\u4e60\uff1a Python\u6709\u76f8\u5bf9\u8f83\u5c11\u7684\u5173\u952e\u5b57\uff0c\u7ed3\u6784\u7b80\u5355\uff0c\u548c\u4e00\u4e2a\u660e\u786e\u5b9a\u4e49\u7684\u8bed\u6cd5\uff0c\u5b66\u4e60\u8d77\u6765\u66f4\u52a0\u7b80\u5355\u3002 2.\u6613\u4e8e\u9605\u8bfb\uff1a Python\u4ee3\u7801\u5b9a\u4e49\u7684\u66f4\u6e05\u6670\u3002 3.\u6613\u4e8e\u7ef4\u62a4\uff1a Python\u7684\u6210\u529f\u5728\u4e8e\u5b83\u7684\u6e90\u4ee3\u7801\u662f\u76f8\u5f53\u5bb9\u6613\u7ef4\u62a4\u7684\u3002 4.\u4e00\u4e2a\u5e7f\u6cdb\u7684\u6807\u51c6\u5e93\uff1a Python\u7684\u6700\u5927\u7684\u4f18\u52bf\u4e4b\u4e00\u662f\u4e30\u5bcc\u7684\u5e93\uff0c\u8de8\u5e73\u53f0\u7684\uff0c\u5728UNIX\uff0cWindows\u548cMacintosh\u517c\u5bb9\u5f88\u597d\u3002 5.\u4e92\u52a8\u6a21\u5f0f\uff1a \u4e92\u52a8\u6a21\u5f0f\u7684\u652f\u6301\uff0c\u60a8\u53ef\u4ee5\u4ece\u7ec8\u7aef\u8f93\u5165\u6267\u884c\u4ee3\u7801\u5e76\u83b7\u5f97\u7ed3\u679c\u7684\u8bed\u8a00\uff0c\u4e92\u52a8\u7684\u6d4b\u8bd5\u548c\u8c03\u8bd5\u4ee3\u7801\u7247\u65ad\u3002 6.\u53ef\u79fb\u690d\uff1a \u57fa\u4e8e\u5176\u5f00\u653e\u6e90\u4ee3\u7801\u7684\u7279\u6027\uff0cPython\u5df2\u7ecf\u88ab\u79fb\u690d\uff08\u4e5f\u5c31\u662f\u4f7f\u5176\u5de5\u4f5c\uff09\u5230\u8bb8\u591a\u5e73\u53f0\u3002 7.\u53ef\u6269\u5c55\uff1a \u5982\u679c\u4f60\u9700\u8981\u4e00\u6bb5\u8fd0\u884c\u5f88\u5feb\u7684\u5173\u952e\u4ee3\u7801\uff0c\u6216\u8005\u662f\u60f3\u8981\u7f16\u5199\u4e00\u4e9b\u4e0d\u613f\u5f00\u653e\u7684\u7b97\u6cd5\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528C\u6216C++\u5b8c\u6210\u90a3\u90e8\u5206\u7a0b\u5e8f\uff0c\u7136\u540e\u4ece\u4f60\u7684Python\u7a0b\u5e8f\u4e2d\u8c03\u7528\u3002 8.\u6570\u636e\u5e93\uff1a Python\u63d0\u4f9b\u6240\u6709\u4e3b\u8981\u7684\u5546\u4e1a\u6570\u636e\u5e93\u7684\u63a5\u53e3\u3002 9.GUI\u7f16\u7a0b\uff1a Python\u652f\u6301GUI\u53ef\u4ee5\u521b\u5efa\u548c\u79fb\u690d\u5230\u8bb8\u591a\u7cfb\u7edf\u8c03\u7528\u3002 10.\u53ef\u5d4c\u5165: \u4f60\u53ef\u4ee5\u5c06Python\u5d4c\u5165\u5230C/C++\u7a0b\u5e8f\uff0c\u8ba9\u4f60\u7684\u7a0b\u5e8f\u7684\u7528\u6237\u83b7\u5f97\"\u811a\u672c\u5316\"\u7684\u80fd\u529b\u3002","title":"Python \u7279\u70b9"},{"location":"pages/python/#Python-\u5e94\u7528","text":"Youtube - \u89c6\u9891\u793e\u4ea4\u7f51\u7ad9 Reddit - \u793e\u4ea4\u5206\u4eab\u7f51\u7ad9 Dropbox - \u6587\u4ef6\u5206\u4eab\u670d\u52a1 \u8c46\u74e3\u7f51 - \u56fe\u4e66\u3001\u5531\u7247\u3001\u7535\u5f71\u7b49\u6587\u5316\u4ea7\u54c1\u7684\u8d44\u6599\u6570\u636e\u5e93\u7f51\u7ad9 \u77e5\u4e4e - \u4e00\u4e2a\u95ee\u7b54\u7f51\u7ad9 \u679c\u58f3 - \u4e00\u4e2a\u6cdb\u79d1\u6280\u4e3b\u9898\u7f51\u7ad9 Bottle - Python\u5faeWeb\u6846\u67b6 EVE - \u7f51\u7edc\u6e38\u620fEVE\u5927\u91cf\u4f7f\u7528Python\u8fdb\u884c\u5f00\u53d1 Blender - \u4f7f\u7528Python\u4f5c\u4e3a\u5efa\u6a21\u5de5\u5177\u4e0eGUI\u8bed\u8a00\u7684\u5f00\u6e903D\u7ed8\u56fe\u8f6f\u4ef6 Inkscape - \u4e00\u4e2a\u5f00\u6e90\u7684SVG\u77e2\u91cf\u56fe\u5f62\u7f16\u8f91\u5668\u3002 ...","title":"Python \u5e94\u7528"},{"location":"pages/python/#\u6559\u7a0b\u76ee\u5f55","text":"Python \u8bed\u6cd5\u7ed3\u6784 Python \u6570\u636e\u7c7b\u578b Python \u5b57\u7b26\u4e32 Python f \u5b57\u7b26\u4e32 Python \u5217\u8868 Python \u5b57\u5178 Python \u96c6\u5408 Python \u6620\u5c04 Python \u8fd0\u7b97\u7b26 Python \u5173\u952e\u5b57 Python for \u5faa\u73af Python \u8fed\u4ee3\u5668\u548c\u751f\u6210\u5668 Python \u5217\u8868\u63a8\u5bfc\u5f0f Python \u53cd\u8f6c Python \u51fd\u6570 Python \u6b63\u5219\u8868\u8fbe\u5f0f Python \u9762\u5411\u5bf9\u8c61\u7f16\u7a0b Python \u6a21\u5757 Python \u4e2d\u7684\u8f6f\u4ef6\u5305 Python \u5f02\u5e38 Python \u81ea\u7701 Python Lambda \u51fd\u6570 Python \u65e5\u5fd7\u6559\u7a0b","title":"\u6559\u7a0b\u76ee\u5f55"},{"location":"pages/python/#\u5e38\u7528Python-\u5e93","text":"Python JSON \u6559\u7a0b Python Faker \u6559\u7a0b Python bcrypt \u6559\u7a0b Python \u5957\u63a5\u5b57\u6559\u7a0b Python smtplib \u6559\u7a0b Python YAML \u6559\u7a0b Python \u54c8\u5e0c\u6559\u7a0b Python ConfigParser \u6559\u7a0b Python argparse \u6559\u7a0b Python SQLite \u6559\u7a0b Python Cerberus \u6559\u7a0b Python PyMySQL \u6559\u7a0b Python Peewee \u6559\u7a0b Python pyDAL \u6559\u7a0b Python Pytest \u5355\u5143\u6d4b\u8bd5\u6559\u7a0b BeautifulSoup \u6559\u7a0b Python pyquery \u6559\u7a0b SymPy \u6559\u7a0b Pandas \u6559\u7a0b Matplotlib \u6559\u7a0b Pillow \u6559\u7a0b Python FTP \u6559\u7a0b Python Requests \u6559\u7a0b Python Arrow \u6559\u7a0b Python \u9b54\u672f\u65b9\u6cd5 Python feedparser python Uipath Orchestrator Cloud API \u6559\u7a0b","title":"\u5e38\u7528Python \u5e93"},{"location":"pages/python/pytutorial/python-argparse/","text":"Python argparse \u6559\u7a0b \u00b6 Python argparse \u6559\u7a0b \u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528 argparse \u6a21\u5757\u89e3\u6790 Python \u4e2d\u7684\u547d\u4ee4\u884c\u53c2\u6570\u3002 Python \u7684 argparse \u00b6 \u901a\u8fc7 argparse \u6a21\u5757\uff0c\u53ef\u4ee5\u8f7b\u677e\u7f16\u5199\u7528\u6237\u53cb\u597d\u7684\u547d\u4ee4\u884c\u754c\u9762\u3002 \u5b83\u89e3\u6790 sys.argv \u4e2d\u5b9a\u4e49\u7684\u53c2\u6570\u3002 argparse \u6a21\u5757\u8fd8\u4f1a\u81ea\u52a8\u751f\u6210\u5e2e\u52a9\u548c\u4f7f\u7528\u6d88\u606f\uff0c\u5e76\u5728\u7528\u6237\u4e3a\u7a0b\u5e8f\u63d0\u4f9b\u65e0\u6548\u53c2\u6570\u65f6\u53d1\u51fa\u9519\u8bef\u3002 argparse \u662f\u6807\u51c6\u6a21\u5757\uff1b \u6211\u4eec\u4e0d\u9700\u8981\u5b89\u88c5\u5b83\u3002 \u4f7f\u7528 ArgumentParser \u521b\u5efa\u4e00\u4e2a\u89e3\u6790\u5668\uff0c\u5e76\u4f7f\u7528 add_argument() \u6dfb\u52a0\u4e00\u4e2a\u65b0\u53c2\u6570\u3002 \u53c2\u6570\u53ef\u4ee5\u662f\u53ef\u9009\u7684\uff0c\u5fc5\u9700\u7684\u6216\u5b9a\u4f4d\u7684\u3002 Python argparse \u53ef\u9009\u53c2\u6570 \u00b6 \u4e0b\u9762\u7684\u793a\u4f8b\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u53c2\u6570\u89e3\u6790\u5668\u3002 optional_arg.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/env python import argparse # help flag provides flag help # store_true actions stores argument as True parser = argparse.ArgumentParser() parser.add_argument('-o', '--output', action='store_true', help=\"shows output\") args = parser.parse_args() if args.output: print(\"This is some output\") \u8be5\u793a\u4f8b\u6dfb\u52a0\u4e86\u4e00\u4e2a\u5177\u6709\u4e24\u4e2a\u9009\u9879\u7684\u53c2\u6570\uff1ashort -o \u548c long --ouput \u3002 \u8fd9\u4e9b\u662f\u53ef\u9009\u53c2\u6570\u3002 1 import argparse \u8be5\u6a21\u5757\u5df2\u5bfc\u5165\u3002 1 2 parser.add_argument('-o', '--output', action='store_true', help=\"shows output\") \u53c2\u6570\u6dfb\u52a0\u4e86 add_argument() \u3002 \u5982\u679c\u8bbe\u7f6e\u4e3a store_true \uff0c\u5219 action \u4f1a\u5c06\u53c2\u6570\u5b58\u50a8\u4e3a True \u3002 help \u9009\u9879\u63d0\u4f9b\u53c2\u6570\u5e2e\u52a9\u3002 1 args = parser.parse_args() \u53c2\u6570\u7531 parse_args() \u89e3\u6790\u3002 \u89e3\u6790\u7684\u53c2\u6570\u4f5c\u4e3a\u5bf9\u8c61\u5c5e\u6027\u5b58\u5728\u3002 \u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u5c06\u6709 args.output \u5c5e\u6027\u3002 1 2 if args.output: print(\"This is some output\") \u5982\u679c\u5b58\u5728\u8be5\u53c2\u6570\uff0c\u6211\u4eec\u5c06\u663e\u793a\u4e00\u4e9b\u8f93\u51fa\u3002 1 2 3 4 $ optional_arg.py -o This is some output $ optional_arg.py --output This is some output \u6211\u4eec\u4f7f\u7528 -o \u548c --output \u8fd0\u884c\u7a0b\u5e8f\u3002 1 2 3 4 5 6 $ optional_arg.py --help usage: optional_arg.py [-h] [-o] optional arguments: -h, --help show this help message and exit -o, --output shows output \u6211\u4eec\u53ef\u4ee5\u5411\u7a0b\u5e8f\u663e\u793a\u5e2e\u52a9\u3002 Python argparse \u5fc5\u9700\u53c2\u6570 \u00b6 \u4f7f\u7528 required \u9009\u9879\u9700\u8981\u4e00\u4e2a\u53c2\u6570\u3002 required_arg.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python import argparse # required arg parser = argparse.ArgumentParser() parser.add_argument('--name', required=True) args = parser.parse_args() print(f'Hello {args.name}') \u8be5\u793a\u4f8b\u5fc5\u987b\u6307\u5b9a name \u9009\u9879\uff1b \u5426\u5219\u5931\u8d25\u3002 1 2 3 4 5 6 $ required_arg.py --name Peter Hello Peter $ required_arg.py usage: required_arg.py [-h] --name NAME required_arg.py: error: the following arguments are required: --name Python argparse \u4f4d\u7f6e\u53c2\u6570 \u00b6 \u4ee5\u4e0b\u793a\u4f8b\u9002\u7528\u4e8e\u4f4d\u7f6e\u53c2\u6570\u3002 \u5b83\u4eec\u662f\u4f7f\u7528 add_argument() \u521b\u5efa\u7684\u3002 positional_arg.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/env python import argparse # positional args parser = argparse.ArgumentParser() parser.add_argument('name') parser.add_argument('age') args = parser.parse_args() print(f'{args.name} is {args.age} years old') \u8be5\u793a\u4f8b\u9700\u8981\u4e24\u4e2a\u4f4d\u7f6e\u53c2\u6570\uff1aname \u548c age\u3002 1 2 parser.add_argument('name') parser.add_argument('age') \u521b\u5efa\u4f4d\u7f6e\u53c2\u6570\u65f6\u4e0d\u5e26\u7834\u6298\u53f7\u524d\u7f00\u5b57\u7b26\u3002 1 2 $ positional_arg.py Peter 23 Peter is 23 years old \u8fd9\u662f\u793a\u4f8b\u8f93\u51fa\u3002 Python argparse \u76ee\u6807 \u00b6 add_argument() \u7684 dest \u9009\u9879\u4e3a\u53c2\u6570\u6307\u5b9a\u540d\u79f0\u3002 \u5982\u679c\u672a\u7ed9\u51fa\uff0c\u5219\u4ece\u9009\u9879\u4e2d\u63a8\u65ad\u51fa\u6765\u3002 dest.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/usr/bin/env python import argparse import datetime # dest gives a different name to a flag parser = argparse.ArgumentParser() parser.add_argument('-n', dest='now', action='store_true', help=\"shows now\") args = parser.parse_args() # we can refer to the flag # by a new name if args.now: now = datetime.datetime.now() print(f\"Now: {now}\") \u7a0b\u5e8f\u5c06 now \u540d\u79f0\u8d4b\u4e88 -n \u53c2\u6570\u3002 1 2 $ dest.py -n Now: 2019-03-22 17:37:40.406571 Python argparse \u7c7b\u578b \u00b6 type \u53c2\u6570\u786e\u5b9a\u53c2\u6570\u7c7b\u578b\u3002 rand_int.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env python import argparse import random # type determines the type of the argument parser = argparse.ArgumentParser() parser.add_argument('-n', type=int, required=True, help=\"define the number of random integers\") args = parser.parse_args() n = args.n for i in range(n): print(random.randint(-100, 100)) \u7a0b\u5e8f\u663e\u793a\u4ece-100 \u5230 100 \u7684 n \u4e2a\u968f\u673a\u6574\u6570\u3002 1 2 parser.add_argument('-n', type=int, required=True, help=\"define the number of random integers\") -n \u9009\u9879\u9700\u8981\u6574\u6570\u503c\uff0c\u8fd9\u662f\u5fc5\u9700\u7684\u3002 1 2 3 4 $ rand_int.py -n 3 92 -61 -61 Python argparse \u9ed8\u8ba4 \u00b6 \u5982\u679c\u672a\u6307\u5b9a default \u9009\u9879\uff0c\u5219\u6307\u5b9a\u9ed8\u8ba4\u503c\u3002 power.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #!/usr/bin/env python import argparse # required defines a mandatory argument # default defines a default value if not specified parser = argparse.ArgumentParser() parser.add_argument('-b', type=int, required=True, help=\"defines the base value\") parser.add_argument('-e', type=int, default=2, help=\"defines the exponent value\") args = parser.parse_args() val = 1 base = args.b exp = args.e for i in range(exp): val *= base print(val) \u8be5\u793a\u4f8b\u8ba1\u7b97\u6307\u6570\u3002 \u4e0d\u9700\u8981\u6307\u6570\u503c\uff1b \u5982\u679c\u672a\u7ed9\u51fa\uff0c\u5219\u9ed8\u8ba4\u503c\u4e3a 2\u3002 1 2 3 4 $ power.py -b 3 9 $ power.py -b 3 -e 3 27 Python argparse metavar \u00b6 metavar \u9009\u9879\u4e3a\u9519\u8bef\u7684\u671f\u671b\u503c\u547d\u540d\uff0c\u5e76\u63d0\u4f9b\u5e2e\u52a9\u8f93\u51fa\u3002 metavar.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/usr/bin/env python import argparse # metavar gives name to the expected value # in error and help outputs parser = argparse.ArgumentParser() parser.add_argument('-v', type=int, required=True, metavar='value', help=\"computes cube for the given value\") args = parser.parse_args() print(args) val = args.v print(val * val * val) \u8be5\u793a\u4f8b\u5c06\u671f\u671b\u503c\u547d\u540d\u4e3a value \u3002 \u9ed8\u8ba4\u540d\u79f0\u4e3a V \u3002 1 2 3 4 5 6 $ metavar.py -h usage: metavar.py [-h] -v value optional arguments: -h, --help show this help message and exit -v value computes cube for the given value \u7ed9\u5b9a\u7684\u540d\u79f0\u663e\u793a\u5728\u5e2e\u52a9\u8f93\u51fa\u4e2d\u3002 Python argparse \u8ffd\u52a0\u64cd\u4f5c \u00b6 append \u64cd\u4f5c\u5141\u8bb8\u5bf9\u91cd\u590d\u9009\u9879\u8fdb\u884c\u5206\u7ec4\u3002 appending.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/usr/bin/env python import argparse # append action allows to group repeating # options parser = argparse.ArgumentParser() parser.add_argument('-n', '--name', dest='names', action='append', help=\"provides names to greet\") args = parser.parse_args() names = args.names for name in names: print(f'Hello {name}!') \u8be5\u793a\u4f8b\u751f\u6210\u95ee\u5019\u8bed\uff0c\u5e76\u4f7f\u7528 n \u6216 name \u9009\u9879\u6307\u5b9a\u6240\u6709\u540d\u79f0\u3002 \u5b83\u4eec\u53ef\u4ee5\u91cd\u590d\u591a\u6b21\u91cd\u590d\u3002 1 2 3 4 $ appending.py -n Peter -n Lucy --name Jane Hello Peter! Hello Lucy! Hello Jane! Python \u7684 argparse nargs \u00b6 nargs \u6307\u5b9a\u5e94\u4f7f\u7528\u7684\u547d\u4ee4\u884c\u53c2\u6570\u7684\u6570\u91cf\u3002 charseq.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #!/usr/bin/env python import argparse import sys # nargs sets the required number of argument values # metavar gives name to argument values in error and help output parser = argparse.ArgumentParser() parser.add_argument('chars', type=str, nargs=2, metavar='c', help='starting and ending character') args = parser.parse_args() try: v1 = ord(args.chars[0]) v2 = ord(args.chars[1]) except TypeError as e: print('Error: arguments must be characters') parser.print_help() sys.exit(1) if v1 > v2: print('first letter must precede the second in alphabet') parser.print_help() sys.exit(1) \u8be5\u793a\u4f8b\u663e\u793a\u4e86\u4ece\u5b57\u7b26\u4e00\u5230\u5b57\u7b26\u4e8c\u7684\u5b57\u7b26\u5e8f\u5217\u3002 \u5b83\u9700\u8981\u4e24\u4e2a\u53c2\u6570\u3002 1 2 parser.add_argument('chars', type=str, nargs=2, metavar='c', help='starting and ending character') \u4f7f\u7528 nargs=2 \uff0c\u6211\u4eec\u6307\u5b9a\u671f\u671b\u4e24\u4e2a\u53c2\u6570\u3002 1 2 $ charseq.py e k e f g h i j k \u7a0b\u5e8f\u663e\u793a\u4ece e \u5230 k \u7684\u5b57\u7b26\u5e8f\u5217\u3002 \u53ef\u4ee5\u4f7f\u7528 * \u5b57\u7b26\u8bbe\u7f6e\u53ef\u53d8\u6570\u91cf\u7684\u53c2\u6570\u3002 var_args.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python import argparse # * nargs expects 0 or more arguments parser = argparse.ArgumentParser() parser.add_argument('num', type=int, nargs='*') args = parser.parse_args() print(f\"The sum of values is {sum(args.num)}\") \u8be5\u793a\u4f8b\u8ba1\u7b97\u503c\u7684\u603b\u548c\u3002 \u6211\u4eec\u53ef\u4ee5\u4e3a\u7a0b\u5e8f\u6307\u5b9a\u53ef\u53d8\u6570\u91cf\u7684\u53c2\u6570\u3002 1 2 $ var_args.py 1 2 3 4 5 The sum of values is 15 Python argparse \u9009\u62e9 \u00b6 choices \u9009\u9879\u5c06\u53c2\u6570\u9650\u5236\u4e3a\u7ed9\u5b9a\u5217\u8868\u3002 mytime.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #!/usr/bin/env python import argparse import datetime import time # choices limits argument values to the # given list parser = argparse.ArgumentParser() parser.add_argument('--now', dest='format', choices=['std', 'iso', 'unix', 'tz'], help=\"shows datetime in given format\") args = parser.parse_args() fmt = args.format if fmt == 'std': print(datetime.date.today()) elif fmt == 'iso': print(datetime.datetime.now().isoformat()) elif fmt == 'unix': print(time.time()) elif fmt == 'tz': print(datetime.datetime.now(datetime.timezone.utc)) \u5728\u793a\u4f8b\u4e2d\uff0c now \u9009\u9879\u53ef\u4ee5\u63a5\u53d7\u4ee5\u4e0b\u503c\uff1a std \uff0c iso \uff0c unix \u6216 tz \u3002 1 2 3 4 5 $ mytime.py --now iso 2019-03-27T11:34:54.106643 $ mytime.py --now unix 1553682898.422863 \u5934\u4f8b\u5b50 \u00b6 \u4ee5\u4e0b\u793a\u4f8b\u6a21\u4eff Linux head \u547d\u4ee4\u3002 \u5b83\u663e\u793a\u4e86\u6587\u4ef6\u5f00\u5934\u7684 n \u884c\u6587\u672c\u3002 words.txt 1 2 3 4 5 6 sky top forest wood lake wood \u5bf9\u4e8e\u793a\u4f8b\uff0c\u6211\u4eec\u6709\u8fd9\u4e2a\u5c0f\u7684\u6d4b\u8bd5\u6587\u4ef6\u3002 head.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #!/usr/bin/env python import argparse from pathlib import Path # head command # working with positional arguments parser = argparse.ArgumentParser() parser.add_argument('f', type=str, help='file name') parser.add_argument('n', type=int, help='show n lines from the top') args = parser.parse_args() filename = args.f lines = Path(filename).read_text().splitlines() for line in lines[:args.n]: print(line) \u8be5\u793a\u4f8b\u6709\u4e24\u4e2a\u9009\u9879\uff1a f \u8868\u793a\u6587\u4ef6\u540d\uff0c -n \u8868\u793a\u8981\u663e\u793a\u7684\u884c\u6570\u3002 1 2 3 4 $ head.py words.txt 3 sky top forest \u8fd9\u662f Python argparse \u6559\u7a0b\u3002","title":"Python argparse \u6559\u7a0b"},{"location":"pages/python/pytutorial/python-argparse/#Python-argparse-\u6559\u7a0b","text":"Python argparse \u6559\u7a0b \u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528 argparse \u6a21\u5757\u89e3\u6790 Python \u4e2d\u7684\u547d\u4ee4\u884c\u53c2\u6570\u3002","title":"Python argparse \u6559\u7a0b"},{"location":"pages/python/pytutorial/python-argparse/#Python-\u7684-argparse","text":"\u901a\u8fc7 argparse \u6a21\u5757\uff0c\u53ef\u4ee5\u8f7b\u677e\u7f16\u5199\u7528\u6237\u53cb\u597d\u7684\u547d\u4ee4\u884c\u754c\u9762\u3002 \u5b83\u89e3\u6790 sys.argv \u4e2d\u5b9a\u4e49\u7684\u53c2\u6570\u3002 argparse \u6a21\u5757\u8fd8\u4f1a\u81ea\u52a8\u751f\u6210\u5e2e\u52a9\u548c\u4f7f\u7528\u6d88\u606f\uff0c\u5e76\u5728\u7528\u6237\u4e3a\u7a0b\u5e8f\u63d0\u4f9b\u65e0\u6548\u53c2\u6570\u65f6\u53d1\u51fa\u9519\u8bef\u3002 argparse \u662f\u6807\u51c6\u6a21\u5757\uff1b \u6211\u4eec\u4e0d\u9700\u8981\u5b89\u88c5\u5b83\u3002 \u4f7f\u7528 ArgumentParser \u521b\u5efa\u4e00\u4e2a\u89e3\u6790\u5668\uff0c\u5e76\u4f7f\u7528 add_argument() \u6dfb\u52a0\u4e00\u4e2a\u65b0\u53c2\u6570\u3002 \u53c2\u6570\u53ef\u4ee5\u662f\u53ef\u9009\u7684\uff0c\u5fc5\u9700\u7684\u6216\u5b9a\u4f4d\u7684\u3002","title":"Python \u7684 argparse"},{"location":"pages/python/pytutorial/python-argparse/#Python-argparse-\u53ef\u9009\u53c2\u6570","text":"\u4e0b\u9762\u7684\u793a\u4f8b\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u53c2\u6570\u89e3\u6790\u5668\u3002 optional_arg.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/env python import argparse # help flag provides flag help # store_true actions stores argument as True parser = argparse.ArgumentParser() parser.add_argument('-o', '--output', action='store_true', help=\"shows output\") args = parser.parse_args() if args.output: print(\"This is some output\") \u8be5\u793a\u4f8b\u6dfb\u52a0\u4e86\u4e00\u4e2a\u5177\u6709\u4e24\u4e2a\u9009\u9879\u7684\u53c2\u6570\uff1ashort -o \u548c long --ouput \u3002 \u8fd9\u4e9b\u662f\u53ef\u9009\u53c2\u6570\u3002 1 import argparse \u8be5\u6a21\u5757\u5df2\u5bfc\u5165\u3002 1 2 parser.add_argument('-o', '--output', action='store_true', help=\"shows output\") \u53c2\u6570\u6dfb\u52a0\u4e86 add_argument() \u3002 \u5982\u679c\u8bbe\u7f6e\u4e3a store_true \uff0c\u5219 action \u4f1a\u5c06\u53c2\u6570\u5b58\u50a8\u4e3a True \u3002 help \u9009\u9879\u63d0\u4f9b\u53c2\u6570\u5e2e\u52a9\u3002 1 args = parser.parse_args() \u53c2\u6570\u7531 parse_args() \u89e3\u6790\u3002 \u89e3\u6790\u7684\u53c2\u6570\u4f5c\u4e3a\u5bf9\u8c61\u5c5e\u6027\u5b58\u5728\u3002 \u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u5c06\u6709 args.output \u5c5e\u6027\u3002 1 2 if args.output: print(\"This is some output\") \u5982\u679c\u5b58\u5728\u8be5\u53c2\u6570\uff0c\u6211\u4eec\u5c06\u663e\u793a\u4e00\u4e9b\u8f93\u51fa\u3002 1 2 3 4 $ optional_arg.py -o This is some output $ optional_arg.py --output This is some output \u6211\u4eec\u4f7f\u7528 -o \u548c --output \u8fd0\u884c\u7a0b\u5e8f\u3002 1 2 3 4 5 6 $ optional_arg.py --help usage: optional_arg.py [-h] [-o] optional arguments: -h, --help show this help message and exit -o, --output shows output \u6211\u4eec\u53ef\u4ee5\u5411\u7a0b\u5e8f\u663e\u793a\u5e2e\u52a9\u3002","title":"Python argparse \u53ef\u9009\u53c2\u6570"},{"location":"pages/python/pytutorial/python-argparse/#Python-argparse-\u5fc5\u9700\u53c2\u6570","text":"\u4f7f\u7528 required \u9009\u9879\u9700\u8981\u4e00\u4e2a\u53c2\u6570\u3002 required_arg.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python import argparse # required arg parser = argparse.ArgumentParser() parser.add_argument('--name', required=True) args = parser.parse_args() print(f'Hello {args.name}') \u8be5\u793a\u4f8b\u5fc5\u987b\u6307\u5b9a name \u9009\u9879\uff1b \u5426\u5219\u5931\u8d25\u3002 1 2 3 4 5 6 $ required_arg.py --name Peter Hello Peter $ required_arg.py usage: required_arg.py [-h] --name NAME required_arg.py: error: the following arguments are required: --name","title":"Python argparse \u5fc5\u9700\u53c2\u6570"},{"location":"pages/python/pytutorial/python-argparse/#Python-argparse-\u4f4d\u7f6e\u53c2\u6570","text":"\u4ee5\u4e0b\u793a\u4f8b\u9002\u7528\u4e8e\u4f4d\u7f6e\u53c2\u6570\u3002 \u5b83\u4eec\u662f\u4f7f\u7528 add_argument() \u521b\u5efa\u7684\u3002 positional_arg.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/env python import argparse # positional args parser = argparse.ArgumentParser() parser.add_argument('name') parser.add_argument('age') args = parser.parse_args() print(f'{args.name} is {args.age} years old') \u8be5\u793a\u4f8b\u9700\u8981\u4e24\u4e2a\u4f4d\u7f6e\u53c2\u6570\uff1aname \u548c age\u3002 1 2 parser.add_argument('name') parser.add_argument('age') \u521b\u5efa\u4f4d\u7f6e\u53c2\u6570\u65f6\u4e0d\u5e26\u7834\u6298\u53f7\u524d\u7f00\u5b57\u7b26\u3002 1 2 $ positional_arg.py Peter 23 Peter is 23 years old \u8fd9\u662f\u793a\u4f8b\u8f93\u51fa\u3002","title":"Python argparse \u4f4d\u7f6e\u53c2\u6570"},{"location":"pages/python/pytutorial/python-argparse/#Python-argparse-\u76ee\u6807","text":"add_argument() \u7684 dest \u9009\u9879\u4e3a\u53c2\u6570\u6307\u5b9a\u540d\u79f0\u3002 \u5982\u679c\u672a\u7ed9\u51fa\uff0c\u5219\u4ece\u9009\u9879\u4e2d\u63a8\u65ad\u51fa\u6765\u3002 dest.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/usr/bin/env python import argparse import datetime # dest gives a different name to a flag parser = argparse.ArgumentParser() parser.add_argument('-n', dest='now', action='store_true', help=\"shows now\") args = parser.parse_args() # we can refer to the flag # by a new name if args.now: now = datetime.datetime.now() print(f\"Now: {now}\") \u7a0b\u5e8f\u5c06 now \u540d\u79f0\u8d4b\u4e88 -n \u53c2\u6570\u3002 1 2 $ dest.py -n Now: 2019-03-22 17:37:40.406571","title":"Python argparse \u76ee\u6807"},{"location":"pages/python/pytutorial/python-argparse/#Python-argparse-\u7c7b\u578b","text":"type \u53c2\u6570\u786e\u5b9a\u53c2\u6570\u7c7b\u578b\u3002 rand_int.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env python import argparse import random # type determines the type of the argument parser = argparse.ArgumentParser() parser.add_argument('-n', type=int, required=True, help=\"define the number of random integers\") args = parser.parse_args() n = args.n for i in range(n): print(random.randint(-100, 100)) \u7a0b\u5e8f\u663e\u793a\u4ece-100 \u5230 100 \u7684 n \u4e2a\u968f\u673a\u6574\u6570\u3002 1 2 parser.add_argument('-n', type=int, required=True, help=\"define the number of random integers\") -n \u9009\u9879\u9700\u8981\u6574\u6570\u503c\uff0c\u8fd9\u662f\u5fc5\u9700\u7684\u3002 1 2 3 4 $ rand_int.py -n 3 92 -61 -61","title":"Python argparse \u7c7b\u578b"},{"location":"pages/python/pytutorial/python-argparse/#Python-argparse-\u9ed8\u8ba4","text":"\u5982\u679c\u672a\u6307\u5b9a default \u9009\u9879\uff0c\u5219\u6307\u5b9a\u9ed8\u8ba4\u503c\u3002 power.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #!/usr/bin/env python import argparse # required defines a mandatory argument # default defines a default value if not specified parser = argparse.ArgumentParser() parser.add_argument('-b', type=int, required=True, help=\"defines the base value\") parser.add_argument('-e', type=int, default=2, help=\"defines the exponent value\") args = parser.parse_args() val = 1 base = args.b exp = args.e for i in range(exp): val *= base print(val) \u8be5\u793a\u4f8b\u8ba1\u7b97\u6307\u6570\u3002 \u4e0d\u9700\u8981\u6307\u6570\u503c\uff1b \u5982\u679c\u672a\u7ed9\u51fa\uff0c\u5219\u9ed8\u8ba4\u503c\u4e3a 2\u3002 1 2 3 4 $ power.py -b 3 9 $ power.py -b 3 -e 3 27","title":"Python argparse \u9ed8\u8ba4"},{"location":"pages/python/pytutorial/python-argparse/#Python-argparse-metavar","text":"metavar \u9009\u9879\u4e3a\u9519\u8bef\u7684\u671f\u671b\u503c\u547d\u540d\uff0c\u5e76\u63d0\u4f9b\u5e2e\u52a9\u8f93\u51fa\u3002 metavar.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/usr/bin/env python import argparse # metavar gives name to the expected value # in error and help outputs parser = argparse.ArgumentParser() parser.add_argument('-v', type=int, required=True, metavar='value', help=\"computes cube for the given value\") args = parser.parse_args() print(args) val = args.v print(val * val * val) \u8be5\u793a\u4f8b\u5c06\u671f\u671b\u503c\u547d\u540d\u4e3a value \u3002 \u9ed8\u8ba4\u540d\u79f0\u4e3a V \u3002 1 2 3 4 5 6 $ metavar.py -h usage: metavar.py [-h] -v value optional arguments: -h, --help show this help message and exit -v value computes cube for the given value \u7ed9\u5b9a\u7684\u540d\u79f0\u663e\u793a\u5728\u5e2e\u52a9\u8f93\u51fa\u4e2d\u3002","title":"Python argparse metavar"},{"location":"pages/python/pytutorial/python-argparse/#Python-argparse-\u8ffd\u52a0\u64cd\u4f5c","text":"append \u64cd\u4f5c\u5141\u8bb8\u5bf9\u91cd\u590d\u9009\u9879\u8fdb\u884c\u5206\u7ec4\u3002 appending.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/usr/bin/env python import argparse # append action allows to group repeating # options parser = argparse.ArgumentParser() parser.add_argument('-n', '--name', dest='names', action='append', help=\"provides names to greet\") args = parser.parse_args() names = args.names for name in names: print(f'Hello {name}!') \u8be5\u793a\u4f8b\u751f\u6210\u95ee\u5019\u8bed\uff0c\u5e76\u4f7f\u7528 n \u6216 name \u9009\u9879\u6307\u5b9a\u6240\u6709\u540d\u79f0\u3002 \u5b83\u4eec\u53ef\u4ee5\u91cd\u590d\u591a\u6b21\u91cd\u590d\u3002 1 2 3 4 $ appending.py -n Peter -n Lucy --name Jane Hello Peter! Hello Lucy! Hello Jane!","title":"Python argparse \u8ffd\u52a0\u64cd\u4f5c"},{"location":"pages/python/pytutorial/python-argparse/#Python-\u7684-argparse-nargs","text":"nargs \u6307\u5b9a\u5e94\u4f7f\u7528\u7684\u547d\u4ee4\u884c\u53c2\u6570\u7684\u6570\u91cf\u3002 charseq.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #!/usr/bin/env python import argparse import sys # nargs sets the required number of argument values # metavar gives name to argument values in error and help output parser = argparse.ArgumentParser() parser.add_argument('chars', type=str, nargs=2, metavar='c', help='starting and ending character') args = parser.parse_args() try: v1 = ord(args.chars[0]) v2 = ord(args.chars[1]) except TypeError as e: print('Error: arguments must be characters') parser.print_help() sys.exit(1) if v1 > v2: print('first letter must precede the second in alphabet') parser.print_help() sys.exit(1) \u8be5\u793a\u4f8b\u663e\u793a\u4e86\u4ece\u5b57\u7b26\u4e00\u5230\u5b57\u7b26\u4e8c\u7684\u5b57\u7b26\u5e8f\u5217\u3002 \u5b83\u9700\u8981\u4e24\u4e2a\u53c2\u6570\u3002 1 2 parser.add_argument('chars', type=str, nargs=2, metavar='c', help='starting and ending character') \u4f7f\u7528 nargs=2 \uff0c\u6211\u4eec\u6307\u5b9a\u671f\u671b\u4e24\u4e2a\u53c2\u6570\u3002 1 2 $ charseq.py e k e f g h i j k \u7a0b\u5e8f\u663e\u793a\u4ece e \u5230 k \u7684\u5b57\u7b26\u5e8f\u5217\u3002 \u53ef\u4ee5\u4f7f\u7528 * \u5b57\u7b26\u8bbe\u7f6e\u53ef\u53d8\u6570\u91cf\u7684\u53c2\u6570\u3002 var_args.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python import argparse # * nargs expects 0 or more arguments parser = argparse.ArgumentParser() parser.add_argument('num', type=int, nargs='*') args = parser.parse_args() print(f\"The sum of values is {sum(args.num)}\") \u8be5\u793a\u4f8b\u8ba1\u7b97\u503c\u7684\u603b\u548c\u3002 \u6211\u4eec\u53ef\u4ee5\u4e3a\u7a0b\u5e8f\u6307\u5b9a\u53ef\u53d8\u6570\u91cf\u7684\u53c2\u6570\u3002 1 2 $ var_args.py 1 2 3 4 5 The sum of values is 15","title":"Python \u7684 argparse nargs"},{"location":"pages/python/pytutorial/python-argparse/#Python-argparse-\u9009\u62e9","text":"choices \u9009\u9879\u5c06\u53c2\u6570\u9650\u5236\u4e3a\u7ed9\u5b9a\u5217\u8868\u3002 mytime.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #!/usr/bin/env python import argparse import datetime import time # choices limits argument values to the # given list parser = argparse.ArgumentParser() parser.add_argument('--now', dest='format', choices=['std', 'iso', 'unix', 'tz'], help=\"shows datetime in given format\") args = parser.parse_args() fmt = args.format if fmt == 'std': print(datetime.date.today()) elif fmt == 'iso': print(datetime.datetime.now().isoformat()) elif fmt == 'unix': print(time.time()) elif fmt == 'tz': print(datetime.datetime.now(datetime.timezone.utc)) \u5728\u793a\u4f8b\u4e2d\uff0c now \u9009\u9879\u53ef\u4ee5\u63a5\u53d7\u4ee5\u4e0b\u503c\uff1a std \uff0c iso \uff0c unix \u6216 tz \u3002 1 2 3 4 5 $ mytime.py --now iso 2019-03-27T11:34:54.106643 $ mytime.py --now unix 1553682898.422863","title":"Python argparse \u9009\u62e9"},{"location":"pages/python/pytutorial/python-argparse/#\u5934\u4f8b\u5b50","text":"\u4ee5\u4e0b\u793a\u4f8b\u6a21\u4eff Linux head \u547d\u4ee4\u3002 \u5b83\u663e\u793a\u4e86\u6587\u4ef6\u5f00\u5934\u7684 n \u884c\u6587\u672c\u3002 words.txt 1 2 3 4 5 6 sky top forest wood lake wood \u5bf9\u4e8e\u793a\u4f8b\uff0c\u6211\u4eec\u6709\u8fd9\u4e2a\u5c0f\u7684\u6d4b\u8bd5\u6587\u4ef6\u3002 head.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #!/usr/bin/env python import argparse from pathlib import Path # head command # working with positional arguments parser = argparse.ArgumentParser() parser.add_argument('f', type=str, help='file name') parser.add_argument('n', type=int, help='show n lines from the top') args = parser.parse_args() filename = args.f lines = Path(filename).read_text().splitlines() for line in lines[:args.n]: print(line) \u8be5\u793a\u4f8b\u6709\u4e24\u4e2a\u9009\u9879\uff1a f \u8868\u793a\u6587\u4ef6\u540d\uff0c -n \u8868\u793a\u8981\u663e\u793a\u7684\u884c\u6570\u3002 1 2 3 4 $ head.py words.txt 3 sky top forest \u8fd9\u662f Python argparse \u6559\u7a0b\u3002","title":"\u5934\u4f8b\u5b50"},{"location":"pages/python/pytutorial/python-arrow/","text":"Python Arrow \u6559\u7a0b \u00b6 Python Arrow \u6559\u7a0b \u663e\u793a\u4e86\u5982\u4f55\u5728\u5e26\u6709Arrow\u6a21\u5757\u7684 Python \u4e2d\u4f7f\u7528\u65e5\u671f\u548c\u65f6\u95f4\u3002 Python Arrow \u00b6 Arrow \u662f\u7528\u4e8e\u5904\u7406\u65e5\u671f\u548c\u65f6\u95f4\u7684 Python \u6a21\u5757\u3002 \u4e0e\u5185\u7f6e\u7684\u65e5\u671f\u548c\u65f6\u95f4\u5de5\u5177\u76f8\u6bd4\uff0c\u5b83\u4f7f\u521b\u5efa\uff0c\u64cd\u4f5c\uff0c\u683c\u5f0f\u5316\u548c\u8f6c\u6362\u65e5\u671f\uff0c\u65f6\u95f4\u548c\u65f6\u95f4\u6233\u53d8\u5f97\u66f4\u52a0\u5bb9\u6613\u3002 \u5b89\u88c5 Arrow \u00b6 Arrow \u6a21\u5757\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5b89\u88c5\uff1a 1 $ sudo pip3 install arrow \u6211\u4eec\u4f7f\u7528 pip3 \u547d\u4ee4\u5b89\u88c5 arrow \u6a21\u5757\u3002 UTC \u65f6\u95f4 \u00b6 \u5b9e\u9645\u9700\u8981\u4e00\u4e2a\u5168\u7403\u65f6\u95f4\u3002 \u5168\u7403\u65f6\u95f4\u53ef\u4ee5\u907f\u514d\u65f6\u533a\u548c\u590f\u4ee4\u65f6\u7684\u6df7\u6dc6\u3002 UTC\uff08\u4e16\u754c\u6807\u51c6\u65f6\u95f4\uff09\u662f\u4e3b\u8981\u65f6\u95f4\u6807\u51c6\u3002 UTC \u7528\u4e8e\u822a\u7a7a\uff0c\u5929\u6c14\u9884\u62a5\uff0c\u98de\u884c\u8ba1\u5212\uff0c\u7a7a\u4e2d\u4ea4\u901a\u7ba1\u5236\u901a\u5173\u548c\u6620\u5c04\u3002 \u4e0e\u5f53\u5730\u65f6\u95f4\u4e0d\u540c\uff0cUTC \u4e0d\u4f1a\u968f\u5b63\u8282\u53d8\u5316\u800c\u53d8\u5316\u3002 utc_time.py 1 2 3 4 5 6 7 #!/usr/bin/python3 import arrow utc = arrow.utcnow() print(utc) print(utc.to('local')) \u4f7f\u7528 utcnow() \u529f\u80fd\u521b\u5efa UTC \u65f6\u95f4\u3002 1 print(utc.to('local')) \u4f7f\u7528 to() \u65b9\u6cd5\uff0c\u6211\u4eec\u5c06 UTC \u65f6\u95f4\u8f6c\u6362\u4e3a\u672c\u5730\u65f6\u95f4\u3002 \u5f53\u5730\u65f6\u95f4 \u00b6 \u672c\u5730\u65f6\u95f4\u662f\u7279\u5b9a\u533a\u57df\u6216\u65f6\u533a\u4e2d\u7684\u65f6\u95f4\u3002 local_time.py 1 2 3 4 5 6 7 #!/usr/bin/python3 import arrow now = arrow.now() print(now) print(now.to('UTC')) \u4f7f\u7528 now() \u529f\u80fd\u521b\u5efa\u672c\u5730\u65f6\u95f4\u3002 to() \u65b9\u6cd5\u7528\u4e8e\u5c06\u672c\u5730\u65f6\u95f4\u8f6c\u6362\u4e3a UTC \u65f6\u95f4\u3002 \u89e3\u6790\u65f6\u95f4 \u00b6 get() \u65b9\u6cd5\u7528\u4e8e\u89e3\u6790\u65f6\u95f4\u3002 parse_time.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/python3 import arrow d1 = arrow.get('2012-06-05 16:20:03', 'YYYY-MM-DD HH:mm:ss') print(d1) d2 = arrow.get(1504384602) print(d2) \u8be5\u793a\u4f8b\u4ece\u65e5\u671f\u548c\u65f6\u95f4\u5b57\u7b26\u4e32\u4ee5\u53ca\u65f6\u95f4\u6233\u89e3\u6790\u65f6\u95f4\u3002 1 2 3 $ ./parse_time.py 2012-06-05T16:20:03+00:00 2017-09-02T20:36:42+00:00 \u8fd9\u662f\u8f93\u51fa\u3002 Unix \u65f6\u95f4 \u00b6 Unix \u65f6\u95f4\u662f\u81ea Unix \u65f6\u4ee3\u4ee5\u6765\u7684\u79d2\u6570\u3002 timestamp \u5c5e\u6027\u8fd4\u56de\u81ea 1970 \u5e74 1 \u6708 1 \u65e5\u534f\u8c03\u4e16\u754c\u65f6\u4ee5\u6765 0 \u5c0f\u65f6 0 \u5206 0 \u79d2\u4ee5\u6765\u4ee5\u79d2\u4e3a\u5355\u4f4d\u7684\u65f6\u95f4\u503c\u3002 unix_time.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/python3 import arrow utc = arrow.utcnow() print(utc) unix_time = utc.timestamp print(unix_time) date = arrow.Arrow.fromtimestamp(unix_time) print(date) \u8be5\u793a\u4f8b\u663e\u793a\u672c\u5730\u65f6\u95f4\u548c Unix \u65f6\u95f4\u3002 \u7136\u540e\uff0c\u5b83\u5c06 Unix \u65f6\u95f4\u8f6c\u6362\u56de date \u5bf9\u8c61\u3002 1 date = arrow.Arrow.fromtimestamp(unix_time) \u4f7f\u7528 fromtimestamp() \u65b9\u6cd5\uff0c\u6211\u4eec\u5c06 Unix \u65f6\u95f4\u8f6c\u6362\u56de Arrow \u65e5\u671f\u5bf9\u8c61\u3002 1 2 3 2017-09-02T21:57:11.483795+02:00 1504382231 2017-09-02T21:57:11+02:00 \u8fd9\u662f\u8f93\u51fa\u3002 \u4e5f\u53ef\u4ee5\u5c06\u65e5\u671f\u683c\u5f0f\u5316\u4e3a Unix \u65f6\u95f4\u3002 format2unix.py 1 2 3 4 5 6 7 #!/usr/bin/python3 import arrow utc = arrow.utcnow() print(utc.format('X')) \u901a\u8fc7\u5c06 'X' \u8bf4\u660e\u7b26\u4f20\u9012\u7ed9 format() \u65b9\u6cd5\uff0c\u6211\u4eec\u5c06\u5f53\u524d\u672c\u5730\u65e5\u671f\u6253\u5370\u4e3a Unix \u65f6\u95f4\u3002 1 2 $ ./format2unix.py 1504383196 \u8fd9\u662f\u8f93\u51fa\u3002 \u683c\u5f0f\u5316\u65e5\u671f\u548c\u65f6\u95f4 \u00b6 \u65e5\u671f\u548c\u65f6\u95f4\u53ef\u4ee5\u7528 format() \u65b9\u6cd5\u683c\u5f0f\u5316\u3002 formatting.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/python3 import arrow now = arrow.now() year = now.format('YYYY') print(\"Year: {0}\".format(year)) date = now.format('YYYY-MM-DD') print(\"Date: {0}\".format(date)) date_time = now.format('YYYY-MM-DD HH:mm:ss') print(\"Date and time: {0}\".format(date_time)) date_time_zone = now.format('YYYY-MM-DD HH:mm:ss ZZ') print(\"Date and time and zone: {0}\".format(date_time_zone)) \u8be5\u793a\u4f8b\u4f7f\u7528 format() \u65b9\u6cd5\u4ee5\u5404\u79cd\u683c\u5f0f\u663e\u793a\u672c\u5730\u65e5\u671f\u548c\u65f6\u95f4\u3002 1 2 3 4 5 $ ./formatting.py Year: 2017 Date: 2017-09-02 Date and time: 2017-09-02 22:00:32 Date and time and zone: 2017-09-02 22:00:32 +02:00 \u8fd9\u662f\u8f93\u51fa\u3002 \u8f6c\u6362\u4e3a\u533a\u57df\u65f6\u95f4 \u00b6 \u4f7f\u7528 to() \u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u65e5\u671f\u548c\u65f6\u95f4\u8f6c\u6362\u4e3a\u533a\u57df\u65f6\u95f4\u3002 converting.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/python3 import arrow utc = arrow.utcnow() print(utc.to('US/Pacific').format('HH:mm:ss')) print(utc.to('Europe/Bratislava').format('HH:mm:ss')) print(utc.to('Europe/Moscow').format('HH:mm:ss')) \u8be5\u793a\u4f8b\u521b\u5efa\u4e00\u4e2a UTC \u65f6\u95f4\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a\u4e09\u4e2a\u533a\u57df\u65f6\u95f4\u3002 1 2 3 4 $ ./converting.py 13:24:06 22:24:06 23:24:06 \u8fd9\u662f\u8f93\u51fa\u3002 \u5de5\u4f5c\u65e5 \u00b6 \u53ef\u4ee5\u4f7f\u7528 weekday() \u6216 format() \u65b9\u6cd5\u627e\u5230\u65e5\u671f\u7684\u5de5\u4f5c\u65e5\u3002 weekday.py 1 2 3 4 5 6 7 8 #!/usr/bin/python3 import arrow d1 = arrow.get('1948-12-13') print(d1.weekday()) print(d1.format('dddd')) \u8be5\u4ee3\u7801\u793a\u4f8b\u7684\u5de5\u4f5c\u65e5\u4e3a\u201c 1948-12-13\u201d\u3002 1 2 3 $ ./weekday.py 0 Monday 1948 \u5e74 12 \u6708 12 \u65e5\uff0c\u662f\u661f\u671f\u4e00\u3002 \u79fb\u52a8\u65f6\u95f4 \u00b6 shift() \u65b9\u6cd5\u7528\u4e8e\u79fb\u52a8\u65f6\u95f4\u3002 shifting.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/python3 import arrow now = arrow.now() print(now.shift(hours=5).time()) print(now.shift(days=5).date()) print(now.shift(years=-8).date()) \u8be5\u793a\u4f8b\u8ba1\u7b97\u5f53\u524d\u672c\u5730\u65f6\u95f4\u5e76\u5c06\u5176\u504f\u79fb\u4e09\u500d\u3002 1 print(now.shift(hours=5).time()) \u6211\u4eec\u5c06\u65f6\u95f4\u63d0\u524d\u4e86\u4e94\u4e2a\u5c0f\u65f6\u3002 1 print(now.shift(days=5).date()) \u6211\u4eec\u5c06\u65e5\u671f\u63d0\u524d\u4e94\u5929\u3002 1 print(now.shift(years=-8).date()) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5c06\u65e5\u671f\u5411\u540e\u79fb\u516b\u5e74\u3002 1 2 3 4 $ ./shifting.py 03:44:23.100887 2017-09-07 2009-09-02 \u8fd9\u662f\u8f93\u51fa\u3002 \u590f\u4ee4\u65f6 \u00b6 \u590f\u4ee4\u65f6\uff08DST\uff09\u662f\u5728\u590f\u5b63\u7684\u51e0\u4e2a\u6708\u4e2d\u589e\u52a0\u65f6\u949f\u7684\u4e00\u79cd\u505a\u6cd5\uff0c\u56e0\u6b64\u665a\u4e0a\u7684\u590f\u65f6\u5236\u6301\u7eed\u65f6\u95f4\u66f4\u957f\u3002 \u5728\u6625\u5b63\u5f00\u59cb\u65f6\u5c06\u65f6\u95f4\u5411\u524d\u8c03\u6574\u4e00\u5c0f\u65f6\uff0c\u5728\u79cb\u5b63\u5c06\u65f6\u95f4\u5411\u540e\u8c03\u6574\u4e3a\u6807\u51c6\u65f6\u95f4\u3002 daylightsaving.py.py 1 2 3 4 5 6 7 8 #!/usr/bin/python3 import arrow now = arrow.now() print(now.format(\"YYYY-MM-DD HH:mm:ss ZZ\")) print(now.dst()) \u8be5\u793a\u4f8b\u4f7f\u7528 dst() \u663e\u793a\u590f\u4ee4\u65f6\u3002 1 2 3 $ ./daylightsaving.py 2017-09-02 22:46:37 +02:00 1:00:00 \u8f93\u51fa\u663e\u793a\u672c\u5730\u65f6\u95f4\u5df2\u8c03\u6574\u4e00\u5c0f\u65f6\u3002 \u4eba\u6027\u5316\u7684\u65e5\u671f\u548c\u65f6\u95f4 \u00b6 \u5728\u793e\u4ea4\u7f51\u7ad9\u4e0a\uff0c\u6211\u4eec\u7ecf\u5e38\u53ef\u4ee5\u770b\u5230\u8bf8\u5982\u201c\u4e00\u4e2a\u5c0f\u65f6\u524d\u201d\u6216\u201c 5 \u5206\u949f\u524d\u201d\u4e4b\u7c7b\u7684\u672f\u8bed\uff0c\u8fd9\u4e9b\u672f\u8bed\u53ef\u4ee5\u4e3a\u4eba\u4eec\u63d0\u4f9b\u6709\u5173\u5e16\u5b50\u521b\u5efa\u6216\u4fee\u6539\u65f6\u95f4\u7684\u5feb\u901f\u4fe1\u606f\u3002 Arrow \u5305\u542b humanize() \u65b9\u6cd5\u6765\u521b\u5efa\u6b64\u7c7b\u672f\u8bed\u3002 humanize.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/python3 import arrow now = arrow.now() d1 = now.shift(minutes=-15).humanize() print(d1) d2 = now.shift(hours=5).humanize() print(d2) \u8be5\u793a\u4f8b\u5c06\u4e24\u4e2a\u65e5\u671f\u4eba\u6027\u5316\u3002 1 2 3 $ ./humanizing.py 15 minutes ago in 4 hours \u8fd9\u662f\u8f93\u51fa\u3002 \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u5e26\u6709 Arrow \u6a21\u5757\u7684 Python \u4e2d\u7684\u65e5\u671f\u548c\u65f6\u95f4\u3002","title":"Python Arrow \u6559\u7a0b"},{"location":"pages/python/pytutorial/python-arrow/#Python-Arrow-\u6559\u7a0b","text":"Python Arrow \u6559\u7a0b \u663e\u793a\u4e86\u5982\u4f55\u5728\u5e26\u6709Arrow\u6a21\u5757\u7684 Python \u4e2d\u4f7f\u7528\u65e5\u671f\u548c\u65f6\u95f4\u3002","title":"Python Arrow \u6559\u7a0b"},{"location":"pages/python/pytutorial/python-arrow/#Python-Arrow","text":"Arrow \u662f\u7528\u4e8e\u5904\u7406\u65e5\u671f\u548c\u65f6\u95f4\u7684 Python \u6a21\u5757\u3002 \u4e0e\u5185\u7f6e\u7684\u65e5\u671f\u548c\u65f6\u95f4\u5de5\u5177\u76f8\u6bd4\uff0c\u5b83\u4f7f\u521b\u5efa\uff0c\u64cd\u4f5c\uff0c\u683c\u5f0f\u5316\u548c\u8f6c\u6362\u65e5\u671f\uff0c\u65f6\u95f4\u548c\u65f6\u95f4\u6233\u53d8\u5f97\u66f4\u52a0\u5bb9\u6613\u3002","title":"Python Arrow"},{"location":"pages/python/pytutorial/python-arrow/#\u5b89\u88c5-Arrow","text":"Arrow \u6a21\u5757\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5b89\u88c5\uff1a 1 $ sudo pip3 install arrow \u6211\u4eec\u4f7f\u7528 pip3 \u547d\u4ee4\u5b89\u88c5 arrow \u6a21\u5757\u3002","title":"\u5b89\u88c5 Arrow"},{"location":"pages/python/pytutorial/python-arrow/#UTC-\u65f6\u95f4","text":"\u5b9e\u9645\u9700\u8981\u4e00\u4e2a\u5168\u7403\u65f6\u95f4\u3002 \u5168\u7403\u65f6\u95f4\u53ef\u4ee5\u907f\u514d\u65f6\u533a\u548c\u590f\u4ee4\u65f6\u7684\u6df7\u6dc6\u3002 UTC\uff08\u4e16\u754c\u6807\u51c6\u65f6\u95f4\uff09\u662f\u4e3b\u8981\u65f6\u95f4\u6807\u51c6\u3002 UTC \u7528\u4e8e\u822a\u7a7a\uff0c\u5929\u6c14\u9884\u62a5\uff0c\u98de\u884c\u8ba1\u5212\uff0c\u7a7a\u4e2d\u4ea4\u901a\u7ba1\u5236\u901a\u5173\u548c\u6620\u5c04\u3002 \u4e0e\u5f53\u5730\u65f6\u95f4\u4e0d\u540c\uff0cUTC \u4e0d\u4f1a\u968f\u5b63\u8282\u53d8\u5316\u800c\u53d8\u5316\u3002 utc_time.py 1 2 3 4 5 6 7 #!/usr/bin/python3 import arrow utc = arrow.utcnow() print(utc) print(utc.to('local')) \u4f7f\u7528 utcnow() \u529f\u80fd\u521b\u5efa UTC \u65f6\u95f4\u3002 1 print(utc.to('local')) \u4f7f\u7528 to() \u65b9\u6cd5\uff0c\u6211\u4eec\u5c06 UTC \u65f6\u95f4\u8f6c\u6362\u4e3a\u672c\u5730\u65f6\u95f4\u3002","title":"UTC \u65f6\u95f4"},{"location":"pages/python/pytutorial/python-arrow/#\u5f53\u5730\u65f6\u95f4","text":"\u672c\u5730\u65f6\u95f4\u662f\u7279\u5b9a\u533a\u57df\u6216\u65f6\u533a\u4e2d\u7684\u65f6\u95f4\u3002 local_time.py 1 2 3 4 5 6 7 #!/usr/bin/python3 import arrow now = arrow.now() print(now) print(now.to('UTC')) \u4f7f\u7528 now() \u529f\u80fd\u521b\u5efa\u672c\u5730\u65f6\u95f4\u3002 to() \u65b9\u6cd5\u7528\u4e8e\u5c06\u672c\u5730\u65f6\u95f4\u8f6c\u6362\u4e3a UTC \u65f6\u95f4\u3002","title":"\u5f53\u5730\u65f6\u95f4"},{"location":"pages/python/pytutorial/python-arrow/#\u89e3\u6790\u65f6\u95f4","text":"get() \u65b9\u6cd5\u7528\u4e8e\u89e3\u6790\u65f6\u95f4\u3002 parse_time.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/python3 import arrow d1 = arrow.get('2012-06-05 16:20:03', 'YYYY-MM-DD HH:mm:ss') print(d1) d2 = arrow.get(1504384602) print(d2) \u8be5\u793a\u4f8b\u4ece\u65e5\u671f\u548c\u65f6\u95f4\u5b57\u7b26\u4e32\u4ee5\u53ca\u65f6\u95f4\u6233\u89e3\u6790\u65f6\u95f4\u3002 1 2 3 $ ./parse_time.py 2012-06-05T16:20:03+00:00 2017-09-02T20:36:42+00:00 \u8fd9\u662f\u8f93\u51fa\u3002","title":"\u89e3\u6790\u65f6\u95f4"},{"location":"pages/python/pytutorial/python-arrow/#Unix-\u65f6\u95f4","text":"Unix \u65f6\u95f4\u662f\u81ea Unix \u65f6\u4ee3\u4ee5\u6765\u7684\u79d2\u6570\u3002 timestamp \u5c5e\u6027\u8fd4\u56de\u81ea 1970 \u5e74 1 \u6708 1 \u65e5\u534f\u8c03\u4e16\u754c\u65f6\u4ee5\u6765 0 \u5c0f\u65f6 0 \u5206 0 \u79d2\u4ee5\u6765\u4ee5\u79d2\u4e3a\u5355\u4f4d\u7684\u65f6\u95f4\u503c\u3002 unix_time.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/python3 import arrow utc = arrow.utcnow() print(utc) unix_time = utc.timestamp print(unix_time) date = arrow.Arrow.fromtimestamp(unix_time) print(date) \u8be5\u793a\u4f8b\u663e\u793a\u672c\u5730\u65f6\u95f4\u548c Unix \u65f6\u95f4\u3002 \u7136\u540e\uff0c\u5b83\u5c06 Unix \u65f6\u95f4\u8f6c\u6362\u56de date \u5bf9\u8c61\u3002 1 date = arrow.Arrow.fromtimestamp(unix_time) \u4f7f\u7528 fromtimestamp() \u65b9\u6cd5\uff0c\u6211\u4eec\u5c06 Unix \u65f6\u95f4\u8f6c\u6362\u56de Arrow \u65e5\u671f\u5bf9\u8c61\u3002 1 2 3 2017-09-02T21:57:11.483795+02:00 1504382231 2017-09-02T21:57:11+02:00 \u8fd9\u662f\u8f93\u51fa\u3002 \u4e5f\u53ef\u4ee5\u5c06\u65e5\u671f\u683c\u5f0f\u5316\u4e3a Unix \u65f6\u95f4\u3002 format2unix.py 1 2 3 4 5 6 7 #!/usr/bin/python3 import arrow utc = arrow.utcnow() print(utc.format('X')) \u901a\u8fc7\u5c06 'X' \u8bf4\u660e\u7b26\u4f20\u9012\u7ed9 format() \u65b9\u6cd5\uff0c\u6211\u4eec\u5c06\u5f53\u524d\u672c\u5730\u65e5\u671f\u6253\u5370\u4e3a Unix \u65f6\u95f4\u3002 1 2 $ ./format2unix.py 1504383196 \u8fd9\u662f\u8f93\u51fa\u3002","title":"Unix \u65f6\u95f4"},{"location":"pages/python/pytutorial/python-arrow/#\u683c\u5f0f\u5316\u65e5\u671f\u548c\u65f6\u95f4","text":"\u65e5\u671f\u548c\u65f6\u95f4\u53ef\u4ee5\u7528 format() \u65b9\u6cd5\u683c\u5f0f\u5316\u3002 formatting.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/python3 import arrow now = arrow.now() year = now.format('YYYY') print(\"Year: {0}\".format(year)) date = now.format('YYYY-MM-DD') print(\"Date: {0}\".format(date)) date_time = now.format('YYYY-MM-DD HH:mm:ss') print(\"Date and time: {0}\".format(date_time)) date_time_zone = now.format('YYYY-MM-DD HH:mm:ss ZZ') print(\"Date and time and zone: {0}\".format(date_time_zone)) \u8be5\u793a\u4f8b\u4f7f\u7528 format() \u65b9\u6cd5\u4ee5\u5404\u79cd\u683c\u5f0f\u663e\u793a\u672c\u5730\u65e5\u671f\u548c\u65f6\u95f4\u3002 1 2 3 4 5 $ ./formatting.py Year: 2017 Date: 2017-09-02 Date and time: 2017-09-02 22:00:32 Date and time and zone: 2017-09-02 22:00:32 +02:00 \u8fd9\u662f\u8f93\u51fa\u3002","title":"\u683c\u5f0f\u5316\u65e5\u671f\u548c\u65f6\u95f4"},{"location":"pages/python/pytutorial/python-arrow/#\u8f6c\u6362\u4e3a\u533a\u57df\u65f6\u95f4","text":"\u4f7f\u7528 to() \u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u65e5\u671f\u548c\u65f6\u95f4\u8f6c\u6362\u4e3a\u533a\u57df\u65f6\u95f4\u3002 converting.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/python3 import arrow utc = arrow.utcnow() print(utc.to('US/Pacific').format('HH:mm:ss')) print(utc.to('Europe/Bratislava').format('HH:mm:ss')) print(utc.to('Europe/Moscow').format('HH:mm:ss')) \u8be5\u793a\u4f8b\u521b\u5efa\u4e00\u4e2a UTC \u65f6\u95f4\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a\u4e09\u4e2a\u533a\u57df\u65f6\u95f4\u3002 1 2 3 4 $ ./converting.py 13:24:06 22:24:06 23:24:06 \u8fd9\u662f\u8f93\u51fa\u3002","title":"\u8f6c\u6362\u4e3a\u533a\u57df\u65f6\u95f4"},{"location":"pages/python/pytutorial/python-arrow/#\u5de5\u4f5c\u65e5","text":"\u53ef\u4ee5\u4f7f\u7528 weekday() \u6216 format() \u65b9\u6cd5\u627e\u5230\u65e5\u671f\u7684\u5de5\u4f5c\u65e5\u3002 weekday.py 1 2 3 4 5 6 7 8 #!/usr/bin/python3 import arrow d1 = arrow.get('1948-12-13') print(d1.weekday()) print(d1.format('dddd')) \u8be5\u4ee3\u7801\u793a\u4f8b\u7684\u5de5\u4f5c\u65e5\u4e3a\u201c 1948-12-13\u201d\u3002 1 2 3 $ ./weekday.py 0 Monday 1948 \u5e74 12 \u6708 12 \u65e5\uff0c\u662f\u661f\u671f\u4e00\u3002","title":"\u5de5\u4f5c\u65e5"},{"location":"pages/python/pytutorial/python-arrow/#\u79fb\u52a8\u65f6\u95f4","text":"shift() \u65b9\u6cd5\u7528\u4e8e\u79fb\u52a8\u65f6\u95f4\u3002 shifting.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/python3 import arrow now = arrow.now() print(now.shift(hours=5).time()) print(now.shift(days=5).date()) print(now.shift(years=-8).date()) \u8be5\u793a\u4f8b\u8ba1\u7b97\u5f53\u524d\u672c\u5730\u65f6\u95f4\u5e76\u5c06\u5176\u504f\u79fb\u4e09\u500d\u3002 1 print(now.shift(hours=5).time()) \u6211\u4eec\u5c06\u65f6\u95f4\u63d0\u524d\u4e86\u4e94\u4e2a\u5c0f\u65f6\u3002 1 print(now.shift(days=5).date()) \u6211\u4eec\u5c06\u65e5\u671f\u63d0\u524d\u4e94\u5929\u3002 1 print(now.shift(years=-8).date()) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5c06\u65e5\u671f\u5411\u540e\u79fb\u516b\u5e74\u3002 1 2 3 4 $ ./shifting.py 03:44:23.100887 2017-09-07 2009-09-02 \u8fd9\u662f\u8f93\u51fa\u3002","title":"\u79fb\u52a8\u65f6\u95f4"},{"location":"pages/python/pytutorial/python-arrow/#\u590f\u4ee4\u65f6","text":"\u590f\u4ee4\u65f6\uff08DST\uff09\u662f\u5728\u590f\u5b63\u7684\u51e0\u4e2a\u6708\u4e2d\u589e\u52a0\u65f6\u949f\u7684\u4e00\u79cd\u505a\u6cd5\uff0c\u56e0\u6b64\u665a\u4e0a\u7684\u590f\u65f6\u5236\u6301\u7eed\u65f6\u95f4\u66f4\u957f\u3002 \u5728\u6625\u5b63\u5f00\u59cb\u65f6\u5c06\u65f6\u95f4\u5411\u524d\u8c03\u6574\u4e00\u5c0f\u65f6\uff0c\u5728\u79cb\u5b63\u5c06\u65f6\u95f4\u5411\u540e\u8c03\u6574\u4e3a\u6807\u51c6\u65f6\u95f4\u3002 daylightsaving.py.py 1 2 3 4 5 6 7 8 #!/usr/bin/python3 import arrow now = arrow.now() print(now.format(\"YYYY-MM-DD HH:mm:ss ZZ\")) print(now.dst()) \u8be5\u793a\u4f8b\u4f7f\u7528 dst() \u663e\u793a\u590f\u4ee4\u65f6\u3002 1 2 3 $ ./daylightsaving.py 2017-09-02 22:46:37 +02:00 1:00:00 \u8f93\u51fa\u663e\u793a\u672c\u5730\u65f6\u95f4\u5df2\u8c03\u6574\u4e00\u5c0f\u65f6\u3002","title":"\u590f\u4ee4\u65f6"},{"location":"pages/python/pytutorial/python-arrow/#\u4eba\u6027\u5316\u7684\u65e5\u671f\u548c\u65f6\u95f4","text":"\u5728\u793e\u4ea4\u7f51\u7ad9\u4e0a\uff0c\u6211\u4eec\u7ecf\u5e38\u53ef\u4ee5\u770b\u5230\u8bf8\u5982\u201c\u4e00\u4e2a\u5c0f\u65f6\u524d\u201d\u6216\u201c 5 \u5206\u949f\u524d\u201d\u4e4b\u7c7b\u7684\u672f\u8bed\uff0c\u8fd9\u4e9b\u672f\u8bed\u53ef\u4ee5\u4e3a\u4eba\u4eec\u63d0\u4f9b\u6709\u5173\u5e16\u5b50\u521b\u5efa\u6216\u4fee\u6539\u65f6\u95f4\u7684\u5feb\u901f\u4fe1\u606f\u3002 Arrow \u5305\u542b humanize() \u65b9\u6cd5\u6765\u521b\u5efa\u6b64\u7c7b\u672f\u8bed\u3002 humanize.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/python3 import arrow now = arrow.now() d1 = now.shift(minutes=-15).humanize() print(d1) d2 = now.shift(hours=5).humanize() print(d2) \u8be5\u793a\u4f8b\u5c06\u4e24\u4e2a\u65e5\u671f\u4eba\u6027\u5316\u3002 1 2 3 $ ./humanizing.py 15 minutes ago in 4 hours \u8fd9\u662f\u8f93\u51fa\u3002 \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u5e26\u6709 Arrow \u6a21\u5757\u7684 Python \u4e2d\u7684\u65e5\u671f\u548c\u65f6\u95f4\u3002","title":"\u4eba\u6027\u5316\u7684\u65e5\u671f\u548c\u65f6\u95f4"},{"location":"pages/python/pytutorial/python-bcrypt/","text":"Python bcrypt \u6559\u7a0b \u00b6 Python bcrypt \u6559\u7a0b \u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528 bcrypt \u5e93\u5bf9 Python \u4e2d\u7684\u5bc6\u7801\u8fdb\u884c\u54c8\u5e0c\u5904\u7406\u3002 \u5b83\u5b9a\u4e49\u4e86\u57fa\u672c\u672f\u8bed\uff0c\u5305\u62ec\u52a0\u5bc6\uff0c\u54c8\u5e0c\u548c\u76d0\u3002 Python bcrypt \u6a21\u5757\u662f\u4e00\u4e2a\u7528\u4e8e\u5728 Python \u4e2d\u751f\u6210\u5f3a\u54c8\u5e0c\u503c\u7684\u5e93\u3002 \u5b83\u901a\u8fc7 pip install bcrypt \u547d\u4ee4\u5b89\u88c5\u3002 \u52a0\u5bc6 \u00b6 \u52a0\u5bc6\u662f\u5bf9\u6d88\u606f\u6216\u4fe1\u606f\u8fdb\u884c\u7f16\u7801\u7684\u8fc7\u7a0b\uff0c\u4ee5\u4f7f\u53ea\u6709\u6388\u6743\u4eba\u5458\u624d\u80fd\u4f7f\u7528\u76f8\u5e94\u7684\u952e\u8bfb\u53d6\u6d88\u606f\u6216\u4fe1\u606f\uff0c\u800c\u672a\u7ecf\u6388\u6743\u7684\u4eba\u5458\u5219\u4e0d\u80fd\u3002 \u9884\u671f\u7684\u4fe1\u606f\u6216\u6d88\u606f\uff0c\u79f0\u4e3a\u7eaf\u6587\u672c\uff0c\u4f7f\u7528\u52a0\u5bc6\u7b97\u6cd5-\u5bc6\u7801-\u52a0\u5bc6\uff0c\u751f\u6210\u5bc6\u6587\uff0c\u53ea\u6709\u89e3\u5bc6\u540e\u624d\u80fd\u8bfb\u53d6\u3002 \u52a0\u5bc6\u662f\u4e00\u79cd\u53cc\u5411\u529f\u80fd\u3002 \u5f53\u6211\u4eec\u52a0\u5bc6\u67d0\u4e9b\u4e1c\u897f\u65f6\uff0c\u6211\u4eec\u8fd9\u6837\u505a\u662f\u4e3a\u4e86\u4ee5\u540e\u5bf9\u5176\u8fdb\u884c\u89e3\u5bc6\u3002 \u52a0\u5bc6\u7528\u4e8e\u4f20\u8f93\u65f6\u4fdd\u62a4\u6570\u636e\uff1b \u4f8b\u5982 \u5728\u90ae\u4ef6\u901a\u8baf\u4e2d\u3002 \u6563\u5217 \u00b6 \u54c8\u5e0c\u662f\u4f7f\u7528\u7b97\u6cd5\u5c06\u4efb\u610f\u5927\u5c0f\u7684\u6570\u636e\u6620\u5c04\u5230\u56fa\u5b9a\u957f\u5ea6\u7684\u8fc7\u7a0b\u3002 \u8fd9\u79f0\u4e3a\u54c8\u5e0c\u503c\u3002 \u52a0\u5bc6\u662f\u4e00\u79cd\u53cc\u5411\u529f\u80fd\uff0c\u800c\u6563\u5217\u662f\u4e00\u79cd\u5355\u5411\u529f\u80fd\u3002 \u5c3d\u7ba1\u5728\u6280\u672f\u4e0a\u53ef\u4ee5\u53cd\u5411\u6563\u5217\u503c\uff0c\u4f46\u6240\u9700\u7684\u8ba1\u7b97\u80fd\u529b\u4f7f\u5176\u4e0d\u53ef\u884c\u3002 \u52a0\u5bc6\u662f\u4e3a\u4e86\u4fdd\u62a4\u4f20\u8f93\u4e2d\u7684\u6570\u636e\uff0c\u800c\u6563\u5217\u662f\u4e3a\u4e86\u9a8c\u8bc1\u6570\u636e\u6ca1\u6709\u88ab\u66f4\u6539\u5e76\u4e14\u662f\u771f\u5b9e\u7684\u3002 \u6ce8\u610f: \u54c8\u5e0c\u4e0d\u9650\u4e8e\u5b89\u5168\u6027\uff0c\u5b83\u8fd8\u7528\u4e8e\u6bd4\u8f83\u5927\u91cf\u6570\u636e\u6216\u5feb\u901f\u952e\u67e5\u627e\u3002 \u5bc6\u7801\u4e0d\u662f\u4ee5\u7eaf\u6587\u672c\u683c\u5f0f\u5b58\u50a8\u5728\u6570\u636e\u5e93\u4e2d\uff0c\u800c\u662f\u4ee5\u6563\u5217\u503c\u5b58\u50a8\u3002 \u76d0 \u00b6 \u76d0\u662f\u56fa\u5b9a\u957f\u5ea6\u7684\u52a0\u5bc6\u5f3a\u5ea6\u5f3a\u7684\u968f\u673a\u503c\uff0c\u5c06\u5176\u6dfb\u52a0\u5230\u54c8\u5e0c\u51fd\u6570\u7684\u8f93\u5165\u4e2d\u4ee5\u4e3a\u6bcf\u4e2a\u8f93\u5165\u521b\u5efa\u552f\u4e00\u7684\u54c8\u5e0c\u3002 \u6dfb\u52a0\u76d0\u53ef\u4ee5\u4f7f\u5bc6\u7801\u54c8\u5e0c\u8f93\u51fa\u552f\u4e00\uff0c\u5373\u4f7f\u5bf9\u4e8e\u91c7\u7528\u901a\u7528\u5bc6\u7801\u7684\u7528\u6237\u4e5f\u662f\u5982\u6b64\u3002 bcrypt \u54c8\u5e0c\u51fd\u6570 \u00b6 bcrypt \u662f Niels Provos \u548c DavidMazi\u00e8res \u57fa\u4e8e Blowfish \u5bc6\u7801\u8bbe\u8ba1\u7684\u5bc6\u7801\u54c8\u5e0c\u529f\u80fd\u3002 bcrypt \u51fd\u6570\u662f OpenBSD \u7684\u9ed8\u8ba4\u5bc6\u7801\u54c8\u5e0c\u7b97\u6cd5\u3002 \u6709\u9488\u5bf9 C\uff0cC++ \uff0cC# \uff0cJava\uff0cJavaScript\uff0cPHP\uff0cPython \u548c\u5176\u4ed6\u8bed\u8a00\u7684 bcrypt \u5b9e\u73b0\u3002 bcrypt \u7b97\u6cd5\u4f7f\u7528\u5f3a\u5927\u7684\u52a0\u5bc6\u6280\u672f\u4e3a\u6211\u4eec\u521b\u5efa\u54c8\u5e0c\u5e76\u52a0\u76d0\u3002 \u8be5\u7b97\u6cd5\u7684\u8ba1\u7b97\u6210\u672c\u662f\u53c2\u6570\u5316\u7684\uff0c\u56e0\u6b64\u968f\u7740\u8ba1\u7b97\u673a\u53d8\u5f97\u8d8a\u6765\u8d8a\u5feb\uff0c\u5b83\u53ef\u80fd\u4f1a\u589e\u52a0\u3002 \u8ba1\u7b97\u6210\u672c\u88ab\u79f0\u4e3a\u5de5\u4f5c\u56e0\u5b50\u6216\u6210\u672c\u56e0\u5b50\u3002 \u5b83\u51cf\u6162\u4e86\u6563\u5217\u7684\u901f\u5ea6\uff0c\u4f7f\u66b4\u529b\u7834\u89e3\u7684\u5c1d\u8bd5\u8d8a\u6765\u8d8a\u96be\u3002 \u968f\u7740\u8ba1\u7b97\u673a\u53d8\u5f97\u8d8a\u6765\u8d8a\u5feb\uff0c\u6700\u4f73\u6210\u672c\u56e0\u6570\u4f1a\u968f\u7740\u65f6\u95f4\u800c\u53d8\u5316\u3002 \u9ad8\u6210\u672c\u56e0\u7d20\u7684\u7f3a\u70b9\u662f\u589e\u52a0\u4e86\u7cfb\u7edf\u8d44\u6e90\u7684\u8d1f\u8f7d\u5e76\u5f71\u54cd\u4e86\u7528\u6237\u4f53\u9a8c\u3002 Python bcrypt \u521b\u5efa\u54c8\u5e0c\u5bc6\u7801 \u00b6 \u5728\u4e0b\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u54c8\u5e0c\u5bc6\u7801\u3002 create_hashed_password.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python3 import bcrypt passwd = b's$cret12' salt = bcrypt.gensalt() hashed = bcrypt.hashpw(passwd, salt) print(salt) print(hashed) \u8be5\u793a\u4f8b\u4f7f\u7528 bcrypt \u521b\u5efa\u4e00\u4e2a salt \u548c\u4e00\u4e2a\u54c8\u5e0c\u5bc6\u7801\u3002 1 import bcrypt \u6211\u4eec\u5bfc\u5165 bcrypt \u6a21\u5757\u3002 1 salt = bcrypt.gensalt() \u7528 gensalt() \u529f\u80fd\u751f\u6210\u76d0\u3002 1 hashed = bcrypt.hashpw(passwd, salt) \u4f7f\u7528 hashpw() \u51fd\u6570\u521b\u5efa\u4e00\u4e2a\u54c8\u5e0c\u503c\uff0c\u8be5\u51fd\u6570\u5c06\u660e\u6587\u503c\u548c\u76d0\u4f5c\u4e3a\u53c2\u6570\u3002 1 2 3 4 5 6 $ python first.py b'$2b$12$mwSIOyxLJid1jFLgnU0s0.' b'$2b$12$mwSIOyxLJid1jFLgnU0s0.7pmzp8Mtx.GEO30x0AbI2v8r2sb98Cy' $ python first.py b'$2b$12$MgGs11HIXGkg1Bm1Epw0Du' b'$2b$12$MgGs11HIXGkg1Bm1Epw0Du20TV8ppi2Latgq7kKng8UjM5ZFWKKeS' \u8bf7\u6ce8\u610f\uff0c\u76d0\u662f\u751f\u6210\u7684\u54c8\u5e0c\u503c\u7684\u7b2c\u4e00\u90e8\u5206\u3002 \u8fd8\u8981\u6ce8\u610f\uff0c\u6bcf\u6b21\u751f\u6210\u552f\u4e00\u7684 salt \u548c\u54c8\u5e0c\u503c\u3002 Python bcrypt \u68c0\u67e5\u5bc6\u7801 \u00b6 \u4e0b\u9762\u7684\u793a\u4f8b\u6839\u636e\u54c8\u5e0c\u503c\u68c0\u67e5\u5bc6\u7801\u3002 check_passwd.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python3 import bcrypt passwd = b's$cret12' salt = bcrypt.gensalt() hashed = bcrypt.hashpw(passwd, salt) if bcrypt.checkpw(passwd, hashed): print(\"match\") else: print(\"does not match\") \u4f7f\u7528 checkpw() \u529f\u80fd\u68c0\u67e5\u5bc6\u7801\u3002 1 2 $ python check_passwd.py match Python bcrypt \u6210\u672c\u56e0\u5b50 \u00b6 \u6210\u672c\u56e0\u5b50\u901a\u8fc7\u51cf\u6162\u6563\u5217\u6765\u63d0\u9ad8\u5b89\u5168\u6027\u3002 cost_factor.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python3 import bcrypt import time passwd = b's$cret12' start = time.time() salt = bcrypt.gensalt(rounds=16) hashed = bcrypt.hashpw(passwd, salt) end = time.time() print(end - start) print(hashed) \u6211\u4eec\u4f7f\u7528 rounds \u53c2\u6570\u5c06\u6210\u672c\u56e0\u5b50\u8bbe\u7f6e\u4e3a 16\u3002 \u6211\u4eec\u6d4b\u91cf\u751f\u6210 passowrd \u54c8\u5e0c\u7684\u65f6\u95f4\u3002 1 2 3 $ cost_factor.py 4.268407821655273 b'$2b$16$.1FczuSNl2iXHmLojhwBZO9vCfA5HIqrONkefhvn2qLQpth3r7Jwe' \u82b1\u8d39\u8d85\u8fc7\u56db\u79d2\u949f\u7684\u65f6\u95f4\u6765\u751f\u6210\u5177\u6709\u6307\u5b9a\u6210\u672c\u56e0\u5b50\u7684\u54c8\u5e0c\u503c\u3002 \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 Python bcrypt \u6a21\u5757\u6765\u751f\u6210\u5bc6\u7801\u54c8\u5e0c\u3002","title":"Python bcrypt \u6559\u7a0b"},{"location":"pages/python/pytutorial/python-bcrypt/#Python-bcrypt-\u6559\u7a0b","text":"Python bcrypt \u6559\u7a0b \u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528 bcrypt \u5e93\u5bf9 Python \u4e2d\u7684\u5bc6\u7801\u8fdb\u884c\u54c8\u5e0c\u5904\u7406\u3002 \u5b83\u5b9a\u4e49\u4e86\u57fa\u672c\u672f\u8bed\uff0c\u5305\u62ec\u52a0\u5bc6\uff0c\u54c8\u5e0c\u548c\u76d0\u3002 Python bcrypt \u6a21\u5757\u662f\u4e00\u4e2a\u7528\u4e8e\u5728 Python \u4e2d\u751f\u6210\u5f3a\u54c8\u5e0c\u503c\u7684\u5e93\u3002 \u5b83\u901a\u8fc7 pip install bcrypt \u547d\u4ee4\u5b89\u88c5\u3002","title":"Python bcrypt \u6559\u7a0b"},{"location":"pages/python/pytutorial/python-bcrypt/#\u52a0\u5bc6","text":"\u52a0\u5bc6\u662f\u5bf9\u6d88\u606f\u6216\u4fe1\u606f\u8fdb\u884c\u7f16\u7801\u7684\u8fc7\u7a0b\uff0c\u4ee5\u4f7f\u53ea\u6709\u6388\u6743\u4eba\u5458\u624d\u80fd\u4f7f\u7528\u76f8\u5e94\u7684\u952e\u8bfb\u53d6\u6d88\u606f\u6216\u4fe1\u606f\uff0c\u800c\u672a\u7ecf\u6388\u6743\u7684\u4eba\u5458\u5219\u4e0d\u80fd\u3002 \u9884\u671f\u7684\u4fe1\u606f\u6216\u6d88\u606f\uff0c\u79f0\u4e3a\u7eaf\u6587\u672c\uff0c\u4f7f\u7528\u52a0\u5bc6\u7b97\u6cd5-\u5bc6\u7801-\u52a0\u5bc6\uff0c\u751f\u6210\u5bc6\u6587\uff0c\u53ea\u6709\u89e3\u5bc6\u540e\u624d\u80fd\u8bfb\u53d6\u3002 \u52a0\u5bc6\u662f\u4e00\u79cd\u53cc\u5411\u529f\u80fd\u3002 \u5f53\u6211\u4eec\u52a0\u5bc6\u67d0\u4e9b\u4e1c\u897f\u65f6\uff0c\u6211\u4eec\u8fd9\u6837\u505a\u662f\u4e3a\u4e86\u4ee5\u540e\u5bf9\u5176\u8fdb\u884c\u89e3\u5bc6\u3002 \u52a0\u5bc6\u7528\u4e8e\u4f20\u8f93\u65f6\u4fdd\u62a4\u6570\u636e\uff1b \u4f8b\u5982 \u5728\u90ae\u4ef6\u901a\u8baf\u4e2d\u3002","title":"\u52a0\u5bc6"},{"location":"pages/python/pytutorial/python-bcrypt/#\u6563\u5217","text":"\u54c8\u5e0c\u662f\u4f7f\u7528\u7b97\u6cd5\u5c06\u4efb\u610f\u5927\u5c0f\u7684\u6570\u636e\u6620\u5c04\u5230\u56fa\u5b9a\u957f\u5ea6\u7684\u8fc7\u7a0b\u3002 \u8fd9\u79f0\u4e3a\u54c8\u5e0c\u503c\u3002 \u52a0\u5bc6\u662f\u4e00\u79cd\u53cc\u5411\u529f\u80fd\uff0c\u800c\u6563\u5217\u662f\u4e00\u79cd\u5355\u5411\u529f\u80fd\u3002 \u5c3d\u7ba1\u5728\u6280\u672f\u4e0a\u53ef\u4ee5\u53cd\u5411\u6563\u5217\u503c\uff0c\u4f46\u6240\u9700\u7684\u8ba1\u7b97\u80fd\u529b\u4f7f\u5176\u4e0d\u53ef\u884c\u3002 \u52a0\u5bc6\u662f\u4e3a\u4e86\u4fdd\u62a4\u4f20\u8f93\u4e2d\u7684\u6570\u636e\uff0c\u800c\u6563\u5217\u662f\u4e3a\u4e86\u9a8c\u8bc1\u6570\u636e\u6ca1\u6709\u88ab\u66f4\u6539\u5e76\u4e14\u662f\u771f\u5b9e\u7684\u3002 \u6ce8\u610f: \u54c8\u5e0c\u4e0d\u9650\u4e8e\u5b89\u5168\u6027\uff0c\u5b83\u8fd8\u7528\u4e8e\u6bd4\u8f83\u5927\u91cf\u6570\u636e\u6216\u5feb\u901f\u952e\u67e5\u627e\u3002 \u5bc6\u7801\u4e0d\u662f\u4ee5\u7eaf\u6587\u672c\u683c\u5f0f\u5b58\u50a8\u5728\u6570\u636e\u5e93\u4e2d\uff0c\u800c\u662f\u4ee5\u6563\u5217\u503c\u5b58\u50a8\u3002","title":"\u6563\u5217"},{"location":"pages/python/pytutorial/python-bcrypt/#\u76d0","text":"\u76d0\u662f\u56fa\u5b9a\u957f\u5ea6\u7684\u52a0\u5bc6\u5f3a\u5ea6\u5f3a\u7684\u968f\u673a\u503c\uff0c\u5c06\u5176\u6dfb\u52a0\u5230\u54c8\u5e0c\u51fd\u6570\u7684\u8f93\u5165\u4e2d\u4ee5\u4e3a\u6bcf\u4e2a\u8f93\u5165\u521b\u5efa\u552f\u4e00\u7684\u54c8\u5e0c\u3002 \u6dfb\u52a0\u76d0\u53ef\u4ee5\u4f7f\u5bc6\u7801\u54c8\u5e0c\u8f93\u51fa\u552f\u4e00\uff0c\u5373\u4f7f\u5bf9\u4e8e\u91c7\u7528\u901a\u7528\u5bc6\u7801\u7684\u7528\u6237\u4e5f\u662f\u5982\u6b64\u3002","title":"\u76d0"},{"location":"pages/python/pytutorial/python-bcrypt/#bcrypt-\u54c8\u5e0c\u51fd\u6570","text":"bcrypt \u662f Niels Provos \u548c DavidMazi\u00e8res \u57fa\u4e8e Blowfish \u5bc6\u7801\u8bbe\u8ba1\u7684\u5bc6\u7801\u54c8\u5e0c\u529f\u80fd\u3002 bcrypt \u51fd\u6570\u662f OpenBSD \u7684\u9ed8\u8ba4\u5bc6\u7801\u54c8\u5e0c\u7b97\u6cd5\u3002 \u6709\u9488\u5bf9 C\uff0cC++ \uff0cC# \uff0cJava\uff0cJavaScript\uff0cPHP\uff0cPython \u548c\u5176\u4ed6\u8bed\u8a00\u7684 bcrypt \u5b9e\u73b0\u3002 bcrypt \u7b97\u6cd5\u4f7f\u7528\u5f3a\u5927\u7684\u52a0\u5bc6\u6280\u672f\u4e3a\u6211\u4eec\u521b\u5efa\u54c8\u5e0c\u5e76\u52a0\u76d0\u3002 \u8be5\u7b97\u6cd5\u7684\u8ba1\u7b97\u6210\u672c\u662f\u53c2\u6570\u5316\u7684\uff0c\u56e0\u6b64\u968f\u7740\u8ba1\u7b97\u673a\u53d8\u5f97\u8d8a\u6765\u8d8a\u5feb\uff0c\u5b83\u53ef\u80fd\u4f1a\u589e\u52a0\u3002 \u8ba1\u7b97\u6210\u672c\u88ab\u79f0\u4e3a\u5de5\u4f5c\u56e0\u5b50\u6216\u6210\u672c\u56e0\u5b50\u3002 \u5b83\u51cf\u6162\u4e86\u6563\u5217\u7684\u901f\u5ea6\uff0c\u4f7f\u66b4\u529b\u7834\u89e3\u7684\u5c1d\u8bd5\u8d8a\u6765\u8d8a\u96be\u3002 \u968f\u7740\u8ba1\u7b97\u673a\u53d8\u5f97\u8d8a\u6765\u8d8a\u5feb\uff0c\u6700\u4f73\u6210\u672c\u56e0\u6570\u4f1a\u968f\u7740\u65f6\u95f4\u800c\u53d8\u5316\u3002 \u9ad8\u6210\u672c\u56e0\u7d20\u7684\u7f3a\u70b9\u662f\u589e\u52a0\u4e86\u7cfb\u7edf\u8d44\u6e90\u7684\u8d1f\u8f7d\u5e76\u5f71\u54cd\u4e86\u7528\u6237\u4f53\u9a8c\u3002","title":"bcrypt \u54c8\u5e0c\u51fd\u6570"},{"location":"pages/python/pytutorial/python-bcrypt/#Python-bcrypt-\u521b\u5efa\u54c8\u5e0c\u5bc6\u7801","text":"\u5728\u4e0b\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u54c8\u5e0c\u5bc6\u7801\u3002 create_hashed_password.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python3 import bcrypt passwd = b's$cret12' salt = bcrypt.gensalt() hashed = bcrypt.hashpw(passwd, salt) print(salt) print(hashed) \u8be5\u793a\u4f8b\u4f7f\u7528 bcrypt \u521b\u5efa\u4e00\u4e2a salt \u548c\u4e00\u4e2a\u54c8\u5e0c\u5bc6\u7801\u3002 1 import bcrypt \u6211\u4eec\u5bfc\u5165 bcrypt \u6a21\u5757\u3002 1 salt = bcrypt.gensalt() \u7528 gensalt() \u529f\u80fd\u751f\u6210\u76d0\u3002 1 hashed = bcrypt.hashpw(passwd, salt) \u4f7f\u7528 hashpw() \u51fd\u6570\u521b\u5efa\u4e00\u4e2a\u54c8\u5e0c\u503c\uff0c\u8be5\u51fd\u6570\u5c06\u660e\u6587\u503c\u548c\u76d0\u4f5c\u4e3a\u53c2\u6570\u3002 1 2 3 4 5 6 $ python first.py b'$2b$12$mwSIOyxLJid1jFLgnU0s0.' b'$2b$12$mwSIOyxLJid1jFLgnU0s0.7pmzp8Mtx.GEO30x0AbI2v8r2sb98Cy' $ python first.py b'$2b$12$MgGs11HIXGkg1Bm1Epw0Du' b'$2b$12$MgGs11HIXGkg1Bm1Epw0Du20TV8ppi2Latgq7kKng8UjM5ZFWKKeS' \u8bf7\u6ce8\u610f\uff0c\u76d0\u662f\u751f\u6210\u7684\u54c8\u5e0c\u503c\u7684\u7b2c\u4e00\u90e8\u5206\u3002 \u8fd8\u8981\u6ce8\u610f\uff0c\u6bcf\u6b21\u751f\u6210\u552f\u4e00\u7684 salt \u548c\u54c8\u5e0c\u503c\u3002","title":"Python bcrypt \u521b\u5efa\u54c8\u5e0c\u5bc6\u7801"},{"location":"pages/python/pytutorial/python-bcrypt/#Python-bcrypt-\u68c0\u67e5\u5bc6\u7801","text":"\u4e0b\u9762\u7684\u793a\u4f8b\u6839\u636e\u54c8\u5e0c\u503c\u68c0\u67e5\u5bc6\u7801\u3002 check_passwd.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python3 import bcrypt passwd = b's$cret12' salt = bcrypt.gensalt() hashed = bcrypt.hashpw(passwd, salt) if bcrypt.checkpw(passwd, hashed): print(\"match\") else: print(\"does not match\") \u4f7f\u7528 checkpw() \u529f\u80fd\u68c0\u67e5\u5bc6\u7801\u3002 1 2 $ python check_passwd.py match","title":"Python bcrypt \u68c0\u67e5\u5bc6\u7801"},{"location":"pages/python/pytutorial/python-bcrypt/#Python-bcrypt-\u6210\u672c\u56e0\u5b50","text":"\u6210\u672c\u56e0\u5b50\u901a\u8fc7\u51cf\u6162\u6563\u5217\u6765\u63d0\u9ad8\u5b89\u5168\u6027\u3002 cost_factor.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python3 import bcrypt import time passwd = b's$cret12' start = time.time() salt = bcrypt.gensalt(rounds=16) hashed = bcrypt.hashpw(passwd, salt) end = time.time() print(end - start) print(hashed) \u6211\u4eec\u4f7f\u7528 rounds \u53c2\u6570\u5c06\u6210\u672c\u56e0\u5b50\u8bbe\u7f6e\u4e3a 16\u3002 \u6211\u4eec\u6d4b\u91cf\u751f\u6210 passowrd \u54c8\u5e0c\u7684\u65f6\u95f4\u3002 1 2 3 $ cost_factor.py 4.268407821655273 b'$2b$16$.1FczuSNl2iXHmLojhwBZO9vCfA5HIqrONkefhvn2qLQpth3r7Jwe' \u82b1\u8d39\u8d85\u8fc7\u56db\u79d2\u949f\u7684\u65f6\u95f4\u6765\u751f\u6210\u5177\u6709\u6307\u5b9a\u6210\u672c\u56e0\u5b50\u7684\u54c8\u5e0c\u503c\u3002 \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 Python bcrypt \u6a21\u5757\u6765\u751f\u6210\u5bc6\u7801\u54c8\u5e0c\u3002","title":"Python bcrypt \u6210\u672c\u56e0\u5b50"},{"location":"pages/python/pytutorial/python-beautifulsoup/","text":"BeautifulSoup \u6559\u7a0b \u00b6 BeautifulSoup \u6559\u7a0b \u662f BeautifulSoup Python \u5e93\u7684\u5165\u95e8\u6559\u7a0b\u3002 \u8fd9\u4e9b\u793a\u4f8b\u67e5\u627e\u6807\u7b7e\uff0c\u904d\u5386\u6587\u6863\u6811\uff0c\u4fee\u6539\u6587\u6863\u548c\u522e\u53d6\u7f51\u9875\u3002 BeautifulSoup \u00b6 BeautifulSoup \u662f\u7528\u4e8e\u89e3\u6790 HTML \u548c XML \u6587\u6863\u7684 Python \u5e93\u3002 \u5b83\u901a\u5e38\u7528\u4e8e\u7f51\u9875\u6293\u53d6\u3002 BeautifulSoup \u5c06\u590d\u6742\u7684 HTML \u6587\u6863\u8f6c\u6362\u4e3a\u590d\u6742\u7684 Python \u5bf9\u8c61\u6811\uff0c\u4f8b\u5982\u6807\u8bb0\uff0c\u53ef\u5bfc\u822a\u5b57\u7b26\u4e32\u6216\u6ce8\u91ca\u3002 \u5b89\u88c5 BeautifulSoup \u00b6 \u6211\u4eec\u4f7f\u7528 pip3 \u547d\u4ee4\u5b89\u88c5\u5fc5\u8981\u7684\u6a21\u5757\u3002 1 $ sudo pip3 install lxml \u6211\u4eec\u9700\u8981\u5b89\u88c5 BeautifulSoup \u4f7f\u7528\u7684 lxml \u6a21\u5757\u3002 1 $ sudo pip3 install bs4 \u4e0a\u9762\u7684\u547d\u4ee4\u5c06\u5b89\u88c5 BeautifulSoup\u3002 HTML \u6587\u4ef6 \u00b6 \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u4ee5\u4e0b HTML \u6587\u4ef6\uff1a index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 <!DOCTYPE html> <html> <head> <title>Header</title> <meta charset=\"utf-8\"> </head> <body> <h2>Operating systems</h2> <ul id=\"mylist\" style=\"width:150px\"> <li>Solaris</li> <li>FreeBSD</li> <li>Debian</li> <li>NetBSD</li> <li>Windows</li> </ul> <p> FreeBSD is an advanced computer operating system used to power modern servers, desktops, and embedded platforms. </p> <p> Debian is a Unix-like computer operating system that is composed entirely of free software. </p> </body> </html> BeautifulSoup \u7b80\u5355\u793a\u4f8b \u00b6 \u5728\u7b2c\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 BeautifulSoup \u6a21\u5757\u83b7\u53d6\u4e09\u4e2a\u6807\u7b7e\u3002 simple.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/python3 from bs4 import BeautifulSoup with open(\"index.html\", \"r\") as f: contents = f.read() soup = BeautifulSoup(contents, 'lxml') print(soup.h2) print(soup.head) print(soup.li) \u8be5\u4ee3\u7801\u793a\u4f8b\u5c06\u6253\u5370\u4e09\u4e2a\u6807\u7b7e\u7684 HTML \u4ee3\u7801\u3002 1 from bs4 import BeautifulSoup \u6211\u4eec\u4ece bs4 \u6a21\u5757\u5bfc\u5165 BeautifulSoup \u7c7b\u3002 BeautifulSoup \u662f\u4ece\u4e8b\u5de5\u4f5c\u7684\u4e3b\u8981\u73ed\u7ea7\u3002 1 2 3 with open(\"index.html\", \"r\") as f: contents = f.read() \u6211\u4eec\u6253\u5f00 index.html \u6587\u4ef6\u5e76\u4f7f\u7528 read() \u65b9\u6cd5\u8bfb\u53d6\u5176\u5185\u5bb9\u3002 1 soup = BeautifulSoup(contents, 'lxml') \u521b\u5efa\u4e86 BeautifulSoup \u5bf9\u8c61\uff1b HTML \u6570\u636e\u5c06\u4f20\u9012\u7ed9\u6784\u9020\u51fd\u6570\u3002 \u7b2c\u4e8c\u4e2a\u9009\u9879\u6307\u5b9a\u89e3\u6790\u5668\u3002 1 2 print(soup.h2) print(soup.head) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u6253\u5370\u4e24\u4e2a\u6807\u7b7e\u7684 HTML \u4ee3\u7801\uff1a h2 \u548c head \u3002 1 print(soup.li) \u6709\u591a\u4e2a li \u5143\u7d20\uff1b \u8be5\u884c\u6253\u5370\u7b2c\u4e00\u4e2a\u3002 1 2 3 4 5 6 7 $ ./simple.py <h2>Operating systems</h2> <head> <title>Header</title> <meta charset=\"utf-8\"/> </head> <li>Solaris</li> \u8fd9\u662f\u8f93\u51fa\u3002 BeautifulSoup \u6807\u7b7e\uff0c\u540d\u79f0\uff0c\u6587\u672c \u00b6 \u6807\u8bb0\u7684 name \u5c5e\u6027\u7ed9\u51fa\u5176\u540d\u79f0\uff0c text \u5c5e\u6027\u7ed9\u51fa\u5176\u6587\u672c\u5185\u5bb9\u3002 tags_names.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/python3 from bs4 import BeautifulSoup with open(\"index.html\", \"r\") as f: contents = f.read() soup = BeautifulSoup(contents, 'lxml') print(\"HTML: {0}, name: {1}, text: {2}\".format(soup.h2, soup.h2.name, soup.h2.text)) \u8be5\u4ee3\u7801\u793a\u4f8b\u6253\u5370 h2 \u6807\u7b7e\u7684 HTML \u4ee3\u7801\uff0c\u540d\u79f0\u548c\u6587\u672c\u3002 1 2 $ ./tags_names.py HTML: <h2>Operating systems</h2>, name: h2, text: Operating systems \u8fd9\u662f\u8f93\u51fa\u3002 BeautifulSoup \u904d\u5386\u6807\u7b7e \u00b6 \u4f7f\u7528 recursiveChildGenerator() \u65b9\u6cd5\uff0c\u6211\u4eec\u904d\u5386 HTML \u6587\u6863\u3002 traverse_tree.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/python3 from bs4 import BeautifulSoup with open(\"index.html\", \"r\") as f: contents = f.read() soup = BeautifulSoup(contents, 'lxml') for child in soup.recursiveChildGenerator(): if child.name: print(child.name) \u8be5\u793a\u4f8b\u904d\u5386\u6587\u6863\u6811\u5e76\u6253\u5370\u6240\u6709 HTML \u6807\u8bb0\u7684\u540d\u79f0\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 $ ./traverse_tree.py html head title meta body h2 ul li li li li li p p \u5728 HTML \u6587\u6863\u4e2d\uff0c\u6211\u4eec\u6709\u8fd9\u4e9b\u6807\u7b7e\u3002 BeautifulSoup \u5b50\u5143\u7d20 \u00b6 \u4f7f\u7528 children \u5c5e\u6027\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u6807\u7b7e\u7684\u5b50\u7ea7\u3002 get_children.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/python3 from bs4 import BeautifulSoup with open(\"index.html\", \"r\") as f: contents = f.read() soup = BeautifulSoup(contents, 'lxml') root = soup.html root_childs = [e.name for e in root.children if e.name is not None] print(root_childs) \u8be5\u793a\u4f8b\u68c0\u7d22 html \u6807\u8bb0\u7684\u5b50\u4ee3\uff0c\u5c06\u5b83\u4eec\u653e\u7f6e\u5728 Python \u5217\u8868\u4e2d\uff0c\u7136\u540e\u5c06\u5176\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 \u7531\u4e8e children \u5c5e\u6027\u8fd8\u8fd4\u56de\u6807\u7b7e\u4e4b\u95f4\u7684\u7a7a\u683c\uff0c\u56e0\u6b64\u6211\u4eec\u6dfb\u52a0\u4e86\u4e00\u4e2a\u6761\u4ef6\uff0c\u4f7f\u5176\u4ec5\u5305\u542b\u6807\u7b7e\u540d\u79f0\u3002 1 2 $ ./get_children.py ['head', 'body'] html \u6807\u7b7e\u6709\u4e24\u4e2a\u5b50\u5143\u7d20\uff1a head \u548c body \u3002 BeautifulSoup \u540e\u7ee7\u5143\u7d20 \u00b6 \u4f7f\u7528 descendants \u5c5e\u6027\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u6807\u7b7e\u7684\u6240\u6709\u540e\u4ee3\uff08\u6240\u6709\u7ea7\u522b\u7684\u5b50\u7ea7\uff09\u3002 get_descendants.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/python3 from bs4 import BeautifulSoup with open(\"index.html\", \"r\") as f: contents = f.read() soup = BeautifulSoup(contents, 'lxml') root = soup.body root_childs = [e.name for e in root.descendants if e.name is not None] print(root_childs) \u8be5\u793a\u4f8b\u68c0\u7d22 body \u6807\u8bb0\u7684\u6240\u6709\u540e\u4ee3\u3002 1 2 $ ./get_descendants.py ['h2', 'ul', 'li', 'li', 'li', 'li', 'li', 'p', 'p'] \u8fd9\u4e9b\u90fd\u662f body \u6807\u7b7e\u7684\u540e\u4ee3\u3002 BeautifulSoup \u7f51\u9875\u6293\u53d6 \u00b6 \u8bf7\u6c42\u662f\u4e00\u4e2a\u7b80\u5355\u7684 Python HTTP \u5e93\u3002 \u5b83\u63d0\u4f9b\u4e86\u901a\u8fc7 HTTP \u8bbf\u95ee Web \u8d44\u6e90\u7684\u65b9\u6cd5\u3002 scraping.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/python3 from bs4 import BeautifulSoup import requests as req resp = req.get(\"http://www.something.com\") soup = BeautifulSoup(resp.text, 'lxml') print(soup.title) print(soup.title.text) print(soup.title.parent) \u8be5\u793a\u4f8b\u68c0\u7d22\u4e00\u4e2a\u7b80\u5355\u7f51\u9875\u7684\u6807\u9898\u3002 \u5b83\u8fd8\u6253\u5370\u5176\u7236\u7ea7\u3002 1 2 3 resp = req.get(\"http://www.something.com\") soup = BeautifulSoup(resp.text, 'lxml') \u6211\u4eec\u83b7\u53d6\u9875\u9762\u7684 HTML \u6570\u636e\u3002 1 2 3 print(soup.title) print(soup.title.text) print(soup.title.parent) \u6211\u4eec\u68c0\u7d22\u6807\u9898\u7684 HTML \u4ee3\u7801\uff0c\u5176\u6587\u672c\u4ee5\u53ca\u5176\u7236\u7ea7\u7684 HTML \u4ee3\u7801\u3002 1 2 3 4 $ ./scraping.py <title>Something.</title> Something. <head><title>Something.</title></head> \u8fd9\u662f\u8f93\u51fa\u3002 BeautifulSoup \u7f8e\u5316\u4ee3\u7801 \u00b6 \u4f7f\u7528 prettify() \u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f HTML \u4ee3\u7801\u770b\u8d77\u6765\u66f4\u597d\u3002 prettify.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/python3 from bs4 import BeautifulSoup import requests as req resp = req.get(\"http://www.something.com\") soup = BeautifulSoup(resp.text, 'lxml') print(soup.prettify()) \u6211\u4eec\u7f8e\u5316\u4e86\u4e00\u4e2a\u7b80\u5355\u7f51\u9875\u7684 HTML \u4ee3\u7801\u3002 1 2 3 4 5 6 7 8 9 10 11 $ ./prettify.py <html> <head> <title> Something. </title> </head> <body> Something. </body> </html> \u8fd9\u662f\u8f93\u51fa\u3002 BeautifulSoup \u901a\u8fc7 ID \u67e5\u627e\u5143\u7d20 \u00b6 \u4f7f\u7528 find() \u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5404\u79cd\u65b9\u5f0f\uff08\u5305\u62ec\u5143\u7d20 ID\uff09\u67e5\u627e\u5143\u7d20\u3002 find_by_id.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/python3 from bs4 import BeautifulSoup with open(\"index.html\", \"r\") as f: contents = f.read() soup = BeautifulSoup(contents, 'lxml') #print(soup.find(\"ul\", attrs={ \"id\" : \"mylist\"})) print(soup.find(\"ul\", id=\"mylist\")) \u8be5\u4ee3\u7801\u793a\u4f8b\u67e5\u627e\u5177\u6709 mylist ID \u7684 ul \u6807\u7b7e\u3002 \u5e26\u6ce8\u91ca\u7684\u884c\u662f\u6267\u884c\u76f8\u540c\u4efb\u52a1\u7684\u53e6\u4e00\u79cd\u65b9\u6cd5\u3002 BeautifulSoup \u67e5\u627e\u6240\u6709\u6807\u7b7e \u00b6 \u4f7f\u7528 find_all() \u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u6ee1\u8db3\u67d0\u4e9b\u6761\u4ef6\u7684\u6240\u6709\u5143\u7d20\u3002 find_all.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/python3 from bs4 import BeautifulSoup with open(\"index.html\", \"r\") as f: contents = f.read() soup = BeautifulSoup(contents, 'lxml') for tag in soup.find_all(\"li\"): print(\"{0}: {1}\".format(tag.name, tag.text)) \u8be5\u4ee3\u7801\u793a\u4f8b\u67e5\u627e\u5e76\u6253\u5370\u6240\u6709 li \u6807\u7b7e\u3002 1 2 3 4 5 $ ./find_all.py li: Solaris li: FreeBSD li: Debian li: NetBSD \u8fd9\u662f\u8f93\u51fa\u3002 find_all() \u65b9\u6cd5\u53ef\u4ee5\u83b7\u53d6\u8981\u641c\u7d22\u7684\u5143\u7d20\u5217\u8868\u3002 find_all2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/python3 from bs4 import BeautifulSoup with open(\"index.html\", \"r\") as f: contents = f.read() soup = BeautifulSoup(contents, 'lxml') tags = soup.find_all(['h2', 'p']) for tag in tags: print(\" \".join(tag.text.split())) \u8be5\u793a\u4f8b\u67e5\u627e\u6240\u6709 h2 \u548c p \u5143\u7d20\u5e76\u6253\u5370\u5176\u6587\u672c\u3002 find_all() \u65b9\u6cd5\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u786e\u5b9a\u5e94\u8fd4\u56de\u54ea\u4e9b\u5143\u7d20\u3002 find_by_fun.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/python3 from bs4 import BeautifulSoup def myfun(tag): return tag.is_empty_element with open(\"index.html\", \"r\") as f: contents = f.read() soup = BeautifulSoup(contents, 'lxml') tags = soup.find_all(myfun) print(tags) \u8be5\u793a\u4f8b\u6253\u5370\u7a7a\u5143\u7d20\u3002 1 2 $ ./find_by_fun.py [<meta charset=\"utf-8\"/>] \u6587\u6863\u4e2d\u552f\u4e00\u7684\u7a7a\u5143\u7d20\u662f meta \u3002 \u4e5f\u53ef\u4ee5\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u67e5\u627e\u5143\u7d20\u3002 regex.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/python3 import re from bs4 import BeautifulSoup with open(\"index.html\", \"r\") as f: contents = f.read() soup = BeautifulSoup(contents, 'lxml') strings = soup.find_all(string=re.compile('BSD')) for txt in strings: print(\" \".join(txt.split())) \u8be5\u793a\u4f8b\u6253\u5370\u5305\u542b\u201c BSD\u201d\u5b57\u7b26\u4e32\u7684\u5143\u7d20\u7684\u5185\u5bb9\u3002 1 2 3 4 $ ./regex.py FreeBSD NetBSD FreeBSD is an advanced computer operating system used to power modern servers, desktops, and embedded platforms. \u8fd9\u662f\u8f93\u51fa\u3002 BeautifulSoup CSS \u9009\u62e9\u5668 \u00b6 \u901a\u8fc7 select() \u548c select_one() \u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e9b CSS \u9009\u62e9\u5668\u6765\u67e5\u627e\u5143\u7d20\u3002 select_nth_tag.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/python3 from bs4 import BeautifulSoup with open(\"index.html\", \"r\") as f: contents = f.read() soup = BeautifulSoup(contents, 'lxml') print(soup.select(\"li:nth-of-type(3)\")) \u672c\u793a\u4f8b\u4f7f\u7528 CSS \u9009\u62e9\u5668\u6765\u6253\u5370\u7b2c\u4e09\u4e2a li \u5143\u7d20\u7684 HTML \u4ee3\u7801\u3002 1 2 $ ./select_nth_tag.py <li>Debian</li> \u8fd9\u662f\u7b2c\u4e09\u4e2a li \u5143\u7d20\u3002 CSS \u4e2d\u4f7f\u7528# \u5b57\u7b26\u901a\u8fc7 ID \u5c5e\u6027\u9009\u62e9\u6807\u7b7e\u3002 select_by_id.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/python3 from bs4 import BeautifulSoup with open(\"index.html\", \"r\") as f: contents = f.read() soup = BeautifulSoup(contents, 'lxml') print(soup.select_one(\"#mylist\")) \u8be5\u793a\u4f8b\u6253\u5370\u5177\u6709 mylist ID \u7684\u5143\u7d20\u3002 BeautifulSoup \u8ffd\u52a0\u5143\u7d20 \u00b6 append() \u65b9\u6cd5\u5c06\u65b0\u6807\u7b7e\u9644\u52a0\u5230 HTML \u6587\u6863\u3002 append_tag.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/usr/bin/python3 from bs4 import BeautifulSoup with open(\"index.html\", \"r\") as f: contents = f.read() soup = BeautifulSoup(contents, 'lxml') newtag = soup.new_tag('li') newtag.string='OpenBSD' ultag = soup.ul ultag.append(newtag) print(ultag.prettify()) \u8be5\u793a\u4f8b\u9644\u52a0\u4e86\u4e00\u4e2a\u65b0\u7684 li \u6807\u7b7e\u3002 1 2 newtag = soup.new_tag('li') newtag.string='OpenBSD' \u9996\u5148\uff0c\u6211\u4eec\u4f7f\u7528 new_tag() \u65b9\u6cd5\u521b\u5efa\u4e00\u4e2a\u65b0\u6807\u7b7e\u3002 1 ultag = soup.ul \u6211\u4eec\u83b7\u5f97\u5bf9 ul \u6807\u7b7e\u7684\u5f15\u7528\u3002 1 ultag.append(newtag) \u6211\u4eec\u5c06\u65b0\u521b\u5efa\u7684\u6807\u7b7e\u9644\u52a0\u5230 ul \u6807\u7b7e\u3002 1 print(ultag.prettify()) \u6211\u4eec\u4ee5\u6574\u9f50\u7684\u683c\u5f0f\u6253\u5370 ul \u6807\u7b7e\u3002 BeautifulSoup \u63d2\u5165\u5143\u7d20 \u00b6 insert() \u65b9\u6cd5\u5728\u6307\u5b9a\u4f4d\u7f6e\u63d2\u5165\u6807\u7b7e\u3002 insert_tag.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/usr/bin/python3 from bs4 import BeautifulSoup with open(\"index.html\", \"r\") as f: contents = f.read() soup = BeautifulSoup(contents, 'lxml') newtag = soup.new_tag('li') newtag.string='OpenBSD' ultag = soup.ul ultag.insert(2, newtag) print(ultag.prettify()) \u8be5\u793a\u4f8b\u5c06\u7b2c\u4e09\u4e2a\u4f4d\u7f6e\u7684 li \u6807\u7b7e\u63d2\u5165 ul \u6807\u7b7e\u3002 BeautifulSoup \u66ff\u6362\u6587\u5b57 \u00b6 replace_with() \u66ff\u6362\u5143\u7d20\u7684\u6587\u672c\u3002 replace_text.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/python3 from bs4 import BeautifulSoup with open(\"index.html\", \"r\") as f: contents = f.read() soup = BeautifulSoup(contents, 'lxml') tag = soup.find(text=\"Windows\") tag.replace_with(\"OpenBSD\") print(soup.ul.prettify()) \u8be5\u793a\u4f8b\u4f7f\u7528 find() \u65b9\u6cd5\u67e5\u627e\u7279\u5b9a\u5143\u7d20\uff0c\u5e76\u4f7f\u7528 replace_with() \u65b9\u6cd5\u66ff\u6362\u5176\u5185\u5bb9\u3002 BeautifulSoup \u5220\u9664\u5143\u7d20 \u00b6 decompose() \u65b9\u6cd5\u4ece\u6811\u4e2d\u5220\u9664\u6807\u7b7e\u5e76\u9500\u6bc1\u5b83\u3002 decompose_tag.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/python3 from bs4 import BeautifulSoup with open(\"index.html\", \"r\") as f: contents = f.read() soup = BeautifulSoup(contents, 'lxml') ptag2 = soup.select_one(\"p:nth-of-type(2)\") ptag2.decompose() print(soup.body.prettify()) \u8be5\u793a\u4f8b\u5220\u9664\u4e86\u7b2c\u4e8c\u4e2a p \u5143\u7d20\u3002 \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 Python BeautifulSoup \u5e93\u3002","title":"BeautifulSoup \u6559\u7a0b"},{"location":"pages/python/pytutorial/python-beautifulsoup/#BeautifulSoup-\u6559\u7a0b","text":"BeautifulSoup \u6559\u7a0b \u662f BeautifulSoup Python \u5e93\u7684\u5165\u95e8\u6559\u7a0b\u3002 \u8fd9\u4e9b\u793a\u4f8b\u67e5\u627e\u6807\u7b7e\uff0c\u904d\u5386\u6587\u6863\u6811\uff0c\u4fee\u6539\u6587\u6863\u548c\u522e\u53d6\u7f51\u9875\u3002","title":"BeautifulSoup \u6559\u7a0b"},{"location":"pages/python/pytutorial/python-beautifulsoup/#BeautifulSoup","text":"BeautifulSoup \u662f\u7528\u4e8e\u89e3\u6790 HTML \u548c XML \u6587\u6863\u7684 Python \u5e93\u3002 \u5b83\u901a\u5e38\u7528\u4e8e\u7f51\u9875\u6293\u53d6\u3002 BeautifulSoup \u5c06\u590d\u6742\u7684 HTML \u6587\u6863\u8f6c\u6362\u4e3a\u590d\u6742\u7684 Python \u5bf9\u8c61\u6811\uff0c\u4f8b\u5982\u6807\u8bb0\uff0c\u53ef\u5bfc\u822a\u5b57\u7b26\u4e32\u6216\u6ce8\u91ca\u3002","title":"BeautifulSoup"},{"location":"pages/python/pytutorial/python-beautifulsoup/#\u5b89\u88c5-BeautifulSoup","text":"\u6211\u4eec\u4f7f\u7528 pip3 \u547d\u4ee4\u5b89\u88c5\u5fc5\u8981\u7684\u6a21\u5757\u3002 1 $ sudo pip3 install lxml \u6211\u4eec\u9700\u8981\u5b89\u88c5 BeautifulSoup \u4f7f\u7528\u7684 lxml \u6a21\u5757\u3002 1 $ sudo pip3 install bs4 \u4e0a\u9762\u7684\u547d\u4ee4\u5c06\u5b89\u88c5 BeautifulSoup\u3002","title":"\u5b89\u88c5 BeautifulSoup"},{"location":"pages/python/pytutorial/python-beautifulsoup/#HTML-\u6587\u4ef6","text":"\u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u4ee5\u4e0b HTML \u6587\u4ef6\uff1a index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 <!DOCTYPE html> <html> <head> <title>Header</title> <meta charset=\"utf-8\"> </head> <body> <h2>Operating systems</h2> <ul id=\"mylist\" style=\"width:150px\"> <li>Solaris</li> <li>FreeBSD</li> <li>Debian</li> <li>NetBSD</li> <li>Windows</li> </ul> <p> FreeBSD is an advanced computer operating system used to power modern servers, desktops, and embedded platforms. </p> <p> Debian is a Unix-like computer operating system that is composed entirely of free software. </p> </body> </html>","title":"HTML \u6587\u4ef6"},{"location":"pages/python/pytutorial/python-beautifulsoup/#BeautifulSoup-\u7b80\u5355\u793a\u4f8b","text":"\u5728\u7b2c\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 BeautifulSoup \u6a21\u5757\u83b7\u53d6\u4e09\u4e2a\u6807\u7b7e\u3002 simple.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/python3 from bs4 import BeautifulSoup with open(\"index.html\", \"r\") as f: contents = f.read() soup = BeautifulSoup(contents, 'lxml') print(soup.h2) print(soup.head) print(soup.li) \u8be5\u4ee3\u7801\u793a\u4f8b\u5c06\u6253\u5370\u4e09\u4e2a\u6807\u7b7e\u7684 HTML \u4ee3\u7801\u3002 1 from bs4 import BeautifulSoup \u6211\u4eec\u4ece bs4 \u6a21\u5757\u5bfc\u5165 BeautifulSoup \u7c7b\u3002 BeautifulSoup \u662f\u4ece\u4e8b\u5de5\u4f5c\u7684\u4e3b\u8981\u73ed\u7ea7\u3002 1 2 3 with open(\"index.html\", \"r\") as f: contents = f.read() \u6211\u4eec\u6253\u5f00 index.html \u6587\u4ef6\u5e76\u4f7f\u7528 read() \u65b9\u6cd5\u8bfb\u53d6\u5176\u5185\u5bb9\u3002 1 soup = BeautifulSoup(contents, 'lxml') \u521b\u5efa\u4e86 BeautifulSoup \u5bf9\u8c61\uff1b HTML \u6570\u636e\u5c06\u4f20\u9012\u7ed9\u6784\u9020\u51fd\u6570\u3002 \u7b2c\u4e8c\u4e2a\u9009\u9879\u6307\u5b9a\u89e3\u6790\u5668\u3002 1 2 print(soup.h2) print(soup.head) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u6253\u5370\u4e24\u4e2a\u6807\u7b7e\u7684 HTML \u4ee3\u7801\uff1a h2 \u548c head \u3002 1 print(soup.li) \u6709\u591a\u4e2a li \u5143\u7d20\uff1b \u8be5\u884c\u6253\u5370\u7b2c\u4e00\u4e2a\u3002 1 2 3 4 5 6 7 $ ./simple.py <h2>Operating systems</h2> <head> <title>Header</title> <meta charset=\"utf-8\"/> </head> <li>Solaris</li> \u8fd9\u662f\u8f93\u51fa\u3002","title":"BeautifulSoup \u7b80\u5355\u793a\u4f8b"},{"location":"pages/python/pytutorial/python-beautifulsoup/#BeautifulSoup-\u6807\u7b7e\u540d\u79f0\u6587\u672c","text":"\u6807\u8bb0\u7684 name \u5c5e\u6027\u7ed9\u51fa\u5176\u540d\u79f0\uff0c text \u5c5e\u6027\u7ed9\u51fa\u5176\u6587\u672c\u5185\u5bb9\u3002 tags_names.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/python3 from bs4 import BeautifulSoup with open(\"index.html\", \"r\") as f: contents = f.read() soup = BeautifulSoup(contents, 'lxml') print(\"HTML: {0}, name: {1}, text: {2}\".format(soup.h2, soup.h2.name, soup.h2.text)) \u8be5\u4ee3\u7801\u793a\u4f8b\u6253\u5370 h2 \u6807\u7b7e\u7684 HTML \u4ee3\u7801\uff0c\u540d\u79f0\u548c\u6587\u672c\u3002 1 2 $ ./tags_names.py HTML: <h2>Operating systems</h2>, name: h2, text: Operating systems \u8fd9\u662f\u8f93\u51fa\u3002","title":"BeautifulSoup \u6807\u7b7e\uff0c\u540d\u79f0\uff0c\u6587\u672c"},{"location":"pages/python/pytutorial/python-beautifulsoup/#BeautifulSoup-\u904d\u5386\u6807\u7b7e","text":"\u4f7f\u7528 recursiveChildGenerator() \u65b9\u6cd5\uff0c\u6211\u4eec\u904d\u5386 HTML \u6587\u6863\u3002 traverse_tree.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/python3 from bs4 import BeautifulSoup with open(\"index.html\", \"r\") as f: contents = f.read() soup = BeautifulSoup(contents, 'lxml') for child in soup.recursiveChildGenerator(): if child.name: print(child.name) \u8be5\u793a\u4f8b\u904d\u5386\u6587\u6863\u6811\u5e76\u6253\u5370\u6240\u6709 HTML \u6807\u8bb0\u7684\u540d\u79f0\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 $ ./traverse_tree.py html head title meta body h2 ul li li li li li p p \u5728 HTML \u6587\u6863\u4e2d\uff0c\u6211\u4eec\u6709\u8fd9\u4e9b\u6807\u7b7e\u3002","title":"BeautifulSoup \u904d\u5386\u6807\u7b7e"},{"location":"pages/python/pytutorial/python-beautifulsoup/#BeautifulSoup-\u5b50\u5143\u7d20","text":"\u4f7f\u7528 children \u5c5e\u6027\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u6807\u7b7e\u7684\u5b50\u7ea7\u3002 get_children.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/python3 from bs4 import BeautifulSoup with open(\"index.html\", \"r\") as f: contents = f.read() soup = BeautifulSoup(contents, 'lxml') root = soup.html root_childs = [e.name for e in root.children if e.name is not None] print(root_childs) \u8be5\u793a\u4f8b\u68c0\u7d22 html \u6807\u8bb0\u7684\u5b50\u4ee3\uff0c\u5c06\u5b83\u4eec\u653e\u7f6e\u5728 Python \u5217\u8868\u4e2d\uff0c\u7136\u540e\u5c06\u5176\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 \u7531\u4e8e children \u5c5e\u6027\u8fd8\u8fd4\u56de\u6807\u7b7e\u4e4b\u95f4\u7684\u7a7a\u683c\uff0c\u56e0\u6b64\u6211\u4eec\u6dfb\u52a0\u4e86\u4e00\u4e2a\u6761\u4ef6\uff0c\u4f7f\u5176\u4ec5\u5305\u542b\u6807\u7b7e\u540d\u79f0\u3002 1 2 $ ./get_children.py ['head', 'body'] html \u6807\u7b7e\u6709\u4e24\u4e2a\u5b50\u5143\u7d20\uff1a head \u548c body \u3002","title":"BeautifulSoup \u5b50\u5143\u7d20"},{"location":"pages/python/pytutorial/python-beautifulsoup/#BeautifulSoup-\u540e\u7ee7\u5143\u7d20","text":"\u4f7f\u7528 descendants \u5c5e\u6027\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u6807\u7b7e\u7684\u6240\u6709\u540e\u4ee3\uff08\u6240\u6709\u7ea7\u522b\u7684\u5b50\u7ea7\uff09\u3002 get_descendants.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/python3 from bs4 import BeautifulSoup with open(\"index.html\", \"r\") as f: contents = f.read() soup = BeautifulSoup(contents, 'lxml') root = soup.body root_childs = [e.name for e in root.descendants if e.name is not None] print(root_childs) \u8be5\u793a\u4f8b\u68c0\u7d22 body \u6807\u8bb0\u7684\u6240\u6709\u540e\u4ee3\u3002 1 2 $ ./get_descendants.py ['h2', 'ul', 'li', 'li', 'li', 'li', 'li', 'p', 'p'] \u8fd9\u4e9b\u90fd\u662f body \u6807\u7b7e\u7684\u540e\u4ee3\u3002","title":"BeautifulSoup \u540e\u7ee7\u5143\u7d20"},{"location":"pages/python/pytutorial/python-beautifulsoup/#BeautifulSoup-\u7f51\u9875\u6293\u53d6","text":"\u8bf7\u6c42\u662f\u4e00\u4e2a\u7b80\u5355\u7684 Python HTTP \u5e93\u3002 \u5b83\u63d0\u4f9b\u4e86\u901a\u8fc7 HTTP \u8bbf\u95ee Web \u8d44\u6e90\u7684\u65b9\u6cd5\u3002 scraping.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/python3 from bs4 import BeautifulSoup import requests as req resp = req.get(\"http://www.something.com\") soup = BeautifulSoup(resp.text, 'lxml') print(soup.title) print(soup.title.text) print(soup.title.parent) \u8be5\u793a\u4f8b\u68c0\u7d22\u4e00\u4e2a\u7b80\u5355\u7f51\u9875\u7684\u6807\u9898\u3002 \u5b83\u8fd8\u6253\u5370\u5176\u7236\u7ea7\u3002 1 2 3 resp = req.get(\"http://www.something.com\") soup = BeautifulSoup(resp.text, 'lxml') \u6211\u4eec\u83b7\u53d6\u9875\u9762\u7684 HTML \u6570\u636e\u3002 1 2 3 print(soup.title) print(soup.title.text) print(soup.title.parent) \u6211\u4eec\u68c0\u7d22\u6807\u9898\u7684 HTML \u4ee3\u7801\uff0c\u5176\u6587\u672c\u4ee5\u53ca\u5176\u7236\u7ea7\u7684 HTML \u4ee3\u7801\u3002 1 2 3 4 $ ./scraping.py <title>Something.</title> Something. <head><title>Something.</title></head> \u8fd9\u662f\u8f93\u51fa\u3002","title":"BeautifulSoup \u7f51\u9875\u6293\u53d6"},{"location":"pages/python/pytutorial/python-beautifulsoup/#BeautifulSoup-\u7f8e\u5316\u4ee3\u7801","text":"\u4f7f\u7528 prettify() \u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f HTML \u4ee3\u7801\u770b\u8d77\u6765\u66f4\u597d\u3002 prettify.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/python3 from bs4 import BeautifulSoup import requests as req resp = req.get(\"http://www.something.com\") soup = BeautifulSoup(resp.text, 'lxml') print(soup.prettify()) \u6211\u4eec\u7f8e\u5316\u4e86\u4e00\u4e2a\u7b80\u5355\u7f51\u9875\u7684 HTML \u4ee3\u7801\u3002 1 2 3 4 5 6 7 8 9 10 11 $ ./prettify.py <html> <head> <title> Something. </title> </head> <body> Something. </body> </html> \u8fd9\u662f\u8f93\u51fa\u3002","title":"BeautifulSoup \u7f8e\u5316\u4ee3\u7801"},{"location":"pages/python/pytutorial/python-beautifulsoup/#BeautifulSoup-\u901a\u8fc7-ID-\u67e5\u627e\u5143\u7d20","text":"\u4f7f\u7528 find() \u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5404\u79cd\u65b9\u5f0f\uff08\u5305\u62ec\u5143\u7d20 ID\uff09\u67e5\u627e\u5143\u7d20\u3002 find_by_id.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/python3 from bs4 import BeautifulSoup with open(\"index.html\", \"r\") as f: contents = f.read() soup = BeautifulSoup(contents, 'lxml') #print(soup.find(\"ul\", attrs={ \"id\" : \"mylist\"})) print(soup.find(\"ul\", id=\"mylist\")) \u8be5\u4ee3\u7801\u793a\u4f8b\u67e5\u627e\u5177\u6709 mylist ID \u7684 ul \u6807\u7b7e\u3002 \u5e26\u6ce8\u91ca\u7684\u884c\u662f\u6267\u884c\u76f8\u540c\u4efb\u52a1\u7684\u53e6\u4e00\u79cd\u65b9\u6cd5\u3002","title":"BeautifulSoup \u901a\u8fc7 ID \u67e5\u627e\u5143\u7d20"},{"location":"pages/python/pytutorial/python-beautifulsoup/#BeautifulSoup-\u67e5\u627e\u6240\u6709\u6807\u7b7e","text":"\u4f7f\u7528 find_all() \u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u6ee1\u8db3\u67d0\u4e9b\u6761\u4ef6\u7684\u6240\u6709\u5143\u7d20\u3002 find_all.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/python3 from bs4 import BeautifulSoup with open(\"index.html\", \"r\") as f: contents = f.read() soup = BeautifulSoup(contents, 'lxml') for tag in soup.find_all(\"li\"): print(\"{0}: {1}\".format(tag.name, tag.text)) \u8be5\u4ee3\u7801\u793a\u4f8b\u67e5\u627e\u5e76\u6253\u5370\u6240\u6709 li \u6807\u7b7e\u3002 1 2 3 4 5 $ ./find_all.py li: Solaris li: FreeBSD li: Debian li: NetBSD \u8fd9\u662f\u8f93\u51fa\u3002 find_all() \u65b9\u6cd5\u53ef\u4ee5\u83b7\u53d6\u8981\u641c\u7d22\u7684\u5143\u7d20\u5217\u8868\u3002 find_all2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/python3 from bs4 import BeautifulSoup with open(\"index.html\", \"r\") as f: contents = f.read() soup = BeautifulSoup(contents, 'lxml') tags = soup.find_all(['h2', 'p']) for tag in tags: print(\" \".join(tag.text.split())) \u8be5\u793a\u4f8b\u67e5\u627e\u6240\u6709 h2 \u548c p \u5143\u7d20\u5e76\u6253\u5370\u5176\u6587\u672c\u3002 find_all() \u65b9\u6cd5\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u786e\u5b9a\u5e94\u8fd4\u56de\u54ea\u4e9b\u5143\u7d20\u3002 find_by_fun.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/python3 from bs4 import BeautifulSoup def myfun(tag): return tag.is_empty_element with open(\"index.html\", \"r\") as f: contents = f.read() soup = BeautifulSoup(contents, 'lxml') tags = soup.find_all(myfun) print(tags) \u8be5\u793a\u4f8b\u6253\u5370\u7a7a\u5143\u7d20\u3002 1 2 $ ./find_by_fun.py [<meta charset=\"utf-8\"/>] \u6587\u6863\u4e2d\u552f\u4e00\u7684\u7a7a\u5143\u7d20\u662f meta \u3002 \u4e5f\u53ef\u4ee5\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u67e5\u627e\u5143\u7d20\u3002 regex.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/python3 import re from bs4 import BeautifulSoup with open(\"index.html\", \"r\") as f: contents = f.read() soup = BeautifulSoup(contents, 'lxml') strings = soup.find_all(string=re.compile('BSD')) for txt in strings: print(\" \".join(txt.split())) \u8be5\u793a\u4f8b\u6253\u5370\u5305\u542b\u201c BSD\u201d\u5b57\u7b26\u4e32\u7684\u5143\u7d20\u7684\u5185\u5bb9\u3002 1 2 3 4 $ ./regex.py FreeBSD NetBSD FreeBSD is an advanced computer operating system used to power modern servers, desktops, and embedded platforms. \u8fd9\u662f\u8f93\u51fa\u3002","title":"BeautifulSoup \u67e5\u627e\u6240\u6709\u6807\u7b7e"},{"location":"pages/python/pytutorial/python-beautifulsoup/#BeautifulSoup-CSS-\u9009\u62e9\u5668","text":"\u901a\u8fc7 select() \u548c select_one() \u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e9b CSS \u9009\u62e9\u5668\u6765\u67e5\u627e\u5143\u7d20\u3002 select_nth_tag.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/python3 from bs4 import BeautifulSoup with open(\"index.html\", \"r\") as f: contents = f.read() soup = BeautifulSoup(contents, 'lxml') print(soup.select(\"li:nth-of-type(3)\")) \u672c\u793a\u4f8b\u4f7f\u7528 CSS \u9009\u62e9\u5668\u6765\u6253\u5370\u7b2c\u4e09\u4e2a li \u5143\u7d20\u7684 HTML \u4ee3\u7801\u3002 1 2 $ ./select_nth_tag.py <li>Debian</li> \u8fd9\u662f\u7b2c\u4e09\u4e2a li \u5143\u7d20\u3002 CSS \u4e2d\u4f7f\u7528# \u5b57\u7b26\u901a\u8fc7 ID \u5c5e\u6027\u9009\u62e9\u6807\u7b7e\u3002 select_by_id.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/python3 from bs4 import BeautifulSoup with open(\"index.html\", \"r\") as f: contents = f.read() soup = BeautifulSoup(contents, 'lxml') print(soup.select_one(\"#mylist\")) \u8be5\u793a\u4f8b\u6253\u5370\u5177\u6709 mylist ID \u7684\u5143\u7d20\u3002","title":"BeautifulSoup CSS \u9009\u62e9\u5668"},{"location":"pages/python/pytutorial/python-beautifulsoup/#BeautifulSoup-\u8ffd\u52a0\u5143\u7d20","text":"append() \u65b9\u6cd5\u5c06\u65b0\u6807\u7b7e\u9644\u52a0\u5230 HTML \u6587\u6863\u3002 append_tag.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/usr/bin/python3 from bs4 import BeautifulSoup with open(\"index.html\", \"r\") as f: contents = f.read() soup = BeautifulSoup(contents, 'lxml') newtag = soup.new_tag('li') newtag.string='OpenBSD' ultag = soup.ul ultag.append(newtag) print(ultag.prettify()) \u8be5\u793a\u4f8b\u9644\u52a0\u4e86\u4e00\u4e2a\u65b0\u7684 li \u6807\u7b7e\u3002 1 2 newtag = soup.new_tag('li') newtag.string='OpenBSD' \u9996\u5148\uff0c\u6211\u4eec\u4f7f\u7528 new_tag() \u65b9\u6cd5\u521b\u5efa\u4e00\u4e2a\u65b0\u6807\u7b7e\u3002 1 ultag = soup.ul \u6211\u4eec\u83b7\u5f97\u5bf9 ul \u6807\u7b7e\u7684\u5f15\u7528\u3002 1 ultag.append(newtag) \u6211\u4eec\u5c06\u65b0\u521b\u5efa\u7684\u6807\u7b7e\u9644\u52a0\u5230 ul \u6807\u7b7e\u3002 1 print(ultag.prettify()) \u6211\u4eec\u4ee5\u6574\u9f50\u7684\u683c\u5f0f\u6253\u5370 ul \u6807\u7b7e\u3002","title":"BeautifulSoup \u8ffd\u52a0\u5143\u7d20"},{"location":"pages/python/pytutorial/python-beautifulsoup/#BeautifulSoup-\u63d2\u5165\u5143\u7d20","text":"insert() \u65b9\u6cd5\u5728\u6307\u5b9a\u4f4d\u7f6e\u63d2\u5165\u6807\u7b7e\u3002 insert_tag.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/usr/bin/python3 from bs4 import BeautifulSoup with open(\"index.html\", \"r\") as f: contents = f.read() soup = BeautifulSoup(contents, 'lxml') newtag = soup.new_tag('li') newtag.string='OpenBSD' ultag = soup.ul ultag.insert(2, newtag) print(ultag.prettify()) \u8be5\u793a\u4f8b\u5c06\u7b2c\u4e09\u4e2a\u4f4d\u7f6e\u7684 li \u6807\u7b7e\u63d2\u5165 ul \u6807\u7b7e\u3002","title":"BeautifulSoup \u63d2\u5165\u5143\u7d20"},{"location":"pages/python/pytutorial/python-beautifulsoup/#BeautifulSoup-\u66ff\u6362\u6587\u5b57","text":"replace_with() \u66ff\u6362\u5143\u7d20\u7684\u6587\u672c\u3002 replace_text.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/python3 from bs4 import BeautifulSoup with open(\"index.html\", \"r\") as f: contents = f.read() soup = BeautifulSoup(contents, 'lxml') tag = soup.find(text=\"Windows\") tag.replace_with(\"OpenBSD\") print(soup.ul.prettify()) \u8be5\u793a\u4f8b\u4f7f\u7528 find() \u65b9\u6cd5\u67e5\u627e\u7279\u5b9a\u5143\u7d20\uff0c\u5e76\u4f7f\u7528 replace_with() \u65b9\u6cd5\u66ff\u6362\u5176\u5185\u5bb9\u3002","title":"BeautifulSoup \u66ff\u6362\u6587\u5b57"},{"location":"pages/python/pytutorial/python-beautifulsoup/#BeautifulSoup-\u5220\u9664\u5143\u7d20","text":"decompose() \u65b9\u6cd5\u4ece\u6811\u4e2d\u5220\u9664\u6807\u7b7e\u5e76\u9500\u6bc1\u5b83\u3002 decompose_tag.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/python3 from bs4 import BeautifulSoup with open(\"index.html\", \"r\") as f: contents = f.read() soup = BeautifulSoup(contents, 'lxml') ptag2 = soup.select_one(\"p:nth-of-type(2)\") ptag2.decompose() print(soup.body.prettify()) \u8be5\u793a\u4f8b\u5220\u9664\u4e86\u7b2c\u4e8c\u4e2a p \u5143\u7d20\u3002 \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 Python BeautifulSoup \u5e93\u3002","title":"BeautifulSoup \u5220\u9664\u5143\u7d20"},{"location":"pages/python/pytutorial/python-cerberus/","text":"Python Cerberus \u6559\u7a0b \u00b6 Python Cerberus \u6559\u7a0b \u5c55\u793a\u4e86\u5982\u4f55\u5728 Python \u4e2d\u4f7f\u7528 Cerberus \u9a8c\u8bc1\u6570\u636e\u3002 Cerberus \u00b6 Cerberus \u662f\u4e00\u4e2a Python \u9a8c\u8bc1\u5e93\uff0c\u5b83\u63d0\u4f9b\u4e86\u529f\u80fd\u5f3a\u5927\u800c\u53c8\u7b80\u5355\u8f7b\u5de7\u7684\u6570\u636e\u9a8c\u8bc1\u529f\u80fd\u3002 \u5b83\u88ab\u8bbe\u8ba1\u4e3a\u6613\u4e8e\u6269\u5c55\uff0c\u5141\u8bb8\u81ea\u5b9a\u4e49\u9a8c\u8bc1\u3002 Cerberus \u901a\u8fc7\u5b9a\u4e49\u6570\u636e\u9a8c\u8bc1\u6a21\u5f0f\u6765\u5de5\u4f5c\u3002 \u8be5\u6a21\u5f0f\u5c06\u4f20\u9012\u5230 Validator \u5e76\u4f7f\u7528 validate() \u8fdb\u884c\u9a8c\u8bc1\u3002 \u5b83\u5177\u6709\u9002\u7528\u4e8e\u6570\u636e\u7684\u4e00\u7ec4\u89c4\u5219\uff0c\u4f8b\u5982 required \uff0c min \u6216 max \u3002 \u53ef\u4ee5\u5c06\u591a\u4e2a\u89c4\u5219\u5e94\u7528\u4e8e\u6570\u636e\u5b57\u6bb5\u3002 \u5982\u679c\u9a8c\u8bc1\u5931\u8d25\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u5e26\u6709 errors \u5c5e\u6027\u7684\u9519\u8bef\u6d88\u606f\u3002 Cerberus \u7c7b\u578b \u00b6 \u4ee5\u4e0b\u662f Cerberus \u7684\u7b80\u5355\u6f14\u793a\uff0c\u4f7f\u7528 type \u89c4\u5219\uff0c\u6211\u4eec\u53ef\u4ee5\u8bbe\u7f6e\u5b57\u6bb5\u7684\u9884\u671f\u6570\u636e\u7c7b\u578b\u3002 simple.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python3 from cerberus import Validator schema = {'name': {'type': 'string'}} v = Validator(schema) document = {'name': 'john doe'} if v.validate(document): print('data is valid') else: print('invalid data') \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u9a8c\u8bc1 name \u5b57\u6bb5\uff1b \u6211\u4eec\u5e0c\u671b\u5b83\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u503c\u3002 1 from cerberus import Validator \u6211\u4eec\u5bfc\u5165 Validator \u7c7b\u3002 1 schema = {'name': {'type': 'string'}} \u6211\u4eec\u5b9a\u4e49\u6a21\u5f0f\u3002 \u8fd9\u662f Python \u5b57\u5178\u3002 \u6211\u4eec\u6307\u5b9a\u540d\u79f0\u5b57\u6bb5\u5fc5\u987b\u4e3a\u5b57\u7b26\u4e32\u3002 1 document = {'name': 'john doe'} \u8fd9\u662f\u6211\u4eec\u7684\u6570\u636e\u3002 1 2 3 4 if v.validate(document): print('data is valid') else: print('invalid data') \u6211\u4eec\u4f7f\u7528 validate() \u9a8c\u8bc1\u6570\u636e\u3002 1 2 $ ./simple.py data is valid \u5728\u7b2c\u4e8c\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u68c0\u67e5\u5b57\u7b26\u4e32\u548c\u5217\u8868\u7c7b\u578b\u3002 types.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/env python3 from cerberus import Validator v = Validator() v.schema = {'words': {'type': ['string', 'list']}} if v.validate({'words': 'falcon'}): print('valid data') else: print('invalid data') if v.validate({'words': ['falcon', 'sky', 'cloud']}): print('valid data') else: print('invalid data') \u8be5\u793a\u4f8b\u9a8c\u8bc1 words \u5b57\u6bb5\u662f\u5b57\u7b26\u4e32\u8fd8\u662f\u5217\u8868\u3002 Cerberus \u6cd5\u5219 \u00b6 required \u89c4\u5219\u4f7f\u8be5\u5b57\u6bb5\u4e3a\u5fc5\u586b\u5b57\u6bb5\u3002 required.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python3 from cerberus import Validator v = Validator() v.schema = {'name': {'required': True, 'type': 'string'}, 'age': {'type': 'integer'}} if v.validate({'age': 34}): print('valid data') else: print('invalid data') print(v.errors) \u8be5\u793a\u4f8b\u6709\u4e24\u4e2a\u6570\u636e\u5b57\u6bb5\uff1a name \u548c age \u3002 name \u662f\u5fc5\u586b\u5b57\u6bb5\u3002 1 2 3 $ ./required.py invalid data {'name': ['required field']} \u6211\u4eec\u7701\u7565\u4e86 name \u5b57\u6bb5\uff1b \u56e0\u6b64\uff0c\u9a8c\u8bc1\u5931\u8d25\u3002 Cerberus \u6700\u5c0f\u548c\u6700\u5927\u89c4\u5219 \u00b6 min \u548c max \u89c4\u5219\u8bbe\u7f6e\u6574\u6570\uff0c\u6d6e\u70b9\u6570\u548c\u6570\u5b57\u7c7b\u578b\u6240\u5141\u8bb8\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u3002 \u5bf9\u4e8e\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 minlength \u548c maxlength \u3002 min_max.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python3 from cerberus import Validator v = Validator() v.schema = {'name': { 'type': 'string', 'minlength': 2}, 'age': {'type': 'integer', 'min': 18, 'max': 65}} if v.validate({'name': 'J', 'age': 4}): print('valid data') else: print('invalid data') print(v.errors) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4e3a\u5b57\u7b26\u4e32\u8bbe\u7f6e\u4e86\u6700\u5c0f\u957f\u5ea6\uff0c\u4e3a\u6574\u6570\u8bbe\u7f6e\u4e86\u6700\u5c0f\u548c\u6700\u5927\u5927\u5c0f\u3002 1 2 3 $ ./min_max.py invalid data {'age': ['min value is 18'], 'name': ['min length is 2']} \u6211\u4eec\u6709\u4e24\u4e2a\u9a8c\u8bc1\u9519\u8bef\u3002 Cerberus \u6b63\u5219\u8868\u8fbe\u5f0f\u89c4\u5219 \u00b6 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u5b9a\u4e49\u66f4\u590d\u6742\u7684\u89c4\u5219\u3002 regex.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 #!/usr/bin/env python3 from cerberus import Validator v = Validator() v.schema = {\"contact_details\": { \"type\": \"dict\", \"schema\": { \"phone\": { \"type\": \"string\", \"minlength\": 10, \"maxlength\": 10, \"regex\": \"^0[0-9]{9}$\" }, \"email\": { \"type\": \"string\", \"minlength\": 8, \"maxlength\": 255, \"required\": True, \"regex\": \"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\\\.[a-zA-Z0-9-.]+$\" } } }} if v.validate({'contact_details': {'phone': '0901123123', 'email': 'john.doe@example.com'}}): print('valid data') else: print('invalid data') print(v.errors) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u4e3a phone \u548c email \u5b57\u6bb5\u5b9a\u4e49\u9a8c\u8bc1\u89c4\u5219\u3002 Cerberus \u503c\u5f3a\u5236\u8f6c\u6362 \u00b6 \u503c\u5f3a\u5236\u4f7f\u6211\u4eec\u53ef\u4ee5\u5728\u6570\u636e\u9a8c\u8bc1\u4e4b\u524d\u5c06\u53ef\u8c03\u7528\u5bf9\u8c61\u5e94\u7528\u4e8e\u503c\u3002 \u53ef\u8c03\u7528\u5bf9\u8c61\u7684\u8fd4\u56de\u503c\u66ff\u6362\u6587\u6863\u4e2d\u7684\u65b0\u503c\u3002 \u5728\u9a8c\u8bc1\u4e4b\u524d\uff0c\u53ef\u4ee5\u4f7f\u7528\u5f3a\u5236\u8f6c\u6362\u6570\u636e\u6216\u6e05\u9664\u6570\u636e\u3002 coercing.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #!/usr/bin/env python3 from cerberus import Validator from datetime import datetime def to_date(s): return datetime.strptime(s, '%Y-%m-%d') v = Validator() v.schema = {'start_date': {'type': 'datetime', 'coerce': to_date}} if v.validate({'start_date': '2019-12-11'}): print('valid data') else: print('invalid data') print(v.errors) if v.validate({'start_date': '2019/12/11'}): print('valid data') else: print('invalid data') print(v.errors) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u81ea\u5b9a\u4e49 to_date() \u51fd\u6570\u5c06\u6570\u636e\u65f6\u95f4\u503c\u8f6c\u6362\u4e3a\u9009\u5b9a\u7684\u683c\u5f0f\u3002 1 2 3 4 5 $ ./coercing.py valid data invalid data {'start_date': [\"field 'start_date' cannot be coerced: time data '2019/12/11' does not match format '%Y-%m-%d'\", 'must be of datetime type']} \u4f7f\u7528 YAML \u6587\u4ef6 \u00b6 \u5728\u4e0b\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u6570\u636e\u5b58\u50a8\u5728 YAML \u6587\u4ef6\u4e2d\u3002 cities.yaml 1 2 3 4 5 6 cities: - Bratislava - Kosice - Trnava - Moldava - Trencin \u8be5\u6587\u4ef6\u5305\u542b\u57ce\u5e02\u5217\u8868\u3002 from_yaml.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/usr/bin/env python3 from cerberus import Validator import yaml v = Validator() v.schema = {'cities': {'type': 'list', 'schema': {'type': 'string'}}} with open('cities.yaml') as f: data = yaml.load(f, Loader=yaml.FullLoader) print(data) if v.validate({'cities': data['cities']}): print('valid data') else: print('invalid data') print(v.errors) \u6211\u4eec\u4ece YAML \u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\u5e76\u8fdb\u884c\u9a8c\u8bc1\u3002 schema \u89c4\u5219\u8bbe\u7f6e\u9488\u5bf9\u5217\u8868\u7684\u6240\u6709\u5143\u7d20\u9a8c\u8bc1\u5b9a\u4e49\u7684\u89c4\u5219\u3002 1 2 v = Validator() v.schema = {'cities': {'type': 'list', 'schema': {'type': 'string'}}} cities \u5b57\u6bb5\u5fc5\u987b\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u5e76\u4e14\u5176\u6240\u6709\u5143\u7d20\u90fd\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u3002 Cerberus \u5b9a\u5236\u9a8c\u8bc1\u5668 \u00b6 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4ece Validator \u7c7b\u6269\u5c55\u6765\u521b\u5efa\u81ea\u5b9a\u4e49\u9a8c\u8bc1\u5668\u3002 custom_validator.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #!/usr/bin/env python3 from cerberus import Validator from dataclasses import dataclass @dataclass class Person: name: str age: int class PersonValidator(Validator): def validate_person(self, obj): return self.validate(obj.__dict__) schema = {'name': { 'type': 'string', 'minlength': 2}, 'age': {'type': 'integer', 'min': 18, 'max': 65}} v = PersonValidator(schema) p = Person('John Doe', 2) if v.validate_person(p): print('valid data') else: print('invalid data') print(v.errors) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4e3a Person \u5bf9\u8c61\u5b9a\u4e49\u4e86\u4e00\u4e2a\u81ea\u5b9a\u4e49\u9a8c\u8bc1\u5668\u3002","title":"Python Cerberus \u6559\u7a0b"},{"location":"pages/python/pytutorial/python-cerberus/#Python-Cerberus-\u6559\u7a0b","text":"Python Cerberus \u6559\u7a0b \u5c55\u793a\u4e86\u5982\u4f55\u5728 Python \u4e2d\u4f7f\u7528 Cerberus \u9a8c\u8bc1\u6570\u636e\u3002","title":"Python Cerberus \u6559\u7a0b"},{"location":"pages/python/pytutorial/python-cerberus/#Cerberus","text":"Cerberus \u662f\u4e00\u4e2a Python \u9a8c\u8bc1\u5e93\uff0c\u5b83\u63d0\u4f9b\u4e86\u529f\u80fd\u5f3a\u5927\u800c\u53c8\u7b80\u5355\u8f7b\u5de7\u7684\u6570\u636e\u9a8c\u8bc1\u529f\u80fd\u3002 \u5b83\u88ab\u8bbe\u8ba1\u4e3a\u6613\u4e8e\u6269\u5c55\uff0c\u5141\u8bb8\u81ea\u5b9a\u4e49\u9a8c\u8bc1\u3002 Cerberus \u901a\u8fc7\u5b9a\u4e49\u6570\u636e\u9a8c\u8bc1\u6a21\u5f0f\u6765\u5de5\u4f5c\u3002 \u8be5\u6a21\u5f0f\u5c06\u4f20\u9012\u5230 Validator \u5e76\u4f7f\u7528 validate() \u8fdb\u884c\u9a8c\u8bc1\u3002 \u5b83\u5177\u6709\u9002\u7528\u4e8e\u6570\u636e\u7684\u4e00\u7ec4\u89c4\u5219\uff0c\u4f8b\u5982 required \uff0c min \u6216 max \u3002 \u53ef\u4ee5\u5c06\u591a\u4e2a\u89c4\u5219\u5e94\u7528\u4e8e\u6570\u636e\u5b57\u6bb5\u3002 \u5982\u679c\u9a8c\u8bc1\u5931\u8d25\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u5e26\u6709 errors \u5c5e\u6027\u7684\u9519\u8bef\u6d88\u606f\u3002","title":"Cerberus"},{"location":"pages/python/pytutorial/python-cerberus/#Cerberus-\u7c7b\u578b","text":"\u4ee5\u4e0b\u662f Cerberus \u7684\u7b80\u5355\u6f14\u793a\uff0c\u4f7f\u7528 type \u89c4\u5219\uff0c\u6211\u4eec\u53ef\u4ee5\u8bbe\u7f6e\u5b57\u6bb5\u7684\u9884\u671f\u6570\u636e\u7c7b\u578b\u3002 simple.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python3 from cerberus import Validator schema = {'name': {'type': 'string'}} v = Validator(schema) document = {'name': 'john doe'} if v.validate(document): print('data is valid') else: print('invalid data') \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u9a8c\u8bc1 name \u5b57\u6bb5\uff1b \u6211\u4eec\u5e0c\u671b\u5b83\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u503c\u3002 1 from cerberus import Validator \u6211\u4eec\u5bfc\u5165 Validator \u7c7b\u3002 1 schema = {'name': {'type': 'string'}} \u6211\u4eec\u5b9a\u4e49\u6a21\u5f0f\u3002 \u8fd9\u662f Python \u5b57\u5178\u3002 \u6211\u4eec\u6307\u5b9a\u540d\u79f0\u5b57\u6bb5\u5fc5\u987b\u4e3a\u5b57\u7b26\u4e32\u3002 1 document = {'name': 'john doe'} \u8fd9\u662f\u6211\u4eec\u7684\u6570\u636e\u3002 1 2 3 4 if v.validate(document): print('data is valid') else: print('invalid data') \u6211\u4eec\u4f7f\u7528 validate() \u9a8c\u8bc1\u6570\u636e\u3002 1 2 $ ./simple.py data is valid \u5728\u7b2c\u4e8c\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u68c0\u67e5\u5b57\u7b26\u4e32\u548c\u5217\u8868\u7c7b\u578b\u3002 types.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/env python3 from cerberus import Validator v = Validator() v.schema = {'words': {'type': ['string', 'list']}} if v.validate({'words': 'falcon'}): print('valid data') else: print('invalid data') if v.validate({'words': ['falcon', 'sky', 'cloud']}): print('valid data') else: print('invalid data') \u8be5\u793a\u4f8b\u9a8c\u8bc1 words \u5b57\u6bb5\u662f\u5b57\u7b26\u4e32\u8fd8\u662f\u5217\u8868\u3002","title":"Cerberus \u7c7b\u578b"},{"location":"pages/python/pytutorial/python-cerberus/#Cerberus-\u6cd5\u5219","text":"required \u89c4\u5219\u4f7f\u8be5\u5b57\u6bb5\u4e3a\u5fc5\u586b\u5b57\u6bb5\u3002 required.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python3 from cerberus import Validator v = Validator() v.schema = {'name': {'required': True, 'type': 'string'}, 'age': {'type': 'integer'}} if v.validate({'age': 34}): print('valid data') else: print('invalid data') print(v.errors) \u8be5\u793a\u4f8b\u6709\u4e24\u4e2a\u6570\u636e\u5b57\u6bb5\uff1a name \u548c age \u3002 name \u662f\u5fc5\u586b\u5b57\u6bb5\u3002 1 2 3 $ ./required.py invalid data {'name': ['required field']} \u6211\u4eec\u7701\u7565\u4e86 name \u5b57\u6bb5\uff1b \u56e0\u6b64\uff0c\u9a8c\u8bc1\u5931\u8d25\u3002","title":"Cerberus \u6cd5\u5219"},{"location":"pages/python/pytutorial/python-cerberus/#Cerberus-\u6700\u5c0f\u548c\u6700\u5927\u89c4\u5219","text":"min \u548c max \u89c4\u5219\u8bbe\u7f6e\u6574\u6570\uff0c\u6d6e\u70b9\u6570\u548c\u6570\u5b57\u7c7b\u578b\u6240\u5141\u8bb8\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u3002 \u5bf9\u4e8e\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 minlength \u548c maxlength \u3002 min_max.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python3 from cerberus import Validator v = Validator() v.schema = {'name': { 'type': 'string', 'minlength': 2}, 'age': {'type': 'integer', 'min': 18, 'max': 65}} if v.validate({'name': 'J', 'age': 4}): print('valid data') else: print('invalid data') print(v.errors) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4e3a\u5b57\u7b26\u4e32\u8bbe\u7f6e\u4e86\u6700\u5c0f\u957f\u5ea6\uff0c\u4e3a\u6574\u6570\u8bbe\u7f6e\u4e86\u6700\u5c0f\u548c\u6700\u5927\u5927\u5c0f\u3002 1 2 3 $ ./min_max.py invalid data {'age': ['min value is 18'], 'name': ['min length is 2']} \u6211\u4eec\u6709\u4e24\u4e2a\u9a8c\u8bc1\u9519\u8bef\u3002","title":"Cerberus \u6700\u5c0f\u548c\u6700\u5927\u89c4\u5219"},{"location":"pages/python/pytutorial/python-cerberus/#Cerberus-\u6b63\u5219\u8868\u8fbe\u5f0f\u89c4\u5219","text":"\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u5b9a\u4e49\u66f4\u590d\u6742\u7684\u89c4\u5219\u3002 regex.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 #!/usr/bin/env python3 from cerberus import Validator v = Validator() v.schema = {\"contact_details\": { \"type\": \"dict\", \"schema\": { \"phone\": { \"type\": \"string\", \"minlength\": 10, \"maxlength\": 10, \"regex\": \"^0[0-9]{9}$\" }, \"email\": { \"type\": \"string\", \"minlength\": 8, \"maxlength\": 255, \"required\": True, \"regex\": \"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\\\.[a-zA-Z0-9-.]+$\" } } }} if v.validate({'contact_details': {'phone': '0901123123', 'email': 'john.doe@example.com'}}): print('valid data') else: print('invalid data') print(v.errors) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u4e3a phone \u548c email \u5b57\u6bb5\u5b9a\u4e49\u9a8c\u8bc1\u89c4\u5219\u3002","title":"Cerberus \u6b63\u5219\u8868\u8fbe\u5f0f\u89c4\u5219"},{"location":"pages/python/pytutorial/python-cerberus/#Cerberus-\u503c\u5f3a\u5236\u8f6c\u6362","text":"\u503c\u5f3a\u5236\u4f7f\u6211\u4eec\u53ef\u4ee5\u5728\u6570\u636e\u9a8c\u8bc1\u4e4b\u524d\u5c06\u53ef\u8c03\u7528\u5bf9\u8c61\u5e94\u7528\u4e8e\u503c\u3002 \u53ef\u8c03\u7528\u5bf9\u8c61\u7684\u8fd4\u56de\u503c\u66ff\u6362\u6587\u6863\u4e2d\u7684\u65b0\u503c\u3002 \u5728\u9a8c\u8bc1\u4e4b\u524d\uff0c\u53ef\u4ee5\u4f7f\u7528\u5f3a\u5236\u8f6c\u6362\u6570\u636e\u6216\u6e05\u9664\u6570\u636e\u3002 coercing.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #!/usr/bin/env python3 from cerberus import Validator from datetime import datetime def to_date(s): return datetime.strptime(s, '%Y-%m-%d') v = Validator() v.schema = {'start_date': {'type': 'datetime', 'coerce': to_date}} if v.validate({'start_date': '2019-12-11'}): print('valid data') else: print('invalid data') print(v.errors) if v.validate({'start_date': '2019/12/11'}): print('valid data') else: print('invalid data') print(v.errors) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u81ea\u5b9a\u4e49 to_date() \u51fd\u6570\u5c06\u6570\u636e\u65f6\u95f4\u503c\u8f6c\u6362\u4e3a\u9009\u5b9a\u7684\u683c\u5f0f\u3002 1 2 3 4 5 $ ./coercing.py valid data invalid data {'start_date': [\"field 'start_date' cannot be coerced: time data '2019/12/11' does not match format '%Y-%m-%d'\", 'must be of datetime type']}","title":"Cerberus \u503c\u5f3a\u5236\u8f6c\u6362"},{"location":"pages/python/pytutorial/python-cerberus/#\u4f7f\u7528-YAML-\u6587\u4ef6","text":"\u5728\u4e0b\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u6570\u636e\u5b58\u50a8\u5728 YAML \u6587\u4ef6\u4e2d\u3002 cities.yaml 1 2 3 4 5 6 cities: - Bratislava - Kosice - Trnava - Moldava - Trencin \u8be5\u6587\u4ef6\u5305\u542b\u57ce\u5e02\u5217\u8868\u3002 from_yaml.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/usr/bin/env python3 from cerberus import Validator import yaml v = Validator() v.schema = {'cities': {'type': 'list', 'schema': {'type': 'string'}}} with open('cities.yaml') as f: data = yaml.load(f, Loader=yaml.FullLoader) print(data) if v.validate({'cities': data['cities']}): print('valid data') else: print('invalid data') print(v.errors) \u6211\u4eec\u4ece YAML \u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\u5e76\u8fdb\u884c\u9a8c\u8bc1\u3002 schema \u89c4\u5219\u8bbe\u7f6e\u9488\u5bf9\u5217\u8868\u7684\u6240\u6709\u5143\u7d20\u9a8c\u8bc1\u5b9a\u4e49\u7684\u89c4\u5219\u3002 1 2 v = Validator() v.schema = {'cities': {'type': 'list', 'schema': {'type': 'string'}}} cities \u5b57\u6bb5\u5fc5\u987b\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u5e76\u4e14\u5176\u6240\u6709\u5143\u7d20\u90fd\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\u3002","title":"\u4f7f\u7528 YAML \u6587\u4ef6"},{"location":"pages/python/pytutorial/python-cerberus/#Cerberus-\u5b9a\u5236\u9a8c\u8bc1\u5668","text":"\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4ece Validator \u7c7b\u6269\u5c55\u6765\u521b\u5efa\u81ea\u5b9a\u4e49\u9a8c\u8bc1\u5668\u3002 custom_validator.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #!/usr/bin/env python3 from cerberus import Validator from dataclasses import dataclass @dataclass class Person: name: str age: int class PersonValidator(Validator): def validate_person(self, obj): return self.validate(obj.__dict__) schema = {'name': { 'type': 'string', 'minlength': 2}, 'age': {'type': 'integer', 'min': 18, 'max': 65}} v = PersonValidator(schema) p = Person('John Doe', 2) if v.validate_person(p): print('valid data') else: print('invalid data') print(v.errors) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4e3a Person \u5bf9\u8c61\u5b9a\u4e49\u4e86\u4e00\u4e2a\u81ea\u5b9a\u4e49\u9a8c\u8bc1\u5668\u3002","title":"Cerberus \u5b9a\u5236\u9a8c\u8bc1\u5668"},{"location":"pages/python/pytutorial/python-configparser/","text":"Python ConfigParser \u6559\u7a0b \u00b6 Python ConfigParser \u6559\u7a0b \u4ecb\u7ecd\u4e86\u5982\u4f55\u4f7f\u7528 ConfigParser \u5728 Python \u4e2d\u4f7f\u7528\u914d\u7f6e\u6587\u4ef6\u3002 Python ConfigParser \u00b6 ConfigParser \u662f\u4e00\u4e2a Python \u7c7b\uff0c\u4e3a Python \u7a0b\u5e8f\u5b9e\u73b0\u57fa\u672c\u7684\u914d\u7f6e\u8bed\u8a00\u3002 \u5b83\u63d0\u4f9b\u7c7b\u4f3c\u4e8e Microsoft Windows INI \u6587\u4ef6\u7684\u7ed3\u6784\u3002 ConfigParser \u5141\u8bb8\u7f16\u5199\u53ef\u7531\u6700\u7ec8\u7528\u6237\u8f7b\u677e\u5b9a\u5236\u7684 Python \u7a0b\u5e8f\u3002 \u914d\u7f6e\u6587\u4ef6\u7531\u5404\u90e8\u5206\u7ec4\u6210\uff0c\u540e\u8ddf\u9009\u9879\u7684\u952e/\u503c\u5bf9\u3002 \u6bb5\u540d\u7528 [] \u5b57\u7b26\u5206\u9694\u3002 \u8fd9\u4e9b\u5bf9\u7528 : \u6216 = \u9694\u5f00\u3002 \u6ce8\u91ca\u4ee5 # \u6216 ; \u5f00\u5934\u3002 Python ConfigParser \u8bfb\u53d6\u6587\u4ef6 \u00b6 \u5728\u7b2c\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u914d\u7f6e\u6570\u636e\u3002 db.ini 1 2 3 4 5 6 7 8 9 10 11 [mysql] host = localhost user = user7 passwd = s$cret db = ydb [postgresql] host = localhost user = user8 passwd = mypwd$7 db = testdb \u6211\u4eec\u6709\u4e24\u90e8\u5206\u914d\u7f6e\u6570\u636e\u3002 reading_from_file.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 #!/usr/bin/env python3 import configparser config = configparser.ConfigParser() config.read('db.ini') host = config['mysql']['host'] user = config['mysql']['user'] passwd = config['mysql']['passwd'] db = config['mysql']['db'] print('MySQL configuration:') print(f'Host: {host}') print(f'User: {user}') print(f'Password: {passwd}') print(f'Database: {db}') host2 = config['postgresql']['host'] user2 = config['postgresql']['user'] passwd2 = config['postgresql']['passwd'] db2 = config['postgresql']['db'] print('PostgreSQL configuration:') print(f'Host: {host2}') print(f'User: {user2}') print(f'Password: {passwd2}') print(f'Database: {db2}') \u8be5\u793a\u4f8b\u8bfb\u53d6 MySQL \u548c PostgreSQL \u7684\u914d\u7f6e\u6570\u636e\u3002 1 2 config = configparser.ConfigParser() config.read('db.ini') \u6211\u4eec\u542f\u52a8 ConfigParser \u5e76\u4f7f\u7528 read() \u8bfb\u53d6\u6587\u4ef6\u3002 1 2 3 4 host = config['mysql']['host'] user = config['mysql']['user'] passwd = config['mysql']['passwd'] db = config['mysql']['db'] \u6211\u4eec\u4ece mysql \u90e8\u5206\u8bbf\u95ee\u9009\u9879\u3002 1 2 3 4 host2 = config['postgresql']['host'] user2 = config['postgresql']['user'] passwd2 = config['postgresql']['passwd'] db2 = config['postgresql']['db'] \u6211\u4eec\u4ece postgresql \u90e8\u5206\u8bbf\u95ee\u9009\u9879\u3002 1 2 3 4 5 6 7 8 9 10 11 $ python reading_from_file.py MySQL configuration: Host: localhost User: user7 Password: s$cret Database: ydb PostgreSQL configuration: Host: localhost User: user8 Password: mypwd$7 Database: testdb Python ConfigParser \u90e8\u5206 \u00b6 \u914d\u7f6e\u6570\u636e\u5206\u4e3a\u51e0\u90e8\u5206\u3002 sections() \u8bfb\u53d6\u6240\u6709\u90e8\u5206\uff0c has_section() \u68c0\u67e5\u662f\u5426\u5b58\u5728\u6307\u5b9a\u7684\u90e8\u5206\u3002 sections.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/usr/bin/env python3 import configparser config = configparser.ConfigParser() config.read('db.ini') sections = config.sections() print(f'Sections: {sections}') sections.append('sqlite') for section in sections: if config.has_section(section): print(f'Config file has section {section}') else: print(f'Config file does not have section {section}') \u8be5\u793a\u4f8b\u9002\u7528\u4e8e\u5404\u8282\u3002 1 2 3 4 5 $ python sections.py Sections: ['mysql', 'postgresql'] Config file has section mysql Config file has section postgresql Config file does not have section sqlite Python ConfigParser \u4ece\u5b57\u7b26\u4e32\u8bfb\u53d6 \u00b6 \u4ece Python 3.2 \u5f00\u59cb\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 read_string() \u65b9\u6cd5\u4ece\u5b57\u7b26\u4e32\u8bfb\u53d6\u914d\u7f6e\u6570\u636e\u3002 read_from_string.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #!/usr/bin/env python3 import configparser cfg_data = ''' [mysql] host = localhost user = user7 passwd = s$cret db = ydb ''' config = configparser.ConfigParser() config.read_string(cfg_data) host = config['mysql']['host'] user = config['mysql']['user'] passwd = config['mysql']['passwd'] db = config['mysql']['db'] print(f'Host: {host}') print(f'User: {user}') print(f'Password: {passwd}') print(f'Database: {db}') \u8be5\u793a\u4f8b\u4ece\u5b57\u7b26\u4e32\u8bfb\u53d6\u914d\u7f6e\u3002 Python ConfigParser \u4ece\u5b57\u5178\u4e2d\u8bfb\u53d6 \u00b6 \u4ece Python 3.2 \u5f00\u59cb\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 read_dict() \u65b9\u6cd5\u4ece\u5b57\u5178\u4e2d\u8bfb\u53d6\u914d\u7f6e\u6570\u636e\u3002 read_from_dict.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #!/usr/bin/env python3 import configparser cfg_data = { 'mysql': {'host': 'localhost', 'user': 'user7', 'passwd': 's$cret', 'db': 'ydb'} } config = configparser.ConfigParser() config.read_dict(cfg_data) host = config['mysql']['host'] user = config['mysql']['user'] passwd = config['mysql']['passwd'] db = config['mysql']['db'] print(f'Host: {host}') print(f'User: {user}') print(f'Password: {passwd}') print(f'Database: {db}') \u8be5\u793a\u4f8b\u4ece Python \u5b57\u5178\u8bfb\u53d6\u914d\u7f6e\u3002 1 2 3 4 cfg_data = { 'mysql': {'host': 'localhost', 'user': 'user7', 'passwd': 's$cret', 'db': 'ydb'} } \u952e\u662f\u90e8\u5206\u540d\u79f0\uff0c\u503c\u662f\u5e26\u6709\u8be5\u90e8\u5206\u4e2d\u5b58\u5728\u7684\u952e\u548c\u503c\u7684\u5b57\u5178\u3002 Python ConfigParser \u5199\u5165 \u00b6 write() \u65b9\u6cd5\u5199\u5165\u914d\u7f6e\u6570\u636e\u3002 writing.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python3 import configparser config = configparser.ConfigParser() config.add_section('mysql') config['mysql']['host'] = 'localhost' config['mysql']['user'] = 'user7' config['mysql']['passwd'] = 's$cret' config['mysql']['db'] = 'ydb' with open('db3.ini', 'w') as configfile: config.write(configfile) \u8be5\u793a\u4f8b\u5c06\u914d\u7f6e\u6570\u636e\u5199\u5165 db3.ini \u6587\u4ef6\u3002 1 config.add_section('mysql') \u9996\u5148\uff0c\u6211\u4eec\u7528 add_section() \u6dfb\u52a0\u4e00\u4e2a\u90e8\u5206\u3002 1 2 3 4 config['mysql']['host'] = 'localhost' config['mysql']['user'] = 'user7' config['mysql']['passwd'] = 's$cret' config['mysql']['db'] = 'ydb' \u7136\u540e\u6211\u4eec\u8bbe\u7f6e\u9009\u9879\u3002 1 2 with open('db3.ini', 'w') as configfile: config.write(configfile) \u6700\u540e\uff0c\u6211\u4eec\u7528 write() \u5199\u5165\u6570\u636e\u3002 Python ConfigParser \u63d2\u503c \u00b6 ConfigParser \u5141\u8bb8\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u4f7f\u7528\u63d2\u503c\u3002 \u5b83\u4f7f\u7528 %() \u8bed\u6cd5\u3002 cfg.ini 1 2 3 4 [info] users_dir= C:\\Users name= Jano home_dir= %(users_dir)s\\%(name)s \u6211\u4eec\u7528\u63d2\u503c\u6cd5\u6784\u5efa home_dir \u3002 \u8bf7\u6ce8\u610f\uff0c\u201c s\u201d\u5b57\u7b26\u662f\u8bed\u6cd5\u7684\u4e00\u90e8\u5206\u3002 interpolation.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/env python3 import configparser config = configparser.ConfigParser() config.read('cfg.ini') users_dir = config['info']['users_dir'] name = config['info']['name'] home_dir = config['info']['home_dir'] print(f'Users directory: {users_dir}') print(f'Name: {name}') print(f'Home directory: {home_dir}') \u8be5\u793a\u4f8b\u8bfb\u53d6\u503c\u5e76\u6253\u5370\u51fa\u6765\u3002 1 2 3 4 $ python interpolation.py Users directory: C:\\Users Name: Jano Home directory: C:\\Users\\Jano","title":"Python ConfigParser \u6559\u7a0b"},{"location":"pages/python/pytutorial/python-configparser/#Python-ConfigParser-\u6559\u7a0b","text":"Python ConfigParser \u6559\u7a0b \u4ecb\u7ecd\u4e86\u5982\u4f55\u4f7f\u7528 ConfigParser \u5728 Python \u4e2d\u4f7f\u7528\u914d\u7f6e\u6587\u4ef6\u3002","title":"Python ConfigParser \u6559\u7a0b"},{"location":"pages/python/pytutorial/python-configparser/#Python-ConfigParser","text":"ConfigParser \u662f\u4e00\u4e2a Python \u7c7b\uff0c\u4e3a Python \u7a0b\u5e8f\u5b9e\u73b0\u57fa\u672c\u7684\u914d\u7f6e\u8bed\u8a00\u3002 \u5b83\u63d0\u4f9b\u7c7b\u4f3c\u4e8e Microsoft Windows INI \u6587\u4ef6\u7684\u7ed3\u6784\u3002 ConfigParser \u5141\u8bb8\u7f16\u5199\u53ef\u7531\u6700\u7ec8\u7528\u6237\u8f7b\u677e\u5b9a\u5236\u7684 Python \u7a0b\u5e8f\u3002 \u914d\u7f6e\u6587\u4ef6\u7531\u5404\u90e8\u5206\u7ec4\u6210\uff0c\u540e\u8ddf\u9009\u9879\u7684\u952e/\u503c\u5bf9\u3002 \u6bb5\u540d\u7528 [] \u5b57\u7b26\u5206\u9694\u3002 \u8fd9\u4e9b\u5bf9\u7528 : \u6216 = \u9694\u5f00\u3002 \u6ce8\u91ca\u4ee5 # \u6216 ; \u5f00\u5934\u3002","title":"Python ConfigParser"},{"location":"pages/python/pytutorial/python-configparser/#Python-ConfigParser\u8bfb\u53d6\u6587\u4ef6","text":"\u5728\u7b2c\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u914d\u7f6e\u6570\u636e\u3002 db.ini 1 2 3 4 5 6 7 8 9 10 11 [mysql] host = localhost user = user7 passwd = s$cret db = ydb [postgresql] host = localhost user = user8 passwd = mypwd$7 db = testdb \u6211\u4eec\u6709\u4e24\u90e8\u5206\u914d\u7f6e\u6570\u636e\u3002 reading_from_file.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 #!/usr/bin/env python3 import configparser config = configparser.ConfigParser() config.read('db.ini') host = config['mysql']['host'] user = config['mysql']['user'] passwd = config['mysql']['passwd'] db = config['mysql']['db'] print('MySQL configuration:') print(f'Host: {host}') print(f'User: {user}') print(f'Password: {passwd}') print(f'Database: {db}') host2 = config['postgresql']['host'] user2 = config['postgresql']['user'] passwd2 = config['postgresql']['passwd'] db2 = config['postgresql']['db'] print('PostgreSQL configuration:') print(f'Host: {host2}') print(f'User: {user2}') print(f'Password: {passwd2}') print(f'Database: {db2}') \u8be5\u793a\u4f8b\u8bfb\u53d6 MySQL \u548c PostgreSQL \u7684\u914d\u7f6e\u6570\u636e\u3002 1 2 config = configparser.ConfigParser() config.read('db.ini') \u6211\u4eec\u542f\u52a8 ConfigParser \u5e76\u4f7f\u7528 read() \u8bfb\u53d6\u6587\u4ef6\u3002 1 2 3 4 host = config['mysql']['host'] user = config['mysql']['user'] passwd = config['mysql']['passwd'] db = config['mysql']['db'] \u6211\u4eec\u4ece mysql \u90e8\u5206\u8bbf\u95ee\u9009\u9879\u3002 1 2 3 4 host2 = config['postgresql']['host'] user2 = config['postgresql']['user'] passwd2 = config['postgresql']['passwd'] db2 = config['postgresql']['db'] \u6211\u4eec\u4ece postgresql \u90e8\u5206\u8bbf\u95ee\u9009\u9879\u3002 1 2 3 4 5 6 7 8 9 10 11 $ python reading_from_file.py MySQL configuration: Host: localhost User: user7 Password: s$cret Database: ydb PostgreSQL configuration: Host: localhost User: user8 Password: mypwd$7 Database: testdb","title":"Python ConfigParser\u8bfb\u53d6\u6587\u4ef6"},{"location":"pages/python/pytutorial/python-configparser/#Python-ConfigParser\u90e8\u5206","text":"\u914d\u7f6e\u6570\u636e\u5206\u4e3a\u51e0\u90e8\u5206\u3002 sections() \u8bfb\u53d6\u6240\u6709\u90e8\u5206\uff0c has_section() \u68c0\u67e5\u662f\u5426\u5b58\u5728\u6307\u5b9a\u7684\u90e8\u5206\u3002 sections.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/usr/bin/env python3 import configparser config = configparser.ConfigParser() config.read('db.ini') sections = config.sections() print(f'Sections: {sections}') sections.append('sqlite') for section in sections: if config.has_section(section): print(f'Config file has section {section}') else: print(f'Config file does not have section {section}') \u8be5\u793a\u4f8b\u9002\u7528\u4e8e\u5404\u8282\u3002 1 2 3 4 5 $ python sections.py Sections: ['mysql', 'postgresql'] Config file has section mysql Config file has section postgresql Config file does not have section sqlite","title":"Python ConfigParser\u90e8\u5206"},{"location":"pages/python/pytutorial/python-configparser/#Python-ConfigParser\u4ece\u5b57\u7b26\u4e32\u8bfb\u53d6","text":"\u4ece Python 3.2 \u5f00\u59cb\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 read_string() \u65b9\u6cd5\u4ece\u5b57\u7b26\u4e32\u8bfb\u53d6\u914d\u7f6e\u6570\u636e\u3002 read_from_string.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #!/usr/bin/env python3 import configparser cfg_data = ''' [mysql] host = localhost user = user7 passwd = s$cret db = ydb ''' config = configparser.ConfigParser() config.read_string(cfg_data) host = config['mysql']['host'] user = config['mysql']['user'] passwd = config['mysql']['passwd'] db = config['mysql']['db'] print(f'Host: {host}') print(f'User: {user}') print(f'Password: {passwd}') print(f'Database: {db}') \u8be5\u793a\u4f8b\u4ece\u5b57\u7b26\u4e32\u8bfb\u53d6\u914d\u7f6e\u3002","title":"Python ConfigParser\u4ece\u5b57\u7b26\u4e32\u8bfb\u53d6"},{"location":"pages/python/pytutorial/python-configparser/#Python-ConfigParser\u4ece\u5b57\u5178\u4e2d\u8bfb\u53d6","text":"\u4ece Python 3.2 \u5f00\u59cb\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 read_dict() \u65b9\u6cd5\u4ece\u5b57\u5178\u4e2d\u8bfb\u53d6\u914d\u7f6e\u6570\u636e\u3002 read_from_dict.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #!/usr/bin/env python3 import configparser cfg_data = { 'mysql': {'host': 'localhost', 'user': 'user7', 'passwd': 's$cret', 'db': 'ydb'} } config = configparser.ConfigParser() config.read_dict(cfg_data) host = config['mysql']['host'] user = config['mysql']['user'] passwd = config['mysql']['passwd'] db = config['mysql']['db'] print(f'Host: {host}') print(f'User: {user}') print(f'Password: {passwd}') print(f'Database: {db}') \u8be5\u793a\u4f8b\u4ece Python \u5b57\u5178\u8bfb\u53d6\u914d\u7f6e\u3002 1 2 3 4 cfg_data = { 'mysql': {'host': 'localhost', 'user': 'user7', 'passwd': 's$cret', 'db': 'ydb'} } \u952e\u662f\u90e8\u5206\u540d\u79f0\uff0c\u503c\u662f\u5e26\u6709\u8be5\u90e8\u5206\u4e2d\u5b58\u5728\u7684\u952e\u548c\u503c\u7684\u5b57\u5178\u3002","title":"Python ConfigParser\u4ece\u5b57\u5178\u4e2d\u8bfb\u53d6"},{"location":"pages/python/pytutorial/python-configparser/#Python-ConfigParser\u5199\u5165","text":"write() \u65b9\u6cd5\u5199\u5165\u914d\u7f6e\u6570\u636e\u3002 writing.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python3 import configparser config = configparser.ConfigParser() config.add_section('mysql') config['mysql']['host'] = 'localhost' config['mysql']['user'] = 'user7' config['mysql']['passwd'] = 's$cret' config['mysql']['db'] = 'ydb' with open('db3.ini', 'w') as configfile: config.write(configfile) \u8be5\u793a\u4f8b\u5c06\u914d\u7f6e\u6570\u636e\u5199\u5165 db3.ini \u6587\u4ef6\u3002 1 config.add_section('mysql') \u9996\u5148\uff0c\u6211\u4eec\u7528 add_section() \u6dfb\u52a0\u4e00\u4e2a\u90e8\u5206\u3002 1 2 3 4 config['mysql']['host'] = 'localhost' config['mysql']['user'] = 'user7' config['mysql']['passwd'] = 's$cret' config['mysql']['db'] = 'ydb' \u7136\u540e\u6211\u4eec\u8bbe\u7f6e\u9009\u9879\u3002 1 2 with open('db3.ini', 'w') as configfile: config.write(configfile) \u6700\u540e\uff0c\u6211\u4eec\u7528 write() \u5199\u5165\u6570\u636e\u3002","title":"Python ConfigParser\u5199\u5165"},{"location":"pages/python/pytutorial/python-configparser/#Python-ConfigParser\u63d2\u503c","text":"ConfigParser \u5141\u8bb8\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u4f7f\u7528\u63d2\u503c\u3002 \u5b83\u4f7f\u7528 %() \u8bed\u6cd5\u3002 cfg.ini 1 2 3 4 [info] users_dir= C:\\Users name= Jano home_dir= %(users_dir)s\\%(name)s \u6211\u4eec\u7528\u63d2\u503c\u6cd5\u6784\u5efa home_dir \u3002 \u8bf7\u6ce8\u610f\uff0c\u201c s\u201d\u5b57\u7b26\u662f\u8bed\u6cd5\u7684\u4e00\u90e8\u5206\u3002 interpolation.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/env python3 import configparser config = configparser.ConfigParser() config.read('cfg.ini') users_dir = config['info']['users_dir'] name = config['info']['name'] home_dir = config['info']['home_dir'] print(f'Users directory: {users_dir}') print(f'Name: {name}') print(f'Home directory: {home_dir}') \u8be5\u793a\u4f8b\u8bfb\u53d6\u503c\u5e76\u6253\u5370\u51fa\u6765\u3002 1 2 3 4 $ python interpolation.py Users directory: C:\\Users Name: Jano Home directory: C:\\Users\\Jano","title":"Python ConfigParser\u63d2\u503c"},{"location":"pages/python/pytutorial/python-datatypes/","text":"Python \u6570\u636e\u7c7b\u578b \u00b6 Python \u6570\u636e\u7c7b\u578b \uff0c\u7535\u5b50\u8868\u683c\uff0c\u6587\u672c\u7f16\u8f91\u5668\uff0c\u8ba1\u7b97\u5668\u6216\u804a\u5929\u5ba2\u6237\u7aef\u7b49\u8ba1\u7b97\u673a\u7a0b\u5e8f\u53ef\u5904\u7406\u6570\u636e\u3002 \u7528\u4e8e\u5404\u79cd\u6570\u636e\u7c7b\u578b\u7684\u5de5\u5177\u662f\u73b0\u4ee3\u8ba1\u7b97\u673a\u8bed\u8a00\u7684\u57fa\u672c\u7ec4\u6210\u90e8\u5206\u3002 Python \u6570\u636e\u7c7b\u578b\u5b9a\u4e49 \u00b6 \u6570\u636e\u7c7b\u578b\u662f\u4e00\u7ec4\u503c\u4ee5\u53ca\u5bf9\u8fd9\u4e9b\u503c\u7684\u5141\u8bb8\u64cd\u4f5c\u3002 Python \u6709\u5f88\u591a\u6709\u7528\u7684\u6570\u636e\u7c7b\u578b\u3002 Python \u7684\u6570\u636e\u7c7b\u578b\u6784\u5efa\u5728\u8bed\u8a00\u7684\u6838\u5fc3\u4e2d\u3002 \u5b83\u4eec\u6613\u4e8e\u4f7f\u7528\u548c\u76f4\u63a5\u3002 Python \u5e03\u5c14\u503c \u00b6 \u6211\u4eec\u7684\u4e16\u754c\u5efa\u7acb\u4e86\u53cc\u91cd\u6027\u3002 \u6709\u5929\u4e0e\u5730\uff0c\u6c34\u4e0e\u706b\uff0c\u4e95\u4e0e\u7ae0\uff0c\u7537\u4eba\u4e0e\u5973\u4eba\uff0c\u7231\u4e0e\u6068\u3002 \u5728 Python \u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u5e03\u5c14\u6570\u636e\u7c7b\u578b\u662f\u5177\u6709\u4ee5\u4e0b\u4e24\u4e2a\u503c\u4e4b\u4e00\u7684\u539f\u59cb\u6570\u636e\u7c7b\u578b\uff1a True \u6216 False \u3002 \u8fd9\u662f\u57fa\u672c\u7684\u6570\u636e\u7c7b\u578b\u3002 \u6709\u8da3\u7684\u662f\uff0c\u8fd9\u79cd\u6570\u636e\u7c7b\u578b\u4ece\u4e00\u5f00\u59cb\u5c31\u4e0d\u5b58\u5728\uff0c\u4f46\u662f\u540e\u6765\u624d\u521b\u5efa\u3002 \u5feb\u4e50\u7684\u7236\u6bcd\u6b63\u5728\u7b49\u5f85\u5b69\u5b50\u7684\u51fa\u751f\u3002 \u4ed6\u4eec\u4e3a\u4e24\u79cd\u53ef\u80fd\u6027\u90fd\u9009\u62e9\u4e86\u540d\u79f0\u3002 \u5982\u679c\u8981\u6210\u4e3a\u7537\u5b69\uff0c\u4ed6\u4eec\u53ef\u80fd\u9009\u62e9\u4e86\u7ea6\u7ff0\u3002 \u5982\u679c\u8981\u6210\u4e3a\u5973\u5b69\uff0c\u4ed6\u4eec\u53ef\u80fd\u9009\u62e9\u4e86\u7ef4\u591a\u5229\u4e9a\u3002 kid.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python # kid.py import random male = False male = bool(random.randint(0, 1)) if male: print(\"We will use name John\") else: print(\"We will use name Victoria\") \u8be5\u811a\u672c\u4f7f\u7528\u968f\u673a\u6574\u6570\u751f\u6210\u5668\u6765\u6a21\u62df\u6211\u4eec\u7684\u60c5\u51b5\u3002 1 import random \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5bfc\u5165\u7528\u4e8e\u8ba1\u7b97\u968f\u673a\u6570\u7684\u968f\u673a\u6a21\u5757\u3002 1 male = bool(random.randint(0, 1)) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4f7f\u7528\u4e24\u4e2a\u51fd\u6570\u3002 randint() \u51fd\u6570\u4ece\u7ed9\u5b9a\u7684\u6574\u6570\u8fb9\u754c\u8fd4\u56de\u4e00\u4e2a\u968f\u673a\u6570\u3002 \u5728\u6211\u4eec\u7684\u60c5\u51b5\u4e0b\u4e3a 0 \u6216 1\u3002 bool() \u51fd\u6570\u5c06\u6574\u6570\u8f6c\u6362\u4e3a\u5e03\u5c14\u503c\u3002 1 2 3 4 if male: print(\"We will use name John\") else: print(\"We will use name Victoria\") \u6211\u4eec\u6253\u5370\u540d\u79f0\u3002 if \u5173\u952e\u5b57\u9002\u7528\u4e8e\u5e03\u5c14\u503c\u3002 \u5982\u679c male \u4e3a True \uff0c\u5219\u5728\u63a7\u5236\u53f0\u4e0a\u6253\u5370\u201c\u6211\u4eec\u5c06\u4f7f\u7528\u540d\u79f0 John\u201d\u3002 \u5982\u679c\u5b83\u5177\u6709 False \u503c\uff0c\u6211\u4eec\u5c06\u6253\u5370\u53e6\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 \u4ee5\u4e0b\u811a\u672c\u663e\u793a\u4e86\u4e00\u4e9b\u5e38\u89c1\u7684\u503c\uff0c\u5b83\u4eec\u88ab\u8ba4\u4e3a\u662f True \u6216 False \u3002 bool_fun.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python # bool_fun.py print(bool(True)) print(bool(False)) print(bool(\"text\")) print(bool(\"\")) print(bool(' ')) print(bool(0)) print(bool()) print(bool(3)) print(bool(None)) \u8be5\u793a\u4f8b\u6253\u5370\u4e5d\u4e2a\u5e03\u5c14\u503c\u3002 1 2 3 4 5 6 7 8 9 10 $ ./bool_fun.py True False True False True False False True False \u8fd9\u662f bool_fun.py \u811a\u672c\u7684\u8f93\u51fa\u3002 Python None \u00b6 \u8fd8\u6709\u53e6\u4e00\u79cd\u7279\u6b8a\u7684\u6570\u636e\u7c7b\u578b- None \u3002 \u6b64\u6570\u636e\u7c7b\u578b\u8868\u793a\u4e0d\u5b58\u5728\uff0c\u672a\u77e5\u6216\u4e3a\u7a7a\u3002 none.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python # none.py def function(): pass print(function()) \u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u3002 \u529f\u80fd\u5c06\u5728\u672c\u6559\u7a0b\u7684\u540e\u9762\u90e8\u5206\u4ecb\u7ecd\u3002 \u8be5\u529f\u80fd\u4e0d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u3002 \u5b83\u4e0d\u4f1a\u663e\u5f0f\u8fd4\u56de\u4efb\u4f55\u503c\u3002 \u8fd9\u6837\u7684\u51fd\u6570\u5c06\u9690\u5f0f\u8fd4\u56de None \u3002 1 2 $ ./none.py None \u8fd9\u662f none.py \u811a\u672c\u7684\u8f93\u51fa\u3002 Python \u6570\u5b57 \u00b6 \u5728 Python \u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u6211\u4eec\u6709\u6574\u6570\uff0c\u6d6e\u70b9\u6570\u548c\u590d\u6570\u3002 \u5982\u679c\u6211\u4eec\u4f7f\u7528\u6574\u6570\uff0c\u90a3\u4e48\u6211\u4eec\u5c06\u5904\u7406\u79bb\u6563\u5b9e\u4f53\u3002 \u6211\u4eec\u5c06\u4f7f\u7528\u6574\u6570\u6765\u8ba1\u7b97\u82f9\u679c\u3002 apples.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/env python # apples.py # number of baskets baskets = 16 # number of apples in a basket apples_in_basket = 24 # we get the total number of apples total = baskets * apples_in_basket print(\"There are total of\", total, \"apples\") \u5728\u811a\u672c\u4e2d\uff0c\u6211\u4eec\u8ba1\u7b97\u4e86\u82f9\u679c\u7684\u603b\u91cf\u3002 \u6211\u4eec\u4f7f\u7528\u4e58\u6cd5\u8fd0\u7b97\u3002 1 2 $ ./apples.py There are total of 384 apples \u8fd9\u662f\u811a\u672c\u7684\u8f93\u51fa\u3002 \u6d6e\u70b9\u6570\u8868\u793a\u8ba1\u7b97\u4e2d\u7684\u5b9e\u6570\u3002 \u5b9e\u6570\u6d4b\u91cf\u8fde\u7eed\u91cf\u3002 \u5047\u8bbe\u4e00\u4e2a\u77ed\u8dd1\u8fd0\u52a8\u5458\u8dd1\u4e86 1 \u4e2a\u5c0f\u65f6\uff0c\u8dd1\u4e86 9.87 \u79d2\u3002 \u4ed6\u7684\u516c\u91cc/\u5c0f\u65f6\u901f\u5ea6\u662f\u591a\u5c11\uff1f sprinter.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python # sprinter.py # 100 m is 0.1 km distance = 0.1 # 9.87 s is 9.87/60*60 h time = 9.87 / 3600 speed = distance / time print(\"The average speed of a sprinter is {0} km/h\".format(speed)) \u4e3a\u4e86\u83b7\u5f97\u901f\u5ea6\uff0c\u6211\u4eec\u5c06\u8ddd\u79bb\u9664\u4ee5\u65f6\u95f4\u3002 1 print(\"The average speed of a sprinter is {0} km/h\".format(speed)) \u6211\u4eec\u4f7f\u7528 format() \u529f\u80fd\u6784\u5efa\u6d88\u606f\u5e76\u5c06\u5176\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 2 $ ./sprinter.py The average speed of a sprinter is 36.4741641337 km/h \u8fd9\u662f sprinter.py \u811a\u672c\u7684\u8f93\u51fa\u3002 \u503c 36.4741641337 \u662f\u6d6e\u70b9\u6570\u3002 Python \u5b57\u7b26\u4e32 \u00b6 \u5b57\u7b26\u4e32\u662f\u4ee3\u8868\u8ba1\u7b97\u673a\u7a0b\u5e8f\u4e2d\u6587\u672c\u6570\u636e\u7684\u6570\u636e\u7c7b\u578b\u3002 \u53ef\u4ee5\u4f7f\u7528\u5355\u5f15\u53f7\uff0c\u53cc\u5f15\u53f7\u548c\u4e09\u5f15\u53f7\u5728 Python \u4e2d\u521b\u5efa\u5b57\u7b26\u4e32\u3002 \u5f53\u6211\u4eec\u4f7f\u7528\u4e09\u5f15\u53f7\u65f6\uff0c\u5b57\u7b26\u4e32\u53ef\u4ee5\u8de8\u8d8a\u591a\u884c\u800c\u65e0\u9700\u4f7f\u7528\u8f6c\u4e49\u7b26\u3002 strings.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/env python # strings.py a = \"proximity alert\" b = 'evacuation' c = \"\"\" requiem for a tower \"\"\" print(a) print(b) print(c) \u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4e3a a \uff0c b \u548c c \u53d8\u91cf\u5206\u914d\u4e86\u4e09\u4e2a\u5b57\u7b26\u4e32\u6587\u5b57\u3002 \u7136\u540e\u6211\u4eec\u5c06\u5b83\u4eec\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 2 3 4 5 6 7 8 $ ./strings.py proximity alert evacuation requiem for a tower \u8fd9\u662f strings.py \u811a\u672c\u7684\u8f93\u51fa\u3002 \u5728\u5904\u7406\u5b57\u7b26\u4e32\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u8f6c\u4e49\u5e8f\u5217\u3002 \u8f6c\u4e49\u5e8f\u5217\u662f\u5728\u5b57\u7b26\u4e32\u4e2d\u4f7f\u7528\u65f6\u5177\u6709\u7279\u5b9a\u7528\u9014\u7684\u7279\u6b8a\u5b57\u7b26\u3002 1 print(\" bbb\\raaa\") # prints aaabbb \u56de\u8f66 \\r \u662f\u884c\u5c3e\u5230\u884c\u9996\u7684\u63a7\u5236\u5b57\u7b26\u3002 strophe.py 1 2 3 4 5 6 #!/usr/bin/env python # strophe.py print(\"Incompatible, it don't matter though\\n'cos someone's bound to hear my cry\") print(\"Speak out if you do\\nYou're not easy to find\") \u65b0\u884c\u662f\u4e00\u4e2a\u63a7\u5236\u5b57\u7b26\uff0c\u5b83\u5f00\u59cb\u65b0\u7684\u4e00\u884c\u6587\u672c\u3002 1 2 3 4 5 $ ./strophe.py Incompatible, it don't matter though 'cos someone's bound to hear my cry Speak out if you do You're not easy to find \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u68c0\u67e5\u9000\u683c\u63a7\u5236\u5b57\u7b26\u3002 1 print(\"Python\\b\\b\\booo\") # prints Pytooo \u9000\u683c\u63a7\u5236\u5b57\u7b26 \\b \u5c06\u5149\u6807\u5411\u540e\u79fb\u52a8\u4e00\u4e2a\u5b57\u7b26\u3002 \u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e09\u4e2a\u9000\u683c\u5b57\u7b26\u5220\u9664\u4e09\u4e2a\u5b57\u6bcd\uff0c\u5e76\u7528\u4e09\u4e2a o \u5b57\u7b26\u66ff\u6362\u5b83\u4eec\u3002 1 print(\"Towering\\tinferno\") # prints Towering inferno \u6c34\u5e73\u9009\u9879\u5361\u5728\u6587\u672c\u4e4b\u95f4\u653e\u7f6e\u4e00\u4e2a\u7a7a\u683c\u3002 1 2 \"Johnie's dog\" 'Johnie\\'s dog' \u5355\u5f15\u53f7\u548c\u53cc\u5f15\u53f7\u53ef\u4ee5\u5d4c\u5957\u3002 \u6216\u8005\uff0c\u5982\u679c\u4ec5\u4f7f\u7528\u5355\u5f15\u53f7\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u53cd\u659c\u6760\u6765\u8f6c\u4e49\u5355\u5f15\u53f7\u7684\u9ed8\u8ba4\u542b\u4e49\u3002 1 print(\"eagle has\", len(\"eagle\"), \"characters\") \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 len() \u51fd\u6570\u6765\u8ba1\u7b97\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff08\u4ee5\u5b57\u7b26\u4e3a\u5355\u4f4d\uff09\u3002 \u5982\u679c\u5728\u5b57\u7b26\u4e32\u540e\u9644\u52a0 r \uff0c\u5219\u4f1a\u5f97\u5230\u539f\u59cb\u5b57\u7b26\u4e32\u3002 \u8f6c\u4e49\u5e8f\u5217\u4e0d\u88ab\u89e3\u91ca\u3002 raw.py 1 2 3 4 5 #!/usr/bin/env python # raw.py print(r\"Another world\\n\") 1 2 $ ./raw.py Another world\\n \u6211\u4eec\u5f97\u5230\u7684\u5b57\u7b26\u4e32\u5305\u62ec\u6362\u884c\u7b26\u3002 \u5728\u4e0b\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u663e\u793a\u4e86\u5b57\u7b26\u4e32\u4e58\u6cd5\u548c\u4e32\u8054\u3002 strings2.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/python # strings2.py print(\"eagle \" * 5) print(\"eagle \" \"falcon\") print(\"eagle \" + \"and \" + \"falcon\") * \u8fd0\u7b97\u7b26\u5c06\u5b57\u7b26\u4e32\u91cd\u590d n \u6b21\u3002 \u5728\u6211\u4eec\u7684\u60c5\u51b5\u4e0b\u662f\u4e94\u6b21\u3002 \u5f7c\u6b64\u76f8\u90bb\u7684\u4e24\u4e2a\u5b57\u7b26\u4e32\u6587\u5b57\u4f1a\u81ea\u52a8\u8fde\u63a5\u5728\u4e00\u8d77\u3002 \u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528 + \u8fd0\u7b97\u7b26\u663e\u5f0f\u8fde\u63a5\u5b57\u7b26\u4e32\u3002 1 2 3 4 $ ./strings2.py eagle eagle eagle eagle eagle eagle falcon eagle and falcon \u8fd9\u662f strings.py \u811a\u672c\u7684\u8f93\u51fa\u3002 Python \u5177\u6709\u51e0\u79cd\u7528\u4e8e\u5904\u7406\u503c\u96c6\u5408\u7684\u5185\u7f6e\u6570\u636e\u7c7b\u578b\uff1a\u5143\u7ec4\uff0c\u5217\u8868\uff0c\u96c6\u5408\u548c\u5b57\u5178\u3002 Python \u5143\u7ec4 \u00b6 \u5143\u7ec4\u662f\u4e0d\u53ef\u53d8\u5e8f\u5217\u6570\u636e\u7c7b\u578b\u3002 \u5143\u7ec4\u53ef\u4ee5\u5305\u542b\u6df7\u5408\u6570\u636e\u7c7b\u578b\u3002 1 fruits = (\"oranges\", \"apples\", \"bananas\") \u4f7f\u7528\u5706\u62ec\u53f7\u521b\u5efa\u5143\u7ec4\u3002 \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u7531\u4e09\u79cd\u6c34\u679c\u7c7b\u578b\u7ec4\u6210\u7684\u5143\u7ec4\u3002 1 2 fruits = \"apples\", \"oranges\", \"bananas\" print(fruits) # prints ('apples', 'oranges', 'bananas') \u62ec\u53f7\u4e0d\u662f\u5fc5\u987b\u7684\u3002 \u6211\u4eec\u53ef\u4ee5\u7701\u7565\u5b83\u4eec\u3002 tuples.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/env python # tuples.py first = (1, 2, 3) second = (4, 5, 6) print(\"len(first) : \", len(first)) print(\"max(first) : \", max(first)) print(\"min(first) : \", min(first)) print(\"first + second :\", first + second) print(\"first * 3 : \", first * 3) print(\"1 in first : \", 1 in first) print(\"5 not in second : \", 5 not in second) \u6b64\u793a\u4f8b\u663e\u793a\u4e86\u5143\u7ec4\u7684\u51e0\u4e2a\u57fa\u672c\u64cd\u4f5c\u3002 len() \u51fd\u6570\u8fd4\u56de\u7b2c\u4e00\u4e2a\u5143\u7ec4\u4e2d\u7684\u5143\u7d20\u6570\u3002 max() \u529f\u80fd\u8fd4\u56de\u6700\u5927\u503c\uff0c min() \u6700\u5c0f\u503c\u3002 \u52a0\u6cd5\u8fd0\u7b97\u7b26\u5c06\u4e24\u4e2a\u5143\u7ec4\u76f8\u52a0\uff0c\u4e58\u6cd5\u8fd0\u7b97\u7b26\u5c06\u5143\u7ec4\u76f8\u4e58\u3002 in \u8fd0\u7b97\u7b26\u786e\u5b9a\u8be5\u503c\u662f\u5426\u5728\u5143\u7ec4\u4e2d\u3002 1 2 3 4 5 6 7 8 $ ./tuples.py len(first) : 3 max(first) : 3 min(first) : 1 first + second : (1, 2, 3, 4, 5, 6) first * 3 : (1, 2, 3, 1, 2, 3, 1, 2, 3) 1 in first : True 5 not in second : False \u8fd9\u662f\u811a\u672c\u7684\u8f93\u51fa\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u8fdb\u884c\u4e00\u4e9b\u7d22\u5f15\u7f16\u5236\u3002 tuples2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python # tuples2.py five = (1, 2, 3, 4, 5) print(\"five[0] : \", five[0]) print(\"five[-1] : \", five[-1]) print(\"five[-2] : \", five[-2]) print(\"five[:] : \", five[:]) print(\"five[0:4] : \", five[0:4]) print(\"five[1:2] : \", five[1:2]) print(\"five[:2] : \", five[:2]) print(\"five[:-1] : \", five[:-1]) print(\"five[:9] : \", five[:9]) \u4e3a\u4e86\u4ece\u5143\u7ec4\u4e2d\u83b7\u53d6\u503c\uff0c\u6211\u4eec\u4f7f\u7528\u65b9\u62ec\u53f7 [] \u3002 \u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u4ece 0 \u5f00\u59cb\u8ba1\u7b97\u7d22\u5f15\u3002\u5982\u679c\u4e00\u4e2a\u5143\u7ec4\u4e2d\u6709\u4e94\u4e2a\u5bf9\u8c61\uff0c\u5219\u7d22\u5f15\u4e3a 0 \u2026 4\u3002 \u5982\u679c\u4f7f\u7528\u8d1f\u7d22\u5f15\uff0c\u5219\u4ece\u5143\u7ec4\u7684\u672b\u5c3e\u83b7\u5f97\u4e00\u4e2a\u503c\u3002 \u56e0\u6b64\uff0c\u7d22\u5f15-1 \u83b7\u5f97\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c-2 \u83b7\u5f97\u6700\u540e\u4e00\u4e2a\u4f46\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u3002 Python \u652f\u6301\u4ece\u5143\u7ec4\u521b\u5efa\u5207\u7247\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u4f7f\u7528 : \u5206\u9694\u7b26\u3002 \u4f8b\u5982\uff0c [0:4] \u7ed9\u51fa (1, 2, 3, 4) \u3002 \u8bf7\u6ce8\u610f\uff0c\u4e0d\u5305\u62ec\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002 \u6211\u4eec\u53ef\u4ee5\u7701\u7565\u5207\u7247\u4e2d\u7684\u4e00\u4e2a\u6216\u4e24\u4e2a\u7d22\u5f15\u3002 [:4] \u7ed9\u51fa (1, 2, 3, 4) \u3002 \u5b83\u6765\u81ea\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002 [0:] \u7ed9\u51fa\uff081,2,3,4,5\uff09\u3002 \u8fd9\u6b21\uff0c\u5305\u542b\u4e86\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002 \u5982\u679c\u8d85\u51fa\u8303\u56f4\uff0c\u6211\u4eec\u53ea\u9700\u5c06\u6240\u6709\u5143\u7d20\u90fd\u5305\u542b\u5728\u5143\u7ec4\u4e2d\u3002 1 2 3 4 5 6 7 8 9 10 $ ./tuples2.py five[0] : 1 five[-1] : 5 five[-2] : 4 five[:] : (1, 2, 3, 4, 5) five[0:4] : (1, 2, 3, 4) five[1:2] : (2,) five[:2] : (1, 2) five[:-1] : (1, 2, 3, 4) five[:9] : (1, 2, 3, 4, 5) \u8fd9\u662f\u8f93\u51fa\u3002 \u5143\u7ec4\u53ef\u4ee5\u5305\u542b\u51e0\u79cd\u6df7\u5408\u6570\u636e\u7c7b\u578b\u3002 tuples_mix.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python # tuples_mix.py mix = (1, 2, \"solaris\", (1, 2, 3)) print(\"mix[1] :\", mix[1]) print(\"mix[2] :\", mix[2]) print(\"mix[3] :\", mix[3]) print(\"mix[3][0] :\", mix[3][0]) print(\"mix[3][1] :\", mix[3][1]) print(\"mix[3][2] :\", mix[3][2]) \u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u6570\u5b57\uff0c\u5b57\u7b26\u4e32\u548c\u5143\u7ec4\u653e\u5165\u4e86\u6df7\u5408\u5143\u7ec4\u4e2d\u3002 1 2 3 4 5 6 7 $ ./tuples_mix.py mix[1] : 2 mix[2] : solaris mix[3] : (1, 2, 3) mix[3][0] : 1 mix[3][1] : 2 mix[3][2] : 3 \u4e3a\u4e86\u4ece\u5d4c\u5957\u5143\u7ec4\u4e2d\u83b7\u53d6\u5143\u7d20\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u4e24\u4e2a\u65b9\u62ec\u53f7\u3002 \u5f53\u6211\u4eec\u5904\u7406\u5305\u542b\u4e00\u4e2a\u5143\u7d20\u7684\u5143\u7ec4\u65f6\uff0c\u4f1a\u6709\u4e00\u4e2a\u4f8b\u5916\u3002 \u62ec\u53f7\u4e5f\u7528\u5728\u8868\u8fbe\u5f0f\u4e2d\u3002 \u6211\u4eec\u5982\u4f55\u533a\u5206\u4e00\u4e2a\u8868\u8fbe\u5f0f\u548c\u4e00\u4e2a\u5143\u7d20\u5143\u7ec4\uff1f Python \u7f16\u7a0b\u8bed\u8a00\u7684\u521b\u5efa\u8005\u51b3\u5b9a\u4f7f\u7528\u9017\u53f7\u6765\u8868\u793a\u6211\u4eec\u6b63\u5728\u4f7f\u7528\u5143\u7ec4\u3002 tuple_one.py 1 2 3 4 5 6 #!/usr/bin/env python # tuple_one.py print((3 + 7)) print((3 + 7, )) \u5728\u7b2c\u4e00\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u6709 and \u8868\u8fbe\u5f0f\u3002 \u6211\u4eec\u5c06 10 \u53f7\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 \u5728\u7b2c\u4e8c\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5904\u7406\u4e00\u4e2a\u5143\u7ec4\u3002 \u6211\u4eec\u6253\u5370\u4e00\u4e2a\u5305\u542b\u6570\u5b57 10 \u7684\u5143\u7ec4\u3002 1 2 3 $ ./tuple_one.py 10 (10,) \u8fd9\u662f\u8f93\u51fa\u3002 Python \u5217\u8868 \u00b6 \u5217\u8868\u662f\u53ef\u53d8\u5e8f\u5217\u6570\u636e\u7c7b\u578b\u3002 \u5b83\u53ef\u4ee5\u5305\u542b\u6df7\u5408\u6570\u636e\u7c7b\u578b\u3002 \u5217\u8868\u548c\u5143\u7ec4\u5177\u6709\u8bb8\u591a\u5171\u540c\u7684\u7279\u5f81\u3002 \u7531\u4e8e\u5217\u8868\u662f\u53ef\u4fee\u6539\u7684\u6570\u636e\u7c7b\u578b\uff0c\u56e0\u6b64\u5b83\u5177\u6709\u4e00\u4e9b\u5176\u4ed6\u64cd\u4f5c\u3002 \u4e00\u6574\u7ae0\u4e13\u95e8\u4ecb\u7ecd Python \u5217\u8868\u3002 1 actors = [\"Jack Nicholson\", \"Antony Hopkins\", \"Adrien Brody\"] \u8be5\u5217\u8868\u662f\u4f7f\u7528\u65b9\u62ec\u53f7 [] \u521b\u5efa\u7684\u3002 list_simple.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python # simple_list.py num = [0, 2, 5, 4, 6, 7] print(num[0]) print(num[2:]) print(len(num)) print(num + [8, 9]) \u5982\u524d\u6240\u8ff0\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5217\u8868\u4e0a\u4f7f\u7528\u4e0e\u5143\u7ec4\u76f8\u540c\u7684\u64cd\u4f5c\u3002 1 2 3 4 5 $ ./list_simple.py 0 [5, 4, 6, 7] 6 [0, 2, 5, 4, 6, 7, 8, 9] \u8fd9\u662f\u8f93\u51fa\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u5bf9\u5217\u8868\u8fdb\u884c\u6392\u5e8f\u3002 list_sorting.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python # list_sorting.py numbers = [4, 3, 6, 1, 2, 0, 5] print(numbers) numbers.sort() print(numbers) \u5728\u811a\u672c\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u6570\u5b57\u5217\u8868\u3002 \u8981\u5bf9\u8fd9\u4e9b\u6570\u5b57\u8fdb\u884c\u6392\u5e8f\uff0c\u6211\u4eec\u4f7f\u7528\u5185\u7f6e\u7684 sort() \u51fd\u6570\u3002 1 2 3 $ ./list_sorting.py [4, 3, 6, 1, 2, 0, 5] [0, 1, 2, 3, 4, 5, 6] reverse() \u51fd\u6570\u5c06\u4ee5\u76f8\u53cd\u7684\u987a\u5e8f\u5bf9\u5217\u8868\u7684\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\u3002 1 numbers.reverse() # [5, 4, 3, 2, 1, 0] \u4f7f\u7528 count() \u65b9\u6cd5\u5bf9\u5217\u8868\u4e2d\u7684\u5143\u7d20\u8fdb\u884c\u8ba1\u6570\u3002 list_counting_elements.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python # list_counting_elements.py numbers = [0, 0, 2, 3, 3, 3, 3] print(\"zero is here\", numbers.count(0), \"times\") print(\"one is here\", numbers.count(1), \"times\") print(\"two is here\", numbers.count(2), \"time\") print(\"three is here\", numbers.count(3), \"times\") \u8be5\u811a\u672c\u5bf9\u5217\u8868\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u8fdb\u884c\u8ba1\u6570\u3002 1 2 3 4 5 $ ./list_counting_elements.py zero is here 2 times one is here 0 times two is here 1 time three is here 4 times \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u5904\u7406\u4ece\u5217\u8868\u4e2d\u63d2\u5165\u548c\u5220\u9664\u9879\u76ee\u3002 list_modify.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #!/usr/bin/env python # list_modify.py names = [] names.append(\"Frank\") names.append(\"Alexis\") names.append(\"Erika\") names.append(\"Ludmila\") print(names) names.insert(0, \"Adriana\") print(names) names.remove(\"Frank\") names.remove(\"Alexis\") del names[1] print(names) del names[0] print(names) \u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u9996\u5148\u521b\u5efa\u4e00\u4e2a\u7a7a\u540d\u79f0\u5217\u8868\u3002 \u6211\u4eec\u4f7f\u7528 append() \u529f\u80fd\u5c06\u65b0\u9879\u76ee\u6dfb\u52a0\u5230\u5217\u8868\u4e2d\u3002 \u5143\u7d20\u4ee5\u8fde\u7eed\u65b9\u5f0f\u9644\u52a0\u3002 insert() \u51fd\u6570\u5728\u7ed9\u5b9a\u4f4d\u7f6e\u63d2\u5165\u65b0\u5143\u7d20\u3002 \u73b0\u6709\u5143\u7d20\u4e0d\u4f1a\u88ab\u5220\u9664\uff0c\u5b83\u4eec\u5c06\u88ab\u91cd\u5b9a\u4f4d\u3002 remove() \u529f\u80fd\u4ece\u5217\u8868\u4e2d\u5220\u9664\u7279\u5b9a\u9879\u76ee\u3002 \u5982\u679c\u8981\u57fa\u4e8e\u7d22\u5f15\u5220\u9664\u9879\u76ee\uff0c\u8bf7\u4f7f\u7528 del \u5173\u952e\u5b57\u3002 1 2 3 4 5 $ ./list_modify.py ['Frank', 'Alexis', 'Erika', 'Ludmila'] ['Adriana', 'Frank', 'Alexis', 'Erika', 'Ludmila'] ['Adriana', 'Ludmila'] ['Ludmila'] \u8fd9\u662f list_modify.py \u811a\u672c\u7684\u8f93\u51fa\u3002 \u4ee5\u4e0b\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u53e6\u5916\u4e24\u4e2a\u529f\u80fd\u3002 list_modify2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env python # list_modify2.py first = [1, 2, 3] second = [4, 5, 6] first.extend(second) print(first) first[0] = 11 first[1] = 22 first[2] = 33 print(first) print(first.pop(5)) print(first) extend() \u65b9\u6cd5\u5c06\u6574\u4e2a\u5217\u8868\u8ffd\u52a0\u5230\u53e6\u4e00\u4e2a\u5217\u8868\u3002 \u8981\u4fee\u6539\u5217\u8868\u4e2d\u7684\u5143\u7d20\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8d4b\u503c\u8fd0\u7b97\u7b26\u3002 pop() \u65b9\u6cd5\u4ece\u5217\u8868\u4e2d\u83b7\u53d6\u4e00\u4e2a\u9879\u76ee\u5e76\u8fd4\u56de\u5b83\u3002 1 2 3 4 5 $ ./list_modify2.py [1, 2, 3, 4, 5, 6] [11, 22, 33, 4, 5, 6] 6 [11, 22, 33, 4, 5] \u8fd9\u662f\u8f93\u51fa\u3002 \u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u627e\u51fa\u5143\u7d20\u7684\u7d22\u5f15\u3002 list_index.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python # list_index.py numbers = [0, 1, 2, 3, 3, 4, 5] print(numbers.index(1)) print(numbers.index(3)) \u8981\u5728\u5217\u8868\u4e2d\u67e5\u627e\u7d22\u5f15\uff0c\u6211\u4eec\u4f7f\u7528 index() \u65b9\u6cd5\u3002 \u5982\u679c\u6709\u66f4\u591a\u7684\u5143\u7d20\u51fa\u73b0\uff0c\u5219\u8be5\u65b9\u6cd5\u8fd4\u56de\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u7d22\u5f15\u3002 1 2 3 $ ./list_index.py 1 3 \u8fd9\u662f list_index.py \u811a\u672c\u7684\u8f93\u51fa\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u8fdb\u884c\u4e00\u4e9b\u8f6c\u6362\u3002 list_transform.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python # list_transform.py first = [1, 2, 3] second = (4, 5, 6) print(tuple(first)) print(list(second)) print(first) print(second) \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 tuple() \u51fd\u6570\u4ece\u5217\u8868\u4e2d\u521b\u5efa\u4e00\u4e2a\u5143\u7ec4\uff0c\u5e76\u4f7f\u7528 list() \u51fd\u6570\u4ece\u5143\u7ec4\u4e2d\u521b\u5efa\u4e00\u4e2a\u5217\u8868\u3002 \u6ce8\u610f\u539f\u59cb\u5bf9\u8c61\u6ca1\u6709\u88ab\u4fee\u6539\uff1b \u51fd\u6570\u4ec5\u8fd4\u56de\u90a3\u4e9b\u8f6c\u6362\u540e\u7684\u96c6\u5408\u3002 1 2 3 4 5 $ ./list_transform.py (1, 2, 3) [4, 5, 6] [1, 2, 3] (4, 5, 6) Python \u96c6\u5408 \u00b6 set \u662f\u65e0\u91cd\u590d\u6570\u636e\u7684\u65e0\u5e8f\u6570\u636e\u96c6\u5408\u3002 \u96c6\u5408\u652f\u6301\u8bf8\u5982\u5e76\u96c6\uff0c\u76f8\u4ea4\u6216\u6c42\u5dee\u7684\u8fd0\u7b97\uff1b \u4e0e\u6570\u5b66\u76f8\u4f3c\u3002 sets.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python set1 = set(['a', 'b', 'c', 'c', 'd']) set2 = set(['a', 'b', 'x', 'y', 'z']) print(\"set1: \" , set1) print(\"set2: \" , set2) print(\"intersection: \", set1 & set2) print(\"union: \", set1 | set2) print(\"difference: \", set1 - set2) print(\"symmetric difference: \", set1 ^ set2) \u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\u4e24\u7ec4\u3002 \u6211\u4eec\u4f7f\u7528 set() \u529f\u80fd\u521b\u5efa\u96c6\u5408\u3002 \u76f8\u4ea4\u64cd\u4f5c\u8fd4\u56de\u90fd\u5728 set1 \u548c set2 \u4e2d\u7684\u5143\u7d20\u3002 \u8054\u5408\u64cd\u4f5c\u8fd4\u56de\u4e24\u4e2a\u96c6\u5408\u4e2d\u7684\u6240\u6709\u5143\u7d20\u3002 \u5dee\u5f02\u8fd4\u56de set1 \u4e2d\u7684\u5143\u7d20\uff0c\u4f46\u4e0d\u662f set2 \u7684\u5143\u7d20\u3002 \u6700\u540e\uff0c\u5bf9\u79f0\u5dee\u8fd4\u56de set1 \u6216 set2 \u4e2d\u7684\u5143\u7d20\uff0c\u4f46\u4e24\u8005\u90fd\u4e0d\u662f\u3002 1 2 3 4 5 6 7 $ ./sets.py set1: set(['a', 'c', 'b', 'd']) set2: set(['a', 'x', 'b', 'y', 'z']) intersection: set(['a', 'b']) union: set(['a', 'c', 'b', 'd', 'y', 'x', 'z']) difference: set(['c', 'd']) symmetric difference: set(['c', 'd', 'y', 'x', 'z']) \u8fd9\u662f sets.py \u811a\u672c\u7684\u8f93\u51fa\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e00\u4e9b\u5176\u4ed6\u5e26\u6709\u96c6\u5408\u7684\u64cd\u4f5c\u3002 set2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/usr/bin/env python # sets2.py set1 = set([1, 2]) set1.add(3) set1.add(4) set2 = set([1, 2, 3, 4, 6, 7, 8]) set2.remove(8) print(set1) print(set2) print(\"Is set1 subset of set2 ? :\", set1.issubset(set2)) print(\"Is set1 superset of set2 ? :\", set1.issuperset(set2)) set1.clear() print(set1) add() \u65b9\u6cd5\u5c06\u4e00\u4e2a\u9879\u76ee\u6dfb\u52a0\u5230\u96c6\u5408\u4e2d\u3002 remove() \u9879\u76ee\u4ece\u96c6\u4e2d\u5220\u9664\u4e00\u4e2a\u9879\u76ee\u3002 clear() \u65b9\u6cd5\u4ece\u96c6\u5408\u4e2d\u5220\u9664\u6240\u6709\u9879\u76ee\u3002 \u5982\u679c set2 \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4e5f\u5728 set1 \u4e2d\uff0c\u5219 set1 \u662f set2 \u7684\u8d85\u96c6\u3002 \u5982\u679c set1 \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4e5f\u4f4d\u4e8e set2 \u4e2d\uff0c\u5219 set1 \u662f set2 \u7684\u5b50\u96c6\u3002 1 2 3 4 5 6 $ ./sets2.py set([1, 2, 3, 4]) set([1, 2, 3, 4, 6, 7]) Is set1 subset of set2 ? : True Is set1 superset of set2 ? : False set([]) \u5982\u679c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u4e0d\u53ef\u53d8\u7684\u96c6\u5408\uff0c\u53ef\u4ee5\u4f7f\u7528 frozenset() \u51fd\u6570\u521b\u5efa\u4e00\u4e2a\u51bb\u7ed3\u96c6\u5408\u3002 1 fs = frozenset(['a', 'b', 'c']) \u8be5\u884c\u4ece\u5217\u8868\u4e2d\u521b\u5efa\u4e00\u4e2a\u51bb\u7ed3\u96c6\u3002 Python \u5b57\u5178 \u00b6 Python \u5b57\u5178\u662f\u4e00\u7ec4\u952e\u503c\u5bf9\u3002 \u5b57\u5178\u4e2d\u7684\u5143\u7d20\u7531\u952e\u7d22\u5f15\u3002 \u5b57\u5178\u4e2d\u7684\u952e\u5fc5\u987b\u552f\u4e00\u3002 \u7531\u4e8e\u5b57\u5178\u6570\u636e\u7c7b\u578b\u7684\u91cd\u8981\u6027\uff0c\u672c Python \u6559\u7a0b\u4e2d\u6709\u6574\u6574\u4e00\u7ae0\u4ecb\u7ecd\u4e86\u5b57\u5178\u3002 dictionary_simple.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env python # dictionary_simple.py words = { 'girl': 'Maedchen', 'house': 'Haus', 'death': 'Tod' } print(words['house']) print(words.keys()) print(words.values()) print(words.items()) print(words.pop('girl')) print(words) words.clear() print(words) \u6211\u4eec\u7684\u7b2c\u4e00\u4e2a\u793a\u4f8b\u663e\u793a\u4e86\u5b57\u5178\u6570\u636e\u7c7b\u578b\u7684\u4e00\u4e9b\u57fa\u672c\u7528\u6cd5\u3002 \u6211\u4eec\u6253\u5370\u7279\u5b9a\u7684\u503c\uff0c\u5b57\u5178\u7684\u952e\u548c\u503c\u3002 items() \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\uff08\u952e\uff0c\u503c\uff09\u5bf9\u7684\u5217\u8868\u4f5c\u4e3a\u5143\u7ec4\u3002 1 2 3 4 5 6 7 8 $ ./dictionary_simple.py Haus ['house', 'girl', 'death'] ['Haus', 'Maedchen', 'Tod'] [('house', 'Haus'), ('girl', 'Maedchen'), ('death', 'Tod')] Maedchen {'house': 'Haus', 'death': 'Tod'} {}","title":"Python \u6570\u636e\u7c7b\u578b"},{"location":"pages/python/pytutorial/python-datatypes/#Python-\u6570\u636e\u7c7b\u578b","text":"Python \u6570\u636e\u7c7b\u578b \uff0c\u7535\u5b50\u8868\u683c\uff0c\u6587\u672c\u7f16\u8f91\u5668\uff0c\u8ba1\u7b97\u5668\u6216\u804a\u5929\u5ba2\u6237\u7aef\u7b49\u8ba1\u7b97\u673a\u7a0b\u5e8f\u53ef\u5904\u7406\u6570\u636e\u3002 \u7528\u4e8e\u5404\u79cd\u6570\u636e\u7c7b\u578b\u7684\u5de5\u5177\u662f\u73b0\u4ee3\u8ba1\u7b97\u673a\u8bed\u8a00\u7684\u57fa\u672c\u7ec4\u6210\u90e8\u5206\u3002","title":"Python \u6570\u636e\u7c7b\u578b"},{"location":"pages/python/pytutorial/python-datatypes/#Python-\u6570\u636e\u7c7b\u578b\u5b9a\u4e49","text":"\u6570\u636e\u7c7b\u578b\u662f\u4e00\u7ec4\u503c\u4ee5\u53ca\u5bf9\u8fd9\u4e9b\u503c\u7684\u5141\u8bb8\u64cd\u4f5c\u3002 Python \u6709\u5f88\u591a\u6709\u7528\u7684\u6570\u636e\u7c7b\u578b\u3002 Python \u7684\u6570\u636e\u7c7b\u578b\u6784\u5efa\u5728\u8bed\u8a00\u7684\u6838\u5fc3\u4e2d\u3002 \u5b83\u4eec\u6613\u4e8e\u4f7f\u7528\u548c\u76f4\u63a5\u3002","title":"Python \u6570\u636e\u7c7b\u578b\u5b9a\u4e49"},{"location":"pages/python/pytutorial/python-datatypes/#Python-\u5e03\u5c14\u503c","text":"\u6211\u4eec\u7684\u4e16\u754c\u5efa\u7acb\u4e86\u53cc\u91cd\u6027\u3002 \u6709\u5929\u4e0e\u5730\uff0c\u6c34\u4e0e\u706b\uff0c\u4e95\u4e0e\u7ae0\uff0c\u7537\u4eba\u4e0e\u5973\u4eba\uff0c\u7231\u4e0e\u6068\u3002 \u5728 Python \u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u5e03\u5c14\u6570\u636e\u7c7b\u578b\u662f\u5177\u6709\u4ee5\u4e0b\u4e24\u4e2a\u503c\u4e4b\u4e00\u7684\u539f\u59cb\u6570\u636e\u7c7b\u578b\uff1a True \u6216 False \u3002 \u8fd9\u662f\u57fa\u672c\u7684\u6570\u636e\u7c7b\u578b\u3002 \u6709\u8da3\u7684\u662f\uff0c\u8fd9\u79cd\u6570\u636e\u7c7b\u578b\u4ece\u4e00\u5f00\u59cb\u5c31\u4e0d\u5b58\u5728\uff0c\u4f46\u662f\u540e\u6765\u624d\u521b\u5efa\u3002 \u5feb\u4e50\u7684\u7236\u6bcd\u6b63\u5728\u7b49\u5f85\u5b69\u5b50\u7684\u51fa\u751f\u3002 \u4ed6\u4eec\u4e3a\u4e24\u79cd\u53ef\u80fd\u6027\u90fd\u9009\u62e9\u4e86\u540d\u79f0\u3002 \u5982\u679c\u8981\u6210\u4e3a\u7537\u5b69\uff0c\u4ed6\u4eec\u53ef\u80fd\u9009\u62e9\u4e86\u7ea6\u7ff0\u3002 \u5982\u679c\u8981\u6210\u4e3a\u5973\u5b69\uff0c\u4ed6\u4eec\u53ef\u80fd\u9009\u62e9\u4e86\u7ef4\u591a\u5229\u4e9a\u3002 kid.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python # kid.py import random male = False male = bool(random.randint(0, 1)) if male: print(\"We will use name John\") else: print(\"We will use name Victoria\") \u8be5\u811a\u672c\u4f7f\u7528\u968f\u673a\u6574\u6570\u751f\u6210\u5668\u6765\u6a21\u62df\u6211\u4eec\u7684\u60c5\u51b5\u3002 1 import random \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5bfc\u5165\u7528\u4e8e\u8ba1\u7b97\u968f\u673a\u6570\u7684\u968f\u673a\u6a21\u5757\u3002 1 male = bool(random.randint(0, 1)) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4f7f\u7528\u4e24\u4e2a\u51fd\u6570\u3002 randint() \u51fd\u6570\u4ece\u7ed9\u5b9a\u7684\u6574\u6570\u8fb9\u754c\u8fd4\u56de\u4e00\u4e2a\u968f\u673a\u6570\u3002 \u5728\u6211\u4eec\u7684\u60c5\u51b5\u4e0b\u4e3a 0 \u6216 1\u3002 bool() \u51fd\u6570\u5c06\u6574\u6570\u8f6c\u6362\u4e3a\u5e03\u5c14\u503c\u3002 1 2 3 4 if male: print(\"We will use name John\") else: print(\"We will use name Victoria\") \u6211\u4eec\u6253\u5370\u540d\u79f0\u3002 if \u5173\u952e\u5b57\u9002\u7528\u4e8e\u5e03\u5c14\u503c\u3002 \u5982\u679c male \u4e3a True \uff0c\u5219\u5728\u63a7\u5236\u53f0\u4e0a\u6253\u5370\u201c\u6211\u4eec\u5c06\u4f7f\u7528\u540d\u79f0 John\u201d\u3002 \u5982\u679c\u5b83\u5177\u6709 False \u503c\uff0c\u6211\u4eec\u5c06\u6253\u5370\u53e6\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 \u4ee5\u4e0b\u811a\u672c\u663e\u793a\u4e86\u4e00\u4e9b\u5e38\u89c1\u7684\u503c\uff0c\u5b83\u4eec\u88ab\u8ba4\u4e3a\u662f True \u6216 False \u3002 bool_fun.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python # bool_fun.py print(bool(True)) print(bool(False)) print(bool(\"text\")) print(bool(\"\")) print(bool(' ')) print(bool(0)) print(bool()) print(bool(3)) print(bool(None)) \u8be5\u793a\u4f8b\u6253\u5370\u4e5d\u4e2a\u5e03\u5c14\u503c\u3002 1 2 3 4 5 6 7 8 9 10 $ ./bool_fun.py True False True False True False False True False \u8fd9\u662f bool_fun.py \u811a\u672c\u7684\u8f93\u51fa\u3002","title":"Python \u5e03\u5c14\u503c"},{"location":"pages/python/pytutorial/python-datatypes/#Python-None","text":"\u8fd8\u6709\u53e6\u4e00\u79cd\u7279\u6b8a\u7684\u6570\u636e\u7c7b\u578b- None \u3002 \u6b64\u6570\u636e\u7c7b\u578b\u8868\u793a\u4e0d\u5b58\u5728\uff0c\u672a\u77e5\u6216\u4e3a\u7a7a\u3002 none.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python # none.py def function(): pass print(function()) \u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u3002 \u529f\u80fd\u5c06\u5728\u672c\u6559\u7a0b\u7684\u540e\u9762\u90e8\u5206\u4ecb\u7ecd\u3002 \u8be5\u529f\u80fd\u4e0d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u3002 \u5b83\u4e0d\u4f1a\u663e\u5f0f\u8fd4\u56de\u4efb\u4f55\u503c\u3002 \u8fd9\u6837\u7684\u51fd\u6570\u5c06\u9690\u5f0f\u8fd4\u56de None \u3002 1 2 $ ./none.py None \u8fd9\u662f none.py \u811a\u672c\u7684\u8f93\u51fa\u3002","title":"Python None"},{"location":"pages/python/pytutorial/python-datatypes/#Python-\u6570\u5b57","text":"\u5728 Python \u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u6211\u4eec\u6709\u6574\u6570\uff0c\u6d6e\u70b9\u6570\u548c\u590d\u6570\u3002 \u5982\u679c\u6211\u4eec\u4f7f\u7528\u6574\u6570\uff0c\u90a3\u4e48\u6211\u4eec\u5c06\u5904\u7406\u79bb\u6563\u5b9e\u4f53\u3002 \u6211\u4eec\u5c06\u4f7f\u7528\u6574\u6570\u6765\u8ba1\u7b97\u82f9\u679c\u3002 apples.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/env python # apples.py # number of baskets baskets = 16 # number of apples in a basket apples_in_basket = 24 # we get the total number of apples total = baskets * apples_in_basket print(\"There are total of\", total, \"apples\") \u5728\u811a\u672c\u4e2d\uff0c\u6211\u4eec\u8ba1\u7b97\u4e86\u82f9\u679c\u7684\u603b\u91cf\u3002 \u6211\u4eec\u4f7f\u7528\u4e58\u6cd5\u8fd0\u7b97\u3002 1 2 $ ./apples.py There are total of 384 apples \u8fd9\u662f\u811a\u672c\u7684\u8f93\u51fa\u3002 \u6d6e\u70b9\u6570\u8868\u793a\u8ba1\u7b97\u4e2d\u7684\u5b9e\u6570\u3002 \u5b9e\u6570\u6d4b\u91cf\u8fde\u7eed\u91cf\u3002 \u5047\u8bbe\u4e00\u4e2a\u77ed\u8dd1\u8fd0\u52a8\u5458\u8dd1\u4e86 1 \u4e2a\u5c0f\u65f6\uff0c\u8dd1\u4e86 9.87 \u79d2\u3002 \u4ed6\u7684\u516c\u91cc/\u5c0f\u65f6\u901f\u5ea6\u662f\u591a\u5c11\uff1f sprinter.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python # sprinter.py # 100 m is 0.1 km distance = 0.1 # 9.87 s is 9.87/60*60 h time = 9.87 / 3600 speed = distance / time print(\"The average speed of a sprinter is {0} km/h\".format(speed)) \u4e3a\u4e86\u83b7\u5f97\u901f\u5ea6\uff0c\u6211\u4eec\u5c06\u8ddd\u79bb\u9664\u4ee5\u65f6\u95f4\u3002 1 print(\"The average speed of a sprinter is {0} km/h\".format(speed)) \u6211\u4eec\u4f7f\u7528 format() \u529f\u80fd\u6784\u5efa\u6d88\u606f\u5e76\u5c06\u5176\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 2 $ ./sprinter.py The average speed of a sprinter is 36.4741641337 km/h \u8fd9\u662f sprinter.py \u811a\u672c\u7684\u8f93\u51fa\u3002 \u503c 36.4741641337 \u662f\u6d6e\u70b9\u6570\u3002","title":"Python \u6570\u5b57"},{"location":"pages/python/pytutorial/python-datatypes/#Python-\u5b57\u7b26\u4e32","text":"\u5b57\u7b26\u4e32\u662f\u4ee3\u8868\u8ba1\u7b97\u673a\u7a0b\u5e8f\u4e2d\u6587\u672c\u6570\u636e\u7684\u6570\u636e\u7c7b\u578b\u3002 \u53ef\u4ee5\u4f7f\u7528\u5355\u5f15\u53f7\uff0c\u53cc\u5f15\u53f7\u548c\u4e09\u5f15\u53f7\u5728 Python \u4e2d\u521b\u5efa\u5b57\u7b26\u4e32\u3002 \u5f53\u6211\u4eec\u4f7f\u7528\u4e09\u5f15\u53f7\u65f6\uff0c\u5b57\u7b26\u4e32\u53ef\u4ee5\u8de8\u8d8a\u591a\u884c\u800c\u65e0\u9700\u4f7f\u7528\u8f6c\u4e49\u7b26\u3002 strings.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/env python # strings.py a = \"proximity alert\" b = 'evacuation' c = \"\"\" requiem for a tower \"\"\" print(a) print(b) print(c) \u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4e3a a \uff0c b \u548c c \u53d8\u91cf\u5206\u914d\u4e86\u4e09\u4e2a\u5b57\u7b26\u4e32\u6587\u5b57\u3002 \u7136\u540e\u6211\u4eec\u5c06\u5b83\u4eec\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 2 3 4 5 6 7 8 $ ./strings.py proximity alert evacuation requiem for a tower \u8fd9\u662f strings.py \u811a\u672c\u7684\u8f93\u51fa\u3002 \u5728\u5904\u7406\u5b57\u7b26\u4e32\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u8f6c\u4e49\u5e8f\u5217\u3002 \u8f6c\u4e49\u5e8f\u5217\u662f\u5728\u5b57\u7b26\u4e32\u4e2d\u4f7f\u7528\u65f6\u5177\u6709\u7279\u5b9a\u7528\u9014\u7684\u7279\u6b8a\u5b57\u7b26\u3002 1 print(\" bbb\\raaa\") # prints aaabbb \u56de\u8f66 \\r \u662f\u884c\u5c3e\u5230\u884c\u9996\u7684\u63a7\u5236\u5b57\u7b26\u3002 strophe.py 1 2 3 4 5 6 #!/usr/bin/env python # strophe.py print(\"Incompatible, it don't matter though\\n'cos someone's bound to hear my cry\") print(\"Speak out if you do\\nYou're not easy to find\") \u65b0\u884c\u662f\u4e00\u4e2a\u63a7\u5236\u5b57\u7b26\uff0c\u5b83\u5f00\u59cb\u65b0\u7684\u4e00\u884c\u6587\u672c\u3002 1 2 3 4 5 $ ./strophe.py Incompatible, it don't matter though 'cos someone's bound to hear my cry Speak out if you do You're not easy to find \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u68c0\u67e5\u9000\u683c\u63a7\u5236\u5b57\u7b26\u3002 1 print(\"Python\\b\\b\\booo\") # prints Pytooo \u9000\u683c\u63a7\u5236\u5b57\u7b26 \\b \u5c06\u5149\u6807\u5411\u540e\u79fb\u52a8\u4e00\u4e2a\u5b57\u7b26\u3002 \u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e09\u4e2a\u9000\u683c\u5b57\u7b26\u5220\u9664\u4e09\u4e2a\u5b57\u6bcd\uff0c\u5e76\u7528\u4e09\u4e2a o \u5b57\u7b26\u66ff\u6362\u5b83\u4eec\u3002 1 print(\"Towering\\tinferno\") # prints Towering inferno \u6c34\u5e73\u9009\u9879\u5361\u5728\u6587\u672c\u4e4b\u95f4\u653e\u7f6e\u4e00\u4e2a\u7a7a\u683c\u3002 1 2 \"Johnie's dog\" 'Johnie\\'s dog' \u5355\u5f15\u53f7\u548c\u53cc\u5f15\u53f7\u53ef\u4ee5\u5d4c\u5957\u3002 \u6216\u8005\uff0c\u5982\u679c\u4ec5\u4f7f\u7528\u5355\u5f15\u53f7\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u53cd\u659c\u6760\u6765\u8f6c\u4e49\u5355\u5f15\u53f7\u7684\u9ed8\u8ba4\u542b\u4e49\u3002 1 print(\"eagle has\", len(\"eagle\"), \"characters\") \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 len() \u51fd\u6570\u6765\u8ba1\u7b97\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff08\u4ee5\u5b57\u7b26\u4e3a\u5355\u4f4d\uff09\u3002 \u5982\u679c\u5728\u5b57\u7b26\u4e32\u540e\u9644\u52a0 r \uff0c\u5219\u4f1a\u5f97\u5230\u539f\u59cb\u5b57\u7b26\u4e32\u3002 \u8f6c\u4e49\u5e8f\u5217\u4e0d\u88ab\u89e3\u91ca\u3002 raw.py 1 2 3 4 5 #!/usr/bin/env python # raw.py print(r\"Another world\\n\") 1 2 $ ./raw.py Another world\\n \u6211\u4eec\u5f97\u5230\u7684\u5b57\u7b26\u4e32\u5305\u62ec\u6362\u884c\u7b26\u3002 \u5728\u4e0b\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u663e\u793a\u4e86\u5b57\u7b26\u4e32\u4e58\u6cd5\u548c\u4e32\u8054\u3002 strings2.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/python # strings2.py print(\"eagle \" * 5) print(\"eagle \" \"falcon\") print(\"eagle \" + \"and \" + \"falcon\") * \u8fd0\u7b97\u7b26\u5c06\u5b57\u7b26\u4e32\u91cd\u590d n \u6b21\u3002 \u5728\u6211\u4eec\u7684\u60c5\u51b5\u4e0b\u662f\u4e94\u6b21\u3002 \u5f7c\u6b64\u76f8\u90bb\u7684\u4e24\u4e2a\u5b57\u7b26\u4e32\u6587\u5b57\u4f1a\u81ea\u52a8\u8fde\u63a5\u5728\u4e00\u8d77\u3002 \u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528 + \u8fd0\u7b97\u7b26\u663e\u5f0f\u8fde\u63a5\u5b57\u7b26\u4e32\u3002 1 2 3 4 $ ./strings2.py eagle eagle eagle eagle eagle eagle falcon eagle and falcon \u8fd9\u662f strings.py \u811a\u672c\u7684\u8f93\u51fa\u3002 Python \u5177\u6709\u51e0\u79cd\u7528\u4e8e\u5904\u7406\u503c\u96c6\u5408\u7684\u5185\u7f6e\u6570\u636e\u7c7b\u578b\uff1a\u5143\u7ec4\uff0c\u5217\u8868\uff0c\u96c6\u5408\u548c\u5b57\u5178\u3002","title":"Python \u5b57\u7b26\u4e32"},{"location":"pages/python/pytutorial/python-datatypes/#Python-\u5143\u7ec4","text":"\u5143\u7ec4\u662f\u4e0d\u53ef\u53d8\u5e8f\u5217\u6570\u636e\u7c7b\u578b\u3002 \u5143\u7ec4\u53ef\u4ee5\u5305\u542b\u6df7\u5408\u6570\u636e\u7c7b\u578b\u3002 1 fruits = (\"oranges\", \"apples\", \"bananas\") \u4f7f\u7528\u5706\u62ec\u53f7\u521b\u5efa\u5143\u7ec4\u3002 \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u7531\u4e09\u79cd\u6c34\u679c\u7c7b\u578b\u7ec4\u6210\u7684\u5143\u7ec4\u3002 1 2 fruits = \"apples\", \"oranges\", \"bananas\" print(fruits) # prints ('apples', 'oranges', 'bananas') \u62ec\u53f7\u4e0d\u662f\u5fc5\u987b\u7684\u3002 \u6211\u4eec\u53ef\u4ee5\u7701\u7565\u5b83\u4eec\u3002 tuples.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/env python # tuples.py first = (1, 2, 3) second = (4, 5, 6) print(\"len(first) : \", len(first)) print(\"max(first) : \", max(first)) print(\"min(first) : \", min(first)) print(\"first + second :\", first + second) print(\"first * 3 : \", first * 3) print(\"1 in first : \", 1 in first) print(\"5 not in second : \", 5 not in second) \u6b64\u793a\u4f8b\u663e\u793a\u4e86\u5143\u7ec4\u7684\u51e0\u4e2a\u57fa\u672c\u64cd\u4f5c\u3002 len() \u51fd\u6570\u8fd4\u56de\u7b2c\u4e00\u4e2a\u5143\u7ec4\u4e2d\u7684\u5143\u7d20\u6570\u3002 max() \u529f\u80fd\u8fd4\u56de\u6700\u5927\u503c\uff0c min() \u6700\u5c0f\u503c\u3002 \u52a0\u6cd5\u8fd0\u7b97\u7b26\u5c06\u4e24\u4e2a\u5143\u7ec4\u76f8\u52a0\uff0c\u4e58\u6cd5\u8fd0\u7b97\u7b26\u5c06\u5143\u7ec4\u76f8\u4e58\u3002 in \u8fd0\u7b97\u7b26\u786e\u5b9a\u8be5\u503c\u662f\u5426\u5728\u5143\u7ec4\u4e2d\u3002 1 2 3 4 5 6 7 8 $ ./tuples.py len(first) : 3 max(first) : 3 min(first) : 1 first + second : (1, 2, 3, 4, 5, 6) first * 3 : (1, 2, 3, 1, 2, 3, 1, 2, 3) 1 in first : True 5 not in second : False \u8fd9\u662f\u811a\u672c\u7684\u8f93\u51fa\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u8fdb\u884c\u4e00\u4e9b\u7d22\u5f15\u7f16\u5236\u3002 tuples2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python # tuples2.py five = (1, 2, 3, 4, 5) print(\"five[0] : \", five[0]) print(\"five[-1] : \", five[-1]) print(\"five[-2] : \", five[-2]) print(\"five[:] : \", five[:]) print(\"five[0:4] : \", five[0:4]) print(\"five[1:2] : \", five[1:2]) print(\"five[:2] : \", five[:2]) print(\"five[:-1] : \", five[:-1]) print(\"five[:9] : \", five[:9]) \u4e3a\u4e86\u4ece\u5143\u7ec4\u4e2d\u83b7\u53d6\u503c\uff0c\u6211\u4eec\u4f7f\u7528\u65b9\u62ec\u53f7 [] \u3002 \u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u4ece 0 \u5f00\u59cb\u8ba1\u7b97\u7d22\u5f15\u3002\u5982\u679c\u4e00\u4e2a\u5143\u7ec4\u4e2d\u6709\u4e94\u4e2a\u5bf9\u8c61\uff0c\u5219\u7d22\u5f15\u4e3a 0 \u2026 4\u3002 \u5982\u679c\u4f7f\u7528\u8d1f\u7d22\u5f15\uff0c\u5219\u4ece\u5143\u7ec4\u7684\u672b\u5c3e\u83b7\u5f97\u4e00\u4e2a\u503c\u3002 \u56e0\u6b64\uff0c\u7d22\u5f15-1 \u83b7\u5f97\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c-2 \u83b7\u5f97\u6700\u540e\u4e00\u4e2a\u4f46\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u3002 Python \u652f\u6301\u4ece\u5143\u7ec4\u521b\u5efa\u5207\u7247\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u4f7f\u7528 : \u5206\u9694\u7b26\u3002 \u4f8b\u5982\uff0c [0:4] \u7ed9\u51fa (1, 2, 3, 4) \u3002 \u8bf7\u6ce8\u610f\uff0c\u4e0d\u5305\u62ec\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002 \u6211\u4eec\u53ef\u4ee5\u7701\u7565\u5207\u7247\u4e2d\u7684\u4e00\u4e2a\u6216\u4e24\u4e2a\u7d22\u5f15\u3002 [:4] \u7ed9\u51fa (1, 2, 3, 4) \u3002 \u5b83\u6765\u81ea\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002 [0:] \u7ed9\u51fa\uff081,2,3,4,5\uff09\u3002 \u8fd9\u6b21\uff0c\u5305\u542b\u4e86\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002 \u5982\u679c\u8d85\u51fa\u8303\u56f4\uff0c\u6211\u4eec\u53ea\u9700\u5c06\u6240\u6709\u5143\u7d20\u90fd\u5305\u542b\u5728\u5143\u7ec4\u4e2d\u3002 1 2 3 4 5 6 7 8 9 10 $ ./tuples2.py five[0] : 1 five[-1] : 5 five[-2] : 4 five[:] : (1, 2, 3, 4, 5) five[0:4] : (1, 2, 3, 4) five[1:2] : (2,) five[:2] : (1, 2) five[:-1] : (1, 2, 3, 4) five[:9] : (1, 2, 3, 4, 5) \u8fd9\u662f\u8f93\u51fa\u3002 \u5143\u7ec4\u53ef\u4ee5\u5305\u542b\u51e0\u79cd\u6df7\u5408\u6570\u636e\u7c7b\u578b\u3002 tuples_mix.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python # tuples_mix.py mix = (1, 2, \"solaris\", (1, 2, 3)) print(\"mix[1] :\", mix[1]) print(\"mix[2] :\", mix[2]) print(\"mix[3] :\", mix[3]) print(\"mix[3][0] :\", mix[3][0]) print(\"mix[3][1] :\", mix[3][1]) print(\"mix[3][2] :\", mix[3][2]) \u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u6570\u5b57\uff0c\u5b57\u7b26\u4e32\u548c\u5143\u7ec4\u653e\u5165\u4e86\u6df7\u5408\u5143\u7ec4\u4e2d\u3002 1 2 3 4 5 6 7 $ ./tuples_mix.py mix[1] : 2 mix[2] : solaris mix[3] : (1, 2, 3) mix[3][0] : 1 mix[3][1] : 2 mix[3][2] : 3 \u4e3a\u4e86\u4ece\u5d4c\u5957\u5143\u7ec4\u4e2d\u83b7\u53d6\u5143\u7d20\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u4e24\u4e2a\u65b9\u62ec\u53f7\u3002 \u5f53\u6211\u4eec\u5904\u7406\u5305\u542b\u4e00\u4e2a\u5143\u7d20\u7684\u5143\u7ec4\u65f6\uff0c\u4f1a\u6709\u4e00\u4e2a\u4f8b\u5916\u3002 \u62ec\u53f7\u4e5f\u7528\u5728\u8868\u8fbe\u5f0f\u4e2d\u3002 \u6211\u4eec\u5982\u4f55\u533a\u5206\u4e00\u4e2a\u8868\u8fbe\u5f0f\u548c\u4e00\u4e2a\u5143\u7d20\u5143\u7ec4\uff1f Python \u7f16\u7a0b\u8bed\u8a00\u7684\u521b\u5efa\u8005\u51b3\u5b9a\u4f7f\u7528\u9017\u53f7\u6765\u8868\u793a\u6211\u4eec\u6b63\u5728\u4f7f\u7528\u5143\u7ec4\u3002 tuple_one.py 1 2 3 4 5 6 #!/usr/bin/env python # tuple_one.py print((3 + 7)) print((3 + 7, )) \u5728\u7b2c\u4e00\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u6709 and \u8868\u8fbe\u5f0f\u3002 \u6211\u4eec\u5c06 10 \u53f7\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 \u5728\u7b2c\u4e8c\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5904\u7406\u4e00\u4e2a\u5143\u7ec4\u3002 \u6211\u4eec\u6253\u5370\u4e00\u4e2a\u5305\u542b\u6570\u5b57 10 \u7684\u5143\u7ec4\u3002 1 2 3 $ ./tuple_one.py 10 (10,) \u8fd9\u662f\u8f93\u51fa\u3002","title":"Python \u5143\u7ec4"},{"location":"pages/python/pytutorial/python-datatypes/#Python-\u5217\u8868","text":"\u5217\u8868\u662f\u53ef\u53d8\u5e8f\u5217\u6570\u636e\u7c7b\u578b\u3002 \u5b83\u53ef\u4ee5\u5305\u542b\u6df7\u5408\u6570\u636e\u7c7b\u578b\u3002 \u5217\u8868\u548c\u5143\u7ec4\u5177\u6709\u8bb8\u591a\u5171\u540c\u7684\u7279\u5f81\u3002 \u7531\u4e8e\u5217\u8868\u662f\u53ef\u4fee\u6539\u7684\u6570\u636e\u7c7b\u578b\uff0c\u56e0\u6b64\u5b83\u5177\u6709\u4e00\u4e9b\u5176\u4ed6\u64cd\u4f5c\u3002 \u4e00\u6574\u7ae0\u4e13\u95e8\u4ecb\u7ecd Python \u5217\u8868\u3002 1 actors = [\"Jack Nicholson\", \"Antony Hopkins\", \"Adrien Brody\"] \u8be5\u5217\u8868\u662f\u4f7f\u7528\u65b9\u62ec\u53f7 [] \u521b\u5efa\u7684\u3002 list_simple.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python # simple_list.py num = [0, 2, 5, 4, 6, 7] print(num[0]) print(num[2:]) print(len(num)) print(num + [8, 9]) \u5982\u524d\u6240\u8ff0\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5217\u8868\u4e0a\u4f7f\u7528\u4e0e\u5143\u7ec4\u76f8\u540c\u7684\u64cd\u4f5c\u3002 1 2 3 4 5 $ ./list_simple.py 0 [5, 4, 6, 7] 6 [0, 2, 5, 4, 6, 7, 8, 9] \u8fd9\u662f\u8f93\u51fa\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u5bf9\u5217\u8868\u8fdb\u884c\u6392\u5e8f\u3002 list_sorting.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python # list_sorting.py numbers = [4, 3, 6, 1, 2, 0, 5] print(numbers) numbers.sort() print(numbers) \u5728\u811a\u672c\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u6570\u5b57\u5217\u8868\u3002 \u8981\u5bf9\u8fd9\u4e9b\u6570\u5b57\u8fdb\u884c\u6392\u5e8f\uff0c\u6211\u4eec\u4f7f\u7528\u5185\u7f6e\u7684 sort() \u51fd\u6570\u3002 1 2 3 $ ./list_sorting.py [4, 3, 6, 1, 2, 0, 5] [0, 1, 2, 3, 4, 5, 6] reverse() \u51fd\u6570\u5c06\u4ee5\u76f8\u53cd\u7684\u987a\u5e8f\u5bf9\u5217\u8868\u7684\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\u3002 1 numbers.reverse() # [5, 4, 3, 2, 1, 0] \u4f7f\u7528 count() \u65b9\u6cd5\u5bf9\u5217\u8868\u4e2d\u7684\u5143\u7d20\u8fdb\u884c\u8ba1\u6570\u3002 list_counting_elements.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python # list_counting_elements.py numbers = [0, 0, 2, 3, 3, 3, 3] print(\"zero is here\", numbers.count(0), \"times\") print(\"one is here\", numbers.count(1), \"times\") print(\"two is here\", numbers.count(2), \"time\") print(\"three is here\", numbers.count(3), \"times\") \u8be5\u811a\u672c\u5bf9\u5217\u8868\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u8fdb\u884c\u8ba1\u6570\u3002 1 2 3 4 5 $ ./list_counting_elements.py zero is here 2 times one is here 0 times two is here 1 time three is here 4 times \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u5904\u7406\u4ece\u5217\u8868\u4e2d\u63d2\u5165\u548c\u5220\u9664\u9879\u76ee\u3002 list_modify.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #!/usr/bin/env python # list_modify.py names = [] names.append(\"Frank\") names.append(\"Alexis\") names.append(\"Erika\") names.append(\"Ludmila\") print(names) names.insert(0, \"Adriana\") print(names) names.remove(\"Frank\") names.remove(\"Alexis\") del names[1] print(names) del names[0] print(names) \u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u9996\u5148\u521b\u5efa\u4e00\u4e2a\u7a7a\u540d\u79f0\u5217\u8868\u3002 \u6211\u4eec\u4f7f\u7528 append() \u529f\u80fd\u5c06\u65b0\u9879\u76ee\u6dfb\u52a0\u5230\u5217\u8868\u4e2d\u3002 \u5143\u7d20\u4ee5\u8fde\u7eed\u65b9\u5f0f\u9644\u52a0\u3002 insert() \u51fd\u6570\u5728\u7ed9\u5b9a\u4f4d\u7f6e\u63d2\u5165\u65b0\u5143\u7d20\u3002 \u73b0\u6709\u5143\u7d20\u4e0d\u4f1a\u88ab\u5220\u9664\uff0c\u5b83\u4eec\u5c06\u88ab\u91cd\u5b9a\u4f4d\u3002 remove() \u529f\u80fd\u4ece\u5217\u8868\u4e2d\u5220\u9664\u7279\u5b9a\u9879\u76ee\u3002 \u5982\u679c\u8981\u57fa\u4e8e\u7d22\u5f15\u5220\u9664\u9879\u76ee\uff0c\u8bf7\u4f7f\u7528 del \u5173\u952e\u5b57\u3002 1 2 3 4 5 $ ./list_modify.py ['Frank', 'Alexis', 'Erika', 'Ludmila'] ['Adriana', 'Frank', 'Alexis', 'Erika', 'Ludmila'] ['Adriana', 'Ludmila'] ['Ludmila'] \u8fd9\u662f list_modify.py \u811a\u672c\u7684\u8f93\u51fa\u3002 \u4ee5\u4e0b\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u53e6\u5916\u4e24\u4e2a\u529f\u80fd\u3002 list_modify2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env python # list_modify2.py first = [1, 2, 3] second = [4, 5, 6] first.extend(second) print(first) first[0] = 11 first[1] = 22 first[2] = 33 print(first) print(first.pop(5)) print(first) extend() \u65b9\u6cd5\u5c06\u6574\u4e2a\u5217\u8868\u8ffd\u52a0\u5230\u53e6\u4e00\u4e2a\u5217\u8868\u3002 \u8981\u4fee\u6539\u5217\u8868\u4e2d\u7684\u5143\u7d20\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8d4b\u503c\u8fd0\u7b97\u7b26\u3002 pop() \u65b9\u6cd5\u4ece\u5217\u8868\u4e2d\u83b7\u53d6\u4e00\u4e2a\u9879\u76ee\u5e76\u8fd4\u56de\u5b83\u3002 1 2 3 4 5 $ ./list_modify2.py [1, 2, 3, 4, 5, 6] [11, 22, 33, 4, 5, 6] 6 [11, 22, 33, 4, 5] \u8fd9\u662f\u8f93\u51fa\u3002 \u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u627e\u51fa\u5143\u7d20\u7684\u7d22\u5f15\u3002 list_index.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python # list_index.py numbers = [0, 1, 2, 3, 3, 4, 5] print(numbers.index(1)) print(numbers.index(3)) \u8981\u5728\u5217\u8868\u4e2d\u67e5\u627e\u7d22\u5f15\uff0c\u6211\u4eec\u4f7f\u7528 index() \u65b9\u6cd5\u3002 \u5982\u679c\u6709\u66f4\u591a\u7684\u5143\u7d20\u51fa\u73b0\uff0c\u5219\u8be5\u65b9\u6cd5\u8fd4\u56de\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u7d22\u5f15\u3002 1 2 3 $ ./list_index.py 1 3 \u8fd9\u662f list_index.py \u811a\u672c\u7684\u8f93\u51fa\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u8fdb\u884c\u4e00\u4e9b\u8f6c\u6362\u3002 list_transform.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python # list_transform.py first = [1, 2, 3] second = (4, 5, 6) print(tuple(first)) print(list(second)) print(first) print(second) \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 tuple() \u51fd\u6570\u4ece\u5217\u8868\u4e2d\u521b\u5efa\u4e00\u4e2a\u5143\u7ec4\uff0c\u5e76\u4f7f\u7528 list() \u51fd\u6570\u4ece\u5143\u7ec4\u4e2d\u521b\u5efa\u4e00\u4e2a\u5217\u8868\u3002 \u6ce8\u610f\u539f\u59cb\u5bf9\u8c61\u6ca1\u6709\u88ab\u4fee\u6539\uff1b \u51fd\u6570\u4ec5\u8fd4\u56de\u90a3\u4e9b\u8f6c\u6362\u540e\u7684\u96c6\u5408\u3002 1 2 3 4 5 $ ./list_transform.py (1, 2, 3) [4, 5, 6] [1, 2, 3] (4, 5, 6)","title":"Python \u5217\u8868"},{"location":"pages/python/pytutorial/python-datatypes/#Python-\u96c6\u5408","text":"set \u662f\u65e0\u91cd\u590d\u6570\u636e\u7684\u65e0\u5e8f\u6570\u636e\u96c6\u5408\u3002 \u96c6\u5408\u652f\u6301\u8bf8\u5982\u5e76\u96c6\uff0c\u76f8\u4ea4\u6216\u6c42\u5dee\u7684\u8fd0\u7b97\uff1b \u4e0e\u6570\u5b66\u76f8\u4f3c\u3002 sets.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python set1 = set(['a', 'b', 'c', 'c', 'd']) set2 = set(['a', 'b', 'x', 'y', 'z']) print(\"set1: \" , set1) print(\"set2: \" , set2) print(\"intersection: \", set1 & set2) print(\"union: \", set1 | set2) print(\"difference: \", set1 - set2) print(\"symmetric difference: \", set1 ^ set2) \u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\u4e24\u7ec4\u3002 \u6211\u4eec\u4f7f\u7528 set() \u529f\u80fd\u521b\u5efa\u96c6\u5408\u3002 \u76f8\u4ea4\u64cd\u4f5c\u8fd4\u56de\u90fd\u5728 set1 \u548c set2 \u4e2d\u7684\u5143\u7d20\u3002 \u8054\u5408\u64cd\u4f5c\u8fd4\u56de\u4e24\u4e2a\u96c6\u5408\u4e2d\u7684\u6240\u6709\u5143\u7d20\u3002 \u5dee\u5f02\u8fd4\u56de set1 \u4e2d\u7684\u5143\u7d20\uff0c\u4f46\u4e0d\u662f set2 \u7684\u5143\u7d20\u3002 \u6700\u540e\uff0c\u5bf9\u79f0\u5dee\u8fd4\u56de set1 \u6216 set2 \u4e2d\u7684\u5143\u7d20\uff0c\u4f46\u4e24\u8005\u90fd\u4e0d\u662f\u3002 1 2 3 4 5 6 7 $ ./sets.py set1: set(['a', 'c', 'b', 'd']) set2: set(['a', 'x', 'b', 'y', 'z']) intersection: set(['a', 'b']) union: set(['a', 'c', 'b', 'd', 'y', 'x', 'z']) difference: set(['c', 'd']) symmetric difference: set(['c', 'd', 'y', 'x', 'z']) \u8fd9\u662f sets.py \u811a\u672c\u7684\u8f93\u51fa\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e00\u4e9b\u5176\u4ed6\u5e26\u6709\u96c6\u5408\u7684\u64cd\u4f5c\u3002 set2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/usr/bin/env python # sets2.py set1 = set([1, 2]) set1.add(3) set1.add(4) set2 = set([1, 2, 3, 4, 6, 7, 8]) set2.remove(8) print(set1) print(set2) print(\"Is set1 subset of set2 ? :\", set1.issubset(set2)) print(\"Is set1 superset of set2 ? :\", set1.issuperset(set2)) set1.clear() print(set1) add() \u65b9\u6cd5\u5c06\u4e00\u4e2a\u9879\u76ee\u6dfb\u52a0\u5230\u96c6\u5408\u4e2d\u3002 remove() \u9879\u76ee\u4ece\u96c6\u4e2d\u5220\u9664\u4e00\u4e2a\u9879\u76ee\u3002 clear() \u65b9\u6cd5\u4ece\u96c6\u5408\u4e2d\u5220\u9664\u6240\u6709\u9879\u76ee\u3002 \u5982\u679c set2 \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4e5f\u5728 set1 \u4e2d\uff0c\u5219 set1 \u662f set2 \u7684\u8d85\u96c6\u3002 \u5982\u679c set1 \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4e5f\u4f4d\u4e8e set2 \u4e2d\uff0c\u5219 set1 \u662f set2 \u7684\u5b50\u96c6\u3002 1 2 3 4 5 6 $ ./sets2.py set([1, 2, 3, 4]) set([1, 2, 3, 4, 6, 7]) Is set1 subset of set2 ? : True Is set1 superset of set2 ? : False set([]) \u5982\u679c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u4e0d\u53ef\u53d8\u7684\u96c6\u5408\uff0c\u53ef\u4ee5\u4f7f\u7528 frozenset() \u51fd\u6570\u521b\u5efa\u4e00\u4e2a\u51bb\u7ed3\u96c6\u5408\u3002 1 fs = frozenset(['a', 'b', 'c']) \u8be5\u884c\u4ece\u5217\u8868\u4e2d\u521b\u5efa\u4e00\u4e2a\u51bb\u7ed3\u96c6\u3002","title":"Python \u96c6\u5408"},{"location":"pages/python/pytutorial/python-datatypes/#Python-\u5b57\u5178","text":"Python \u5b57\u5178\u662f\u4e00\u7ec4\u952e\u503c\u5bf9\u3002 \u5b57\u5178\u4e2d\u7684\u5143\u7d20\u7531\u952e\u7d22\u5f15\u3002 \u5b57\u5178\u4e2d\u7684\u952e\u5fc5\u987b\u552f\u4e00\u3002 \u7531\u4e8e\u5b57\u5178\u6570\u636e\u7c7b\u578b\u7684\u91cd\u8981\u6027\uff0c\u672c Python \u6559\u7a0b\u4e2d\u6709\u6574\u6574\u4e00\u7ae0\u4ecb\u7ecd\u4e86\u5b57\u5178\u3002 dictionary_simple.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env python # dictionary_simple.py words = { 'girl': 'Maedchen', 'house': 'Haus', 'death': 'Tod' } print(words['house']) print(words.keys()) print(words.values()) print(words.items()) print(words.pop('girl')) print(words) words.clear() print(words) \u6211\u4eec\u7684\u7b2c\u4e00\u4e2a\u793a\u4f8b\u663e\u793a\u4e86\u5b57\u5178\u6570\u636e\u7c7b\u578b\u7684\u4e00\u4e9b\u57fa\u672c\u7528\u6cd5\u3002 \u6211\u4eec\u6253\u5370\u7279\u5b9a\u7684\u503c\uff0c\u5b57\u5178\u7684\u952e\u548c\u503c\u3002 items() \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\uff08\u952e\uff0c\u503c\uff09\u5bf9\u7684\u5217\u8868\u4f5c\u4e3a\u5143\u7ec4\u3002 1 2 3 4 5 6 7 8 $ ./dictionary_simple.py Haus ['house', 'girl', 'death'] ['Haus', 'Maedchen', 'Tod'] [('house', 'Haus'), ('girl', 'Maedchen'), ('death', 'Tod')] Maedchen {'house': 'Haus', 'death': 'Tod'} {}","title":"Python \u5b57\u5178"},{"location":"pages/python/pytutorial/python-dictionaries/","text":"Python \u5b57\u5178 \u00b6 Python \u5b57\u5178\u662f\u952e-\u503c\u5bf9\u7684\u5bb9\u5668\u3002 \u5b83\u662f\u53ef\u53d8\u7684\uff0c\u53ef\u4ee5\u5305\u542b\u6df7\u5408\u7c7b\u578b\uff0c\u5b57\u5178\u662f\u65e0\u5e8f\u96c6\u5408\u3002 Python \u8bcd\u5178\u5728\u5176\u4ed6\u8bed\u8a00\u4e2d\u79f0\u4e3a\u5173\u8054\u6570\u7ec4\u6216\u54c8\u5e0c\u8868\u3002 \u5b57\u5178\u4e2d\u7684\u952e\u5fc5\u987b\u662f\u4e0d\u53ef\u53d8\u7684\u5bf9\u8c61\uff0c\u4f8b\u5982\u5b57\u7b26\u4e32\u6216\u6570\u5b57\uff0c\u5b83\u4eec\u5728\u5b57\u5178\u4e2d\u4e5f\u5fc5\u987b\u662f\u552f\u4e00\u7684\u3002 Python \u5b57\u5178\u521b\u5efa \u00b6 \u9996\u5148\uff0c\u6211\u4eec\u5c55\u793a\u5982\u4f55\u521b\u5efa Python \u5b57\u5178\u3002 create_dict.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/usr/bin/env python # create_dict.py weekend = { \"Sun\": \"Sunday\", \"Mon\": \"Monday\" } vals = dict(one=1, two=2) capitals = {} capitals[\"svk\"] = \"Bratislava\" capitals[\"deu\"] = \"Berlin\" capitals[\"dnk\"] = \"Copenhagen\" d = { i: object() for i in range(4) } print(weekend) print(vals) print(capitals) print(d) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4ee5\u56db\u79cd\u4e0d\u540c\u65b9\u5f0f\u521b\u5efa\u56db\u4e2a\u5b57\u5178\u3002 \u7a0d\u540e\uff0c\u6211\u4eec\u5c06\u8fd9\u4e9b\u8bcd\u5178\u7684\u5185\u5bb9\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 weekend = { \"Sun\": \"Sunday\", \"Mon\": \"Monday\" } \u6211\u4eec\u4f7f\u7528\u5b57\u5178\u6587\u5b57\u8868\u793a\u6cd5\u521b\u5efa\u5468\u672b\u5b57\u5178\u3002 \u952e\u503c\u5bf9\u7528\u5927\u62ec\u53f7\u62ec\u8d77\u6765\u3002 \u4e24\u5bf9\u4e4b\u95f4\u7528\u9017\u53f7\u5206\u9694\u3002 \u4e00\u5bf9\u7684\u7b2c\u4e00\u4e2a\u503c\u662f\u952e\uff0c\u540e\u8ddf\u4e00\u4e2a\u5192\u53f7\u548c\u4e00\u4e2a\u503c\u3002 \"Sun\" \u5b57\u7b26\u4e32\u662f\u952e\uff0c \"Sunday\" \u5b57\u7b26\u4e32\u662f\u503c\u3002 1 vals = dict(one=1, two=2) \u53ef\u4ee5\u4f7f\u7528 dict() \u529f\u80fd\u521b\u5efa\u5b57\u5178\u3002 1 2 3 4 capitals = {} capitals[\"svk\"] = \"Bratislava\" capitals[\"deu\"] = \"Berlin\" capitals[\"dnk\"] = \"Copenhagen\" \u7b2c\u4e09\u79cd\u65b9\u6cd5\u662f\u521b\u5efa\u4e00\u4e2a\u7a7a\u7684\u5927\u5199\u5b57\u5178\u3002 \u4e09\u5bf9\u5c06\u6dfb\u52a0\u5230\u8bcd\u5178\u4e2d\u3002 \u952e\u4f4d\u4e8e\u65b9\u62ec\u53f7\u5185\uff0c\u503c\u4f4d\u4e8e\u5206\u914d\u7684\u53f3\u4fa7\u3002 1 d = { i: object() for i in range(4) } \u4f7f\u7528\u5b57\u5178\u63a8\u5bfc\u5f0f\u6765\u521b\u5efa\u5b57\u5178\u3002 \u7406\u89e3\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\u3002 \u7b2c\u4e00\u90e8\u5206\u662f i: object() \u8868\u8fbe\u5f0f\uff0c\u8be5\u8868\u8fbe\u5f0f\u5728\u5faa\u73af\u7684\u6bcf\u4e2a\u5faa\u73af\u4e2d\u6267\u884c\u3002 \u7b2c\u4e8c\u90e8\u5206\u662f for i in range(4) \u5faa\u73af\u3002 \u5b57\u5178\u63a8\u5bfc\u5f0f\u5c06\u521b\u5efa\u5177\u6709\u56db\u5bf9\u7684\u5b57\u5178\uff0c\u5176\u4e2d\u952e\u4e3a\u6570\u5b57 0\u30011\u30012 \u548c 3\uff0c\u503c\u4e3a\u7b80\u5355\u5bf9\u8c61\u3002 1 2 3 4 5 6 $ ./create_dict.py {'Sun': 'Sunday', 'Mon': 'Monday'} {'two': 2, 'one': 1} {'svk': 'Bratislava', 'dnk': 'Copenhagen', 'deu': 'Berlin'} {0: <object object at 0xb76cb4a8>, 1: <object object at 0xb76cb4b0>, 2: <object object at 0xb76cb4b8>, 3: <object object at 0xb76cb4c0>} \u8fd9\u662f\u793a\u4f8b\u8f93\u51fa\u3002 Python \u5b57\u5178\u63a8\u5bfc\u5f0f \u00b6 \u8bcd\u5178\u7406\u89e3\u662f\u4e00\u79cd\u57fa\u4e8e\u73b0\u6709\u8bcd\u5178\u521b\u5efa\u8bcd\u5178\u7684\u8bed\u6cd5\u7ed3\u6784\u3002 1 D = { expression for variable in sequence [if condition] } \u5b57\u5178\u63a8\u5bfc\u5f0f\u653e\u5728\u4e24\u4e2a\u5927\u62ec\u53f7\u4e4b\u95f4\uff1b \u5b83\u5305\u542b\u4e09\u4e2a\u90e8\u5206\uff1afor \u5faa\u73af\uff0c\u6761\u4ef6\u548c\u8868\u8fbe\u5f0f\u3002 \u5728 for \u5faa\u73af\u4e2d\uff0c\u6211\u4eec\u6d4f\u89c8\u4e86\u5b57\u5178\u3002 \u53ef\u9009\u7684 if \u6761\u4ef6\u6307\u5b9a\u5fc5\u987b\u6ee1\u8db3\u7684\u6761\u4ef6\u3002 \u6700\u540e\uff0c\u5bf9\u8868\u8fbe\u5f0f\u8fdb\u884c\u6c42\u503c\u3002 \u8be5\u8868\u8fbe\u5f0f\u4ece\u6ee1\u8db3\u6761\u4ef6\u7684\u8f93\u5165\u5e8f\u5217\u6210\u5458\u4e2d\u4ea7\u751f\u8f93\u51fa\u5b57\u5178\u7684\u5143\u7d20\u3002 comprehension.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python # comprehension.py capitals = { \"Bratislava\": 424207, \"Vilnius\": 556723, \"Lisbon\": 564657, \"Riga\": 713016, \"Jerusalem\": 780200, \"Warsaw\": 1711324, \"Budapest\": 1729040, \"Prague\": 1241664, \"Helsinki\": 596661, \"Yokyo\": 13189000, \"Madrid\": 3233527 } capitals2 = { key:val for key, val in capitals.items() if val < 1000000 } print(capitals2) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4ece\u73b0\u6709\u5b57\u5178\u521b\u5efa\u4e00\u4e2a\u65b0\u5b57\u5178\u3002 1 2 3 4 capitals = { \"Bratislava\": 424207, \"Vilnius\": 556723, \"Lisbon\": 564657, \"Riga\": 713016, \"Jerusalem\": 780200, \"Warsaw\": 1711324, \"Budapest\": 1729040, \"Prague\": 1241664, \"Helsinki\": 596661, \"Yokyo\": 13189000, \"Madrid\": 3233527 } \u6211\u4eec\u6709\u4e00\u4e2a\u5927\u5199\u7684\u5b57\u5178\u3002 \u5173\u952e\u5728\u4e8e\u8d44\u672c\uff0c\u800c\u4eba\u53e3\u5c31\u662f\u4ef7\u503c\u3002 1 capitals = { key:val for key, val in capitals.items() if val < 1000000 } \u4f7f\u7528\u5b57\u5178\u63a8\u5bfc\u5f0f\u6765\u521b\u5efa\u65b0\u5b57\u5178\u3002 \u5b83\u5305\u542b\u4eba\u53e3\u5c11\u4e8e\u4e00\u767e\u4e07\u7684\u9996\u90fd\u3002 1 2 3 $ ./comprehension.py {'Bratislava': 424207, 'Vilnius': 556723, 'Jerusalem': 780200, 'Riga': 713016, 'Lisbon': 564657, 'Helsinki': 596661} \u8fd9\u4e9b\u9996\u90fd\u7684\u4eba\u53e3\u5c11\u4e8e\u4e00\u767e\u4e07\u3002 Python \u5b57\u5178\u7684\u57fa\u672c\u64cd\u4f5c \u00b6 \u4ee5\u4e0b\u793a\u4f8b\u663e\u793a\u4e86\u4f7f\u7528 Python \u8bcd\u5178\u7684\u4e00\u4e9b\u57fa\u672c\u64cd\u4f5c\u3002 basics.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env python # basics.py basket = { 'oranges': 12, 'pears': 5, 'apples': 4 } basket['bananas'] = 5 print(basket) print(\"There are {0} various items in the basket\".format(len(basket))) print(basket['apples']) basket['apples'] = 8 print(basket['apples']) print(basket.get('oranges', 'undefined')) print(basket.get('cherries', 'undefined')) \u6211\u4eec\u6709\u4e00\u4e2a\u88c5\u7740\u4e0d\u540c\u6c34\u679c\u7684\u7bee\u5b50\u3002 \u6211\u4eec\u5bf9\u8d2d\u7269\u7bee\u5b57\u5178\u6267\u884c\u4e00\u4e9b\u64cd\u4f5c\u3002 1 basket = { 'oranges': 12, 'pears': 5, 'apples': 4 } \u5c06\u521b\u5efa\u7bee\u5b50\u5b57\u5178\u3002 \u5b83\u6700\u521d\u5177\u6709\u4e09\u4e2a\u952e\u503c\u5bf9\u3002 1 basket['bananas'] = 5 \u5c06\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u914d\u5bf9\u3002 'bananas' \u5b57\u7b26\u4e32\u662f\u952e\uff0c 5 \u6574\u6570\u662f\u503c\u3002 1 print(\"There are {0} various items in the basket\".format(len(basket))) len() \u51fd\u6570\u7ed9\u51fa\u5b57\u5178\u4e2d\u7684\u5bf9\u6570\u3002 1 print(basket['apples']) \u201c\u82f9\u679c\u201d\u952e\u7684\u503c\u4f1a\u6253\u5370\u5230\u7ec8\u7aef\u4e0a\u3002 1 basket['apples'] = 8 \u201c\u82f9\u679c\u201d\u952e\u7684\u503c\u88ab\u4fee\u6539\u3002 \u8bbe\u7f6e\u4e3a\u6570\u5b57 8\u3002 1 print(basket.get('oranges', 'undefined')) get() \u65b9\u6cd5\u68c0\u7d22\u6307\u5b9a\u952e\u7684\u503c\u3002 \u5982\u679c\u6ca1\u6709\u8fd9\u6837\u7684\u952e\uff0c\u5219\u8fd4\u56de\u8be5\u65b9\u6cd5\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u3002 1 print(basket.get('cherries', 'undefined')) \u8be5\u884c\u8fd4\u56de\u201c\u672a\u5b9a\u4e49\u201d\u3002 \u7bee\u5b50\u91cc\u6ca1\u6709\u6a31\u6843\u3002 1 2 3 4 5 6 7 $ ./basics.py {'bananas': 5, 'pears': 5, 'oranges': 12, 'apples': 4} There are 4 various items in the basket 4 8 12 undefined \u8fd9\u662f\u793a\u4f8b\u8f93\u51fa\u3002 Python \u5b57\u5178 fromkeys \u548c setdefault \u00b6 \u4e0b\u4e00\u4e2a\u793a\u4f8b\u4ecb\u7ecd\u4e86\u4e24\u79cd\u5b57\u5178\u65b9\u6cd5\uff1a fromkeys() \u548c setdefault() \u3002 fruits.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env python # fruits.py basket = ('oranges', 'pears', 'apples', 'bananas') fruits = {}.fromkeys(basket, 0) print(fruits) fruits['oranges'] = 12 fruits['pears'] = 8 fruits['apples'] = 4 print(fruits.setdefault('oranges', 11)) print(fruits.setdefault('kiwis', 11)) print(fruits) fromkeys() \u65b9\u6cd5\u4ece\u5217\u8868\u521b\u5efa\u4e00\u4e2a\u65b0\u5b57\u5178\u3002 \u5982\u679c\u5b58\u5728\u952e\uff0c\u5219 setdefault() \u65b9\u6cd5\u5c06\u8fd4\u56de\u4e00\u4e2a\u503c\u3002 \u5426\u5219\uff0c\u5b83\u5c06\u63d2\u5165\u5177\u6709\u6307\u5b9a\u9ed8\u8ba4\u503c\u7684\u952e\u5e76\u8fd4\u56de\u8be5\u503c\u3002 1 basket = ('oranges', 'pears', 'apples', 'bananas') \u6211\u4eec\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32\u5217\u8868\u3002 \u4ece\u8be5\u5217\u8868\u4e2d\u5c06\u6784\u5efa\u65b0\u7684\u5b57\u5178\u3002 1 fruits = {}.fromkeys(basket, 0) fromkeys() \u65b9\u6cd5\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8bcd\u5178\uff0c\u5217\u8868\u9879\u5c06\u4f5c\u4e3a\u5173\u952e\u5b57\u3002 \u6bcf\u4e2a\u952e\u90fd\u5c06\u521d\u59cb\u5316\u4e3a 0\u3002\u8bf7\u6ce8\u610f fromkeys() \u65b9\u6cd5\u662f\u4e00\u4e2a\u7c7b\u65b9\u6cd5\uff0c\u9700\u8981\u8c03\u7528\u8be5\u7c7b\u540d\uff0c\u5728\u672c\u4f8b\u4e2d\u4e3a{}\u3002 1 2 3 fruits['oranges'] = 12 fruits['pears'] = 8 fruits['apples'] = 4 \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5411 fruits \u5b57\u5178\u6dfb\u52a0\u4e00\u4e9b\u503c\u3002 1 2 print(fruits.setdefault('oranges', 11)) print(fruits.setdefault('kiwis', 11)) \u7b2c\u4e00\u884c\u5c06 12 \u6253\u5370\u5230\u7ec8\u7aef\u3002 'oranges' \u952e\u5b58\u5728\u4e8e\u8bcd\u5178\u4e2d\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8be5\u65b9\u6cd5\u5c06\u8fd4\u56de\u5176\u503c\u3002 \u5728\u7b2c\u4e8c\u79cd\u60c5\u51b5\u4e0b\uff0c\u952e\u5c1a\u4e0d\u5b58\u5728\u3002 \u4e00\u5bf9\u65b0\u7684 'kiwis': 11 \u88ab\u63d2\u5165\u5b57\u5178\u3002 \u503c 11 \u88ab\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 2 3 4 5 $ ./fruits.py {'bananas': 0, 'pears': 0, 'oranges': 0, 'apples': 0} 12 11 {'kiwis': 11, 'bananas': 0, 'pears': 8, 'oranges': 12, 'apples': 4} \u5f53\u542f\u52a8 fruits.py \u811a\u672c\u65f6\uff0c\u6211\u4eec\u4f1a\u6536\u5230\u6b64\u8f93\u51fa\u3002 Python \u5b57\u5178\u66f4\u65b0\u65b9\u6cd5 \u00b6 \u4e0b\u4e00\u4e2a\u4ee3\u7801\u793a\u4f8b\u6f14\u793a\u5982\u4f55\u4f7f\u7528 update() \u65b9\u6cd5\u6dfb\u52a0\u4e24\u4e2a Python \u5b57\u5178\u3002 domains.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python # domains.py domains = { \"de\": \"Germany\", \"sk\": \"Slovakia\", \"hu\": \"Hungary\"} domains2 = { \"us\": \"United States\", \"no\": \"Norway\" } domains.update(domains2) print(domains) \u4e24\u4e2a\u5b57\u5178\u901a\u8fc7 update() \u65b9\u6cd5\u7ed3\u5408\u5728\u4e00\u8d77\u3002 1 domains.update(domains2) \u4f7f\u7528 update() \u65b9\u6cd5\u5c06 domains2 \u5b57\u5178\u6dfb\u52a0\u5230\u57df\u5b57\u5178\u4e2d\u3002 1 2 3 $ ./domains.py {'sk': 'Slovakia', 'de': 'Germany', 'no': 'Norway', 'us': 'United States', 'hu': 'Hungary'} \u7ed3\u679c\u663e\u793a\u6240\u6709\u503c\u3002 Python \u4ece\u5b57\u5178\u4e2d\u5220\u9664\u9879\u76ee \u00b6 \u73b0\u5728\u6211\u4eec\u5c55\u793a\u5982\u4f55\u4ece\u5b57\u5178\u4e2d\u5220\u9664\u4e00\u5bf9\u3002 removing.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/usr/bin/env python # removing.py items = { \"coins\": 7, \"pens\": 3, \"cups\": 2, \"bags\": 1, \"bottles\": 4, \"books\": 5 } print(items) item = items.pop(\"coins\") print(\"Item having value {0} was removed\".format(item)) print(items) del items[\"bottles\"] print(items) items.clear() print(items) \u9879\u76ee\u5b57\u5178\u6709\u516d\u4e2a\u952e\u503c\u5bf9\uff0c\u6211\u4eec\u5c06\u4ece\u8be5\u8bcd\u5178\u4e2d\u5220\u9664\u914d\u5bf9\u3002 1 2 item = items.pop(\"coins\") print(\"Item having value {0} was removed\".format(item)) pop() \u65b9\u6cd5\u5220\u9664\u5177\u6709\u6307\u5b9a\u952e\u7684\u4e00\u5bf9\uff1b \u5b83\u8fd4\u56de\u5df2\u5220\u9664\u952e\u7684\u503c\u3002 1 del items[\"bottles\"] del \u5173\u952e\u5b57\u4ece\u9879\u76ee\u5b57\u5178\u4e2d\u5220\u9664 \"bottles\": 4 \u5bf9\u3002 1 items.clear() clear() \u65b9\u6cd5\u6e05\u9664\u5b57\u5178\u4e2d\u7684\u6240\u6709\u9879\u76ee\u3002 1 2 3 4 5 6 $ ./removing.py {'bags': 1, 'pens': 3, 'coins': 7, 'books': 5, 'bottles': 4, 'cups': 2} Item having value 7 was removed {'bags': 1, 'pens': 3, 'books': 5, 'bottles': 4, 'cups': 2} {'bags': 1, 'pens': 3, 'books': 5, 'cups': 2} {} Python \u5b57\u5178\u952e\u548c\u503c \u00b6 Python \u5b57\u5178\u7531\u952e\u503c\u5bf9\u7ec4\u6210\u3002 keys() \u65b9\u6cd5\u4ece\u5b57\u5178\u4e2d\u8fd4\u56de\u952e\u5217\u8868\u3002 values() \u65b9\u6cd5\u521b\u5efa\u4e00\u4e2a\u503c\u5217\u8868\u3002 \u5e76\u4e14 items() \u65b9\u6cd5\u8fd4\u56de\u952e\u503c\u5143\u7ec4\u7684\u5217\u8868\u3002 keys_values.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python # keys_values.py domains = { \"de\": \"Germany\", \"sk\": \"Slovakia\", \"hu\": \"Hungary\", \"us\": \"United States\", \"no\": \"Norway\" } print(domains.keys()) print(domains.values()) print(domains.items()) print(\"de\" in domains) print(\"cz\" in domains) \u6211\u4eec\u6f14\u793a\u4e86\u4e0a\u8ff0\u65b9\u6cd5\u3002 \u6211\u4eec\u8fd8\u68c0\u67e5 in \u5173\u952e\u5b57\u662f\u5426\u5b58\u5728\u952e\u3002 1 print(domains.keys()) \u6211\u4eec\u4f7f\u7528 keys() \u65b9\u6cd5\u6253\u5370 domains \u8bcd\u5178\u7684\u952e\u5217\u8868\u3002 1 print(domains.values()) \u6211\u4eec\u4f7f\u7528 values() \u65b9\u6cd5\u6253\u5370 domains \u8bcd\u5178\u7684\u503c\u5217\u8868\u3002 1 print(domains.items()) \u6700\u540e\uff0c\u6211\u4eec\u4f7f\u7528 items() \u65b9\u6cd5\u6253\u5370\u57df\u5b57\u5178\u7684\u952e\u503c\u5143\u7ec4\u5217\u8868\u3002 1 2 print(\"de\" in domains) print(\"cz\" in domains) \u4f7f\u7528 in \u5173\u952e\u5b57\uff0c\u6211\u4eec\u68c0\u67e5 domains \u5b57\u5178\u4e2d\u662f\u5426\u5b58\u5728 \"de\" \u548c \"cz\" \u952e\u3002 \u8fd4\u56de\u503c\u4e3a True \u6216 False \u3002 1 2 3 4 5 6 7 $ ./keys_values.py ['sk', 'de', 'no', 'us', 'hu'] ['Slovakia', 'Germany', 'Norway', 'United States', 'Hungary'] [('sk', 'Slovakia'), ('de', 'Germany'), ('no', 'Norway'), ('us', 'United States'), ('hu', 'Hungary')] True False Python \u5b57\u5178\u5faa\u73af \u00b6 \u904d\u5386\u5b57\u5178\u662f\u5e38\u89c1\u7684\u7f16\u7a0b\u5de5\u4f5c\u3002 \u8fd9\u53ef\u4ee5\u901a\u8fc7 for \u5173\u952e\u5b57\u5b8c\u6210\u3002 looping.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python # looping.py domains = { \"de\": \"Germany\", \"sk\": \"Slovakia\", \"hu\": \"Hungary\", \"us\": \"United States\", \"no\": \"Norway\" } for key in domains: print(key) for val in domains.values(): print(val) for k, v in domains.items(): print(\": \".join((k, v))) \u5728\u8be5\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u904d\u5386 domains \u5b57\u5178\u4ee5\u6253\u5370\u952e\uff0c\u503c\u4ee5\u53ca\u5b57\u5178\u7684\u952e\u548c\u503c\u3002 1 2 for key in domains: print(key) \u6b64\u5faa\u73af\u5c06\u6253\u5370\u5b57\u5178\u7684\u6240\u6709\u952e\u3002 1 2 for val in domains.values(): print(val) \u7b2c\u4e8c\u4e2a\u5faa\u73af\u6253\u5370\u5b57\u5178\u7684\u6240\u6709\u503c\u3002 1 2 for k, v in domains.items(): print(\": \".join((k, v))) \u5728\u7b2c\u4e09\u4e2a\u5faa\u73af\u4e2d\uff0c\u5c06\u6253\u5370\u6240\u6709\u952e\u548c\u503c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 $ ./looping.py sk de no us hu Slovakia Germany Norway United States Hungary sk: Slovakia de: Germany no: Norway us: United States hu: Hungary Python \u5b57\u5178\u6210\u5458\u6027\u6d4b\u8bd5 \u00b6 \u4f7f\u7528 in \u548c not in \u8fd0\u7b97\u7b26\uff0c\u6211\u4eec\u53ef\u4ee5\u68c0\u67e5\u5b57\u5178\u4e2d\u662f\u5426\u5b58\u5728\u952e\u3002 membership.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python # membership.py domains = { \"de\": \"Germany\", \"sk\": \"Slovakia\", \"hu\": \"Hungary\", \"us\": \"United States\", \"no\": \"Norway\" } key = \"sk\" if key in domains: print(\"{0} is in the dictionary\".format(domains[key])) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 in \u8fd0\u7b97\u7b26\u68c0\u67e5\u56fd\u5bb6/\u5730\u533a\u662f\u5426\u5728\u5b57\u5178\u4e2d\u3002 Python \u5b57\u5178\u6392\u5e8f \u00b6 Python \u5b57\u5178\u662f\u65e0\u5e8f\u7684\uff0c\u8fd9\u4e5f\u610f\u5473\u7740\u5b83\u4eec\u4e0d\u80fd\u50cf Python \u5217\u8868\u90a3\u6837\u6392\u5e8f\uff0c\u7a0b\u5e8f\u5458\u53ef\u4ee5\u521b\u5efa Python \u5b57\u5178\u7684\u6392\u5e8f\u8868\u793a\u5f62\u5f0f\u3002 \u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c55\u793a\u4e86\u51e0\u79cd\u521b\u5efa\u6392\u5e8f\u8f93\u51fa\u7684\u65b9\u6cd5\u3002 \u7a0b\u5e8f\u5458\u53ef\u80fd\u5e0c\u671b\u4ee5\u6b63\u5e38\u6216\u76f8\u53cd\u7684\u987a\u5e8f\u5bf9\u6570\u636e\u8fdb\u884c\u6392\u5e8f\u3002 \u4ed6\u4eec\u53ef\u4ee5\u6309\u952e\u6216\u6309\u503c\u5bf9\u6570\u636e\u8fdb\u884c\u6392\u5e8f\u3002 simple_sort.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python # simple_sort.py items = { \"coins\": 7, \"pens\": 3, \"cups\": 2, \"bags\": 1, \"bottles\": 4, \"books\": 5 } kitems = list(items.keys()) kitems.sort() for k in kitems: print(\": \".join((k, str(items[k])))) \u7b2c\u4e00\u4e2a\u793a\u4f8b\u63d0\u4f9b\u4e86\u6700\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u4ee5\u6309\u952e\u5bf9\u6570\u636e\u8fdb\u884c\u6392\u5e8f\u3002 1 2 kitems = items.keys() kitems.sort() \u4ece\u5b57\u5178\u4e2d\u83b7\u5f97\u952e\u5217\u8868\u3002 \u8be5\u5217\u8868\u4f7f\u7528 sort() \u65b9\u6cd5\u6392\u5e8f\u3002 1 2 for k in kitems: print(\": \".join((k, str(items[k])))) \u5728\u5faa\u73af\u4e2d\uff0c\u6211\u4eec\u4ece\u5b57\u5178\u4e2d\u6253\u5370\u6392\u5e8f\u7684\u952e\u4ee5\u53ca\u5b83\u4eec\u7684\u503c\u3002 1 2 3 4 5 6 7 $ ./simple_sort.py bags: 1 books: 5 bottles: 4 coins: 7 cups: 2 pens: 3 \u9879\u76ee\u5b57\u5178\u6309\u5176\u952e\u6392\u5e8f\u3002 \u5185\u7f6e\u7684 sorted() \u529f\u80fd\u53ef\u4ee5\u5b8c\u6210\u66f4\u6709\u6548\u7684\u5206\u7c7b\u3002 sorting.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/env python # sorting.py items = { \"coins\": 7, \"pens\": 3, \"cups\": 2, \"bags\": 1, \"bottles\": 4, \"books\": 5 } for key in sorted(items.keys()): print(\"%{0}: {1}\".format(key, items[key])) print(\"###############\") for key in sorted(items.keys(), reverse=True): print(\"{0}: {1}\".format(key, items[key])) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 sorted() \u529f\u80fd\u6309\u5176\u952e\u5347\u5e8f\u548c\u964d\u5e8f\u6253\u5370\u6392\u5e8f\u7684\u6570\u636e\u3002 1 2 for key in sorted(items.keys()): print(\"%{0}: {1}\".format(key, items[key])) \u5728\u6b64 for \u5faa\u73af\u4e2d\uff0c\u6211\u4eec\u6253\u5370\u6309\u5347\u5e8f\u6392\u5e8f\u7684\u5bf9\u3002 iteritems() \u51fd\u6570\u5728\u5b57\u5178\u7684\uff08\u952e\uff0c\u503c\uff09\u5bf9\u4e0a\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\u3002 1 2 for key in sorted(items.keys(), reverse=True): print(\"{0}: {1}\".format(key, items[key])) \u5728\u7b2c\u4e8c\u4e2a for \u5faa\u73af\u4e2d\uff0c\u6570\u636e\u6309\u964d\u5e8f\u6392\u5e8f\u3002 \u8ba2\u5355\u7c7b\u578b\u7531 reverse \u53c2\u6570\u63a7\u5236\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 $ ./sorting.py bags: 1 books: 5 bottles: 4 coins: 7 cups: 2 pens: 3 ############### pens: 3 cups: 2 coins: 7 bottles: 4 books: 5 bags: 1 sorting.py \u811a\u672c\u7684\u8f93\u51fa\u3002 \u5728\u4e0b\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u6309\u9879\u76ee\u7684\u503c\u5bf9\u9879\u76ee\u8fdb\u884c\u6392\u5e8f\u3002 sorting2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/env python # sorting2.py items = { \"coins\": 7, \"pens\": 3, \"cups\": 2, \"bags\": 1, \"bottles\": 4, \"books\": 5 } for key, value in sorted(items.items(), key=lambda pair: pair[1]): print(\"{0}: {1}\".format(key, value)) print(\"###############\") for key, value in sorted(items.items(), key=lambda pair: pair[1], reverse=True): print(\"{0}: {1}\".format(key, value)) \u8be5\u793a\u4f8b\u6309\u503c\u7684\u5347\u5e8f\u548c\u964d\u5e8f\u6253\u5370\u6570\u636e\u3002 1 2 for key, value in sorted(items.iteritems(), key=lambda (k,v): (v,k)): \u5b57\u5178\u5bf9\u6309\u5176\u503c\u6392\u5e8f\u5e76\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 key \u53c2\u6570\u5177\u6709\u4e00\u4e2a\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u6307\u793a\u5982\u4f55\u5bf9\u6570\u636e\u8fdb\u884c\u6392\u5e8f\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 $ ./sorting2.py bags: 1 cups: 2 pens: 3 bottles: 4 books: 5 coins: 7 ############### coins: 7 books: 5 bottles: 4 pens: 3 cups: 2 bags: 1 \u4ece\u8f93\u51fa\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u6b21\u6309\u5b83\u4eec\u7684\u503c\u6392\u5e8f\u3002","title":"Python \u5b57\u5178"},{"location":"pages/python/pytutorial/python-dictionaries/#Python-\u5b57\u5178","text":"Python \u5b57\u5178\u662f\u952e-\u503c\u5bf9\u7684\u5bb9\u5668\u3002 \u5b83\u662f\u53ef\u53d8\u7684\uff0c\u53ef\u4ee5\u5305\u542b\u6df7\u5408\u7c7b\u578b\uff0c\u5b57\u5178\u662f\u65e0\u5e8f\u96c6\u5408\u3002 Python \u8bcd\u5178\u5728\u5176\u4ed6\u8bed\u8a00\u4e2d\u79f0\u4e3a\u5173\u8054\u6570\u7ec4\u6216\u54c8\u5e0c\u8868\u3002 \u5b57\u5178\u4e2d\u7684\u952e\u5fc5\u987b\u662f\u4e0d\u53ef\u53d8\u7684\u5bf9\u8c61\uff0c\u4f8b\u5982\u5b57\u7b26\u4e32\u6216\u6570\u5b57\uff0c\u5b83\u4eec\u5728\u5b57\u5178\u4e2d\u4e5f\u5fc5\u987b\u662f\u552f\u4e00\u7684\u3002","title":"Python \u5b57\u5178"},{"location":"pages/python/pytutorial/python-dictionaries/#Python-\u5b57\u5178\u521b\u5efa","text":"\u9996\u5148\uff0c\u6211\u4eec\u5c55\u793a\u5982\u4f55\u521b\u5efa Python \u5b57\u5178\u3002 create_dict.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/usr/bin/env python # create_dict.py weekend = { \"Sun\": \"Sunday\", \"Mon\": \"Monday\" } vals = dict(one=1, two=2) capitals = {} capitals[\"svk\"] = \"Bratislava\" capitals[\"deu\"] = \"Berlin\" capitals[\"dnk\"] = \"Copenhagen\" d = { i: object() for i in range(4) } print(weekend) print(vals) print(capitals) print(d) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4ee5\u56db\u79cd\u4e0d\u540c\u65b9\u5f0f\u521b\u5efa\u56db\u4e2a\u5b57\u5178\u3002 \u7a0d\u540e\uff0c\u6211\u4eec\u5c06\u8fd9\u4e9b\u8bcd\u5178\u7684\u5185\u5bb9\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 weekend = { \"Sun\": \"Sunday\", \"Mon\": \"Monday\" } \u6211\u4eec\u4f7f\u7528\u5b57\u5178\u6587\u5b57\u8868\u793a\u6cd5\u521b\u5efa\u5468\u672b\u5b57\u5178\u3002 \u952e\u503c\u5bf9\u7528\u5927\u62ec\u53f7\u62ec\u8d77\u6765\u3002 \u4e24\u5bf9\u4e4b\u95f4\u7528\u9017\u53f7\u5206\u9694\u3002 \u4e00\u5bf9\u7684\u7b2c\u4e00\u4e2a\u503c\u662f\u952e\uff0c\u540e\u8ddf\u4e00\u4e2a\u5192\u53f7\u548c\u4e00\u4e2a\u503c\u3002 \"Sun\" \u5b57\u7b26\u4e32\u662f\u952e\uff0c \"Sunday\" \u5b57\u7b26\u4e32\u662f\u503c\u3002 1 vals = dict(one=1, two=2) \u53ef\u4ee5\u4f7f\u7528 dict() \u529f\u80fd\u521b\u5efa\u5b57\u5178\u3002 1 2 3 4 capitals = {} capitals[\"svk\"] = \"Bratislava\" capitals[\"deu\"] = \"Berlin\" capitals[\"dnk\"] = \"Copenhagen\" \u7b2c\u4e09\u79cd\u65b9\u6cd5\u662f\u521b\u5efa\u4e00\u4e2a\u7a7a\u7684\u5927\u5199\u5b57\u5178\u3002 \u4e09\u5bf9\u5c06\u6dfb\u52a0\u5230\u8bcd\u5178\u4e2d\u3002 \u952e\u4f4d\u4e8e\u65b9\u62ec\u53f7\u5185\uff0c\u503c\u4f4d\u4e8e\u5206\u914d\u7684\u53f3\u4fa7\u3002 1 d = { i: object() for i in range(4) } \u4f7f\u7528\u5b57\u5178\u63a8\u5bfc\u5f0f\u6765\u521b\u5efa\u5b57\u5178\u3002 \u7406\u89e3\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\u3002 \u7b2c\u4e00\u90e8\u5206\u662f i: object() \u8868\u8fbe\u5f0f\uff0c\u8be5\u8868\u8fbe\u5f0f\u5728\u5faa\u73af\u7684\u6bcf\u4e2a\u5faa\u73af\u4e2d\u6267\u884c\u3002 \u7b2c\u4e8c\u90e8\u5206\u662f for i in range(4) \u5faa\u73af\u3002 \u5b57\u5178\u63a8\u5bfc\u5f0f\u5c06\u521b\u5efa\u5177\u6709\u56db\u5bf9\u7684\u5b57\u5178\uff0c\u5176\u4e2d\u952e\u4e3a\u6570\u5b57 0\u30011\u30012 \u548c 3\uff0c\u503c\u4e3a\u7b80\u5355\u5bf9\u8c61\u3002 1 2 3 4 5 6 $ ./create_dict.py {'Sun': 'Sunday', 'Mon': 'Monday'} {'two': 2, 'one': 1} {'svk': 'Bratislava', 'dnk': 'Copenhagen', 'deu': 'Berlin'} {0: <object object at 0xb76cb4a8>, 1: <object object at 0xb76cb4b0>, 2: <object object at 0xb76cb4b8>, 3: <object object at 0xb76cb4c0>} \u8fd9\u662f\u793a\u4f8b\u8f93\u51fa\u3002","title":"Python \u5b57\u5178\u521b\u5efa"},{"location":"pages/python/pytutorial/python-dictionaries/#Python-\u5b57\u5178\u63a8\u5bfc\u5f0f","text":"\u8bcd\u5178\u7406\u89e3\u662f\u4e00\u79cd\u57fa\u4e8e\u73b0\u6709\u8bcd\u5178\u521b\u5efa\u8bcd\u5178\u7684\u8bed\u6cd5\u7ed3\u6784\u3002 1 D = { expression for variable in sequence [if condition] } \u5b57\u5178\u63a8\u5bfc\u5f0f\u653e\u5728\u4e24\u4e2a\u5927\u62ec\u53f7\u4e4b\u95f4\uff1b \u5b83\u5305\u542b\u4e09\u4e2a\u90e8\u5206\uff1afor \u5faa\u73af\uff0c\u6761\u4ef6\u548c\u8868\u8fbe\u5f0f\u3002 \u5728 for \u5faa\u73af\u4e2d\uff0c\u6211\u4eec\u6d4f\u89c8\u4e86\u5b57\u5178\u3002 \u53ef\u9009\u7684 if \u6761\u4ef6\u6307\u5b9a\u5fc5\u987b\u6ee1\u8db3\u7684\u6761\u4ef6\u3002 \u6700\u540e\uff0c\u5bf9\u8868\u8fbe\u5f0f\u8fdb\u884c\u6c42\u503c\u3002 \u8be5\u8868\u8fbe\u5f0f\u4ece\u6ee1\u8db3\u6761\u4ef6\u7684\u8f93\u5165\u5e8f\u5217\u6210\u5458\u4e2d\u4ea7\u751f\u8f93\u51fa\u5b57\u5178\u7684\u5143\u7d20\u3002 comprehension.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python # comprehension.py capitals = { \"Bratislava\": 424207, \"Vilnius\": 556723, \"Lisbon\": 564657, \"Riga\": 713016, \"Jerusalem\": 780200, \"Warsaw\": 1711324, \"Budapest\": 1729040, \"Prague\": 1241664, \"Helsinki\": 596661, \"Yokyo\": 13189000, \"Madrid\": 3233527 } capitals2 = { key:val for key, val in capitals.items() if val < 1000000 } print(capitals2) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4ece\u73b0\u6709\u5b57\u5178\u521b\u5efa\u4e00\u4e2a\u65b0\u5b57\u5178\u3002 1 2 3 4 capitals = { \"Bratislava\": 424207, \"Vilnius\": 556723, \"Lisbon\": 564657, \"Riga\": 713016, \"Jerusalem\": 780200, \"Warsaw\": 1711324, \"Budapest\": 1729040, \"Prague\": 1241664, \"Helsinki\": 596661, \"Yokyo\": 13189000, \"Madrid\": 3233527 } \u6211\u4eec\u6709\u4e00\u4e2a\u5927\u5199\u7684\u5b57\u5178\u3002 \u5173\u952e\u5728\u4e8e\u8d44\u672c\uff0c\u800c\u4eba\u53e3\u5c31\u662f\u4ef7\u503c\u3002 1 capitals = { key:val for key, val in capitals.items() if val < 1000000 } \u4f7f\u7528\u5b57\u5178\u63a8\u5bfc\u5f0f\u6765\u521b\u5efa\u65b0\u5b57\u5178\u3002 \u5b83\u5305\u542b\u4eba\u53e3\u5c11\u4e8e\u4e00\u767e\u4e07\u7684\u9996\u90fd\u3002 1 2 3 $ ./comprehension.py {'Bratislava': 424207, 'Vilnius': 556723, 'Jerusalem': 780200, 'Riga': 713016, 'Lisbon': 564657, 'Helsinki': 596661} \u8fd9\u4e9b\u9996\u90fd\u7684\u4eba\u53e3\u5c11\u4e8e\u4e00\u767e\u4e07\u3002","title":"Python \u5b57\u5178\u63a8\u5bfc\u5f0f"},{"location":"pages/python/pytutorial/python-dictionaries/#Python-\u5b57\u5178\u7684\u57fa\u672c\u64cd\u4f5c","text":"\u4ee5\u4e0b\u793a\u4f8b\u663e\u793a\u4e86\u4f7f\u7528 Python \u8bcd\u5178\u7684\u4e00\u4e9b\u57fa\u672c\u64cd\u4f5c\u3002 basics.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env python # basics.py basket = { 'oranges': 12, 'pears': 5, 'apples': 4 } basket['bananas'] = 5 print(basket) print(\"There are {0} various items in the basket\".format(len(basket))) print(basket['apples']) basket['apples'] = 8 print(basket['apples']) print(basket.get('oranges', 'undefined')) print(basket.get('cherries', 'undefined')) \u6211\u4eec\u6709\u4e00\u4e2a\u88c5\u7740\u4e0d\u540c\u6c34\u679c\u7684\u7bee\u5b50\u3002 \u6211\u4eec\u5bf9\u8d2d\u7269\u7bee\u5b57\u5178\u6267\u884c\u4e00\u4e9b\u64cd\u4f5c\u3002 1 basket = { 'oranges': 12, 'pears': 5, 'apples': 4 } \u5c06\u521b\u5efa\u7bee\u5b50\u5b57\u5178\u3002 \u5b83\u6700\u521d\u5177\u6709\u4e09\u4e2a\u952e\u503c\u5bf9\u3002 1 basket['bananas'] = 5 \u5c06\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u914d\u5bf9\u3002 'bananas' \u5b57\u7b26\u4e32\u662f\u952e\uff0c 5 \u6574\u6570\u662f\u503c\u3002 1 print(\"There are {0} various items in the basket\".format(len(basket))) len() \u51fd\u6570\u7ed9\u51fa\u5b57\u5178\u4e2d\u7684\u5bf9\u6570\u3002 1 print(basket['apples']) \u201c\u82f9\u679c\u201d\u952e\u7684\u503c\u4f1a\u6253\u5370\u5230\u7ec8\u7aef\u4e0a\u3002 1 basket['apples'] = 8 \u201c\u82f9\u679c\u201d\u952e\u7684\u503c\u88ab\u4fee\u6539\u3002 \u8bbe\u7f6e\u4e3a\u6570\u5b57 8\u3002 1 print(basket.get('oranges', 'undefined')) get() \u65b9\u6cd5\u68c0\u7d22\u6307\u5b9a\u952e\u7684\u503c\u3002 \u5982\u679c\u6ca1\u6709\u8fd9\u6837\u7684\u952e\uff0c\u5219\u8fd4\u56de\u8be5\u65b9\u6cd5\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u3002 1 print(basket.get('cherries', 'undefined')) \u8be5\u884c\u8fd4\u56de\u201c\u672a\u5b9a\u4e49\u201d\u3002 \u7bee\u5b50\u91cc\u6ca1\u6709\u6a31\u6843\u3002 1 2 3 4 5 6 7 $ ./basics.py {'bananas': 5, 'pears': 5, 'oranges': 12, 'apples': 4} There are 4 various items in the basket 4 8 12 undefined \u8fd9\u662f\u793a\u4f8b\u8f93\u51fa\u3002","title":"Python \u5b57\u5178\u7684\u57fa\u672c\u64cd\u4f5c"},{"location":"pages/python/pytutorial/python-dictionaries/#Python-\u5b57\u5178fromkeys\u548csetdefault","text":"\u4e0b\u4e00\u4e2a\u793a\u4f8b\u4ecb\u7ecd\u4e86\u4e24\u79cd\u5b57\u5178\u65b9\u6cd5\uff1a fromkeys() \u548c setdefault() \u3002 fruits.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env python # fruits.py basket = ('oranges', 'pears', 'apples', 'bananas') fruits = {}.fromkeys(basket, 0) print(fruits) fruits['oranges'] = 12 fruits['pears'] = 8 fruits['apples'] = 4 print(fruits.setdefault('oranges', 11)) print(fruits.setdefault('kiwis', 11)) print(fruits) fromkeys() \u65b9\u6cd5\u4ece\u5217\u8868\u521b\u5efa\u4e00\u4e2a\u65b0\u5b57\u5178\u3002 \u5982\u679c\u5b58\u5728\u952e\uff0c\u5219 setdefault() \u65b9\u6cd5\u5c06\u8fd4\u56de\u4e00\u4e2a\u503c\u3002 \u5426\u5219\uff0c\u5b83\u5c06\u63d2\u5165\u5177\u6709\u6307\u5b9a\u9ed8\u8ba4\u503c\u7684\u952e\u5e76\u8fd4\u56de\u8be5\u503c\u3002 1 basket = ('oranges', 'pears', 'apples', 'bananas') \u6211\u4eec\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32\u5217\u8868\u3002 \u4ece\u8be5\u5217\u8868\u4e2d\u5c06\u6784\u5efa\u65b0\u7684\u5b57\u5178\u3002 1 fruits = {}.fromkeys(basket, 0) fromkeys() \u65b9\u6cd5\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8bcd\u5178\uff0c\u5217\u8868\u9879\u5c06\u4f5c\u4e3a\u5173\u952e\u5b57\u3002 \u6bcf\u4e2a\u952e\u90fd\u5c06\u521d\u59cb\u5316\u4e3a 0\u3002\u8bf7\u6ce8\u610f fromkeys() \u65b9\u6cd5\u662f\u4e00\u4e2a\u7c7b\u65b9\u6cd5\uff0c\u9700\u8981\u8c03\u7528\u8be5\u7c7b\u540d\uff0c\u5728\u672c\u4f8b\u4e2d\u4e3a{}\u3002 1 2 3 fruits['oranges'] = 12 fruits['pears'] = 8 fruits['apples'] = 4 \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5411 fruits \u5b57\u5178\u6dfb\u52a0\u4e00\u4e9b\u503c\u3002 1 2 print(fruits.setdefault('oranges', 11)) print(fruits.setdefault('kiwis', 11)) \u7b2c\u4e00\u884c\u5c06 12 \u6253\u5370\u5230\u7ec8\u7aef\u3002 'oranges' \u952e\u5b58\u5728\u4e8e\u8bcd\u5178\u4e2d\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8be5\u65b9\u6cd5\u5c06\u8fd4\u56de\u5176\u503c\u3002 \u5728\u7b2c\u4e8c\u79cd\u60c5\u51b5\u4e0b\uff0c\u952e\u5c1a\u4e0d\u5b58\u5728\u3002 \u4e00\u5bf9\u65b0\u7684 'kiwis': 11 \u88ab\u63d2\u5165\u5b57\u5178\u3002 \u503c 11 \u88ab\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 2 3 4 5 $ ./fruits.py {'bananas': 0, 'pears': 0, 'oranges': 0, 'apples': 0} 12 11 {'kiwis': 11, 'bananas': 0, 'pears': 8, 'oranges': 12, 'apples': 4} \u5f53\u542f\u52a8 fruits.py \u811a\u672c\u65f6\uff0c\u6211\u4eec\u4f1a\u6536\u5230\u6b64\u8f93\u51fa\u3002","title":"Python \u5b57\u5178fromkeys\u548csetdefault"},{"location":"pages/python/pytutorial/python-dictionaries/#Python-\u5b57\u5178\u66f4\u65b0\u65b9\u6cd5","text":"\u4e0b\u4e00\u4e2a\u4ee3\u7801\u793a\u4f8b\u6f14\u793a\u5982\u4f55\u4f7f\u7528 update() \u65b9\u6cd5\u6dfb\u52a0\u4e24\u4e2a Python \u5b57\u5178\u3002 domains.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python # domains.py domains = { \"de\": \"Germany\", \"sk\": \"Slovakia\", \"hu\": \"Hungary\"} domains2 = { \"us\": \"United States\", \"no\": \"Norway\" } domains.update(domains2) print(domains) \u4e24\u4e2a\u5b57\u5178\u901a\u8fc7 update() \u65b9\u6cd5\u7ed3\u5408\u5728\u4e00\u8d77\u3002 1 domains.update(domains2) \u4f7f\u7528 update() \u65b9\u6cd5\u5c06 domains2 \u5b57\u5178\u6dfb\u52a0\u5230\u57df\u5b57\u5178\u4e2d\u3002 1 2 3 $ ./domains.py {'sk': 'Slovakia', 'de': 'Germany', 'no': 'Norway', 'us': 'United States', 'hu': 'Hungary'} \u7ed3\u679c\u663e\u793a\u6240\u6709\u503c\u3002","title":"Python \u5b57\u5178\u66f4\u65b0\u65b9\u6cd5"},{"location":"pages/python/pytutorial/python-dictionaries/#Python-\u4ece\u5b57\u5178\u4e2d\u5220\u9664\u9879\u76ee","text":"\u73b0\u5728\u6211\u4eec\u5c55\u793a\u5982\u4f55\u4ece\u5b57\u5178\u4e2d\u5220\u9664\u4e00\u5bf9\u3002 removing.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/usr/bin/env python # removing.py items = { \"coins\": 7, \"pens\": 3, \"cups\": 2, \"bags\": 1, \"bottles\": 4, \"books\": 5 } print(items) item = items.pop(\"coins\") print(\"Item having value {0} was removed\".format(item)) print(items) del items[\"bottles\"] print(items) items.clear() print(items) \u9879\u76ee\u5b57\u5178\u6709\u516d\u4e2a\u952e\u503c\u5bf9\uff0c\u6211\u4eec\u5c06\u4ece\u8be5\u8bcd\u5178\u4e2d\u5220\u9664\u914d\u5bf9\u3002 1 2 item = items.pop(\"coins\") print(\"Item having value {0} was removed\".format(item)) pop() \u65b9\u6cd5\u5220\u9664\u5177\u6709\u6307\u5b9a\u952e\u7684\u4e00\u5bf9\uff1b \u5b83\u8fd4\u56de\u5df2\u5220\u9664\u952e\u7684\u503c\u3002 1 del items[\"bottles\"] del \u5173\u952e\u5b57\u4ece\u9879\u76ee\u5b57\u5178\u4e2d\u5220\u9664 \"bottles\": 4 \u5bf9\u3002 1 items.clear() clear() \u65b9\u6cd5\u6e05\u9664\u5b57\u5178\u4e2d\u7684\u6240\u6709\u9879\u76ee\u3002 1 2 3 4 5 6 $ ./removing.py {'bags': 1, 'pens': 3, 'coins': 7, 'books': 5, 'bottles': 4, 'cups': 2} Item having value 7 was removed {'bags': 1, 'pens': 3, 'books': 5, 'bottles': 4, 'cups': 2} {'bags': 1, 'pens': 3, 'books': 5, 'cups': 2} {}","title":"Python \u4ece\u5b57\u5178\u4e2d\u5220\u9664\u9879\u76ee"},{"location":"pages/python/pytutorial/python-dictionaries/#Python-\u5b57\u5178\u952e\u548c\u503c","text":"Python \u5b57\u5178\u7531\u952e\u503c\u5bf9\u7ec4\u6210\u3002 keys() \u65b9\u6cd5\u4ece\u5b57\u5178\u4e2d\u8fd4\u56de\u952e\u5217\u8868\u3002 values() \u65b9\u6cd5\u521b\u5efa\u4e00\u4e2a\u503c\u5217\u8868\u3002 \u5e76\u4e14 items() \u65b9\u6cd5\u8fd4\u56de\u952e\u503c\u5143\u7ec4\u7684\u5217\u8868\u3002 keys_values.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python # keys_values.py domains = { \"de\": \"Germany\", \"sk\": \"Slovakia\", \"hu\": \"Hungary\", \"us\": \"United States\", \"no\": \"Norway\" } print(domains.keys()) print(domains.values()) print(domains.items()) print(\"de\" in domains) print(\"cz\" in domains) \u6211\u4eec\u6f14\u793a\u4e86\u4e0a\u8ff0\u65b9\u6cd5\u3002 \u6211\u4eec\u8fd8\u68c0\u67e5 in \u5173\u952e\u5b57\u662f\u5426\u5b58\u5728\u952e\u3002 1 print(domains.keys()) \u6211\u4eec\u4f7f\u7528 keys() \u65b9\u6cd5\u6253\u5370 domains \u8bcd\u5178\u7684\u952e\u5217\u8868\u3002 1 print(domains.values()) \u6211\u4eec\u4f7f\u7528 values() \u65b9\u6cd5\u6253\u5370 domains \u8bcd\u5178\u7684\u503c\u5217\u8868\u3002 1 print(domains.items()) \u6700\u540e\uff0c\u6211\u4eec\u4f7f\u7528 items() \u65b9\u6cd5\u6253\u5370\u57df\u5b57\u5178\u7684\u952e\u503c\u5143\u7ec4\u5217\u8868\u3002 1 2 print(\"de\" in domains) print(\"cz\" in domains) \u4f7f\u7528 in \u5173\u952e\u5b57\uff0c\u6211\u4eec\u68c0\u67e5 domains \u5b57\u5178\u4e2d\u662f\u5426\u5b58\u5728 \"de\" \u548c \"cz\" \u952e\u3002 \u8fd4\u56de\u503c\u4e3a True \u6216 False \u3002 1 2 3 4 5 6 7 $ ./keys_values.py ['sk', 'de', 'no', 'us', 'hu'] ['Slovakia', 'Germany', 'Norway', 'United States', 'Hungary'] [('sk', 'Slovakia'), ('de', 'Germany'), ('no', 'Norway'), ('us', 'United States'), ('hu', 'Hungary')] True False","title":"Python \u5b57\u5178\u952e\u548c\u503c"},{"location":"pages/python/pytutorial/python-dictionaries/#Python-\u5b57\u5178\u5faa\u73af","text":"\u904d\u5386\u5b57\u5178\u662f\u5e38\u89c1\u7684\u7f16\u7a0b\u5de5\u4f5c\u3002 \u8fd9\u53ef\u4ee5\u901a\u8fc7 for \u5173\u952e\u5b57\u5b8c\u6210\u3002 looping.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python # looping.py domains = { \"de\": \"Germany\", \"sk\": \"Slovakia\", \"hu\": \"Hungary\", \"us\": \"United States\", \"no\": \"Norway\" } for key in domains: print(key) for val in domains.values(): print(val) for k, v in domains.items(): print(\": \".join((k, v))) \u5728\u8be5\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u904d\u5386 domains \u5b57\u5178\u4ee5\u6253\u5370\u952e\uff0c\u503c\u4ee5\u53ca\u5b57\u5178\u7684\u952e\u548c\u503c\u3002 1 2 for key in domains: print(key) \u6b64\u5faa\u73af\u5c06\u6253\u5370\u5b57\u5178\u7684\u6240\u6709\u952e\u3002 1 2 for val in domains.values(): print(val) \u7b2c\u4e8c\u4e2a\u5faa\u73af\u6253\u5370\u5b57\u5178\u7684\u6240\u6709\u503c\u3002 1 2 for k, v in domains.items(): print(\": \".join((k, v))) \u5728\u7b2c\u4e09\u4e2a\u5faa\u73af\u4e2d\uff0c\u5c06\u6253\u5370\u6240\u6709\u952e\u548c\u503c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 $ ./looping.py sk de no us hu Slovakia Germany Norway United States Hungary sk: Slovakia de: Germany no: Norway us: United States hu: Hungary","title":"Python \u5b57\u5178\u5faa\u73af"},{"location":"pages/python/pytutorial/python-dictionaries/#Python-\u5b57\u5178\u6210\u5458\u6027\u6d4b\u8bd5","text":"\u4f7f\u7528 in \u548c not in \u8fd0\u7b97\u7b26\uff0c\u6211\u4eec\u53ef\u4ee5\u68c0\u67e5\u5b57\u5178\u4e2d\u662f\u5426\u5b58\u5728\u952e\u3002 membership.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python # membership.py domains = { \"de\": \"Germany\", \"sk\": \"Slovakia\", \"hu\": \"Hungary\", \"us\": \"United States\", \"no\": \"Norway\" } key = \"sk\" if key in domains: print(\"{0} is in the dictionary\".format(domains[key])) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 in \u8fd0\u7b97\u7b26\u68c0\u67e5\u56fd\u5bb6/\u5730\u533a\u662f\u5426\u5728\u5b57\u5178\u4e2d\u3002","title":"Python \u5b57\u5178\u6210\u5458\u6027\u6d4b\u8bd5"},{"location":"pages/python/pytutorial/python-dictionaries/#Python-\u5b57\u5178\u6392\u5e8f","text":"Python \u5b57\u5178\u662f\u65e0\u5e8f\u7684\uff0c\u8fd9\u4e5f\u610f\u5473\u7740\u5b83\u4eec\u4e0d\u80fd\u50cf Python \u5217\u8868\u90a3\u6837\u6392\u5e8f\uff0c\u7a0b\u5e8f\u5458\u53ef\u4ee5\u521b\u5efa Python \u5b57\u5178\u7684\u6392\u5e8f\u8868\u793a\u5f62\u5f0f\u3002 \u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c55\u793a\u4e86\u51e0\u79cd\u521b\u5efa\u6392\u5e8f\u8f93\u51fa\u7684\u65b9\u6cd5\u3002 \u7a0b\u5e8f\u5458\u53ef\u80fd\u5e0c\u671b\u4ee5\u6b63\u5e38\u6216\u76f8\u53cd\u7684\u987a\u5e8f\u5bf9\u6570\u636e\u8fdb\u884c\u6392\u5e8f\u3002 \u4ed6\u4eec\u53ef\u4ee5\u6309\u952e\u6216\u6309\u503c\u5bf9\u6570\u636e\u8fdb\u884c\u6392\u5e8f\u3002 simple_sort.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python # simple_sort.py items = { \"coins\": 7, \"pens\": 3, \"cups\": 2, \"bags\": 1, \"bottles\": 4, \"books\": 5 } kitems = list(items.keys()) kitems.sort() for k in kitems: print(\": \".join((k, str(items[k])))) \u7b2c\u4e00\u4e2a\u793a\u4f8b\u63d0\u4f9b\u4e86\u6700\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u4ee5\u6309\u952e\u5bf9\u6570\u636e\u8fdb\u884c\u6392\u5e8f\u3002 1 2 kitems = items.keys() kitems.sort() \u4ece\u5b57\u5178\u4e2d\u83b7\u5f97\u952e\u5217\u8868\u3002 \u8be5\u5217\u8868\u4f7f\u7528 sort() \u65b9\u6cd5\u6392\u5e8f\u3002 1 2 for k in kitems: print(\": \".join((k, str(items[k])))) \u5728\u5faa\u73af\u4e2d\uff0c\u6211\u4eec\u4ece\u5b57\u5178\u4e2d\u6253\u5370\u6392\u5e8f\u7684\u952e\u4ee5\u53ca\u5b83\u4eec\u7684\u503c\u3002 1 2 3 4 5 6 7 $ ./simple_sort.py bags: 1 books: 5 bottles: 4 coins: 7 cups: 2 pens: 3 \u9879\u76ee\u5b57\u5178\u6309\u5176\u952e\u6392\u5e8f\u3002 \u5185\u7f6e\u7684 sorted() \u529f\u80fd\u53ef\u4ee5\u5b8c\u6210\u66f4\u6709\u6548\u7684\u5206\u7c7b\u3002 sorting.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/env python # sorting.py items = { \"coins\": 7, \"pens\": 3, \"cups\": 2, \"bags\": 1, \"bottles\": 4, \"books\": 5 } for key in sorted(items.keys()): print(\"%{0}: {1}\".format(key, items[key])) print(\"###############\") for key in sorted(items.keys(), reverse=True): print(\"{0}: {1}\".format(key, items[key])) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 sorted() \u529f\u80fd\u6309\u5176\u952e\u5347\u5e8f\u548c\u964d\u5e8f\u6253\u5370\u6392\u5e8f\u7684\u6570\u636e\u3002 1 2 for key in sorted(items.keys()): print(\"%{0}: {1}\".format(key, items[key])) \u5728\u6b64 for \u5faa\u73af\u4e2d\uff0c\u6211\u4eec\u6253\u5370\u6309\u5347\u5e8f\u6392\u5e8f\u7684\u5bf9\u3002 iteritems() \u51fd\u6570\u5728\u5b57\u5178\u7684\uff08\u952e\uff0c\u503c\uff09\u5bf9\u4e0a\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\u3002 1 2 for key in sorted(items.keys(), reverse=True): print(\"{0}: {1}\".format(key, items[key])) \u5728\u7b2c\u4e8c\u4e2a for \u5faa\u73af\u4e2d\uff0c\u6570\u636e\u6309\u964d\u5e8f\u6392\u5e8f\u3002 \u8ba2\u5355\u7c7b\u578b\u7531 reverse \u53c2\u6570\u63a7\u5236\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 $ ./sorting.py bags: 1 books: 5 bottles: 4 coins: 7 cups: 2 pens: 3 ############### pens: 3 cups: 2 coins: 7 bottles: 4 books: 5 bags: 1 sorting.py \u811a\u672c\u7684\u8f93\u51fa\u3002 \u5728\u4e0b\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u6309\u9879\u76ee\u7684\u503c\u5bf9\u9879\u76ee\u8fdb\u884c\u6392\u5e8f\u3002 sorting2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/env python # sorting2.py items = { \"coins\": 7, \"pens\": 3, \"cups\": 2, \"bags\": 1, \"bottles\": 4, \"books\": 5 } for key, value in sorted(items.items(), key=lambda pair: pair[1]): print(\"{0}: {1}\".format(key, value)) print(\"###############\") for key, value in sorted(items.items(), key=lambda pair: pair[1], reverse=True): print(\"{0}: {1}\".format(key, value)) \u8be5\u793a\u4f8b\u6309\u503c\u7684\u5347\u5e8f\u548c\u964d\u5e8f\u6253\u5370\u6570\u636e\u3002 1 2 for key, value in sorted(items.iteritems(), key=lambda (k,v): (v,k)): \u5b57\u5178\u5bf9\u6309\u5176\u503c\u6392\u5e8f\u5e76\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 key \u53c2\u6570\u5177\u6709\u4e00\u4e2a\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u6307\u793a\u5982\u4f55\u5bf9\u6570\u636e\u8fdb\u884c\u6392\u5e8f\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 $ ./sorting2.py bags: 1 cups: 2 pens: 3 bottles: 4 books: 5 coins: 7 ############### coins: 7 books: 5 bottles: 4 pens: 3 cups: 2 bags: 1 \u4ece\u8f93\u51fa\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u6b21\u6309\u5b83\u4eec\u7684\u503c\u6392\u5e8f\u3002","title":"Python \u5b57\u5178\u6392\u5e8f"},{"location":"pages/python/pytutorial/python-exceptions/","text":"Python \u5f02\u5e38 \u00b6 \u672c\u6587\u4ecb\u7ecd Python \u4e2d\u7684\u5f02\u5e38 \uff0c\u6267\u884c\u671f\u95f4\u68c0\u6d4b\u5230\u7684\u9519\u8bef\u79f0\u4e3a\u5f02\u5e38\u3002 \u5728\u6267\u884c\u5e94\u7528\u671f\u95f4\uff0c\u8bb8\u591a\u4e8b\u60c5\u53ef\u80fd\u51fa\u9519\u3002 \u78c1\u76d8\u53ef\u80fd\u5df2\u6ee1\uff0c\u6211\u4eec\u65e0\u6cd5\u4fdd\u5b58\u6587\u4ef6\u3002 Internet \u8fde\u63a5\u53ef\u80fd\u65ad\u5f00\uff0c\u6211\u4eec\u7684\u5e94\u7528\u5c1d\u8bd5\u8fde\u63a5\u5230\u7ad9\u70b9\u3002 \u6240\u6709\u8fd9\u4e9b\u90fd\u53ef\u80fd\u5bfc\u81f4\u6211\u4eec\u7684\u5e94\u7528\u5d29\u6e83\uff0c\u4e3a\u9632\u6b62\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u5fc5\u987b\u5e94\u5bf9\u53ef\u80fd\u53d1\u751f\u7684\u6240\u6709\u53ef\u80fd\u7684\u9519\u8bef\uff0c\u4e3a\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5f02\u5e38\u5904\u7406\u3002 \u5728 Python \u4e2d\u6355\u6349\u5f02\u5e38 \u00b6 \u5728 Python \u4e2d\uff0c\u6211\u4eec\u5177\u6709\u4ee5\u4e0b\u8bed\u6cd5\u6765\u5904\u7406\u5f02\u5e38\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 try: # do something except ValueError: # handle ValueError exception except (IndexError, ZeroDivisionError): # handle multiple exceptions # IndexError and ZeroDivisionError except: # handle all other exceptions finally: # cleanup resources \u6211\u4eec\u671f\u671b\u53d1\u751f\u5f02\u5e38\u7684\u4ee3\u7801\u5199\u5728 try \u5757\u4e2d\u3002 except \u5173\u952e\u5b57\u6355\u83b7\u7a0b\u5e8f\u4e2d\u6307\u5b9a\u7684\u6216\u5269\u4f59\u7684\u5f02\u5e38\u3002 \u59cb\u7ec8\u6267\u884c\u53ef\u9009\u7684 finally \u5757\uff1b \u5b83\u7528\u4e8e\u6e05\u9664\u8d44\u6e90\uff0c\u4f8b\u5982\u6253\u5f00\u7684\u6587\u4ef6\u6216\u6570\u636e\u5e93\u8fde\u63a5\u3002 ZeroDivisionError \u00b6 \u9664\u4ee5\u96f6\u662f\u4e0d\u53ef\u80fd\u7684\u3002 \u5982\u679c\u6211\u4eec\u5c1d\u8bd5\u6267\u884c\u6b64\u64cd\u4f5c\uff0c\u5219\u4f1a\u5f15\u53d1 ZeroDivisionError \u5e76\u4e2d\u65ad\u811a\u672c\u3002 \u6ce8\u610f: \u4e0b\u9762\u7684\u793a\u4f8b\u6f14\u793a\u4e86\u5f02\u5e38\u5728Python\u4e2d\u7684\u5de5\u4f5c\u65b9\u5f0f\u3002\u66f4\u76f4\u63a5\u7684\u65b9\u6cd5\u662f\u786e\u4fdd\u9664\u6570\u4e0d\u662f\u96f6\u800c\u4e0d\u662f\u6355\u83b7 ZeroDivisionError . zero_division.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python # zero_division.py def input_numbers(): a = float(input(\"Enter first number:\")) b = float(input(\"Enter second number:\")) return a, b x, y = input_numbers() print(f\"{x} / {y} is {x/y}\") \u5728\u6b64\u811a\u672c\u4e2d\uff0c\u6211\u4eec\u4ece\u63a7\u5236\u53f0\u83b7\u5f97\u4e24\u4e2a\u6570\u5b57\uff0c\u6211\u4eec\u5c06\u8fd9\u4e24\u4e2a\u6570\u76f8\u9664\u3002 \u5982\u679c\u7b2c\u4e8c\u4e2a\u6570\u5b57\u4e3a\u96f6\uff0c\u5219\u4f1a\u51fa\u73b0\u5f02\u5e38\u3002 1 2 3 4 5 6 Enter first number:3 Enter second number:0 Traceback (most recent call last): File \"C:/Users/Jano/PycharmProjects/Simple/simple.py\", line 14, in <module> print(f\"{x} / {y} is {x/y}\") ZeroDivisionError: float division by zero \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e24\u79cd\u65b9\u5f0f\u5904\u7406\u6b64\u95ee\u9898\u3002 zero_division2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #!/usr/bin/env python # zero_division2.py def input_numbers(): a = float(input(\"Enter first number:\")) b = float(input(\"Enter second number:\")) return a, b x, y = input_numbers() while True: if y != 0: print(f\"{x} / {y} is {x/y}\") break else: print(\"Cannot divide by zero\") x, y = input_numbers() \u9996\u5148\uff0c\u6211\u4eec\u4ec5\u68c0\u67e5 y \u7684\u503c\u4e0d\u4e3a\u96f6\u3002 \u5982\u679c y \u503c\u4e3a\u96f6\uff0c\u6211\u4eec\u5c06\u6253\u5370\u8b66\u544a\u6d88\u606f\u5e76\u518d\u6b21\u91cd\u590d\u8f93\u5165\u5468\u671f\u3002 \u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5904\u7406\u9519\u8bef\uff0c\u5e76\u4e14\u811a\u672c\u4e0d\u4f1a\u4e2d\u65ad\u3002 1 2 3 4 5 6 7 8 9 10 $ ./zero_division2.py Enter first number:4 Enter second number:0 Cannot divide by zero Enter first number:5 Enter second number:0 Cannot divide by zero Enter first number:5 Enter second number:6 5.0 / 6.0 is 0.8333333333333334 \u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528\u5f02\u5e38\u3002 zero_division3.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/usr/bin/env python # zerodivision3.py def input_numbers(): a = float(input(\"Enter first number:\")) b = float(input(\"Enter second number:\")) return a, b x, y = input_numbers() try: print(f\"{x} / {y} is {x/y}\") except ZeroDivisionError: print(\"Cannot divide by zero\") x, y = input_numbers() \u6211\u4eec\u5c06\u4ee3\u7801\u653e\u7f6e\u5728 try \u5173\u952e\u5b57\u4e4b\u540e\u6211\u4eec\u671f\u671b\u53d1\u751f\u5f02\u5e38\u7684\u4f4d\u7f6e\u3002 \u5982\u679c\u5f15\u53d1\u4e86 except \u5173\u952e\u5b57\uff0c\u5219\u6355\u83b7\u8be5\u5f02\u5e38\u3002 \u5f02\u5e38\u7c7b\u578b\u5728 except \u5173\u952e\u5b57\u4e4b\u540e\u6307\u5b9a\u3002 1 2 3 4 except ValueError: pass except (IOError, OSError): pass \u8981\u5904\u7406\u66f4\u591a\u7684\u5f02\u5e38\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u9664\u5173\u952e\u5b57\u4e4b\u5916\u7684\u66f4\u591a\u5f02\u5e38\uff0c\u4e5f\u53ef\u4ee5\u5c06\u5f02\u5e38\u540d\u79f0\u653e\u5728\u5143\u7ec4\u4e2d\u3002 ValueError \u00b6 \u5f53\u5185\u7f6e\u64cd\u4f5c\u6216\u51fd\u6570\u63a5\u6536\u5230\u7c7b\u578b\u6b63\u786e\u4f46\u503c\u4e0d\u5408\u9002\u7684\u81ea\u53d8\u91cf\u65f6\uff0c\u4f1a\u5f15\u53d1 ValueError \uff0c\u5e76\u4e14\u65e0\u6cd5\u901a\u8fc7\u66f4\u7cbe\u786e\u7684\u5f02\u5e38\u63cf\u8ff0\u8fd9\u79cd\u60c5\u51b5\u3002 value_error.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/usr/bin/env python # value_error.py def read_age(): age = int(input(\"Enter your age: \")) if age < 0 or age > 130: raise ValueError(\"Invalid age\") return age try: val = read_age() print(f\"Your age is {val}\") except ValueError as e: print(e) \u5728\u8be5\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u8bfb\u53d6\u5e74\u9f84\u4f5c\u4e3a\u7528\u6237\u8f93\u5165\u7684\u51fd\u6570\u3002 \u5f53\u7528\u6237\u63d0\u4f9b\u4e0d\u6b63\u786e\u7684\u503c\u65f6\uff0c\u6211\u4eec\u5c06\u5f15\u53d1 ValueError \u5f02\u5e38\u3002 1 2 3 4 if age < 0 or age > 130: raise ValueError(\"Invalid age\") return age \u8d1f\u5e74\u9f84\u662f\u6ca1\u6709\u9053\u7406\u7684\uff0c\u5728\u73b0\u4ee3\u6ca1\u6709\u8bb0\u5f55\u5230\u5e74\u9f84\u8d85\u8fc7 130 \u5c81\u7684\u4eba\u3002 Python \u591a\u4e2a\u5f02\u5e38 \u00b6 \u53ef\u4ee5\u5728\u4e00\u4e2a except \u5b50\u53e5\u4e2d\u6355\u83b7\u591a\u4e2a\u5f02\u5e38\u3002 multiple_exceptions.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python # multiple_exceptions.py import os try: os.mkdir('newdir') print('directory created') raise RuntimeError(\"Runtime error occurred\") except (FileExistsError, RuntimeError) as e: print(e) \u8be5\u4ee3\u7801\u793a\u4f8b\u5728\u4e00\u4e2a except \u8bed\u53e5\u4e2d\u6355\u83b7\u4e86\u4e24\u4e2a\u5f02\u5e38\uff1a FileExistsError \u548c RuntimeError \u3002 1 os.mkdir('newdir') \u4f7f\u7528 os.mkdir() \u65b9\u6cd5\u521b\u5efa\u4e00\u4e2a\u65b0\u76ee\u5f55\u3002 \u5982\u679c\u76ee\u5f55\u5df2\u7ecf\u5b58\u5728\uff0c\u5219\u89e6\u53d1 FileExistsError \u3002 1 raise RuntimeError(\"Runtime error occurred\") \u6211\u4eec\u4f7f\u7528 raise \u5173\u952e\u5b57\u624b\u52a8\u5f15\u53d1\u8fd0\u884c\u65f6\u5f02\u5e38\u3002 Python \u5f02\u5e38\u53c2\u6570 \u00b6 \u5f02\u5e38\u53ef\u4ee5\u5177\u6709\u5173\u8054\u7684\u503c\uff0c\u8be5\u503c\u6307\u793a\u9519\u8bef\u7684\u8be6\u7ec6\u539f\u56e0\u3002 \u8be5\u503c\u653e\u5728 as \u5173\u952e\u5b57\u4e4b\u540e\u3002 exception_as.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python # exception_argument.py try: a = (1, 2, 3, 4) print(a[5]) except IndexError as e: print(e) print(\"Class:\", e.__class__) \u4ece\u5f02\u5e38\u5bf9\u8c61\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u9519\u8bef\u6d88\u606f\u6216\u7c7b\u540d\u3002 1 2 3 $ ./exception_as.py tuple index out of range Class: <class 'IndexError'> Python \u5f02\u5e38\u5c42\u6b21\u7ed3\u6784 \u00b6 \u5f02\u5e38\u662f\u6309\u5c42\u6b21\u7ed3\u6784\u7ec4\u7ec7\u7684\uff0c\u5b83\u4eec\u662f\u6240\u6709\u5f02\u5e38\u7684\u7236\u7ea7 Exception \u3002 interrupt.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python # interrupt.py try: while True: pass except KeyboardInterrupt: print(\"Program interrupted\") \u811a\u672c\u5f00\u59cb\u5e76\u4e0d\u65ad\u5faa\u73af\u3002 \u5982\u679c\u6309 Ctrl + C \uff0c\u6211\u4eec\u5c06\u4e2d\u65ad\u5faa\u73af\u3002 \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u6355\u83b7\u4e86 KeyboardInterrupt \u5f02\u5e38\u3002 1 2 3 Exception BaseException KeyboardInterrupt \u8fd9\u662f KeyboardInterrupt \u5f02\u5e38\u7684\u5c42\u6b21\u7ed3\u6784\u3002 interrupt2.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python # interrupt2.py try: while True: pass except BaseException: print(\"Program interrupted\") \u8fd9\u4e2a\u4f8b\u5b50\u4e5f\u53ef\u4ee5\u3002 BaseException \u4e5f\u6355\u83b7\u952e\u76d8\u4e2d\u65ad\uff1b \u9664\u5176\u4ed6\u5f02\u5e38\u3002 \u4f46\u662f\uff0c\u8fd9\u4e0d\u662f\u4e00\u4e2a\u597d\u4e60\u60ef\u3002 \u6211\u4eec\u5e94\u8be5\u5728 except \u5b50\u53e5\u4e2d\u6355\u83b7\u7279\u5b9a\u7684\u5f02\u5e38\u3002 Python \u7528\u6237\u5b9a\u4e49\u7684\u5f02\u5e38 \u00b6 \u5982\u679c\u9700\u8981\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u81ea\u5df1\u7684\u5f02\u5e38\u3002 \u6211\u4eec\u901a\u8fc7\u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684\u5f02\u5e38\u7c7b\u6765\u505a\u5230\u8fd9\u4e00\u70b9\u3002 user_defined.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #!/usr/bin/env python # user_defined.py class BFoundEx(Exception): def __init__(self, value): self.par = value def __str__(self): return f\"BFoundEx: b character found at position {self.par}\" string = \"There are beautiful trees in the forest.\" pos = 0 for i in string: try: if i == 'b': raise BFoundEx(pos) pos = pos + 1 except BFoundEx as e: print(e) \u5728\u6211\u4eec\u7684\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u5f02\u5e38\u3002 \u5f02\u5e38\u662f\u4ece\u57fa\u7c7b Exception \u6d3e\u751f\u7684\u3002 \u5982\u679c\u5728\u5b57\u7b26\u4e32\u4e2d\u53d1\u73b0\u5b57\u6bcd b \u7684\u4efb\u4f55\u51fa\u73b0\uff0c\u6211\u4eec\u5c06 raise \u4f5c\u4e3a\u5f02\u5e38\u3002 1 2 $ ./user_defined.py 'BFoundEx: b character found at position 10' \u6e05\u7406 \u00b6 \u6709\u4e00\u4e2a finally \u5173\u952e\u5b57\uff0c\u59cb\u7ec8\u4f1a\u6267\u884c\u3002 \u4e0d\u7ba1\u662f\u5426\u5f15\u53d1\u5f02\u5e38\u3002 \u5b83\u901a\u5e38\u7528\u4e8e\u6e05\u7406\u7a0b\u5e8f\u4e2d\u7684\u8d44\u6e90\u3002 cleanup.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #!/usr/bin/env python # cleanup.py f = None try: f = open('data.txt', 'r') contents = f.readlines() for line in contents: print(line.rstrip()) except IOError: print('Error opening file') finally: if f: f.close() \u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c1d\u8bd5\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u3002 \u5982\u679c\u6211\u4eec\u65e0\u6cd5\u6253\u5f00\u6587\u4ef6\uff0c\u5219\u4f1a\u5f39\u51fa IOError \u3002 \u5982\u679c\u6211\u4eec\u6253\u5f00\u6587\u4ef6\uff0c\u6211\u4eec\u60f3\u5173\u95ed\u6587\u4ef6\u5904\u7406\u7a0b\u5e8f\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u4f7f\u7528 finally \u5173\u952e\u5b57\u3002 \u5728 finally \u5757\u4e2d\uff0c\u6211\u4eec\u68c0\u67e5\u6587\u4ef6\u662f\u5426\u5df2\u6253\u5f00\u3002 \u5982\u679c\u6253\u5f00\u4e86\uff0c\u6211\u4eec\u5c06\u5176\u5173\u95ed\u3002 \u5f53\u6211\u4eec\u4f7f\u7528\u6570\u636e\u5e93\u65f6\uff0c\u8fd9\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u7f16\u7a0b\u7ed3\u6784\u3002 \u5728\u90a3\u91cc\uff0c\u6211\u4eec\u7c7b\u4f3c\u5730\u6e05\u7406\u6253\u5f00\u7684\u6570\u636e\u5e93\u8fde\u63a5\u3002 \u5806\u6808\u8ddf\u8e2a \u00b6 \u5806\u6808\u8ddf\u8e2a\u663e\u793a\u4e86\u5f15\u53d1\u672a\u6355\u83b7\u7684\u5f02\u5e38\u65f6\u7684\u8c03\u7528\u5806\u6808\uff08\u81f3\u6b64\u4e3a\u6b62\u5df2\u8c03\u7528\u7684\u51fd\u6570\u5806\u6808\uff09\u3002 Python traceback \u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6807\u51c6\u63a5\u53e3\uff0c\u7528\u4e8e\u63d0\u53d6\uff0c\u683c\u5f0f\u5316\u548c\u6253\u5370 Python \u7a0b\u5e8f\u7684\u5806\u6808\u8ddf\u8e2a\u3002 \u5b83\u7cbe\u786e\u5730\u6a21\u4eff\u4e86 Python \u89e3\u91ca\u5668\u5728\u6253\u5370\u5806\u6808\u8ddf\u8e2a\u65f6\u7684\u884c\u4e3a\u3002 stacktrace_ex.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #!/usr/bin/env python # stacktrace_ex.py import traceback def myfun(): def myfun2(): try: 3 / 0 except ZeroDivisionError as e: print(e) print(\"Class:\", e.__class__) for line in traceback.format_stack(): print(line.strip()) myfun2() def test(): myfun() test() \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5728\u5d4c\u5957\u7684 myfun2 \u51fd\u6570\u4e2d\u5c06\u9664\u4ee5\u96f6\u7684\u5f02\u5e38\u3002 1 for line in traceback.format_stack(): format_stack() \u4ece\u5f53\u524d\u5806\u6808\u5e27\u4e2d\u63d0\u53d6\u539f\u59cb\u56de\u6eaf\u5e76\u5c06\u5176\u683c\u5f0f\u5316\u4e3a\u5143\u7ec4\u5217\u8868\u3002 \u6211\u4eec\u4f7f\u7528 for \u5faa\u73af\u904d\u5386\u5143\u7ec4\u5217\u8868\u3002 1 2 3 4 5 6 7 8 9 10 11 $ ./stacktrace_ex.py division by zero Class: <class 'ZeroDivisionError'> File \"C:/Users/Jano/PycharmProjects/Simple/simple.py\", line 30, in <module> test() File \"C:/Users/Jano/PycharmProjects/Simple/simple.py\", line 27, in test myfun() File \"C:/Users/Jano/PycharmProjects/Simple/simple.py\", line 23, in myfun myfun2() File \"C:/Users/Jano/PycharmProjects/Simple/simple.py\", line 20, in myfun2 for line in traceback.format_stack(): \u5728\u7a0b\u5e8f\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u8c03\u7528\u5806\u6808-\u5bfc\u81f4\u9519\u8bef\u7684\u88ab\u8c03\u7528\u51fd\u6570\u7684\u987a\u5e8f\u3002","title":"Python \u5f02\u5e38"},{"location":"pages/python/pytutorial/python-exceptions/#Python-\u5f02\u5e38","text":"\u672c\u6587\u4ecb\u7ecd Python \u4e2d\u7684\u5f02\u5e38 \uff0c\u6267\u884c\u671f\u95f4\u68c0\u6d4b\u5230\u7684\u9519\u8bef\u79f0\u4e3a\u5f02\u5e38\u3002 \u5728\u6267\u884c\u5e94\u7528\u671f\u95f4\uff0c\u8bb8\u591a\u4e8b\u60c5\u53ef\u80fd\u51fa\u9519\u3002 \u78c1\u76d8\u53ef\u80fd\u5df2\u6ee1\uff0c\u6211\u4eec\u65e0\u6cd5\u4fdd\u5b58\u6587\u4ef6\u3002 Internet \u8fde\u63a5\u53ef\u80fd\u65ad\u5f00\uff0c\u6211\u4eec\u7684\u5e94\u7528\u5c1d\u8bd5\u8fde\u63a5\u5230\u7ad9\u70b9\u3002 \u6240\u6709\u8fd9\u4e9b\u90fd\u53ef\u80fd\u5bfc\u81f4\u6211\u4eec\u7684\u5e94\u7528\u5d29\u6e83\uff0c\u4e3a\u9632\u6b62\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u5fc5\u987b\u5e94\u5bf9\u53ef\u80fd\u53d1\u751f\u7684\u6240\u6709\u53ef\u80fd\u7684\u9519\u8bef\uff0c\u4e3a\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5f02\u5e38\u5904\u7406\u3002","title":"Python \u5f02\u5e38"},{"location":"pages/python/pytutorial/python-exceptions/#\u5728-Python-\u4e2d\u6355\u6349\u5f02\u5e38","text":"\u5728 Python \u4e2d\uff0c\u6211\u4eec\u5177\u6709\u4ee5\u4e0b\u8bed\u6cd5\u6765\u5904\u7406\u5f02\u5e38\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 try: # do something except ValueError: # handle ValueError exception except (IndexError, ZeroDivisionError): # handle multiple exceptions # IndexError and ZeroDivisionError except: # handle all other exceptions finally: # cleanup resources \u6211\u4eec\u671f\u671b\u53d1\u751f\u5f02\u5e38\u7684\u4ee3\u7801\u5199\u5728 try \u5757\u4e2d\u3002 except \u5173\u952e\u5b57\u6355\u83b7\u7a0b\u5e8f\u4e2d\u6307\u5b9a\u7684\u6216\u5269\u4f59\u7684\u5f02\u5e38\u3002 \u59cb\u7ec8\u6267\u884c\u53ef\u9009\u7684 finally \u5757\uff1b \u5b83\u7528\u4e8e\u6e05\u9664\u8d44\u6e90\uff0c\u4f8b\u5982\u6253\u5f00\u7684\u6587\u4ef6\u6216\u6570\u636e\u5e93\u8fde\u63a5\u3002","title":"\u5728 Python \u4e2d\u6355\u6349\u5f02\u5e38"},{"location":"pages/python/pytutorial/python-exceptions/#ZeroDivisionError","text":"\u9664\u4ee5\u96f6\u662f\u4e0d\u53ef\u80fd\u7684\u3002 \u5982\u679c\u6211\u4eec\u5c1d\u8bd5\u6267\u884c\u6b64\u64cd\u4f5c\uff0c\u5219\u4f1a\u5f15\u53d1 ZeroDivisionError \u5e76\u4e2d\u65ad\u811a\u672c\u3002 \u6ce8\u610f: \u4e0b\u9762\u7684\u793a\u4f8b\u6f14\u793a\u4e86\u5f02\u5e38\u5728Python\u4e2d\u7684\u5de5\u4f5c\u65b9\u5f0f\u3002\u66f4\u76f4\u63a5\u7684\u65b9\u6cd5\u662f\u786e\u4fdd\u9664\u6570\u4e0d\u662f\u96f6\u800c\u4e0d\u662f\u6355\u83b7 ZeroDivisionError . zero_division.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python # zero_division.py def input_numbers(): a = float(input(\"Enter first number:\")) b = float(input(\"Enter second number:\")) return a, b x, y = input_numbers() print(f\"{x} / {y} is {x/y}\") \u5728\u6b64\u811a\u672c\u4e2d\uff0c\u6211\u4eec\u4ece\u63a7\u5236\u53f0\u83b7\u5f97\u4e24\u4e2a\u6570\u5b57\uff0c\u6211\u4eec\u5c06\u8fd9\u4e24\u4e2a\u6570\u76f8\u9664\u3002 \u5982\u679c\u7b2c\u4e8c\u4e2a\u6570\u5b57\u4e3a\u96f6\uff0c\u5219\u4f1a\u51fa\u73b0\u5f02\u5e38\u3002 1 2 3 4 5 6 Enter first number:3 Enter second number:0 Traceback (most recent call last): File \"C:/Users/Jano/PycharmProjects/Simple/simple.py\", line 14, in <module> print(f\"{x} / {y} is {x/y}\") ZeroDivisionError: float division by zero \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e24\u79cd\u65b9\u5f0f\u5904\u7406\u6b64\u95ee\u9898\u3002 zero_division2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #!/usr/bin/env python # zero_division2.py def input_numbers(): a = float(input(\"Enter first number:\")) b = float(input(\"Enter second number:\")) return a, b x, y = input_numbers() while True: if y != 0: print(f\"{x} / {y} is {x/y}\") break else: print(\"Cannot divide by zero\") x, y = input_numbers() \u9996\u5148\uff0c\u6211\u4eec\u4ec5\u68c0\u67e5 y \u7684\u503c\u4e0d\u4e3a\u96f6\u3002 \u5982\u679c y \u503c\u4e3a\u96f6\uff0c\u6211\u4eec\u5c06\u6253\u5370\u8b66\u544a\u6d88\u606f\u5e76\u518d\u6b21\u91cd\u590d\u8f93\u5165\u5468\u671f\u3002 \u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5904\u7406\u9519\u8bef\uff0c\u5e76\u4e14\u811a\u672c\u4e0d\u4f1a\u4e2d\u65ad\u3002 1 2 3 4 5 6 7 8 9 10 $ ./zero_division2.py Enter first number:4 Enter second number:0 Cannot divide by zero Enter first number:5 Enter second number:0 Cannot divide by zero Enter first number:5 Enter second number:6 5.0 / 6.0 is 0.8333333333333334 \u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528\u5f02\u5e38\u3002 zero_division3.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/usr/bin/env python # zerodivision3.py def input_numbers(): a = float(input(\"Enter first number:\")) b = float(input(\"Enter second number:\")) return a, b x, y = input_numbers() try: print(f\"{x} / {y} is {x/y}\") except ZeroDivisionError: print(\"Cannot divide by zero\") x, y = input_numbers() \u6211\u4eec\u5c06\u4ee3\u7801\u653e\u7f6e\u5728 try \u5173\u952e\u5b57\u4e4b\u540e\u6211\u4eec\u671f\u671b\u53d1\u751f\u5f02\u5e38\u7684\u4f4d\u7f6e\u3002 \u5982\u679c\u5f15\u53d1\u4e86 except \u5173\u952e\u5b57\uff0c\u5219\u6355\u83b7\u8be5\u5f02\u5e38\u3002 \u5f02\u5e38\u7c7b\u578b\u5728 except \u5173\u952e\u5b57\u4e4b\u540e\u6307\u5b9a\u3002 1 2 3 4 except ValueError: pass except (IOError, OSError): pass \u8981\u5904\u7406\u66f4\u591a\u7684\u5f02\u5e38\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u9664\u5173\u952e\u5b57\u4e4b\u5916\u7684\u66f4\u591a\u5f02\u5e38\uff0c\u4e5f\u53ef\u4ee5\u5c06\u5f02\u5e38\u540d\u79f0\u653e\u5728\u5143\u7ec4\u4e2d\u3002","title":"ZeroDivisionError"},{"location":"pages/python/pytutorial/python-exceptions/#ValueError","text":"\u5f53\u5185\u7f6e\u64cd\u4f5c\u6216\u51fd\u6570\u63a5\u6536\u5230\u7c7b\u578b\u6b63\u786e\u4f46\u503c\u4e0d\u5408\u9002\u7684\u81ea\u53d8\u91cf\u65f6\uff0c\u4f1a\u5f15\u53d1 ValueError \uff0c\u5e76\u4e14\u65e0\u6cd5\u901a\u8fc7\u66f4\u7cbe\u786e\u7684\u5f02\u5e38\u63cf\u8ff0\u8fd9\u79cd\u60c5\u51b5\u3002 value_error.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/usr/bin/env python # value_error.py def read_age(): age = int(input(\"Enter your age: \")) if age < 0 or age > 130: raise ValueError(\"Invalid age\") return age try: val = read_age() print(f\"Your age is {val}\") except ValueError as e: print(e) \u5728\u8be5\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u8bfb\u53d6\u5e74\u9f84\u4f5c\u4e3a\u7528\u6237\u8f93\u5165\u7684\u51fd\u6570\u3002 \u5f53\u7528\u6237\u63d0\u4f9b\u4e0d\u6b63\u786e\u7684\u503c\u65f6\uff0c\u6211\u4eec\u5c06\u5f15\u53d1 ValueError \u5f02\u5e38\u3002 1 2 3 4 if age < 0 or age > 130: raise ValueError(\"Invalid age\") return age \u8d1f\u5e74\u9f84\u662f\u6ca1\u6709\u9053\u7406\u7684\uff0c\u5728\u73b0\u4ee3\u6ca1\u6709\u8bb0\u5f55\u5230\u5e74\u9f84\u8d85\u8fc7 130 \u5c81\u7684\u4eba\u3002","title":"ValueError"},{"location":"pages/python/pytutorial/python-exceptions/#Python-\u591a\u4e2a\u5f02\u5e38","text":"\u53ef\u4ee5\u5728\u4e00\u4e2a except \u5b50\u53e5\u4e2d\u6355\u83b7\u591a\u4e2a\u5f02\u5e38\u3002 multiple_exceptions.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python # multiple_exceptions.py import os try: os.mkdir('newdir') print('directory created') raise RuntimeError(\"Runtime error occurred\") except (FileExistsError, RuntimeError) as e: print(e) \u8be5\u4ee3\u7801\u793a\u4f8b\u5728\u4e00\u4e2a except \u8bed\u53e5\u4e2d\u6355\u83b7\u4e86\u4e24\u4e2a\u5f02\u5e38\uff1a FileExistsError \u548c RuntimeError \u3002 1 os.mkdir('newdir') \u4f7f\u7528 os.mkdir() \u65b9\u6cd5\u521b\u5efa\u4e00\u4e2a\u65b0\u76ee\u5f55\u3002 \u5982\u679c\u76ee\u5f55\u5df2\u7ecf\u5b58\u5728\uff0c\u5219\u89e6\u53d1 FileExistsError \u3002 1 raise RuntimeError(\"Runtime error occurred\") \u6211\u4eec\u4f7f\u7528 raise \u5173\u952e\u5b57\u624b\u52a8\u5f15\u53d1\u8fd0\u884c\u65f6\u5f02\u5e38\u3002","title":"Python \u591a\u4e2a\u5f02\u5e38"},{"location":"pages/python/pytutorial/python-exceptions/#Python-\u5f02\u5e38\u53c2\u6570","text":"\u5f02\u5e38\u53ef\u4ee5\u5177\u6709\u5173\u8054\u7684\u503c\uff0c\u8be5\u503c\u6307\u793a\u9519\u8bef\u7684\u8be6\u7ec6\u539f\u56e0\u3002 \u8be5\u503c\u653e\u5728 as \u5173\u952e\u5b57\u4e4b\u540e\u3002 exception_as.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python # exception_argument.py try: a = (1, 2, 3, 4) print(a[5]) except IndexError as e: print(e) print(\"Class:\", e.__class__) \u4ece\u5f02\u5e38\u5bf9\u8c61\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u9519\u8bef\u6d88\u606f\u6216\u7c7b\u540d\u3002 1 2 3 $ ./exception_as.py tuple index out of range Class: <class 'IndexError'>","title":"Python \u5f02\u5e38\u53c2\u6570"},{"location":"pages/python/pytutorial/python-exceptions/#Python-\u5f02\u5e38\u5c42\u6b21\u7ed3\u6784","text":"\u5f02\u5e38\u662f\u6309\u5c42\u6b21\u7ed3\u6784\u7ec4\u7ec7\u7684\uff0c\u5b83\u4eec\u662f\u6240\u6709\u5f02\u5e38\u7684\u7236\u7ea7 Exception \u3002 interrupt.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python # interrupt.py try: while True: pass except KeyboardInterrupt: print(\"Program interrupted\") \u811a\u672c\u5f00\u59cb\u5e76\u4e0d\u65ad\u5faa\u73af\u3002 \u5982\u679c\u6309 Ctrl + C \uff0c\u6211\u4eec\u5c06\u4e2d\u65ad\u5faa\u73af\u3002 \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u6355\u83b7\u4e86 KeyboardInterrupt \u5f02\u5e38\u3002 1 2 3 Exception BaseException KeyboardInterrupt \u8fd9\u662f KeyboardInterrupt \u5f02\u5e38\u7684\u5c42\u6b21\u7ed3\u6784\u3002 interrupt2.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python # interrupt2.py try: while True: pass except BaseException: print(\"Program interrupted\") \u8fd9\u4e2a\u4f8b\u5b50\u4e5f\u53ef\u4ee5\u3002 BaseException \u4e5f\u6355\u83b7\u952e\u76d8\u4e2d\u65ad\uff1b \u9664\u5176\u4ed6\u5f02\u5e38\u3002 \u4f46\u662f\uff0c\u8fd9\u4e0d\u662f\u4e00\u4e2a\u597d\u4e60\u60ef\u3002 \u6211\u4eec\u5e94\u8be5\u5728 except \u5b50\u53e5\u4e2d\u6355\u83b7\u7279\u5b9a\u7684\u5f02\u5e38\u3002","title":"Python \u5f02\u5e38\u5c42\u6b21\u7ed3\u6784"},{"location":"pages/python/pytutorial/python-exceptions/#Python-\u7528\u6237\u5b9a\u4e49\u7684\u5f02\u5e38","text":"\u5982\u679c\u9700\u8981\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u81ea\u5df1\u7684\u5f02\u5e38\u3002 \u6211\u4eec\u901a\u8fc7\u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684\u5f02\u5e38\u7c7b\u6765\u505a\u5230\u8fd9\u4e00\u70b9\u3002 user_defined.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #!/usr/bin/env python # user_defined.py class BFoundEx(Exception): def __init__(self, value): self.par = value def __str__(self): return f\"BFoundEx: b character found at position {self.par}\" string = \"There are beautiful trees in the forest.\" pos = 0 for i in string: try: if i == 'b': raise BFoundEx(pos) pos = pos + 1 except BFoundEx as e: print(e) \u5728\u6211\u4eec\u7684\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u5f02\u5e38\u3002 \u5f02\u5e38\u662f\u4ece\u57fa\u7c7b Exception \u6d3e\u751f\u7684\u3002 \u5982\u679c\u5728\u5b57\u7b26\u4e32\u4e2d\u53d1\u73b0\u5b57\u6bcd b \u7684\u4efb\u4f55\u51fa\u73b0\uff0c\u6211\u4eec\u5c06 raise \u4f5c\u4e3a\u5f02\u5e38\u3002 1 2 $ ./user_defined.py 'BFoundEx: b character found at position 10'","title":"Python \u7528\u6237\u5b9a\u4e49\u7684\u5f02\u5e38"},{"location":"pages/python/pytutorial/python-exceptions/#\u6e05\u7406","text":"\u6709\u4e00\u4e2a finally \u5173\u952e\u5b57\uff0c\u59cb\u7ec8\u4f1a\u6267\u884c\u3002 \u4e0d\u7ba1\u662f\u5426\u5f15\u53d1\u5f02\u5e38\u3002 \u5b83\u901a\u5e38\u7528\u4e8e\u6e05\u7406\u7a0b\u5e8f\u4e2d\u7684\u8d44\u6e90\u3002 cleanup.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #!/usr/bin/env python # cleanup.py f = None try: f = open('data.txt', 'r') contents = f.readlines() for line in contents: print(line.rstrip()) except IOError: print('Error opening file') finally: if f: f.close() \u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c1d\u8bd5\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u3002 \u5982\u679c\u6211\u4eec\u65e0\u6cd5\u6253\u5f00\u6587\u4ef6\uff0c\u5219\u4f1a\u5f39\u51fa IOError \u3002 \u5982\u679c\u6211\u4eec\u6253\u5f00\u6587\u4ef6\uff0c\u6211\u4eec\u60f3\u5173\u95ed\u6587\u4ef6\u5904\u7406\u7a0b\u5e8f\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u4f7f\u7528 finally \u5173\u952e\u5b57\u3002 \u5728 finally \u5757\u4e2d\uff0c\u6211\u4eec\u68c0\u67e5\u6587\u4ef6\u662f\u5426\u5df2\u6253\u5f00\u3002 \u5982\u679c\u6253\u5f00\u4e86\uff0c\u6211\u4eec\u5c06\u5176\u5173\u95ed\u3002 \u5f53\u6211\u4eec\u4f7f\u7528\u6570\u636e\u5e93\u65f6\uff0c\u8fd9\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u7f16\u7a0b\u7ed3\u6784\u3002 \u5728\u90a3\u91cc\uff0c\u6211\u4eec\u7c7b\u4f3c\u5730\u6e05\u7406\u6253\u5f00\u7684\u6570\u636e\u5e93\u8fde\u63a5\u3002","title":"\u6e05\u7406"},{"location":"pages/python/pytutorial/python-exceptions/#\u5806\u6808\u8ddf\u8e2a","text":"\u5806\u6808\u8ddf\u8e2a\u663e\u793a\u4e86\u5f15\u53d1\u672a\u6355\u83b7\u7684\u5f02\u5e38\u65f6\u7684\u8c03\u7528\u5806\u6808\uff08\u81f3\u6b64\u4e3a\u6b62\u5df2\u8c03\u7528\u7684\u51fd\u6570\u5806\u6808\uff09\u3002 Python traceback \u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6807\u51c6\u63a5\u53e3\uff0c\u7528\u4e8e\u63d0\u53d6\uff0c\u683c\u5f0f\u5316\u548c\u6253\u5370 Python \u7a0b\u5e8f\u7684\u5806\u6808\u8ddf\u8e2a\u3002 \u5b83\u7cbe\u786e\u5730\u6a21\u4eff\u4e86 Python \u89e3\u91ca\u5668\u5728\u6253\u5370\u5806\u6808\u8ddf\u8e2a\u65f6\u7684\u884c\u4e3a\u3002 stacktrace_ex.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #!/usr/bin/env python # stacktrace_ex.py import traceback def myfun(): def myfun2(): try: 3 / 0 except ZeroDivisionError as e: print(e) print(\"Class:\", e.__class__) for line in traceback.format_stack(): print(line.strip()) myfun2() def test(): myfun() test() \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5728\u5d4c\u5957\u7684 myfun2 \u51fd\u6570\u4e2d\u5c06\u9664\u4ee5\u96f6\u7684\u5f02\u5e38\u3002 1 for line in traceback.format_stack(): format_stack() \u4ece\u5f53\u524d\u5806\u6808\u5e27\u4e2d\u63d0\u53d6\u539f\u59cb\u56de\u6eaf\u5e76\u5c06\u5176\u683c\u5f0f\u5316\u4e3a\u5143\u7ec4\u5217\u8868\u3002 \u6211\u4eec\u4f7f\u7528 for \u5faa\u73af\u904d\u5386\u5143\u7ec4\u5217\u8868\u3002 1 2 3 4 5 6 7 8 9 10 11 $ ./stacktrace_ex.py division by zero Class: <class 'ZeroDivisionError'> File \"C:/Users/Jano/PycharmProjects/Simple/simple.py\", line 30, in <module> test() File \"C:/Users/Jano/PycharmProjects/Simple/simple.py\", line 27, in test myfun() File \"C:/Users/Jano/PycharmProjects/Simple/simple.py\", line 23, in myfun myfun2() File \"C:/Users/Jano/PycharmProjects/Simple/simple.py\", line 20, in myfun2 for line in traceback.format_stack(): \u5728\u7a0b\u5e8f\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u8c03\u7528\u5806\u6808-\u5bfc\u81f4\u9519\u8bef\u7684\u88ab\u8c03\u7528\u51fd\u6570\u7684\u987a\u5e8f\u3002","title":"\u5806\u6808\u8ddf\u8e2a"},{"location":"pages/python/pytutorial/python-faker/","text":"Python Faker \u6559\u7a0b \u00b6 Python Faker \u6559\u7a0b \u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528 Faker \u8f6f\u4ef6\u5305\u5728 Python \u4e2d\u751f\u6210\u4f2a\u6570\u636e\uff0c\u6211\u4eec\u4f7f\u7528 joke2k/faker \u5e93\u3002 Faker \u662f\u4e00\u4e2a\u751f\u6210\u4f2a\u9020\u6570\u636e\u7684 Python \u5e93\uff0cFaka \u6570\u636e\u901a\u5e38\u7528\u4e8e\u6d4b\u8bd5\u6216\u7528\u4e00\u4e9b\u4f2a\u6570\u636e\u586b\u5145\u6570\u636e\u5e93\u3002 \u8bbe\u7f6e Faker \u00b6 \u8be5\u8f6f\u4ef6\u5305\u968f composer \u4e00\u8d77\u5b89\u88c5\u3002 1 $ pip install Faker \u6211\u4eec\u5b89\u88c5\u4e86 Faker \u6a21\u5757\u3002 1 $ pip install Dumper \u53e6\u5916\uff0c\u6211\u4eec\u5b89\u88c5\u4e86 Dumper\uff0c\u5b83\u5728\u8f6c\u50a8\u53d8\u91cf\u65f6\u63d0\u4f9b\u66f4\u597d\u7684\u63a7\u5236\u53f0\u8f93\u51fa\u3002 Faker \u751f\u6210\u5668 \u00b6 faker.Faker() \u521b\u5efa\u5e76\u521d\u59cb\u5316\u4e00\u4e2a\u4f2a\u9020\u7684\u751f\u6210\u5668\uff0c\u8be5\u4f2a\u9020\u5668\u53ef\u4ee5\u901a\u8fc7\u8bbf\u95ee\u4ee5\u6570\u636e\u7c7b\u578b\u547d\u540d\u7684\u5c5e\u6027\u6765\u751f\u6210\u6570\u636e\u3002 Faker \u5c06\u6570\u636e\u751f\u6210\u59d4\u6258\u7ed9\u63d0\u4f9b\u8005\u3002 \u9ed8\u8ba4\u63d0\u4f9b\u7a0b\u5e8f\u4f7f\u7528\u82f1\u8bed\u8bed\u8a00\u73af\u5883\u3002 Faker \u652f\u6301\u5176\u4ed6\u8bed\u8a00\u73af\u5883\uff1b \u4ed6\u4eec\u7684\u5b8c\u6210\u6c34\u5e73\u4e0d\u540c\u3002 \u7b80\u5355\u7684 Faker \u00b6 \u4ee5\u4e0b\u793a\u4f8b\u662f Faker \u7684\u7b80\u5355\u6f14\u793a\u3002 simple.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python from faker import Faker faker = Faker() print(f'name: {faker.name()}') print(f'address: {faker.address()}') print(f'text: {faker.text()}') \u8be5\u793a\u4f8b\u8f93\u51fa\u5047\u540d\u79f0\uff0c\u5730\u5740\u548c\u6587\u672c\u3002 1 2 3 4 5 6 7 $ ./simple.py name: Arthur Patton address: 0638 Larsen Way Tylermouth, CA 48344 text: Save general start bar. Become class both bank Mrs so myself. Each difficult performance even. Total anyone develop her raise research both. Laugh sport necessary tree. As during day up fall. Faker \u540d\u79f0 \u00b6 \u5728\u7b2c\u4e8c\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f2a\u9020\u4e0e\u7528\u6237\u540d\u6709\u5173\u7684\u6570\u636e\u3002 names.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/env python from faker import Faker faker = Faker() print(f'Name: {faker.name()}') print(f'First name: {faker.first_name()}') print(f'Last name: {faker.last_name()}') print('--------------------------') print(f'Male name: {faker.name_male()}') print(f'Female name: {faker.name_female()}') \u8be5\u793a\u4f8b\u521b\u5efa\u5047\u7684\u5168\u540d\uff0c\u7537\u6027\u7684\u59d3\u6c0f\u548c\u59d3\u6c0f\u3002 1 2 3 4 5 6 7 $ ./names.py Name: Tara Brown First name: Stephanie Last name: Martin -------------------------- Male name: John Banks Female name: Lacey Roberts Faker \u5de5\u4f5c \u00b6 \u4f5c\u4e1a\u7531 job() \u751f\u6210\u3002 jobs.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python from faker import Faker faker = Faker() for _ in range(6): print(faker.job()) \u8be5\u793a\u4f8b\u521b\u5efa\u4e86\u516d\u4e2a\u4f2a\u9020\u4f5c\u4e1a\u3002 1 2 3 4 5 6 7 $ ./jobs.py Town planner Paediatric nurse Geographical information systems officer Water quality scientist Engineer, maintenance Designer, ceramics/pottery Faker \u8bed\u8a00\u73af\u5883\u6570\u636e \u00b6 Faker \u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u652f\u6301\u672c\u5730\u5316\u6570\u636e\u3002 \u8bed\u8a00\u73af\u5883\u88ab\u4f20\u9012\u7ed9\u6784\u9020\u65b9\u6cd5\u3002 \u8bf7\u6ce8\u610f\uff0c\u8bed\u8a00\u73af\u5883\u5df2\u5b8c\u6210\u5404\u79cd\u7ea7\u522b\u3002 localized.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python from faker import Faker faker = Faker('cz_CZ') for i in range(3): name = faker.name() address = faker.address() phone = faker.phone_number() print(f'{name}, {address}, {phone}') \u8be5\u793a\u4f8b\u4f7f\u7528\u6377\u514b\u8bed\u751f\u6210\u4f2a\u9020\u6570\u636e\u3002 1 2 3 4 5 6 7 $ ./localized.py Irena Novotn\u00e1, Nad \u0160ancemi 725 055 80 Bojkovice, 606 136 053 Stanislav Svoboda, B\u0159ezanova 225 621 17 Byst\u0159ice pod Host\u00fdnem, 727 057 251 Kl\u00e1ra Moravcov\u00e1, Neu\u017eilova 6/3 134 97 \u010cesk\u00e1 Kamenice, 606 374 469 \u8bf7\u6ce8\u610f\uff0c\u6377\u514b\u8bed\u5177\u6709\u53e3\u97f3\u3002 Faker \u8d27\u5e01 \u00b6 \u4ee5\u4e0b\u793a\u4f8b\u4e3a\u8d27\u5e01\u521b\u5efa\u4f2a\u9020\u6570\u636e\u3002 currencies.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python from faker import Faker faker = Faker() print(f'currency: {faker.currency()}') print(f'currency name: {faker.currency_name()}') print(f'currency code: {faker.currency_code()}') \u8be5\u7a0b\u5e8f\u751f\u6210\u5047\u8d27\u5e01\u3002 1 2 3 4 $ ./currencies.py currency: ('ISK', 'Icelandic kr\u00f3na') currency name: Israeli new shekel currency code: DJF Faker \u521b\u5efa\u4f2a\u5355\u8bcd \u00b6 Faker \u5141\u8bb8\u521b\u5efa\u5047\u5355\u8bcd\u3002 words.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python from faker import Faker faker = Faker() print(f'a word: {faker.word()}') print(f'six words: {faker.words(6)}') words = ['forest', 'blue', 'cloud', 'sky', 'wood', 'falcon'] print(f'customized unique words: {faker.words(3, words, True)}') \u8be5\u793a\u4f8b\u521b\u5efa\u4f2a\u5355\u8bcd\u3002 1 print(f'a word: {faker.word()}') \u8be5\u884c\u751f\u6210\u4e00\u4e2a\u4f2a\u9020\u7684\u5355\u8bcd\u3002 1 print(f'six words: {faker.words(6)}') \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u751f\u6210\u516d\u4e2a\u4f2a\u5355\u8bcd\u3002 1 2 3 words = ['forest', 'blue', 'cloud', 'sky', 'wood', 'falcon'] print(f'customized unique words: {faker.words(3, words, True)}') \u6211\u4eec\u8fd8\u53ef\u4ee5\u4ece\u9884\u5b9a\u4e49\u7684\u5355\u8bcd\u5217\u8868\u4e2d\u521b\u5efa\u5047\u5355\u8bcd\u3002 1 2 3 4 $ words.py a word: show six words: ['value', 'its', 'those', 'wish', 'enter', 'hold'] customized unique words: ['forest', 'blue', 'sky'] Faker \u4e2a\u4eba\u6570\u636e \u00b6 Faker \u53ef\u4ee5\u4f7f\u7528 simple_profile() \u521b\u5efa\u7b80\u5355\u7684\u865a\u62df\u914d\u7f6e\u6587\u4ef6\uff0c\u5e76\u4f7f\u7528 profile() \u521b\u5efa\u6269\u5c55\u7684\u914d\u7f6e\u6587\u4ef6\u3002 profiles.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/usr/bin/env python from faker import Faker import dumper faker = Faker() profile1 = faker.simple_profile() dumper.dump(profile1) print('--------------------------') profile2 = faker.simple_profile('M') dumper.dump(profile2) print('--------------------------') profile3 = faker.profile(sex='F') dumper.dump(profile3) \u8be5\u793a\u4f8b\u4e3a\u7537\u6027\u548c\u5973\u6027\u521b\u5efa\u865a\u62df\u6982\u8981\u6587\u4ef6\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 $ ./profiles.py <dict at 0x20d590a7678>: username: 'gmorgan' name: 'Jessica Clark' sex: 'F' address: '694 Joseph Valleys\\nJohnfort, ME 81780' mail: 'bettybuckley@yahoo.com' birthdate: <str at 0x20d5bcbd7b0>: 'datetime.date(1938, 9, 18)' -------------------------- <dict at 0x20d5b0065e8>: username: 'mrios' name: 'Harold Wagner' sex: 'M' address: '26439 Robinson Radial\\nWest Meghanmouth, PA 85463' mail: 'josechoi@gmail.com' birthdate: <str at 0x20d5bcbd7b0>: 'datetime.date(1986, 8, 18)' -------------------------- <dict at 0x20d5bd24990>: job: 'Engineer, communications' company: 'Jackson-Willis' ssn: '430-41-6118' residence: 'USNS Odom\\nFPO AP 47095' current_location: <tuple at 0x20d5bca9a88> 0: <str at 0x20d5bd248a0>: \"Decimal('74.1885785')\" 1: <str at 0x20d5bd248a0>: \"Decimal('119.951995')\" blood_group: 'O-' website: ['http://roberson.com/'] username: 'ygutierrez' name: 'Lindsay Walker' sex: 'F' address: '22968 Beverly Road Suite 918\\nTimothyborough, SD 10494' mail: 'aliciamccall@yahoo.com' birthdate: <str at 0x20d5bcbd7b0>: 'datetime.date(1979, 1, 4)' Faker \u53f7\u7801 \u00b6 Faker \u5141\u8bb8\u751f\u6210\u968f\u673a\u6570\u5b57\u548c\u6574\u6570\u3002 fake_numbers.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python from faker import Faker faker = Faker() print(f'Random int: {faker.random_int()}') print(f'Random int: {faker.random_int(0, 100)}') print(f'Random digit: {faker.random_digit()}') \u8be5\u793a\u4f8b\u751f\u6210\u968f\u673a\u6570\u5b57\u548c\u6574\u6570\u3002 1 print(f'Random int: {faker.random_int(0, 100)}') \u6211\u4eec\u53ef\u4ee5\u5728 random_int() \u65b9\u6cd5\u4e2d\u6307\u5b9a\u754c\u9650\u3002 1 2 3 4 $ ./fake_numbers.py Random int: 5181 Random int: 91 Random digit: 9 Faker \u54c8\u5e0c\u548c uuid \u00b6 \u865a\u5047\u54c8\u5e0c\u548c uuid \u7684 Faker \u652f\u6301\u3002 hash_uuid.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python from faker import Faker faker = Faker() print(f'md5: {faker.md5()}') print(f'sha1: {faker.sha1()}') print(f'sha256: {faker.sha256()}') print(f'uuid4: {faker.uuid4()}') \u8be5\u793a\u4f8b\u751f\u6210\u4e09\u4e2a\u5047\u54c8\u5e0c\u548c\u4e00\u4e2a uuid \u503c\u3002 1 2 3 4 5 $ ./hash_uuid.py md5: aace57d56794686acec9eb190d401d46 sha1: 9f8f6af3089e7b5ed571591701afcfd9c2bb7a0e sha256: 8b117b58599809f50735c701f598312b0f64203a8ffacde09af23db69cfd62d5 uuid4: 38092dcd-0e49-4ac0-b39b-7edf6db62290 Faker \u4e92\u8054\u7f51\u76f8\u5173\u6570\u636e \u00b6 Faker \u6709\u591a\u4e2a\u7528\u4e8e\u4f2a\u9020\u4e0e Internet \u76f8\u5173\u7684\u6570\u636e\u7684\u8bbf\u95ee\u5668\u3002 internet.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #!/usr/bin/env python from faker import Faker faker = Faker() print(f'Email: {faker.email()}') print(f'Safe email: {faker.safe_email()}') print(f'Free email: {faker.free_email()}') print(f'Company email: {faker.company_email()}') print('------------------------------------') print(f'Host name: {faker.hostname()}') print(f'Domain name: {faker.domain_name()}') print(f'Domain word: {faker.domain_word()}') print(f'TLD: {faker.tld()}') print('------------------------------------') print(f'IPv4: {faker.ipv4()}') print(f'IPv6: {faker.ipv6()}') print(f'MAC address: {faker.mac_address()}') print('------------------------------------') print(f'Slug: {faker.slug()}') print(f'Image URL: {faker.image_url()}') \u8be5\u793a\u4f8b\u663e\u793a\u4e86\u5404\u79cd\u4e0e Internet \u76f8\u5173\u7684\u6570\u636e\uff0c\u5305\u62ec\u7535\u5b50\u90ae\u4ef6\uff0c\u57df\u540d\uff0c\u4fe1\u606f\uff0cIP \u5730\u5740\u548c URL\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 $ ./internet.py Email: hescobar@acevedo.info Safe email: jonesgregory@example.net Free email: zchambers@yahoo.com Company email: paulbailey@gordon-woods.com ------------------------------------ Host name: desktop-12.rodriguez-underwood.com Domain name: henry.com Domain word: davis TLD: com ------------------------------------ IPv4: 192.31.48.26 IPv6: 75cd:2c43:37f5:774c:dd:5a2f:ae5d:bfc9 MAC address: 3d:b1:39:ec:c6:53 ------------------------------------ Slug: of-street-fight Image URL: https://placeimg.com/311/871/any Faker \u65e5\u671f\u548c\u65f6\u95f4 \u00b6 Faker \u6709\u5f88\u591a\u4f2a\u9020\u65e5\u671f\u548c\u65f6\u95f4\u503c\u7684\u65b9\u6cd5\u3002 date_time.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python from faker import Faker faker = Faker() print(f'Date of birth: {faker.date_of_birth()}') print(f'Century: {faker.century()}') print(f'Year: {faker.year()}') print(f'Month: {faker.month()}') print(f'Month name: {faker.month_name()}') print(f'Day of week: {faker.day_of_week()}') print(f'Day of month: {faker.day_of_month()}') print(f'Time zone: {faker.timezone()}') print(f'AM/PM: {faker.am_pm()}') \u7b2c\u4e00\u4e2a\u793a\u4f8b\u663e\u793a\u4e86\u4f2a\u9020\u7684\u751f\u65e5\uff0c\u65e5\u671f\u65f6\u95f4\u90e8\u5206\uff0c\u65f6\u533a\u548c AM / PM \u65b9\u6cd5\u3002 1 2 3 4 5 6 7 8 9 10 $ date_time.py Date of birth: 2008-08-07 Century: IV Year: 1981 Month: 05 Month name: January Day of week: Saturday Day of month: 26 Time zone: Asia/Oral AM/PM: AM datetime2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #!/usr/bin/env python from faker import Faker faker = Faker() print(f'Datetime this century: {faker.date_time_this_century()}') print(f'Datetime this decade: {faker.date_time_this_decade()}') print(f'Datetime this year: {faker.date_time_this_year()}') print(f'Datetime this month: {faker.date_time_this_month()}') print('-------------------------') print(f'Date this century: {faker.date_this_century()}') print(f'Date this decade: {faker.date_this_decade()}') print(f'Date this year: {faker.date_this_year()}') print(f'Date this month: {faker.date_this_month()}') print('-------------------------') TOTAL_SECONDS = 60*60*24*2 # two days series = faker.time_series(start_date='-12d', end_date='now', precision=TOTAL_SECONDS) for val in series: print(val[0]) \u7b2c\u4e8c\u4e2a\u793a\u4f8b\u663e\u793a\u4e86\u7528\u4e8e\u751f\u6210\u5f53\u524d\u4e16\u7eaa\uff0c\u5341\u5e74\uff0c\u5e74\u4efd\u6216\u6708\u4efd\u4e2d\u7684\u65e5\u671f\u65f6\u95f4\u503c\u7684\u65b9\u6cd5\u3002 \u5b83\u8fd8\u5305\u62ec\u65f6\u95f4\u5e8f\u5217\u503c\u7684\u751f\u6210\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 $ date_time2.py Datetime this century: 2013-08-06 23:42:47 Datetime this decade: 2010-02-15 01:08:34 Datetime this year: 2019-03-10 05:32:42 Datetime this month: 2019-04-06 10:13:53 ------------------------- Date this century: 2014-11-04 Date this decade: 2018-03-07 Date this year: 2019-02-07 Date this month: 2019-04-04 ------------------------- 2019-03-26 16:16:49 2019-03-28 16:16:49 2019-03-30 16:16:49 2019-04-01 16:16:49 2019-04-03 16:16:49 2019-04-05 16:16:49 datetime3.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #!/usr/bin/env python from faker import Faker faker = Faker() print(f'Unix time: {faker.unix_time()}') print(f'Datetime: {faker.date_time()}') print(f'iso8601: {faker.iso8601()}') print(f'Date: {faker.date()}') print(f'Time: {faker.time()}') print('-------------------------') print(f\"Datetime between: {faker.date_time_between(start_date='-15y', end_date='now')}\") print(f\"Date between: {faker.date_between()}\") print('-------------------------') print(f\"Future datetime: {faker.future_datetime()}\") print(f\"Future date: {faker.future_date()}\") print(f\"Past datetime: {faker.past_datetime()}\") print(f\"Past date: {faker.past_date()}\") \u7b2c\u4e09\u4e2a\u793a\u4f8b\u663e\u793a\u4e86\u7528\u4e8e\u5404\u79cd\u65e5\u671f\u65f6\u95f4\u683c\u5f0f\uff0c\u83b7\u53d6\u9009\u5b9a\u8303\u56f4\u7684\u65e5\u671f\u65f6\u95f4\u503c\u4ee5\u53ca\u751f\u6210\u672a\u6765\u6216\u8fc7\u53bb\u503c\u7684\u65b9\u6cd5\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 $ date_time3.py Unix time: 1389138339 Datetime: 1988-01-24 09:16:09 iso8601: 2014-04-22T04:19:18 Date: 2009-05-01 Time: 12:07:51 ------------------------- Datetime between: 2011-03-18 21:00:23 Date between: 1992-07-09 ------------------------- Future datetime: 2019-04-11 13:36:02 Future date: 2019-04-14 Past datetime: 2019-03-21 12:27:20 Past date: 2019-03-22 Faker \u751f\u6210 XML \u6570\u636e \u00b6 \u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 Faker \u548c Jinja2 \u6a21\u677f\u751f\u6210 XML \u6570\u636e\u3002 XML \u6587\u4ef6\u5c06\u5305\u542b\u7528\u6237\u3002 1 $ pip install jinja2 \u6211\u4eec\u5b89\u88c5 Jinja2 \u6a21\u677f\u5f15\u64ce\u3002 fake_xml.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #!/usr/bin/env python3 from jinja2 import Environment, FileSystemLoader from faker import Faker class User: def __init__(self, first_name, last_name, occupation): self.first_name = first_name self.last_name = last_name self.occupation = occupation faker = Faker() users = [] for _ in range(10): first_name = faker.first_name() last_name = faker.last_name() occupation = faker.job() user = User(first_name, last_name, occupation) users.append(user) file_loader = FileSystemLoader('templates') env = Environment(loader=file_loader) template = env.get_template('users.xml.j2') output = template.render(users=users) print(output, file=open('users.xml', 'w')) \u8be5\u7a0b\u5e8f\u5c06\u751f\u6210\u5341\u4e2a\u7528\u6237\u7684\u5217\u8868\u3002 \u8be5\u5217\u8868\u5c06\u4f20\u9012\u5230 Jinja2 \u6a21\u677f\u8fdb\u884c\u5904\u7406\u3002 \u6a21\u677f\u4f4d\u4e8e templates \u76ee\u5f55\u4e2d\u3002 \u751f\u6210\u7684\u5185\u5bb9\u88ab\u5199\u5165 users.xml \u6587\u4ef6\u3002 templates/users.xml.j2 1 2 3 4 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <users> </users> \u5728\u6a21\u677f\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 for \u6307\u4ee4\u6765\u5904\u7406\u7528\u6237\u5217\u8868\u3002 \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 Python Faker \u5728 Python \u4e2d\u751f\u6210\u4f2a\u6570\u636e\u3002","title":"Python Faker \u6559\u7a0b"},{"location":"pages/python/pytutorial/python-faker/#Python-Faker-\u6559\u7a0b","text":"Python Faker \u6559\u7a0b \u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528 Faker \u8f6f\u4ef6\u5305\u5728 Python \u4e2d\u751f\u6210\u4f2a\u6570\u636e\uff0c\u6211\u4eec\u4f7f\u7528 joke2k/faker \u5e93\u3002 Faker \u662f\u4e00\u4e2a\u751f\u6210\u4f2a\u9020\u6570\u636e\u7684 Python \u5e93\uff0cFaka \u6570\u636e\u901a\u5e38\u7528\u4e8e\u6d4b\u8bd5\u6216\u7528\u4e00\u4e9b\u4f2a\u6570\u636e\u586b\u5145\u6570\u636e\u5e93\u3002","title":"Python Faker \u6559\u7a0b"},{"location":"pages/python/pytutorial/python-faker/#\u8bbe\u7f6e-Faker","text":"\u8be5\u8f6f\u4ef6\u5305\u968f composer \u4e00\u8d77\u5b89\u88c5\u3002 1 $ pip install Faker \u6211\u4eec\u5b89\u88c5\u4e86 Faker \u6a21\u5757\u3002 1 $ pip install Dumper \u53e6\u5916\uff0c\u6211\u4eec\u5b89\u88c5\u4e86 Dumper\uff0c\u5b83\u5728\u8f6c\u50a8\u53d8\u91cf\u65f6\u63d0\u4f9b\u66f4\u597d\u7684\u63a7\u5236\u53f0\u8f93\u51fa\u3002","title":"\u8bbe\u7f6e Faker"},{"location":"pages/python/pytutorial/python-faker/#Faker-\u751f\u6210\u5668","text":"faker.Faker() \u521b\u5efa\u5e76\u521d\u59cb\u5316\u4e00\u4e2a\u4f2a\u9020\u7684\u751f\u6210\u5668\uff0c\u8be5\u4f2a\u9020\u5668\u53ef\u4ee5\u901a\u8fc7\u8bbf\u95ee\u4ee5\u6570\u636e\u7c7b\u578b\u547d\u540d\u7684\u5c5e\u6027\u6765\u751f\u6210\u6570\u636e\u3002 Faker \u5c06\u6570\u636e\u751f\u6210\u59d4\u6258\u7ed9\u63d0\u4f9b\u8005\u3002 \u9ed8\u8ba4\u63d0\u4f9b\u7a0b\u5e8f\u4f7f\u7528\u82f1\u8bed\u8bed\u8a00\u73af\u5883\u3002 Faker \u652f\u6301\u5176\u4ed6\u8bed\u8a00\u73af\u5883\uff1b \u4ed6\u4eec\u7684\u5b8c\u6210\u6c34\u5e73\u4e0d\u540c\u3002","title":"Faker \u751f\u6210\u5668"},{"location":"pages/python/pytutorial/python-faker/#\u7b80\u5355\u7684-Faker","text":"\u4ee5\u4e0b\u793a\u4f8b\u662f Faker \u7684\u7b80\u5355\u6f14\u793a\u3002 simple.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python from faker import Faker faker = Faker() print(f'name: {faker.name()}') print(f'address: {faker.address()}') print(f'text: {faker.text()}') \u8be5\u793a\u4f8b\u8f93\u51fa\u5047\u540d\u79f0\uff0c\u5730\u5740\u548c\u6587\u672c\u3002 1 2 3 4 5 6 7 $ ./simple.py name: Arthur Patton address: 0638 Larsen Way Tylermouth, CA 48344 text: Save general start bar. Become class both bank Mrs so myself. Each difficult performance even. Total anyone develop her raise research both. Laugh sport necessary tree. As during day up fall.","title":"\u7b80\u5355\u7684 Faker"},{"location":"pages/python/pytutorial/python-faker/#Faker-\u540d\u79f0","text":"\u5728\u7b2c\u4e8c\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f2a\u9020\u4e0e\u7528\u6237\u540d\u6709\u5173\u7684\u6570\u636e\u3002 names.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/env python from faker import Faker faker = Faker() print(f'Name: {faker.name()}') print(f'First name: {faker.first_name()}') print(f'Last name: {faker.last_name()}') print('--------------------------') print(f'Male name: {faker.name_male()}') print(f'Female name: {faker.name_female()}') \u8be5\u793a\u4f8b\u521b\u5efa\u5047\u7684\u5168\u540d\uff0c\u7537\u6027\u7684\u59d3\u6c0f\u548c\u59d3\u6c0f\u3002 1 2 3 4 5 6 7 $ ./names.py Name: Tara Brown First name: Stephanie Last name: Martin -------------------------- Male name: John Banks Female name: Lacey Roberts","title":"Faker \u540d\u79f0"},{"location":"pages/python/pytutorial/python-faker/#Faker-\u5de5\u4f5c","text":"\u4f5c\u4e1a\u7531 job() \u751f\u6210\u3002 jobs.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python from faker import Faker faker = Faker() for _ in range(6): print(faker.job()) \u8be5\u793a\u4f8b\u521b\u5efa\u4e86\u516d\u4e2a\u4f2a\u9020\u4f5c\u4e1a\u3002 1 2 3 4 5 6 7 $ ./jobs.py Town planner Paediatric nurse Geographical information systems officer Water quality scientist Engineer, maintenance Designer, ceramics/pottery","title":"Faker \u5de5\u4f5c"},{"location":"pages/python/pytutorial/python-faker/#Faker-\u8bed\u8a00\u73af\u5883\u6570\u636e","text":"Faker \u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u652f\u6301\u672c\u5730\u5316\u6570\u636e\u3002 \u8bed\u8a00\u73af\u5883\u88ab\u4f20\u9012\u7ed9\u6784\u9020\u65b9\u6cd5\u3002 \u8bf7\u6ce8\u610f\uff0c\u8bed\u8a00\u73af\u5883\u5df2\u5b8c\u6210\u5404\u79cd\u7ea7\u522b\u3002 localized.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python from faker import Faker faker = Faker('cz_CZ') for i in range(3): name = faker.name() address = faker.address() phone = faker.phone_number() print(f'{name}, {address}, {phone}') \u8be5\u793a\u4f8b\u4f7f\u7528\u6377\u514b\u8bed\u751f\u6210\u4f2a\u9020\u6570\u636e\u3002 1 2 3 4 5 6 7 $ ./localized.py Irena Novotn\u00e1, Nad \u0160ancemi 725 055 80 Bojkovice, 606 136 053 Stanislav Svoboda, B\u0159ezanova 225 621 17 Byst\u0159ice pod Host\u00fdnem, 727 057 251 Kl\u00e1ra Moravcov\u00e1, Neu\u017eilova 6/3 134 97 \u010cesk\u00e1 Kamenice, 606 374 469 \u8bf7\u6ce8\u610f\uff0c\u6377\u514b\u8bed\u5177\u6709\u53e3\u97f3\u3002","title":"Faker \u8bed\u8a00\u73af\u5883\u6570\u636e"},{"location":"pages/python/pytutorial/python-faker/#Faker-\u8d27\u5e01","text":"\u4ee5\u4e0b\u793a\u4f8b\u4e3a\u8d27\u5e01\u521b\u5efa\u4f2a\u9020\u6570\u636e\u3002 currencies.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python from faker import Faker faker = Faker() print(f'currency: {faker.currency()}') print(f'currency name: {faker.currency_name()}') print(f'currency code: {faker.currency_code()}') \u8be5\u7a0b\u5e8f\u751f\u6210\u5047\u8d27\u5e01\u3002 1 2 3 4 $ ./currencies.py currency: ('ISK', 'Icelandic kr\u00f3na') currency name: Israeli new shekel currency code: DJF","title":"Faker \u8d27\u5e01"},{"location":"pages/python/pytutorial/python-faker/#Faker-\u521b\u5efa\u4f2a\u5355\u8bcd","text":"Faker \u5141\u8bb8\u521b\u5efa\u5047\u5355\u8bcd\u3002 words.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python from faker import Faker faker = Faker() print(f'a word: {faker.word()}') print(f'six words: {faker.words(6)}') words = ['forest', 'blue', 'cloud', 'sky', 'wood', 'falcon'] print(f'customized unique words: {faker.words(3, words, True)}') \u8be5\u793a\u4f8b\u521b\u5efa\u4f2a\u5355\u8bcd\u3002 1 print(f'a word: {faker.word()}') \u8be5\u884c\u751f\u6210\u4e00\u4e2a\u4f2a\u9020\u7684\u5355\u8bcd\u3002 1 print(f'six words: {faker.words(6)}') \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u751f\u6210\u516d\u4e2a\u4f2a\u5355\u8bcd\u3002 1 2 3 words = ['forest', 'blue', 'cloud', 'sky', 'wood', 'falcon'] print(f'customized unique words: {faker.words(3, words, True)}') \u6211\u4eec\u8fd8\u53ef\u4ee5\u4ece\u9884\u5b9a\u4e49\u7684\u5355\u8bcd\u5217\u8868\u4e2d\u521b\u5efa\u5047\u5355\u8bcd\u3002 1 2 3 4 $ words.py a word: show six words: ['value', 'its', 'those', 'wish', 'enter', 'hold'] customized unique words: ['forest', 'blue', 'sky']","title":"Faker \u521b\u5efa\u4f2a\u5355\u8bcd"},{"location":"pages/python/pytutorial/python-faker/#Faker-\u4e2a\u4eba\u6570\u636e","text":"Faker \u53ef\u4ee5\u4f7f\u7528 simple_profile() \u521b\u5efa\u7b80\u5355\u7684\u865a\u62df\u914d\u7f6e\u6587\u4ef6\uff0c\u5e76\u4f7f\u7528 profile() \u521b\u5efa\u6269\u5c55\u7684\u914d\u7f6e\u6587\u4ef6\u3002 profiles.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/usr/bin/env python from faker import Faker import dumper faker = Faker() profile1 = faker.simple_profile() dumper.dump(profile1) print('--------------------------') profile2 = faker.simple_profile('M') dumper.dump(profile2) print('--------------------------') profile3 = faker.profile(sex='F') dumper.dump(profile3) \u8be5\u793a\u4f8b\u4e3a\u7537\u6027\u548c\u5973\u6027\u521b\u5efa\u865a\u62df\u6982\u8981\u6587\u4ef6\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 $ ./profiles.py <dict at 0x20d590a7678>: username: 'gmorgan' name: 'Jessica Clark' sex: 'F' address: '694 Joseph Valleys\\nJohnfort, ME 81780' mail: 'bettybuckley@yahoo.com' birthdate: <str at 0x20d5bcbd7b0>: 'datetime.date(1938, 9, 18)' -------------------------- <dict at 0x20d5b0065e8>: username: 'mrios' name: 'Harold Wagner' sex: 'M' address: '26439 Robinson Radial\\nWest Meghanmouth, PA 85463' mail: 'josechoi@gmail.com' birthdate: <str at 0x20d5bcbd7b0>: 'datetime.date(1986, 8, 18)' -------------------------- <dict at 0x20d5bd24990>: job: 'Engineer, communications' company: 'Jackson-Willis' ssn: '430-41-6118' residence: 'USNS Odom\\nFPO AP 47095' current_location: <tuple at 0x20d5bca9a88> 0: <str at 0x20d5bd248a0>: \"Decimal('74.1885785')\" 1: <str at 0x20d5bd248a0>: \"Decimal('119.951995')\" blood_group: 'O-' website: ['http://roberson.com/'] username: 'ygutierrez' name: 'Lindsay Walker' sex: 'F' address: '22968 Beverly Road Suite 918\\nTimothyborough, SD 10494' mail: 'aliciamccall@yahoo.com' birthdate: <str at 0x20d5bcbd7b0>: 'datetime.date(1979, 1, 4)'","title":"Faker \u4e2a\u4eba\u6570\u636e"},{"location":"pages/python/pytutorial/python-faker/#Faker-\u53f7\u7801","text":"Faker \u5141\u8bb8\u751f\u6210\u968f\u673a\u6570\u5b57\u548c\u6574\u6570\u3002 fake_numbers.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python from faker import Faker faker = Faker() print(f'Random int: {faker.random_int()}') print(f'Random int: {faker.random_int(0, 100)}') print(f'Random digit: {faker.random_digit()}') \u8be5\u793a\u4f8b\u751f\u6210\u968f\u673a\u6570\u5b57\u548c\u6574\u6570\u3002 1 print(f'Random int: {faker.random_int(0, 100)}') \u6211\u4eec\u53ef\u4ee5\u5728 random_int() \u65b9\u6cd5\u4e2d\u6307\u5b9a\u754c\u9650\u3002 1 2 3 4 $ ./fake_numbers.py Random int: 5181 Random int: 91 Random digit: 9","title":"Faker \u53f7\u7801"},{"location":"pages/python/pytutorial/python-faker/#Faker-\u54c8\u5e0c\u548c-uuid","text":"\u865a\u5047\u54c8\u5e0c\u548c uuid \u7684 Faker \u652f\u6301\u3002 hash_uuid.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python from faker import Faker faker = Faker() print(f'md5: {faker.md5()}') print(f'sha1: {faker.sha1()}') print(f'sha256: {faker.sha256()}') print(f'uuid4: {faker.uuid4()}') \u8be5\u793a\u4f8b\u751f\u6210\u4e09\u4e2a\u5047\u54c8\u5e0c\u548c\u4e00\u4e2a uuid \u503c\u3002 1 2 3 4 5 $ ./hash_uuid.py md5: aace57d56794686acec9eb190d401d46 sha1: 9f8f6af3089e7b5ed571591701afcfd9c2bb7a0e sha256: 8b117b58599809f50735c701f598312b0f64203a8ffacde09af23db69cfd62d5 uuid4: 38092dcd-0e49-4ac0-b39b-7edf6db62290","title":"Faker \u54c8\u5e0c\u548c uuid"},{"location":"pages/python/pytutorial/python-faker/#Faker-\u4e92\u8054\u7f51\u76f8\u5173\u6570\u636e","text":"Faker \u6709\u591a\u4e2a\u7528\u4e8e\u4f2a\u9020\u4e0e Internet \u76f8\u5173\u7684\u6570\u636e\u7684\u8bbf\u95ee\u5668\u3002 internet.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #!/usr/bin/env python from faker import Faker faker = Faker() print(f'Email: {faker.email()}') print(f'Safe email: {faker.safe_email()}') print(f'Free email: {faker.free_email()}') print(f'Company email: {faker.company_email()}') print('------------------------------------') print(f'Host name: {faker.hostname()}') print(f'Domain name: {faker.domain_name()}') print(f'Domain word: {faker.domain_word()}') print(f'TLD: {faker.tld()}') print('------------------------------------') print(f'IPv4: {faker.ipv4()}') print(f'IPv6: {faker.ipv6()}') print(f'MAC address: {faker.mac_address()}') print('------------------------------------') print(f'Slug: {faker.slug()}') print(f'Image URL: {faker.image_url()}') \u8be5\u793a\u4f8b\u663e\u793a\u4e86\u5404\u79cd\u4e0e Internet \u76f8\u5173\u7684\u6570\u636e\uff0c\u5305\u62ec\u7535\u5b50\u90ae\u4ef6\uff0c\u57df\u540d\uff0c\u4fe1\u606f\uff0cIP \u5730\u5740\u548c URL\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 $ ./internet.py Email: hescobar@acevedo.info Safe email: jonesgregory@example.net Free email: zchambers@yahoo.com Company email: paulbailey@gordon-woods.com ------------------------------------ Host name: desktop-12.rodriguez-underwood.com Domain name: henry.com Domain word: davis TLD: com ------------------------------------ IPv4: 192.31.48.26 IPv6: 75cd:2c43:37f5:774c:dd:5a2f:ae5d:bfc9 MAC address: 3d:b1:39:ec:c6:53 ------------------------------------ Slug: of-street-fight Image URL: https://placeimg.com/311/871/any","title":"Faker \u4e92\u8054\u7f51\u76f8\u5173\u6570\u636e"},{"location":"pages/python/pytutorial/python-faker/#Faker-\u65e5\u671f\u548c\u65f6\u95f4","text":"Faker \u6709\u5f88\u591a\u4f2a\u9020\u65e5\u671f\u548c\u65f6\u95f4\u503c\u7684\u65b9\u6cd5\u3002 date_time.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python from faker import Faker faker = Faker() print(f'Date of birth: {faker.date_of_birth()}') print(f'Century: {faker.century()}') print(f'Year: {faker.year()}') print(f'Month: {faker.month()}') print(f'Month name: {faker.month_name()}') print(f'Day of week: {faker.day_of_week()}') print(f'Day of month: {faker.day_of_month()}') print(f'Time zone: {faker.timezone()}') print(f'AM/PM: {faker.am_pm()}') \u7b2c\u4e00\u4e2a\u793a\u4f8b\u663e\u793a\u4e86\u4f2a\u9020\u7684\u751f\u65e5\uff0c\u65e5\u671f\u65f6\u95f4\u90e8\u5206\uff0c\u65f6\u533a\u548c AM / PM \u65b9\u6cd5\u3002 1 2 3 4 5 6 7 8 9 10 $ date_time.py Date of birth: 2008-08-07 Century: IV Year: 1981 Month: 05 Month name: January Day of week: Saturday Day of month: 26 Time zone: Asia/Oral AM/PM: AM datetime2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #!/usr/bin/env python from faker import Faker faker = Faker() print(f'Datetime this century: {faker.date_time_this_century()}') print(f'Datetime this decade: {faker.date_time_this_decade()}') print(f'Datetime this year: {faker.date_time_this_year()}') print(f'Datetime this month: {faker.date_time_this_month()}') print('-------------------------') print(f'Date this century: {faker.date_this_century()}') print(f'Date this decade: {faker.date_this_decade()}') print(f'Date this year: {faker.date_this_year()}') print(f'Date this month: {faker.date_this_month()}') print('-------------------------') TOTAL_SECONDS = 60*60*24*2 # two days series = faker.time_series(start_date='-12d', end_date='now', precision=TOTAL_SECONDS) for val in series: print(val[0]) \u7b2c\u4e8c\u4e2a\u793a\u4f8b\u663e\u793a\u4e86\u7528\u4e8e\u751f\u6210\u5f53\u524d\u4e16\u7eaa\uff0c\u5341\u5e74\uff0c\u5e74\u4efd\u6216\u6708\u4efd\u4e2d\u7684\u65e5\u671f\u65f6\u95f4\u503c\u7684\u65b9\u6cd5\u3002 \u5b83\u8fd8\u5305\u62ec\u65f6\u95f4\u5e8f\u5217\u503c\u7684\u751f\u6210\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 $ date_time2.py Datetime this century: 2013-08-06 23:42:47 Datetime this decade: 2010-02-15 01:08:34 Datetime this year: 2019-03-10 05:32:42 Datetime this month: 2019-04-06 10:13:53 ------------------------- Date this century: 2014-11-04 Date this decade: 2018-03-07 Date this year: 2019-02-07 Date this month: 2019-04-04 ------------------------- 2019-03-26 16:16:49 2019-03-28 16:16:49 2019-03-30 16:16:49 2019-04-01 16:16:49 2019-04-03 16:16:49 2019-04-05 16:16:49 datetime3.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #!/usr/bin/env python from faker import Faker faker = Faker() print(f'Unix time: {faker.unix_time()}') print(f'Datetime: {faker.date_time()}') print(f'iso8601: {faker.iso8601()}') print(f'Date: {faker.date()}') print(f'Time: {faker.time()}') print('-------------------------') print(f\"Datetime between: {faker.date_time_between(start_date='-15y', end_date='now')}\") print(f\"Date between: {faker.date_between()}\") print('-------------------------') print(f\"Future datetime: {faker.future_datetime()}\") print(f\"Future date: {faker.future_date()}\") print(f\"Past datetime: {faker.past_datetime()}\") print(f\"Past date: {faker.past_date()}\") \u7b2c\u4e09\u4e2a\u793a\u4f8b\u663e\u793a\u4e86\u7528\u4e8e\u5404\u79cd\u65e5\u671f\u65f6\u95f4\u683c\u5f0f\uff0c\u83b7\u53d6\u9009\u5b9a\u8303\u56f4\u7684\u65e5\u671f\u65f6\u95f4\u503c\u4ee5\u53ca\u751f\u6210\u672a\u6765\u6216\u8fc7\u53bb\u503c\u7684\u65b9\u6cd5\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 $ date_time3.py Unix time: 1389138339 Datetime: 1988-01-24 09:16:09 iso8601: 2014-04-22T04:19:18 Date: 2009-05-01 Time: 12:07:51 ------------------------- Datetime between: 2011-03-18 21:00:23 Date between: 1992-07-09 ------------------------- Future datetime: 2019-04-11 13:36:02 Future date: 2019-04-14 Past datetime: 2019-03-21 12:27:20 Past date: 2019-03-22","title":"Faker \u65e5\u671f\u548c\u65f6\u95f4"},{"location":"pages/python/pytutorial/python-faker/#Faker-\u751f\u6210-XML-\u6570\u636e","text":"\u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 Faker \u548c Jinja2 \u6a21\u677f\u751f\u6210 XML \u6570\u636e\u3002 XML \u6587\u4ef6\u5c06\u5305\u542b\u7528\u6237\u3002 1 $ pip install jinja2 \u6211\u4eec\u5b89\u88c5 Jinja2 \u6a21\u677f\u5f15\u64ce\u3002 fake_xml.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #!/usr/bin/env python3 from jinja2 import Environment, FileSystemLoader from faker import Faker class User: def __init__(self, first_name, last_name, occupation): self.first_name = first_name self.last_name = last_name self.occupation = occupation faker = Faker() users = [] for _ in range(10): first_name = faker.first_name() last_name = faker.last_name() occupation = faker.job() user = User(first_name, last_name, occupation) users.append(user) file_loader = FileSystemLoader('templates') env = Environment(loader=file_loader) template = env.get_template('users.xml.j2') output = template.render(users=users) print(output, file=open('users.xml', 'w')) \u8be5\u7a0b\u5e8f\u5c06\u751f\u6210\u5341\u4e2a\u7528\u6237\u7684\u5217\u8868\u3002 \u8be5\u5217\u8868\u5c06\u4f20\u9012\u5230 Jinja2 \u6a21\u677f\u8fdb\u884c\u5904\u7406\u3002 \u6a21\u677f\u4f4d\u4e8e templates \u76ee\u5f55\u4e2d\u3002 \u751f\u6210\u7684\u5185\u5bb9\u88ab\u5199\u5165 users.xml \u6587\u4ef6\u3002 templates/users.xml.j2 1 2 3 4 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <users> </users> \u5728\u6a21\u677f\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 for \u6307\u4ee4\u6765\u5904\u7406\u7528\u6237\u5217\u8868\u3002 \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 Python Faker \u5728 Python \u4e2d\u751f\u6210\u4f2a\u6570\u636e\u3002","title":"Faker \u751f\u6210 XML \u6570\u636e"},{"location":"pages/python/pytutorial/python-feedparser/","text":"Python feedparser \u6559\u7a0b \u00b6 feedparser \u53f7\u79f0\u662f\u4e00\u4e2a universal feed parser\uff0c\u4f7f\u7528\u5b83\u6211\u4eec\u53ef\u8f7b\u677e\u5730\u5b9e\u73b0\u4ece\u4efb\u4f55 RSS \u6216 Atom \u8ba2\u9605\u6e90\u5f97\u5230\u6807\u9898\u3001\u94fe\u63a5\u548c\u6587\u7ae0\u7684\u6761\u76ee\u4e86\u3002 \u4f7f\u7528\uff1a pip install feedparser \u6765\u5b89\u88c5\u6a21\u5757 RSS\u662fRDF Site Summary \u7684\u7f29\u5199\uff08RDF\u662fResource Description Framework\u7684\u7f29\u5199 \uff09\uff0c\u662f\u6307\u5c06\u7f51\u7ad9\u6458\u8981\u7528xml\u8bed\u8a00\u63cf\u8ff0\u3002 \u4f7f\u7528feedparser\u6a21\u5757\u6765\u8fdb\u884c\u89e3\u6790\u8fc7\u6ee4\u9875\u9762\uff0c\u8fd4\u56de\u9700\u8981\u7684\u4fe1\u606f\uff1a \u7528 feedparser.parse \u8f93\u51fa\u9875\u9762\u4fe1\u606f \u00b6 test_feedparser.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #encoding:utf-8 import feedparser def test ( url = 'http://blog.csdn.net/together_cz/article' ): '''\u5b66\u4e60\u4f7f\u7528feedparser \u8f93\u5165\uff1aurl \u8f93\u51fa\uff1a\u9875\u9762\u4fe1\u606f ''' one_page_dict = feedparser . parse ( url ) #\u89e3\u6790\u5f97\u5230\u7684\u662f\u4e00\u4e2a\u5b57\u5178 print ( one_page_dict ) ''' \u8f93\u51fa\u5b57\u5178\u4e2d\u7684\u952e\u503c\u6709\u54ea\u4e9b\uff0c\u4e00\u5171\u670910\u4e2d\u5982\u4e0b\uff1a ['feed', 'status', 'version', 'encoding', 'bozo', 'headers', 'href', 'namespaces', 'entries', 'bozo_exception'] ''' print ( one_page_dict . keys ()) print ( '-' * 20 ) print ( '\u8bbf\u95ee\u9875\u9762\u94fe\u63a5href\u4e3a\uff1a %s ' % one_page_dict [ 'href' ]) print ( '\u9875\u9762\u8fd4\u56deheaders\u4fe1\u606f\u4e3a\uff1a %s ' % ne_page_dict [ 'headers' ]) print ( '\u9875\u9762version\u4fe1\u606f\u4e3a\uff1a %s ' % one_page_dict [ 'version' ]) print ( '\u9875\u9762\u72b6\u6001\u7801\u4e3a\uff1a %s ' % one_page_dict [ 'status' ]) print ( '\u9875\u9762\u8bed\u8a00\u7c7b\u578b\u4e3a\uff1a %s ' % one_page_dict [ 'feed' ][ 'html' ][ 'lang' ]) print ( '\u9875\u9762meta\u4fe1\u606f\u4e3a\uff1ameta-content= %s meta-name= %s ' % ( one_page_dict [ 'feed' ][ 'meta' ][ 'content' ], one_page_dict [ 'feed' ][ 'meta' ][ 'name' ])) if __name__ == '__main__' : url_list = [ 'http://www.baidu.com' , 'http://www.vmall.com' , 'http://www.taobao.com' ] for one_url in url_list : print ( '\u5f53\u524durl\u4e3a--->' , one_url ) try : test ( one_url ) except : print ( '*' * 20 ) print ( '-' * 20 ) \u7528 feedparser.parse \u83b7\u53d6 Google Trend Hottrend RSS feed \u5217\u8868 \u00b6 GTrend.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 import feedparser import ssl #National Variables dict_nations = { 'UNITED_STATES' : 'p1' , 'ARGENTINA' : 'p30' , 'AUSTRALIA' : 'p8' , 'AUSTRIA' : 'p44' , 'BELGIUM' : 'p41' , 'BRAZIL' : 'p18' , 'CANADA' : 'p13' , 'CHILE' : 'p38' , 'COLOMBIA' : 'p32' , 'CZECHIA' : 'p43' , 'DENMARK' : 'p49' , 'EGYPT' : 'p29' , 'FINLAND' : 'p50' , 'FRANCE' : 'p16' , 'GERMANY' : 'p15' , 'GREECE' : 'p48' , 'HONG_KONG' : 'p10' , 'HUNGARY' : 'p45' , 'INDIA' : 'p3' , 'INDONESIA' : 'p19' , 'IRELAND' : 'p54' , 'ISRAEL' : 'p6' , 'ITALY' : 'p27' , 'JAPAN' : 'p4' , 'KENYA' : 'p37' , 'MALAYSIA' : 'p34' , 'MEXICO' : 'p21' , 'NETHERLANDS' : 'p17' , 'NEW_ZEALAND' : 'p53' , 'NIGERIA' : 'p52' , 'NORWAY' : 'p51' , 'PHILIPPINES' : 'p25' , 'POLAND' : 'p31' , 'PORTUGAL' : 'p47' , 'ROMANIA' : 'p39' , 'RUSSIA' : 'p14' , 'SAUDI_ARABIA' : 'p36' , 'SINGAPORE' : 'p5' , 'SOUTH_AFRICA' : 'p40' , 'SOUTH_KOREA' : 'p23' , 'SPAIN' : 'p26' , 'SWEDEN' : 'p42' , 'SWITZERLAND' : 'p46' , 'TAIWAN' : 'p12' , 'THAILAND' : 'p33' , 'TURKEY' : 'p24' , 'UKRAINE' : 'p35' , 'UNITED_KINGDOM' : 'p9' , 'VIETNAM' : 'p28' , } # EXAMPLE SEARCH SYNTAX # United States: # https://trends.google.com/trends/hottrends#pn=p1 # United States RSS: # https://trends.google.com/trends/hottrends/atom/feed?pn=p1 # United Kingdom: # https://trends.google.com/trends/hottrends#pn=p9 # United Kingdom RSS: # https://trends.google.com/trends/hottrends/atom/feed?pn=p9 TRENDING_URL = 'http://www.google.com/trends/hottrends/atom/feed?pn= {} ' def hot ( feed_url ): \"\"\"Returns a list of hit terms via google trends \"\"\" try : listing = feedparser . parse ( feed_url )[ 'entries' ] trends = [ item [ 'title' ] for item in listing ] return trends except Exception as e : print ( 'ERR hot terms failed!' , str ( e )) return None if __name__ == \"__main__\" : if hasattr ( ssl , '_create_unverified_context' ): ssl . _create_default_https_context = ssl . _create_unverified_context print ( hot ( TRENDING_URL . format ( dict_nations . get ( \"UNITED_STATES\" )))) \u4e0b\u6587\u4e2d\u4e00\u5171\u5c55\u793a\u4e86feedparser.parse\u65b9\u6cd5\u7684\u4ee3\u7801\u7247\u6bb5 \u00b6 twitterbot.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # \u9700\u8981\u5c0e\u5165\u6a21\u584a: import feedparser [as \u5225\u540d] # \u6216\u8005: from feedparser import parse [as \u5225\u540d] def run ( self ): for feed in self . feeds : parsed_feed = feedparser . parse ( feed ) for entry in parsed_feed . entries : if entryMatches ( entry ): self . n_seen += 1 # If no ID provided, use the link as ID if \"id\" not in entry : entry . id = entry . link if entry . id not in self . posted : self . sendTweet ( entry ) # Bail out if we have reached max number of tweets if self . throttle > 0 and self . n_tweeted >= self . throttle : print ( f \"Max number of papers met ( { self . throttle } ), stopping now\" ) return # Print statistics of a given run","title":"Python feedparser \u6559\u7a0b"},{"location":"pages/python/pytutorial/python-feedparser/#Python-feedparser--\u6559\u7a0b","text":"feedparser \u53f7\u79f0\u662f\u4e00\u4e2a universal feed parser\uff0c\u4f7f\u7528\u5b83\u6211\u4eec\u53ef\u8f7b\u677e\u5730\u5b9e\u73b0\u4ece\u4efb\u4f55 RSS \u6216 Atom \u8ba2\u9605\u6e90\u5f97\u5230\u6807\u9898\u3001\u94fe\u63a5\u548c\u6587\u7ae0\u7684\u6761\u76ee\u4e86\u3002 \u4f7f\u7528\uff1a pip install feedparser \u6765\u5b89\u88c5\u6a21\u5757 RSS\u662fRDF Site Summary \u7684\u7f29\u5199\uff08RDF\u662fResource Description Framework\u7684\u7f29\u5199 \uff09\uff0c\u662f\u6307\u5c06\u7f51\u7ad9\u6458\u8981\u7528xml\u8bed\u8a00\u63cf\u8ff0\u3002 \u4f7f\u7528feedparser\u6a21\u5757\u6765\u8fdb\u884c\u89e3\u6790\u8fc7\u6ee4\u9875\u9762\uff0c\u8fd4\u56de\u9700\u8981\u7684\u4fe1\u606f\uff1a","title":"Python feedparser  \u6559\u7a0b"},{"location":"pages/python/pytutorial/python-feedparser/#\u7528-feedparserparse-\u8f93\u51fa\u9875\u9762\u4fe1\u606f","text":"test_feedparser.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #encoding:utf-8 import feedparser def test ( url = 'http://blog.csdn.net/together_cz/article' ): '''\u5b66\u4e60\u4f7f\u7528feedparser \u8f93\u5165\uff1aurl \u8f93\u51fa\uff1a\u9875\u9762\u4fe1\u606f ''' one_page_dict = feedparser . parse ( url ) #\u89e3\u6790\u5f97\u5230\u7684\u662f\u4e00\u4e2a\u5b57\u5178 print ( one_page_dict ) ''' \u8f93\u51fa\u5b57\u5178\u4e2d\u7684\u952e\u503c\u6709\u54ea\u4e9b\uff0c\u4e00\u5171\u670910\u4e2d\u5982\u4e0b\uff1a ['feed', 'status', 'version', 'encoding', 'bozo', 'headers', 'href', 'namespaces', 'entries', 'bozo_exception'] ''' print ( one_page_dict . keys ()) print ( '-' * 20 ) print ( '\u8bbf\u95ee\u9875\u9762\u94fe\u63a5href\u4e3a\uff1a %s ' % one_page_dict [ 'href' ]) print ( '\u9875\u9762\u8fd4\u56deheaders\u4fe1\u606f\u4e3a\uff1a %s ' % ne_page_dict [ 'headers' ]) print ( '\u9875\u9762version\u4fe1\u606f\u4e3a\uff1a %s ' % one_page_dict [ 'version' ]) print ( '\u9875\u9762\u72b6\u6001\u7801\u4e3a\uff1a %s ' % one_page_dict [ 'status' ]) print ( '\u9875\u9762\u8bed\u8a00\u7c7b\u578b\u4e3a\uff1a %s ' % one_page_dict [ 'feed' ][ 'html' ][ 'lang' ]) print ( '\u9875\u9762meta\u4fe1\u606f\u4e3a\uff1ameta-content= %s meta-name= %s ' % ( one_page_dict [ 'feed' ][ 'meta' ][ 'content' ], one_page_dict [ 'feed' ][ 'meta' ][ 'name' ])) if __name__ == '__main__' : url_list = [ 'http://www.baidu.com' , 'http://www.vmall.com' , 'http://www.taobao.com' ] for one_url in url_list : print ( '\u5f53\u524durl\u4e3a--->' , one_url ) try : test ( one_url ) except : print ( '*' * 20 ) print ( '-' * 20 )","title":"\u7528 feedparser.parse \u8f93\u51fa\u9875\u9762\u4fe1\u606f"},{"location":"pages/python/pytutorial/python-feedparser/#\u7528-feedparserparse-\u83b7\u53d6-Google-Trend-Hottrend-RSS-feed-\u5217\u8868","text":"GTrend.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 import feedparser import ssl #National Variables dict_nations = { 'UNITED_STATES' : 'p1' , 'ARGENTINA' : 'p30' , 'AUSTRALIA' : 'p8' , 'AUSTRIA' : 'p44' , 'BELGIUM' : 'p41' , 'BRAZIL' : 'p18' , 'CANADA' : 'p13' , 'CHILE' : 'p38' , 'COLOMBIA' : 'p32' , 'CZECHIA' : 'p43' , 'DENMARK' : 'p49' , 'EGYPT' : 'p29' , 'FINLAND' : 'p50' , 'FRANCE' : 'p16' , 'GERMANY' : 'p15' , 'GREECE' : 'p48' , 'HONG_KONG' : 'p10' , 'HUNGARY' : 'p45' , 'INDIA' : 'p3' , 'INDONESIA' : 'p19' , 'IRELAND' : 'p54' , 'ISRAEL' : 'p6' , 'ITALY' : 'p27' , 'JAPAN' : 'p4' , 'KENYA' : 'p37' , 'MALAYSIA' : 'p34' , 'MEXICO' : 'p21' , 'NETHERLANDS' : 'p17' , 'NEW_ZEALAND' : 'p53' , 'NIGERIA' : 'p52' , 'NORWAY' : 'p51' , 'PHILIPPINES' : 'p25' , 'POLAND' : 'p31' , 'PORTUGAL' : 'p47' , 'ROMANIA' : 'p39' , 'RUSSIA' : 'p14' , 'SAUDI_ARABIA' : 'p36' , 'SINGAPORE' : 'p5' , 'SOUTH_AFRICA' : 'p40' , 'SOUTH_KOREA' : 'p23' , 'SPAIN' : 'p26' , 'SWEDEN' : 'p42' , 'SWITZERLAND' : 'p46' , 'TAIWAN' : 'p12' , 'THAILAND' : 'p33' , 'TURKEY' : 'p24' , 'UKRAINE' : 'p35' , 'UNITED_KINGDOM' : 'p9' , 'VIETNAM' : 'p28' , } # EXAMPLE SEARCH SYNTAX # United States: # https://trends.google.com/trends/hottrends#pn=p1 # United States RSS: # https://trends.google.com/trends/hottrends/atom/feed?pn=p1 # United Kingdom: # https://trends.google.com/trends/hottrends#pn=p9 # United Kingdom RSS: # https://trends.google.com/trends/hottrends/atom/feed?pn=p9 TRENDING_URL = 'http://www.google.com/trends/hottrends/atom/feed?pn= {} ' def hot ( feed_url ): \"\"\"Returns a list of hit terms via google trends \"\"\" try : listing = feedparser . parse ( feed_url )[ 'entries' ] trends = [ item [ 'title' ] for item in listing ] return trends except Exception as e : print ( 'ERR hot terms failed!' , str ( e )) return None if __name__ == \"__main__\" : if hasattr ( ssl , '_create_unverified_context' ): ssl . _create_default_https_context = ssl . _create_unverified_context print ( hot ( TRENDING_URL . format ( dict_nations . get ( \"UNITED_STATES\" ))))","title":"\u7528 feedparser.parse \u83b7\u53d6 Google Trend Hottrend RSS feed \u5217\u8868"},{"location":"pages/python/pytutorial/python-feedparser/#\u4e0b\u6587\u4e2d\u4e00\u5171\u5c55\u793a\u4e86feedparserparse\u65b9\u6cd5\u7684\u4ee3\u7801\u7247\u6bb5","text":"twitterbot.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # \u9700\u8981\u5c0e\u5165\u6a21\u584a: import feedparser [as \u5225\u540d] # \u6216\u8005: from feedparser import parse [as \u5225\u540d] def run ( self ): for feed in self . feeds : parsed_feed = feedparser . parse ( feed ) for entry in parsed_feed . entries : if entryMatches ( entry ): self . n_seen += 1 # If no ID provided, use the link as ID if \"id\" not in entry : entry . id = entry . link if entry . id not in self . posted : self . sendTweet ( entry ) # Bail out if we have reached max number of tweets if self . throttle > 0 and self . n_tweeted >= self . throttle : print ( f \"Max number of papers met ( { self . throttle } ), stopping now\" ) return # Print statistics of a given run","title":"\u4e0b\u6587\u4e2d\u4e00\u5171\u5c55\u793a\u4e86feedparser.parse\u65b9\u6cd5\u7684\u4ee3\u7801\u7247\u6bb5"},{"location":"pages/python/pytutorial/python-forloop/","text":"Python for \u5faa\u73af \u00b6 Python for loop \u6559\u7a0b \u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528 for \u8bed\u53e5\u5728 Python \u4e2d\u521b\u5efa\u5faa\u73af\u3002 Python \u5faa\u73af\u5b9a\u4e49 \u00b6 \u5faa\u73af\u662f\u8fde\u7eed\u91cd\u590d\u7684\u6307\u4ee4\u5e8f\u5217\uff0c\u76f4\u5230\u8fbe\u5230\u7279\u5b9a\u6761\u4ef6\u4e3a\u6b62\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u9879\u76ee\u96c6\u5408\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u5faa\u73af\u4ee5\u904d\u5386\u8be5\u96c6\u5408\u7684\u6240\u6709\u5143\u7d20\u3002 \u53ef\u4ee5\u4f7f\u7528 for \u6216 while \u8bed\u53e5\u521b\u5efa Python \u4e2d\u7684\u5faa\u73af\u3002 Python \u8bed\u53e5 \u00b6 Python for \u8bed\u53e5\u6309\u7167\u5b83\u4eec\u5728\u5e8f\u5217\u4e2d\u51fa\u73b0\u7684\u987a\u5e8f\u904d\u5386\u4efb\u4f55\u5e8f\u5217\u7684\u9879\uff08\u4f8b\u5982\u5217\u8868\u6216\u5b57\u7b26\u4e32\uff09\u3002 1 2 for var in sequence: do_statement(s) \u4e0a\u9762\u662f Python for \u8bed\u53e5\u7684\u4e00\u822c\u8bed\u6cd5\u3002 Python \u7684\u5b57\u7b26\u4e32\u5faa\u73af \u00b6 \u4ee5\u4e0b\u793a\u4f8b\u4f7f\u7528 Python for \u8bed\u53e5\u904d\u5386\u5b57\u7b26\u4e32\u3002 for_loop_string.py 1 2 3 4 5 6 7 #!/usr/bin/python3 word = \"cloud\" for let in word: print(let) \u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 \u901a\u8fc7 for \u5faa\u73af\uff0c\u6211\u4eec\u5c06\u5355\u8bcd\u7684\u5b57\u6bcd\u4e00\u4e00\u6253\u5370\u5230\u7ec8\u7aef\u3002 1 2 3 4 5 6 $ ./for_loop_string.py c l o u d \u8fd9\u662f\u793a\u4f8b\u7684\u8f93\u51fa\u3002 Python for \u5faa\u73af\u7684 else \u00b6 for \u5faa\u73af\u5177\u6709\u53ef\u9009\u7684 else \u8bed\u53e5\uff0c\u8be5\u8bed\u53e5\u5728\u5faa\u73af\u5b8c\u6210\u65f6\u6267\u884c\u3002 for_loop_else.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/python3 words = [\"cup\", \"star\", \"monkey\", \"bottle\", \"paper\", \"door\"] for word in words: print(word) else: print(\"Finished looping\") \u6211\u4eec\u4f7f\u7528 for \u5faa\u73af\u904d\u5386\u5355\u8bcd\u5217\u8868\u3002 \u8fed\u4ee3\u7ed3\u675f\u540e\uff0c\u6211\u4eec\u5c06\u6253\u5370\u201c Finished looping\u201d\u6d88\u606f\uff0c\u8be5\u6d88\u606f\u4f4d\u4e8e else \u5173\u952e\u5b57\u4e4b\u540e\u7684\u4e3b\u4f53\u4e2d\u3002 1 2 3 4 5 6 7 8 $ ./for_loop_else.py cup star monkey bottle paper door Finished looping \u8fd9\u662f\u793a\u4f8b\u7684\u8f93\u51fa\u3002 Python \u7684\u8303\u56f4\u5faa\u73af \u00b6 Python range() \u51fd\u6570\u751f\u6210\u4e00\u4e2a\u6570\u5b57\u5217\u8868\u3002 1 range(n) \u8be5\u51fd\u6570\u751f\u6210\u6570\u5b57 0 \u2026 n-1\u3002 1 range(start, stop, [step]) \u8be5\u51fd\u6570\u751f\u6210\u4e00\u4e2a\u6570\u5b57\u5e8f\u5217\uff1b \u5b83\u4ee5 start \u5f00\u5934\uff0c\u4ee5 stop \u7ed3\u675f\uff0c\u8be5\u5e8f\u5217\u4e2d\u672a\u5305\u542b\u8be5\u5b57\u7b26\u3002 step \u662f\u589e\u91cf\uff0c\u5982\u679c\u672a\u63d0\u4f9b\uff0c\u5219\u9ed8\u8ba4\u4e3a 1\u3002 \u501f\u52a9 range() \u529f\u80fd\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u4ee3\u7801\u5757\u91cd\u590d n \u6b21\u3002 repeating_statement.py 1 2 3 4 5 #!/usr/bin/python3 for i in range(1, 6): print(\"Statement executed {0}\".format(i)) \u8be5\u4ee3\u7801\u793a\u4f8b\u6267\u884c\u8be5\u4ee3\u7801\u5757\u4e94\u6b21\u3002 1 2 3 4 5 6 $ ./repeating_statement.py Statement executed 1 Statement executed 2 Statement executed 3 Statement executed 4 Statement executed 5 \u8fd9\u662f\u8f93\u51fa\u3002 \u5728\u4e0b\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 for \u5faa\u73af\u751f\u6210\u4e24\u4e2a\u6574\u6570\u5e8f\u5217\u3002 for_loop_range.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/python3 for n in range(1, 11): print(n, end=' ') print() for n in range(0, 11, 2): print(n, end=' ') print() \u8be5\u793a\u4f8b\u6253\u5370\u4e24\u4e2a\u6574\u6570\u5e8f\u5217\uff1a1\u30012\uff0c\u2026 10 \u548c 0\u30012\uff0c\u2026 10\u3002 1 2 3 $ ./for_loop_range.py 1 2 3 4 5 6 7 8 9 10 0 2 4 6 8 10 \u8fd9\u662f\u8f93\u51fa\u3002 Python \u904d\u5386\u5143\u7ec4\u548c\u5217\u8868 \u00b6 \u4f7f\u7528 Python for \u5faa\u73af\uff0c\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u5730\u904d\u5386 Python \u5143\u7ec4\u548c\u5217\u8868\u3002 for_loop_tuple_list.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/python3 nums = (1, 2, 3, 4, 5, 6) words = [\"cup\", \"star\", \"monkey\", \"bottle\"] for n in nums: print(n, end=' ') print() for word in words: print(word, end=' ') print() \u8be5\u4ee3\u7801\u793a\u4f8b\u8f93\u51fa\u4e00\u4e2a\u5143\u7ec4\u548c\u4e00\u4e2a\u5217\u8868\u7684\u5143\u7d20\u3002 1 2 3 $ ./for_loop_tuple_list.py 1 2 3 4 5 6 cup star monkey bottle \u8fd9\u662f\u8f93\u51fa\u3002 Python \u7d22\u5f15\u5faa\u73af \u00b6 \u6709\u65f6\u6211\u4eec\u4e5f\u9700\u8981\u83b7\u53d6\u5143\u7d20\u7684\u7d22\u5f15\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 enumerate() \u529f\u80fd\u3002 for_loop_index.py 1 2 3 4 5 6 7 #!/usr/bin/python3 words = (\"cup\", \"star\", \"monkey\", \"bottle\", \"paper\", \"door\") for idx, word in enumerate(words): print(\"{0}: {1}\".format(idx, word)) \u501f\u52a9 enumerate() \u51fd\u6570\uff0c\u6211\u4eec\u5c06\u6253\u5370\u5217\u8868\u5143\u7d20\u53ca\u5176\u7d22\u5f15\u3002 1 2 3 4 5 6 7 $ ./for_loop_index.py 0: cup 1: star 2: monkey 3: bottle 4: paper 5: door Python \u904d\u5386\u5b57\u5178 \u00b6 \u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u904d\u5386\u4e86 Python \u5b57\u5178\u3002 for_loop_dictionary.py 1 2 3 4 5 6 7 #!/usr/bin/python3 data = { \"de\": \"Germany\", \"sk\": \"Slovakia\", \"hu\": \"Hungary\", \"ru\": \"Russia\" } for k, v in data.items(): print(\"{0} is an abbreviation for {1}\".format(k, v)) \u8be5\u4ee3\u7801\u793a\u4f8b\u5c06\u6253\u5370 Python \u5b57\u5178\u7684\u952e\u548c\u503c\u3002 1 2 3 4 5 $ ./for_loop_dictionary.py sk is an abbreviation for Slovakia ru is an abbreviation for Russia hu is an abbreviation for Hungary de is an abbreviation for Germany \u8fd9\u662f\u8f93\u51fa\u3002 Python \u5d4c\u5957\u5faa\u73af \u00b6 \u53ef\u4ee5\u5c06 for \u5faa\u73af\u5d4c\u5957\u5230\u53e6\u4e00\u4e2a\u5faa\u73af\u4e2d\u3002 for_loop_nested.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/python3 nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] for i in nums: for e in i: print(e, end=' ') print() \u6211\u4eec\u6709\u4e00\u4e2a\u4e8c\u7ef4\u6574\u6570\u5217\u8868\u3002 \u6211\u4eec\u901a\u8fc7\u4e24\u4e2a for \u5faa\u73af\u904d\u5386\u5143\u7d20\u3002 1 2 3 4 $ ./for_loop_nested.py 1 2 3 4 5 6 7 8 9 \u8fd9\u662f\u8f93\u51fa\u3002 Python for \u5faa\u73af\u7684 zip \u00b6 zip() \u51fd\u6570\u6839\u636e\u7ed9\u5b9a\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61\u521b\u5efa\u4e00\u4e2a\u8fed\u4ee3\u5668\u3002 for_loop_zip.py 1 2 3 4 5 6 7 8 #!/usr/bin/python3 words1 = [\"cup\", \"bottle\", \"table\", \"rock\", \"apple\"] words2 = [\"trousers\", \"nail\", \"head\", \"water\", \"pen\"] for w1, w2 in zip(words1, words2): print(w1, w2) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5728\u4e00\u4e2a for \u5faa\u73af\u4e2d\u8fed\u4ee3\u4e24\u4e2a\u5217\u8868\u3002 1 2 3 4 5 6 $ ./for_loop_zip.py cup trousers bottle nail table head rock water apple pen \u8fd9\u662f\u8f93\u51fa\u3002 Python \u5faa\u73af\u81ea\u5b9a\u4e49\u53ef\u8fed\u4ee3\u5bf9\u8c61 \u00b6 \u5728\u4e0b\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u904d\u5386\u4e86\u4e00\u4e2a\u81ea\u5b9a\u4e49\u8fed\u4ee3\u5668\u3002 for_loop_custom_iterable.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/usr/bin/python3 import random def myrandom(x): i = 0 while i < x: r = random.randint(0, 100) yield r i = i + 1 for r in myrandom(5): print(r) \u8be5\u4ee3\u7801\u793a\u4f8b\u521b\u5efa\u4e00\u4e2a\u751f\u6210\u5668\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u751f\u6210\u968f\u673a\u6574\u6570\u3002 \u901a\u8fc7 for \u5faa\u73af\uff0c\u6211\u4eec\u751f\u6210\u4e94\u4e2a\u968f\u673a\u6574\u6570\u3002 1 2 3 4 5 6 $ ./for_loop_custom_iterable.py 14 43 53 44 70 \u8fd9\u662f\u4e00\u4e2a\u793a\u4f8b\u8f93\u51fa\u3002 Python for \u5faa\u73af break \u00b6 break \u8bed\u53e5\u7ec8\u6b62 for \u5faa\u73af\u3002 for_loop_break.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/python3 import random import itertools for i in itertools.count(): val = random.randint(1, 30) print(val) if (val == 22): break \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u65e0\u9650\u7684 for \u5faa\u73af\u3002 \u6211\u4eec\u4ece 1 \u2026 29 \u751f\u6210\u5e76\u6253\u5370 randon \u6570\u3002 \u5982\u679c\u751f\u6210\u7684\u6570\u5b57\u7b49\u4e8e 22\uff0c\u5219 for \u5faa\u73af\u4ee5 break \u5173\u952e\u5b57\u7ed3\u675f\u3002 1 2 3 4 5 6 7 8 9 10 11 $ ./for_loop_break.py 7 27 2 27 7 9 3 25 15 22 \u8fd9\u662f\u4e00\u4e2a\u793a\u4f8b\u8f93\u51fa\u3002 Python \u5faa\u73af continue \u00b6 continue \u5173\u952e\u5b57\u7528\u4e8e\u4e2d\u65ad\u5f53\u524d\u5faa\u73af\uff0c\u800c\u4e0d\u4f1a\u8df3\u51fa\u6574\u4e2a\u5faa\u73af\u3002 \u5b83\u542f\u52a8\u4e00\u4e2a\u65b0\u7684\u5faa\u73af\u3002 for_loop_continue.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/python3 num = 0 for num in range(1000): num = num + 1 if (num % 2) == 0: continue print(num, end=' ') print() \u6211\u4eec\u6253\u5370\u6240\u6709\u5c0f\u4e8e 1000 \u7684\u6570\u5b57\uff0c\u8fd9\u4e9b\u6570\u5b57\u4e0d\u80fd\u9664\u4ee5 2 \u800c\u6ca1\u6709\u4f59\u6570\u3002","title":"Python for \u5faa\u73af"},{"location":"pages/python/pytutorial/python-forloop/#Python-for-\u5faa\u73af","text":"Python for loop \u6559\u7a0b \u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528 for \u8bed\u53e5\u5728 Python \u4e2d\u521b\u5efa\u5faa\u73af\u3002","title":"Python for \u5faa\u73af"},{"location":"pages/python/pytutorial/python-forloop/#Python-\u5faa\u73af\u5b9a\u4e49","text":"\u5faa\u73af\u662f\u8fde\u7eed\u91cd\u590d\u7684\u6307\u4ee4\u5e8f\u5217\uff0c\u76f4\u5230\u8fbe\u5230\u7279\u5b9a\u6761\u4ef6\u4e3a\u6b62\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u9879\u76ee\u96c6\u5408\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u5faa\u73af\u4ee5\u904d\u5386\u8be5\u96c6\u5408\u7684\u6240\u6709\u5143\u7d20\u3002 \u53ef\u4ee5\u4f7f\u7528 for \u6216 while \u8bed\u53e5\u521b\u5efa Python \u4e2d\u7684\u5faa\u73af\u3002","title":"Python \u5faa\u73af\u5b9a\u4e49"},{"location":"pages/python/pytutorial/python-forloop/#Python-\u8bed\u53e5","text":"Python for \u8bed\u53e5\u6309\u7167\u5b83\u4eec\u5728\u5e8f\u5217\u4e2d\u51fa\u73b0\u7684\u987a\u5e8f\u904d\u5386\u4efb\u4f55\u5e8f\u5217\u7684\u9879\uff08\u4f8b\u5982\u5217\u8868\u6216\u5b57\u7b26\u4e32\uff09\u3002 1 2 for var in sequence: do_statement(s) \u4e0a\u9762\u662f Python for \u8bed\u53e5\u7684\u4e00\u822c\u8bed\u6cd5\u3002","title":"Python \u8bed\u53e5"},{"location":"pages/python/pytutorial/python-forloop/#Python-\u7684\u5b57\u7b26\u4e32\u5faa\u73af","text":"\u4ee5\u4e0b\u793a\u4f8b\u4f7f\u7528 Python for \u8bed\u53e5\u904d\u5386\u5b57\u7b26\u4e32\u3002 for_loop_string.py 1 2 3 4 5 6 7 #!/usr/bin/python3 word = \"cloud\" for let in word: print(let) \u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 \u901a\u8fc7 for \u5faa\u73af\uff0c\u6211\u4eec\u5c06\u5355\u8bcd\u7684\u5b57\u6bcd\u4e00\u4e00\u6253\u5370\u5230\u7ec8\u7aef\u3002 1 2 3 4 5 6 $ ./for_loop_string.py c l o u d \u8fd9\u662f\u793a\u4f8b\u7684\u8f93\u51fa\u3002","title":"Python \u7684\u5b57\u7b26\u4e32\u5faa\u73af"},{"location":"pages/python/pytutorial/python-forloop/#Python-for\u5faa\u73af\u7684else","text":"for \u5faa\u73af\u5177\u6709\u53ef\u9009\u7684 else \u8bed\u53e5\uff0c\u8be5\u8bed\u53e5\u5728\u5faa\u73af\u5b8c\u6210\u65f6\u6267\u884c\u3002 for_loop_else.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/python3 words = [\"cup\", \"star\", \"monkey\", \"bottle\", \"paper\", \"door\"] for word in words: print(word) else: print(\"Finished looping\") \u6211\u4eec\u4f7f\u7528 for \u5faa\u73af\u904d\u5386\u5355\u8bcd\u5217\u8868\u3002 \u8fed\u4ee3\u7ed3\u675f\u540e\uff0c\u6211\u4eec\u5c06\u6253\u5370\u201c Finished looping\u201d\u6d88\u606f\uff0c\u8be5\u6d88\u606f\u4f4d\u4e8e else \u5173\u952e\u5b57\u4e4b\u540e\u7684\u4e3b\u4f53\u4e2d\u3002 1 2 3 4 5 6 7 8 $ ./for_loop_else.py cup star monkey bottle paper door Finished looping \u8fd9\u662f\u793a\u4f8b\u7684\u8f93\u51fa\u3002","title":"Python for\u5faa\u73af\u7684else"},{"location":"pages/python/pytutorial/python-forloop/#Python-\u7684\u8303\u56f4\u5faa\u73af","text":"Python range() \u51fd\u6570\u751f\u6210\u4e00\u4e2a\u6570\u5b57\u5217\u8868\u3002 1 range(n) \u8be5\u51fd\u6570\u751f\u6210\u6570\u5b57 0 \u2026 n-1\u3002 1 range(start, stop, [step]) \u8be5\u51fd\u6570\u751f\u6210\u4e00\u4e2a\u6570\u5b57\u5e8f\u5217\uff1b \u5b83\u4ee5 start \u5f00\u5934\uff0c\u4ee5 stop \u7ed3\u675f\uff0c\u8be5\u5e8f\u5217\u4e2d\u672a\u5305\u542b\u8be5\u5b57\u7b26\u3002 step \u662f\u589e\u91cf\uff0c\u5982\u679c\u672a\u63d0\u4f9b\uff0c\u5219\u9ed8\u8ba4\u4e3a 1\u3002 \u501f\u52a9 range() \u529f\u80fd\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u4ee3\u7801\u5757\u91cd\u590d n \u6b21\u3002 repeating_statement.py 1 2 3 4 5 #!/usr/bin/python3 for i in range(1, 6): print(\"Statement executed {0}\".format(i)) \u8be5\u4ee3\u7801\u793a\u4f8b\u6267\u884c\u8be5\u4ee3\u7801\u5757\u4e94\u6b21\u3002 1 2 3 4 5 6 $ ./repeating_statement.py Statement executed 1 Statement executed 2 Statement executed 3 Statement executed 4 Statement executed 5 \u8fd9\u662f\u8f93\u51fa\u3002 \u5728\u4e0b\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 for \u5faa\u73af\u751f\u6210\u4e24\u4e2a\u6574\u6570\u5e8f\u5217\u3002 for_loop_range.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/python3 for n in range(1, 11): print(n, end=' ') print() for n in range(0, 11, 2): print(n, end=' ') print() \u8be5\u793a\u4f8b\u6253\u5370\u4e24\u4e2a\u6574\u6570\u5e8f\u5217\uff1a1\u30012\uff0c\u2026 10 \u548c 0\u30012\uff0c\u2026 10\u3002 1 2 3 $ ./for_loop_range.py 1 2 3 4 5 6 7 8 9 10 0 2 4 6 8 10 \u8fd9\u662f\u8f93\u51fa\u3002","title":"Python \u7684\u8303\u56f4\u5faa\u73af"},{"location":"pages/python/pytutorial/python-forloop/#Python-\u904d\u5386\u5143\u7ec4\u548c\u5217\u8868","text":"\u4f7f\u7528 Python for \u5faa\u73af\uff0c\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u5730\u904d\u5386 Python \u5143\u7ec4\u548c\u5217\u8868\u3002 for_loop_tuple_list.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/python3 nums = (1, 2, 3, 4, 5, 6) words = [\"cup\", \"star\", \"monkey\", \"bottle\"] for n in nums: print(n, end=' ') print() for word in words: print(word, end=' ') print() \u8be5\u4ee3\u7801\u793a\u4f8b\u8f93\u51fa\u4e00\u4e2a\u5143\u7ec4\u548c\u4e00\u4e2a\u5217\u8868\u7684\u5143\u7d20\u3002 1 2 3 $ ./for_loop_tuple_list.py 1 2 3 4 5 6 cup star monkey bottle \u8fd9\u662f\u8f93\u51fa\u3002","title":"Python \u904d\u5386\u5143\u7ec4\u548c\u5217\u8868"},{"location":"pages/python/pytutorial/python-forloop/#Python-\u7d22\u5f15\u5faa\u73af","text":"\u6709\u65f6\u6211\u4eec\u4e5f\u9700\u8981\u83b7\u53d6\u5143\u7d20\u7684\u7d22\u5f15\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 enumerate() \u529f\u80fd\u3002 for_loop_index.py 1 2 3 4 5 6 7 #!/usr/bin/python3 words = (\"cup\", \"star\", \"monkey\", \"bottle\", \"paper\", \"door\") for idx, word in enumerate(words): print(\"{0}: {1}\".format(idx, word)) \u501f\u52a9 enumerate() \u51fd\u6570\uff0c\u6211\u4eec\u5c06\u6253\u5370\u5217\u8868\u5143\u7d20\u53ca\u5176\u7d22\u5f15\u3002 1 2 3 4 5 6 7 $ ./for_loop_index.py 0: cup 1: star 2: monkey 3: bottle 4: paper 5: door","title":"Python \u7d22\u5f15\u5faa\u73af"},{"location":"pages/python/pytutorial/python-forloop/#Python-\u904d\u5386\u5b57\u5178","text":"\u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u904d\u5386\u4e86 Python \u5b57\u5178\u3002 for_loop_dictionary.py 1 2 3 4 5 6 7 #!/usr/bin/python3 data = { \"de\": \"Germany\", \"sk\": \"Slovakia\", \"hu\": \"Hungary\", \"ru\": \"Russia\" } for k, v in data.items(): print(\"{0} is an abbreviation for {1}\".format(k, v)) \u8be5\u4ee3\u7801\u793a\u4f8b\u5c06\u6253\u5370 Python \u5b57\u5178\u7684\u952e\u548c\u503c\u3002 1 2 3 4 5 $ ./for_loop_dictionary.py sk is an abbreviation for Slovakia ru is an abbreviation for Russia hu is an abbreviation for Hungary de is an abbreviation for Germany \u8fd9\u662f\u8f93\u51fa\u3002","title":"Python \u904d\u5386\u5b57\u5178"},{"location":"pages/python/pytutorial/python-forloop/#Python-\u5d4c\u5957\u5faa\u73af","text":"\u53ef\u4ee5\u5c06 for \u5faa\u73af\u5d4c\u5957\u5230\u53e6\u4e00\u4e2a\u5faa\u73af\u4e2d\u3002 for_loop_nested.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/python3 nums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] for i in nums: for e in i: print(e, end=' ') print() \u6211\u4eec\u6709\u4e00\u4e2a\u4e8c\u7ef4\u6574\u6570\u5217\u8868\u3002 \u6211\u4eec\u901a\u8fc7\u4e24\u4e2a for \u5faa\u73af\u904d\u5386\u5143\u7d20\u3002 1 2 3 4 $ ./for_loop_nested.py 1 2 3 4 5 6 7 8 9 \u8fd9\u662f\u8f93\u51fa\u3002","title":"Python \u5d4c\u5957\u5faa\u73af"},{"location":"pages/python/pytutorial/python-forloop/#Python-for\u5faa\u73af\u7684zip","text":"zip() \u51fd\u6570\u6839\u636e\u7ed9\u5b9a\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61\u521b\u5efa\u4e00\u4e2a\u8fed\u4ee3\u5668\u3002 for_loop_zip.py 1 2 3 4 5 6 7 8 #!/usr/bin/python3 words1 = [\"cup\", \"bottle\", \"table\", \"rock\", \"apple\"] words2 = [\"trousers\", \"nail\", \"head\", \"water\", \"pen\"] for w1, w2 in zip(words1, words2): print(w1, w2) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5728\u4e00\u4e2a for \u5faa\u73af\u4e2d\u8fed\u4ee3\u4e24\u4e2a\u5217\u8868\u3002 1 2 3 4 5 6 $ ./for_loop_zip.py cup trousers bottle nail table head rock water apple pen \u8fd9\u662f\u8f93\u51fa\u3002","title":"Python for\u5faa\u73af\u7684zip"},{"location":"pages/python/pytutorial/python-forloop/#Python-\u5faa\u73af\u81ea\u5b9a\u4e49\u53ef\u8fed\u4ee3\u5bf9\u8c61","text":"\u5728\u4e0b\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u904d\u5386\u4e86\u4e00\u4e2a\u81ea\u5b9a\u4e49\u8fed\u4ee3\u5668\u3002 for_loop_custom_iterable.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/usr/bin/python3 import random def myrandom(x): i = 0 while i < x: r = random.randint(0, 100) yield r i = i + 1 for r in myrandom(5): print(r) \u8be5\u4ee3\u7801\u793a\u4f8b\u521b\u5efa\u4e00\u4e2a\u751f\u6210\u5668\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u751f\u6210\u968f\u673a\u6574\u6570\u3002 \u901a\u8fc7 for \u5faa\u73af\uff0c\u6211\u4eec\u751f\u6210\u4e94\u4e2a\u968f\u673a\u6574\u6570\u3002 1 2 3 4 5 6 $ ./for_loop_custom_iterable.py 14 43 53 44 70 \u8fd9\u662f\u4e00\u4e2a\u793a\u4f8b\u8f93\u51fa\u3002","title":"Python \u5faa\u73af\u81ea\u5b9a\u4e49\u53ef\u8fed\u4ee3\u5bf9\u8c61"},{"location":"pages/python/pytutorial/python-forloop/#Python-for\u5faa\u73afbreak","text":"break \u8bed\u53e5\u7ec8\u6b62 for \u5faa\u73af\u3002 for_loop_break.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/python3 import random import itertools for i in itertools.count(): val = random.randint(1, 30) print(val) if (val == 22): break \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u65e0\u9650\u7684 for \u5faa\u73af\u3002 \u6211\u4eec\u4ece 1 \u2026 29 \u751f\u6210\u5e76\u6253\u5370 randon \u6570\u3002 \u5982\u679c\u751f\u6210\u7684\u6570\u5b57\u7b49\u4e8e 22\uff0c\u5219 for \u5faa\u73af\u4ee5 break \u5173\u952e\u5b57\u7ed3\u675f\u3002 1 2 3 4 5 6 7 8 9 10 11 $ ./for_loop_break.py 7 27 2 27 7 9 3 25 15 22 \u8fd9\u662f\u4e00\u4e2a\u793a\u4f8b\u8f93\u51fa\u3002","title":"Python for\u5faa\u73afbreak"},{"location":"pages/python/pytutorial/python-forloop/#Python-\u5faa\u73afcontinue","text":"continue \u5173\u952e\u5b57\u7528\u4e8e\u4e2d\u65ad\u5f53\u524d\u5faa\u73af\uff0c\u800c\u4e0d\u4f1a\u8df3\u51fa\u6574\u4e2a\u5faa\u73af\u3002 \u5b83\u542f\u52a8\u4e00\u4e2a\u65b0\u7684\u5faa\u73af\u3002 for_loop_continue.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/python3 num = 0 for num in range(1000): num = num + 1 if (num % 2) == 0: continue print(num, end=' ') print() \u6211\u4eec\u6253\u5370\u6240\u6709\u5c0f\u4e8e 1000 \u7684\u6570\u5b57\uff0c\u8fd9\u4e9b\u6570\u5b57\u4e0d\u80fd\u9664\u4ee5 2 \u800c\u6ca1\u6709\u4f59\u6570\u3002","title":"Python \u5faa\u73afcontinue"},{"location":"pages/python/pytutorial/python-fstring/","text":"Python f \u5b57\u7b26\u4e32\u6559\u7a0b \u00b6 Python f \u5b57\u7b26\u4e32\u6559\u7a0b \u663e\u793a\u4e86\u5982\u4f55\u4f7f\u7528 f \u5b57\u7b26\u4e32\u5728 Python \u4e2d\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3002 Python f \u5b57\u7b26\u4e32 \u00b6 Python f-string \u662f\u6267\u884c\u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u7684\u6700\u65b0 Python \u8bed\u6cd5\u3002 \u81ea Python 3.6 \u8d77\u53ef\u7528\u3002 Python f \u5b57\u7b26\u4e32\u63d0\u4f9b\u4e86\u4e00\u79cd\u66f4\u5feb\uff0c\u66f4\u6613\u8bfb\uff0c\u66f4\u7b80\u660e\u4e14\u4e0d\u6613\u51fa\u9519\u7684\u5728 Python \u4e2d\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u65b9\u5f0f\u3002 f \u5b57\u7b26\u4e32\u7684\u524d\u7f00\u4e3a f \uff0c\u5e76\u4f7f\u7528 {} \u62ec\u53f7\u8bc4\u4f30\u503c\u3002\u4f8b\u5982\uff1a f'{price:.3}' \uff0c\u5176\u4e2d price \u662f\u53d8\u91cf\u540d\u3002 \u5728\u5192\u53f7\u540e\u6307\u5b9a\u7528\u4e8e\u7c7b\u578b\uff0c\u586b\u5145\u6216\u5bf9\u9f50\u7684\u683c\u5f0f\u8bf4\u660e\u7b26\uff1b Python \u5b57\u7b26\u4e32\u683c\u5f0f \u00b6 \u4ee5\u4e0b\u793a\u4f8b\u603b\u7ed3\u4e86 Python \u4e2d\u7684\u5b57\u7b26\u4e32\u683c\u5f0f\u8bbe\u7f6e\u9009\u9879\u3002 formatting_strings.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python3 name = 'Peter' age = 23 print('%s is %d years old' % (name, age)) print('{} is {} years old'.format(name, age)) print(f'{name} is {age} years old') \u8be5\u793a\u4f8b\u4f7f\u7528\u4e24\u4e2a\u53d8\u91cf\u8bbe\u7f6e\u5b57\u7b26\u4e32\u683c\u5f0f\u3002 1 print('%s is %d years old' % (name, age)) \u8fd9\u662f\u6700\u65e7\u7684\u9009\u9879\u3002 \u5b83\u4f7f\u7528 % \u8fd0\u7b97\u7b26\u548c\u7ecf\u5178\u5b57\u7b26\u4e32\u683c\u5f0f\u6307\u5b9a\uff0c\u4f8b\u5982 %s \u548c %d \u3002 1 print('{} is {} years old'.format(name, age)) \u4ece Python 3.0 \u5f00\u59cb\uff0c format() \u51fd\u6570\u88ab\u5f15\u5165\u4ee5\u63d0\u4f9b\u9ad8\u7ea7\u683c\u5f0f\u5316\u9009\u9879\u3002 1 print(f'{name} is {age} years old') \u4ece Python 3.6 \u5f00\u59cb\uff0cPython f \u5b57\u7b26\u4e32\u53ef\u7528\u3002 \u8be5\u5b57\u7b26\u4e32\u5177\u6709 f \u524d\u7f00\uff0c\u5e76\u4f7f\u7528 {} \u8bc4\u4f30\u53d8\u91cf\u3002 1 2 3 4 $ python formatting_string.py Peter is 23 years old Peter is 23 years old Peter is 23 years old Python f \u5b57\u7b26\u4e32\u8868\u8fbe\u5f0f \u00b6 \u6211\u4eec\u53ef\u4ee5\u5c06\u8868\u8fbe\u5f0f\u653e\u5728 {} \u62ec\u53f7\u4e4b\u95f4\u3002 expressions.py 1 2 3 4 5 6 #!/usr/bin/env python3 bags = 3 apples_in_bag = 12 print(f'There are total of {bags * apples_in_bag} apples') \u8be5\u793a\u4f8b\u5bf9 f \u5b57\u7b26\u4e32\u4e2d\u7684\u8868\u8fbe\u5f0f\u6c42\u503c\u3002 1 2 $ python expressions.py There are total of 36 apples Python f \u5b57\u7b26\u4e32\u5b57\u5178 \u00b6 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 f \u5b57\u7b26\u4e32\u4e2d\u7684\u5b57\u5178\u3002 dicts.py 1 2 3 4 5 #!/usr/bin/env python3 user = {'name': 'John Doe', 'occupation': 'gardener'} print(f\"{user['name']} is a {user['occupation']}\") \u8be5\u793a\u4f8b\u4ee5 f \u5b57\u7b26\u4e32\u5f62\u5f0f\u8bc4\u4f30\u5b57\u5178\u3002 1 2 $ python dicts.py John Doe is a gardener Python \u591a\u884c f \u5b57\u7b26\u4e32 \u00b6 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u591a\u884c\u5b57\u7b26\u4e32\u3002 multiline.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python3 name = 'John Doe' age = 32 occupation = 'gardener' msg = ( f'Name: {name}\\n' f'Age: {age}\\n' f'Occupation: {occupation}' ) print(msg) \u8be5\u793a\u4f8b\u663e\u793a\u4e86\u591a\u884c f \u5b57\u7b26\u4e32\u3002 F \u5f26\u653e\u5728\u65b9\u62ec\u53f7\u4e4b\u95f4\uff1b \u6bcf\u4e2a\u5b57\u7b26\u4e32\u524d\u9762\u90fd\u5e26\u6709 f \u5b57\u7b26\u3002 1 2 3 4 $ python multiline.py Name: John Doe Age: 32 Occupation: gardener Python f \u5b57\u7b26\u4e32\u8c03\u7528\u51fd\u6570 \u00b6 \u6211\u4eec\u8fd8\u53ef\u4ee5\u5728 f \u5b57\u7b26\u4e32\u4e2d\u8c03\u7528\u51fd\u6570\u3002 call_function.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python3 def mymax(x, y): return x if x > y else y a = 3 b = 4 print(f'Max of {a} and {b} is {mymax(a, b)}') \u8be5\u793a\u4f8b\u5728 f \u5b57\u7b26\u4e32\u4e2d\u8c03\u7528\u81ea\u5b9a\u4e49\u51fd\u6570\u3002 1 2 $ python call_fun.py Max of 3 and 4 is 4 Python f \u5b57\u7b26\u4e32\u5bf9\u8c61 \u00b6 Python f \u5b57\u7b26\u4e32\u4e5f\u63a5\u53d7\u5bf9\u8c61\u3002 \u5bf9\u8c61\u5fc5\u987b\u5b9a\u4e49\u4e86 __str__() \u6216 __repr__() \u9b54\u672f\u51fd\u6570\u3002 objects.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python3 class User: def __init__(self, name, occupation): self.name = name self.occupation = occupation def __repr__(self): return f\"{self.name} is a {self.occupation}\" u = User('John Doe', 'gardener') print(f'{u}') \u8be5\u793a\u4f8b\u8bc4\u4f30 f \u5b57\u7b26\u4e32\u4e2d\u7684\u5bf9\u8c61\u3002 1 2 $ python objects.py John Doe is a gardener Python F \u5b57\u7b26\u4e32\u8f6c\u4e49\u5b57\u7b26 \u00b6 \u4e0b\u9762\u7684\u793a\u4f8b\u663e\u793a\u5982\u4f55\u5bf9 f \u5b57\u7b26\u4e32\u4e2d\u7684\u67d0\u4e9b\u5b57\u7b26\u8fdb\u884c\u8f6c\u4e49\u3002 escaping.py 1 2 3 #!/usr/bin/env python3 print(f'This was a \\'great\\' film') \u5355\u5f15\u53f7\u4ee5\u53cd\u659c\u6760\u5b57\u7b26\u8f6c\u4e49\u3002 1 2 $ python escaping.py This was a 'great' film Python f \u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u65e5\u671f\u65f6\u95f4 \u00b6 \u4ee5\u4e0b\u793a\u4f8b\u683c\u5f0f\u5316\u65e5\u671f\u65f6\u95f4\u3002 format_datetime.py 1 2 3 4 5 6 7 #!/usr/bin/env python3 import datetime now = datetime.datetime.now() print(f'{now:%Y-%m-%d %H:%M}') \u8be5\u793a\u4f8b\u663e\u793a\u683c\u5f0f\u5316\u7684\u5f53\u524d\u65e5\u671f\u65f6\u95f4\u3002 \u65e5\u671f\u65f6\u95f4\u683c\u5f0f\u8bf4\u660e\u7b26\u4f4d\u4e8e \uff1a \u5b57\u7b26\u4e4b\u540e\u3002 1 2 $ python format_datetime.py 2019-05-11 22:39 Python f \u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u6d6e\u70b9\u6570 \u00b6 \u6d6e\u70b9\u503c\u7684\u540e\u7f00\u4e3a f \u3002 \u6211\u4eec\u8fd8\u53ef\u4ee5\u6307\u5b9a\u7cbe\u5ea6\uff1a\u5c0f\u6570\u4f4d\u6570\u3002 \u7cbe\u5ea6\u662f\u4e00\u4e2a\u70b9\u5b57\u7b26\u540e\u7684\u503c\u3002 format_floats.py 1 2 3 4 5 6 #!/usr/bin/env python3 val = 12.3 print(f'{val:.2f}') print(f'{val:.5f}') \u8be5\u793a\u4f8b\u6253\u5370\u683c\u5f0f\u5316\u7684\u6d6e\u70b9\u503c\u3002 1 2 3 $ python format_floats.py 12.30 12.30000 \u8f93\u51fa\u663e\u793a\u5177\u6709\u4e24\u4f4d\u548c\u4e94\u4e2a\u5c0f\u6570\u4f4d\u7684\u6570\u5b57\u3002 Python f \u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u5bbd\u5ea6 \u00b6 \u5bbd\u5ea6\u8bf4\u660e\u7b26\u8bbe\u7f6e\u503c\u7684\u5bbd\u5ea6\u3002 \u5982\u679c\u8be5\u503c\u77ed\u4e8e\u6307\u5b9a\u7684\u5bbd\u5ea6\uff0c\u5219\u8be5\u503c\u53ef\u4ee5\u7528\u7a7a\u683c\u6216\u5176\u4ed6\u5b57\u7b26\u586b\u5145\u3002 format_width.py 1 2 3 4 #!/usr/bin/env python3 for x in range(1, 11): print(f'{x:02} {x*x:3} {x*x*x:4}') \u8be5\u793a\u4f8b\u6253\u5370\u4e09\u5217\uff0c\u6bcf\u4e2a\u5217\u90fd\u6709\u4e00\u4e2a\u9884\u5b9a\u4e49\u7684\u5bbd\u5ea6\u3002 \u7b2c\u4e00\u5217\u4f7f\u7528 0 \u586b\u5145\u8f83\u77ed\u7684\u503c\u3002 1 2 3 4 5 6 7 8 9 10 11 $ python format_width.py 01 1 1 02 4 8 03 9 27 04 16 64 05 25 125 06 36 216 07 49 343 08 64 512 09 81 729 10 100 1000 Python f \u5b57\u7b26\u4e32\u5bf9\u9f50\u5b57\u7b26\u4e32 \u00b6 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5b57\u7b26\u4e32\u5728\u5de6\u8fb9\u5bf9\u9f50\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 &gt; \u5b57\u7b26\u6765\u5bf9\u9f50\u53f3\u4fa7\u7684\u5b57\u7b26\u4e32\u3002 &gt; \u5b57\u7b26\u5728\u5192\u53f7\u540e\u9762\u3002 justify.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python3 s1 = 'a' s2 = 'ab' s3 = 'abc' s4 = 'abcd' print(f'{s1:>10}') print(f'{s2:>10}') print(f'{s3:>10}') print(f'{s4:>10}') \u6211\u4eec\u6709\u56db\u4e2a\u4e0d\u540c\u957f\u5ea6\u7684\u5f26\u3002 \u6211\u4eec\u5c06\u8f93\u51fa\u7684\u5bbd\u5ea6\u8bbe\u7f6e\u4e3a\u5341\u4e2a\u5b57\u7b26\u3002 \u503c\u5728\u53f3\u5bf9\u9f50\u3002 1 2 3 4 5 $ python justify.py a ab abc abcd Python f \u5b57\u7b26\u4e32\u6570\u5b57\u7b26\u53f7 \u00b6 \u6570\u5b57\u53ef\u4ee5\u5177\u6709\u5404\u79cd\u6570\u5b57\u7b26\u53f7\uff0c\u4f8b\u5982\u5341\u8fdb\u5236\u6216\u5341\u516d\u8fdb\u5236\u3002 format_notations.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python3 a = 300 # hexadecimal print(f\"{a:x}\") # octal print(f\"{a:o}\") # scientific print(f\"{a:e}\") \u8be5\u793a\u4f8b\u4ee5\u4e09\u79cd\u4e0d\u540c\u7684\u8868\u793a\u6cd5\u6253\u5370\u503c\u3002 1 2 3 4 $ python format_notations.py 12c 454 3.000000e+02 \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 Python f \u5b57\u7b26\u4e32\u3002","title":"Python f \u5b57\u7b26\u4e32"},{"location":"pages/python/pytutorial/python-fstring/#Python-f-\u5b57\u7b26\u4e32\u6559\u7a0b","text":"Python f \u5b57\u7b26\u4e32\u6559\u7a0b \u663e\u793a\u4e86\u5982\u4f55\u4f7f\u7528 f \u5b57\u7b26\u4e32\u5728 Python \u4e2d\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3002","title":"Python f \u5b57\u7b26\u4e32\u6559\u7a0b"},{"location":"pages/python/pytutorial/python-fstring/#Python-f-\u5b57\u7b26\u4e32","text":"Python f-string \u662f\u6267\u884c\u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u7684\u6700\u65b0 Python \u8bed\u6cd5\u3002 \u81ea Python 3.6 \u8d77\u53ef\u7528\u3002 Python f \u5b57\u7b26\u4e32\u63d0\u4f9b\u4e86\u4e00\u79cd\u66f4\u5feb\uff0c\u66f4\u6613\u8bfb\uff0c\u66f4\u7b80\u660e\u4e14\u4e0d\u6613\u51fa\u9519\u7684\u5728 Python \u4e2d\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u65b9\u5f0f\u3002 f \u5b57\u7b26\u4e32\u7684\u524d\u7f00\u4e3a f \uff0c\u5e76\u4f7f\u7528 {} \u62ec\u53f7\u8bc4\u4f30\u503c\u3002\u4f8b\u5982\uff1a f'{price:.3}' \uff0c\u5176\u4e2d price \u662f\u53d8\u91cf\u540d\u3002 \u5728\u5192\u53f7\u540e\u6307\u5b9a\u7528\u4e8e\u7c7b\u578b\uff0c\u586b\u5145\u6216\u5bf9\u9f50\u7684\u683c\u5f0f\u8bf4\u660e\u7b26\uff1b","title":"Python f \u5b57\u7b26\u4e32"},{"location":"pages/python/pytutorial/python-fstring/#Python-\u5b57\u7b26\u4e32\u683c\u5f0f","text":"\u4ee5\u4e0b\u793a\u4f8b\u603b\u7ed3\u4e86 Python \u4e2d\u7684\u5b57\u7b26\u4e32\u683c\u5f0f\u8bbe\u7f6e\u9009\u9879\u3002 formatting_strings.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python3 name = 'Peter' age = 23 print('%s is %d years old' % (name, age)) print('{} is {} years old'.format(name, age)) print(f'{name} is {age} years old') \u8be5\u793a\u4f8b\u4f7f\u7528\u4e24\u4e2a\u53d8\u91cf\u8bbe\u7f6e\u5b57\u7b26\u4e32\u683c\u5f0f\u3002 1 print('%s is %d years old' % (name, age)) \u8fd9\u662f\u6700\u65e7\u7684\u9009\u9879\u3002 \u5b83\u4f7f\u7528 % \u8fd0\u7b97\u7b26\u548c\u7ecf\u5178\u5b57\u7b26\u4e32\u683c\u5f0f\u6307\u5b9a\uff0c\u4f8b\u5982 %s \u548c %d \u3002 1 print('{} is {} years old'.format(name, age)) \u4ece Python 3.0 \u5f00\u59cb\uff0c format() \u51fd\u6570\u88ab\u5f15\u5165\u4ee5\u63d0\u4f9b\u9ad8\u7ea7\u683c\u5f0f\u5316\u9009\u9879\u3002 1 print(f'{name} is {age} years old') \u4ece Python 3.6 \u5f00\u59cb\uff0cPython f \u5b57\u7b26\u4e32\u53ef\u7528\u3002 \u8be5\u5b57\u7b26\u4e32\u5177\u6709 f \u524d\u7f00\uff0c\u5e76\u4f7f\u7528 {} \u8bc4\u4f30\u53d8\u91cf\u3002 1 2 3 4 $ python formatting_string.py Peter is 23 years old Peter is 23 years old Peter is 23 years old","title":"Python \u5b57\u7b26\u4e32\u683c\u5f0f"},{"location":"pages/python/pytutorial/python-fstring/#Python-f-\u5b57\u7b26\u4e32\u8868\u8fbe\u5f0f","text":"\u6211\u4eec\u53ef\u4ee5\u5c06\u8868\u8fbe\u5f0f\u653e\u5728 {} \u62ec\u53f7\u4e4b\u95f4\u3002 expressions.py 1 2 3 4 5 6 #!/usr/bin/env python3 bags = 3 apples_in_bag = 12 print(f'There are total of {bags * apples_in_bag} apples') \u8be5\u793a\u4f8b\u5bf9 f \u5b57\u7b26\u4e32\u4e2d\u7684\u8868\u8fbe\u5f0f\u6c42\u503c\u3002 1 2 $ python expressions.py There are total of 36 apples","title":"Python f \u5b57\u7b26\u4e32\u8868\u8fbe\u5f0f"},{"location":"pages/python/pytutorial/python-fstring/#Python-f-\u5b57\u7b26\u4e32\u5b57\u5178","text":"\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 f \u5b57\u7b26\u4e32\u4e2d\u7684\u5b57\u5178\u3002 dicts.py 1 2 3 4 5 #!/usr/bin/env python3 user = {'name': 'John Doe', 'occupation': 'gardener'} print(f\"{user['name']} is a {user['occupation']}\") \u8be5\u793a\u4f8b\u4ee5 f \u5b57\u7b26\u4e32\u5f62\u5f0f\u8bc4\u4f30\u5b57\u5178\u3002 1 2 $ python dicts.py John Doe is a gardener","title":"Python f \u5b57\u7b26\u4e32\u5b57\u5178"},{"location":"pages/python/pytutorial/python-fstring/#Python-\u591a\u884c-f-\u5b57\u7b26\u4e32","text":"\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u591a\u884c\u5b57\u7b26\u4e32\u3002 multiline.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python3 name = 'John Doe' age = 32 occupation = 'gardener' msg = ( f'Name: {name}\\n' f'Age: {age}\\n' f'Occupation: {occupation}' ) print(msg) \u8be5\u793a\u4f8b\u663e\u793a\u4e86\u591a\u884c f \u5b57\u7b26\u4e32\u3002 F \u5f26\u653e\u5728\u65b9\u62ec\u53f7\u4e4b\u95f4\uff1b \u6bcf\u4e2a\u5b57\u7b26\u4e32\u524d\u9762\u90fd\u5e26\u6709 f \u5b57\u7b26\u3002 1 2 3 4 $ python multiline.py Name: John Doe Age: 32 Occupation: gardener","title":"Python \u591a\u884c f \u5b57\u7b26\u4e32"},{"location":"pages/python/pytutorial/python-fstring/#Python-f-\u5b57\u7b26\u4e32\u8c03\u7528\u51fd\u6570","text":"\u6211\u4eec\u8fd8\u53ef\u4ee5\u5728 f \u5b57\u7b26\u4e32\u4e2d\u8c03\u7528\u51fd\u6570\u3002 call_function.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python3 def mymax(x, y): return x if x > y else y a = 3 b = 4 print(f'Max of {a} and {b} is {mymax(a, b)}') \u8be5\u793a\u4f8b\u5728 f \u5b57\u7b26\u4e32\u4e2d\u8c03\u7528\u81ea\u5b9a\u4e49\u51fd\u6570\u3002 1 2 $ python call_fun.py Max of 3 and 4 is 4","title":"Python f \u5b57\u7b26\u4e32\u8c03\u7528\u51fd\u6570"},{"location":"pages/python/pytutorial/python-fstring/#Python-f-\u5b57\u7b26\u4e32\u5bf9\u8c61","text":"Python f \u5b57\u7b26\u4e32\u4e5f\u63a5\u53d7\u5bf9\u8c61\u3002 \u5bf9\u8c61\u5fc5\u987b\u5b9a\u4e49\u4e86 __str__() \u6216 __repr__() \u9b54\u672f\u51fd\u6570\u3002 objects.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python3 class User: def __init__(self, name, occupation): self.name = name self.occupation = occupation def __repr__(self): return f\"{self.name} is a {self.occupation}\" u = User('John Doe', 'gardener') print(f'{u}') \u8be5\u793a\u4f8b\u8bc4\u4f30 f \u5b57\u7b26\u4e32\u4e2d\u7684\u5bf9\u8c61\u3002 1 2 $ python objects.py John Doe is a gardener","title":"Python f \u5b57\u7b26\u4e32\u5bf9\u8c61"},{"location":"pages/python/pytutorial/python-fstring/#Python-F-\u5b57\u7b26\u4e32\u8f6c\u4e49\u5b57\u7b26","text":"\u4e0b\u9762\u7684\u793a\u4f8b\u663e\u793a\u5982\u4f55\u5bf9 f \u5b57\u7b26\u4e32\u4e2d\u7684\u67d0\u4e9b\u5b57\u7b26\u8fdb\u884c\u8f6c\u4e49\u3002 escaping.py 1 2 3 #!/usr/bin/env python3 print(f'This was a \\'great\\' film') \u5355\u5f15\u53f7\u4ee5\u53cd\u659c\u6760\u5b57\u7b26\u8f6c\u4e49\u3002 1 2 $ python escaping.py This was a 'great' film","title":"Python F \u5b57\u7b26\u4e32\u8f6c\u4e49\u5b57\u7b26"},{"location":"pages/python/pytutorial/python-fstring/#Python-f-\u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u65e5\u671f\u65f6\u95f4","text":"\u4ee5\u4e0b\u793a\u4f8b\u683c\u5f0f\u5316\u65e5\u671f\u65f6\u95f4\u3002 format_datetime.py 1 2 3 4 5 6 7 #!/usr/bin/env python3 import datetime now = datetime.datetime.now() print(f'{now:%Y-%m-%d %H:%M}') \u8be5\u793a\u4f8b\u663e\u793a\u683c\u5f0f\u5316\u7684\u5f53\u524d\u65e5\u671f\u65f6\u95f4\u3002 \u65e5\u671f\u65f6\u95f4\u683c\u5f0f\u8bf4\u660e\u7b26\u4f4d\u4e8e \uff1a \u5b57\u7b26\u4e4b\u540e\u3002 1 2 $ python format_datetime.py 2019-05-11 22:39","title":"Python f \u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u65e5\u671f\u65f6\u95f4"},{"location":"pages/python/pytutorial/python-fstring/#Python-f-\u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u6d6e\u70b9\u6570","text":"\u6d6e\u70b9\u503c\u7684\u540e\u7f00\u4e3a f \u3002 \u6211\u4eec\u8fd8\u53ef\u4ee5\u6307\u5b9a\u7cbe\u5ea6\uff1a\u5c0f\u6570\u4f4d\u6570\u3002 \u7cbe\u5ea6\u662f\u4e00\u4e2a\u70b9\u5b57\u7b26\u540e\u7684\u503c\u3002 format_floats.py 1 2 3 4 5 6 #!/usr/bin/env python3 val = 12.3 print(f'{val:.2f}') print(f'{val:.5f}') \u8be5\u793a\u4f8b\u6253\u5370\u683c\u5f0f\u5316\u7684\u6d6e\u70b9\u503c\u3002 1 2 3 $ python format_floats.py 12.30 12.30000 \u8f93\u51fa\u663e\u793a\u5177\u6709\u4e24\u4f4d\u548c\u4e94\u4e2a\u5c0f\u6570\u4f4d\u7684\u6570\u5b57\u3002","title":"Python f \u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u6d6e\u70b9\u6570"},{"location":"pages/python/pytutorial/python-fstring/#Python-f-\u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u5bbd\u5ea6","text":"\u5bbd\u5ea6\u8bf4\u660e\u7b26\u8bbe\u7f6e\u503c\u7684\u5bbd\u5ea6\u3002 \u5982\u679c\u8be5\u503c\u77ed\u4e8e\u6307\u5b9a\u7684\u5bbd\u5ea6\uff0c\u5219\u8be5\u503c\u53ef\u4ee5\u7528\u7a7a\u683c\u6216\u5176\u4ed6\u5b57\u7b26\u586b\u5145\u3002 format_width.py 1 2 3 4 #!/usr/bin/env python3 for x in range(1, 11): print(f'{x:02} {x*x:3} {x*x*x:4}') \u8be5\u793a\u4f8b\u6253\u5370\u4e09\u5217\uff0c\u6bcf\u4e2a\u5217\u90fd\u6709\u4e00\u4e2a\u9884\u5b9a\u4e49\u7684\u5bbd\u5ea6\u3002 \u7b2c\u4e00\u5217\u4f7f\u7528 0 \u586b\u5145\u8f83\u77ed\u7684\u503c\u3002 1 2 3 4 5 6 7 8 9 10 11 $ python format_width.py 01 1 1 02 4 8 03 9 27 04 16 64 05 25 125 06 36 216 07 49 343 08 64 512 09 81 729 10 100 1000","title":"Python f \u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u5bbd\u5ea6"},{"location":"pages/python/pytutorial/python-fstring/#Python-f-\u5b57\u7b26\u4e32\u5bf9\u9f50\u5b57\u7b26\u4e32","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5b57\u7b26\u4e32\u5728\u5de6\u8fb9\u5bf9\u9f50\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 &gt; \u5b57\u7b26\u6765\u5bf9\u9f50\u53f3\u4fa7\u7684\u5b57\u7b26\u4e32\u3002 &gt; \u5b57\u7b26\u5728\u5192\u53f7\u540e\u9762\u3002 justify.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python3 s1 = 'a' s2 = 'ab' s3 = 'abc' s4 = 'abcd' print(f'{s1:>10}') print(f'{s2:>10}') print(f'{s3:>10}') print(f'{s4:>10}') \u6211\u4eec\u6709\u56db\u4e2a\u4e0d\u540c\u957f\u5ea6\u7684\u5f26\u3002 \u6211\u4eec\u5c06\u8f93\u51fa\u7684\u5bbd\u5ea6\u8bbe\u7f6e\u4e3a\u5341\u4e2a\u5b57\u7b26\u3002 \u503c\u5728\u53f3\u5bf9\u9f50\u3002 1 2 3 4 5 $ python justify.py a ab abc abcd","title":"Python f \u5b57\u7b26\u4e32\u5bf9\u9f50\u5b57\u7b26\u4e32"},{"location":"pages/python/pytutorial/python-fstring/#Python-f-\u5b57\u7b26\u4e32\u6570\u5b57\u7b26\u53f7","text":"\u6570\u5b57\u53ef\u4ee5\u5177\u6709\u5404\u79cd\u6570\u5b57\u7b26\u53f7\uff0c\u4f8b\u5982\u5341\u8fdb\u5236\u6216\u5341\u516d\u8fdb\u5236\u3002 format_notations.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python3 a = 300 # hexadecimal print(f\"{a:x}\") # octal print(f\"{a:o}\") # scientific print(f\"{a:e}\") \u8be5\u793a\u4f8b\u4ee5\u4e09\u79cd\u4e0d\u540c\u7684\u8868\u793a\u6cd5\u6253\u5370\u503c\u3002 1 2 3 4 $ python format_notations.py 12c 454 3.000000e+02 \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 Python f \u5b57\u7b26\u4e32\u3002","title":"Python f \u5b57\u7b26\u4e32\u6570\u5b57\u7b26\u53f7"},{"location":"pages/python/pytutorial/python-ftp/","text":"Python FTP \u6559\u7a0b \u00b6 Python FTP \u7f16\u7a0b \u6559\u7a0b\u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528 ftplib \u5e93\u5728 Python \u4e2d\u4f7f\u7528 FTP\u3002 \u6211\u4eec\u5c06\u8fde\u63a5\u5230 FTP \u670d\u52a1\u5668\uff0c\u5217\u51fa\u76ee\u5f55\uff0c\u4e0b\u8f7d\u548c\u4e0a\u4f20\u6587\u4ef6\u3002 FTP \u00b6 \u6587\u4ef6\u4f20\u8f93\u534f\u8bae\uff08FTP\uff09\u662f\u7528\u4e8e\u5728\u8ba1\u7b97\u673a\u7f51\u7edc\u4e0a\u7684\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4e4b\u95f4\u4f20\u8f93\u8ba1\u7b97\u673a\u6587\u4ef6\u7684\u6807\u51c6\u7f51\u7edc\u534f\u8bae\u3002 \u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4f7f\u7528\u4e00\u7ec4 FTP \u547d\u4ee4\u8fdb\u884c\u901a\u4fe1\uff0c\u4f8b\u5982 DELE\uff0cRETR \u6216 CWD\u3002 \u8bb8\u591a\u670d\u52a1\u5668\u4e3a FTP \u670d\u52a1\u63d0\u4f9b\u533f\u540d FTP \u8bbf\u95ee\u3002 \u4f8b\u5982\uff0c\u6709\u4e9b Linux \u6258\u7ba1\u7ad9\u70b9\u63d0\u4f9b\u4e86\u4e00\u4e2a\u533f\u540d FTP \u5e10\u6237\u6765\u4e0b\u8f7d\u5206\u53d1\u6620\u50cf\u3002 Python ftplib \u00b6 Python ftplib \u662f\u5b9e\u73b0 FTP \u534f\u8bae\u5ba2\u6237\u7aef\u7684\u6a21\u5757\u3002 \u5b83\u5305\u542b\u4e00\u4e2a FTP \u5ba2\u6237\u7aef\u7c7b\u548c\u4e00\u4e9b\u5e2e\u52a9\u7a0b\u5e8f\u529f\u80fd\u3002 Python FTP \u7c7b \u00b6 ftplib.FTP() \u521b\u5efa FTP \u7c7b\u7684\u65b0\u5b9e\u4f8b\u3002 \u7ed9\u5b9a\u4e3b\u673a\u540e\uff0c\u5c06\u4f7f\u7528 connect() \u65b9\u6cd5\u5efa\u7acb\u4e0e\u4e3b\u673a\u7684\u8fde\u63a5\u3002 \u4e0a\u4e0b\u6587\u7ba1\u7406\u5668 \u00b6 \u4e0e Python 3 \u4e0d\u540c\uff0cPython 2 \u6ca1\u6709\u4f7f\u7528 FTP \u7c7b\u5b9e\u73b0\u7684\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u3002 \u56e0\u6b64\uff0c\u5728\u5904\u7406\u8fde\u63a5\u5bf9\u8c61\u65f6\uff0cPython 2 \u4ee3\u7801\u9700\u8981\u7a0d\u5fae\u4e0d\u540c\u7684\u65b9\u6cd5\u3002 1 2 3 import ftplib with ftplib.FTP('ftp.debian.org') as ftp: with \u547d\u4ee4\u5c06\u81ea\u52a8\u5173\u95ed\u4e0e Python 3 \u4ee3\u7801\u7684\u670d\u52a1\u5668\u8fde\u63a5\u3002 1 2 3 4 import ftplib from contextlib import closing with closing(ftplib.FTP('ftp.zetcode.com')) as ftp: \u5bf9\u4e8e Python 2 \u4ee3\u7801\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528 contextlib \u6a21\u5757\u7684 closing \u65b9\u6cd5\u3002 \u6b22\u8fce\u6d88\u606f \u00b6 getwelcome() \u8fd4\u56de\u670d\u52a1\u5668\u4e3a\u54cd\u5e94\u521d\u59cb\u8fde\u63a5\u800c\u53d1\u9001\u7684\u6b22\u8fce\u6d88\u606f\u3002 \u8be5\u6d88\u606f\u53ef\u80fd\u5305\u542b\u4e00\u4e9b\u5bf9\u7528\u6237\u6709\u7528\u7684\u4fe1\u606f\u3002 welcome.py 1 2 3 4 5 6 #!/usr/bin/python3 import ftplib with ftplib.FTP('ftp.debian.org') as ftp: print(ftp.getwelcome()) \u8be5\u793a\u4f8b\u521b\u5efa\u4e0e Debian FTP \u670d\u52a1\u5668\u7684\u8fde\u63a5\uff0c\u8be5\u670d\u52a1\u5668\u5177\u6709\u4e00\u4e2a\u533f\u540d\u5e10\u6237\u5e76\u8fd4\u56de\u5176\u6b22\u8fce\u6d88\u606f\u3002 1 2 $ ./welcome.py 220 ftp.debian.org FTP server \u8fd9\u662f\u7a0b\u5e8f\u7684\u8f93\u51fa\u3002 \u76ee\u5f55\u5217\u8868 \u00b6 dir() \u65b9\u6cd5\u4ea7\u751f\u4e00\u4e2a\u76ee\u5f55\u5217\u8868\u3002 listing.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/python3 import ftplib with ftplib.FTP('ftp.debian.org') as ftp: try: ftp.login() files = [] ftp.dir(files.append) print(files) except ftplib.all_errors as e: print('FTP error:', e) \u8be5\u793a\u4f8b\u8fde\u63a5\u5230 ftp.debian.org \u4e3b\u673a\uff0c\u5e76\u68c0\u7d22\u521d\u59cb\u767b\u5f55\u76ee\u5f55\u7684\u76ee\u5f55\u5217\u8868\u3002 1 2 try: ftp.login() \u5f53 login() \u65b9\u6cd5\u6ca1\u6709\u53c2\u6570\u65f6\uff1b \u6211\u4eec\u8fde\u63a5\u5230 FTP \u7ad9\u70b9\u7684\u533f\u540d\u5e10\u6237\u3002 1 2 3 files = [] ftp.dir(files.append) dir() \u65b9\u6cd5\u4ea7\u751f\u76ee\u5f55\u5217\u8868\uff0c\u5e76\u5c06\u6570\u636e\u6dfb\u52a0\u5230\u5217\u8868\u4e2d\u3002 1 2 $ ./listing.py ['drwxr-xr-x 9 1176 1176 4096 Sep 26 15:07 debian'] \u8fd9\u662f\u8f93\u51fa\u3002 FTP \u547d\u4ee4 \u00b6 FTP \u5ba2\u6237\u7aef\u5c06\u547d\u4ee4\u53d1\u9001\u5230 FTP \u670d\u52a1\u5668\uff0c\u4f8b\u5982 PWD \u6216 RETR \u3002 ftplib \u5305\u542b\u51e0\u79cd\u5305\u88c5\u8fd9\u4e9b\u547d\u4ee4\u7684\u65b9\u6cd5\u3002 \u4f7f\u7528 sendcmd() \u6216 voidcmd() \u65b9\u6cd5\u53d1\u9001\u547d\u4ee4\u3002 ftp_commands.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/python3 import ftplib with ftplib.FTP('ftp.debian.org') as ftp: try: ftp.login() wdir = ftp.sendcmd('PWD') print(ftplib.parse257(wdir)) wdir2 = ftp.pwd() print(wdir2) except ftplib.all_errors as e: print('FTP error:', e) \u8be5\u793a\u4f8b\u901a\u8fc7\u76f4\u63a5\u53d1\u9001 PWD \u547d\u4ee4\u5e76\u4f7f\u7528 pwd() \u65b9\u6cd5\u6765\u68c0\u7d22\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u3002 1 wdir = ftp.sendcmd('PWD') \u6211\u4eec\u4f7f\u7528 sendcmd() \u65b9\u6cd5\u53d1\u9001 PWD \u547d\u4ee4\u3002 1 print(ftplib.parse257(wdir)) parse257() \u662f\u4e00\u4e2a\u5e2e\u52a9\u7a0b\u5e8f\u65b9\u6cd5\uff0c\u5b83\u4ece\u8fd4\u56de\u7684\u5b57\u7b26\u4e32\u4e2d\u68c0\u7d22\u76ee\u5f55\uff0c\u8be5\u5b57\u7b26\u4e32\u8fd8\u5305\u542b\u72b6\u6001\u4ee3\u7801\u3002 1 2 wdir2 = ftp.pwd() print(wdir2) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4f7f\u7528 pwd() \u65b9\u6cd5\u68c0\u7d22\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u3002 1 2 3 $ ./ftp_commands.py / / \u8fd9\u662f\u8f93\u51fa\u3002 \u53d8\u66f4\u76ee\u5f55 \u00b6 cwd() \u65b9\u6cd5\u66f4\u6539\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u3002 change_directory.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/usr/bin/python3 import ftplib with ftplib.FTP('ftp.debian.org') as ftp: try: ftp.login() wdir = ftp.pwd() print(wdir) ftp.cwd('debian') wdir2 = ftp.pwd() print(wdir2) except ftplib.all_errors as e: print('FTP error:', e) \u8be5\u793a\u4f8b\u4f7f\u7528 cmd() \u65b9\u6cd5\u66f4\u6539\u4e3a debian \u6587\u4ef6\u5939\u3002 1 2 3 $ ./change_directory.py / /debian \u8fd9\u662f\u8f93\u51fa\u3002 \u521b\u5efa\u76ee\u5f55 \u00b6 \u4f7f\u7528 mkd() \u65b9\u6cd5\u521b\u5efa\u76ee\u5f55\u3002 \u6b64\u64cd\u4f5c\u9700\u8981\u5177\u6709\u8db3\u591f\u7279\u6743\u7684\u7528\u6237\u5e10\u6237\uff1b \u5b83\u4e0d\u9002\u7528\u4e8e\u533f\u540d\u5e10\u6237\u3002 create_directory.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #!/usr/bin/python3 import ftplib from contextlib import closing with closing(ftplib.FTP('ftp.example.com')) as ftp: try: ftp.login('user7', 's$cret') ftp.mkd('newdir') files = [] ftp.retrlines('LIST', files.append) for fl in files: print(fl) except ftplib.all_errors as e: print('FTP error:', e) \u8be5\u793a\u4f8b\u8fde\u63a5\u5230 FTP \u670d\u52a1\u5668\uff0c\u5e76\u5728\u767b\u5f55\u6587\u4ef6\u5939\u4e2d\u521b\u5efa\u4e00\u4e2a\u65b0\u76ee\u5f55\u3002 1 ftp.login('user7', 's$cret') \u6211\u4eec\u4f7f\u7528 login() \u65b9\u6cd5\u767b\u5f55\u3002 1 ftp.mkd('newdir') \u4f7f\u7528 mkd() \u65b9\u6cd5\u521b\u5efa\u4e00\u4e2a\u65b0\u76ee\u5f55\u3002 1 2 3 files = [] ftp.retrlines('LIST', files.append) \u4f7f\u7528 LIST FTP \u547d\u4ee4\uff0c\u6211\u4eec\u68c0\u7d22\u6587\u4ef6\u5217\u8868\u548c\u6709\u5173\u8fd9\u4e9b\u6587\u4ef6\u7684\u4fe1\u606f\u3002 \u8be5\u5217\u8868\u5b58\u50a8\u5728 files \u5217\u8868\u4e2d\u3002 1 2 3 4 5 6 7 8 $ ./create_directory.py drwx------ 6 zetcode.com 117992 7 Sep 27 14:58 . drwx------ 6 zetcode.com 117992 7 Sep 27 14:58 .. -rw------- 1 zetcode.com 117992 151 Jul 31 2015 .htaccess drwxr-xr-x 2 0 0 4096 Sep 27 01:16 logs drwx---r-x 2 zetcode.com 117992 2 Sep 27 14:58 newdir drwx------ 3 zetcode.com 117992 3 Mar 11 2011 sub drwx------ 26 zetcode.com 117992 31 Sep 25 15:32 web \u4ece\u8f93\u51fa\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230 newdir \u5df2\u521b\u5efa\u3002 \u83b7\u53d6\u6587\u672c\u6587\u4ef6\u7684\u5927\u5c0f \u00b6 SIZE \u547d\u4ee4\u53ca\u5176\u7b49\u6548\u7684 size() \u65b9\u6cd5\u662f\u786e\u5b9a\u6587\u4ef6\u5927\u5c0f\u7684\u975e\u6807\u51c6\u65b9\u6cd5\u3002 \u5c3d\u7ba1\u6ca1\u6709\u6807\u51c6\u5316\uff0c\u4f46\u662f\u5b83\u7531\u8bb8\u591a\u670d\u52a1\u5668\u5b9e\u73b0\u3002 text_file_size.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/python3 import ftplib with ftplib.FTP('ftp.debian.org') as ftp: try: ftp.login() size = ftp.size('debian/README') print(size) except ftplib.all_errors as e: print('FTP error:', e) \u8be5\u793a\u4f8b\u4f7f\u7528 size() \u65b9\u6cd5\u68c0\u7d22 README \u6587\u4ef6\u7684\u5927\u5c0f\u3002 \u83b7\u53d6\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u5927\u5c0f \u00b6 \u8981\u786e\u5b9a\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u5927\u5c0f\uff0c\u6211\u4eec\u5fc5\u987b\u5207\u6362\u5230\u4e8c\u8fdb\u5236\u6a21\u5f0f\u3002 binary_file_size.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/python3 import ftplib with ftplib.FTP('ftp.debian.org') as ftp: try: ftp.login() # TYPE A for ASCII mode ftp.sendcmd('TYPE I') size = ftp.size('debian/ls-lR.gz') print(size) except ftplib.all_errors as e: print('FTP error:', e) \u8be5\u793a\u4f8b\u786e\u5b9a\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u5927\u5c0f\u3002 1 ftp.sendcmd('TYPE I') \u6211\u4eec\u4f7f\u7528 TYPE I \u547d\u4ee4\u8fdb\u5165\u4e8c\u8fdb\u5236\u6a21\u5f0f\u3002 1 size = ftp.size('debian/ls-lR.gz') \u6211\u4eec\u5f97\u5230\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u5927\u5c0f\u3002 \u4e0b\u8f7d\u6587\u672c\u6587\u4ef6 \u00b6 \u8981\u4e0b\u8f7d\u6587\u672c\u6587\u4ef6\uff0c\u6211\u4eec\u4f7f\u7528 RETR FTP \u547d\u4ee4\u3002 download_text_file.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #!/usr/bin/python3 import ftplib import os with ftplib.FTP('ftp.debian.org') as ftp: file_orig = '/debian/README' file_copy = 'README' try: ftp.login() with open(file_copy, 'w') as fp: res = ftp.retrlines('RETR ' + file_orig, fp.write) if not res.startswith('226 Transfer complete'): print('Download failed') if os.path.isfile(file_copy): os.remove(file_copy) except ftplib.all_errors as e: print('FTP error:', e) if os.path.isfile(file_copy): os.remove(file_copy) \u8be5\u793a\u4f8b\u4ece ftp.debian.org \u670d\u52a1\u5668\u4e0b\u8f7d\u6587\u672c\u6587\u4ef6\u3002 1 2 3 with open(file_copy, 'w') as fp: res = ftp.retrlines('RETR ' + file_orig, fp.write) \u6211\u4eec\u83b7\u53d6\u6587\u4ef6\u5e76\u5199\u5165\u672c\u5730\u526f\u672c\u6587\u4ef6\u3002 1 2 3 4 5 if not res.startswith('226 Transfer complete'): print('Download failed') if os.path.isfile(file_copy): os.remove(file_copy) \u5982\u679c\u4e0b\u8f7d\u5931\u8d25\uff0c\u6211\u4eec\u4f1a\u6253\u5370\u4e00\u6761\u9519\u8bef\u6d88\u606f\u5e76\u5220\u9664\u672c\u5730\u6587\u4ef6\u3002 \u4e0a\u4f20\u6587\u672c\u6587\u4ef6 \u00b6 \u5177\u6709 storlines() \u65b9\u6cd5\u7684 STOR \u547d\u4ee4\u7528\u4e8e\u4e0a\u4f20\u6587\u672c\u6587\u4ef6\u3002 upload_text_file.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #!/usr/bin/python3 import ftplib with ftplib.FTP('ftp.example.com') as ftp: filename = 'README' try: ftp.login('user7', 's$cret') with open(filename, 'rb') as fp: res = ftp.storlines(\"STOR \" + filename, fp) if not res.startswith('226 Transfer complete'): print('Upload failed') except ftplib.all_errors as e: print('FTP error:', e) \u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u6587\u672c\u6587\u4ef6\u4e0a\u4f20\u5230 FTP \u670d\u52a1\u5668\u3002 \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 Python ftplib \u3002","title":"Python FTP \u6559\u7a0b"},{"location":"pages/python/pytutorial/python-ftp/#Python-FTP-\u6559\u7a0b","text":"Python FTP \u7f16\u7a0b \u6559\u7a0b\u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528 ftplib \u5e93\u5728 Python \u4e2d\u4f7f\u7528 FTP\u3002 \u6211\u4eec\u5c06\u8fde\u63a5\u5230 FTP \u670d\u52a1\u5668\uff0c\u5217\u51fa\u76ee\u5f55\uff0c\u4e0b\u8f7d\u548c\u4e0a\u4f20\u6587\u4ef6\u3002","title":"Python FTP \u6559\u7a0b"},{"location":"pages/python/pytutorial/python-ftp/#FTP","text":"\u6587\u4ef6\u4f20\u8f93\u534f\u8bae\uff08FTP\uff09\u662f\u7528\u4e8e\u5728\u8ba1\u7b97\u673a\u7f51\u7edc\u4e0a\u7684\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4e4b\u95f4\u4f20\u8f93\u8ba1\u7b97\u673a\u6587\u4ef6\u7684\u6807\u51c6\u7f51\u7edc\u534f\u8bae\u3002 \u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4f7f\u7528\u4e00\u7ec4 FTP \u547d\u4ee4\u8fdb\u884c\u901a\u4fe1\uff0c\u4f8b\u5982 DELE\uff0cRETR \u6216 CWD\u3002 \u8bb8\u591a\u670d\u52a1\u5668\u4e3a FTP \u670d\u52a1\u63d0\u4f9b\u533f\u540d FTP \u8bbf\u95ee\u3002 \u4f8b\u5982\uff0c\u6709\u4e9b Linux \u6258\u7ba1\u7ad9\u70b9\u63d0\u4f9b\u4e86\u4e00\u4e2a\u533f\u540d FTP \u5e10\u6237\u6765\u4e0b\u8f7d\u5206\u53d1\u6620\u50cf\u3002","title":"FTP"},{"location":"pages/python/pytutorial/python-ftp/#Python-ftplib","text":"Python ftplib \u662f\u5b9e\u73b0 FTP \u534f\u8bae\u5ba2\u6237\u7aef\u7684\u6a21\u5757\u3002 \u5b83\u5305\u542b\u4e00\u4e2a FTP \u5ba2\u6237\u7aef\u7c7b\u548c\u4e00\u4e9b\u5e2e\u52a9\u7a0b\u5e8f\u529f\u80fd\u3002","title":"Python ftplib"},{"location":"pages/python/pytutorial/python-ftp/#Python-FTP\u7c7b","text":"ftplib.FTP() \u521b\u5efa FTP \u7c7b\u7684\u65b0\u5b9e\u4f8b\u3002 \u7ed9\u5b9a\u4e3b\u673a\u540e\uff0c\u5c06\u4f7f\u7528 connect() \u65b9\u6cd5\u5efa\u7acb\u4e0e\u4e3b\u673a\u7684\u8fde\u63a5\u3002","title":"Python FTP\u7c7b"},{"location":"pages/python/pytutorial/python-ftp/#\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668","text":"\u4e0e Python 3 \u4e0d\u540c\uff0cPython 2 \u6ca1\u6709\u4f7f\u7528 FTP \u7c7b\u5b9e\u73b0\u7684\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u3002 \u56e0\u6b64\uff0c\u5728\u5904\u7406\u8fde\u63a5\u5bf9\u8c61\u65f6\uff0cPython 2 \u4ee3\u7801\u9700\u8981\u7a0d\u5fae\u4e0d\u540c\u7684\u65b9\u6cd5\u3002 1 2 3 import ftplib with ftplib.FTP('ftp.debian.org') as ftp: with \u547d\u4ee4\u5c06\u81ea\u52a8\u5173\u95ed\u4e0e Python 3 \u4ee3\u7801\u7684\u670d\u52a1\u5668\u8fde\u63a5\u3002 1 2 3 4 import ftplib from contextlib import closing with closing(ftplib.FTP('ftp.zetcode.com')) as ftp: \u5bf9\u4e8e Python 2 \u4ee3\u7801\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528 contextlib \u6a21\u5757\u7684 closing \u65b9\u6cd5\u3002","title":"\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668"},{"location":"pages/python/pytutorial/python-ftp/#\u6b22\u8fce\u6d88\u606f","text":"getwelcome() \u8fd4\u56de\u670d\u52a1\u5668\u4e3a\u54cd\u5e94\u521d\u59cb\u8fde\u63a5\u800c\u53d1\u9001\u7684\u6b22\u8fce\u6d88\u606f\u3002 \u8be5\u6d88\u606f\u53ef\u80fd\u5305\u542b\u4e00\u4e9b\u5bf9\u7528\u6237\u6709\u7528\u7684\u4fe1\u606f\u3002 welcome.py 1 2 3 4 5 6 #!/usr/bin/python3 import ftplib with ftplib.FTP('ftp.debian.org') as ftp: print(ftp.getwelcome()) \u8be5\u793a\u4f8b\u521b\u5efa\u4e0e Debian FTP \u670d\u52a1\u5668\u7684\u8fde\u63a5\uff0c\u8be5\u670d\u52a1\u5668\u5177\u6709\u4e00\u4e2a\u533f\u540d\u5e10\u6237\u5e76\u8fd4\u56de\u5176\u6b22\u8fce\u6d88\u606f\u3002 1 2 $ ./welcome.py 220 ftp.debian.org FTP server \u8fd9\u662f\u7a0b\u5e8f\u7684\u8f93\u51fa\u3002","title":"\u6b22\u8fce\u6d88\u606f"},{"location":"pages/python/pytutorial/python-ftp/#\u76ee\u5f55\u5217\u8868","text":"dir() \u65b9\u6cd5\u4ea7\u751f\u4e00\u4e2a\u76ee\u5f55\u5217\u8868\u3002 listing.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/python3 import ftplib with ftplib.FTP('ftp.debian.org') as ftp: try: ftp.login() files = [] ftp.dir(files.append) print(files) except ftplib.all_errors as e: print('FTP error:', e) \u8be5\u793a\u4f8b\u8fde\u63a5\u5230 ftp.debian.org \u4e3b\u673a\uff0c\u5e76\u68c0\u7d22\u521d\u59cb\u767b\u5f55\u76ee\u5f55\u7684\u76ee\u5f55\u5217\u8868\u3002 1 2 try: ftp.login() \u5f53 login() \u65b9\u6cd5\u6ca1\u6709\u53c2\u6570\u65f6\uff1b \u6211\u4eec\u8fde\u63a5\u5230 FTP \u7ad9\u70b9\u7684\u533f\u540d\u5e10\u6237\u3002 1 2 3 files = [] ftp.dir(files.append) dir() \u65b9\u6cd5\u4ea7\u751f\u76ee\u5f55\u5217\u8868\uff0c\u5e76\u5c06\u6570\u636e\u6dfb\u52a0\u5230\u5217\u8868\u4e2d\u3002 1 2 $ ./listing.py ['drwxr-xr-x 9 1176 1176 4096 Sep 26 15:07 debian'] \u8fd9\u662f\u8f93\u51fa\u3002","title":"\u76ee\u5f55\u5217\u8868"},{"location":"pages/python/pytutorial/python-ftp/#FTP-\u547d\u4ee4","text":"FTP \u5ba2\u6237\u7aef\u5c06\u547d\u4ee4\u53d1\u9001\u5230 FTP \u670d\u52a1\u5668\uff0c\u4f8b\u5982 PWD \u6216 RETR \u3002 ftplib \u5305\u542b\u51e0\u79cd\u5305\u88c5\u8fd9\u4e9b\u547d\u4ee4\u7684\u65b9\u6cd5\u3002 \u4f7f\u7528 sendcmd() \u6216 voidcmd() \u65b9\u6cd5\u53d1\u9001\u547d\u4ee4\u3002 ftp_commands.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/python3 import ftplib with ftplib.FTP('ftp.debian.org') as ftp: try: ftp.login() wdir = ftp.sendcmd('PWD') print(ftplib.parse257(wdir)) wdir2 = ftp.pwd() print(wdir2) except ftplib.all_errors as e: print('FTP error:', e) \u8be5\u793a\u4f8b\u901a\u8fc7\u76f4\u63a5\u53d1\u9001 PWD \u547d\u4ee4\u5e76\u4f7f\u7528 pwd() \u65b9\u6cd5\u6765\u68c0\u7d22\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u3002 1 wdir = ftp.sendcmd('PWD') \u6211\u4eec\u4f7f\u7528 sendcmd() \u65b9\u6cd5\u53d1\u9001 PWD \u547d\u4ee4\u3002 1 print(ftplib.parse257(wdir)) parse257() \u662f\u4e00\u4e2a\u5e2e\u52a9\u7a0b\u5e8f\u65b9\u6cd5\uff0c\u5b83\u4ece\u8fd4\u56de\u7684\u5b57\u7b26\u4e32\u4e2d\u68c0\u7d22\u76ee\u5f55\uff0c\u8be5\u5b57\u7b26\u4e32\u8fd8\u5305\u542b\u72b6\u6001\u4ee3\u7801\u3002 1 2 wdir2 = ftp.pwd() print(wdir2) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4f7f\u7528 pwd() \u65b9\u6cd5\u68c0\u7d22\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u3002 1 2 3 $ ./ftp_commands.py / / \u8fd9\u662f\u8f93\u51fa\u3002","title":"FTP \u547d\u4ee4"},{"location":"pages/python/pytutorial/python-ftp/#\u53d8\u66f4\u76ee\u5f55","text":"cwd() \u65b9\u6cd5\u66f4\u6539\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u3002 change_directory.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/usr/bin/python3 import ftplib with ftplib.FTP('ftp.debian.org') as ftp: try: ftp.login() wdir = ftp.pwd() print(wdir) ftp.cwd('debian') wdir2 = ftp.pwd() print(wdir2) except ftplib.all_errors as e: print('FTP error:', e) \u8be5\u793a\u4f8b\u4f7f\u7528 cmd() \u65b9\u6cd5\u66f4\u6539\u4e3a debian \u6587\u4ef6\u5939\u3002 1 2 3 $ ./change_directory.py / /debian \u8fd9\u662f\u8f93\u51fa\u3002","title":"\u53d8\u66f4\u76ee\u5f55"},{"location":"pages/python/pytutorial/python-ftp/#\u521b\u5efa\u76ee\u5f55","text":"\u4f7f\u7528 mkd() \u65b9\u6cd5\u521b\u5efa\u76ee\u5f55\u3002 \u6b64\u64cd\u4f5c\u9700\u8981\u5177\u6709\u8db3\u591f\u7279\u6743\u7684\u7528\u6237\u5e10\u6237\uff1b \u5b83\u4e0d\u9002\u7528\u4e8e\u533f\u540d\u5e10\u6237\u3002 create_directory.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #!/usr/bin/python3 import ftplib from contextlib import closing with closing(ftplib.FTP('ftp.example.com')) as ftp: try: ftp.login('user7', 's$cret') ftp.mkd('newdir') files = [] ftp.retrlines('LIST', files.append) for fl in files: print(fl) except ftplib.all_errors as e: print('FTP error:', e) \u8be5\u793a\u4f8b\u8fde\u63a5\u5230 FTP \u670d\u52a1\u5668\uff0c\u5e76\u5728\u767b\u5f55\u6587\u4ef6\u5939\u4e2d\u521b\u5efa\u4e00\u4e2a\u65b0\u76ee\u5f55\u3002 1 ftp.login('user7', 's$cret') \u6211\u4eec\u4f7f\u7528 login() \u65b9\u6cd5\u767b\u5f55\u3002 1 ftp.mkd('newdir') \u4f7f\u7528 mkd() \u65b9\u6cd5\u521b\u5efa\u4e00\u4e2a\u65b0\u76ee\u5f55\u3002 1 2 3 files = [] ftp.retrlines('LIST', files.append) \u4f7f\u7528 LIST FTP \u547d\u4ee4\uff0c\u6211\u4eec\u68c0\u7d22\u6587\u4ef6\u5217\u8868\u548c\u6709\u5173\u8fd9\u4e9b\u6587\u4ef6\u7684\u4fe1\u606f\u3002 \u8be5\u5217\u8868\u5b58\u50a8\u5728 files \u5217\u8868\u4e2d\u3002 1 2 3 4 5 6 7 8 $ ./create_directory.py drwx------ 6 zetcode.com 117992 7 Sep 27 14:58 . drwx------ 6 zetcode.com 117992 7 Sep 27 14:58 .. -rw------- 1 zetcode.com 117992 151 Jul 31 2015 .htaccess drwxr-xr-x 2 0 0 4096 Sep 27 01:16 logs drwx---r-x 2 zetcode.com 117992 2 Sep 27 14:58 newdir drwx------ 3 zetcode.com 117992 3 Mar 11 2011 sub drwx------ 26 zetcode.com 117992 31 Sep 25 15:32 web \u4ece\u8f93\u51fa\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230 newdir \u5df2\u521b\u5efa\u3002","title":"\u521b\u5efa\u76ee\u5f55"},{"location":"pages/python/pytutorial/python-ftp/#\u83b7\u53d6\u6587\u672c\u6587\u4ef6\u7684\u5927\u5c0f","text":"SIZE \u547d\u4ee4\u53ca\u5176\u7b49\u6548\u7684 size() \u65b9\u6cd5\u662f\u786e\u5b9a\u6587\u4ef6\u5927\u5c0f\u7684\u975e\u6807\u51c6\u65b9\u6cd5\u3002 \u5c3d\u7ba1\u6ca1\u6709\u6807\u51c6\u5316\uff0c\u4f46\u662f\u5b83\u7531\u8bb8\u591a\u670d\u52a1\u5668\u5b9e\u73b0\u3002 text_file_size.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/python3 import ftplib with ftplib.FTP('ftp.debian.org') as ftp: try: ftp.login() size = ftp.size('debian/README') print(size) except ftplib.all_errors as e: print('FTP error:', e) \u8be5\u793a\u4f8b\u4f7f\u7528 size() \u65b9\u6cd5\u68c0\u7d22 README \u6587\u4ef6\u7684\u5927\u5c0f\u3002","title":"\u83b7\u53d6\u6587\u672c\u6587\u4ef6\u7684\u5927\u5c0f"},{"location":"pages/python/pytutorial/python-ftp/#\u83b7\u53d6\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u5927\u5c0f","text":"\u8981\u786e\u5b9a\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u5927\u5c0f\uff0c\u6211\u4eec\u5fc5\u987b\u5207\u6362\u5230\u4e8c\u8fdb\u5236\u6a21\u5f0f\u3002 binary_file_size.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/python3 import ftplib with ftplib.FTP('ftp.debian.org') as ftp: try: ftp.login() # TYPE A for ASCII mode ftp.sendcmd('TYPE I') size = ftp.size('debian/ls-lR.gz') print(size) except ftplib.all_errors as e: print('FTP error:', e) \u8be5\u793a\u4f8b\u786e\u5b9a\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u5927\u5c0f\u3002 1 ftp.sendcmd('TYPE I') \u6211\u4eec\u4f7f\u7528 TYPE I \u547d\u4ee4\u8fdb\u5165\u4e8c\u8fdb\u5236\u6a21\u5f0f\u3002 1 size = ftp.size('debian/ls-lR.gz') \u6211\u4eec\u5f97\u5230\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u5927\u5c0f\u3002","title":"\u83b7\u53d6\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u5927\u5c0f"},{"location":"pages/python/pytutorial/python-ftp/#\u4e0b\u8f7d\u6587\u672c\u6587\u4ef6","text":"\u8981\u4e0b\u8f7d\u6587\u672c\u6587\u4ef6\uff0c\u6211\u4eec\u4f7f\u7528 RETR FTP \u547d\u4ee4\u3002 download_text_file.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #!/usr/bin/python3 import ftplib import os with ftplib.FTP('ftp.debian.org') as ftp: file_orig = '/debian/README' file_copy = 'README' try: ftp.login() with open(file_copy, 'w') as fp: res = ftp.retrlines('RETR ' + file_orig, fp.write) if not res.startswith('226 Transfer complete'): print('Download failed') if os.path.isfile(file_copy): os.remove(file_copy) except ftplib.all_errors as e: print('FTP error:', e) if os.path.isfile(file_copy): os.remove(file_copy) \u8be5\u793a\u4f8b\u4ece ftp.debian.org \u670d\u52a1\u5668\u4e0b\u8f7d\u6587\u672c\u6587\u4ef6\u3002 1 2 3 with open(file_copy, 'w') as fp: res = ftp.retrlines('RETR ' + file_orig, fp.write) \u6211\u4eec\u83b7\u53d6\u6587\u4ef6\u5e76\u5199\u5165\u672c\u5730\u526f\u672c\u6587\u4ef6\u3002 1 2 3 4 5 if not res.startswith('226 Transfer complete'): print('Download failed') if os.path.isfile(file_copy): os.remove(file_copy) \u5982\u679c\u4e0b\u8f7d\u5931\u8d25\uff0c\u6211\u4eec\u4f1a\u6253\u5370\u4e00\u6761\u9519\u8bef\u6d88\u606f\u5e76\u5220\u9664\u672c\u5730\u6587\u4ef6\u3002","title":"\u4e0b\u8f7d\u6587\u672c\u6587\u4ef6"},{"location":"pages/python/pytutorial/python-ftp/#\u4e0a\u4f20\u6587\u672c\u6587\u4ef6","text":"\u5177\u6709 storlines() \u65b9\u6cd5\u7684 STOR \u547d\u4ee4\u7528\u4e8e\u4e0a\u4f20\u6587\u672c\u6587\u4ef6\u3002 upload_text_file.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #!/usr/bin/python3 import ftplib with ftplib.FTP('ftp.example.com') as ftp: filename = 'README' try: ftp.login('user7', 's$cret') with open(filename, 'rb') as fp: res = ftp.storlines(\"STOR \" + filename, fp) if not res.startswith('226 Transfer complete'): print('Upload failed') except ftplib.all_errors as e: print('FTP error:', e) \u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u6587\u672c\u6587\u4ef6\u4e0a\u4f20\u5230 FTP \u670d\u52a1\u5668\u3002 \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 Python ftplib \u3002","title":"\u4e0a\u4f20\u6587\u672c\u6587\u4ef6"},{"location":"pages/python/pytutorial/python-functions/","text":"Python \u51fd\u6570 \u00b6 Python \u51fd\u6570 \u662f\u7528\u4e8e\u6267\u884c\u7279\u5b9a\u64cd\u4f5c\u7684\u53ef\u91cd\u7528\u4ee3\u7801\u5757\u3002 \u4f7f\u7528\u51fd\u6570\u7684\u4f18\u70b9\u662f\uff1a \u51cf\u5c11\u4ee3\u7801\u91cd\u590d \u5c06\u590d\u6742\u7684\u95ee\u9898\u5206\u89e3\u6210\u66f4\u7b80\u5355\u7684\u90e8\u5206 \u63d0\u9ad8\u4ee3\u7801\u7684\u6e05\u6670\u5ea6 \u91cd\u7528\u4ee3\u7801 \u4fe1\u606f\u9690\u85cf Python \u4e2d\u7684\u51fd\u6570\u662f\u4e00\u7b49\u516c\u6c11\u3002 \u8fd9\u610f\u5473\u7740\u51fd\u6570\u4e0e Python \u4e2d\u7684\u5176\u4ed6\u5bf9\u8c61\u5177\u6709\u540c\u7b49\u7684\u72b6\u6001\u3002 \u53ef\u4ee5\u5c06\u51fd\u6570\u5206\u914d\u7ed9\u53d8\u91cf\uff0c\u5b58\u50a8\u5728\u96c6\u5408\u4e2d\u6216\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\uff0c\u8fd9\u7ed9\u8bed\u8a00\u5e26\u6765\u4e86\u989d\u5916\u7684\u7075\u6d3b\u6027\u3002 Python \u51fd\u6570\u7c7b\u578b \u00b6 \u51fd\u6570\u6709\u4e24\u79cd\u57fa\u672c\u7c7b\u578b\uff1a\u5185\u7f6e\u51fd\u6570\u548c\u7528\u6237\u5b9a\u4e49\u51fd\u6570\u3002 \u5185\u7f6e\u51fd\u6570\u662f Python \u8bed\u8a00\u7684\u4e00\u90e8\u5206\uff1b \u4f8b\u5982 dir() \uff0c len() \u6216 abs() \u3002 \u7528\u6237\u5b9a\u4e49\u7684\u51fd\u6570\u662f\u4f7f\u7528 def \u5173\u952e\u5b57\u521b\u5efa\u7684\u51fd\u6570\u3002 Python \u521b\u5efa\u51fd\u6570 \u00b6 \u4f7f\u7528 def \u5173\u952e\u5b57\u521b\u5efa\u4e00\u4e2a\u51fd\u6570\u3002 \u51fd\u6570\u5757\u4e2d\u7684\u8bed\u53e5\u5fc5\u987b\u7f29\u8fdb\u3002 1 2 def function(): pass def \u5173\u952e\u5b57\u540e\u8ddf\u5e26\u6709\u5706\u62ec\u53f7\u548c\u5192\u53f7\u7684\u51fd\u6570\u540d\u79f0\u3002 \u7f29\u8fdb\u8bed\u53e5\u5f62\u6210\u51fd\u6570\u7684\u4e3b\u4f53\u3002 \u8be5\u51fd\u6570\u7a0d\u540e\u5728\u9700\u8981\u65f6\u6267\u884c\u3002 \u6211\u4eec\u8bf4\u6211\u4eec\u8c03\u7528\u51fd\u6570\u3002 \u5982\u679c\u6211\u4eec\u8c03\u7528\u4e00\u4e2a\u51fd\u6570\uff0c\u5219\u4f1a\u6267\u884c\u51fd\u6570\u4f53\u5185\u7684\u8bed\u53e5\u3002 \u5728\u8c03\u7528\u51fd\u6570\u4e4b\u524d\uff0c\u5b83\u4eec\u4e0d\u4f1a\u6267\u884c\u3002 1 myfunc() \u8981\u8c03\u7528\u51fd\u6570\uff0c\u6211\u4eec\u7528\u5706\u62ec\u53f7\u6307\u5b9a\u51fd\u6570\u540d\u79f0\u3002 ret.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #!/usr/bin/env python \"\"\" The ret.py script shows how to work with functions in Python. Author: Jan Bodnar ZetCode, 2019 \"\"\" def show_module_name(): print(__doc__) def get_module_file(): return __file__ a = show_module_name() b = get_module_file() print(a, b) \u811a\u672c\u9876\u90e8\u7684\u5b57\u7b26\u4e32\u79f0\u4e3a\u6587\u6863\u5b57\u7b26\u4e32\u3002 \u5b83\u8bb0\u5f55\u4e86\u5f53\u524d\u811a\u672c\u3002 \u6211\u4eec\u653e\u5165 Python \u4ee3\u7801\u7684\u6587\u4ef6\u79f0\u4e3a\u6a21\u5757\u3002 \u6211\u4eec\u5b9a\u4e49\u4e24\u4e2a\u51fd\u6570\u3002 \u7b2c\u4e00\u4e2a\u51fd\u6570\u6253\u5370\u6a21\u5757\u6587\u6863\u5b57\u7b26\u4e32\u3002 \u7b2c\u4e8c\u4e2a\u8fd4\u56de\u6a21\u5757\u7684\u8def\u5f84\u3002 \u51fd\u6570\u53ef\u80fd\u4f1a\u6216\u53ef\u80fd\u4e0d\u4f1a\u8fd4\u56de\u503c\u3002 \u5982\u679c\u51fd\u6570\u6ca1\u6709\u8fd4\u56de\u503c\uff0c\u5219\u5b83\u9690\u5f0f\u8fd4\u56de None \u3002 __doc__ \u548c __file__ \u662f\u7279\u6b8a\u7684\u72b6\u6001\u5c5e\u6027\u3002 \u8bf7\u6ce8\u610f\uff0c\u5c5e\u6027\u7684\u4e24\u4fa7\u90fd\u6709\u4e24\u4e2a\u4e0b\u5212\u7ebf\u3002 1 2 3 4 5 6 7 8 $ ./ret.py The ret.py script shows how to work with functions in Python. Author: Jan Bodnar ZetCode, 2019 None C:/Users/Jano/PycharmProjects/Simple/simple.py \u51fd\u6570\u7684\u5b9a\u4e49\u5fc5\u987b\u5148\u4e8e\u5176\u7528\u6cd5\u3002 \u5426\u5219\uff0c\u53e3\u8bd1\u5458\u4f1a\u62b1\u6028 NameError \u3002 func_prec.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python # func_prec.py def f1(): print(\"f1()\") f1() #f2() def f2(): print(\"f2()\") \u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\u4e24\u4e2a\u51fd\u6570\u5b9a\u4e49\u3002 \u4e00\u884c\u88ab\u6ce8\u91ca\uff0c\u51fd\u6570\u8c03\u7528\u4e0d\u80fd\u8d85\u51fa\u5176\u5b9a\u4e49\u3002 1 2 3 4 #f2() def f2(): print(\"f2()\") \u4ec5\u5728\u5b9a\u4e49\u540e\u624d\u80fd\u8c03\u7528 f2() \u3002 \u53d6\u6d88\u6ce8\u91ca\u8be5\u884c\uff0c\u6211\u4eec\u5f97\u5230\u4e00\u4e2a NameError \u3002 \u5728\u54ea\u91cc\u5b9a\u4e49\u51fd\u6570 \u00b6 \u53ef\u4ee5\u5728\u6a21\u5757\uff0c\u7c7b\u6216\u5176\u4ed6\u51fd\u6570\u4e2d\u5b9a\u4e49\u51fd\u6570\u3002 \u5728\u7c7b\u5185\u90e8\u5b9a\u4e49\u7684\u51fd\u6570\u79f0\u4e3a\u65b9\u6cd5\u3002 defining.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #!/usr/bin/env python # defining.py class Some(): @staticmethod def f(): print(\"f() method\") def f(): print(\"f() function\") def g(): def f(): print(\"f() inner function\") f() Some.f() f() g() \u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5728\u4e09\u4e2a\u4e0d\u540c\u7684\u4f4d\u7f6e\u5b9a\u4e49\u4e86 f() \u51fd\u6570\u3002 1 2 3 4 5 6 7 # defining.py class Some(): @staticmethod def f(): print(\"f() method\") \u9759\u6001\u65b9\u6cd5\u5728 Some \u7c7b\u4e2d\u7528\u88c5\u9970\u5668\u5b9a\u4e49\u3002 1 2 def f(): print(\"f() function\") \u8be5\u51fd\u6570\u5728\u6a21\u5757\u4e2d\u5b9a\u4e49\u3002 1 2 3 4 def g(): def f(): print(\"f() inner function\") f() \u6b64\u5904\uff0c f() \u51fd\u6570\u5728\u53e6\u4e00\u4e2a g() \u51fd\u6570\u5185\u90e8\u5b9a\u4e49\u3002 \u8fd9\u662f\u4e00\u4e2a\u5185\u90e8\u51fd\u6570\u3002 1 2 3 Some.f() f() g() \u901a\u8fc7\u4f7f\u7528\u65b9\u62ec\u53f7\u6307\u5b9a\u7c7b\u540d\u79f0\uff0c\u70b9\u8fd0\u7b97\u7b26\u548c\u51fd\u6570\u540d\u79f0\u6765\u8c03\u7528\u9759\u6001\u65b9\u6cd5\u3002 \u5176\u4ed6\u51fd\u6570\u4f7f\u7528\u5176\u540d\u79f0\u548c\u65b9\u62ec\u53f7\u6765\u8c03\u7528\u3002 1 2 3 4 $ ./defining.py f() method f() function f() inner function Python \u51fd\u6570\u662f\u5bf9\u8c61 \u00b6 Python \u4e2d\u7684\u51fd\u6570\u662f\u5bf9\u8c61\u3002 \u5b83\u4eec\u53ef\u4ee5\u50cf Python \u4e2d\u7684\u5176\u4ed6\u5bf9\u8c61\u4e00\u6837\u8fdb\u884c\u64cd\u4f5c\u3002 \u56e0\u6b64\uff0c\u804c\u80fd\u88ab\u79f0\u4e3a\u5934\u7b49\u516c\u6c11\u3002 \u5728\u5176\u4ed6 OOP \u8bed\u8a00\uff08\u4f8b\u5982 Java \u6216 C# \uff09\u4e2d\uff0c\u60c5\u51b5\u5e76\u975e\u5982\u6b64\u3002 fun_obj.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/env python # fun_obj.py def f(): \"\"\"This function prints a message \"\"\" print(\"Today it is a cloudy day\") print(isinstance(f, object)) print(id(f)) print(f.__doc__) print(f.__name__) \u5728\u6b64\u811a\u672c\u4e2d\uff0c\u6211\u4eec\u8868\u660e\u6211\u4eec\u7684\u51fd\u6570\u4e5f\u662f\u4e00\u4e2a\u5bf9\u8c61\u3002 1 2 3 4 def f(): \"\"\"This function prints a message \"\"\" print(\"Today it is a cloudy day\") \u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a f() \u51fd\u6570\u3002 \u5b83\u5c06\u6d88\u606f\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 \u5b83\u8fd8\u5177\u6709\u4e00\u4e2a\u6587\u6863\u5b57\u7b26\u4e32\u3002 1 print(isinstance(f, object)) isinstance() \u51fd\u6570\u68c0\u67e5 f() \u51fd\u6570\u662f\u5426\u662f object \u7684\u5b9e\u4f8b\u3002 Python \u4e2d\u7684\u6240\u6709\u5bf9\u8c61\u5747\u4ece\u8be5\u57fa\u672c\u5b9e\u4f53\u7ee7\u627f\u3002 1 print(id(f)) Python \u4e2d\u7684\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684 ID\u3002 id() \u51fd\u6570\u8fd4\u56de\u5bf9\u8c61\u7684 ID\u3002 1 2 print(f.__doc__) print(f.__name__) \u5bf9\u8c61\u53ef\u80fd\u5177\u6709\u5c5e\u6027\uff1b \u6211\u4eec\u6253\u5370\u51fd\u6570\u7684\u4e24\u4e2a\u5c5e\u6027\uff1a __doc__ \u548c __name__ \u3002 1 2 3 4 5 $ ./fun_obj.py True 140353774014536 This function prints a message f \u51fd\u6570\u53ef\u4ee5\u5b58\u50a8\u5728\u96c6\u5408\u4e2d\u5e76\u4f20\u9012\u7ed9\u5176\u4ed6\u51fd\u6570\u3002 fun_coll.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #!/usr/bin/env python # fun_coll.py def f(): pass def g(): pass def h(f): print(id(f)) a = (f, g, h) for i in a: print(i) h(f) h(g) \u6211\u4eec\u5b9a\u4e49\u4e86\u4e09\u4e2a\u51fd\u6570\u3002 \u6211\u4eec\u5c06\u5b83\u4eec\u653e\u5728\u4e00\u4e2a\u5143\u7ec4\u4e2d\uff0c\u7136\u540e\u5c06\u5b83\u4eec\u4f20\u9012\u7ed9\u51fd\u6570\u3002 1 2 3 4 a = (f, g, h) for i in a: print(i) \u6211\u4eec\u5c06\u4e09\u4e2a\u51fd\u6570\u5bf9\u8c61\u653e\u5728\u4e00\u4e2a\u5143\u7ec4\u4e2d\uff0c\u5e76\u4f7f\u7528 for \u5faa\u73af\u904d\u5386\u5b83\u3002 1 2 h(f) h(g) \u6211\u4eec\u5c06 f() \u548c g() \u51fd\u6570\u4f20\u9012\u7ed9 h() \u51fd\u6570\u3002 1 2 3 4 5 6 $ ./fun_coll.py <function f at 0x0000015B998E9D08> <function g at 0x0000015B998E9E18> <function h at 0x0000015B998E9840> 1492929912072 1492929912344 \u8fd9\u662f fun_coll.py \u7a0b\u5e8f\u7684\u8f93\u51fa\u3002 Python \u4e2d\u7684\u4e09\u79cd\u51fd\u6570 \u00b6 \u4ece\u7279\u5b9a\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u6211\u4eec\u53ef\u4ee5\u8fa8\u522b\u51fa\u4e09\u79cd\u51fd\u6570\u3002 \u59cb\u7ec8\u53ef\u4f9b\u4f7f\u7528\u7684\u51fd\u6570\uff0c\u5fc5\u987b\u5bfc\u5165\u7684\u5916\u90e8\u6a21\u5757\u4e2d\u5305\u542b\u7684\u51fd\u6570\u4ee5\u53ca\u7531\u7a0b\u5e8f\u5458\u4f7f\u7528 def \u5173\u952e\u5b57\u5b9a\u4e49\u7684\u51fd\u6570\u3002 three_kinds.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python from math import sqrt def cube(x): return x * x * x print(abs(-1)) print(cube(9)) print(sqrt(81)) \u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\u5b58\u5728\u4e09\u79cd\u51fd\u6570\u3002 1 from math import sqrt sqrt() \u51fd\u6570\u662f\u4ece\u6570\u5b66\u6a21\u5757\u5bfc\u5165\u7684\u3002 1 2 def cube(x): return x * x * x cube\uff08\uff09\u51fd\u6570\u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49\u51fd\u6570\u3002 1 print(abs(-1)) abs() \u51fd\u6570\u662f\u6613\u4e8e\u8bbf\u95ee\u7684\u5185\u7f6e\u51fd\u6570\u3002 \u5b83\u662f\u8bed\u8a00\u6838\u5fc3\u7684\u4e00\u90e8\u5206\u3002 Python return \u5173\u952e\u5b57 \u00b6 \u521b\u5efa\u4e00\u4e2a\u51fd\u6570\u6765\u6267\u884c\u7279\u5b9a\u4efb\u52a1\u3002 \u901a\u5e38\uff0c\u8fd9\u79cd\u4efb\u52a1\u4f1a\u4ea7\u751f\u7ed3\u679c\u3002 return \u5173\u952e\u5b57\u7528\u4e8e\u4ece\u51fd\u6570\u8fd4\u56de\u503c\u3002 \u51fd\u6570\u53ef\u80fd\u4f1a\u4e5f\u53ef\u80fd\u4e0d\u4f1a\u8fd4\u56de\u503c\u3002 \u5982\u679c\u4e00\u4e2a\u51fd\u6570\u6ca1\u6709 return \u5173\u952e\u5b57\uff0c\u5b83\u5c06\u53d1\u9001 None \u3002 returning.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python # returning.py def show_message(msg): print(msg) def cube(x): return x * x * x x = cube(3) print(x) show_message(\"Computation finished.\") print(show_message(\"Ready.\")) \u6211\u4eec\u5b9a\u4e49\u4e86\u4e24\u4e2a\u51fd\u6570\u3002 \u4e00\u4e2a\u4f7f\u7528 return \u5173\u952e\u5b57\uff0c\u53e6\u4e00\u4e2a\u5219\u4e0d\u4f7f\u7528\u3002 1 2 def show_message(msg): print(msg) show_message() \u51fd\u6570\u4e0d\u4f1a\u663e\u5f0f\u8fd4\u56de\u503c\u3002 \u5b83\u5728\u63a7\u5236\u53f0\u4e0a\u663e\u793a\u4e00\u6761\u6d88\u606f\u3002 1 2 def cube(x): return x * x * x cube() \u51fd\u6570\u8ba1\u7b97\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u5e76\u4f7f\u7528 return \u5173\u952e\u5b57\u8fd4\u56de\u5176\u7ed3\u679c\u3002 1 x = cube(3) \u5728\u8fd9\u4e00\u884c\u4e2d\uff0c\u6211\u4eec\u79f0\u4e3a cube() \u51fd\u6570\u3002 \u8fd4\u56de cube() \u51fd\u6570\u7684\u8ba1\u7b97\u7ed3\u679c\uff0c\u5e76\u5c06\u5176\u5206\u914d\u7ed9 x \u53d8\u91cf\u3002 \u73b0\u5728\u4fdd\u5b58\u7ed3\u679c\u503c\u3002 1 show_message(\"Computation finished.\") \u6211\u4eec\u4ee5\u6d88\u606f\u4e3a\u53c2\u6570\u8c03\u7528 show_message() \u51fd\u6570\u3002 \u8be5\u6d88\u606f\u5c06\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 \u6211\u4eec\u4e0d\u671f\u671b\u6b64\u51fd\u6570\u6709\u503c\u3002 1 print(show_message(\"Ready.\")) \u6b64\u4ee3\u7801\u4ea7\u751f\u4e24\u884c\u3002 \u4e00\u79cd\u662f\u901a\u8fc7 show_message() \u51fd\u6570\u6253\u5370\u7684\u6d88\u606f\u3002 \u53e6\u4e00\u4e2a\u662f None \u503c\uff0c\u8be5\u503c\u7531\u6ca1\u6709 return \u8bed\u53e5\u7684\u51fd\u6570\u9690\u5f0f\u53d1\u9001\u3002 1 2 3 4 5 $ ./returning.py 27 Computation finished. Ready. None \u6211\u4eec\u53ef\u4ee5\u4ece\u51fd\u6570\u4e2d\u53d1\u9001\u591a\u4e2a\u503c\u3002 return \u5173\u952e\u5b57\u4e4b\u540e\u7684\u5bf9\u8c61\u7528\u9017\u53f7\u5206\u9694\u3002 returning2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/usr/bin/env python # returning2.py n = [1, 2, 3, 4, 5] def stats(x): _mx = max(x) _mn = min(x) _ln = len(x) _sm = sum(x) return _mx, _mn, _ln, _sm mx, mn, ln, sm = stats(n) print(stats(n)) print(mx, mn, ln, sm) \u6709 stats() \u51fd\u6570\u7684\u5b9a\u4e49\u3002 \u6b64\u51fd\u6570\u8fd4\u56de\u56db\u4e2a\u503c\u3002 1 return _mx, _mn, _ln, _sm return \u5173\u952e\u5b57\u53d1\u56de\u56db\u4e2a\u6570\u5b57\u3002 \u8fd9\u4e9b\u6570\u5b57\u7528\u9017\u53f7\u5206\u9694\u3002 \u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u5df2\u7ecf\u53d1\u9001\u4e86\u5305\u542b\u8fd9\u56db\u4e2a\u503c\u7684\u5143\u7ec4\u3002 \u6211\u4eec\u4e5f\u53ef\u4ee5\u8fd4\u56de\u5217\u8868\u800c\u4e0d\u662f\u5143\u7ec4\u3002 1 mx, mn, ln, sm = stats(n) \u8fd4\u56de\u7684\u503c\u5206\u914d\u7ed9\u5c40\u90e8\u53d8\u91cf\u3002 1 2 3 $ ./returning2.py (5, 1, 5, 15) 5 1 5 15 \u8fd9\u662f\u8f93\u51fa\u3002 Python \u51fd\u6570\u91cd\u65b0\u5b9a\u4e49 \u00b6 Python \u672c\u8d28\u4e0a\u662f\u52a8\u6001\u7684\u3002 \u53ef\u4ee5\u91cd\u65b0\u5b9a\u4e49\u5df2\u7ecf\u5b9a\u4e49\u7684\u51fd\u6570\u3002 redefinition.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/env python # redefinition.py from time import gmtime, strftime def show_message(msg): print(msg) show_message(\"Ready.\") def show_message(msg): print(strftime(\"%H:%M:%S\", gmtime())) print(msg) show_message(\"Processing.\") \u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a show_message() \u51fd\u6570\u3002 \u7a0d\u540e\uff0c\u6211\u4eec\u63d0\u4f9b\u76f8\u540c\u51fd\u6570\u7684\u65b0\u5b9a\u4e49\u3002 1 from time import gmtime, strftime \u4ece\u65f6\u95f4\u6a21\u5757\u4e2d\uff0c\u6211\u4eec\u5bfc\u5165\u4e24\u4e2a\u51fd\u6570\uff0c\u7528\u4e8e\u8ba1\u7b97\u5f53\u524d\u65f6\u95f4\u3002 1 2 def show_message(msg): print(msg) \u8fd9\u662f\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u5b9a\u4e49\u3002 \u5b83\u4ec5\u5c06\u6d88\u606f\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 2 3 def show_message(msg): print(strftime(\"%H:%M:%S\", gmtime())) print(msg) \u5728\u6e90\u4ee3\u7801\u7684\u540e\u9762\uff0c\u6211\u4eec\u8bbe\u7f6e\u4e86 showMessage() \u51fd\u6570\u7684\u65b0\u5b9a\u4e49\u3002 \u8be5\u6d88\u606f\u4e4b\u524d\u5e26\u6709\u65f6\u95f4\u6233\u3002 1 2 3 $ ./redefinition.py Ready. 23:49:33 Processing. Python \u51fd\u6570\u53c2\u6570 \u00b6 \u5927\u591a\u6570\u51fd\u6570\u63a5\u53d7\u53c2\u6570\u3002 \u53c2\u6570\u662f\u53d1\u9001\u5230\u51fd\u6570\u7684\u503c\u3002 \u8fd9\u4e9b\u51fd\u6570\u5904\u7406\u8fd9\u4e9b\u503c\u5e76\u6709\u9009\u62e9\u5730\u8fd4\u56de\u4e00\u4e9b\u503c\u3002 fahrenheit.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python # fahrenheit.py def C2F(c): return c * 9/5 + 32 print(C2F(100)) print(C2F(0)) print(C2F(30)) \u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u6444\u6c0f\u6e29\u5ea6\u8f6c\u6362\u4e3a\u534e\u6c0f\u6e29\u5ea6\u3002 C2F() \u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570 c\uff0c\u5373\u6444\u6c0f\u6e29\u5ea6\u3002 1 2 3 4 $ ./fahrenheit.py 212 32 86 Python \u51fd\u6570\u4e2d\u7684\u53c2\u6570\u53ef\u80fd\u5177\u6709\u9690\u5f0f\u503c\u3002 \u5982\u679c\u672a\u63d0\u4f9b\u4efb\u4f55\u503c\uff0c\u5219\u4f7f\u7528\u9690\u5f0f\u503c\u3002 fun_implicit.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/env python # fun_implicit.py def power(x, y=2): r = 1 for i in range(y): r = r * x return r print(power(3)) print(power(3, 3)) print(power(5, 5)) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u5e42\u51fd\u6570\u3002 \u8be5\u51fd\u6570\u6709\u4e00\u4e2a\u5e26\u6709\u9690\u5f0f\u503c\u7684\u53c2\u6570\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u6216\u4e24\u4e2a\u53c2\u6570\u6765\u8c03\u7528\u8be5\u51fd\u6570\u3002 1 2 3 4 $ ./fun_implicit.py 9 27 3125 Python \u51fd\u6570\u53ef\u4ee5\u4f7f\u7528\u5173\u952e\u5b57\u6307\u5b9a\u5176\u53c2\u6570\u3002 \u8fd9\u610f\u5473\u7740\u5728\u8c03\u7528\u51fd\u6570\u65f6\uff0c\u6211\u4eec\u540c\u65f6\u6307\u5b9a\u4e86\u5173\u952e\u5b57\u548c\u503c\u3002 \u5f53\u6211\u4eec\u6709\u591a\u4e2a\u53c2\u6570\u5e76\u4e14\u4e0d\u4f7f\u7528\u5173\u952e\u5b57\u800c\u4f7f\u7528\u5b83\u4eec\u65f6\uff0c\u4f20\u9012\u8fd9\u4e9b\u53c2\u6570\u7684\u987a\u5e8f\u81f3\u5173\u91cd\u8981\u3002 \u5982\u679c\u6211\u4eec\u671f\u671b\u5728\u6ca1\u6709\u5173\u952e\u5b57\u7684\u51fd\u6570\u4e2d\u4f7f\u7528\u540d\u79f0\uff0c\u5e74\u9f84\u6216\u6027\u522b\uff0c\u5219\u65e0\u6cd5\u66f4\u6539\u5176\u987a\u5e8f\u3002 \u5982\u679c\u4f7f\u7528\u5173\u952e\u5b57\uff0c\u6211\u4eec\u53ef\u4ee5\u3002 fun_keywords.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python # fun_keywords.py def display(name, age, sex): print(\"Name: \", name) print(\"Age: \", age) print(\"Sex: \", sex) display(\"Lary\", 43, \"M\") display(\"Joan\", 24, \"F\") \u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6307\u5b9a\u53c2\u6570\u7684\u987a\u5e8f\u5f88\u91cd\u8981\u3002 \u5426\u5219\uff0c\u6211\u4eec\u5c06\u5f97\u5230\u9519\u8bef\u7684\u7ed3\u679c\u3002 1 2 3 4 5 6 7 $ ./fun_keywords.py Name: Lary Age: 43 Sex: M Name: Joan Age: 24 Sex: F fun_keywords2.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python # fun_keywords2.py def display(name, age, sex): print(\"Name: \", name) print(\"Age: \", age) print(\"Sex: \", sex) display(age=43, name=\"Lary\", sex=\"M\") display(name=\"Joan\", age=24, sex=\"F\") \u73b0\u5728\u6211\u4eec\u7528\u5b83\u4eec\u7684\u5173\u952e\u5b57\u6765\u8c03\u7528\u51fd\u6570\u3002 \u53ef\u4ee5\u66f4\u6539\u987a\u5e8f\uff0c\u5c3d\u7ba1\u4e0d\u5efa\u8bae\u8fd9\u6837\u505a\u3002 \u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u4e0d\u80fd\u5728\u5173\u952e\u5b57\u53c2\u6570\u4e4b\u540e\u4f7f\u7528\u975e\u5173\u952e\u5b57\u53c2\u6570\u3002 \u8fd9\u5c06\u5bfc\u81f4\u8bed\u6cd5\u9519\u8bef\u3002 1 display(\"Joan\", sex=\"F\", age=24) \u8fd9\u662f\u6cd5\u5f8b\u6784\u60f3\u3002 \u975e\u5173\u952e\u5b57\u53c2\u6570\u540e\u53ef\u4ee5\u8ddf\u5173\u952e\u5b57\u53c2\u6570\u3002 1 display(age=24, name=\"Joan\", \"F\") \u8fd9\u5c06\u5bfc\u81f4\u8bed\u6cd5\u9519\u8bef\u3002 \u975e\u5173\u952e\u5b57\u53c2\u6570\u4e0d\u80fd\u8ddf\u5728\u5173\u952e\u5b57\u53c2\u6570\u4e4b\u540e\u3002 Python \u4e2d\u7684\u51fd\u6570\u53ef\u4ee5\u63a5\u53d7\u4efb\u610f\u6570\u91cf\u7684\u53c2\u6570\u3002 arbitrary_args.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/usr/bin/env python # arbitrary_args.py def do_sum(*args): \"\"\"Function returns the sum of all values\"\"\" r = 0 for i in args: r += i return r print(do_sum.__doc__) print(do_sum(1, 2, 3)) print(do_sum(1, 2, 3, 4, 5)) \u6211\u4eec\u4f7f\u7528 * \u8fd0\u7b97\u7b26\u8868\u793a\u8be5\u51fd\u6570\u63a5\u53d7\u4efb\u610f\u6570\u91cf\u7684\u53c2\u6570\u3002 do_sum() \u51fd\u6570\u8fd4\u56de\u6240\u6709\u53c2\u6570\u7684\u603b\u548c\u3002 \u51fd\u6570\u4e3b\u4f53\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u79f0\u4e3a\u51fd\u6570\u6587\u6863\u5b57\u7b26\u4e32\u3002 \u7528\u4e8e\u8bb0\u5f55\u51fd\u6570\u3002 \u8be5\u5b57\u7b26\u4e32\u5fc5\u987b\u7528\u4e09\u5f15\u53f7\u5f15\u8d77\u6765\u3002 1 2 3 4 5 $ ./arbitrary_args.py Function returns the sum of all values 6 15 \u6211\u4eec\u8fd8\u53ef\u4ee5\u5728\u51fd\u6570\u4e2d\u4f7f\u7528 ** \u6784\u9020\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8be5\u51fd\u6570\u5c06\u63a5\u53d7\u5b57\u5178\u3002 \u5b57\u5178\u6709\u4efb\u610f\u957f\u5ea6\u3002 \u7136\u540e\uff0c\u6211\u4eec\u901a\u5e38\u53ef\u4ee5\u7167\u5e38\u89e3\u6790\u5b57\u5178\u3002 details.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python # details.py def display(**details): for i in details: print(f\"{i}: {details[i]}\") display(name=\"Larry\", age=43, sex=\"M\") \u672c\u793a\u4f8b\u8bf4\u660e\u4e86\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u53ef\u4ee5\u63d0\u4f9b\u4efb\u610f\u6570\u91cf\u7684\u952e\u503c\u53c2\u6570\uff0c\u8be5\u51fd\u6570\u5c06\u5904\u7406\u6240\u6709\u8fd9\u4e9b\u3002 1 2 3 4 $ ./details.py age: 43 name: Larry sex: M Python \u901a\u8fc7\u5f15\u7528\u4f20\u9012\u53c2\u6570 \u00b6 \u51fd\u6570\u7684\u53c2\u6570\u901a\u8fc7\u5f15\u7528\u4f20\u9012\u3002 \u4e00\u4e9b\u8bed\u8a00\u5c06\u5bf9\u8c61\u7684\u526f\u672c\u4f20\u9012\u7ed9\u51fd\u6570\u3002 \u901a\u8fc7\u5f15\u7528\u4f20\u9012\u5bf9\u8c61\u6709\u4e24\u4e2a\u91cd\u8981\u7ed3\u8bba\uff1aa\uff09\u4e0e\u4f20\u9012\u5bf9\u8c61\u526f\u672c\u76f8\u6bd4\uff0c\u6b64\u8fc7\u7a0b\u66f4\u5feb\u3002 b\uff09\u5728\u51fd\u6570\u4e2d\u4fee\u6539\u7684\u53ef\u53d8\u5bf9\u8c61\u5c06\u6c38\u4e45\u66f4\u6539\u3002 passing_by_reference.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/usr/bin/env python # passing_by_reference.py n = [1, 2, 3, 4, 5] print(\"Original list:\", n) def f(x): x.pop() x.pop() x.insert(0, 0) print(\"Inside f():\", x) f(n) print(\"After function call:\", n) \u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u6574\u6570\u5217\u8868\u4f20\u9012\u7ed9\u51fd\u6570\u3002 \u8be5\u5bf9\u8c61\u5728\u51fd\u6570\u4f53\u5185\u88ab\u4fee\u6539\uff0c\u8c03\u7528\u8be5\u51fd\u6570\uff08\u539f\u59cb\u5bf9\u8c61\uff09\u540e\uff0c\u5c06\u4fee\u6539\u6574\u6570\u5217\u8868\u3002 1 2 3 4 5 6 def f(x): x.pop() x.pop() x.insert(0, 0) print(\"Inside f():\", x) \u5728\u51fd\u6570\u4e3b\u4f53\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u539f\u59cb\u5bf9\u8c61\uff0c\u4e0d\u5e26\u5bf9\u8c61\u7684\u526f\u672c\u3002 \u5728\u8bb8\u591a\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5c06\u6536\u5230\u5bf9\u8c61\u7684\u526f\u672c\u3002 1 2 3 4 $ ./passing_by_reference.py Original list: [1, 2, 3, 4, 5] Inside f(): [0, 1, 2, 3] After function call: [0, 1, 2, 3] \u4e00\u65e6\u5217\u8868\u88ab\u4fee\u6539\uff0c\u5b83\u5c31\u88ab\u6c38\u4e45\u4fee\u6539\u4e86\u3002 Python \u5168\u5c40\u548c\u5c40\u90e8\u53d8\u91cf \u00b6 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u8ba8\u8bba\u5982\u4f55\u5728 Python \u51fd\u6570\u4e2d\u4f7f\u7528\u53d8\u91cf\u3002 local_variable.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python # local_variable.py name = \"Jack\" def f(): name = \"Robert\" print(\"Within function\", name) print(\"Outside function\", name) f() \u5728\u51fd\u6570\u4f53\u4e2d\u5b9a\u4e49\u7684\u53d8\u91cf\u5177\u6709\u5c40\u90e8\u8303\u56f4\u3002 \u5b83\u4ec5\u5728\u51fd\u6570\u4f53\u5185\u6709\u6548\u3002 1 2 3 $ ./local_variable.py Outside function Jack Within function Robert global_variable.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python # global_variable.py name = \"Jack\" def f(): print(\"Within function\", name) print(\"Outside function\", name) f() \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u51fd\u6570\u4f53\u5185\u83b7\u53d6\u5168\u5c40\u53d8\u91cf\u7684\u5185\u5bb9\u3002 1 2 3 $ ./global_variable.py Outside function Jack Within function Jack \u4f46\u662f\uff0c\u5982\u679c\u8981\u66f4\u6539\u51fd\u6570\u4e2d\u7684\u5168\u5c40\u53d8\u91cf\uff0c\u5219\u5fc5\u987b\u4f7f\u7528 global \u5173\u952e\u5b57\u3002 global_variable2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python # global_variable2.py name = \"Jack\" def f(): global name name = \"Robert\" print(\"Within function\", name) print(\"Outside function\", name) f() print(\"Outside function\", name) \u73b0\u5728\uff0c\u6211\u4eec\u5c06\u5728\u51fd\u6570\u5185\u90e8\u66f4\u6539\u5168\u5c40\u540d\u79f0\u53d8\u91cf\u7684\u5185\u5bb9\u3002 1 2 global name name = \"Robert\" \u4f7f\u7528 global \u5173\u952e\u5b57\uff0c\u6211\u4eec\u5f15\u7528\u5728\u51fd\u6570\u4e3b\u4f53\u5916\u90e8\u5b9a\u4e49\u7684\u53d8\u91cf\u3002 \u8be5\u53d8\u91cf\u88ab\u8d4b\u4e88\u4e00\u4e2a\u65b0\u503c\u3002 1 2 3 4 $ ./global_variable2.py Outside function Jack Within function Robert Outside function Robert Python \u533f\u540d\u51fd\u6570 \u00b6 \u53ef\u4ee5\u5728 Python \u4e2d\u521b\u5efa\u533f\u540d\u51fd\u6570\u3002 \u533f\u540d\u51fd\u6570\u6ca1\u6709\u540d\u79f0\u3002 \u4f7f\u7528 lambda \u5173\u952e\u5b57\uff0c\u51e0\u4e4e\u65e0\u6cd5\u521b\u5efa\u4efb\u4f55\u533f\u540d\u51fd\u6570\u3002 Python \u7a0b\u5e8f\u5458\u4e5f\u5c06\u533f\u540d\u51fd\u6570\u79f0\u4e3a lambda \u51fd\u6570\u3002 \u5b83\u4eec\u662f Python \u4e2d\u5408\u5e76\u7684\u51fd\u6570\u793a\u4f8b\u7684\u4e00\u90e8\u5206\u3002 Lambda \u51fd\u6570\u4ec5\u9650\u4e8e\u5355\u4e2a\u8868\u8fbe\u5f0f\u3002 \u5b83\u4eec\u53ef\u4ee5\u5728\u53ef\u4ee5\u4f7f\u7528\u5e38\u89c4\u51fd\u6570\u7684\u4efb\u4f55\u5730\u65b9\u4f7f\u7528\u3002 lambda_fun.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python # lambda_fun.py y = 6 z = lambda x: x * y print(z(8)) \u8fd9\u662f lambda \u51fd\u6570\u7684\u4e00\u4e2a\u5c0f\u4f8b\u5b50\u3002 1 z = lambda x: x * y lambda \u5173\u952e\u5b57\u521b\u5efa\u4e00\u4e2a\u533f\u540d\u51fd\u6570\u3002 x \u662f\u4f20\u9012\u7ed9 lambda \u51fd\u6570\u7684\u53c2\u6570\u3002 \u53c2\u6570\u540e\u8ddf\u4e00\u4e2a\u5192\u53f7\u3002 \u5192\u53f7\u65c1\u8fb9\u7684\u4ee3\u7801\u662f\u5728\u8c03\u7528 lambda \u51fd\u6570\u65f6\u6267\u884c\u7684\u8868\u8fbe\u5f0f\u3002 lambda \u51fd\u6570\u88ab\u5206\u914d\u7ed9 z \u53d8\u91cf\u3002 1 print(z(8)) lambda \u51fd\u6570\u88ab\u6267\u884c\u3002 \u6570\u5b57 8 \u4f20\u9012\u7ed9\u533f\u540d\u51fd\u6570\uff0c\u7ed3\u679c\u8fd4\u56de 48\u3002 \u8bf7\u6ce8\u610f\uff0c z \u4e0d\u662f\u6b64\u51fd\u6570\u7684\u540d\u79f0\u3002 \u5b83\u53ea\u662f\u5206\u914d\u4e86\u533f\u540d\u51fd\u6570\u7684\u53d8\u91cf\u3002 1 2 $ ./lambda_fun.py 48 lambda \u51fd\u6570\u53ef\u4ee5\u4e0e map() \u6216 filter() \u51fd\u6570\u4e4b\u7c7b\u7684 Python \u8bed\u8a00\u7684\u5176\u4ed6\u51fd\u6570\u90e8\u4ef6\u5b8c\u7f8e\u5730\u7ed3\u5408\u4f7f\u7528\u3002 lambda_fun2.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python # lambda_fun2.py cs = [-10, 0, 15, 30, 40] ft = map(lambda t: (9.0/5)*t + 32, cs) print(list(ft)) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5217\u51fa\u4e86\u6444\u6c0f\u6e29\u5ea6\u3002 \u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u5305\u542b\u534e\u6c0f\u6e29\u5ea6\u7684\u65b0\u5217\u8868\u3002 1 ft = map(lambda t: (9.0/5)*t + 32, cs) map() \u51fd\u6570\u5c06\u533f\u540d\u51fd\u6570\u5e94\u7528\u4e8e cs \u5217\u8868\u7684\u6bcf\u4e2a\u5143\u7d20\u3002 \u5b83\u8fd4\u56de\u8ba1\u7b97\u51fa\u7684\u534e\u6c0f\u6e29\u5ea6\u7684\u53ef\u8fed\u4ee3\u503c\u3002 1 2 $ ./lambda_fun2.py [14.0, 32.0, 59.0, 86.0, 104.0]","title":"Python \u51fd\u6570"},{"location":"pages/python/pytutorial/python-functions/#Python-\u51fd\u6570","text":"Python \u51fd\u6570 \u662f\u7528\u4e8e\u6267\u884c\u7279\u5b9a\u64cd\u4f5c\u7684\u53ef\u91cd\u7528\u4ee3\u7801\u5757\u3002 \u4f7f\u7528\u51fd\u6570\u7684\u4f18\u70b9\u662f\uff1a \u51cf\u5c11\u4ee3\u7801\u91cd\u590d \u5c06\u590d\u6742\u7684\u95ee\u9898\u5206\u89e3\u6210\u66f4\u7b80\u5355\u7684\u90e8\u5206 \u63d0\u9ad8\u4ee3\u7801\u7684\u6e05\u6670\u5ea6 \u91cd\u7528\u4ee3\u7801 \u4fe1\u606f\u9690\u85cf Python \u4e2d\u7684\u51fd\u6570\u662f\u4e00\u7b49\u516c\u6c11\u3002 \u8fd9\u610f\u5473\u7740\u51fd\u6570\u4e0e Python \u4e2d\u7684\u5176\u4ed6\u5bf9\u8c61\u5177\u6709\u540c\u7b49\u7684\u72b6\u6001\u3002 \u53ef\u4ee5\u5c06\u51fd\u6570\u5206\u914d\u7ed9\u53d8\u91cf\uff0c\u5b58\u50a8\u5728\u96c6\u5408\u4e2d\u6216\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\uff0c\u8fd9\u7ed9\u8bed\u8a00\u5e26\u6765\u4e86\u989d\u5916\u7684\u7075\u6d3b\u6027\u3002","title":"Python \u51fd\u6570"},{"location":"pages/python/pytutorial/python-functions/#Python-\u51fd\u6570\u7c7b\u578b","text":"\u51fd\u6570\u6709\u4e24\u79cd\u57fa\u672c\u7c7b\u578b\uff1a\u5185\u7f6e\u51fd\u6570\u548c\u7528\u6237\u5b9a\u4e49\u51fd\u6570\u3002 \u5185\u7f6e\u51fd\u6570\u662f Python \u8bed\u8a00\u7684\u4e00\u90e8\u5206\uff1b \u4f8b\u5982 dir() \uff0c len() \u6216 abs() \u3002 \u7528\u6237\u5b9a\u4e49\u7684\u51fd\u6570\u662f\u4f7f\u7528 def \u5173\u952e\u5b57\u521b\u5efa\u7684\u51fd\u6570\u3002","title":"Python \u51fd\u6570\u7c7b\u578b"},{"location":"pages/python/pytutorial/python-functions/#Python-\u521b\u5efa\u51fd\u6570","text":"\u4f7f\u7528 def \u5173\u952e\u5b57\u521b\u5efa\u4e00\u4e2a\u51fd\u6570\u3002 \u51fd\u6570\u5757\u4e2d\u7684\u8bed\u53e5\u5fc5\u987b\u7f29\u8fdb\u3002 1 2 def function(): pass def \u5173\u952e\u5b57\u540e\u8ddf\u5e26\u6709\u5706\u62ec\u53f7\u548c\u5192\u53f7\u7684\u51fd\u6570\u540d\u79f0\u3002 \u7f29\u8fdb\u8bed\u53e5\u5f62\u6210\u51fd\u6570\u7684\u4e3b\u4f53\u3002 \u8be5\u51fd\u6570\u7a0d\u540e\u5728\u9700\u8981\u65f6\u6267\u884c\u3002 \u6211\u4eec\u8bf4\u6211\u4eec\u8c03\u7528\u51fd\u6570\u3002 \u5982\u679c\u6211\u4eec\u8c03\u7528\u4e00\u4e2a\u51fd\u6570\uff0c\u5219\u4f1a\u6267\u884c\u51fd\u6570\u4f53\u5185\u7684\u8bed\u53e5\u3002 \u5728\u8c03\u7528\u51fd\u6570\u4e4b\u524d\uff0c\u5b83\u4eec\u4e0d\u4f1a\u6267\u884c\u3002 1 myfunc() \u8981\u8c03\u7528\u51fd\u6570\uff0c\u6211\u4eec\u7528\u5706\u62ec\u53f7\u6307\u5b9a\u51fd\u6570\u540d\u79f0\u3002 ret.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #!/usr/bin/env python \"\"\" The ret.py script shows how to work with functions in Python. Author: Jan Bodnar ZetCode, 2019 \"\"\" def show_module_name(): print(__doc__) def get_module_file(): return __file__ a = show_module_name() b = get_module_file() print(a, b) \u811a\u672c\u9876\u90e8\u7684\u5b57\u7b26\u4e32\u79f0\u4e3a\u6587\u6863\u5b57\u7b26\u4e32\u3002 \u5b83\u8bb0\u5f55\u4e86\u5f53\u524d\u811a\u672c\u3002 \u6211\u4eec\u653e\u5165 Python \u4ee3\u7801\u7684\u6587\u4ef6\u79f0\u4e3a\u6a21\u5757\u3002 \u6211\u4eec\u5b9a\u4e49\u4e24\u4e2a\u51fd\u6570\u3002 \u7b2c\u4e00\u4e2a\u51fd\u6570\u6253\u5370\u6a21\u5757\u6587\u6863\u5b57\u7b26\u4e32\u3002 \u7b2c\u4e8c\u4e2a\u8fd4\u56de\u6a21\u5757\u7684\u8def\u5f84\u3002 \u51fd\u6570\u53ef\u80fd\u4f1a\u6216\u53ef\u80fd\u4e0d\u4f1a\u8fd4\u56de\u503c\u3002 \u5982\u679c\u51fd\u6570\u6ca1\u6709\u8fd4\u56de\u503c\uff0c\u5219\u5b83\u9690\u5f0f\u8fd4\u56de None \u3002 __doc__ \u548c __file__ \u662f\u7279\u6b8a\u7684\u72b6\u6001\u5c5e\u6027\u3002 \u8bf7\u6ce8\u610f\uff0c\u5c5e\u6027\u7684\u4e24\u4fa7\u90fd\u6709\u4e24\u4e2a\u4e0b\u5212\u7ebf\u3002 1 2 3 4 5 6 7 8 $ ./ret.py The ret.py script shows how to work with functions in Python. Author: Jan Bodnar ZetCode, 2019 None C:/Users/Jano/PycharmProjects/Simple/simple.py \u51fd\u6570\u7684\u5b9a\u4e49\u5fc5\u987b\u5148\u4e8e\u5176\u7528\u6cd5\u3002 \u5426\u5219\uff0c\u53e3\u8bd1\u5458\u4f1a\u62b1\u6028 NameError \u3002 func_prec.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python # func_prec.py def f1(): print(\"f1()\") f1() #f2() def f2(): print(\"f2()\") \u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\u4e24\u4e2a\u51fd\u6570\u5b9a\u4e49\u3002 \u4e00\u884c\u88ab\u6ce8\u91ca\uff0c\u51fd\u6570\u8c03\u7528\u4e0d\u80fd\u8d85\u51fa\u5176\u5b9a\u4e49\u3002 1 2 3 4 #f2() def f2(): print(\"f2()\") \u4ec5\u5728\u5b9a\u4e49\u540e\u624d\u80fd\u8c03\u7528 f2() \u3002 \u53d6\u6d88\u6ce8\u91ca\u8be5\u884c\uff0c\u6211\u4eec\u5f97\u5230\u4e00\u4e2a NameError \u3002","title":"Python \u521b\u5efa\u51fd\u6570"},{"location":"pages/python/pytutorial/python-functions/#\u5728\u54ea\u91cc\u5b9a\u4e49\u51fd\u6570","text":"\u53ef\u4ee5\u5728\u6a21\u5757\uff0c\u7c7b\u6216\u5176\u4ed6\u51fd\u6570\u4e2d\u5b9a\u4e49\u51fd\u6570\u3002 \u5728\u7c7b\u5185\u90e8\u5b9a\u4e49\u7684\u51fd\u6570\u79f0\u4e3a\u65b9\u6cd5\u3002 defining.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #!/usr/bin/env python # defining.py class Some(): @staticmethod def f(): print(\"f() method\") def f(): print(\"f() function\") def g(): def f(): print(\"f() inner function\") f() Some.f() f() g() \u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5728\u4e09\u4e2a\u4e0d\u540c\u7684\u4f4d\u7f6e\u5b9a\u4e49\u4e86 f() \u51fd\u6570\u3002 1 2 3 4 5 6 7 # defining.py class Some(): @staticmethod def f(): print(\"f() method\") \u9759\u6001\u65b9\u6cd5\u5728 Some \u7c7b\u4e2d\u7528\u88c5\u9970\u5668\u5b9a\u4e49\u3002 1 2 def f(): print(\"f() function\") \u8be5\u51fd\u6570\u5728\u6a21\u5757\u4e2d\u5b9a\u4e49\u3002 1 2 3 4 def g(): def f(): print(\"f() inner function\") f() \u6b64\u5904\uff0c f() \u51fd\u6570\u5728\u53e6\u4e00\u4e2a g() \u51fd\u6570\u5185\u90e8\u5b9a\u4e49\u3002 \u8fd9\u662f\u4e00\u4e2a\u5185\u90e8\u51fd\u6570\u3002 1 2 3 Some.f() f() g() \u901a\u8fc7\u4f7f\u7528\u65b9\u62ec\u53f7\u6307\u5b9a\u7c7b\u540d\u79f0\uff0c\u70b9\u8fd0\u7b97\u7b26\u548c\u51fd\u6570\u540d\u79f0\u6765\u8c03\u7528\u9759\u6001\u65b9\u6cd5\u3002 \u5176\u4ed6\u51fd\u6570\u4f7f\u7528\u5176\u540d\u79f0\u548c\u65b9\u62ec\u53f7\u6765\u8c03\u7528\u3002 1 2 3 4 $ ./defining.py f() method f() function f() inner function","title":"\u5728\u54ea\u91cc\u5b9a\u4e49\u51fd\u6570"},{"location":"pages/python/pytutorial/python-functions/#Python-\u51fd\u6570\u662f\u5bf9\u8c61","text":"Python \u4e2d\u7684\u51fd\u6570\u662f\u5bf9\u8c61\u3002 \u5b83\u4eec\u53ef\u4ee5\u50cf Python \u4e2d\u7684\u5176\u4ed6\u5bf9\u8c61\u4e00\u6837\u8fdb\u884c\u64cd\u4f5c\u3002 \u56e0\u6b64\uff0c\u804c\u80fd\u88ab\u79f0\u4e3a\u5934\u7b49\u516c\u6c11\u3002 \u5728\u5176\u4ed6 OOP \u8bed\u8a00\uff08\u4f8b\u5982 Java \u6216 C# \uff09\u4e2d\uff0c\u60c5\u51b5\u5e76\u975e\u5982\u6b64\u3002 fun_obj.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/env python # fun_obj.py def f(): \"\"\"This function prints a message \"\"\" print(\"Today it is a cloudy day\") print(isinstance(f, object)) print(id(f)) print(f.__doc__) print(f.__name__) \u5728\u6b64\u811a\u672c\u4e2d\uff0c\u6211\u4eec\u8868\u660e\u6211\u4eec\u7684\u51fd\u6570\u4e5f\u662f\u4e00\u4e2a\u5bf9\u8c61\u3002 1 2 3 4 def f(): \"\"\"This function prints a message \"\"\" print(\"Today it is a cloudy day\") \u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a f() \u51fd\u6570\u3002 \u5b83\u5c06\u6d88\u606f\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 \u5b83\u8fd8\u5177\u6709\u4e00\u4e2a\u6587\u6863\u5b57\u7b26\u4e32\u3002 1 print(isinstance(f, object)) isinstance() \u51fd\u6570\u68c0\u67e5 f() \u51fd\u6570\u662f\u5426\u662f object \u7684\u5b9e\u4f8b\u3002 Python \u4e2d\u7684\u6240\u6709\u5bf9\u8c61\u5747\u4ece\u8be5\u57fa\u672c\u5b9e\u4f53\u7ee7\u627f\u3002 1 print(id(f)) Python \u4e2d\u7684\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684 ID\u3002 id() \u51fd\u6570\u8fd4\u56de\u5bf9\u8c61\u7684 ID\u3002 1 2 print(f.__doc__) print(f.__name__) \u5bf9\u8c61\u53ef\u80fd\u5177\u6709\u5c5e\u6027\uff1b \u6211\u4eec\u6253\u5370\u51fd\u6570\u7684\u4e24\u4e2a\u5c5e\u6027\uff1a __doc__ \u548c __name__ \u3002 1 2 3 4 5 $ ./fun_obj.py True 140353774014536 This function prints a message f \u51fd\u6570\u53ef\u4ee5\u5b58\u50a8\u5728\u96c6\u5408\u4e2d\u5e76\u4f20\u9012\u7ed9\u5176\u4ed6\u51fd\u6570\u3002 fun_coll.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #!/usr/bin/env python # fun_coll.py def f(): pass def g(): pass def h(f): print(id(f)) a = (f, g, h) for i in a: print(i) h(f) h(g) \u6211\u4eec\u5b9a\u4e49\u4e86\u4e09\u4e2a\u51fd\u6570\u3002 \u6211\u4eec\u5c06\u5b83\u4eec\u653e\u5728\u4e00\u4e2a\u5143\u7ec4\u4e2d\uff0c\u7136\u540e\u5c06\u5b83\u4eec\u4f20\u9012\u7ed9\u51fd\u6570\u3002 1 2 3 4 a = (f, g, h) for i in a: print(i) \u6211\u4eec\u5c06\u4e09\u4e2a\u51fd\u6570\u5bf9\u8c61\u653e\u5728\u4e00\u4e2a\u5143\u7ec4\u4e2d\uff0c\u5e76\u4f7f\u7528 for \u5faa\u73af\u904d\u5386\u5b83\u3002 1 2 h(f) h(g) \u6211\u4eec\u5c06 f() \u548c g() \u51fd\u6570\u4f20\u9012\u7ed9 h() \u51fd\u6570\u3002 1 2 3 4 5 6 $ ./fun_coll.py <function f at 0x0000015B998E9D08> <function g at 0x0000015B998E9E18> <function h at 0x0000015B998E9840> 1492929912072 1492929912344 \u8fd9\u662f fun_coll.py \u7a0b\u5e8f\u7684\u8f93\u51fa\u3002","title":"Python \u51fd\u6570\u662f\u5bf9\u8c61"},{"location":"pages/python/pytutorial/python-functions/#Python-\u4e2d\u7684\u4e09\u79cd\u51fd\u6570","text":"\u4ece\u7279\u5b9a\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u6211\u4eec\u53ef\u4ee5\u8fa8\u522b\u51fa\u4e09\u79cd\u51fd\u6570\u3002 \u59cb\u7ec8\u53ef\u4f9b\u4f7f\u7528\u7684\u51fd\u6570\uff0c\u5fc5\u987b\u5bfc\u5165\u7684\u5916\u90e8\u6a21\u5757\u4e2d\u5305\u542b\u7684\u51fd\u6570\u4ee5\u53ca\u7531\u7a0b\u5e8f\u5458\u4f7f\u7528 def \u5173\u952e\u5b57\u5b9a\u4e49\u7684\u51fd\u6570\u3002 three_kinds.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python from math import sqrt def cube(x): return x * x * x print(abs(-1)) print(cube(9)) print(sqrt(81)) \u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\u5b58\u5728\u4e09\u79cd\u51fd\u6570\u3002 1 from math import sqrt sqrt() \u51fd\u6570\u662f\u4ece\u6570\u5b66\u6a21\u5757\u5bfc\u5165\u7684\u3002 1 2 def cube(x): return x * x * x cube\uff08\uff09\u51fd\u6570\u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49\u51fd\u6570\u3002 1 print(abs(-1)) abs() \u51fd\u6570\u662f\u6613\u4e8e\u8bbf\u95ee\u7684\u5185\u7f6e\u51fd\u6570\u3002 \u5b83\u662f\u8bed\u8a00\u6838\u5fc3\u7684\u4e00\u90e8\u5206\u3002","title":"Python \u4e2d\u7684\u4e09\u79cd\u51fd\u6570"},{"location":"pages/python/pytutorial/python-functions/#Python-return-\u5173\u952e\u5b57","text":"\u521b\u5efa\u4e00\u4e2a\u51fd\u6570\u6765\u6267\u884c\u7279\u5b9a\u4efb\u52a1\u3002 \u901a\u5e38\uff0c\u8fd9\u79cd\u4efb\u52a1\u4f1a\u4ea7\u751f\u7ed3\u679c\u3002 return \u5173\u952e\u5b57\u7528\u4e8e\u4ece\u51fd\u6570\u8fd4\u56de\u503c\u3002 \u51fd\u6570\u53ef\u80fd\u4f1a\u4e5f\u53ef\u80fd\u4e0d\u4f1a\u8fd4\u56de\u503c\u3002 \u5982\u679c\u4e00\u4e2a\u51fd\u6570\u6ca1\u6709 return \u5173\u952e\u5b57\uff0c\u5b83\u5c06\u53d1\u9001 None \u3002 returning.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python # returning.py def show_message(msg): print(msg) def cube(x): return x * x * x x = cube(3) print(x) show_message(\"Computation finished.\") print(show_message(\"Ready.\")) \u6211\u4eec\u5b9a\u4e49\u4e86\u4e24\u4e2a\u51fd\u6570\u3002 \u4e00\u4e2a\u4f7f\u7528 return \u5173\u952e\u5b57\uff0c\u53e6\u4e00\u4e2a\u5219\u4e0d\u4f7f\u7528\u3002 1 2 def show_message(msg): print(msg) show_message() \u51fd\u6570\u4e0d\u4f1a\u663e\u5f0f\u8fd4\u56de\u503c\u3002 \u5b83\u5728\u63a7\u5236\u53f0\u4e0a\u663e\u793a\u4e00\u6761\u6d88\u606f\u3002 1 2 def cube(x): return x * x * x cube() \u51fd\u6570\u8ba1\u7b97\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u5e76\u4f7f\u7528 return \u5173\u952e\u5b57\u8fd4\u56de\u5176\u7ed3\u679c\u3002 1 x = cube(3) \u5728\u8fd9\u4e00\u884c\u4e2d\uff0c\u6211\u4eec\u79f0\u4e3a cube() \u51fd\u6570\u3002 \u8fd4\u56de cube() \u51fd\u6570\u7684\u8ba1\u7b97\u7ed3\u679c\uff0c\u5e76\u5c06\u5176\u5206\u914d\u7ed9 x \u53d8\u91cf\u3002 \u73b0\u5728\u4fdd\u5b58\u7ed3\u679c\u503c\u3002 1 show_message(\"Computation finished.\") \u6211\u4eec\u4ee5\u6d88\u606f\u4e3a\u53c2\u6570\u8c03\u7528 show_message() \u51fd\u6570\u3002 \u8be5\u6d88\u606f\u5c06\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 \u6211\u4eec\u4e0d\u671f\u671b\u6b64\u51fd\u6570\u6709\u503c\u3002 1 print(show_message(\"Ready.\")) \u6b64\u4ee3\u7801\u4ea7\u751f\u4e24\u884c\u3002 \u4e00\u79cd\u662f\u901a\u8fc7 show_message() \u51fd\u6570\u6253\u5370\u7684\u6d88\u606f\u3002 \u53e6\u4e00\u4e2a\u662f None \u503c\uff0c\u8be5\u503c\u7531\u6ca1\u6709 return \u8bed\u53e5\u7684\u51fd\u6570\u9690\u5f0f\u53d1\u9001\u3002 1 2 3 4 5 $ ./returning.py 27 Computation finished. Ready. None \u6211\u4eec\u53ef\u4ee5\u4ece\u51fd\u6570\u4e2d\u53d1\u9001\u591a\u4e2a\u503c\u3002 return \u5173\u952e\u5b57\u4e4b\u540e\u7684\u5bf9\u8c61\u7528\u9017\u53f7\u5206\u9694\u3002 returning2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/usr/bin/env python # returning2.py n = [1, 2, 3, 4, 5] def stats(x): _mx = max(x) _mn = min(x) _ln = len(x) _sm = sum(x) return _mx, _mn, _ln, _sm mx, mn, ln, sm = stats(n) print(stats(n)) print(mx, mn, ln, sm) \u6709 stats() \u51fd\u6570\u7684\u5b9a\u4e49\u3002 \u6b64\u51fd\u6570\u8fd4\u56de\u56db\u4e2a\u503c\u3002 1 return _mx, _mn, _ln, _sm return \u5173\u952e\u5b57\u53d1\u56de\u56db\u4e2a\u6570\u5b57\u3002 \u8fd9\u4e9b\u6570\u5b57\u7528\u9017\u53f7\u5206\u9694\u3002 \u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u5df2\u7ecf\u53d1\u9001\u4e86\u5305\u542b\u8fd9\u56db\u4e2a\u503c\u7684\u5143\u7ec4\u3002 \u6211\u4eec\u4e5f\u53ef\u4ee5\u8fd4\u56de\u5217\u8868\u800c\u4e0d\u662f\u5143\u7ec4\u3002 1 mx, mn, ln, sm = stats(n) \u8fd4\u56de\u7684\u503c\u5206\u914d\u7ed9\u5c40\u90e8\u53d8\u91cf\u3002 1 2 3 $ ./returning2.py (5, 1, 5, 15) 5 1 5 15 \u8fd9\u662f\u8f93\u51fa\u3002","title":"Python return \u5173\u952e\u5b57"},{"location":"pages/python/pytutorial/python-functions/#Python-\u51fd\u6570\u91cd\u65b0\u5b9a\u4e49","text":"Python \u672c\u8d28\u4e0a\u662f\u52a8\u6001\u7684\u3002 \u53ef\u4ee5\u91cd\u65b0\u5b9a\u4e49\u5df2\u7ecf\u5b9a\u4e49\u7684\u51fd\u6570\u3002 redefinition.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/env python # redefinition.py from time import gmtime, strftime def show_message(msg): print(msg) show_message(\"Ready.\") def show_message(msg): print(strftime(\"%H:%M:%S\", gmtime())) print(msg) show_message(\"Processing.\") \u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a show_message() \u51fd\u6570\u3002 \u7a0d\u540e\uff0c\u6211\u4eec\u63d0\u4f9b\u76f8\u540c\u51fd\u6570\u7684\u65b0\u5b9a\u4e49\u3002 1 from time import gmtime, strftime \u4ece\u65f6\u95f4\u6a21\u5757\u4e2d\uff0c\u6211\u4eec\u5bfc\u5165\u4e24\u4e2a\u51fd\u6570\uff0c\u7528\u4e8e\u8ba1\u7b97\u5f53\u524d\u65f6\u95f4\u3002 1 2 def show_message(msg): print(msg) \u8fd9\u662f\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u5b9a\u4e49\u3002 \u5b83\u4ec5\u5c06\u6d88\u606f\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 2 3 def show_message(msg): print(strftime(\"%H:%M:%S\", gmtime())) print(msg) \u5728\u6e90\u4ee3\u7801\u7684\u540e\u9762\uff0c\u6211\u4eec\u8bbe\u7f6e\u4e86 showMessage() \u51fd\u6570\u7684\u65b0\u5b9a\u4e49\u3002 \u8be5\u6d88\u606f\u4e4b\u524d\u5e26\u6709\u65f6\u95f4\u6233\u3002 1 2 3 $ ./redefinition.py Ready. 23:49:33 Processing.","title":"Python \u51fd\u6570\u91cd\u65b0\u5b9a\u4e49"},{"location":"pages/python/pytutorial/python-functions/#Python-\u51fd\u6570\u53c2\u6570","text":"\u5927\u591a\u6570\u51fd\u6570\u63a5\u53d7\u53c2\u6570\u3002 \u53c2\u6570\u662f\u53d1\u9001\u5230\u51fd\u6570\u7684\u503c\u3002 \u8fd9\u4e9b\u51fd\u6570\u5904\u7406\u8fd9\u4e9b\u503c\u5e76\u6709\u9009\u62e9\u5730\u8fd4\u56de\u4e00\u4e9b\u503c\u3002 fahrenheit.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python # fahrenheit.py def C2F(c): return c * 9/5 + 32 print(C2F(100)) print(C2F(0)) print(C2F(30)) \u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u6444\u6c0f\u6e29\u5ea6\u8f6c\u6362\u4e3a\u534e\u6c0f\u6e29\u5ea6\u3002 C2F() \u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570 c\uff0c\u5373\u6444\u6c0f\u6e29\u5ea6\u3002 1 2 3 4 $ ./fahrenheit.py 212 32 86 Python \u51fd\u6570\u4e2d\u7684\u53c2\u6570\u53ef\u80fd\u5177\u6709\u9690\u5f0f\u503c\u3002 \u5982\u679c\u672a\u63d0\u4f9b\u4efb\u4f55\u503c\uff0c\u5219\u4f7f\u7528\u9690\u5f0f\u503c\u3002 fun_implicit.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/env python # fun_implicit.py def power(x, y=2): r = 1 for i in range(y): r = r * x return r print(power(3)) print(power(3, 3)) print(power(5, 5)) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u5e42\u51fd\u6570\u3002 \u8be5\u51fd\u6570\u6709\u4e00\u4e2a\u5e26\u6709\u9690\u5f0f\u503c\u7684\u53c2\u6570\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u6216\u4e24\u4e2a\u53c2\u6570\u6765\u8c03\u7528\u8be5\u51fd\u6570\u3002 1 2 3 4 $ ./fun_implicit.py 9 27 3125 Python \u51fd\u6570\u53ef\u4ee5\u4f7f\u7528\u5173\u952e\u5b57\u6307\u5b9a\u5176\u53c2\u6570\u3002 \u8fd9\u610f\u5473\u7740\u5728\u8c03\u7528\u51fd\u6570\u65f6\uff0c\u6211\u4eec\u540c\u65f6\u6307\u5b9a\u4e86\u5173\u952e\u5b57\u548c\u503c\u3002 \u5f53\u6211\u4eec\u6709\u591a\u4e2a\u53c2\u6570\u5e76\u4e14\u4e0d\u4f7f\u7528\u5173\u952e\u5b57\u800c\u4f7f\u7528\u5b83\u4eec\u65f6\uff0c\u4f20\u9012\u8fd9\u4e9b\u53c2\u6570\u7684\u987a\u5e8f\u81f3\u5173\u91cd\u8981\u3002 \u5982\u679c\u6211\u4eec\u671f\u671b\u5728\u6ca1\u6709\u5173\u952e\u5b57\u7684\u51fd\u6570\u4e2d\u4f7f\u7528\u540d\u79f0\uff0c\u5e74\u9f84\u6216\u6027\u522b\uff0c\u5219\u65e0\u6cd5\u66f4\u6539\u5176\u987a\u5e8f\u3002 \u5982\u679c\u4f7f\u7528\u5173\u952e\u5b57\uff0c\u6211\u4eec\u53ef\u4ee5\u3002 fun_keywords.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python # fun_keywords.py def display(name, age, sex): print(\"Name: \", name) print(\"Age: \", age) print(\"Sex: \", sex) display(\"Lary\", 43, \"M\") display(\"Joan\", 24, \"F\") \u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6307\u5b9a\u53c2\u6570\u7684\u987a\u5e8f\u5f88\u91cd\u8981\u3002 \u5426\u5219\uff0c\u6211\u4eec\u5c06\u5f97\u5230\u9519\u8bef\u7684\u7ed3\u679c\u3002 1 2 3 4 5 6 7 $ ./fun_keywords.py Name: Lary Age: 43 Sex: M Name: Joan Age: 24 Sex: F fun_keywords2.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python # fun_keywords2.py def display(name, age, sex): print(\"Name: \", name) print(\"Age: \", age) print(\"Sex: \", sex) display(age=43, name=\"Lary\", sex=\"M\") display(name=\"Joan\", age=24, sex=\"F\") \u73b0\u5728\u6211\u4eec\u7528\u5b83\u4eec\u7684\u5173\u952e\u5b57\u6765\u8c03\u7528\u51fd\u6570\u3002 \u53ef\u4ee5\u66f4\u6539\u987a\u5e8f\uff0c\u5c3d\u7ba1\u4e0d\u5efa\u8bae\u8fd9\u6837\u505a\u3002 \u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u4e0d\u80fd\u5728\u5173\u952e\u5b57\u53c2\u6570\u4e4b\u540e\u4f7f\u7528\u975e\u5173\u952e\u5b57\u53c2\u6570\u3002 \u8fd9\u5c06\u5bfc\u81f4\u8bed\u6cd5\u9519\u8bef\u3002 1 display(\"Joan\", sex=\"F\", age=24) \u8fd9\u662f\u6cd5\u5f8b\u6784\u60f3\u3002 \u975e\u5173\u952e\u5b57\u53c2\u6570\u540e\u53ef\u4ee5\u8ddf\u5173\u952e\u5b57\u53c2\u6570\u3002 1 display(age=24, name=\"Joan\", \"F\") \u8fd9\u5c06\u5bfc\u81f4\u8bed\u6cd5\u9519\u8bef\u3002 \u975e\u5173\u952e\u5b57\u53c2\u6570\u4e0d\u80fd\u8ddf\u5728\u5173\u952e\u5b57\u53c2\u6570\u4e4b\u540e\u3002 Python \u4e2d\u7684\u51fd\u6570\u53ef\u4ee5\u63a5\u53d7\u4efb\u610f\u6570\u91cf\u7684\u53c2\u6570\u3002 arbitrary_args.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/usr/bin/env python # arbitrary_args.py def do_sum(*args): \"\"\"Function returns the sum of all values\"\"\" r = 0 for i in args: r += i return r print(do_sum.__doc__) print(do_sum(1, 2, 3)) print(do_sum(1, 2, 3, 4, 5)) \u6211\u4eec\u4f7f\u7528 * \u8fd0\u7b97\u7b26\u8868\u793a\u8be5\u51fd\u6570\u63a5\u53d7\u4efb\u610f\u6570\u91cf\u7684\u53c2\u6570\u3002 do_sum() \u51fd\u6570\u8fd4\u56de\u6240\u6709\u53c2\u6570\u7684\u603b\u548c\u3002 \u51fd\u6570\u4e3b\u4f53\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u79f0\u4e3a\u51fd\u6570\u6587\u6863\u5b57\u7b26\u4e32\u3002 \u7528\u4e8e\u8bb0\u5f55\u51fd\u6570\u3002 \u8be5\u5b57\u7b26\u4e32\u5fc5\u987b\u7528\u4e09\u5f15\u53f7\u5f15\u8d77\u6765\u3002 1 2 3 4 5 $ ./arbitrary_args.py Function returns the sum of all values 6 15 \u6211\u4eec\u8fd8\u53ef\u4ee5\u5728\u51fd\u6570\u4e2d\u4f7f\u7528 ** \u6784\u9020\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8be5\u51fd\u6570\u5c06\u63a5\u53d7\u5b57\u5178\u3002 \u5b57\u5178\u6709\u4efb\u610f\u957f\u5ea6\u3002 \u7136\u540e\uff0c\u6211\u4eec\u901a\u5e38\u53ef\u4ee5\u7167\u5e38\u89e3\u6790\u5b57\u5178\u3002 details.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python # details.py def display(**details): for i in details: print(f\"{i}: {details[i]}\") display(name=\"Larry\", age=43, sex=\"M\") \u672c\u793a\u4f8b\u8bf4\u660e\u4e86\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u53ef\u4ee5\u63d0\u4f9b\u4efb\u610f\u6570\u91cf\u7684\u952e\u503c\u53c2\u6570\uff0c\u8be5\u51fd\u6570\u5c06\u5904\u7406\u6240\u6709\u8fd9\u4e9b\u3002 1 2 3 4 $ ./details.py age: 43 name: Larry sex: M","title":"Python \u51fd\u6570\u53c2\u6570"},{"location":"pages/python/pytutorial/python-functions/#Python-\u901a\u8fc7\u5f15\u7528\u4f20\u9012\u53c2\u6570","text":"\u51fd\u6570\u7684\u53c2\u6570\u901a\u8fc7\u5f15\u7528\u4f20\u9012\u3002 \u4e00\u4e9b\u8bed\u8a00\u5c06\u5bf9\u8c61\u7684\u526f\u672c\u4f20\u9012\u7ed9\u51fd\u6570\u3002 \u901a\u8fc7\u5f15\u7528\u4f20\u9012\u5bf9\u8c61\u6709\u4e24\u4e2a\u91cd\u8981\u7ed3\u8bba\uff1aa\uff09\u4e0e\u4f20\u9012\u5bf9\u8c61\u526f\u672c\u76f8\u6bd4\uff0c\u6b64\u8fc7\u7a0b\u66f4\u5feb\u3002 b\uff09\u5728\u51fd\u6570\u4e2d\u4fee\u6539\u7684\u53ef\u53d8\u5bf9\u8c61\u5c06\u6c38\u4e45\u66f4\u6539\u3002 passing_by_reference.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/usr/bin/env python # passing_by_reference.py n = [1, 2, 3, 4, 5] print(\"Original list:\", n) def f(x): x.pop() x.pop() x.insert(0, 0) print(\"Inside f():\", x) f(n) print(\"After function call:\", n) \u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u6574\u6570\u5217\u8868\u4f20\u9012\u7ed9\u51fd\u6570\u3002 \u8be5\u5bf9\u8c61\u5728\u51fd\u6570\u4f53\u5185\u88ab\u4fee\u6539\uff0c\u8c03\u7528\u8be5\u51fd\u6570\uff08\u539f\u59cb\u5bf9\u8c61\uff09\u540e\uff0c\u5c06\u4fee\u6539\u6574\u6570\u5217\u8868\u3002 1 2 3 4 5 6 def f(x): x.pop() x.pop() x.insert(0, 0) print(\"Inside f():\", x) \u5728\u51fd\u6570\u4e3b\u4f53\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u539f\u59cb\u5bf9\u8c61\uff0c\u4e0d\u5e26\u5bf9\u8c61\u7684\u526f\u672c\u3002 \u5728\u8bb8\u591a\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5c06\u6536\u5230\u5bf9\u8c61\u7684\u526f\u672c\u3002 1 2 3 4 $ ./passing_by_reference.py Original list: [1, 2, 3, 4, 5] Inside f(): [0, 1, 2, 3] After function call: [0, 1, 2, 3] \u4e00\u65e6\u5217\u8868\u88ab\u4fee\u6539\uff0c\u5b83\u5c31\u88ab\u6c38\u4e45\u4fee\u6539\u4e86\u3002","title":"Python \u901a\u8fc7\u5f15\u7528\u4f20\u9012\u53c2\u6570"},{"location":"pages/python/pytutorial/python-functions/#Python-\u5168\u5c40\u548c\u5c40\u90e8\u53d8\u91cf","text":"\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u8ba8\u8bba\u5982\u4f55\u5728 Python \u51fd\u6570\u4e2d\u4f7f\u7528\u53d8\u91cf\u3002 local_variable.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python # local_variable.py name = \"Jack\" def f(): name = \"Robert\" print(\"Within function\", name) print(\"Outside function\", name) f() \u5728\u51fd\u6570\u4f53\u4e2d\u5b9a\u4e49\u7684\u53d8\u91cf\u5177\u6709\u5c40\u90e8\u8303\u56f4\u3002 \u5b83\u4ec5\u5728\u51fd\u6570\u4f53\u5185\u6709\u6548\u3002 1 2 3 $ ./local_variable.py Outside function Jack Within function Robert global_variable.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python # global_variable.py name = \"Jack\" def f(): print(\"Within function\", name) print(\"Outside function\", name) f() \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u51fd\u6570\u4f53\u5185\u83b7\u53d6\u5168\u5c40\u53d8\u91cf\u7684\u5185\u5bb9\u3002 1 2 3 $ ./global_variable.py Outside function Jack Within function Jack \u4f46\u662f\uff0c\u5982\u679c\u8981\u66f4\u6539\u51fd\u6570\u4e2d\u7684\u5168\u5c40\u53d8\u91cf\uff0c\u5219\u5fc5\u987b\u4f7f\u7528 global \u5173\u952e\u5b57\u3002 global_variable2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python # global_variable2.py name = \"Jack\" def f(): global name name = \"Robert\" print(\"Within function\", name) print(\"Outside function\", name) f() print(\"Outside function\", name) \u73b0\u5728\uff0c\u6211\u4eec\u5c06\u5728\u51fd\u6570\u5185\u90e8\u66f4\u6539\u5168\u5c40\u540d\u79f0\u53d8\u91cf\u7684\u5185\u5bb9\u3002 1 2 global name name = \"Robert\" \u4f7f\u7528 global \u5173\u952e\u5b57\uff0c\u6211\u4eec\u5f15\u7528\u5728\u51fd\u6570\u4e3b\u4f53\u5916\u90e8\u5b9a\u4e49\u7684\u53d8\u91cf\u3002 \u8be5\u53d8\u91cf\u88ab\u8d4b\u4e88\u4e00\u4e2a\u65b0\u503c\u3002 1 2 3 4 $ ./global_variable2.py Outside function Jack Within function Robert Outside function Robert","title":"Python \u5168\u5c40\u548c\u5c40\u90e8\u53d8\u91cf"},{"location":"pages/python/pytutorial/python-functions/#Python-\u533f\u540d\u51fd\u6570","text":"\u53ef\u4ee5\u5728 Python \u4e2d\u521b\u5efa\u533f\u540d\u51fd\u6570\u3002 \u533f\u540d\u51fd\u6570\u6ca1\u6709\u540d\u79f0\u3002 \u4f7f\u7528 lambda \u5173\u952e\u5b57\uff0c\u51e0\u4e4e\u65e0\u6cd5\u521b\u5efa\u4efb\u4f55\u533f\u540d\u51fd\u6570\u3002 Python \u7a0b\u5e8f\u5458\u4e5f\u5c06\u533f\u540d\u51fd\u6570\u79f0\u4e3a lambda \u51fd\u6570\u3002 \u5b83\u4eec\u662f Python \u4e2d\u5408\u5e76\u7684\u51fd\u6570\u793a\u4f8b\u7684\u4e00\u90e8\u5206\u3002 Lambda \u51fd\u6570\u4ec5\u9650\u4e8e\u5355\u4e2a\u8868\u8fbe\u5f0f\u3002 \u5b83\u4eec\u53ef\u4ee5\u5728\u53ef\u4ee5\u4f7f\u7528\u5e38\u89c4\u51fd\u6570\u7684\u4efb\u4f55\u5730\u65b9\u4f7f\u7528\u3002 lambda_fun.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python # lambda_fun.py y = 6 z = lambda x: x * y print(z(8)) \u8fd9\u662f lambda \u51fd\u6570\u7684\u4e00\u4e2a\u5c0f\u4f8b\u5b50\u3002 1 z = lambda x: x * y lambda \u5173\u952e\u5b57\u521b\u5efa\u4e00\u4e2a\u533f\u540d\u51fd\u6570\u3002 x \u662f\u4f20\u9012\u7ed9 lambda \u51fd\u6570\u7684\u53c2\u6570\u3002 \u53c2\u6570\u540e\u8ddf\u4e00\u4e2a\u5192\u53f7\u3002 \u5192\u53f7\u65c1\u8fb9\u7684\u4ee3\u7801\u662f\u5728\u8c03\u7528 lambda \u51fd\u6570\u65f6\u6267\u884c\u7684\u8868\u8fbe\u5f0f\u3002 lambda \u51fd\u6570\u88ab\u5206\u914d\u7ed9 z \u53d8\u91cf\u3002 1 print(z(8)) lambda \u51fd\u6570\u88ab\u6267\u884c\u3002 \u6570\u5b57 8 \u4f20\u9012\u7ed9\u533f\u540d\u51fd\u6570\uff0c\u7ed3\u679c\u8fd4\u56de 48\u3002 \u8bf7\u6ce8\u610f\uff0c z \u4e0d\u662f\u6b64\u51fd\u6570\u7684\u540d\u79f0\u3002 \u5b83\u53ea\u662f\u5206\u914d\u4e86\u533f\u540d\u51fd\u6570\u7684\u53d8\u91cf\u3002 1 2 $ ./lambda_fun.py 48 lambda \u51fd\u6570\u53ef\u4ee5\u4e0e map() \u6216 filter() \u51fd\u6570\u4e4b\u7c7b\u7684 Python \u8bed\u8a00\u7684\u5176\u4ed6\u51fd\u6570\u90e8\u4ef6\u5b8c\u7f8e\u5730\u7ed3\u5408\u4f7f\u7528\u3002 lambda_fun2.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python # lambda_fun2.py cs = [-10, 0, 15, 30, 40] ft = map(lambda t: (9.0/5)*t + 32, cs) print(list(ft)) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5217\u51fa\u4e86\u6444\u6c0f\u6e29\u5ea6\u3002 \u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u5305\u542b\u534e\u6c0f\u6e29\u5ea6\u7684\u65b0\u5217\u8868\u3002 1 ft = map(lambda t: (9.0/5)*t + 32, cs) map() \u51fd\u6570\u5c06\u533f\u540d\u51fd\u6570\u5e94\u7528\u4e8e cs \u5217\u8868\u7684\u6bcf\u4e2a\u5143\u7d20\u3002 \u5b83\u8fd4\u56de\u8ba1\u7b97\u51fa\u7684\u534e\u6c0f\u6e29\u5ea6\u7684\u53ef\u8fed\u4ee3\u503c\u3002 1 2 $ ./lambda_fun2.py [14.0, 32.0, 59.0, 86.0, 104.0]","title":"Python \u533f\u540d\u51fd\u6570"},{"location":"pages/python/pytutorial/python-hashing/","text":"Python \u54c8\u5e0c\u6559\u7a0b \u00b6 Python \u54c8\u5e0c\u6559\u7a0b \u89e3\u91ca\u4e86 Python \u4e2d\u7684\u54c8\u5e0c\u6982\u5ff5\uff0c\u4ecb\u7ecd\u4e86\u54c8\u5e0c\u8868\u548c Python \u53ef\u54c8\u5e0c\u5bf9\u8c61\u3002 \u54c8\u5e0c\u8868 \u00b6 \u54c8\u5e0c\u8868\u7528\u4e8e\u4ee5\u8bb8\u591a\u5e38\u89c1\u7684\u7f16\u7a0b\u8bed\u8a00\uff08\u4f8b\u5982 C++ \uff0cJava \u548c Python\uff09\u5b9e\u73b0\u6620\u5c04\u548c\u8bbe\u7f6e\u6570\u636e\u7ed3\u6784\u3002 Python \u5c06\u54c8\u5e0c\u8868\u7528\u4e8e\u5b57\u5178\u548c\u96c6\u5408\u3002 \u54c8\u5e0c\u8868\u662f\u952e\u503c\u5bf9\u7684\u65e0\u5e8f\u96c6\u5408\uff0c\u5176\u4e2d\u6bcf\u4e2a\u952e\u90fd\u662f\u552f\u4e00\u7684\u3002 \u54c8\u5e0c\u8868\u63d0\u4f9b\u4e86\u6709\u6548\u7684\u67e5\u627e\uff0c\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u7684\u7ec4\u5408\u3002 \u8fd9\u4e9b\u662f\u6570\u7ec4\u548c\u94fe\u63a5\u5217\u8868\u7684\u6700\u4f73\u5c5e\u6027\u3002 \u6563\u5217 \u00b6 \u54c8\u5e0c\u662f\u4f7f\u7528\u7b97\u6cd5\u5c06\u4efb\u610f\u5927\u5c0f\u7684\u6570\u636e\u6620\u5c04\u5230\u56fa\u5b9a\u957f\u5ea6\u7684\u8fc7\u7a0b\u3002 \u8fd9\u79f0\u4e3a\u54c8\u5e0c\u503c\u3002 \u6563\u5217\u7528\u4e8e\u521b\u5efa\u9ad8\u6027\u80fd\uff0c\u76f4\u63a5\u8bbf\u95ee\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5728\u8be5\u7ed3\u6784\u4e2d\u8981\u5feb\u901f\u5b58\u50a8\u548c\u8bbf\u95ee\u5927\u91cf\u6570\u636e\u3002 \u54c8\u5e0c\u503c\u4f7f\u7528\u54c8\u5e0c\u51fd\u6570\u8ba1\u7b97\u3002 Python \u53ef\u54c8\u5e0c\u5bf9\u8c61 \u00b6 \u5982\u679c\u5bf9\u8c61\u7684\u54c8\u5e0c\u503c\u5728\u5176\u751f\u547d\u5468\u671f\u5185\u4ece\u672a\u53d1\u751f\u53d8\u5316\uff0c\u5219\u8be5\u5bf9\u8c61\u662f\u53ef\u54c8\u5e0c\u7684\u3002 \uff08\u5728\u591a\u6b21\u8c03\u7528 Python \u7a0b\u5e8f\u671f\u95f4\uff0c\u5b83\u53ef\u4ee5\u5177\u6709\u4e0d\u540c\u7684\u503c\u3002\uff09\u53ef\u54c8\u5e0c\u5bf9\u8c61\u9700\u8981 __hash__() \u65b9\u6cd5\u3002 \u4e3a\u4e86\u6267\u884c\u6bd4\u8f83\uff0c\u6563\u5217\u9700\u8981\u4e00\u79cd __eq__() \u65b9\u6cd5\u3002 Note: Hashable objects which compare equal must have the same hash value. \u6563\u5217\u6027\u4f7f\u5bf9\u8c61\u53ef\u7528\u4f5c\u5b57\u5178\u952e\u548c set \u6210\u5458\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u6570\u636e\u7ed3\u6784\u5728\u5185\u90e8\u4f7f\u7528\u6563\u5217\u503c\u3002 Python \u4e0d\u53ef\u53d8\u7684\u5185\u7f6e\u5bf9\u8c61\u662f\u53ef\u54c8\u5e0c\u7684\uff1b \u53ef\u53d8\u5bb9\u5668\uff08\u4f8b\u5982\u5217\u8868\u6216\u5b57\u5178\uff09\u4e0d\u662f\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4f5c\u4e3a\u7528\u6237\u5b9a\u4e49\u7c7b\u5b9e\u4f8b\u7684\u5bf9\u8c61\u662f\u53ef\u54c8\u5e0c\u7684\u3002 \u5b83\u4eec\u90fd\u6bd4\u8f83\u4e0d\u76f8\u7b49\uff08\u9664\u4e86\u5b83\u4eec\u672c\u8eab\uff09\uff0c\u5e76\u4e14\u5b83\u4eec\u7684\u54c8\u5e0c\u503c\u662f\u4ece id() \u6d3e\u751f\u7684\u3002 Note: If a class does not define an __eq__() method it should not define a __hash__() operation either; if it defines __eq__() but not __hash__() , its instances will not be usable as items in hashable collections. Python hash() \u51fd\u6570 \u00b6 hash() \u51fd\u6570\u8fd4\u56de\u5bf9\u8c61\u7684\u54c8\u5e0c\u503c\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u3002 \u54c8\u5e0c\u503c\u662f\u6574\u6570\u3002 \u5b83\u4eec\u7528\u4e8e\u5728\u5b57\u5178\u67e5\u627e\u671f\u95f4\u5feb\u901f\u6bd4\u8f83\u5b57\u5178\u5173\u952e\u5b57\u3002 \u5bf9\u8c61\u53ef\u4ee5\u5b9e\u73b0 __hash__() \u65b9\u6cd5\u3002 Python \u4e0d\u53ef\u53d8\u5185\u7f6e\u51fd\u6570\u53ef\u54c8\u5e0c\u5316 \u00b6 Python \u4e0d\u53d8\u7684\u5185\u7f6e\u51fd\u6570\uff08\u4f8b\u5982\u6574\u6570\uff0c\u5b57\u7b26\u4e32\u6216\u5143\u7ec4\uff09\u662f\u53ef\u54c8\u5e0c\u7684\u3002 builtin_hashables.py 1 2 3 4 5 6 7 #!/usr/bin/env python3 val = 100 print(val.__hash__()) print(\"falcon\".__hash__()) print((1,).__hash__()) \u8be5\u793a\u4f8b\u663e\u793a\u4e09\u4e2a\u54c8\u5e0c\u503c\u7684\u503c\uff1a\u6574\u6570\uff0c\u5b57\u7b26\u4e32\u548c\u5143\u7ec4\u3002 Python \u81ea\u5b9a\u4e49\u53ef\u54c8\u5e0c\u5bf9\u8c61\u793a\u4f8b I \u00b6 Python \u81ea\u5b9a\u4e49\u5bf9\u8c61\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u662f\u53ef\u54c8\u5e0c\u7684\u3002 \u4ed6\u4eec\u7684\u54c8\u5e0c\u503c\u662f\u4ece\u5176 ID \u6d3e\u751f\u7684\u3002 custom_object.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #!/usr/bin/env python3 class User: def __init__(self, name, occupation): self.name = name self.occupation = occupation u1 = User('John Doe', 'gardener') u2 = User('John Doe', 'gardener') print('hash of user 1') print(hash(u1)) print('hash of user 2') print(hash(u2)) if (u1 == u2): print('same user') else: print('different users') \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709 User \u7684\u4e24\u4e2a\u5b9e\u4f8b\u3002 1 2 u1 = User('John Doe', 'gardener') u2 = User('John Doe', 'gardener') \u6211\u4eec\u6709\u4e24\u4e2a\u5177\u6709\u76f8\u540c\u6570\u636e\u7684\u5b9e\u4f8b\u3002 1 2 print('hash of user 1') print(hash(u1)) hash() \u51fd\u6570\u8fd4\u56de\u5bf9\u8c61\u7684\u54c8\u5e0c\u503c\u3002 \u9ed8\u8ba4\u5b9e\u73b0\u662f\u4ece\u5bf9\u8c61\u7684 ID \u6d3e\u751f\u7684\u3002 1 2 3 4 5 6 $ python custom_object.py hash of user 1 -9223371894419573195 hash of user 2 142435202673 different users \u5373\u4f7f\u7528\u6237\u8be6\u7ec6\u4fe1\u606f\u76f8\u540c\uff0c\u4f46\u6bd4\u8f83\u4ecd\u4f1a\u4ea7\u751f\u4e0d\u540c\u7684\u5bf9\u8c61\u3002 \u4e3a\u4e86\u66f4\u6539\u5b83\uff0c\u6211\u4eec\u9700\u8981\u5b9e\u73b0 __eq__() \u65b9\u6cd5\u3002 Python \u81ea\u5b9a\u4e49\u53ef\u54c8\u5e0c\u5bf9\u8c61\u793a\u4f8b II \u00b6 \u5728\u7b2c\u4e8c\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5b9e\u73b0\u4e86\u81ea\u5b9a\u4e49 __eq__() \u65b9\u6cd5\u3002 custom_object2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #!/usr/bin/env python3 class User: def __init__(self, name, occupation): self.name = name self.occupation = occupation def __eq__(self, other): return self.name == other.name \\ and self.occupation == other.occupation def __str__(self): return f'{self.name} {self.occupation}' u1 = User('John Doe', 'gardener') u2 = User('John Doe', 'gardener') if (u1 == u2): print('same user') print(f'{u1} == {u2}') else: print('different users') # users = {u1, u2} # print(len(users)) \u73b0\u5728\u6bd4\u8f83\u8fd4\u56de\u7ed9\u6211\u4eec\u7684\u9884\u671f\u8f93\u51fa\uff1b \u4f46\u662f\uff0c\u6211\u4eec\u4e0d\u80fd\u5c06\u5bf9\u8c61\u63d2\u5165 Python \u96c6\u4e2d\uff1b \u8fd9\u5c06\u5bfc\u81f4 TypeError: unhashable type: 'User' \u3002 \u4e3a\u4e86\u66f4\u6539\u6b64\u8bbe\u7f6e\uff0c\u6211\u4eec\u5b9e\u73b0\u4e86 __hash__() \u65b9\u6cd5\u3002 Python \u81ea\u5b9a\u4e49\u53ef\u54c8\u5e0c\u5bf9\u8c61\u793a\u4f8b III \u00b6 \u5728\u7b2c\u4e09\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5b9e\u73b0\u4e86 __eq__() \u548c __hash__() \u65b9\u6cd5\u3002 custom_object3.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 #!/usr/bin/env python3 class User: def __init__(self, name, occupation): self.name = name self.occupation = occupation def __eq__(self, other): return self.name == other.name \\ and self.occupation == other.occupation def __hash__(self): return hash((self.name, self.occupation)) def __str__(self): return f'{self.name} {self.occupation}' u1 = User('John Doe', 'gardener') u2 = User('John Doe', 'gardener') users = {u1, u2} print(len(users)) if (u1 == u2): print('same user') print(f'{u1} == {u2}') else: print('different users') print('------------------------------------') u1.occupation = 'programmer' users = {u1, u2} print(len(users)) if (u1 == u2): print('same user') print(f'{u1} == {u2}') else: print('different users') \u8be5\u793a\u4f8b\u6bd4\u8f83\u4e86\u5177\u6709 __eq__() \u548c __hash__() \u65b9\u6cd5\u7684\u81ea\u5b9a\u4e49\u5b9e\u73b0\u7684\u4e24\u4e2a\u5bf9\u8c61\u3002 \u53ef\u4ee5\u5c06\u8fd9\u4e9b\u5bf9\u8c61\u63d2\u5165 Python \u96c6\u4e2d\uff0c\u5f53\u4ee5\u540e\u66f4\u6539\u5c5e\u6027\u65f6\uff0c\u6211\u4eec\u5c06\u83b7\u5f97\u9884\u671f\u7684\u8f93\u51fa\u3002 1 2 def __hash__(self): return hash((self.name, self.occupation)) __hash__() \u51fd\u6570\u7684\u5b9e\u73b0\u4ece\u5c5e\u6027\u5143\u7ec4\u8fd4\u56de\u4f7f\u7528 hash() \u51fd\u6570\u8ba1\u7b97\u7684\u54c8\u5e0c\u503c\u3002 1 2 3 4 5 6 7 $ python custom_object3.py 1 same user John Doe gardener == John Doe gardener ------------------------------------ 2 different users Python @dataclass \u88c5\u9970\u5668 \u00b6 \u4ece Python 3.7 \u5f00\u59cb\uff0c\u6211\u4eec\u6709\u4e86 dataclass \u88c5\u9970\u5668\uff0c\u5b83\u4f1a\u81ea\u52a8\u751f\u6210\u4e00\u4e9b\u6837\u677f\u4ee3\u7801\u3002 \u6570\u636e\u7c7b\u88c5\u9970\u5668\u7684\u51bb\u7ed3\u53c2\u6570\uff08\u9ed8\u8ba4\u4e3a False \uff09\u3002 \u5982\u679c\u6307\u5b9a\uff0c\u5219\u5b57\u6bb5\u5c06\u88ab\u51bb\u7ed3\uff08\u5373\u53ea\u8bfb\uff09\u3002 \u5982\u679c eq \u8bbe\u7f6e\u4e3a True \uff08\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff09\uff0c\u5219\u5c06\u5b9e\u73b0 __hash__() \u65b9\u6cd5\uff0c\u5e76\u4e14\u5bf9\u8c61\u5b9e\u4f8b\u5c06\u662f\u53ef\u54c8\u5e0c\u7684\u3002 decorator.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #!/usr/bin/env python3 from dataclasses import dataclass @dataclass(frozen=True) class User: name: str occupation: str u1 = User('John Doe', 'gardener') u2 = User('John Doe', 'gardener') if (u1 == u2): print('same user') print(f'{u1} == {u2}') else: print('different users') users = {u1, u2} print(len(users)) \u8be5\u793a\u4f8b\u4f7f\u7528 @dataclass \u88c5\u9970\u5668\u3002 1 2 3 4 $ python decorator.py same user User(name='John Doe', occupation='gardener') == User(name='John Doe', occupation='gardener') 1 \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86 Python \u4e2d\u7684\u54c8\u5e0c\u3002","title":"Python \u54c8\u5e0c\u6559\u7a0b"},{"location":"pages/python/pytutorial/python-hashing/#Python-\u54c8\u5e0c\u6559\u7a0b","text":"Python \u54c8\u5e0c\u6559\u7a0b \u89e3\u91ca\u4e86 Python \u4e2d\u7684\u54c8\u5e0c\u6982\u5ff5\uff0c\u4ecb\u7ecd\u4e86\u54c8\u5e0c\u8868\u548c Python \u53ef\u54c8\u5e0c\u5bf9\u8c61\u3002","title":"Python \u54c8\u5e0c\u6559\u7a0b"},{"location":"pages/python/pytutorial/python-hashing/#\u54c8\u5e0c\u8868","text":"\u54c8\u5e0c\u8868\u7528\u4e8e\u4ee5\u8bb8\u591a\u5e38\u89c1\u7684\u7f16\u7a0b\u8bed\u8a00\uff08\u4f8b\u5982 C++ \uff0cJava \u548c Python\uff09\u5b9e\u73b0\u6620\u5c04\u548c\u8bbe\u7f6e\u6570\u636e\u7ed3\u6784\u3002 Python \u5c06\u54c8\u5e0c\u8868\u7528\u4e8e\u5b57\u5178\u548c\u96c6\u5408\u3002 \u54c8\u5e0c\u8868\u662f\u952e\u503c\u5bf9\u7684\u65e0\u5e8f\u96c6\u5408\uff0c\u5176\u4e2d\u6bcf\u4e2a\u952e\u90fd\u662f\u552f\u4e00\u7684\u3002 \u54c8\u5e0c\u8868\u63d0\u4f9b\u4e86\u6709\u6548\u7684\u67e5\u627e\uff0c\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u7684\u7ec4\u5408\u3002 \u8fd9\u4e9b\u662f\u6570\u7ec4\u548c\u94fe\u63a5\u5217\u8868\u7684\u6700\u4f73\u5c5e\u6027\u3002","title":"\u54c8\u5e0c\u8868"},{"location":"pages/python/pytutorial/python-hashing/#\u6563\u5217","text":"\u54c8\u5e0c\u662f\u4f7f\u7528\u7b97\u6cd5\u5c06\u4efb\u610f\u5927\u5c0f\u7684\u6570\u636e\u6620\u5c04\u5230\u56fa\u5b9a\u957f\u5ea6\u7684\u8fc7\u7a0b\u3002 \u8fd9\u79f0\u4e3a\u54c8\u5e0c\u503c\u3002 \u6563\u5217\u7528\u4e8e\u521b\u5efa\u9ad8\u6027\u80fd\uff0c\u76f4\u63a5\u8bbf\u95ee\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5728\u8be5\u7ed3\u6784\u4e2d\u8981\u5feb\u901f\u5b58\u50a8\u548c\u8bbf\u95ee\u5927\u91cf\u6570\u636e\u3002 \u54c8\u5e0c\u503c\u4f7f\u7528\u54c8\u5e0c\u51fd\u6570\u8ba1\u7b97\u3002","title":"\u6563\u5217"},{"location":"pages/python/pytutorial/python-hashing/#Python-\u53ef\u54c8\u5e0c\u5bf9\u8c61","text":"\u5982\u679c\u5bf9\u8c61\u7684\u54c8\u5e0c\u503c\u5728\u5176\u751f\u547d\u5468\u671f\u5185\u4ece\u672a\u53d1\u751f\u53d8\u5316\uff0c\u5219\u8be5\u5bf9\u8c61\u662f\u53ef\u54c8\u5e0c\u7684\u3002 \uff08\u5728\u591a\u6b21\u8c03\u7528 Python \u7a0b\u5e8f\u671f\u95f4\uff0c\u5b83\u53ef\u4ee5\u5177\u6709\u4e0d\u540c\u7684\u503c\u3002\uff09\u53ef\u54c8\u5e0c\u5bf9\u8c61\u9700\u8981 __hash__() \u65b9\u6cd5\u3002 \u4e3a\u4e86\u6267\u884c\u6bd4\u8f83\uff0c\u6563\u5217\u9700\u8981\u4e00\u79cd __eq__() \u65b9\u6cd5\u3002 Note: Hashable objects which compare equal must have the same hash value. \u6563\u5217\u6027\u4f7f\u5bf9\u8c61\u53ef\u7528\u4f5c\u5b57\u5178\u952e\u548c set \u6210\u5458\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u6570\u636e\u7ed3\u6784\u5728\u5185\u90e8\u4f7f\u7528\u6563\u5217\u503c\u3002 Python \u4e0d\u53ef\u53d8\u7684\u5185\u7f6e\u5bf9\u8c61\u662f\u53ef\u54c8\u5e0c\u7684\uff1b \u53ef\u53d8\u5bb9\u5668\uff08\u4f8b\u5982\u5217\u8868\u6216\u5b57\u5178\uff09\u4e0d\u662f\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4f5c\u4e3a\u7528\u6237\u5b9a\u4e49\u7c7b\u5b9e\u4f8b\u7684\u5bf9\u8c61\u662f\u53ef\u54c8\u5e0c\u7684\u3002 \u5b83\u4eec\u90fd\u6bd4\u8f83\u4e0d\u76f8\u7b49\uff08\u9664\u4e86\u5b83\u4eec\u672c\u8eab\uff09\uff0c\u5e76\u4e14\u5b83\u4eec\u7684\u54c8\u5e0c\u503c\u662f\u4ece id() \u6d3e\u751f\u7684\u3002 Note: If a class does not define an __eq__() method it should not define a __hash__() operation either; if it defines __eq__() but not __hash__() , its instances will not be usable as items in hashable collections.","title":"Python \u53ef\u54c8\u5e0c\u5bf9\u8c61"},{"location":"pages/python/pytutorial/python-hashing/#Python-hash\u51fd\u6570","text":"hash() \u51fd\u6570\u8fd4\u56de\u5bf9\u8c61\u7684\u54c8\u5e0c\u503c\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u3002 \u54c8\u5e0c\u503c\u662f\u6574\u6570\u3002 \u5b83\u4eec\u7528\u4e8e\u5728\u5b57\u5178\u67e5\u627e\u671f\u95f4\u5feb\u901f\u6bd4\u8f83\u5b57\u5178\u5173\u952e\u5b57\u3002 \u5bf9\u8c61\u53ef\u4ee5\u5b9e\u73b0 __hash__() \u65b9\u6cd5\u3002","title":"Python hash()\u51fd\u6570"},{"location":"pages/python/pytutorial/python-hashing/#Python-\u4e0d\u53ef\u53d8\u5185\u7f6e\u51fd\u6570\u53ef\u54c8\u5e0c\u5316","text":"Python \u4e0d\u53d8\u7684\u5185\u7f6e\u51fd\u6570\uff08\u4f8b\u5982\u6574\u6570\uff0c\u5b57\u7b26\u4e32\u6216\u5143\u7ec4\uff09\u662f\u53ef\u54c8\u5e0c\u7684\u3002 builtin_hashables.py 1 2 3 4 5 6 7 #!/usr/bin/env python3 val = 100 print(val.__hash__()) print(\"falcon\".__hash__()) print((1,).__hash__()) \u8be5\u793a\u4f8b\u663e\u793a\u4e09\u4e2a\u54c8\u5e0c\u503c\u7684\u503c\uff1a\u6574\u6570\uff0c\u5b57\u7b26\u4e32\u548c\u5143\u7ec4\u3002","title":"Python \u4e0d\u53ef\u53d8\u5185\u7f6e\u51fd\u6570\u53ef\u54c8\u5e0c\u5316"},{"location":"pages/python/pytutorial/python-hashing/#Python-\u81ea\u5b9a\u4e49\u53ef\u54c8\u5e0c\u5bf9\u8c61\u793a\u4f8b-I","text":"Python \u81ea\u5b9a\u4e49\u5bf9\u8c61\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u662f\u53ef\u54c8\u5e0c\u7684\u3002 \u4ed6\u4eec\u7684\u54c8\u5e0c\u503c\u662f\u4ece\u5176 ID \u6d3e\u751f\u7684\u3002 custom_object.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #!/usr/bin/env python3 class User: def __init__(self, name, occupation): self.name = name self.occupation = occupation u1 = User('John Doe', 'gardener') u2 = User('John Doe', 'gardener') print('hash of user 1') print(hash(u1)) print('hash of user 2') print(hash(u2)) if (u1 == u2): print('same user') else: print('different users') \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709 User \u7684\u4e24\u4e2a\u5b9e\u4f8b\u3002 1 2 u1 = User('John Doe', 'gardener') u2 = User('John Doe', 'gardener') \u6211\u4eec\u6709\u4e24\u4e2a\u5177\u6709\u76f8\u540c\u6570\u636e\u7684\u5b9e\u4f8b\u3002 1 2 print('hash of user 1') print(hash(u1)) hash() \u51fd\u6570\u8fd4\u56de\u5bf9\u8c61\u7684\u54c8\u5e0c\u503c\u3002 \u9ed8\u8ba4\u5b9e\u73b0\u662f\u4ece\u5bf9\u8c61\u7684 ID \u6d3e\u751f\u7684\u3002 1 2 3 4 5 6 $ python custom_object.py hash of user 1 -9223371894419573195 hash of user 2 142435202673 different users \u5373\u4f7f\u7528\u6237\u8be6\u7ec6\u4fe1\u606f\u76f8\u540c\uff0c\u4f46\u6bd4\u8f83\u4ecd\u4f1a\u4ea7\u751f\u4e0d\u540c\u7684\u5bf9\u8c61\u3002 \u4e3a\u4e86\u66f4\u6539\u5b83\uff0c\u6211\u4eec\u9700\u8981\u5b9e\u73b0 __eq__() \u65b9\u6cd5\u3002","title":"Python \u81ea\u5b9a\u4e49\u53ef\u54c8\u5e0c\u5bf9\u8c61\u793a\u4f8b I"},{"location":"pages/python/pytutorial/python-hashing/#Python-\u81ea\u5b9a\u4e49\u53ef\u54c8\u5e0c\u5bf9\u8c61\u793a\u4f8b-II","text":"\u5728\u7b2c\u4e8c\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5b9e\u73b0\u4e86\u81ea\u5b9a\u4e49 __eq__() \u65b9\u6cd5\u3002 custom_object2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #!/usr/bin/env python3 class User: def __init__(self, name, occupation): self.name = name self.occupation = occupation def __eq__(self, other): return self.name == other.name \\ and self.occupation == other.occupation def __str__(self): return f'{self.name} {self.occupation}' u1 = User('John Doe', 'gardener') u2 = User('John Doe', 'gardener') if (u1 == u2): print('same user') print(f'{u1} == {u2}') else: print('different users') # users = {u1, u2} # print(len(users)) \u73b0\u5728\u6bd4\u8f83\u8fd4\u56de\u7ed9\u6211\u4eec\u7684\u9884\u671f\u8f93\u51fa\uff1b \u4f46\u662f\uff0c\u6211\u4eec\u4e0d\u80fd\u5c06\u5bf9\u8c61\u63d2\u5165 Python \u96c6\u4e2d\uff1b \u8fd9\u5c06\u5bfc\u81f4 TypeError: unhashable type: 'User' \u3002 \u4e3a\u4e86\u66f4\u6539\u6b64\u8bbe\u7f6e\uff0c\u6211\u4eec\u5b9e\u73b0\u4e86 __hash__() \u65b9\u6cd5\u3002","title":"Python \u81ea\u5b9a\u4e49\u53ef\u54c8\u5e0c\u5bf9\u8c61\u793a\u4f8b II"},{"location":"pages/python/pytutorial/python-hashing/#Python-\u81ea\u5b9a\u4e49\u53ef\u54c8\u5e0c\u5bf9\u8c61\u793a\u4f8b-III","text":"\u5728\u7b2c\u4e09\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5b9e\u73b0\u4e86 __eq__() \u548c __hash__() \u65b9\u6cd5\u3002 custom_object3.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 #!/usr/bin/env python3 class User: def __init__(self, name, occupation): self.name = name self.occupation = occupation def __eq__(self, other): return self.name == other.name \\ and self.occupation == other.occupation def __hash__(self): return hash((self.name, self.occupation)) def __str__(self): return f'{self.name} {self.occupation}' u1 = User('John Doe', 'gardener') u2 = User('John Doe', 'gardener') users = {u1, u2} print(len(users)) if (u1 == u2): print('same user') print(f'{u1} == {u2}') else: print('different users') print('------------------------------------') u1.occupation = 'programmer' users = {u1, u2} print(len(users)) if (u1 == u2): print('same user') print(f'{u1} == {u2}') else: print('different users') \u8be5\u793a\u4f8b\u6bd4\u8f83\u4e86\u5177\u6709 __eq__() \u548c __hash__() \u65b9\u6cd5\u7684\u81ea\u5b9a\u4e49\u5b9e\u73b0\u7684\u4e24\u4e2a\u5bf9\u8c61\u3002 \u53ef\u4ee5\u5c06\u8fd9\u4e9b\u5bf9\u8c61\u63d2\u5165 Python \u96c6\u4e2d\uff0c\u5f53\u4ee5\u540e\u66f4\u6539\u5c5e\u6027\u65f6\uff0c\u6211\u4eec\u5c06\u83b7\u5f97\u9884\u671f\u7684\u8f93\u51fa\u3002 1 2 def __hash__(self): return hash((self.name, self.occupation)) __hash__() \u51fd\u6570\u7684\u5b9e\u73b0\u4ece\u5c5e\u6027\u5143\u7ec4\u8fd4\u56de\u4f7f\u7528 hash() \u51fd\u6570\u8ba1\u7b97\u7684\u54c8\u5e0c\u503c\u3002 1 2 3 4 5 6 7 $ python custom_object3.py 1 same user John Doe gardener == John Doe gardener ------------------------------------ 2 different users","title":"Python \u81ea\u5b9a\u4e49\u53ef\u54c8\u5e0c\u5bf9\u8c61\u793a\u4f8b III"},{"location":"pages/python/pytutorial/python-hashing/#Python-dataclass\u88c5\u9970\u5668","text":"\u4ece Python 3.7 \u5f00\u59cb\uff0c\u6211\u4eec\u6709\u4e86 dataclass \u88c5\u9970\u5668\uff0c\u5b83\u4f1a\u81ea\u52a8\u751f\u6210\u4e00\u4e9b\u6837\u677f\u4ee3\u7801\u3002 \u6570\u636e\u7c7b\u88c5\u9970\u5668\u7684\u51bb\u7ed3\u53c2\u6570\uff08\u9ed8\u8ba4\u4e3a False \uff09\u3002 \u5982\u679c\u6307\u5b9a\uff0c\u5219\u5b57\u6bb5\u5c06\u88ab\u51bb\u7ed3\uff08\u5373\u53ea\u8bfb\uff09\u3002 \u5982\u679c eq \u8bbe\u7f6e\u4e3a True \uff08\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff09\uff0c\u5219\u5c06\u5b9e\u73b0 __hash__() \u65b9\u6cd5\uff0c\u5e76\u4e14\u5bf9\u8c61\u5b9e\u4f8b\u5c06\u662f\u53ef\u54c8\u5e0c\u7684\u3002 decorator.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #!/usr/bin/env python3 from dataclasses import dataclass @dataclass(frozen=True) class User: name: str occupation: str u1 = User('John Doe', 'gardener') u2 = User('John Doe', 'gardener') if (u1 == u2): print('same user') print(f'{u1} == {u2}') else: print('different users') users = {u1, u2} print(len(users)) \u8be5\u793a\u4f8b\u4f7f\u7528 @dataclass \u88c5\u9970\u5668\u3002 1 2 3 4 $ python decorator.py same user User(name='John Doe', occupation='gardener') == User(name='John Doe', occupation='gardener') 1 \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86 Python \u4e2d\u7684\u54c8\u5e0c\u3002","title":"Python @dataclass\u88c5\u9970\u5668"},{"location":"pages/python/pytutorial/python-introspection/","text":"Python \u81ea\u7701 \u00b6 \u672c\u7ae0\u6211\u4eec\u8ba8\u8bba Python \u81ea\u7701 \uff0c\u81ea\u7701\u662f\u4e00\u79cd\u81ea\u6211\u68c0\u67e5\u7684\u884c\u4e3a\u3002 \u5728\u8ba1\u7b97\u673a\u7f16\u7a0b\u4e2d\uff0c\u81ea\u7701\u662f\u5728\u8fd0\u884c\u65f6\u786e\u5b9a\u5bf9\u8c61\u7684\u7c7b\u578b\u6216\u5c5e\u6027\u7684\u80fd\u529b\u3002 Python \u7f16\u7a0b\u8bed\u8a00\u5bf9\u81ea\u7701\u6709\u5f88\u5927\u7684\u652f\u6301\uff0cPython \u4e2d\u7684\u6240\u6709\u5185\u5bb9\u90fd\u662f\u4e00\u4e2a\u5bf9\u8c61\u3002 Python \u4e2d\u7684\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u53ef\u4ee5\u5177\u6709\u5c5e\u6027\u548c\u65b9\u6cd5\uff0c\u901a\u8fc7\u4f7f\u7528\u5185\u7701\uff0c\u6211\u4eec\u53ef\u4ee5\u52a8\u6001\u68c0\u67e5 Python \u5bf9\u8c61\u3002 Python dir \u51fd\u6570 \u00b6 dir() \u51fd\u6570\u8fd4\u56de\u5c5e\u4e8e\u5bf9\u8c61\u7684\u5c5e\u6027\u548c\u65b9\u6cd5\u7684\u6392\u5e8f\u5217\u8868\u3002 1 2 3 4 5 6 7 >>> dir(()) ['__add__', '__class__', '__contains__', '__delattr__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getslice__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'count', 'index'] \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u770b\u5230\u4e86\u5143\u7ec4\u5bf9\u8c61\u7684 dir() \u51fd\u6570\u7684\u8f93\u51fa\u3002 1 2 3 4 5 >>> print(().__doc__) tuple() -> empty tuple tuple(iterable) -> tuple initialized from iterable's items If the argument is a tuple, the return value is the same object. \u6211\u4eec\u7684\u7814\u7a76\u8868\u660e\uff0c\u5143\u7ec4\u5bf9\u8c61\u6709\u4e00\u4e2a __doc__ \u5c5e\u6027\u3002 direx.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #!/usr/bin/env python # direx.py import sys class MyObject(object): def __init__(self): pass def examine(self): print(self) o = MyObject() print(dir(o)) print(dir([])) print(dir({})) print(dir(1)) print(dir()) print(dir(len)) print(dir(sys)) print(dir(\"String\")) \u8be5\u793a\u4f8b\u4f7f\u7528 dir() \u51fd\u6570\u68c0\u67e5\u4e86\u51e0\u4e2a\u5bf9\u8c61\uff1a\u7528\u6237\u5b9a\u4e49\u7684\u5bf9\u8c61\uff0c\u672c\u673a\u6570\u636e\u7c7b\u578b\uff0c\u51fd\u6570\uff0c\u5b57\u7b26\u4e32\u6216\u6570\u5b57\u3002 \u4e0d\u5e26\u4efb\u4f55\u53c2\u6570\u7684 dir() \u8fd4\u56de\u5f53\u524d\u4f5c\u7528\u57df\u4e2d\u7684\u540d\u79f0\u3002 1 2 3 4 5 6 >>> dir() ['__builtins__', '__doc__', '__loader__', '__name__', '__package__', '__spec__'] >>> import sys >>>import math, os >>> dir() ['__builtins__', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'math', 'sys'] \u6211\u4eec\u5728\u5305\u542b\u4e00\u4e9b\u6a21\u5757\u4e4b\u524d\u548c\u4e4b\u540e\u6267\u884c dir() \u51fd\u6570\u3002 Python type() \u51fd\u6570 \u00b6 type() \u51fd\u6570\u8fd4\u56de\u5bf9\u8c61\u7684\u7c7b\u578b\u3002 typefun.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #!/usr/bin/env python # typefun.py import sys def function(): pass class MyObject(object): def __init__(self): pass o = MyObject() print(type(1)) print(type(\"\")) print(type([])) print(type({})) print(type(())) print(type(object)) print(type(function)) print(type(MyObject)) print(type(o)) print(type(sys)) \u8be5\u793a\u4f8b\u5c06\u5404\u79cd\u7c7b\u578b\u7684\u5bf9\u8c61\u6253\u5370\u5230\u63a7\u5236\u53f0\u5c4f\u5e55\u3002 1 2 3 4 5 6 7 8 9 10 11 $ ./typefun.py <class 'int'> <class 'str'> <class 'list'> <class 'dict'> <class 'tuple'> <class 'type'> <class 'function'> <class 'type'> <class '__main__.MyObject'> <class 'module'> id() \u51fd\u6570 \u00b6 id() \u8fd4\u56de\u5bf9\u8c61\u7684\u7279\u6b8a ID\u3002 idfun.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #!/usr/bin/env python # idfun.py import sys def fun(): pass class MyObject(object): def __init__(self): pass o = MyObject() print(id(1)) print(id(\"\")) print(id({})) print(id([])) print(id(sys)) print(id(fun)) print(id(MyObject)) print(id(o)) print(id(object)) \u8be5\u4ee3\u7801\u793a\u4f8b\u6253\u5370\u5185\u7f6e\u548c\u81ea\u5b9a\u4e49\u7684\u5404\u79cd\u5bf9\u8c61\u7684 ID\u3002 1 2 3 4 5 6 7 8 9 10 $ ./idfun.py 10914368 139696088742576 139696087935944 139696065155784 139696088325640 139696088244296 21503992 139696087910776 10738720 Python sys \u6a21\u5757 \u00b6 sys \u6a21\u5757\u63d0\u4f9b\u5bf9\u89e3\u91ca\u5668\u4f7f\u7528\u6216\u7ef4\u62a4\u7684\u7cfb\u7edf\u7279\u5b9a\u53d8\u91cf\u548c\u529f\u80fd\u4ee5\u53ca\u4e0e\u89e3\u91ca\u5668\u5f3a\u70c8\u4ea4\u4e92\u7684\u529f\u80fd\u7684\u8bbf\u95ee\u3002 \u8be5\u6a21\u5757\u5141\u8bb8\u6211\u4eec\u67e5\u8be2\u6709\u5173 Python \u73af\u5883\u7684\u4fe1\u606f\u3002 1 2 3 4 5 6 7 8 9 >>> import sys >>> sys.version '3.5.2 (default, Nov 17 2016, 17:05:23) \\n[GCC 5.4.0 20160609]' >>> sys.platform 'linux' >>> sys.path ['', '/usr/lib/python35.zip', '/usr/lib/python3.5', '/usr/lib/python3.5/plat-x86_64-linux-gnu', '/usr/lib/python3.5/lib-dynload', '/home/janbodnar/.local/lib/python3.5/site-packages', '/usr/local/lib/python3.5/dist-packages', '/usr/lib/python3/dist-packages'] \u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u68c0\u67e5\u4e86 Python \u7248\u672c\uff0c\u5e73\u53f0\u548c\u641c\u7d22\u8def\u5f84\u4f4d\u7f6e\u3002 \u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528 dir() \u51fd\u6570\u6765\u83b7\u53d6 sys \u6a21\u5757\u7684\u53d8\u91cf\u548c\u51fd\u6570\u7684\u5b8c\u6574\u5217\u8868\u3002 1 2 3 4 5 6 >>> sys.executable '/usr/bin/python3' >>> sys.argv [''] >>> sys.byteorder 'little' \u8be5\u793a\u4f8b\u663e\u793a\u4e86 sys \u6a21\u5757\u7684 executable \uff0c argv \u548c byteorder \u5c5e\u6027\u3002 1 2 >>> sys.executable '/usr/bin/python3' \u53ef\u6267\u884c\u6587\u4ef6\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u7ed9\u51fa\u6709\u610f\u4e49\u7684\u7cfb\u7edf\u4e0a Python \u89e3\u91ca\u5668\u7684\u53ef\u6267\u884c\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u540d\u79f0\u3002 1 2 >>> sys.argv [''] \u8fd9\u7ed9\u51fa\u4e86\u4f20\u9012\u7ed9 Python \u811a\u672c\u7684\u547d\u4ee4\u884c\u53c2\u6570\u5217\u8868\u3002 1 2 >>> sys.byteorder 'little' \u5b57\u8282\u987a\u5e8f\u662f\u672c\u673a\u5b57\u8282\u987a\u5e8f\u7684\u6307\u793a\u3002 \u5728 big-endian\uff08\u6700\u9ad8\u6709\u6548\u5b57\u8282\u5728\u524d\uff09\u5e73\u53f0\u4e0a\uff0c\u503c\u5c06\u4e3a\u201c big\u201d\uff0c\u5728 little-endian\uff08\u6700\u4f4e\u6709\u6548\u5b57\u8282\u5728\u524d\uff09\u5e73\u53f0\u503c\u5c06\u4e3a\u201c\u5c0f\u201d\u3002 \u5176\u4ed6\u81ea\u7701 \u00b6 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c55\u793a\u68c0\u67e5 Python \u5bf9\u8c61\u7684\u5404\u79cd\u5176\u4ed6\u65b9\u5f0f\u3002 attrs.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python # attr.py def fun(): pass print(hasattr(object, '__doc__')) print(hasattr(fun, '__doc__')) print(hasattr(fun, '__call__')) print(getattr(object, '__doc__')) print(getattr(fun, '__doc__')) hasattr() \u51fd\u6570\u68c0\u67e5\u5bf9\u8c61\u662f\u5426\u5177\u6709\u5c5e\u6027\u3002 getattr() \u51fd\u6570\u8fd4\u56de\u5c5e\u6027\u7684\u5185\u5bb9\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u3002 1 2 3 4 5 6 $ ./attr.py True True True The most base type None isinstance \u51fd\u6570\u68c0\u67e5\u5bf9\u8c61\u662f\u5426\u4e3a\u7279\u5b9a\u7c7b\u7684\u5b9e\u4f8b\u3002 1 2 3 4 5 6 >>> print(isinstance.__doc__) Return whether an object is an instance of a class or of a subclass thereof. A tuple, as in ``isinstance(x, (A, B, ...))``, may be given as the target to check against. This is equivalent to ``isinstance(x, A) or isinstance(x, B) or ...`` etc. \u6211\u4eec\u53ef\u4ee5\u4ea4\u4e92\u5730\u63cf\u8ff0\u4e00\u4e2a\u51fd\u6570\u3002 instance.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python # instance.py class MyObject(object): def __init__(self): pass o = MyObject() print(isinstance(o, MyObject)) print(isinstance(o, object)) print(isinstance(2, int)) print(isinstance('str', str)) \u4f17\u6240\u5468\u77e5\uff0c\u4e00\u5207\u90fd\u662f Python \u4e2d\u7684\u5bf9\u8c61\uff1b \u5076\u6570\u548c\u5b57\u7b26\u4e32\u3002 object \u662f Python \u4e2d\u6240\u6709\u5bf9\u8c61\u7684\u57fa\u672c\u7c7b\u578b\u3002 1 2 3 4 5 $ ./instance.py True True True True issubclass() \u51fd\u6570\u68c0\u67e5\u7279\u5b9a\u7684\u7c7b\u662f\u5426\u662f\u53e6\u4e00\u4e2a\u7c7b\u7684\u6d3e\u751f\u7c7b\u3002 subclass.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/usr/bin/env python # subclass.py class Object(object): def __init__(self): pass class Wall(Object): def __init__(self): pass print(issubclass(Object, Object)) print(issubclass(Object, Wall)) print(issubclass(Wall, Object)) print(issubclass(Wall, Wall)) \u5728\u6211\u4eec\u7684\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c Wall \u7c7b\u662f Object \u7c7b\u7684\u5b50\u7c7b\u3002 Object \u548c Wall \u672c\u8eab\u4e5f\u662f\u5b83\u4eec\u7684\u5b50\u7c7b\u3002 Object \u7c7b\u4e0d\u662f Wall \u7c7b\u7684\u5b50\u7c7b\u3002 1 2 3 4 5 $ ./subclass.py True False True True __doc__ \u5c5e\u6027\u63d0\u4f9b\u4e86\u6709\u5173\u5bf9\u8c61\u7684\u4e00\u4e9b\u6587\u6863\uff0c __name__ \u5c5e\u6027\u5305\u542b\u5bf9\u8c61\u7684\u540d\u79f0\u3002 namedoc.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python # namedoc.py def noaction(): '''A function, which does nothing''' pass funcs = [noaction, len, str] for i in funcs: print(i.__name__) print(i.__doc__) print(\"-\" * 75) \u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e09\u4e2a\u51fd\u6570\u7684\u5217\u8868\uff1a\u4e00\u4e2a\u81ea\u5b9a\u4e49\u51fd\u6570\u548c\u4e24\u4e2a\u672c\u673a\u51fd\u6570\u3002 \u6211\u4eec\u6d4f\u89c8\u5217\u8868\u5e76\u6253\u5370 __name__ \u548c __doc__ \u5c5e\u6027\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 $ ./namedoc.py noaction A function, which does nothing --------------------------------------------------------------------------- len Return the number of items in a container. --------------------------------------------------------------------------- str str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object.__str__() (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. --------------------------------------------------------------------------- \u6700\u540e\uff0c\u8fd8\u6709\u4e00\u4e2a callable() \u529f\u80fd\u3002 \u8be5\u51fd\u6570\u68c0\u67e5\u5bf9\u8c61\u662f\u5426\u4e3a\u53ef\u8c03\u7528\u5bf9\u8c61\uff08\u51fd\u6570\uff09\u3002 callable.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/usr/bin/env python # callable.py class Car(object): def setName(self, name): self.name = name def fun(): pass c = Car() print(callable(fun)) print(callable(c.setName)) print(callable([])) print(callable(1)) \u5728\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u68c0\u67e5\u4e09\u4e2a\u5bf9\u8c61\u662f\u5426\u53ef\u8c03\u7528\u3002 1 2 print(callable(fun)) print(callable(c.setName)) fun() \u51fd\u6570\u548c setName() \u65b9\u6cd5\u662f\u53ef\u8c03\u7528\u7684\u3002 \uff08\u65b9\u6cd5\u662f\u7ed1\u5b9a\u5230\u5bf9\u8c61\u7684\u51fd\u6570\u3002\uff09 1 2 3 4 5 $ ./callable.py True True False False","title":"Python \u81ea\u7701"},{"location":"pages/python/pytutorial/python-introspection/#Python-\u81ea\u7701","text":"\u672c\u7ae0\u6211\u4eec\u8ba8\u8bba Python \u81ea\u7701 \uff0c\u81ea\u7701\u662f\u4e00\u79cd\u81ea\u6211\u68c0\u67e5\u7684\u884c\u4e3a\u3002 \u5728\u8ba1\u7b97\u673a\u7f16\u7a0b\u4e2d\uff0c\u81ea\u7701\u662f\u5728\u8fd0\u884c\u65f6\u786e\u5b9a\u5bf9\u8c61\u7684\u7c7b\u578b\u6216\u5c5e\u6027\u7684\u80fd\u529b\u3002 Python \u7f16\u7a0b\u8bed\u8a00\u5bf9\u81ea\u7701\u6709\u5f88\u5927\u7684\u652f\u6301\uff0cPython \u4e2d\u7684\u6240\u6709\u5185\u5bb9\u90fd\u662f\u4e00\u4e2a\u5bf9\u8c61\u3002 Python \u4e2d\u7684\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u53ef\u4ee5\u5177\u6709\u5c5e\u6027\u548c\u65b9\u6cd5\uff0c\u901a\u8fc7\u4f7f\u7528\u5185\u7701\uff0c\u6211\u4eec\u53ef\u4ee5\u52a8\u6001\u68c0\u67e5 Python \u5bf9\u8c61\u3002","title":"Python \u81ea\u7701"},{"location":"pages/python/pytutorial/python-introspection/#Python-dir\u51fd\u6570","text":"dir() \u51fd\u6570\u8fd4\u56de\u5c5e\u4e8e\u5bf9\u8c61\u7684\u5c5e\u6027\u548c\u65b9\u6cd5\u7684\u6392\u5e8f\u5217\u8868\u3002 1 2 3 4 5 6 7 >>> dir(()) ['__add__', '__class__', '__contains__', '__delattr__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getslice__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'count', 'index'] \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u770b\u5230\u4e86\u5143\u7ec4\u5bf9\u8c61\u7684 dir() \u51fd\u6570\u7684\u8f93\u51fa\u3002 1 2 3 4 5 >>> print(().__doc__) tuple() -> empty tuple tuple(iterable) -> tuple initialized from iterable's items If the argument is a tuple, the return value is the same object. \u6211\u4eec\u7684\u7814\u7a76\u8868\u660e\uff0c\u5143\u7ec4\u5bf9\u8c61\u6709\u4e00\u4e2a __doc__ \u5c5e\u6027\u3002 direx.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #!/usr/bin/env python # direx.py import sys class MyObject(object): def __init__(self): pass def examine(self): print(self) o = MyObject() print(dir(o)) print(dir([])) print(dir({})) print(dir(1)) print(dir()) print(dir(len)) print(dir(sys)) print(dir(\"String\")) \u8be5\u793a\u4f8b\u4f7f\u7528 dir() \u51fd\u6570\u68c0\u67e5\u4e86\u51e0\u4e2a\u5bf9\u8c61\uff1a\u7528\u6237\u5b9a\u4e49\u7684\u5bf9\u8c61\uff0c\u672c\u673a\u6570\u636e\u7c7b\u578b\uff0c\u51fd\u6570\uff0c\u5b57\u7b26\u4e32\u6216\u6570\u5b57\u3002 \u4e0d\u5e26\u4efb\u4f55\u53c2\u6570\u7684 dir() \u8fd4\u56de\u5f53\u524d\u4f5c\u7528\u57df\u4e2d\u7684\u540d\u79f0\u3002 1 2 3 4 5 6 >>> dir() ['__builtins__', '__doc__', '__loader__', '__name__', '__package__', '__spec__'] >>> import sys >>>import math, os >>> dir() ['__builtins__', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'math', 'sys'] \u6211\u4eec\u5728\u5305\u542b\u4e00\u4e9b\u6a21\u5757\u4e4b\u524d\u548c\u4e4b\u540e\u6267\u884c dir() \u51fd\u6570\u3002","title":"Python dir\u51fd\u6570"},{"location":"pages/python/pytutorial/python-introspection/#Python-type\u51fd\u6570","text":"type() \u51fd\u6570\u8fd4\u56de\u5bf9\u8c61\u7684\u7c7b\u578b\u3002 typefun.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #!/usr/bin/env python # typefun.py import sys def function(): pass class MyObject(object): def __init__(self): pass o = MyObject() print(type(1)) print(type(\"\")) print(type([])) print(type({})) print(type(())) print(type(object)) print(type(function)) print(type(MyObject)) print(type(o)) print(type(sys)) \u8be5\u793a\u4f8b\u5c06\u5404\u79cd\u7c7b\u578b\u7684\u5bf9\u8c61\u6253\u5370\u5230\u63a7\u5236\u53f0\u5c4f\u5e55\u3002 1 2 3 4 5 6 7 8 9 10 11 $ ./typefun.py <class 'int'> <class 'str'> <class 'list'> <class 'dict'> <class 'tuple'> <class 'type'> <class 'function'> <class 'type'> <class '__main__.MyObject'> <class 'module'>","title":"Python type()\u51fd\u6570"},{"location":"pages/python/pytutorial/python-introspection/#id\u51fd\u6570","text":"id() \u8fd4\u56de\u5bf9\u8c61\u7684\u7279\u6b8a ID\u3002 idfun.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #!/usr/bin/env python # idfun.py import sys def fun(): pass class MyObject(object): def __init__(self): pass o = MyObject() print(id(1)) print(id(\"\")) print(id({})) print(id([])) print(id(sys)) print(id(fun)) print(id(MyObject)) print(id(o)) print(id(object)) \u8be5\u4ee3\u7801\u793a\u4f8b\u6253\u5370\u5185\u7f6e\u548c\u81ea\u5b9a\u4e49\u7684\u5404\u79cd\u5bf9\u8c61\u7684 ID\u3002 1 2 3 4 5 6 7 8 9 10 $ ./idfun.py 10914368 139696088742576 139696087935944 139696065155784 139696088325640 139696088244296 21503992 139696087910776 10738720","title":"id()\u51fd\u6570"},{"location":"pages/python/pytutorial/python-introspection/#Python-sys\u6a21\u5757","text":"sys \u6a21\u5757\u63d0\u4f9b\u5bf9\u89e3\u91ca\u5668\u4f7f\u7528\u6216\u7ef4\u62a4\u7684\u7cfb\u7edf\u7279\u5b9a\u53d8\u91cf\u548c\u529f\u80fd\u4ee5\u53ca\u4e0e\u89e3\u91ca\u5668\u5f3a\u70c8\u4ea4\u4e92\u7684\u529f\u80fd\u7684\u8bbf\u95ee\u3002 \u8be5\u6a21\u5757\u5141\u8bb8\u6211\u4eec\u67e5\u8be2\u6709\u5173 Python \u73af\u5883\u7684\u4fe1\u606f\u3002 1 2 3 4 5 6 7 8 9 >>> import sys >>> sys.version '3.5.2 (default, Nov 17 2016, 17:05:23) \\n[GCC 5.4.0 20160609]' >>> sys.platform 'linux' >>> sys.path ['', '/usr/lib/python35.zip', '/usr/lib/python3.5', '/usr/lib/python3.5/plat-x86_64-linux-gnu', '/usr/lib/python3.5/lib-dynload', '/home/janbodnar/.local/lib/python3.5/site-packages', '/usr/local/lib/python3.5/dist-packages', '/usr/lib/python3/dist-packages'] \u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u68c0\u67e5\u4e86 Python \u7248\u672c\uff0c\u5e73\u53f0\u548c\u641c\u7d22\u8def\u5f84\u4f4d\u7f6e\u3002 \u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528 dir() \u51fd\u6570\u6765\u83b7\u53d6 sys \u6a21\u5757\u7684\u53d8\u91cf\u548c\u51fd\u6570\u7684\u5b8c\u6574\u5217\u8868\u3002 1 2 3 4 5 6 >>> sys.executable '/usr/bin/python3' >>> sys.argv [''] >>> sys.byteorder 'little' \u8be5\u793a\u4f8b\u663e\u793a\u4e86 sys \u6a21\u5757\u7684 executable \uff0c argv \u548c byteorder \u5c5e\u6027\u3002 1 2 >>> sys.executable '/usr/bin/python3' \u53ef\u6267\u884c\u6587\u4ef6\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u7ed9\u51fa\u6709\u610f\u4e49\u7684\u7cfb\u7edf\u4e0a Python \u89e3\u91ca\u5668\u7684\u53ef\u6267\u884c\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u540d\u79f0\u3002 1 2 >>> sys.argv [''] \u8fd9\u7ed9\u51fa\u4e86\u4f20\u9012\u7ed9 Python \u811a\u672c\u7684\u547d\u4ee4\u884c\u53c2\u6570\u5217\u8868\u3002 1 2 >>> sys.byteorder 'little' \u5b57\u8282\u987a\u5e8f\u662f\u672c\u673a\u5b57\u8282\u987a\u5e8f\u7684\u6307\u793a\u3002 \u5728 big-endian\uff08\u6700\u9ad8\u6709\u6548\u5b57\u8282\u5728\u524d\uff09\u5e73\u53f0\u4e0a\uff0c\u503c\u5c06\u4e3a\u201c big\u201d\uff0c\u5728 little-endian\uff08\u6700\u4f4e\u6709\u6548\u5b57\u8282\u5728\u524d\uff09\u5e73\u53f0\u503c\u5c06\u4e3a\u201c\u5c0f\u201d\u3002","title":"Python sys\u6a21\u5757"},{"location":"pages/python/pytutorial/python-introspection/#\u5176\u4ed6\u81ea\u7701","text":"\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c55\u793a\u68c0\u67e5 Python \u5bf9\u8c61\u7684\u5404\u79cd\u5176\u4ed6\u65b9\u5f0f\u3002 attrs.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python # attr.py def fun(): pass print(hasattr(object, '__doc__')) print(hasattr(fun, '__doc__')) print(hasattr(fun, '__call__')) print(getattr(object, '__doc__')) print(getattr(fun, '__doc__')) hasattr() \u51fd\u6570\u68c0\u67e5\u5bf9\u8c61\u662f\u5426\u5177\u6709\u5c5e\u6027\u3002 getattr() \u51fd\u6570\u8fd4\u56de\u5c5e\u6027\u7684\u5185\u5bb9\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u3002 1 2 3 4 5 6 $ ./attr.py True True True The most base type None isinstance \u51fd\u6570\u68c0\u67e5\u5bf9\u8c61\u662f\u5426\u4e3a\u7279\u5b9a\u7c7b\u7684\u5b9e\u4f8b\u3002 1 2 3 4 5 6 >>> print(isinstance.__doc__) Return whether an object is an instance of a class or of a subclass thereof. A tuple, as in ``isinstance(x, (A, B, ...))``, may be given as the target to check against. This is equivalent to ``isinstance(x, A) or isinstance(x, B) or ...`` etc. \u6211\u4eec\u53ef\u4ee5\u4ea4\u4e92\u5730\u63cf\u8ff0\u4e00\u4e2a\u51fd\u6570\u3002 instance.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python # instance.py class MyObject(object): def __init__(self): pass o = MyObject() print(isinstance(o, MyObject)) print(isinstance(o, object)) print(isinstance(2, int)) print(isinstance('str', str)) \u4f17\u6240\u5468\u77e5\uff0c\u4e00\u5207\u90fd\u662f Python \u4e2d\u7684\u5bf9\u8c61\uff1b \u5076\u6570\u548c\u5b57\u7b26\u4e32\u3002 object \u662f Python \u4e2d\u6240\u6709\u5bf9\u8c61\u7684\u57fa\u672c\u7c7b\u578b\u3002 1 2 3 4 5 $ ./instance.py True True True True issubclass() \u51fd\u6570\u68c0\u67e5\u7279\u5b9a\u7684\u7c7b\u662f\u5426\u662f\u53e6\u4e00\u4e2a\u7c7b\u7684\u6d3e\u751f\u7c7b\u3002 subclass.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/usr/bin/env python # subclass.py class Object(object): def __init__(self): pass class Wall(Object): def __init__(self): pass print(issubclass(Object, Object)) print(issubclass(Object, Wall)) print(issubclass(Wall, Object)) print(issubclass(Wall, Wall)) \u5728\u6211\u4eec\u7684\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c Wall \u7c7b\u662f Object \u7c7b\u7684\u5b50\u7c7b\u3002 Object \u548c Wall \u672c\u8eab\u4e5f\u662f\u5b83\u4eec\u7684\u5b50\u7c7b\u3002 Object \u7c7b\u4e0d\u662f Wall \u7c7b\u7684\u5b50\u7c7b\u3002 1 2 3 4 5 $ ./subclass.py True False True True __doc__ \u5c5e\u6027\u63d0\u4f9b\u4e86\u6709\u5173\u5bf9\u8c61\u7684\u4e00\u4e9b\u6587\u6863\uff0c __name__ \u5c5e\u6027\u5305\u542b\u5bf9\u8c61\u7684\u540d\u79f0\u3002 namedoc.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python # namedoc.py def noaction(): '''A function, which does nothing''' pass funcs = [noaction, len, str] for i in funcs: print(i.__name__) print(i.__doc__) print(\"-\" * 75) \u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e09\u4e2a\u51fd\u6570\u7684\u5217\u8868\uff1a\u4e00\u4e2a\u81ea\u5b9a\u4e49\u51fd\u6570\u548c\u4e24\u4e2a\u672c\u673a\u51fd\u6570\u3002 \u6211\u4eec\u6d4f\u89c8\u5217\u8868\u5e76\u6253\u5370 __name__ \u548c __doc__ \u5c5e\u6027\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 $ ./namedoc.py noaction A function, which does nothing --------------------------------------------------------------------------- len Return the number of items in a container. --------------------------------------------------------------------------- str str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object.__str__() (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. --------------------------------------------------------------------------- \u6700\u540e\uff0c\u8fd8\u6709\u4e00\u4e2a callable() \u529f\u80fd\u3002 \u8be5\u51fd\u6570\u68c0\u67e5\u5bf9\u8c61\u662f\u5426\u4e3a\u53ef\u8c03\u7528\u5bf9\u8c61\uff08\u51fd\u6570\uff09\u3002 callable.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/usr/bin/env python # callable.py class Car(object): def setName(self, name): self.name = name def fun(): pass c = Car() print(callable(fun)) print(callable(c.setName)) print(callable([])) print(callable(1)) \u5728\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u68c0\u67e5\u4e09\u4e2a\u5bf9\u8c61\u662f\u5426\u53ef\u8c03\u7528\u3002 1 2 print(callable(fun)) print(callable(c.setName)) fun() \u51fd\u6570\u548c setName() \u65b9\u6cd5\u662f\u53ef\u8c03\u7528\u7684\u3002 \uff08\u65b9\u6cd5\u662f\u7ed1\u5b9a\u5230\u5bf9\u8c61\u7684\u51fd\u6570\u3002\uff09 1 2 3 4 5 $ ./callable.py True True False False","title":"\u5176\u4ed6\u81ea\u7701"},{"location":"pages/python/pytutorial/python-itergener/","text":"Python \u8fed\u4ee3\u5668\u548c\u751f\u6210\u5668 \u00b6 Python \u8fed\u4ee3\u5668\u548c\u751f\u6210\u5668 \uff0c\u8fed\u4ee3\u5668\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5b83\u4f7f\u7a0b\u5e8f\u5458\u53ef\u4ee5\u904d\u5386\u96c6\u5408\u7684\u6240\u6709\u5143\u7d20\uff0c\u800c\u4e0d\u7ba1\u5176\u5177\u4f53\u5b9e\u73b0\u5982\u4f55\u3002 \u5728 Python \u4e2d\uff0c\u8fed\u4ee3\u5668\u662f\u5b9e\u73b0\u8fed\u4ee3\u5668\u534f\u8bae\u7684\u5bf9\u8c61\u3002 \u8fed\u4ee3\u5668\u534f\u8bae\u5305\u542b\u4e24\u79cd\u65b9\u6cd5\u3002 __iter__() \u65b9\u6cd5\u5fc5\u987b\u8fd4\u56de\u8fed\u4ee3\u5668\u5bf9\u8c61\uff0c\u800c next() \u65b9\u6cd5\u5fc5\u987b\u8fd4\u56de\u5e8f\u5217\u4e2d\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20\u3002 \u8fed\u4ee3\u5668\u5177\u6709\u4ee5\u4e0b\u4f18\u70b9\uff1a \u6e05\u6d01\u4ee3\u7801 \u8fed\u4ee3\u5668\u53ef\u4ee5\u5904\u7406\u65e0\u9650\u5e8f\u5217 \u8fed\u4ee3\u5668\u8282\u7701\u8d44\u6e90 Python \u6709\u51e0\u4e2a\u5185\u7f6e\u5bf9\u8c61\uff0c\u5b83\u4eec\u5b9e\u73b0\u4e86\u8fed\u4ee3\u5668\u534f\u8bae\u3002 \u4f8b\u5982\u5217\u8868\uff0c\u5143\u7ec4\uff0c\u5b57\u7b26\u4e32\uff0c\u5b57\u5178\u6216\u6587\u4ef6\u3002 iterator.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/usr/bin/env python # iterator.py str = \"formidable\" for e in str: print(e, end=\" \") print() it = iter(str) print(it.next()) print(it.next()) print(it.next()) print(list(it)) \u5728\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u663e\u793a\u4e86\u5b57\u7b26\u4e32\u4e0a\u7684\u5185\u7f6e\u8fed\u4ee3\u5668\u3002 \u5728 Python \u4e2d\uff0c\u5b57\u7b26\u4e32\u662f\u4e0d\u53ef\u53d8\u7684\u5b57\u7b26\u5e8f\u5217\u3002 iter() \u51fd\u6570\u8fd4\u56de\u5bf9\u8c61\u7684\u8fed\u4ee3\u5668\u3002 \u6211\u4eec\u8fd8\u53ef\u4ee5\u5728\u8fed\u4ee3\u5668\u4e0a\u4f7f\u7528 list() \u6216 tuple() \u51fd\u6570\u3002 1 2 3 4 5 6 $ ./iterator.py f o r m i d a b l e f o r ['m', 'i', 'd', 'a', 'b', 'l', 'e'] Python \u9605\u8bfb\u4e00\u884c \u00b6 \u901a\u8fc7\u8282\u7701\u7cfb\u7edf\u8d44\u6e90\uff0c\u6211\u4eec\u7684\u610f\u601d\u662f\u5728\u4f7f\u7528\u8fed\u4ee3\u5668\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u5e8f\u5217\u4e2d\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20\uff0c\u800c\u65e0\u9700\u5c06\u6574\u4e2a\u6570\u636e\u96c6\u4fdd\u7559\u5728\u5185\u5b58\u4e2d\u3002 read_data.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python # read_data.py with open('data.txt', 'r') as f: while True: line = f.readline() if not line: break else: print(line.rstrip()) \u6b64\u4ee3\u7801\u6253\u5370 data.txt \u6587\u4ef6\u7684\u5185\u5bb9\u3002 \u9664\u4e86\u4f7f\u7528 while \u5faa\u73af\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u5e94\u7528\u8fed\u4ee3\u5668\u6765\u7b80\u5316\u6211\u4eec\u7684\u4efb\u52a1\u3002 read_data_iterator.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python # read_data_iterator.py with open('data.txt', 'r') as f: for line in f: print(line.rstrip()) open() \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u6587\u4ef6\u5bf9\u8c61\uff0c\u5b83\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668\u3002 \u6211\u4eec\u53ef\u4ee5\u5728 for \u5faa\u73af\u4e2d\u4f7f\u7528\u5b83\u3002 \u901a\u8fc7\u4f7f\u7528\u8fed\u4ee3\u5668\uff0c\u4ee3\u7801\u66f4\u6e05\u6670\u3002 Python \u8fed\u4ee3\u5668\u534f\u8bae \u00b6 \u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u5b9e\u73b0\u8fed\u4ee3\u5668\u534f\u8bae\u7684\u81ea\u5b9a\u4e49\u5bf9\u8c61\u3002 iterator_protocol.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #!/usr/bin/env python # iterator_protocol.py class Seq: def __init__(self): self.x = 0 def __next__(self): self.x += 1 return self.x**self.x def __iter__(self): return self s = Seq() n = 0 for e in s: print(e) n += 1 if n > 10: break \u5728\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u6570\u5b57\u5e8f\u5217 1\uff0c4\uff0c27\uff0c256\uff0c\u2026\u3002 \u8fd9\u8868\u660e\u4f7f\u7528\u8fed\u4ee3\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u5904\u7406\u65e0\u9650\u5e8f\u5217\u3002 1 2 3 def __iter__(self): return self for \u8bed\u53e5\u5728\u5bb9\u5668\u5bf9\u8c61\u4e0a\u8c03\u7528 __iter__() \u51fd\u6570\u3002 \u8be5\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5b9a\u4e49\u65b9\u6cd5 __next__() \u7684\u8fed\u4ee3\u5668\u5bf9\u8c61\uff0c\u8be5\u65b9\u6cd5\u4e00\u6b21\u8bbf\u95ee\u4e00\u4e2a\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\u3002 1 2 3 def next(self): self.x += 1 return self.x**self.x next() \u65b9\u6cd5\u8fd4\u56de\u5e8f\u5217\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20\u3002 1 2 if n > 10: break \u56e0\u4e3a\u6211\u4eec\u6b63\u5728\u5904\u7406\u65e0\u9650\u5e8f\u5217\uff0c\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u4e2d\u65ad for \u5faa\u73af\u3002 1 2 3 4 5 6 7 8 9 10 11 12 $ ./iterator.py 1 4 27 256 3125 46656 823543 16777216 387420489 10000000000 285311670611 StopIteration \u00b6 \u5faa\u73af\u53ef\u4ee5\u4ee5\u5176\u4ed6\u65b9\u5f0f\u4e2d\u65ad\u3002 \u5728\u7c7b\u5b9a\u4e49\u4e2d\uff0c\u6211\u4eec\u5fc5\u987b\u5f15\u53d1\u4e00\u4e2a StopIteration \u5f02\u5e38\u3002 \u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u91cd\u505a\u4e0a\u4e00\u4e2a\u793a\u4f8b\u3002 stopiter.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #!/usr/bin/env python # stopiter.py class Seq14: def __init__(self): self.x = 0 def __next__(self): self.x += 1 if self.x > 14: raise StopIteration return self.x ** self.x def __iter__(self): return self s = Seq14() for e in s: print(e) \u8be5\u4ee3\u7801\u793a\u4f8b\u5c06\u6253\u5370\u5e8f\u5217\u7684\u524d 14 \u4e2a\u6570\u5b57\u3002 1 2 if self.x > 14: raise StopIteration StopIteration \u5f02\u5e38\u5c06\u505c\u6b62 for \u5faa\u73af\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 $ ./stop_iter.py 1 4 27 256 3125 46656 823543 16777216 387420489 10000000000 285311670611 8916100448256 302875106592253 11112006825558016 Python \u751f\u6210\u5668 \u00b6 Generator \u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u4f8b\u7a0b\uff0c\u53ef\u7528\u4e8e\u63a7\u5236\u5faa\u73af\u7684\u8fed\u4ee3\u884c\u4e3a\u3002 \u751f\u6210\u5668\u7c7b\u4f3c\u4e8e\u8fd4\u56de\u6570\u7ec4\u7684\u51fd\u6570\u3002 \u751f\u6210\u5668\u5177\u6709\u53c2\u6570\uff0c\u53ef\u4ee5\u8c03\u7528\u5b83\u5e76\u751f\u6210\u6570\u5b57\u5e8f\u5217\u3002 \u4f46\u662f\uff0c\u4e0e\u8fd4\u56de\u6574\u4e2a\u6570\u7ec4\u7684\u51fd\u6570\u4e0d\u540c\uff0c\u751f\u6210\u5668\u4e00\u6b21\u751f\u6210\u4e00\u4e2a\u503c\u3002 \u8fd9\u9700\u8981\u8f83\u5c11\u7684\u5185\u5b58\u3002 Python \u4e2d\u7684\u751f\u6210\u5668\uff1a \u7528 def \u5173\u952e\u5b57\u5b9a\u4e49 \u4f7f\u7528 yield \u5173\u952e\u5b57 \u53ef\u4ee5\u4f7f\u7528\u51e0\u4e2a yield \u5173\u952e\u5b57 \u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668 \u8ba9\u6211\u4eec\u770b\u4e00\u4e2a\u751f\u6210\u5668\u793a\u4f8b\u3002 simple_generator.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #!/usr/bin/env python # simple_generator.py def gen(): x, y = 1, 2 yield x, y x += 1 yield x, y g = gen() print(next(g)) print(next(g)) try: print(next(g)) except StopIteration: print(\"Iteration finished\") \u8be5\u7a0b\u5e8f\u5c06\u521b\u5efa\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u751f\u6210\u5668\u3002 1 2 3 4 5 6 7 def gen(): x, y = 1, 2 yield x, y x += 1 yield x, y \u5c31\u50cf\u6b63\u5e38\u51fd\u6570\u4e00\u6837\uff0c\u751f\u6210\u5668\u4f7f\u7528 def \u5173\u952e\u5b57\u5b9a\u4e49\u3002 \u6211\u4eec\u5728\u751f\u6210\u5668\u4e3b\u4f53\u5185\u4f7f\u7528\u4e24\u4e2a yield \u5173\u952e\u5b57\u3002 yield \u5173\u952e\u5b57\u9000\u51fa\u751f\u6210\u5668\u5e76\u8fd4\u56de\u4e00\u4e2a\u503c\u3002 \u4e0b\u6b21\u8c03\u7528\u8fed\u4ee3\u5668\u7684 next() \u51fd\u6570\u65f6\uff0c\u6211\u4eec\u5728 yield \u5173\u952e\u5b57\u4e4b\u540e\u7684\u884c\u7ee7\u7eed\u3002 \u8bf7\u6ce8\u610f\uff0c\u5c40\u90e8\u53d8\u91cf\u4f1a\u5728\u6574\u4e2a\u8fed\u4ee3\u8fc7\u7a0b\u4e2d\u4fdd\u7559\u3002 \u5f53\u6ca1\u6709\u4f59\u91cf\u53ef\u4ea7\u751f\u65f6\uff0c\u5c06\u5f15\u53d1 StopIteration \u5f02\u5e38\u3002 1 2 3 4 $ ./generator.py (1, 2) (2, 2) Iteration finished \u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u8ba1\u7b97\u6590\u6ce2\u7eb3\u5951\u6570\u3002 \u5e8f\u5217\u7684\u7b2c\u4e00\u4e2a\u6570\u5b57\u4e3a 0\uff0c\u7b2c\u4e8c\u4e2a\u6570\u5b57\u4e3a 1\uff0c\u5e76\u4e14\u6bcf\u4e2a\u540e\u7eed\u6570\u5b57\u7b49\u4e8e\u5e8f\u5217\u672c\u8eab\u524d\u4e24\u4e2a\u6570\u5b57\u7684\u548c\u3002 fibonacci_gen.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #!/usr/bin/env python # fibonacci_gen.py import time def fib(): a, b = 0, 1 while True: yield b a, b = b, a + b g = fib() try: for e in g: print(e) time.sleep(1) except KeyboardInterrupt: print(\"Calculation stopped\") \u8be5\u811a\u672c\u5c06 Fibonacci \u6570\u5b57\u8fde\u7eed\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 \u7528 Ctrl + C \u7ec4\u5408\u952e\u7ec8\u6b62\u3002 Python \u751f\u6210\u5668\u8868\u8fbe\u5f0f \u00b6 \u751f\u6210\u5668\u8868\u8fbe\u5f0f\u7c7b\u4f3c\u4e8e\u5217\u8868\u63a8\u5bfc\u3002 \u533a\u522b\u5728\u4e8e\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u8fd4\u56de\u7684\u662f\u751f\u6210\u5668\uff0c\u800c\u4e0d\u662f\u5217\u8868\u3002 generator_expression.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python # generator_expression.py n = (e for e in range(50000000) if not e % 3) i = 0 for e in n: print(e) i += 1 if i > 100: raise StopIteration \u8be5\u793a\u4f8b\u8ba1\u7b97\u7684\u503c\u53ef\u4ee5\u9664\u4ee5 3\uff0c\u800c\u6ca1\u6709\u4f59\u6570\u3002 1 n = (e for e in range(50000000) if not e % 3) \u5c06\u4f7f\u7528\u5706\u62ec\u53f7\u521b\u5efa\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u521b\u5efa\u5217\u8868\u63a8\u5bfc\u5f0f\u5c06\u975e\u5e38\u4f4e\u6548\uff0c\u56e0\u4e3a\u8be5\u793a\u4f8b\u5c06\u4e0d\u5fc5\u8981\u5730\u5360\u7528\u5927\u91cf\u5185\u5b58\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u751f\u6210\u5668\u8868\u8fbe\u5f0f\uff0c\u8be5\u8868\u8fbe\u5f0f\u6839\u636e\u9700\u8981\u5ef6\u8fdf\u751f\u6210\u503c\u3002 1 2 3 4 5 6 7 8 9 i = 0 for e in n: print(e) i += 1 if i > 100: raise StopIteration \u5728 for \u5faa\u73af\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u751f\u6210\u5668\u751f\u6210 100 \u4e2a\u503c\u3002 \u6211\u4eec\u8fd9\u6837\u505a\u65f6\u5e76\u6ca1\u6709\u5927\u91cf\u4f7f\u7528\u5185\u5b58\u3002 \u5728\u4e0b\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u5728 Python \u4e2d\u521b\u5efa\u7c7b\u4f3c grep \u7684\u5b9e\u7528\u7a0b\u5e8f\u3002 roman_empire.txt 1 2 3 4 5 6 7 8 9 10 11 12 13 14 The Roman Empire (Latin: Imperium R\u014dm\u0101num; Classical Latin: [\u026am\u02c8p\u025b.ri.\u0169\u02d0 ro\u02d0\u02c8ma\u02d0.n\u0169\u02d0] Koine and Medieval Greek: \u0392\u03b1\u03c3\u03b9\u03bb\u03b5\u03af\u03b1 \u03c4\u1ff6\u03bd \u1fec\u03c9\u03bc\u03b1\u03af\u03c9\u03bd, tr. Basileia t\u014dn Rh\u014dmai\u014dn) was the post-Roman Republic period of the ancient Roman civilization, characterized by government headed by emperors and large territorial holdings around the Mediterranean Sea in Europe, Africa and Asia. The city of Rome was the largest city in the world c.\u2009100 BC \u2013 c.\u2009AD 400, with Constantinople (New Rome) becoming the largest around AD 500,[5][6] and the Empire's populace grew to an estimated 50 to 90 million inhabitants (roughly 20% of the world's population at the time).[n 7][7] The 500-year-old republic which preceded it was severely destabilized in a series of civil wars and political conflict, during which Julius Caesar was appointed as perpetual dictator and then assassinated in 44 BC. Civil wars and executions continued, culminating in the victory of Octavian, Caesar's adopted son, over Mark Antony and Cleopatra at the Battle of Actium in 31 BC and the annexation of Egypt. Octavian's power was then unassailable and in 27 BC the Roman Senate formally granted him overarching power and the new title Augustus, effectively marking the end of the Roman Republic. \u6211\u4eec\u4f7f\u7528\u6b64\u6587\u672c\u6587\u4ef6\u3002 generator_expression.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env python # gen_grep.py import sys def grep(pattern, lines): return ((line, lines.index(line)+1) for line in lines if pattern in line) file_name = sys.argv[2] pattern = sys.argv[1] with open(file_name, 'r') as f: lines = f.readlines() for line, n in grep(pattern, lines): print(n, line.rstrip()) \u8be5\u793a\u4f8b\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\uff0c\u5e76\u6253\u5370\u5305\u542b\u6307\u5b9a\u6a21\u5f0f\u53ca\u5176\u884c\u53f7\u7684\u884c\u3002 1 2 def grep(pattern, lines): return ((line, lines.index(line)+1) for line in lines if pattern in line) \u7c7b\u4f3c\u4e8e grep \u7684\u5b9e\u7528\u7a0b\u5e8f\u4f7f\u7528\u6b64\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u3002 \u8be5\u8868\u8fbe\u5f0f\u904d\u5386\u884c\u5217\u8868\u5e76\u9009\u62e9\u5305\u542b\u6a21\u5f0f\u7684\u884c\u3002 \u5b83\u8ba1\u7b97\u5217\u8868\u4e2d\u8be5\u884c\u7684\u7d22\u5f15\uff0c\u5373\u5b83\u5728\u6587\u4ef6\u4e2d\u7684\u884c\u53f7\u3002 1 2 3 4 5 with open(file_name, 'r') as f: lines = f.readlines() for line, n in grep(pattern, lines): print(n, line.rstrip()) \u6211\u4eec\u6253\u5f00\u6587\u4ef6\u8fdb\u884c\u8bfb\u53d6\uff0c\u7136\u540e\u5bf9\u6570\u636e\u8c03\u7528 grep() \u51fd\u6570\u3002 \u8be5\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u751f\u6210\u5668\uff0c\u8be5\u751f\u6210\u5668\u901a\u8fc7 for \u5faa\u73af\u904d\u5386\u3002 1 2 3 4 5 $ ./gen_grep.py Roman roman_empire.txt 1 The Roman Empire (Latin: Imperium R\u014dm\u0101num; Classical Latin: [\u026am\u02c8p\u025b.ri.\u0169\u02d0 ro\u02d0\u02c8ma\u02d0.n\u0169\u02d0] 3 post-Roman Republic period of the ancient Roman civilization, characterized by government 13 then unassailable and in 27 BC the Roman Senate formally granted him overarching power and 14 the new title Augustus, effectively marking the end of the Roman Republic. \u6587\u4ef6\u4e2d\u6709\u56db\u884c\u5305\u542b\u201c\u7f57\u9a6c\u201d\u5b57\u3002","title":"Python \u8fed\u4ee3\u5668\u548c\u751f\u6210\u5668"},{"location":"pages/python/pytutorial/python-itergener/#Python-\u8fed\u4ee3\u5668\u548c\u751f\u6210\u5668","text":"Python \u8fed\u4ee3\u5668\u548c\u751f\u6210\u5668 \uff0c\u8fed\u4ee3\u5668\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5b83\u4f7f\u7a0b\u5e8f\u5458\u53ef\u4ee5\u904d\u5386\u96c6\u5408\u7684\u6240\u6709\u5143\u7d20\uff0c\u800c\u4e0d\u7ba1\u5176\u5177\u4f53\u5b9e\u73b0\u5982\u4f55\u3002 \u5728 Python \u4e2d\uff0c\u8fed\u4ee3\u5668\u662f\u5b9e\u73b0\u8fed\u4ee3\u5668\u534f\u8bae\u7684\u5bf9\u8c61\u3002 \u8fed\u4ee3\u5668\u534f\u8bae\u5305\u542b\u4e24\u79cd\u65b9\u6cd5\u3002 __iter__() \u65b9\u6cd5\u5fc5\u987b\u8fd4\u56de\u8fed\u4ee3\u5668\u5bf9\u8c61\uff0c\u800c next() \u65b9\u6cd5\u5fc5\u987b\u8fd4\u56de\u5e8f\u5217\u4e2d\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20\u3002 \u8fed\u4ee3\u5668\u5177\u6709\u4ee5\u4e0b\u4f18\u70b9\uff1a \u6e05\u6d01\u4ee3\u7801 \u8fed\u4ee3\u5668\u53ef\u4ee5\u5904\u7406\u65e0\u9650\u5e8f\u5217 \u8fed\u4ee3\u5668\u8282\u7701\u8d44\u6e90 Python \u6709\u51e0\u4e2a\u5185\u7f6e\u5bf9\u8c61\uff0c\u5b83\u4eec\u5b9e\u73b0\u4e86\u8fed\u4ee3\u5668\u534f\u8bae\u3002 \u4f8b\u5982\u5217\u8868\uff0c\u5143\u7ec4\uff0c\u5b57\u7b26\u4e32\uff0c\u5b57\u5178\u6216\u6587\u4ef6\u3002 iterator.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/usr/bin/env python # iterator.py str = \"formidable\" for e in str: print(e, end=\" \") print() it = iter(str) print(it.next()) print(it.next()) print(it.next()) print(list(it)) \u5728\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u663e\u793a\u4e86\u5b57\u7b26\u4e32\u4e0a\u7684\u5185\u7f6e\u8fed\u4ee3\u5668\u3002 \u5728 Python \u4e2d\uff0c\u5b57\u7b26\u4e32\u662f\u4e0d\u53ef\u53d8\u7684\u5b57\u7b26\u5e8f\u5217\u3002 iter() \u51fd\u6570\u8fd4\u56de\u5bf9\u8c61\u7684\u8fed\u4ee3\u5668\u3002 \u6211\u4eec\u8fd8\u53ef\u4ee5\u5728\u8fed\u4ee3\u5668\u4e0a\u4f7f\u7528 list() \u6216 tuple() \u51fd\u6570\u3002 1 2 3 4 5 6 $ ./iterator.py f o r m i d a b l e f o r ['m', 'i', 'd', 'a', 'b', 'l', 'e']","title":"Python \u8fed\u4ee3\u5668\u548c\u751f\u6210\u5668"},{"location":"pages/python/pytutorial/python-itergener/#Python-\u9605\u8bfb\u4e00\u884c","text":"\u901a\u8fc7\u8282\u7701\u7cfb\u7edf\u8d44\u6e90\uff0c\u6211\u4eec\u7684\u610f\u601d\u662f\u5728\u4f7f\u7528\u8fed\u4ee3\u5668\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u5e8f\u5217\u4e2d\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20\uff0c\u800c\u65e0\u9700\u5c06\u6574\u4e2a\u6570\u636e\u96c6\u4fdd\u7559\u5728\u5185\u5b58\u4e2d\u3002 read_data.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python # read_data.py with open('data.txt', 'r') as f: while True: line = f.readline() if not line: break else: print(line.rstrip()) \u6b64\u4ee3\u7801\u6253\u5370 data.txt \u6587\u4ef6\u7684\u5185\u5bb9\u3002 \u9664\u4e86\u4f7f\u7528 while \u5faa\u73af\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u5e94\u7528\u8fed\u4ee3\u5668\u6765\u7b80\u5316\u6211\u4eec\u7684\u4efb\u52a1\u3002 read_data_iterator.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python # read_data_iterator.py with open('data.txt', 'r') as f: for line in f: print(line.rstrip()) open() \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u6587\u4ef6\u5bf9\u8c61\uff0c\u5b83\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668\u3002 \u6211\u4eec\u53ef\u4ee5\u5728 for \u5faa\u73af\u4e2d\u4f7f\u7528\u5b83\u3002 \u901a\u8fc7\u4f7f\u7528\u8fed\u4ee3\u5668\uff0c\u4ee3\u7801\u66f4\u6e05\u6670\u3002","title":"Python \u9605\u8bfb\u4e00\u884c"},{"location":"pages/python/pytutorial/python-itergener/#Python-\u8fed\u4ee3\u5668\u534f\u8bae","text":"\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u5b9e\u73b0\u8fed\u4ee3\u5668\u534f\u8bae\u7684\u81ea\u5b9a\u4e49\u5bf9\u8c61\u3002 iterator_protocol.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #!/usr/bin/env python # iterator_protocol.py class Seq: def __init__(self): self.x = 0 def __next__(self): self.x += 1 return self.x**self.x def __iter__(self): return self s = Seq() n = 0 for e in s: print(e) n += 1 if n > 10: break \u5728\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u6570\u5b57\u5e8f\u5217 1\uff0c4\uff0c27\uff0c256\uff0c\u2026\u3002 \u8fd9\u8868\u660e\u4f7f\u7528\u8fed\u4ee3\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u5904\u7406\u65e0\u9650\u5e8f\u5217\u3002 1 2 3 def __iter__(self): return self for \u8bed\u53e5\u5728\u5bb9\u5668\u5bf9\u8c61\u4e0a\u8c03\u7528 __iter__() \u51fd\u6570\u3002 \u8be5\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5b9a\u4e49\u65b9\u6cd5 __next__() \u7684\u8fed\u4ee3\u5668\u5bf9\u8c61\uff0c\u8be5\u65b9\u6cd5\u4e00\u6b21\u8bbf\u95ee\u4e00\u4e2a\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\u3002 1 2 3 def next(self): self.x += 1 return self.x**self.x next() \u65b9\u6cd5\u8fd4\u56de\u5e8f\u5217\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20\u3002 1 2 if n > 10: break \u56e0\u4e3a\u6211\u4eec\u6b63\u5728\u5904\u7406\u65e0\u9650\u5e8f\u5217\uff0c\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u4e2d\u65ad for \u5faa\u73af\u3002 1 2 3 4 5 6 7 8 9 10 11 12 $ ./iterator.py 1 4 27 256 3125 46656 823543 16777216 387420489 10000000000 285311670611","title":"Python \u8fed\u4ee3\u5668\u534f\u8bae"},{"location":"pages/python/pytutorial/python-itergener/#StopIteration","text":"\u5faa\u73af\u53ef\u4ee5\u4ee5\u5176\u4ed6\u65b9\u5f0f\u4e2d\u65ad\u3002 \u5728\u7c7b\u5b9a\u4e49\u4e2d\uff0c\u6211\u4eec\u5fc5\u987b\u5f15\u53d1\u4e00\u4e2a StopIteration \u5f02\u5e38\u3002 \u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u91cd\u505a\u4e0a\u4e00\u4e2a\u793a\u4f8b\u3002 stopiter.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #!/usr/bin/env python # stopiter.py class Seq14: def __init__(self): self.x = 0 def __next__(self): self.x += 1 if self.x > 14: raise StopIteration return self.x ** self.x def __iter__(self): return self s = Seq14() for e in s: print(e) \u8be5\u4ee3\u7801\u793a\u4f8b\u5c06\u6253\u5370\u5e8f\u5217\u7684\u524d 14 \u4e2a\u6570\u5b57\u3002 1 2 if self.x > 14: raise StopIteration StopIteration \u5f02\u5e38\u5c06\u505c\u6b62 for \u5faa\u73af\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 $ ./stop_iter.py 1 4 27 256 3125 46656 823543 16777216 387420489 10000000000 285311670611 8916100448256 302875106592253 11112006825558016","title":"StopIteration"},{"location":"pages/python/pytutorial/python-itergener/#Python-\u751f\u6210\u5668","text":"Generator \u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u4f8b\u7a0b\uff0c\u53ef\u7528\u4e8e\u63a7\u5236\u5faa\u73af\u7684\u8fed\u4ee3\u884c\u4e3a\u3002 \u751f\u6210\u5668\u7c7b\u4f3c\u4e8e\u8fd4\u56de\u6570\u7ec4\u7684\u51fd\u6570\u3002 \u751f\u6210\u5668\u5177\u6709\u53c2\u6570\uff0c\u53ef\u4ee5\u8c03\u7528\u5b83\u5e76\u751f\u6210\u6570\u5b57\u5e8f\u5217\u3002 \u4f46\u662f\uff0c\u4e0e\u8fd4\u56de\u6574\u4e2a\u6570\u7ec4\u7684\u51fd\u6570\u4e0d\u540c\uff0c\u751f\u6210\u5668\u4e00\u6b21\u751f\u6210\u4e00\u4e2a\u503c\u3002 \u8fd9\u9700\u8981\u8f83\u5c11\u7684\u5185\u5b58\u3002 Python \u4e2d\u7684\u751f\u6210\u5668\uff1a \u7528 def \u5173\u952e\u5b57\u5b9a\u4e49 \u4f7f\u7528 yield \u5173\u952e\u5b57 \u53ef\u4ee5\u4f7f\u7528\u51e0\u4e2a yield \u5173\u952e\u5b57 \u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668 \u8ba9\u6211\u4eec\u770b\u4e00\u4e2a\u751f\u6210\u5668\u793a\u4f8b\u3002 simple_generator.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #!/usr/bin/env python # simple_generator.py def gen(): x, y = 1, 2 yield x, y x += 1 yield x, y g = gen() print(next(g)) print(next(g)) try: print(next(g)) except StopIteration: print(\"Iteration finished\") \u8be5\u7a0b\u5e8f\u5c06\u521b\u5efa\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u751f\u6210\u5668\u3002 1 2 3 4 5 6 7 def gen(): x, y = 1, 2 yield x, y x += 1 yield x, y \u5c31\u50cf\u6b63\u5e38\u51fd\u6570\u4e00\u6837\uff0c\u751f\u6210\u5668\u4f7f\u7528 def \u5173\u952e\u5b57\u5b9a\u4e49\u3002 \u6211\u4eec\u5728\u751f\u6210\u5668\u4e3b\u4f53\u5185\u4f7f\u7528\u4e24\u4e2a yield \u5173\u952e\u5b57\u3002 yield \u5173\u952e\u5b57\u9000\u51fa\u751f\u6210\u5668\u5e76\u8fd4\u56de\u4e00\u4e2a\u503c\u3002 \u4e0b\u6b21\u8c03\u7528\u8fed\u4ee3\u5668\u7684 next() \u51fd\u6570\u65f6\uff0c\u6211\u4eec\u5728 yield \u5173\u952e\u5b57\u4e4b\u540e\u7684\u884c\u7ee7\u7eed\u3002 \u8bf7\u6ce8\u610f\uff0c\u5c40\u90e8\u53d8\u91cf\u4f1a\u5728\u6574\u4e2a\u8fed\u4ee3\u8fc7\u7a0b\u4e2d\u4fdd\u7559\u3002 \u5f53\u6ca1\u6709\u4f59\u91cf\u53ef\u4ea7\u751f\u65f6\uff0c\u5c06\u5f15\u53d1 StopIteration \u5f02\u5e38\u3002 1 2 3 4 $ ./generator.py (1, 2) (2, 2) Iteration finished \u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u8ba1\u7b97\u6590\u6ce2\u7eb3\u5951\u6570\u3002 \u5e8f\u5217\u7684\u7b2c\u4e00\u4e2a\u6570\u5b57\u4e3a 0\uff0c\u7b2c\u4e8c\u4e2a\u6570\u5b57\u4e3a 1\uff0c\u5e76\u4e14\u6bcf\u4e2a\u540e\u7eed\u6570\u5b57\u7b49\u4e8e\u5e8f\u5217\u672c\u8eab\u524d\u4e24\u4e2a\u6570\u5b57\u7684\u548c\u3002 fibonacci_gen.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #!/usr/bin/env python # fibonacci_gen.py import time def fib(): a, b = 0, 1 while True: yield b a, b = b, a + b g = fib() try: for e in g: print(e) time.sleep(1) except KeyboardInterrupt: print(\"Calculation stopped\") \u8be5\u811a\u672c\u5c06 Fibonacci \u6570\u5b57\u8fde\u7eed\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 \u7528 Ctrl + C \u7ec4\u5408\u952e\u7ec8\u6b62\u3002","title":"Python \u751f\u6210\u5668"},{"location":"pages/python/pytutorial/python-itergener/#Python-\u751f\u6210\u5668\u8868\u8fbe\u5f0f","text":"\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u7c7b\u4f3c\u4e8e\u5217\u8868\u63a8\u5bfc\u3002 \u533a\u522b\u5728\u4e8e\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u8fd4\u56de\u7684\u662f\u751f\u6210\u5668\uff0c\u800c\u4e0d\u662f\u5217\u8868\u3002 generator_expression.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python # generator_expression.py n = (e for e in range(50000000) if not e % 3) i = 0 for e in n: print(e) i += 1 if i > 100: raise StopIteration \u8be5\u793a\u4f8b\u8ba1\u7b97\u7684\u503c\u53ef\u4ee5\u9664\u4ee5 3\uff0c\u800c\u6ca1\u6709\u4f59\u6570\u3002 1 n = (e for e in range(50000000) if not e % 3) \u5c06\u4f7f\u7528\u5706\u62ec\u53f7\u521b\u5efa\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u521b\u5efa\u5217\u8868\u63a8\u5bfc\u5f0f\u5c06\u975e\u5e38\u4f4e\u6548\uff0c\u56e0\u4e3a\u8be5\u793a\u4f8b\u5c06\u4e0d\u5fc5\u8981\u5730\u5360\u7528\u5927\u91cf\u5185\u5b58\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u751f\u6210\u5668\u8868\u8fbe\u5f0f\uff0c\u8be5\u8868\u8fbe\u5f0f\u6839\u636e\u9700\u8981\u5ef6\u8fdf\u751f\u6210\u503c\u3002 1 2 3 4 5 6 7 8 9 i = 0 for e in n: print(e) i += 1 if i > 100: raise StopIteration \u5728 for \u5faa\u73af\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u751f\u6210\u5668\u751f\u6210 100 \u4e2a\u503c\u3002 \u6211\u4eec\u8fd9\u6837\u505a\u65f6\u5e76\u6ca1\u6709\u5927\u91cf\u4f7f\u7528\u5185\u5b58\u3002 \u5728\u4e0b\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u5728 Python \u4e2d\u521b\u5efa\u7c7b\u4f3c grep \u7684\u5b9e\u7528\u7a0b\u5e8f\u3002 roman_empire.txt 1 2 3 4 5 6 7 8 9 10 11 12 13 14 The Roman Empire (Latin: Imperium R\u014dm\u0101num; Classical Latin: [\u026am\u02c8p\u025b.ri.\u0169\u02d0 ro\u02d0\u02c8ma\u02d0.n\u0169\u02d0] Koine and Medieval Greek: \u0392\u03b1\u03c3\u03b9\u03bb\u03b5\u03af\u03b1 \u03c4\u1ff6\u03bd \u1fec\u03c9\u03bc\u03b1\u03af\u03c9\u03bd, tr. Basileia t\u014dn Rh\u014dmai\u014dn) was the post-Roman Republic period of the ancient Roman civilization, characterized by government headed by emperors and large territorial holdings around the Mediterranean Sea in Europe, Africa and Asia. The city of Rome was the largest city in the world c.\u2009100 BC \u2013 c.\u2009AD 400, with Constantinople (New Rome) becoming the largest around AD 500,[5][6] and the Empire's populace grew to an estimated 50 to 90 million inhabitants (roughly 20% of the world's population at the time).[n 7][7] The 500-year-old republic which preceded it was severely destabilized in a series of civil wars and political conflict, during which Julius Caesar was appointed as perpetual dictator and then assassinated in 44 BC. Civil wars and executions continued, culminating in the victory of Octavian, Caesar's adopted son, over Mark Antony and Cleopatra at the Battle of Actium in 31 BC and the annexation of Egypt. Octavian's power was then unassailable and in 27 BC the Roman Senate formally granted him overarching power and the new title Augustus, effectively marking the end of the Roman Republic. \u6211\u4eec\u4f7f\u7528\u6b64\u6587\u672c\u6587\u4ef6\u3002 generator_expression.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env python # gen_grep.py import sys def grep(pattern, lines): return ((line, lines.index(line)+1) for line in lines if pattern in line) file_name = sys.argv[2] pattern = sys.argv[1] with open(file_name, 'r') as f: lines = f.readlines() for line, n in grep(pattern, lines): print(n, line.rstrip()) \u8be5\u793a\u4f8b\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\uff0c\u5e76\u6253\u5370\u5305\u542b\u6307\u5b9a\u6a21\u5f0f\u53ca\u5176\u884c\u53f7\u7684\u884c\u3002 1 2 def grep(pattern, lines): return ((line, lines.index(line)+1) for line in lines if pattern in line) \u7c7b\u4f3c\u4e8e grep \u7684\u5b9e\u7528\u7a0b\u5e8f\u4f7f\u7528\u6b64\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u3002 \u8be5\u8868\u8fbe\u5f0f\u904d\u5386\u884c\u5217\u8868\u5e76\u9009\u62e9\u5305\u542b\u6a21\u5f0f\u7684\u884c\u3002 \u5b83\u8ba1\u7b97\u5217\u8868\u4e2d\u8be5\u884c\u7684\u7d22\u5f15\uff0c\u5373\u5b83\u5728\u6587\u4ef6\u4e2d\u7684\u884c\u53f7\u3002 1 2 3 4 5 with open(file_name, 'r') as f: lines = f.readlines() for line, n in grep(pattern, lines): print(n, line.rstrip()) \u6211\u4eec\u6253\u5f00\u6587\u4ef6\u8fdb\u884c\u8bfb\u53d6\uff0c\u7136\u540e\u5bf9\u6570\u636e\u8c03\u7528 grep() \u51fd\u6570\u3002 \u8be5\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u751f\u6210\u5668\uff0c\u8be5\u751f\u6210\u5668\u901a\u8fc7 for \u5faa\u73af\u904d\u5386\u3002 1 2 3 4 5 $ ./gen_grep.py Roman roman_empire.txt 1 The Roman Empire (Latin: Imperium R\u014dm\u0101num; Classical Latin: [\u026am\u02c8p\u025b.ri.\u0169\u02d0 ro\u02d0\u02c8ma\u02d0.n\u0169\u02d0] 3 post-Roman Republic period of the ancient Roman civilization, characterized by government 13 then unassailable and in 27 BC the Roman Senate formally granted him overarching power and 14 the new title Augustus, effectively marking the end of the Roman Republic. \u6587\u4ef6\u4e2d\u6709\u56db\u884c\u5305\u542b\u201c\u7f57\u9a6c\u201d\u5b57\u3002","title":"Python \u751f\u6210\u5668\u8868\u8fbe\u5f0f"},{"location":"pages/python/pytutorial/python-keywords/","text":"Python \u5173\u952e\u5b57 \u00b6 Python \u5173\u952e\u5b57 \u662f\u6784\u6210 Python \u8bed\u8a00\u8bcd\u6c47\u7684\u7279\u6b8a\u5355\u8bcd\u3002 \u5b83\u662f\u4fdd\u7559\u5b57\uff0c\u4e0d\u80fd\u7528\u4f5c\u6807\u8bc6\u7b26\u3002 Python \u5173\u952e\u5b57\u5217\u8868 \u00b6 \u4ee5\u4e0b\u662f Python \u7f16\u7a0b\u8bed\u8a00\u7684\u5173\u952e\u5b57\u5217\u8868\u3002 1 2 3 4 5 6 7 8 9 False def if raise None del import return True elif in try and else is while as except lambda with assert finally nonlocal yield break for not class from or continue global pass Python \u662f\u4e00\u79cd\u52a8\u6001\u8bed\u8a00\uff0c\u5b83\u968f\u65f6\u95f4\u53d8\u5316\uff0c\u5173\u952e\u5b57\u5217\u8868\u5c06\u6765\u53ef\u80fd\u4f1a\u66f4\u6539\u3002 keywords.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python # keywords.py import sys import keyword print(\"Python version: \", sys.version_info) print(\"Python keywords: \", keyword.kwlist) \u8be5\u811a\u672c\u6253\u5370 Python \u7684\u7248\u672c\u53ca\u5176\u5b9e\u9645\u7684\u5173\u952e\u5b57\u5217\u8868\u3002 1 2 3 4 5 6 $ ./keywords.py Python version: sys.version_info(major=3, minor=5, micro=2, releaselevel='final', serial=0) Python keywords: ['False', 'None', 'True', 'and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield'] \u8f93\u51fa\u663e\u793a\u4e86 Python 3.5.2 \u7684 Python \u5173\u952e\u5b57\u5217\u8868\u3002 Python \u63a7\u5236\u6d41\u7a0b \u00b6 while \u5173\u952e\u5b57\u662f\u7528\u4e8e\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\u7684\u57fa\u672c\u5173\u952e\u5b57\u3002 \u6267\u884c while \u5faa\u73af\u5185\u7684\u8bed\u53e5\uff0c\u76f4\u5230\u8868\u8fbe\u5f0f\u7684\u503c\u4e3a False \u4e3a\u6b62\u3002 while_kwd.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python # while_kwd.py numbers = [22, 34, 12, 32, 4] mysum = 0 i = len(numbers) while i != 0: i -= 1 mysum = mysum + numbers[i] print(\"The sum is:\", mysum) \u5728\u6211\u4eec\u7684\u811a\u672c\u4e2d\uff0c\u6211\u4eec\u8981\u8ba1\u7b97\u6570\u5b57\u5217\u8868\u4e2d\u6240\u6709\u503c\u7684\u603b\u548c\u3002 \u6211\u4eec\u5229\u7528 while \u5faa\u73af\u3002 \u6211\u4eec\u786e\u5b9a\u5217\u8868\u7684\u957f\u5ea6\u3002 \u53cd\u590d\u6267\u884c while \u5faa\u73af\uff0c\u76f4\u5230 i \u7b49\u4e8e\u96f6\u4e3a\u6b62\u3002 \u5728\u5faa\u73af\u7684\u4e3b\u4f53\u4e2d\uff0c\u6211\u4eec\u9012\u51cf\u8ba1\u6570\u5668\u5e76\u8ba1\u7b97\u503c\u7684\u603b\u548c\u3002 1 2 $ ./while_kwd.py The sum is: 104 \u503c\u7684\u603b\u548c\u4e3a 104\u3002 \u5982\u679c\u9700\u8981\uff0c\u53ef\u4f7f\u7528 break \u5173\u952e\u5b57\u6765\u4e2d\u65ad\u5faa\u73af\u3002 break_kwd.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python # break_kwd.py import random while True: val = random.randint(1, 30) print(val, end=\" \") if val == 22: break print() \u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6253\u5370\u968f\u673a\u6574\u6570\u3002 \u5982\u679c\u6570\u5b57\u7b49\u4e8e 22\uff0c\u5219\u7528 break \u5173\u952e\u5b57\u4e2d\u65ad\u5faa\u73af\u3002 1 2 $ ./break_kwd.py 14 14 30 16 16 20 23 15 17 22 \u4e0b\u4e00\u4e2a\u793a\u4f8b\u663e\u793a continue \u5173\u952e\u5b57\u3002 \u5b83\u7528\u4e8e\u4e2d\u65ad\u5f53\u524d\u5468\u671f\uff0c\u800c\u4e0d\u4f1a\u8df3\u51fa\u6574\u4e2a\u5468\u671f\u3002 \u5b83\u542f\u52a8\u4e00\u4e2a\u65b0\u7684\u5faa\u73af\u3002 continue_kwd.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/env python # continue_kwd.py num = 0 while num < 1000: num = num + 1 if num % 2 == 0: continue print(num, end=\" \") \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6253\u5370\u4e86\u6240\u6709\u5c0f\u4e8e 1000 \u7684\u6570\u5b57\uff0c\u8fd9\u4e9b\u6570\u5b57\u4e0d\u80fd\u9664\u4ee5 2 \u800c\u6ca1\u6709\u4f59\u6570\u3002 if \u5173\u952e\u5b57\u662f\u5e38\u89c1\u7684\u63a7\u5236\u6d41\u5173\u952e\u5b57\u3002 \u5b83\u7528\u4e8e\u786e\u5b9a\u8981\u6267\u884c\u7684\u8bed\u53e5\u3002 if_kwd.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python # if_kwd.py age = 17 if age > 18: print(\"Driving licence issued\") else: print(\"Driving licence not permitted\") if \u5173\u952e\u5b57\u6d4b\u8bd5\u6b64\u4eba\u662f\u5426\u5927\u4e8e 18 \u5c81\u3002\u5982\u679c\u7b26\u5408\u6761\u4ef6\uff0c\u5219\u9881\u53d1\u9a7e\u9a76\u6267\u7167\u3002 else \u5173\u952e\u5b57\u662f\u53ef\u9009\u7684\u3002 \u9664\u975e\u6761\u4ef6\u4e3a True \uff0c\u5426\u5219\u6267\u884c else \u5173\u952e\u5b57\u4e4b\u540e\u7684\u8bed\u53e5\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4e86\u89e3\u5982\u4f55\u4f7f\u7528 elif \u5173\u952e\u5b57\u5408\u5e76\u8bed\u53e5\u3002 elif_kwd.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env python # elif_kwd.py name = \"Luke\" if name == \"Jack\": print(\"Hello Jack!\") elif name == \"John\": print(\"Hello John!\") elif name == \"Luke\": print(\"Hello Luke!\") else: print(\"Hello there!\") \u5982\u679c\u7b2c\u4e00\u4e2a\u6d4b\u8bd5\u7684\u8bc4\u4f30\u7ed3\u679c\u4e3a False \uff0c\u90a3\u4e48\u6211\u4eec\u7ee7\u7eed\u4e0b\u4e00\u4e2a\u6d4b\u8bd5\u3002 \u5982\u679c\u6ca1\u6709\u4e00\u4e2a\u6d4b\u8bd5\u662f True \uff0c\u5219\u6267\u884c else \u8bed\u53e5\u3002 1 2 $ ./elif_kwd.py Hello Luke! for \u5173\u952e\u5b57\u7528\u4e8e\u904d\u5386\u96c6\u5408\u4e2d\u7684\u9879\u76ee\uff0c\u4ee5\u4fbf\u5b83\u4eec\u51fa\u73b0\u5728\u5bb9\u5668\u4e2d\u3002 for_kwd.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/env python # for_kwd.py lyrics = \"\"\"\\ Are you really here or am I dreaming I can't tell dreams from truth for it's been so long since I have seen you I can hardly remember your face anymore \"\"\" for i in lyrics: print(i, end=\" \") \u5728\u8be5\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a lyrics \u53d8\u91cf\uff0c\u8be5\u53d8\u91cf\u5177\u6709\u6b4c\u66f2\u7684\u8282\u594f\u3002 \u6211\u4eec\u904d\u5386\u6587\u672c\u5e76\u9010\u4e2a\u5b57\u7b26\u6253\u5370\u6587\u672c\uff0c print \u8bed\u53e5\u4e2d\u7684\u9017\u53f7\u963b\u6b62\u5c06\u6bcf\u4e2a\u5b57\u7b26\u6253\u5370\u5728\u65b0\u884c\u4e0a\u3002 1 2 3 4 5 $ ./for_kwd.py A r e y o u r e a l l y h e r e o r a m I d r e a m i n g I c a n ' t t e l l d r e a m s f r o m t r u t h f o r i t ' s b e e n s o l o n g s i n c e I h a v e s e e n y o u I c a n h a r d l y r e m e m b e r y o u r f a c e a n y m o r e Python \u5e03\u5c14\u8868\u8fbe\u5f0f \u00b6 \u9996\u5148\uff0c\u6211\u4eec\u4ecb\u7ecd\u9002\u7528\u4e8e\u5e03\u5c14\u503c\u548c\u8868\u8fbe\u5f0f\u7684\u5173\u952e\u5b57\uff1a is \uff0c or \uff0c and \u548c not \u3002 objects.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python # objects.py print(None == None) print(None is None) print(True is True) print([] == []) print([] is []) print(\"Python\" is \"Python\") == \u8fd0\u7b97\u7b26\u6d4b\u8bd5\u662f\u5426\u76f8\u7b49\u3002 is \u5173\u952e\u5b57\u6d4b\u8bd5\u5bf9\u8c61\u8eab\u4efd\u3002 \u6211\u4eec\u662f\u5426\u5728\u8c08\u8bba\u540c\u4e00\u5bf9\u8c61\u3002 \u8bf7\u6ce8\u610f\uff0c\u591a\u4e2a\u53d8\u91cf\u53ef\u80fd\u5f15\u7528\u540c\u4e00\u5bf9\u8c61\u3002 1 2 3 4 5 6 7 $ ./objects.py True True True True False True \u8f93\u51fa\u53ef\u80fd\u4f1a\u8ba9\u60a8\u611f\u5230\u60ca\u8bb6\u3002 \u5728 Python \u8bed\u8a00\u4e2d\uff0c\u53ea\u6709\u4e00\u4e2a None \u548c\u4e00\u4e2a True \u5bf9\u8c61\u3002 \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48 True \u76f8\u7b49\u5e76\u4e14\u4e5f\u4e0e True \u76f8\u540c\u7684\u539f\u56e0\u3002 \u65e0\u8bba\u5982\u4f55\uff0c\u90a3\u91cc\u53ea\u6709\u4e00\u4e2a\u771f\u7406\u3002 \u7a7a\u5217\u8868 [] \u7b49\u4e8e\u53e6\u4e00\u4e2a\u7a7a\u5217\u8868 [] \uff1b \u4f46\u5b83\u4eec\u5e76\u4e0d\u76f8\u540c\u3002 Python \u5df2\u5c06\u5b83\u4eec\u653e\u5165\u4e24\u4e2a\u4e0d\u540c\u7684\u5185\u5b58\u4f4d\u7f6e\u3002 \u5b83\u4eec\u662f\u4e24\u4e2a\u4e0d\u540c\u7684\u5bf9\u8c61\u3002 \u56e0\u6b64\uff0cis \u5173\u952e\u5b57\u8fd4\u56de False \u3002 \u53e6\u4e00\u65b9\u9762\uff0c \"Python\" is \"Python\" \u8fd4\u56de True \u3002 \u8fd9\u662f\u7531\u4e8e\u4f18\u5316\u3002 \u5982\u679c\u4e24\u4e2a\u5b57\u7b26\u4e32\u6587\u5b57\u76f8\u7b49\uff0c\u5219\u5c06\u5b83\u4eec\u653e\u5728\u76f8\u540c\u7684\u5185\u5b58\u4f4d\u7f6e\u3002 \u5b57\u7b26\u4e32\u662f\u4e0d\u53ef\u53d8\u7684\u5b9e\u4f53\uff0c\u56e0\u6b64\u4e0d\u4f1a\u9020\u6210\u4efb\u4f55\u4f24\u5bb3\u3002 not \u5173\u952e\u5b57\u53d6\u53cd\u5e03\u5c14\u503c\u3002 not_kwd.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python # not_kwd.py grades = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"] grade = \"L\" if grade not in grades: print(\"unknown grade\") \u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6d4b\u8bd5\u4e86\u7b49\u7ea7\u503c\u662f\u5426\u6765\u81ea\u53ef\u80fd\u7b49\u7ea7\u7684\u5217\u8868\u3002 1 2 $ ./not_kwd.py unknown grade \u5982\u679c\u5fc5\u987b\u6ee1\u8db3\u5e03\u5c14\u8868\u8fbe\u5f0f\u4e2d\u7684\u6240\u6709\u6761\u4ef6\uff0c\u5219\u4f7f\u7528\u5173\u952e\u5b57 and \u3002 and_kwd.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python # and_kwd.py sex = \"M\" age = 26 if age < 55 and sex == \"M\": print(\"a young male\") \u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6d4b\u8bd5\u662f\u5426\u6ee1\u8db3\u4e24\u4e2a\u6761\u4ef6\u3002 \u5982\u679c\u53d8\u91cf age \u5c0f\u4e8e 55 \u4e14\u53d8\u91cf sex \u7b49\u4e8e \"M\" \uff0c\u5219\u5c06 \"a young male\" \u5b57\u7b26\u4e32\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 2 $ ./and_kwd.py a young male \u5982\u679c\u5fc5\u987b\u6ee1\u8db3\u81f3\u5c11\u4e00\u4e2a\u6761\u4ef6\uff0c\u5219\u4f7f\u7528\u5173\u952e\u5b57 or \u3002 or_kwd.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python # or_kwd.py name = \"Jack\" if (name == \"Robert\" or name == \"Frank\" or name == \"Jack\" or name == \"George\" or name == \"Luke\"): print(\"This is a male\") \u5982\u679c\u81f3\u5c11\u4e00\u4e2a\u8868\u8fbe\u5f0f\u4e3a true\uff0c\u5219\u6267\u884c print \u8bed\u53e5\u3002 \u5f53\u6211\u4eec\u4f7f\u7528 Python \u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u548c/\u6216\u5173\u952e\u5b57\u5de5\u4f5c\u65f6\uff0c\u5c31\u4f1a\u8fdb\u884c\u77ed\u8def\u8bc4\u4f30\u3002 \u77ed\u8def\u8bc4\u4f30\u610f\u5473\u7740\u4ec5\u5f53\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e0d\u8db3\u4ee5\u786e\u5b9a\u8868\u8fbe\u5f0f\u7684\u503c\u65f6\uff0c\u624d\u8bc4\u4f30\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff1a\u5f53\u548c\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u8bc4\u4f30\u4e3a false \u65f6\uff0c\u603b\u503c\u5fc5\u987b\u4e3a false\uff1b \u5f53\u6216\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a true \u65f6\uff0c\u603b\u503c\u5fc5\u987b\u4e3a true\u3002 \u4e00\u4e2a\u5178\u578b\u7684\u4f8b\u5b50\u5982\u4e0b\u3002 short_circuit.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python # short_circuit.py x = 10 y = 0 if (y != 0 and x/y < 100): print(\"a small value\") \u8868\u8fbe\u5f0f\u7684\u7b2c\u4e00\u90e8\u5206\u8ba1\u7b97\u4e3a false\uff0c\u8868\u8fbe\u5f0f\u7684\u7b2c\u4e8c\u90e8\u5206\u4e0d\u8ba1\u7b97\u3002 \u5426\u5219\uff0c\u6211\u4eec\u5c06\u5f97\u5230 ZeroDivisionError \u3002 Python \u6a21\u5757 \u00b6 \u4ee5\u4e0b\u5173\u952e\u5b57\u4e0e\u6a21\u5757\u4e00\u8d77\u4f7f\u7528\u3002 \u6a21\u5757\u662f\u7528\u4e8e\u7ec4\u7ec7 Python \u4ee3\u7801\u7684\u6587\u4ef6\u3002 import \u5173\u952e\u5b57\u7528\u4e8e\u5c06\u5176\u4ed6\u6a21\u5757\u5bfc\u5165 Python \u811a\u672c\u3002 import_kwd.py 1 2 3 4 5 6 7 #!/usr/bin/env python # import_kwd.py import math print(math.pi) \u6211\u4eec\u4f7f\u7528 import \u5173\u952e\u5b57\u5c06 math \u6a21\u5757\u5bfc\u5165\u811a\u672c\u7684\u540d\u79f0\u7a7a\u95f4\u3002 \u6211\u4eec\u6253\u5370 PI \u503c\u3002 \u5982\u679c\u6211\u4eec\u60f3\u7ed9\u6a21\u5757\u4e00\u4e2a\u4e0d\u540c\u7684\u522b\u540d\uff0c\u6211\u4eec\u4f7f\u7528 as \u5173\u952e\u5b57\u3002 as_kwd.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python # as_kwd.py import random as rnd for i in range(10): print (rnd.randint(1, 10), end=\" \") print() \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5c06\u5bfc\u5165\u968f\u673a\u6a21\u5757\uff0c\u6211\u4eec\u6253\u5370\u5341\u4e2a\u968f\u673a\u6574\u6570\uff0c\u6211\u4eec\u7ed9\u968f\u673a\u6a21\u5757\u4e00\u4e2a\u4e0d\u540c\u7684\u522b\u540d\uff0c\u5373 rnd \u3002 \u5728\u811a\u672c\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u65b0\u522b\u540d\u5f15\u7528\u6a21\u5757\u3002 1 2 $ ./as_kwd.py 1 2 5 10 10 8 2 9 7 2 from \u5173\u952e\u5b57\u7528\u4e8e\u4ece\u6a21\u5757\u4e2d\u5bfc\u5165\u7279\u5b9a\u7684\u53d8\u91cf\uff0c\u7c7b\u6216\u51fd\u6570\u3002 from_kwd.py 1 2 3 4 5 6 7 #!/usr/bin/env python # from_kwd.py from sys import version print(version) \u4ece sys \u6a21\u5757\u4e2d\uff0c\u5bfc\u5165 version \u53d8\u91cf\u3002 \u5982\u679c\u8981\u6253\u5370\uff0c\u5219\u4e0d\u9700\u8981\u4f7f\u7528\u6a21\u5757\u540d\u79f0\u3002 \u7248\u672c\u53d8\u91cf\u88ab\u76f4\u63a5\u5bfc\u5165\u5230\u6211\u4eec\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5f15\u7528\u5b83\u3002 1 2 $ ./from_kwd.py 3.7.0 (v3.7.0:1bf9cc5093, Jun 27 2018, 04:59:51) [MSC v.1914 64 bit (AMD64)] Python \u51fd\u6570 \u00b6 \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u63cf\u8ff0\u4e0e\u529f\u80fd\u5173\u8054\u7684\u5173\u952e\u5b57\u3002 def \u5173\u952e\u5b57\u7528\u4e8e\u521b\u5efa\u65b0\u7684\u7528\u6237\u5b9a\u4e49\u51fd\u6570\uff0c\u51fd\u6570\u662f\u6211\u4eec\u5728\u5176\u4e2d\u7ec4\u7ec7\u4ee3\u7801\u7684\u5bf9\u8c61\u3002 def_kwd.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python # def_kwd.py def root(x): return x * x a = root(2) b = root(15) print(a, b) \u8be5\u793a\u4f8b\u6f14\u793a\u4e86\u4e00\u4e2a\u65b0\u7684\u7b80\u5355\u529f\u80fd\u3002 \u8be5\u51fd\u6570\u8ba1\u7b97\u6570\u5b57\u7684\u5e73\u65b9\u3002 return \u952e\u4e0e\u529f\u80fd\u5b9a\u4e49\u7d27\u5bc6\u8054\u7cfb\uff1b \u5b83\u9000\u51fa\u51fd\u6570\u5e76\u8fd4\u56de\u4e00\u4e2a\u503c\u3002 \u7136\u540e\u5c06\u8be5\u503c\u5206\u914d\u7ed9 a \u548c b \u53d8\u91cf\u3002 lambda \u5173\u952e\u5b57\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u533f\u540d\u51fd\u6570\u3002 \u533f\u540d\u51fd\u6570\u672a\u7ed1\u5b9a\u5230\u7279\u5b9a\u540d\u79f0\u3002 lambda_kwd.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python # lambda_kwd.py a = lambda x: x * x for i in (1, 2, 3, 4, 5): print(a(i), end=\" \") print() \u5982\u60a8\u5728\u524d\u9762\u7684\u793a\u4f8b\u4e2d\u770b\u5230\u7684\uff0c\u6211\u4eec\u6ca1\u6709\u4f7f\u7528 def \u5173\u952e\u5b57\u521b\u5efa\u65b0\u51fd\u6570\u3002 \u53d6\u800c\u4ee3\u4e4b\u7684\u662f\uff0c\u6211\u4eec\u52a8\u6001\u4f7f\u7528\u5185\u8054\u51fd\u6570\u3002 1 2 $ ./lambda_kwd.py 1 4 9 16 25 \u5982\u679c\u8981\u8bbf\u95ee\u5728\u51fd\u6570\u5916\u90e8\u5b9a\u4e49\u7684\u53d8\u91cf\uff0c\u8bf7\u4f7f\u7528 global \u5173\u952e\u5b57\u3002 global_kwd.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python # global_kwd.py x = 15 def function(): global x x = 45 function() print(x) \u901a\u5e38\uff0c\u5728\u51fd\u6570\u5185\u90e8\u5206\u914d x \u53d8\u91cf\u65f6\uff0c\u6211\u4eec\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5c40\u90e8\u53d8\u91cf\uff0c\u8be5\u5c40\u90e8\u53d8\u91cf\u4ec5\u5728\u8be5\u51fd\u6570\u4e2d\u6709\u6548\u3002 \u4f46\u662f\uff0c\u5982\u679c\u4f7f\u7528 global \u5173\u952e\u5b57\uff0c\u5219\u4f1a\u5728\u51fd\u6570\u5b9a\u4e49\u4e2d\u66f4\u6539\u53d8\u91cf ouside\u3002 1 2 $ ./global_kwd.py 45 Python \u5f02\u5e38 \u00b6 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u4e0e\u5f02\u5e38\u5904\u7406\u4e00\u8d77\u4f7f\u7528\u7684\u5173\u952e\u5b57\u3002 1 2 3 4 5 6 $ cat films Fargo Aguirre, der Zorn Gottes Capote Grizzly man Notes on a scandal \u8fd9\u662f\u4e00\u4e2a\u6587\u4ef6\uff0c\u5176\u4e2d\u5305\u542b\u4e00\u4e9b\u7535\u5f71\u6807\u9898\u3002 \u5728\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u9605\u8bfb\u5b83\u3002 try_except_finally.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #!/usr/bin/env python # try_except_finally.py f = None try: f = open('films', 'r') for i in f: print(i, end=\"\") except IOError: print(\"Error reading file\") finally: if f: f.close() \u6211\u4eec\u5c1d\u8bd5\u8bfb\u53d6\u7535\u5f71\u6587\u4ef6\u3002 \u5982\u679c\u6ca1\u6709\u5f02\u5e38\uff0c\u6211\u4eec\u5c06\u6587\u4ef6\u7684\u5185\u5bb9\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 \u53ef\u80fd\u4f1a\u6709\u4f8b\u5916\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u63d0\u4f9b\u4e86\u9519\u8bef\u7684\u6587\u4ef6\u540d\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f1a\u5f15\u53d1 IOError \u5f02\u5e38\u3002 except \u5173\u952e\u5b57\u6355\u83b7\u5f02\u5e38\u5e76\u6267\u884c\u5176\u4ee3\u7801\u5757\u3002 \u6700\u540e\u59cb\u7ec8\u6267\u884c finally \u5173\u952e\u5b57\u3002 \u6211\u4eec\u7528\u5b83\u6765\u6e05\u7406\u6211\u4eec\u7684\u8d44\u6e90\u3002 \u5728\u4e0b\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u663e\u793a\u5982\u4f55\u4f7f\u7528 raise \u5173\u952e\u5b57\u521b\u5efa\u7528\u6237\u5b9a\u4e49\u7684\u5f02\u5e38\u3002 raise_kwd.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env python # raise_kwd.py class YesNoException(Exception): def __init__(self): print('This is not a yes or no answer') answer = 'y' if (answer != 'yes' and answer != 'no'): raise YesNoException else: print('Correct value') \u5728\u8be5\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4ec5\u671f\u671b\u662f/\u5426\u503c\u3002 \u5bf9\u4e8e\u5176\u4ed6\u53ef\u80fd\u6027\uff0c\u6211\u4eec\u63d0\u51fa\u4e00\u4e2a\u4f8b\u5916\u3002 1 2 3 4 5 6 $ ./raise_kwd.py This is not a yes or no answer Traceback (most recent call last): File \"./raise_kwd.py\", line 15, in <module> raise YesNoException __main__.YesNoException \u5176\u4ed6\u5173\u952e\u8bcd \u00b6 del \u5173\u952e\u5b57\u5220\u9664\u5bf9\u8c61\u3002 del_kwd.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python # del_kwd.py a = [1, 2, 3, 4] print(a) del a[:2] print(a) \u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\u56db\u4e2a\u6574\u6570\u7684\u5217\u8868\u3002 \u6211\u4eec\u4ece\u5217\u8868\u4e2d\u5220\u9664\u7b2c\u4e00\u4e2a\u6570\u5b57\u3002 \u7ed3\u679c\u5c06\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 2 3 $ ./del_kwd.py [1, 2, 3, 4] [3, 4] \u8fd9\u662f\u793a\u4f8b\u7684\u8f93\u51fa\u3002 pass \u5173\u952e\u5b57\u4e0d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u3002 \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u65b9\u4fbf\u7684\u5173\u952e\u5b57\u3002 1 2 def function(): pass \u6211\u4eec\u6709\u4e00\u4e2a\u529f\u80fd\u3002 \u6b64\u529f\u80fd\u5c1a\u672a\u5b9e\u73b0\u3002 \uff08\u5c06\u5728\u4ee5\u540e\u3002\uff09\u51fd\u6570\u7684\u4e3b\u4f53\u4e0d\u80fd\u4e3a\u7a7a\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u6b64\u5904\u4f7f\u7528 pass \u5173\u952e\u5b57\uff0c\u800c\u4e0d\u662f\u6253\u5370\u201c\u529f\u80fd\u5c1a\u672a\u5b9e\u73b0\u201d\u4e4b\u7c7b\u7684\u5185\u5bb9\u3002 assert \u5173\u952e\u5b57\u7528\u4e8e\u8c03\u8bd5\u76ee\u7684\u3002 \u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u7528\u4e8e\u5bf9\u6211\u4eec\u663e\u800c\u6613\u89c1\u7684\u6d4b\u8bd5\u6761\u4ef6\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u8ba1\u7b97\u5de5\u8d44\u7684\u7a0b\u5e8f\u3002 \u6211\u4eec\u77e5\u9053\u85aa\u6c34\u4e0d\u80fd\u5c11\u4e8e\u96f6\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u4ee3\u7801\u4e2d\u6dfb\u52a0\u8fd9\u6837\u7684\u65ad\u8a00\u3002 \u5982\u679c\u65ad\u8a00\u5931\u8d25\uff0c\u5219\u89e3\u91ca\u5668\u62b1\u6028\u3002 assert_kwd.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python # assert_kwd.py salary = 3500 salary -= 3560 # a mistake was done assert salary > 0 \u5728\u7a0b\u5e8f\u6267\u884c\u671f\u95f4\uff0c\u72af\u4e86\u4e00\u4e2a\u9519\u8bef\u3002 \u85aa\u6c34\u53d8\u6210\u8d1f\u6570\u3002 1 2 3 4 5 $ ./assert_kwd.py Traceback (most recent call last): File \"./assert_kwd.py\", line 8, in <module> assert salary > 0 AssertionError AssertionError \u65e0\u6cd5\u6267\u884c\u811a\u672c\u3002 class \u5173\u952e\u5b57\u7528\u4e8e\u521b\u5efa\u65b0\u7684\u7528\u6237\u5b9a\u4e49\u5bf9\u8c61\u3002 class_kwd.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/env python # class_kwd.py class Square: def __init__(self, x): self.a = x def area(self): print(self.a * self.a) sq = Square(12) sq.area() \u5728\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Square \u7c7b\u3002 \u7136\u540e\uff0c\u6211\u4eec\u5b9e\u4f8b\u5316\u8be5\u7c7b\u5e76\u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61\uff0c\u6211\u4eec\u8ba1\u7b97\u65b9\u5f62\u7269\u4f53\u7684\u9762\u79ef\u3002 exec \u5173\u952e\u5b57\u52a8\u6001\u6267\u884c Python \u4ee3\u7801\u3002 exec_kwd.py 1 2 3 4 5 #!/usr/bin/env python # exec_kwd.py exec(\"for i in [1, 2, 3, 4, 5]: print(i, end=' ')\") \u6211\u4eec\u4f7f\u7528 for \u5faa\u73af\u4ece\u5217\u8868\u4e2d\u6253\u5370\u4e94\u4e2a\u6570\u5b57\uff1b \u5168\u90e8\u90fd\u5728 exec \u5173\u952e\u5b57\u5185\u3002 1 2 $ ./exec_kwd.py 1 2 3 4 5 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u63d0\u5230 in \u5173\u952e\u5b57\u3002 \u5173\u952e\u5b57\u6d4b\u8bd5\u5e8f\u5217\u4e2d\u662f\u5426\u5b58\u5728\u503c\u3002 in_kwd.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python # in_kwd.py print(4 in (2, 3, 5, 6)) for i in range(25): print(i, end=\" \") print() \u5728\u6b64\u793a\u4f8b\u4e2d\uff0cin \u5173\u952e\u5b57\u6d4b\u8bd5\u6570\u5b57 4 \u662f\u5426\u5728\u5143\u7ec4\u4e2d\u3002 \u7b2c\u4e8c\u79cd\u7528\u6cd5\u662f\u5728 for \u5faa\u73af\u4e2d\u904d\u5386\u5143\u7ec4\u3002 \u5185\u7f6e\u51fd\u6570 range() \u8fd4\u56de\u6574\u6570 0 .. 24\u3002 1 2 3 $ ./in_kwd.py False 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 yield \u5173\u952e\u5b57\u4e0e\u751f\u6210\u5668\u4e00\u8d77\u4f7f\u7528\u3002 yield_kwd.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python # yield_kwd.py def gen(): x = 11 yield x it = gen() print(it.__next__()) yield \u5173\u952e\u5b57\u9000\u51fa\u751f\u6210\u5668\u5e76\u8fd4\u56de\u4e00\u4e2a\u503c\u3002 1 2 $ ./yield_kwd.py 11","title":"Python \u5173\u952e\u5b57"},{"location":"pages/python/pytutorial/python-keywords/#Python-\u5173\u952e\u5b57","text":"Python \u5173\u952e\u5b57 \u662f\u6784\u6210 Python \u8bed\u8a00\u8bcd\u6c47\u7684\u7279\u6b8a\u5355\u8bcd\u3002 \u5b83\u662f\u4fdd\u7559\u5b57\uff0c\u4e0d\u80fd\u7528\u4f5c\u6807\u8bc6\u7b26\u3002","title":"Python \u5173\u952e\u5b57"},{"location":"pages/python/pytutorial/python-keywords/#Python-\u5173\u952e\u5b57\u5217\u8868","text":"\u4ee5\u4e0b\u662f Python \u7f16\u7a0b\u8bed\u8a00\u7684\u5173\u952e\u5b57\u5217\u8868\u3002 1 2 3 4 5 6 7 8 9 False def if raise None del import return True elif in try and else is while as except lambda with assert finally nonlocal yield break for not class from or continue global pass Python \u662f\u4e00\u79cd\u52a8\u6001\u8bed\u8a00\uff0c\u5b83\u968f\u65f6\u95f4\u53d8\u5316\uff0c\u5173\u952e\u5b57\u5217\u8868\u5c06\u6765\u53ef\u80fd\u4f1a\u66f4\u6539\u3002 keywords.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python # keywords.py import sys import keyword print(\"Python version: \", sys.version_info) print(\"Python keywords: \", keyword.kwlist) \u8be5\u811a\u672c\u6253\u5370 Python \u7684\u7248\u672c\u53ca\u5176\u5b9e\u9645\u7684\u5173\u952e\u5b57\u5217\u8868\u3002 1 2 3 4 5 6 $ ./keywords.py Python version: sys.version_info(major=3, minor=5, micro=2, releaselevel='final', serial=0) Python keywords: ['False', 'None', 'True', 'and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield'] \u8f93\u51fa\u663e\u793a\u4e86 Python 3.5.2 \u7684 Python \u5173\u952e\u5b57\u5217\u8868\u3002","title":"Python \u5173\u952e\u5b57\u5217\u8868"},{"location":"pages/python/pytutorial/python-keywords/#Python-\u63a7\u5236\u6d41\u7a0b","text":"while \u5173\u952e\u5b57\u662f\u7528\u4e8e\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\u7684\u57fa\u672c\u5173\u952e\u5b57\u3002 \u6267\u884c while \u5faa\u73af\u5185\u7684\u8bed\u53e5\uff0c\u76f4\u5230\u8868\u8fbe\u5f0f\u7684\u503c\u4e3a False \u4e3a\u6b62\u3002 while_kwd.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python # while_kwd.py numbers = [22, 34, 12, 32, 4] mysum = 0 i = len(numbers) while i != 0: i -= 1 mysum = mysum + numbers[i] print(\"The sum is:\", mysum) \u5728\u6211\u4eec\u7684\u811a\u672c\u4e2d\uff0c\u6211\u4eec\u8981\u8ba1\u7b97\u6570\u5b57\u5217\u8868\u4e2d\u6240\u6709\u503c\u7684\u603b\u548c\u3002 \u6211\u4eec\u5229\u7528 while \u5faa\u73af\u3002 \u6211\u4eec\u786e\u5b9a\u5217\u8868\u7684\u957f\u5ea6\u3002 \u53cd\u590d\u6267\u884c while \u5faa\u73af\uff0c\u76f4\u5230 i \u7b49\u4e8e\u96f6\u4e3a\u6b62\u3002 \u5728\u5faa\u73af\u7684\u4e3b\u4f53\u4e2d\uff0c\u6211\u4eec\u9012\u51cf\u8ba1\u6570\u5668\u5e76\u8ba1\u7b97\u503c\u7684\u603b\u548c\u3002 1 2 $ ./while_kwd.py The sum is: 104 \u503c\u7684\u603b\u548c\u4e3a 104\u3002 \u5982\u679c\u9700\u8981\uff0c\u53ef\u4f7f\u7528 break \u5173\u952e\u5b57\u6765\u4e2d\u65ad\u5faa\u73af\u3002 break_kwd.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python # break_kwd.py import random while True: val = random.randint(1, 30) print(val, end=\" \") if val == 22: break print() \u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6253\u5370\u968f\u673a\u6574\u6570\u3002 \u5982\u679c\u6570\u5b57\u7b49\u4e8e 22\uff0c\u5219\u7528 break \u5173\u952e\u5b57\u4e2d\u65ad\u5faa\u73af\u3002 1 2 $ ./break_kwd.py 14 14 30 16 16 20 23 15 17 22 \u4e0b\u4e00\u4e2a\u793a\u4f8b\u663e\u793a continue \u5173\u952e\u5b57\u3002 \u5b83\u7528\u4e8e\u4e2d\u65ad\u5f53\u524d\u5468\u671f\uff0c\u800c\u4e0d\u4f1a\u8df3\u51fa\u6574\u4e2a\u5468\u671f\u3002 \u5b83\u542f\u52a8\u4e00\u4e2a\u65b0\u7684\u5faa\u73af\u3002 continue_kwd.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/env python # continue_kwd.py num = 0 while num < 1000: num = num + 1 if num % 2 == 0: continue print(num, end=\" \") \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6253\u5370\u4e86\u6240\u6709\u5c0f\u4e8e 1000 \u7684\u6570\u5b57\uff0c\u8fd9\u4e9b\u6570\u5b57\u4e0d\u80fd\u9664\u4ee5 2 \u800c\u6ca1\u6709\u4f59\u6570\u3002 if \u5173\u952e\u5b57\u662f\u5e38\u89c1\u7684\u63a7\u5236\u6d41\u5173\u952e\u5b57\u3002 \u5b83\u7528\u4e8e\u786e\u5b9a\u8981\u6267\u884c\u7684\u8bed\u53e5\u3002 if_kwd.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python # if_kwd.py age = 17 if age > 18: print(\"Driving licence issued\") else: print(\"Driving licence not permitted\") if \u5173\u952e\u5b57\u6d4b\u8bd5\u6b64\u4eba\u662f\u5426\u5927\u4e8e 18 \u5c81\u3002\u5982\u679c\u7b26\u5408\u6761\u4ef6\uff0c\u5219\u9881\u53d1\u9a7e\u9a76\u6267\u7167\u3002 else \u5173\u952e\u5b57\u662f\u53ef\u9009\u7684\u3002 \u9664\u975e\u6761\u4ef6\u4e3a True \uff0c\u5426\u5219\u6267\u884c else \u5173\u952e\u5b57\u4e4b\u540e\u7684\u8bed\u53e5\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4e86\u89e3\u5982\u4f55\u4f7f\u7528 elif \u5173\u952e\u5b57\u5408\u5e76\u8bed\u53e5\u3002 elif_kwd.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env python # elif_kwd.py name = \"Luke\" if name == \"Jack\": print(\"Hello Jack!\") elif name == \"John\": print(\"Hello John!\") elif name == \"Luke\": print(\"Hello Luke!\") else: print(\"Hello there!\") \u5982\u679c\u7b2c\u4e00\u4e2a\u6d4b\u8bd5\u7684\u8bc4\u4f30\u7ed3\u679c\u4e3a False \uff0c\u90a3\u4e48\u6211\u4eec\u7ee7\u7eed\u4e0b\u4e00\u4e2a\u6d4b\u8bd5\u3002 \u5982\u679c\u6ca1\u6709\u4e00\u4e2a\u6d4b\u8bd5\u662f True \uff0c\u5219\u6267\u884c else \u8bed\u53e5\u3002 1 2 $ ./elif_kwd.py Hello Luke! for \u5173\u952e\u5b57\u7528\u4e8e\u904d\u5386\u96c6\u5408\u4e2d\u7684\u9879\u76ee\uff0c\u4ee5\u4fbf\u5b83\u4eec\u51fa\u73b0\u5728\u5bb9\u5668\u4e2d\u3002 for_kwd.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/env python # for_kwd.py lyrics = \"\"\"\\ Are you really here or am I dreaming I can't tell dreams from truth for it's been so long since I have seen you I can hardly remember your face anymore \"\"\" for i in lyrics: print(i, end=\" \") \u5728\u8be5\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a lyrics \u53d8\u91cf\uff0c\u8be5\u53d8\u91cf\u5177\u6709\u6b4c\u66f2\u7684\u8282\u594f\u3002 \u6211\u4eec\u904d\u5386\u6587\u672c\u5e76\u9010\u4e2a\u5b57\u7b26\u6253\u5370\u6587\u672c\uff0c print \u8bed\u53e5\u4e2d\u7684\u9017\u53f7\u963b\u6b62\u5c06\u6bcf\u4e2a\u5b57\u7b26\u6253\u5370\u5728\u65b0\u884c\u4e0a\u3002 1 2 3 4 5 $ ./for_kwd.py A r e y o u r e a l l y h e r e o r a m I d r e a m i n g I c a n ' t t e l l d r e a m s f r o m t r u t h f o r i t ' s b e e n s o l o n g s i n c e I h a v e s e e n y o u I c a n h a r d l y r e m e m b e r y o u r f a c e a n y m o r e","title":"Python \u63a7\u5236\u6d41\u7a0b"},{"location":"pages/python/pytutorial/python-keywords/#Python-\u5e03\u5c14\u8868\u8fbe\u5f0f","text":"\u9996\u5148\uff0c\u6211\u4eec\u4ecb\u7ecd\u9002\u7528\u4e8e\u5e03\u5c14\u503c\u548c\u8868\u8fbe\u5f0f\u7684\u5173\u952e\u5b57\uff1a is \uff0c or \uff0c and \u548c not \u3002 objects.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python # objects.py print(None == None) print(None is None) print(True is True) print([] == []) print([] is []) print(\"Python\" is \"Python\") == \u8fd0\u7b97\u7b26\u6d4b\u8bd5\u662f\u5426\u76f8\u7b49\u3002 is \u5173\u952e\u5b57\u6d4b\u8bd5\u5bf9\u8c61\u8eab\u4efd\u3002 \u6211\u4eec\u662f\u5426\u5728\u8c08\u8bba\u540c\u4e00\u5bf9\u8c61\u3002 \u8bf7\u6ce8\u610f\uff0c\u591a\u4e2a\u53d8\u91cf\u53ef\u80fd\u5f15\u7528\u540c\u4e00\u5bf9\u8c61\u3002 1 2 3 4 5 6 7 $ ./objects.py True True True True False True \u8f93\u51fa\u53ef\u80fd\u4f1a\u8ba9\u60a8\u611f\u5230\u60ca\u8bb6\u3002 \u5728 Python \u8bed\u8a00\u4e2d\uff0c\u53ea\u6709\u4e00\u4e2a None \u548c\u4e00\u4e2a True \u5bf9\u8c61\u3002 \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48 True \u76f8\u7b49\u5e76\u4e14\u4e5f\u4e0e True \u76f8\u540c\u7684\u539f\u56e0\u3002 \u65e0\u8bba\u5982\u4f55\uff0c\u90a3\u91cc\u53ea\u6709\u4e00\u4e2a\u771f\u7406\u3002 \u7a7a\u5217\u8868 [] \u7b49\u4e8e\u53e6\u4e00\u4e2a\u7a7a\u5217\u8868 [] \uff1b \u4f46\u5b83\u4eec\u5e76\u4e0d\u76f8\u540c\u3002 Python \u5df2\u5c06\u5b83\u4eec\u653e\u5165\u4e24\u4e2a\u4e0d\u540c\u7684\u5185\u5b58\u4f4d\u7f6e\u3002 \u5b83\u4eec\u662f\u4e24\u4e2a\u4e0d\u540c\u7684\u5bf9\u8c61\u3002 \u56e0\u6b64\uff0cis \u5173\u952e\u5b57\u8fd4\u56de False \u3002 \u53e6\u4e00\u65b9\u9762\uff0c \"Python\" is \"Python\" \u8fd4\u56de True \u3002 \u8fd9\u662f\u7531\u4e8e\u4f18\u5316\u3002 \u5982\u679c\u4e24\u4e2a\u5b57\u7b26\u4e32\u6587\u5b57\u76f8\u7b49\uff0c\u5219\u5c06\u5b83\u4eec\u653e\u5728\u76f8\u540c\u7684\u5185\u5b58\u4f4d\u7f6e\u3002 \u5b57\u7b26\u4e32\u662f\u4e0d\u53ef\u53d8\u7684\u5b9e\u4f53\uff0c\u56e0\u6b64\u4e0d\u4f1a\u9020\u6210\u4efb\u4f55\u4f24\u5bb3\u3002 not \u5173\u952e\u5b57\u53d6\u53cd\u5e03\u5c14\u503c\u3002 not_kwd.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python # not_kwd.py grades = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"] grade = \"L\" if grade not in grades: print(\"unknown grade\") \u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6d4b\u8bd5\u4e86\u7b49\u7ea7\u503c\u662f\u5426\u6765\u81ea\u53ef\u80fd\u7b49\u7ea7\u7684\u5217\u8868\u3002 1 2 $ ./not_kwd.py unknown grade \u5982\u679c\u5fc5\u987b\u6ee1\u8db3\u5e03\u5c14\u8868\u8fbe\u5f0f\u4e2d\u7684\u6240\u6709\u6761\u4ef6\uff0c\u5219\u4f7f\u7528\u5173\u952e\u5b57 and \u3002 and_kwd.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python # and_kwd.py sex = \"M\" age = 26 if age < 55 and sex == \"M\": print(\"a young male\") \u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6d4b\u8bd5\u662f\u5426\u6ee1\u8db3\u4e24\u4e2a\u6761\u4ef6\u3002 \u5982\u679c\u53d8\u91cf age \u5c0f\u4e8e 55 \u4e14\u53d8\u91cf sex \u7b49\u4e8e \"M\" \uff0c\u5219\u5c06 \"a young male\" \u5b57\u7b26\u4e32\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 2 $ ./and_kwd.py a young male \u5982\u679c\u5fc5\u987b\u6ee1\u8db3\u81f3\u5c11\u4e00\u4e2a\u6761\u4ef6\uff0c\u5219\u4f7f\u7528\u5173\u952e\u5b57 or \u3002 or_kwd.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python # or_kwd.py name = \"Jack\" if (name == \"Robert\" or name == \"Frank\" or name == \"Jack\" or name == \"George\" or name == \"Luke\"): print(\"This is a male\") \u5982\u679c\u81f3\u5c11\u4e00\u4e2a\u8868\u8fbe\u5f0f\u4e3a true\uff0c\u5219\u6267\u884c print \u8bed\u53e5\u3002 \u5f53\u6211\u4eec\u4f7f\u7528 Python \u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u548c/\u6216\u5173\u952e\u5b57\u5de5\u4f5c\u65f6\uff0c\u5c31\u4f1a\u8fdb\u884c\u77ed\u8def\u8bc4\u4f30\u3002 \u77ed\u8def\u8bc4\u4f30\u610f\u5473\u7740\u4ec5\u5f53\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e0d\u8db3\u4ee5\u786e\u5b9a\u8868\u8fbe\u5f0f\u7684\u503c\u65f6\uff0c\u624d\u8bc4\u4f30\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff1a\u5f53\u548c\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u8bc4\u4f30\u4e3a false \u65f6\uff0c\u603b\u503c\u5fc5\u987b\u4e3a false\uff1b \u5f53\u6216\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a true \u65f6\uff0c\u603b\u503c\u5fc5\u987b\u4e3a true\u3002 \u4e00\u4e2a\u5178\u578b\u7684\u4f8b\u5b50\u5982\u4e0b\u3002 short_circuit.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python # short_circuit.py x = 10 y = 0 if (y != 0 and x/y < 100): print(\"a small value\") \u8868\u8fbe\u5f0f\u7684\u7b2c\u4e00\u90e8\u5206\u8ba1\u7b97\u4e3a false\uff0c\u8868\u8fbe\u5f0f\u7684\u7b2c\u4e8c\u90e8\u5206\u4e0d\u8ba1\u7b97\u3002 \u5426\u5219\uff0c\u6211\u4eec\u5c06\u5f97\u5230 ZeroDivisionError \u3002","title":"Python \u5e03\u5c14\u8868\u8fbe\u5f0f"},{"location":"pages/python/pytutorial/python-keywords/#Python-\u6a21\u5757","text":"\u4ee5\u4e0b\u5173\u952e\u5b57\u4e0e\u6a21\u5757\u4e00\u8d77\u4f7f\u7528\u3002 \u6a21\u5757\u662f\u7528\u4e8e\u7ec4\u7ec7 Python \u4ee3\u7801\u7684\u6587\u4ef6\u3002 import \u5173\u952e\u5b57\u7528\u4e8e\u5c06\u5176\u4ed6\u6a21\u5757\u5bfc\u5165 Python \u811a\u672c\u3002 import_kwd.py 1 2 3 4 5 6 7 #!/usr/bin/env python # import_kwd.py import math print(math.pi) \u6211\u4eec\u4f7f\u7528 import \u5173\u952e\u5b57\u5c06 math \u6a21\u5757\u5bfc\u5165\u811a\u672c\u7684\u540d\u79f0\u7a7a\u95f4\u3002 \u6211\u4eec\u6253\u5370 PI \u503c\u3002 \u5982\u679c\u6211\u4eec\u60f3\u7ed9\u6a21\u5757\u4e00\u4e2a\u4e0d\u540c\u7684\u522b\u540d\uff0c\u6211\u4eec\u4f7f\u7528 as \u5173\u952e\u5b57\u3002 as_kwd.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python # as_kwd.py import random as rnd for i in range(10): print (rnd.randint(1, 10), end=\" \") print() \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5c06\u5bfc\u5165\u968f\u673a\u6a21\u5757\uff0c\u6211\u4eec\u6253\u5370\u5341\u4e2a\u968f\u673a\u6574\u6570\uff0c\u6211\u4eec\u7ed9\u968f\u673a\u6a21\u5757\u4e00\u4e2a\u4e0d\u540c\u7684\u522b\u540d\uff0c\u5373 rnd \u3002 \u5728\u811a\u672c\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u65b0\u522b\u540d\u5f15\u7528\u6a21\u5757\u3002 1 2 $ ./as_kwd.py 1 2 5 10 10 8 2 9 7 2 from \u5173\u952e\u5b57\u7528\u4e8e\u4ece\u6a21\u5757\u4e2d\u5bfc\u5165\u7279\u5b9a\u7684\u53d8\u91cf\uff0c\u7c7b\u6216\u51fd\u6570\u3002 from_kwd.py 1 2 3 4 5 6 7 #!/usr/bin/env python # from_kwd.py from sys import version print(version) \u4ece sys \u6a21\u5757\u4e2d\uff0c\u5bfc\u5165 version \u53d8\u91cf\u3002 \u5982\u679c\u8981\u6253\u5370\uff0c\u5219\u4e0d\u9700\u8981\u4f7f\u7528\u6a21\u5757\u540d\u79f0\u3002 \u7248\u672c\u53d8\u91cf\u88ab\u76f4\u63a5\u5bfc\u5165\u5230\u6211\u4eec\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5f15\u7528\u5b83\u3002 1 2 $ ./from_kwd.py 3.7.0 (v3.7.0:1bf9cc5093, Jun 27 2018, 04:59:51) [MSC v.1914 64 bit (AMD64)]","title":"Python \u6a21\u5757"},{"location":"pages/python/pytutorial/python-keywords/#Python-\u51fd\u6570","text":"\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u63cf\u8ff0\u4e0e\u529f\u80fd\u5173\u8054\u7684\u5173\u952e\u5b57\u3002 def \u5173\u952e\u5b57\u7528\u4e8e\u521b\u5efa\u65b0\u7684\u7528\u6237\u5b9a\u4e49\u51fd\u6570\uff0c\u51fd\u6570\u662f\u6211\u4eec\u5728\u5176\u4e2d\u7ec4\u7ec7\u4ee3\u7801\u7684\u5bf9\u8c61\u3002 def_kwd.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python # def_kwd.py def root(x): return x * x a = root(2) b = root(15) print(a, b) \u8be5\u793a\u4f8b\u6f14\u793a\u4e86\u4e00\u4e2a\u65b0\u7684\u7b80\u5355\u529f\u80fd\u3002 \u8be5\u51fd\u6570\u8ba1\u7b97\u6570\u5b57\u7684\u5e73\u65b9\u3002 return \u952e\u4e0e\u529f\u80fd\u5b9a\u4e49\u7d27\u5bc6\u8054\u7cfb\uff1b \u5b83\u9000\u51fa\u51fd\u6570\u5e76\u8fd4\u56de\u4e00\u4e2a\u503c\u3002 \u7136\u540e\u5c06\u8be5\u503c\u5206\u914d\u7ed9 a \u548c b \u53d8\u91cf\u3002 lambda \u5173\u952e\u5b57\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u533f\u540d\u51fd\u6570\u3002 \u533f\u540d\u51fd\u6570\u672a\u7ed1\u5b9a\u5230\u7279\u5b9a\u540d\u79f0\u3002 lambda_kwd.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python # lambda_kwd.py a = lambda x: x * x for i in (1, 2, 3, 4, 5): print(a(i), end=\" \") print() \u5982\u60a8\u5728\u524d\u9762\u7684\u793a\u4f8b\u4e2d\u770b\u5230\u7684\uff0c\u6211\u4eec\u6ca1\u6709\u4f7f\u7528 def \u5173\u952e\u5b57\u521b\u5efa\u65b0\u51fd\u6570\u3002 \u53d6\u800c\u4ee3\u4e4b\u7684\u662f\uff0c\u6211\u4eec\u52a8\u6001\u4f7f\u7528\u5185\u8054\u51fd\u6570\u3002 1 2 $ ./lambda_kwd.py 1 4 9 16 25 \u5982\u679c\u8981\u8bbf\u95ee\u5728\u51fd\u6570\u5916\u90e8\u5b9a\u4e49\u7684\u53d8\u91cf\uff0c\u8bf7\u4f7f\u7528 global \u5173\u952e\u5b57\u3002 global_kwd.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python # global_kwd.py x = 15 def function(): global x x = 45 function() print(x) \u901a\u5e38\uff0c\u5728\u51fd\u6570\u5185\u90e8\u5206\u914d x \u53d8\u91cf\u65f6\uff0c\u6211\u4eec\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5c40\u90e8\u53d8\u91cf\uff0c\u8be5\u5c40\u90e8\u53d8\u91cf\u4ec5\u5728\u8be5\u51fd\u6570\u4e2d\u6709\u6548\u3002 \u4f46\u662f\uff0c\u5982\u679c\u4f7f\u7528 global \u5173\u952e\u5b57\uff0c\u5219\u4f1a\u5728\u51fd\u6570\u5b9a\u4e49\u4e2d\u66f4\u6539\u53d8\u91cf ouside\u3002 1 2 $ ./global_kwd.py 45","title":"Python \u51fd\u6570"},{"location":"pages/python/pytutorial/python-keywords/#Python-\u5f02\u5e38","text":"\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u4e0e\u5f02\u5e38\u5904\u7406\u4e00\u8d77\u4f7f\u7528\u7684\u5173\u952e\u5b57\u3002 1 2 3 4 5 6 $ cat films Fargo Aguirre, der Zorn Gottes Capote Grizzly man Notes on a scandal \u8fd9\u662f\u4e00\u4e2a\u6587\u4ef6\uff0c\u5176\u4e2d\u5305\u542b\u4e00\u4e9b\u7535\u5f71\u6807\u9898\u3002 \u5728\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u9605\u8bfb\u5b83\u3002 try_except_finally.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #!/usr/bin/env python # try_except_finally.py f = None try: f = open('films', 'r') for i in f: print(i, end=\"\") except IOError: print(\"Error reading file\") finally: if f: f.close() \u6211\u4eec\u5c1d\u8bd5\u8bfb\u53d6\u7535\u5f71\u6587\u4ef6\u3002 \u5982\u679c\u6ca1\u6709\u5f02\u5e38\uff0c\u6211\u4eec\u5c06\u6587\u4ef6\u7684\u5185\u5bb9\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 \u53ef\u80fd\u4f1a\u6709\u4f8b\u5916\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u63d0\u4f9b\u4e86\u9519\u8bef\u7684\u6587\u4ef6\u540d\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f1a\u5f15\u53d1 IOError \u5f02\u5e38\u3002 except \u5173\u952e\u5b57\u6355\u83b7\u5f02\u5e38\u5e76\u6267\u884c\u5176\u4ee3\u7801\u5757\u3002 \u6700\u540e\u59cb\u7ec8\u6267\u884c finally \u5173\u952e\u5b57\u3002 \u6211\u4eec\u7528\u5b83\u6765\u6e05\u7406\u6211\u4eec\u7684\u8d44\u6e90\u3002 \u5728\u4e0b\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u663e\u793a\u5982\u4f55\u4f7f\u7528 raise \u5173\u952e\u5b57\u521b\u5efa\u7528\u6237\u5b9a\u4e49\u7684\u5f02\u5e38\u3002 raise_kwd.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env python # raise_kwd.py class YesNoException(Exception): def __init__(self): print('This is not a yes or no answer') answer = 'y' if (answer != 'yes' and answer != 'no'): raise YesNoException else: print('Correct value') \u5728\u8be5\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4ec5\u671f\u671b\u662f/\u5426\u503c\u3002 \u5bf9\u4e8e\u5176\u4ed6\u53ef\u80fd\u6027\uff0c\u6211\u4eec\u63d0\u51fa\u4e00\u4e2a\u4f8b\u5916\u3002 1 2 3 4 5 6 $ ./raise_kwd.py This is not a yes or no answer Traceback (most recent call last): File \"./raise_kwd.py\", line 15, in <module> raise YesNoException __main__.YesNoException","title":"Python \u5f02\u5e38"},{"location":"pages/python/pytutorial/python-keywords/#\u5176\u4ed6\u5173\u952e\u8bcd","text":"del \u5173\u952e\u5b57\u5220\u9664\u5bf9\u8c61\u3002 del_kwd.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python # del_kwd.py a = [1, 2, 3, 4] print(a) del a[:2] print(a) \u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\u56db\u4e2a\u6574\u6570\u7684\u5217\u8868\u3002 \u6211\u4eec\u4ece\u5217\u8868\u4e2d\u5220\u9664\u7b2c\u4e00\u4e2a\u6570\u5b57\u3002 \u7ed3\u679c\u5c06\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 2 3 $ ./del_kwd.py [1, 2, 3, 4] [3, 4] \u8fd9\u662f\u793a\u4f8b\u7684\u8f93\u51fa\u3002 pass \u5173\u952e\u5b57\u4e0d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u3002 \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u65b9\u4fbf\u7684\u5173\u952e\u5b57\u3002 1 2 def function(): pass \u6211\u4eec\u6709\u4e00\u4e2a\u529f\u80fd\u3002 \u6b64\u529f\u80fd\u5c1a\u672a\u5b9e\u73b0\u3002 \uff08\u5c06\u5728\u4ee5\u540e\u3002\uff09\u51fd\u6570\u7684\u4e3b\u4f53\u4e0d\u80fd\u4e3a\u7a7a\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u6b64\u5904\u4f7f\u7528 pass \u5173\u952e\u5b57\uff0c\u800c\u4e0d\u662f\u6253\u5370\u201c\u529f\u80fd\u5c1a\u672a\u5b9e\u73b0\u201d\u4e4b\u7c7b\u7684\u5185\u5bb9\u3002 assert \u5173\u952e\u5b57\u7528\u4e8e\u8c03\u8bd5\u76ee\u7684\u3002 \u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u7528\u4e8e\u5bf9\u6211\u4eec\u663e\u800c\u6613\u89c1\u7684\u6d4b\u8bd5\u6761\u4ef6\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u8ba1\u7b97\u5de5\u8d44\u7684\u7a0b\u5e8f\u3002 \u6211\u4eec\u77e5\u9053\u85aa\u6c34\u4e0d\u80fd\u5c11\u4e8e\u96f6\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u4ee3\u7801\u4e2d\u6dfb\u52a0\u8fd9\u6837\u7684\u65ad\u8a00\u3002 \u5982\u679c\u65ad\u8a00\u5931\u8d25\uff0c\u5219\u89e3\u91ca\u5668\u62b1\u6028\u3002 assert_kwd.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python # assert_kwd.py salary = 3500 salary -= 3560 # a mistake was done assert salary > 0 \u5728\u7a0b\u5e8f\u6267\u884c\u671f\u95f4\uff0c\u72af\u4e86\u4e00\u4e2a\u9519\u8bef\u3002 \u85aa\u6c34\u53d8\u6210\u8d1f\u6570\u3002 1 2 3 4 5 $ ./assert_kwd.py Traceback (most recent call last): File \"./assert_kwd.py\", line 8, in <module> assert salary > 0 AssertionError AssertionError \u65e0\u6cd5\u6267\u884c\u811a\u672c\u3002 class \u5173\u952e\u5b57\u7528\u4e8e\u521b\u5efa\u65b0\u7684\u7528\u6237\u5b9a\u4e49\u5bf9\u8c61\u3002 class_kwd.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/env python # class_kwd.py class Square: def __init__(self, x): self.a = x def area(self): print(self.a * self.a) sq = Square(12) sq.area() \u5728\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Square \u7c7b\u3002 \u7136\u540e\uff0c\u6211\u4eec\u5b9e\u4f8b\u5316\u8be5\u7c7b\u5e76\u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61\uff0c\u6211\u4eec\u8ba1\u7b97\u65b9\u5f62\u7269\u4f53\u7684\u9762\u79ef\u3002 exec \u5173\u952e\u5b57\u52a8\u6001\u6267\u884c Python \u4ee3\u7801\u3002 exec_kwd.py 1 2 3 4 5 #!/usr/bin/env python # exec_kwd.py exec(\"for i in [1, 2, 3, 4, 5]: print(i, end=' ')\") \u6211\u4eec\u4f7f\u7528 for \u5faa\u73af\u4ece\u5217\u8868\u4e2d\u6253\u5370\u4e94\u4e2a\u6570\u5b57\uff1b \u5168\u90e8\u90fd\u5728 exec \u5173\u952e\u5b57\u5185\u3002 1 2 $ ./exec_kwd.py 1 2 3 4 5 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u63d0\u5230 in \u5173\u952e\u5b57\u3002 \u5173\u952e\u5b57\u6d4b\u8bd5\u5e8f\u5217\u4e2d\u662f\u5426\u5b58\u5728\u503c\u3002 in_kwd.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python # in_kwd.py print(4 in (2, 3, 5, 6)) for i in range(25): print(i, end=\" \") print() \u5728\u6b64\u793a\u4f8b\u4e2d\uff0cin \u5173\u952e\u5b57\u6d4b\u8bd5\u6570\u5b57 4 \u662f\u5426\u5728\u5143\u7ec4\u4e2d\u3002 \u7b2c\u4e8c\u79cd\u7528\u6cd5\u662f\u5728 for \u5faa\u73af\u4e2d\u904d\u5386\u5143\u7ec4\u3002 \u5185\u7f6e\u51fd\u6570 range() \u8fd4\u56de\u6574\u6570 0 .. 24\u3002 1 2 3 $ ./in_kwd.py False 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 yield \u5173\u952e\u5b57\u4e0e\u751f\u6210\u5668\u4e00\u8d77\u4f7f\u7528\u3002 yield_kwd.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python # yield_kwd.py def gen(): x = 11 yield x it = gen() print(it.__next__()) yield \u5173\u952e\u5b57\u9000\u51fa\u751f\u6210\u5668\u5e76\u8fd4\u56de\u4e00\u4e2a\u503c\u3002 1 2 $ ./yield_kwd.py 11","title":"\u5176\u4ed6\u5173\u952e\u8bcd"},{"location":"pages/python/pytutorial/python-lambda/","text":"Python Lambda \u51fd\u6570 \u00b6 Python lambda \u51fd\u6570 \u6559\u7a0b\u5c55\u793a\u4e86\u5982\u4f55\u5728 Python \u4e2d\u521b\u5efa\u533f\u540d\u51fd\u6570\u3002 Python \u4e2d\u7684\u533f\u540d\u51fd\u6570\u662f\u4f7f\u7528 lambda \u5173\u952e\u5b57\u521b\u5efa\u7684\u3002 Python Lambda \u51fd\u6570 \u00b6 Python lambda \u51fd\u6570\uff08\u4e5f\u79f0\u4e3a\u533f\u540d\u51fd\u6570\uff09\u662f\u6ca1\u6709\u540d\u79f0\u7684\u5185\u8054\u51fd\u6570\u3002 \u5b83\u4eec\u662f\u4f7f\u7528 lambda \u5173\u952e\u5b57\u521b\u5efa\u7684\u3002 \u8fd9\u662f\u5185\u7f6e Python \u7684\u529f\u80fd\u793a\u4f8b\u7684\u4e00\u90e8\u5206\u3002 Python lambda \u51fd\u6570\u4ec5\u9650\u4e8e\u5355\u4e2a\u8868\u8fbe\u5f0f\u3002 \u5b83\u4eec\u53ef\u4ee5\u5728\u53ef\u4ee5\u4f7f\u7528\u5e38\u89c4\u529f\u80fd\u7684\u4efb\u4f55\u5730\u65b9\u4f7f\u7528\u3002 Python Lambda \u8bed\u6cd5 \u00b6 Python lambda \u5177\u6709\u4ee5\u4e0b\u8bed\u6cd5\uff1a 1 z = lambda x: x * y \u8be5\u8bed\u53e5\u4f7f\u7528 lambda \u5173\u952e\u5b57\u521b\u5efa\u4e00\u4e2a\u533f\u540d\u51fd\u6570\u3002 \u8be5\u51fd\u6570\u5c06\u4e24\u4e2a\u503c\u76f8\u4e58\u3002 x \u662f\u4f20\u9012\u7ed9 lambda \u51fd\u6570\u7684\u53c2\u6570\u3002 \u53c2\u6570\u540e\u8ddf\u4e00\u4e2a\u5192\u53f7\u3002 \u5192\u53f7\u65c1\u8fb9\u7684\u4ee3\u7801\u662f\u8c03\u7528 lambda \u51fd\u6570\u65f6\u6267\u884c\u7684\u8868\u8fbe\u5f0f\u3002 lambda \u51fd\u6570\u5206\u914d\u7ed9 z \u53d8\u91cf\u3002 Python Lambda \u793a\u4f8b \u00b6 \u4ee5\u4e0b\u662f\u6f14\u793a Python lambda \u51fd\u6570\u7684\u7b80\u5355\u793a\u4f8b\u3002 lambda_fun_simple.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/python3 def square(x): return x * x sqr_fun = lambda x: x * x print(square(3)) print(sqr_fun(4)) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\u4e24\u4e2a\u51fd\u6570\u5bf9\u4e00\u4e2a\u503c\u6c42\u5e73\u65b9\u3002 1 2 3 def square(x): return x * x \u8fd9\u662f\u7528 def \u5173\u952e\u5b57\u5b9a\u4e49\u7684 Python \u51fd\u6570\u3002 \u8be5\u51fd\u6570\u7684\u540d\u79f0\u4e3a square \u3002 1 sqr_fun = lambda x: x * x \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4f7f\u7528 lambda \u5b9a\u4e49\u4e86\u4e00\u4e2a\u533f\u540d\u7684\u5185\u8054\u51fd\u6570\u3002 \u8bf7\u6ce8\u610f\uff0c\u8be5\u51fd\u6570\u6ca1\u6709\u540d\u79f0\u3002 sqr_fun \u662f\u4fdd\u5b58\u5df2\u521b\u5efa\u7684 lambda \u51fd\u6570\u7684\u53d8\u91cf\u7684\u540d\u79f0\u3002 1 2 3 ./lambda_fun_simple.py 9 16 \u8fd9\u662f\u793a\u4f8b\u7684\u8f93\u51fa\u3002 Python Lambda \u548c map \u00b6 Python lambda \u51fd\u6570\u53ef\u7528\u4e8e map() \u51fd\u6570\u3002 \u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u66f4\u7b80\u6d01\u7684\u4ee3\u7801\u3002 Python map() \u662f\u4e00\u4e2a\u5185\u7f6e\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u5c06\u7ed9\u5b9a\u51fd\u6570\u5e94\u7528\u4e8e iterable \u7684\u6bcf\u4e00\u9879\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\u5bf9\u8c61\u3002 lambda_fun_map.py 1 2 3 4 5 6 7 8 #!/usr/bin/python3 nums = [1, 2, 3, 4, 5, 6] nums_squared = map(lambda x: x * x, nums) for num in nums_squared: print(num) \u8be5\u793a\u4f8b\u4e3a map() \u521b\u5efa\u4e00\u4e2a litle \u5185\u8054\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u3002 \u4f7f\u7528 map() \u51fd\u6570\uff0c\u6211\u4eec\u5c06 lambda \u51fd\u6570\u5e94\u7528\u4e8e\u5217\u8868\u7684\u6bcf\u4e2a\u5143\u7d20\u3002 1 2 3 4 5 6 7 $ ./lambda_fun_map.py 1 4 9 16 25 36 \u8fd9\u662f\u8f93\u51fa\u3002 Python lambda \u548c filter \u00b6 Python lambda \u51fd\u6570\u53ef\u4ee5\u4e0e filter() \u51fd\u6570\u4e00\u8d77\u4f7f\u7528\u3002 filter() \u51fd\u6570\u6839\u636e\u53ef\u8fed\u4ee3\u7684\u90a3\u4e9b\u5143\u7d20\u6784\u9020\u4e00\u4e2a\u5217\u8868\uff0c\u8fd9\u4e9b\u5143\u7d20\u4e3a\u5176\u8fd4\u56de true\u3002 lambda_fun_filter.py 1 2 3 4 5 6 7 #!/usr/bin/python3 nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] nums_filtered = list(filter(lambda x: x % 2, nums)) print(nums_filtered) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u8fc7\u6ee4\u4e86\u6574\u6570\u5217\u8868\u3002 \u65b0\u5217\u8868\u4ec5\u5305\u542b\u5947\u6570\u6574\u6570\u3002 1 nums_filtered = list(filter(lambda x: x % 2, nums)) filter() \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u5904\u7406\u5217\u8868\u5143\u7d20\u7684\u51fd\u6570\u3002 lambda \u51fd\u6570\u5177\u6709 x % 2 \u8868\u8fbe\u5f0f\uff0c\u5bf9\u4e8e\u5947\u6570\u503c\u8fd4\u56de true\u3002 1 2 $ ./lambda_fun_filter.py [1, 3, 5, 7, 9, 11] \u8fd9\u662f\u8f93\u51fa\u3002 Python Lambda \u548c Tkinter \u00b6 Python lambda \u51fd\u6570\u53ef\u7528\u4e8e Tkinter \u7684 GUI \u7f16\u7a0b\u4e2d\u3002 \u5b83\u5141\u8bb8\u4e3a command \u53c2\u6570\u521b\u5efa\u5c0f\u7684\u5185\u8054\u51fd\u6570\u3002 lambda_tkinter.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 #!/usr/bin/python3 # -*- coding: utf-8 -*- from tkinter import Tk, BOTH, messagebox from tkinter.ttk import Frame, Button class Example(Frame): def __init__(self, parent): Frame.__init__(self, parent) self.parent = parent self.initUI() def initUI(self): self.parent.title(\"Buttons\") self.pack(fill=BOTH, expand=1) btn1 = Button(self, text=\"Button 1\", command=lambda: self.onClick(\"Button 1\")) btn1.pack(padx=5, pady=5) btn2 = Button(self, text=\"Button 2\", command=lambda: self.onClick(\"Button 2\")) btn2.pack(padx=5, pady=5) btn2 = Button(self, text=\"Button 3\", command=lambda: self.onClick(\"Button 3\")) btn2.pack(padx=5, pady=5) def onClick(self, text): messagebox.showinfo(\"Button label\", text); def main(): root = Tk() root.geometry(\"250x150+300+300\") app = Example(root) root.mainloop() if __name__ == '__main__': main() \u6211\u4eec\u6709\u4e09\u4e2a\u6309\u94ae\u5171\u4eab\u4e00\u4e2a\u56de\u8c03\u3002 lambda \u51fd\u6570\u5141\u8bb8\u6211\u4eec\u5c06\u7279\u5b9a\u6570\u636e\u53d1\u9001\u5230\u56de\u8c03\u51fd\u6570\u3002 \u6bcf\u4e2a\u6309\u94ae\u5728\u6d88\u606f\u6846\u4e2d\u663e\u793a\u5176\u6807\u7b7e\u3002 1 2 btn1 = Button(self, text=\"Button 1\", command=lambda: self.onClick(\"Button 1\")) \u6211\u4eec\u5c06\u533f\u540d\u51fd\u6570\u4f20\u9012\u7ed9 command \u53c2\u6570\u3002 \u6211\u4eec\u5c06\u6309\u94ae\u7684\u6807\u7b7e\u53d1\u9001\u5230 onClick() \u56de\u8c03\u3002 \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 Python lambda \u51fd\u6570\u3002","title":"Python Lambda \u51fd\u6570"},{"location":"pages/python/pytutorial/python-lambda/#Python-Lambda-\u51fd\u6570","text":"Python lambda \u51fd\u6570 \u6559\u7a0b\u5c55\u793a\u4e86\u5982\u4f55\u5728 Python \u4e2d\u521b\u5efa\u533f\u540d\u51fd\u6570\u3002 Python \u4e2d\u7684\u533f\u540d\u51fd\u6570\u662f\u4f7f\u7528 lambda \u5173\u952e\u5b57\u521b\u5efa\u7684\u3002","title":"Python Lambda \u51fd\u6570"},{"location":"pages/python/pytutorial/python-lambda/#Python-Lambda-\u51fd\u6570_1","text":"Python lambda \u51fd\u6570\uff08\u4e5f\u79f0\u4e3a\u533f\u540d\u51fd\u6570\uff09\u662f\u6ca1\u6709\u540d\u79f0\u7684\u5185\u8054\u51fd\u6570\u3002 \u5b83\u4eec\u662f\u4f7f\u7528 lambda \u5173\u952e\u5b57\u521b\u5efa\u7684\u3002 \u8fd9\u662f\u5185\u7f6e Python \u7684\u529f\u80fd\u793a\u4f8b\u7684\u4e00\u90e8\u5206\u3002 Python lambda \u51fd\u6570\u4ec5\u9650\u4e8e\u5355\u4e2a\u8868\u8fbe\u5f0f\u3002 \u5b83\u4eec\u53ef\u4ee5\u5728\u53ef\u4ee5\u4f7f\u7528\u5e38\u89c4\u529f\u80fd\u7684\u4efb\u4f55\u5730\u65b9\u4f7f\u7528\u3002","title":"Python Lambda \u51fd\u6570"},{"location":"pages/python/pytutorial/python-lambda/#Python-Lambda-\u8bed\u6cd5","text":"Python lambda \u5177\u6709\u4ee5\u4e0b\u8bed\u6cd5\uff1a 1 z = lambda x: x * y \u8be5\u8bed\u53e5\u4f7f\u7528 lambda \u5173\u952e\u5b57\u521b\u5efa\u4e00\u4e2a\u533f\u540d\u51fd\u6570\u3002 \u8be5\u51fd\u6570\u5c06\u4e24\u4e2a\u503c\u76f8\u4e58\u3002 x \u662f\u4f20\u9012\u7ed9 lambda \u51fd\u6570\u7684\u53c2\u6570\u3002 \u53c2\u6570\u540e\u8ddf\u4e00\u4e2a\u5192\u53f7\u3002 \u5192\u53f7\u65c1\u8fb9\u7684\u4ee3\u7801\u662f\u8c03\u7528 lambda \u51fd\u6570\u65f6\u6267\u884c\u7684\u8868\u8fbe\u5f0f\u3002 lambda \u51fd\u6570\u5206\u914d\u7ed9 z \u53d8\u91cf\u3002","title":"Python Lambda \u8bed\u6cd5"},{"location":"pages/python/pytutorial/python-lambda/#Python-Lambda-\u793a\u4f8b","text":"\u4ee5\u4e0b\u662f\u6f14\u793a Python lambda \u51fd\u6570\u7684\u7b80\u5355\u793a\u4f8b\u3002 lambda_fun_simple.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/python3 def square(x): return x * x sqr_fun = lambda x: x * x print(square(3)) print(sqr_fun(4)) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\u4e24\u4e2a\u51fd\u6570\u5bf9\u4e00\u4e2a\u503c\u6c42\u5e73\u65b9\u3002 1 2 3 def square(x): return x * x \u8fd9\u662f\u7528 def \u5173\u952e\u5b57\u5b9a\u4e49\u7684 Python \u51fd\u6570\u3002 \u8be5\u51fd\u6570\u7684\u540d\u79f0\u4e3a square \u3002 1 sqr_fun = lambda x: x * x \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4f7f\u7528 lambda \u5b9a\u4e49\u4e86\u4e00\u4e2a\u533f\u540d\u7684\u5185\u8054\u51fd\u6570\u3002 \u8bf7\u6ce8\u610f\uff0c\u8be5\u51fd\u6570\u6ca1\u6709\u540d\u79f0\u3002 sqr_fun \u662f\u4fdd\u5b58\u5df2\u521b\u5efa\u7684 lambda \u51fd\u6570\u7684\u53d8\u91cf\u7684\u540d\u79f0\u3002 1 2 3 ./lambda_fun_simple.py 9 16 \u8fd9\u662f\u793a\u4f8b\u7684\u8f93\u51fa\u3002","title":"Python Lambda \u793a\u4f8b"},{"location":"pages/python/pytutorial/python-lambda/#Python-Lambda-\u548cmap","text":"Python lambda \u51fd\u6570\u53ef\u7528\u4e8e map() \u51fd\u6570\u3002 \u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u66f4\u7b80\u6d01\u7684\u4ee3\u7801\u3002 Python map() \u662f\u4e00\u4e2a\u5185\u7f6e\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u5c06\u7ed9\u5b9a\u51fd\u6570\u5e94\u7528\u4e8e iterable \u7684\u6bcf\u4e00\u9879\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\u5bf9\u8c61\u3002 lambda_fun_map.py 1 2 3 4 5 6 7 8 #!/usr/bin/python3 nums = [1, 2, 3, 4, 5, 6] nums_squared = map(lambda x: x * x, nums) for num in nums_squared: print(num) \u8be5\u793a\u4f8b\u4e3a map() \u521b\u5efa\u4e00\u4e2a litle \u5185\u8054\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u3002 \u4f7f\u7528 map() \u51fd\u6570\uff0c\u6211\u4eec\u5c06 lambda \u51fd\u6570\u5e94\u7528\u4e8e\u5217\u8868\u7684\u6bcf\u4e2a\u5143\u7d20\u3002 1 2 3 4 5 6 7 $ ./lambda_fun_map.py 1 4 9 16 25 36 \u8fd9\u662f\u8f93\u51fa\u3002","title":"Python Lambda \u548cmap"},{"location":"pages/python/pytutorial/python-lambda/#Python-lambda-\u548cfilter","text":"Python lambda \u51fd\u6570\u53ef\u4ee5\u4e0e filter() \u51fd\u6570\u4e00\u8d77\u4f7f\u7528\u3002 filter() \u51fd\u6570\u6839\u636e\u53ef\u8fed\u4ee3\u7684\u90a3\u4e9b\u5143\u7d20\u6784\u9020\u4e00\u4e2a\u5217\u8868\uff0c\u8fd9\u4e9b\u5143\u7d20\u4e3a\u5176\u8fd4\u56de true\u3002 lambda_fun_filter.py 1 2 3 4 5 6 7 #!/usr/bin/python3 nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] nums_filtered = list(filter(lambda x: x % 2, nums)) print(nums_filtered) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u8fc7\u6ee4\u4e86\u6574\u6570\u5217\u8868\u3002 \u65b0\u5217\u8868\u4ec5\u5305\u542b\u5947\u6570\u6574\u6570\u3002 1 nums_filtered = list(filter(lambda x: x % 2, nums)) filter() \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u5904\u7406\u5217\u8868\u5143\u7d20\u7684\u51fd\u6570\u3002 lambda \u51fd\u6570\u5177\u6709 x % 2 \u8868\u8fbe\u5f0f\uff0c\u5bf9\u4e8e\u5947\u6570\u503c\u8fd4\u56de true\u3002 1 2 $ ./lambda_fun_filter.py [1, 3, 5, 7, 9, 11] \u8fd9\u662f\u8f93\u51fa\u3002","title":"Python lambda \u548cfilter"},{"location":"pages/python/pytutorial/python-lambda/#Python-Lambda-\u548c-Tkinter","text":"Python lambda \u51fd\u6570\u53ef\u7528\u4e8e Tkinter \u7684 GUI \u7f16\u7a0b\u4e2d\u3002 \u5b83\u5141\u8bb8\u4e3a command \u53c2\u6570\u521b\u5efa\u5c0f\u7684\u5185\u8054\u51fd\u6570\u3002 lambda_tkinter.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 #!/usr/bin/python3 # -*- coding: utf-8 -*- from tkinter import Tk, BOTH, messagebox from tkinter.ttk import Frame, Button class Example(Frame): def __init__(self, parent): Frame.__init__(self, parent) self.parent = parent self.initUI() def initUI(self): self.parent.title(\"Buttons\") self.pack(fill=BOTH, expand=1) btn1 = Button(self, text=\"Button 1\", command=lambda: self.onClick(\"Button 1\")) btn1.pack(padx=5, pady=5) btn2 = Button(self, text=\"Button 2\", command=lambda: self.onClick(\"Button 2\")) btn2.pack(padx=5, pady=5) btn2 = Button(self, text=\"Button 3\", command=lambda: self.onClick(\"Button 3\")) btn2.pack(padx=5, pady=5) def onClick(self, text): messagebox.showinfo(\"Button label\", text); def main(): root = Tk() root.geometry(\"250x150+300+300\") app = Example(root) root.mainloop() if __name__ == '__main__': main() \u6211\u4eec\u6709\u4e09\u4e2a\u6309\u94ae\u5171\u4eab\u4e00\u4e2a\u56de\u8c03\u3002 lambda \u51fd\u6570\u5141\u8bb8\u6211\u4eec\u5c06\u7279\u5b9a\u6570\u636e\u53d1\u9001\u5230\u56de\u8c03\u51fd\u6570\u3002 \u6bcf\u4e2a\u6309\u94ae\u5728\u6d88\u606f\u6846\u4e2d\u663e\u793a\u5176\u6807\u7b7e\u3002 1 2 btn1 = Button(self, text=\"Button 1\", command=lambda: self.onClick(\"Button 1\")) \u6211\u4eec\u5c06\u533f\u540d\u51fd\u6570\u4f20\u9012\u7ed9 command \u53c2\u6570\u3002 \u6211\u4eec\u5c06\u6309\u94ae\u7684\u6807\u7b7e\u53d1\u9001\u5230 onClick() \u56de\u8c03\u3002 \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 Python lambda \u51fd\u6570\u3002","title":"Python Lambda \u548c Tkinter"},{"location":"pages/python/pytutorial/python-lexicalstructure/","text":"Python \u8bed\u6cd5\u7ed3\u6784 \u00b6 Python \u8bed\u6cd5\u7ed3\u6784 \uff0c\u50cf\u4eba\u7c7b\u8bed\u8a00\u4e00\u6837\uff0c\u8ba1\u7b97\u673a\u8bed\u8a00\u4e5f\u5177\u6709\u8bed\u6cd5\u7ed3\u6784\u3002 \u5728 Python \u8bed\u8a00\u4e2d\uff0c\u6211\u4eec\u5177\u6709\u6ce8\u91ca\uff0c\u53d8\u91cf\uff0c\u5b57\u9762\u503c\uff0c\u8fd0\u7b97\u7b26\uff0c\u5b9a\u754c\u7b26\u548c\u5173\u952e\u5b57\u3002 Python \u6ce8\u91ca \u00b6 \u6ce8\u91ca\u88ab\u4eba\u7c7b\u7528\u6765\u9610\u660e\u6e90\u4ee3\u7801\u3002 Python \u8bed\u8a00\u4e2d\u7684\u6240\u6709\u6ce8\u91ca\u5747\u4ee5# \u5b57\u7b26\u4e3a\u51c6\u3002 comments.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python # comments.py # Author Jan Bodnar # ZetCode 2017 def main(): print(\"Comments example\") main() Python \u89e3\u91ca\u5668\u5c06\u5ffd\u7565# \u5b57\u7b26\u540e\u7684\u6240\u6709\u5185\u5bb9\u3002 Python \u53d8\u91cf \u00b6 \u53d8\u91cf\u662f\u4fdd\u5b58\u503c\u7684\u6807\u8bc6\u7b26\u3002 \u5728\u7f16\u7a0b\u4e2d\uff0c\u6211\u4eec\u8bf4\u6211\u4eec\u4e3a\u53d8\u91cf\u5206\u914d\u4e86\u4e00\u4e2a\u503c\u3002 \u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u53d8\u91cf\u662f\u5bf9\u5b58\u50a8\u503c\u7684\u8ba1\u7b97\u673a\u5185\u5b58\u7684\u5f15\u7528\u3002 \u5728 Python \u8bed\u8a00\u4e2d\uff0c\u53d8\u91cf\u53ef\u4ee5\u5305\u542b\u5b57\u7b26\u4e32\uff0c\u6570\u5b57\u6216\u5404\u79cd\u5bf9\u8c61\uff0c\u4f8b\u5982\u51fd\u6570\u6216\u7c7b\u3002 \u53ef\u4ee5\u968f\u65f6\u95f4\u4e3a\u53d8\u91cf\u5206\u914d\u4e0d\u540c\u7684\u503c\u3002 Python \u4e2d\u7684\u53d8\u91cf\u53ef\u4ee5\u7531\u5b57\u6bcd\u6570\u5b57\u5b57\u7b26\u548c\u4e0b\u5212\u7ebf _ \u5b57\u7b26\u521b\u5efa\u3002 \u53d8\u91cf\u4e0d\u80fd\u4ee5\u6570\u5b57\u5f00\u5934\u3002 \u8fd9\u6837\uff0cPython \u89e3\u91ca\u5668\u53ef\u4ee5\u66f4\u8f7b\u677e\u5730\u533a\u5206\u6570\u5b57\u548c\u53d8\u91cf\u3002 1 2 3 Value value2 company_name \u8fd9\u4e9b\u662f\u6709\u6548\u7684\u6807\u8bc6\u7b26\u3002 1 2 3 12Val exx$ first-name \u8fd9\u4e9b\u662f\u65e0\u6548\u6807\u8bc6\u7b26\u7684\u793a\u4f8b\u3002 \u53d8\u91cf\u4e3a\u533a\u5206\u5927\u5c0f\u5199\u3002 \u8fd9\u610f\u5473\u7740 Price \uff0c price \u548c PRICE \u662f\u4e09\u4e2a\u4e0d\u540c\u7684\u6807\u8bc6\u7b26\u3002 case.py 1 2 3 4 5 6 7 #!/usr/bin/env python number = 10 Number = 11 NUMBER = 12 print(number, Number, NUMBER) \u5728\u811a\u672c\u4e2d\uff0c\u6211\u4eec\u5c06\u4e09\u4e2a\u6570\u503c\u5206\u914d\u7ed9\u4e09\u4e2a\u6807\u8bc6\u7b26\u3002 \u867d\u7136\u53ef\u4ee5\u5b9a\u4e49\u5927\u5c0f\u5199\u4e0d\u540c\u7684\u4e09\u4e2a\u53d8\u91cf\uff0c\u4f46\u662f\u8fd9\u5e76\u4e0d\u662f\u4e00\u4e2a\u597d\u7684\u7f16\u7a0b\u4e60\u60ef\u3002 1 2 $ ./case.py 10 11 12 \u8fd9\u662f\u811a\u672c\u7684\u8f93\u51fa\u3002 Python \u5b57\u9762\u503c \u00b6 \u5b57\u9762\u503c\u662f\u8868\u793a Python \u6e90\u4ee3\u7801\u4e2d\u7684\u503c\u7684\u4efb\u4f55\u7b26\u53f7\u3002 \u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u5b57\u9762\u503c\u662f\u5728\u7f16\u8bd1\u65f6\u5206\u914d\u4e00\u4e2a\u503c\u7684\uff0c\u800c\u53d8\u91cf\u662f\u5728\u8fd0\u884c\u65f6\u5206\u914d\u7684\u3002 1 2 age = 29 nationality = \"Hungarian\" \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4e3a\u53d8\u91cf\u5206\u914d\u4e86\u4e24\u4e2a\u5b57\u9762\u503c\u3002 \u6570\u5b57 29 \u548c\u5b57\u7b26\u4e32 \"Hungarian\" \u662f\u5b57\u9762\u503c\u3002 literals.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/usr/bin/env python # literals.py name1 = \"Jane\" age1 = 12 name2 = \"Rose\" age2 = 16 \"Patrick\" 34 \"Luke\" 23 print(name1, age1) print(name2, age2) \u5982\u679c\u6211\u4eec\u4e0d\u7ed9\u53d8\u91cf\u5206\u914d\u5b57\u9762\u503c\uff0c\u5c31\u65e0\u6cd5\u4f7f\u7528\u5b83\u3002 \u5b83\u88ab\u4e22\u5f03\u3002 1 2 3 $ ./literals.py Jane 12 Rose 16 \u8fd9\u662f literals.py \u811a\u672c\u7684\u8f93\u51fa\u3002 Python \u8fd0\u7b97\u7b26 \u00b6 \u8fd0\u7b97\u7b26\u662f\u7528\u4e8e\u5bf9\u67d0\u4e2a\u503c\u6267\u884c\u64cd\u4f5c\u7684\u7b26\u53f7\u3002 1 2 3 4 5 + - ~ * ** / // % << >> & | ^ and or not in not in is is not < > != == <= >= \u8fd9\u662f Python \u8bed\u8a00\u4e2d\u53ef\u7528\u7684\u8fd0\u7b97\u7b26\u7684\u5217\u8868\uff0c\u6211\u4eec\u5c06\u5728\u672c\u6559\u7a0b\u7684\u540e\u9762\u90e8\u5206\u8ba8\u8bba\u8fd0\u7b97\u7b26\u3002 Python \u7f29\u8fdb \u00b6 \u7f29\u8fdb\u7528\u4e8e\u5728 Python \u4e2d\u5b9a\u754c\u3002 \u5728\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u4f7f\u7528\u5927\u62ec\u53f7\u6216\u8bf8\u5982 begin\uff0cend \u4e4b\u7c7b\u7684\u5173\u952e\u5b57\u7684\u60c5\u51b5\u4e0b\uff0cPython \u4f7f\u7528\u7a7a\u683c\u3002 \u67d0\u4e9b\u8bed\u53e5\u540e\u7f29\u8fdb\u589e\u52a0\uff1b \u7f29\u8fdb\u7684\u51cf\u5c11\u8868\u793a\u5f53\u524d\u5757\u7684\u7ed3\u5c3e\u3002 Python \u6837\u5f0f\u6307\u5357\u5efa\u8bae\u6bcf\u4e2a\u7f29\u8fdb\u7ea7\u522b\u4f7f\u7528\u56db\u4e2a\u7a7a\u683c\u3002 1 2 3 4 5 if age > 18: print(\"adult person\") for i in range(5): print(i) \u5728 if \u5173\u952e\u5b57\u4e4b\u540e\uff0c\u9700\u8981\u4e00\u4e2a\u4ee3\u7801\u5757\u3002 \u65b0\u7684\u8bed\u53e5\u5728\u65b0\u884c\u4e0a\u5f00\u59cb\uff0c\u5e76\u4ee5\u56db\u4e2a\u7a7a\u683c\u5b57\u7b26\u7f29\u8fdb\u3002 \u968f\u540e\u7684 for \u5173\u952e\u5b57\u7684\u7f29\u8fdb\u51cf\u5c11\u5230\u6700\u521d\u7684\u5173\u952e\u5b57\u3002 for \u5173\u952e\u5b57\u542f\u52a8\u4e00\u4e2a\u65b0\u7684\u4ee3\u7801\u5757\uff0c\u5728\u8be5\u4ee3\u7801\u5757\u4e2d\u7f29\u8fdb\u5176\u8bed\u53e5\u3002 Python \u5206\u9694\u7b26 \u00b6 \u5b9a\u754c\u7b26\u662f\u4e00\u4e2a\u6216\u591a\u4e2a\u5b57\u7b26\u7684\u5e8f\u5217\uff0c\u7528\u4e8e\u6307\u5b9a\u7eaf\u6587\u672c\u6216\u5176\u4ed6\u6570\u636e\u6d41\u4e2d\u5355\u72ec\u7684\u72ec\u7acb\u533a\u57df\u4e4b\u95f4\u7684\u8fb9\u754c\u3002 1 2 3 4 5 ( ) [ ] { } , : . ` = ; += -= *= /= //= %= <= |= ^= >>= <<= **= ' \" \\ @ \u5206\u9694\u7b26\u7528\u4e8e Python \u8bed\u8a00\u7684\u5404\u4e2a\u9886\u57df\u3002 \u5b83\u4eec\u7528\u4e8e\u6784\u5efa\u8868\u8fbe\u5f0f\uff0c\u5b57\u7b26\u4e32\u5b57\u9762\u503c\uff0c\u5143\u7ec4\uff0c\u5b57\u5178\u6216\u5217\u8868\u3002 Python \u5173\u952e\u5b57 \u00b6 \u5173\u952e\u5b57\u662f Python \u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u4fdd\u7559\u5b57\u3002 \u5173\u952e\u5b57\u7528\u4e8e\u5728\u8ba1\u7b97\u673a\u7a0b\u5e8f\u4e2d\u6267\u884c\u7279\u5b9a\u4efb\u52a1\u3002 \u4f8b\u5982\uff0c\u5bfc\u5165\u5176\u4ed6\u4ee3\u7801\uff0c\u6267\u884c\u91cd\u590d\u6027\u4efb\u52a1\u6216\u6267\u884c\u903b\u8f91\u64cd\u4f5c\u3002 \u7a0b\u5e8f\u5458\u4e0d\u80fd\u5c06\u5173\u952e\u5b57\u7528\u4f5c\u666e\u901a\u53d8\u91cf\u3002 1 2 3 4 5 6 7 and del global not with as elif if or yield assert else import pass False break except in raise None class finally is return True continue for lambda try def from nonlocal while","title":"Python \u8bed\u6cd5\u7ed3\u6784"},{"location":"pages/python/pytutorial/python-lexicalstructure/#Python-\u8bed\u6cd5\u7ed3\u6784","text":"Python \u8bed\u6cd5\u7ed3\u6784 \uff0c\u50cf\u4eba\u7c7b\u8bed\u8a00\u4e00\u6837\uff0c\u8ba1\u7b97\u673a\u8bed\u8a00\u4e5f\u5177\u6709\u8bed\u6cd5\u7ed3\u6784\u3002 \u5728 Python \u8bed\u8a00\u4e2d\uff0c\u6211\u4eec\u5177\u6709\u6ce8\u91ca\uff0c\u53d8\u91cf\uff0c\u5b57\u9762\u503c\uff0c\u8fd0\u7b97\u7b26\uff0c\u5b9a\u754c\u7b26\u548c\u5173\u952e\u5b57\u3002","title":"Python \u8bed\u6cd5\u7ed3\u6784"},{"location":"pages/python/pytutorial/python-lexicalstructure/#Python-\u6ce8\u91ca","text":"\u6ce8\u91ca\u88ab\u4eba\u7c7b\u7528\u6765\u9610\u660e\u6e90\u4ee3\u7801\u3002 Python \u8bed\u8a00\u4e2d\u7684\u6240\u6709\u6ce8\u91ca\u5747\u4ee5# \u5b57\u7b26\u4e3a\u51c6\u3002 comments.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python # comments.py # Author Jan Bodnar # ZetCode 2017 def main(): print(\"Comments example\") main() Python \u89e3\u91ca\u5668\u5c06\u5ffd\u7565# \u5b57\u7b26\u540e\u7684\u6240\u6709\u5185\u5bb9\u3002","title":"Python \u6ce8\u91ca"},{"location":"pages/python/pytutorial/python-lexicalstructure/#Python-\u53d8\u91cf","text":"\u53d8\u91cf\u662f\u4fdd\u5b58\u503c\u7684\u6807\u8bc6\u7b26\u3002 \u5728\u7f16\u7a0b\u4e2d\uff0c\u6211\u4eec\u8bf4\u6211\u4eec\u4e3a\u53d8\u91cf\u5206\u914d\u4e86\u4e00\u4e2a\u503c\u3002 \u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u53d8\u91cf\u662f\u5bf9\u5b58\u50a8\u503c\u7684\u8ba1\u7b97\u673a\u5185\u5b58\u7684\u5f15\u7528\u3002 \u5728 Python \u8bed\u8a00\u4e2d\uff0c\u53d8\u91cf\u53ef\u4ee5\u5305\u542b\u5b57\u7b26\u4e32\uff0c\u6570\u5b57\u6216\u5404\u79cd\u5bf9\u8c61\uff0c\u4f8b\u5982\u51fd\u6570\u6216\u7c7b\u3002 \u53ef\u4ee5\u968f\u65f6\u95f4\u4e3a\u53d8\u91cf\u5206\u914d\u4e0d\u540c\u7684\u503c\u3002 Python \u4e2d\u7684\u53d8\u91cf\u53ef\u4ee5\u7531\u5b57\u6bcd\u6570\u5b57\u5b57\u7b26\u548c\u4e0b\u5212\u7ebf _ \u5b57\u7b26\u521b\u5efa\u3002 \u53d8\u91cf\u4e0d\u80fd\u4ee5\u6570\u5b57\u5f00\u5934\u3002 \u8fd9\u6837\uff0cPython \u89e3\u91ca\u5668\u53ef\u4ee5\u66f4\u8f7b\u677e\u5730\u533a\u5206\u6570\u5b57\u548c\u53d8\u91cf\u3002 1 2 3 Value value2 company_name \u8fd9\u4e9b\u662f\u6709\u6548\u7684\u6807\u8bc6\u7b26\u3002 1 2 3 12Val exx$ first-name \u8fd9\u4e9b\u662f\u65e0\u6548\u6807\u8bc6\u7b26\u7684\u793a\u4f8b\u3002 \u53d8\u91cf\u4e3a\u533a\u5206\u5927\u5c0f\u5199\u3002 \u8fd9\u610f\u5473\u7740 Price \uff0c price \u548c PRICE \u662f\u4e09\u4e2a\u4e0d\u540c\u7684\u6807\u8bc6\u7b26\u3002 case.py 1 2 3 4 5 6 7 #!/usr/bin/env python number = 10 Number = 11 NUMBER = 12 print(number, Number, NUMBER) \u5728\u811a\u672c\u4e2d\uff0c\u6211\u4eec\u5c06\u4e09\u4e2a\u6570\u503c\u5206\u914d\u7ed9\u4e09\u4e2a\u6807\u8bc6\u7b26\u3002 \u867d\u7136\u53ef\u4ee5\u5b9a\u4e49\u5927\u5c0f\u5199\u4e0d\u540c\u7684\u4e09\u4e2a\u53d8\u91cf\uff0c\u4f46\u662f\u8fd9\u5e76\u4e0d\u662f\u4e00\u4e2a\u597d\u7684\u7f16\u7a0b\u4e60\u60ef\u3002 1 2 $ ./case.py 10 11 12 \u8fd9\u662f\u811a\u672c\u7684\u8f93\u51fa\u3002","title":"Python \u53d8\u91cf"},{"location":"pages/python/pytutorial/python-lexicalstructure/#Python-\u5b57\u9762\u503c","text":"\u5b57\u9762\u503c\u662f\u8868\u793a Python \u6e90\u4ee3\u7801\u4e2d\u7684\u503c\u7684\u4efb\u4f55\u7b26\u53f7\u3002 \u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u5b57\u9762\u503c\u662f\u5728\u7f16\u8bd1\u65f6\u5206\u914d\u4e00\u4e2a\u503c\u7684\uff0c\u800c\u53d8\u91cf\u662f\u5728\u8fd0\u884c\u65f6\u5206\u914d\u7684\u3002 1 2 age = 29 nationality = \"Hungarian\" \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4e3a\u53d8\u91cf\u5206\u914d\u4e86\u4e24\u4e2a\u5b57\u9762\u503c\u3002 \u6570\u5b57 29 \u548c\u5b57\u7b26\u4e32 \"Hungarian\" \u662f\u5b57\u9762\u503c\u3002 literals.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/usr/bin/env python # literals.py name1 = \"Jane\" age1 = 12 name2 = \"Rose\" age2 = 16 \"Patrick\" 34 \"Luke\" 23 print(name1, age1) print(name2, age2) \u5982\u679c\u6211\u4eec\u4e0d\u7ed9\u53d8\u91cf\u5206\u914d\u5b57\u9762\u503c\uff0c\u5c31\u65e0\u6cd5\u4f7f\u7528\u5b83\u3002 \u5b83\u88ab\u4e22\u5f03\u3002 1 2 3 $ ./literals.py Jane 12 Rose 16 \u8fd9\u662f literals.py \u811a\u672c\u7684\u8f93\u51fa\u3002","title":"Python \u5b57\u9762\u503c"},{"location":"pages/python/pytutorial/python-lexicalstructure/#Python-\u8fd0\u7b97\u7b26","text":"\u8fd0\u7b97\u7b26\u662f\u7528\u4e8e\u5bf9\u67d0\u4e2a\u503c\u6267\u884c\u64cd\u4f5c\u7684\u7b26\u53f7\u3002 1 2 3 4 5 + - ~ * ** / // % << >> & | ^ and or not in not in is is not < > != == <= >= \u8fd9\u662f Python \u8bed\u8a00\u4e2d\u53ef\u7528\u7684\u8fd0\u7b97\u7b26\u7684\u5217\u8868\uff0c\u6211\u4eec\u5c06\u5728\u672c\u6559\u7a0b\u7684\u540e\u9762\u90e8\u5206\u8ba8\u8bba\u8fd0\u7b97\u7b26\u3002","title":"Python \u8fd0\u7b97\u7b26"},{"location":"pages/python/pytutorial/python-lexicalstructure/#Python-\u7f29\u8fdb","text":"\u7f29\u8fdb\u7528\u4e8e\u5728 Python \u4e2d\u5b9a\u754c\u3002 \u5728\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u4f7f\u7528\u5927\u62ec\u53f7\u6216\u8bf8\u5982 begin\uff0cend \u4e4b\u7c7b\u7684\u5173\u952e\u5b57\u7684\u60c5\u51b5\u4e0b\uff0cPython \u4f7f\u7528\u7a7a\u683c\u3002 \u67d0\u4e9b\u8bed\u53e5\u540e\u7f29\u8fdb\u589e\u52a0\uff1b \u7f29\u8fdb\u7684\u51cf\u5c11\u8868\u793a\u5f53\u524d\u5757\u7684\u7ed3\u5c3e\u3002 Python \u6837\u5f0f\u6307\u5357\u5efa\u8bae\u6bcf\u4e2a\u7f29\u8fdb\u7ea7\u522b\u4f7f\u7528\u56db\u4e2a\u7a7a\u683c\u3002 1 2 3 4 5 if age > 18: print(\"adult person\") for i in range(5): print(i) \u5728 if \u5173\u952e\u5b57\u4e4b\u540e\uff0c\u9700\u8981\u4e00\u4e2a\u4ee3\u7801\u5757\u3002 \u65b0\u7684\u8bed\u53e5\u5728\u65b0\u884c\u4e0a\u5f00\u59cb\uff0c\u5e76\u4ee5\u56db\u4e2a\u7a7a\u683c\u5b57\u7b26\u7f29\u8fdb\u3002 \u968f\u540e\u7684 for \u5173\u952e\u5b57\u7684\u7f29\u8fdb\u51cf\u5c11\u5230\u6700\u521d\u7684\u5173\u952e\u5b57\u3002 for \u5173\u952e\u5b57\u542f\u52a8\u4e00\u4e2a\u65b0\u7684\u4ee3\u7801\u5757\uff0c\u5728\u8be5\u4ee3\u7801\u5757\u4e2d\u7f29\u8fdb\u5176\u8bed\u53e5\u3002","title":"Python \u7f29\u8fdb"},{"location":"pages/python/pytutorial/python-lexicalstructure/#Python-\u5206\u9694\u7b26","text":"\u5b9a\u754c\u7b26\u662f\u4e00\u4e2a\u6216\u591a\u4e2a\u5b57\u7b26\u7684\u5e8f\u5217\uff0c\u7528\u4e8e\u6307\u5b9a\u7eaf\u6587\u672c\u6216\u5176\u4ed6\u6570\u636e\u6d41\u4e2d\u5355\u72ec\u7684\u72ec\u7acb\u533a\u57df\u4e4b\u95f4\u7684\u8fb9\u754c\u3002 1 2 3 4 5 ( ) [ ] { } , : . ` = ; += -= *= /= //= %= <= |= ^= >>= <<= **= ' \" \\ @ \u5206\u9694\u7b26\u7528\u4e8e Python \u8bed\u8a00\u7684\u5404\u4e2a\u9886\u57df\u3002 \u5b83\u4eec\u7528\u4e8e\u6784\u5efa\u8868\u8fbe\u5f0f\uff0c\u5b57\u7b26\u4e32\u5b57\u9762\u503c\uff0c\u5143\u7ec4\uff0c\u5b57\u5178\u6216\u5217\u8868\u3002","title":"Python \u5206\u9694\u7b26"},{"location":"pages/python/pytutorial/python-lexicalstructure/#Python-\u5173\u952e\u5b57","text":"\u5173\u952e\u5b57\u662f Python \u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u4fdd\u7559\u5b57\u3002 \u5173\u952e\u5b57\u7528\u4e8e\u5728\u8ba1\u7b97\u673a\u7a0b\u5e8f\u4e2d\u6267\u884c\u7279\u5b9a\u4efb\u52a1\u3002 \u4f8b\u5982\uff0c\u5bfc\u5165\u5176\u4ed6\u4ee3\u7801\uff0c\u6267\u884c\u91cd\u590d\u6027\u4efb\u52a1\u6216\u6267\u884c\u903b\u8f91\u64cd\u4f5c\u3002 \u7a0b\u5e8f\u5458\u4e0d\u80fd\u5c06\u5173\u952e\u5b57\u7528\u4f5c\u666e\u901a\u53d8\u91cf\u3002 1 2 3 4 5 6 7 and del global not with as elif if or yield assert else import pass False break except in raise None class finally is return True continue for lambda try def from nonlocal while","title":"Python \u5173\u952e\u5b57"},{"location":"pages/python/pytutorial/python-listcomprehensions/","text":"Python \u5217\u8868\u63a8\u5bfc\u5f0f \u00b6 \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u5c06\u5b66\u4e60\u4f7f\u7528 Python \u5217\u8868\u63a8\u5bfc \u3002 Python \u5217\u8868\u63a8\u5bfc\u5f0f \u00b6 \u5217\u8868\u63a8\u5bfc\u5f0f\u662f\u4e00\u79cd\u57fa\u4e8e\u73b0\u6709\u5217\u8868\u521b\u5efa\u5217\u8868\u7684\u8bed\u6cd5\u7ed3\u6784\u3002 \u5217\u8868\u63a8\u5bfc\u5f0f\u4e3a\u521b\u5efa\u5217\u8868\u63d0\u4f9b\u4e86\u4e00\u79cd\u7b80\u6d01\u7684\u65b9\u6cd5\u3002 \u5e38\u89c1\u7684\u8981\u6c42\u662f\u521b\u5efa\u65b0\u5217\u8868\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u662f\u5e94\u7528\u4e8e\u53e6\u4e00\u5e8f\u5217\u7684\u6bcf\u4e2a\u6210\u5458\u6216\u53ef\u8fed\u4ee3\u7684\u67d0\u4e9b\u64cd\u4f5c\u7684\u7ed3\u679c\uff0c\u6216\u8005\u521b\u5efa\u6ee1\u8db3\u7279\u5b9a\u6761\u4ef6\u7684\u90a3\u4e9b\u5143\u7d20\u7684\u5b50\u5e8f\u5217\u3002 Python \u5217\u8868\u63a8\u5bfc\u5f0f\u7528\u6cd5 \u00b6 \u5217\u8868\u63a8\u5bfc\u53ef\u7528\u4e8e\uff1a \u8f6c\u6362\u5217\u8868 \u7b5b\u9009\u5217\u8868 \u5217\u8868\u63a8\u5bfc\u5f0f\u7684\u8bed\u6cd5\u53d7\u96c6\u5408\u7684\u6570\u5b66\u7b26\u53f7\u7684\u5f71\u54cd\u3002 Python \u8bed\u6cd5\u53d7 Haskell \u7f16\u7a0b\u8bed\u8a00\u542f\u53d1\u3002 1 S = {x\u00b2 : x in {0 ... 16}} \u8fd9\u662f\u7528\u4e8e\u521b\u5efa\u4e00\u7ec4\u6574\u6570\u503c\u7684\u6570\u5b66\u7b26\u53f7\u3002 1 L = [expression for variable in sequence [if condition]] \u4e0a\u9762\u7684\u4f2a\u4ee3\u7801\u663e\u793a\u4e86\u5217\u8868\u63a8\u5bfc\u5f0f\u7684\u8bed\u6cd5\u3002 \u5b83\u7531\u4e09\u90e8\u5206\u7ec4\u6210\uff1afor \u5faa\u73af\uff0c\u53ef\u9009\u6761\u4ef6\u548c\u8868\u8fbe\u5f0f\u3002 for \u5faa\u73af\u904d\u5386\u6574\u4e2a\u5e8f\u5217\u3002 \u5bf9\u4e8e\u6bcf\u4e2a\u5faa\u73af\uff0c\u5982\u679c\u6ee1\u8db3\u6761\u4ef6\uff0c\u5219\u5bf9\u8868\u8fbe\u5f0f\u8fdb\u884c\u6c42\u503c\u3002 \u5982\u679c\u8ba1\u7b97\u51fa\u8be5\u503c\uff0c\u5b83\u5c06\u88ab\u6dfb\u52a0\u5230\u65b0\u5217\u8868\u4e2d\u3002 for \u5faa\u73af\u548c if \u6761\u4ef6\u53ef\u4ee5\u6709\u591a\u4e2a\u3002 Python \u5217\u8868\u63a8\u5bfc\u5f0f\u8f6c\u6362\u5217\u8868 \u00b6 \u4e0b\u9762\u7684\u793a\u4f8b\u501f\u52a9\u5217\u8868\u63a8\u5bfc\u5f0f\u5c06\u4e00\u4e2a\u5217\u8868\u8f6c\u6362\u4e3a\u53e6\u4e00\u4e2a\u5217\u8868\u3002 multiply_elements.py 1 2 3 4 5 6 #!/usr/bin/python3 a = [1, 2, 3, 4, 5, 6] b = [e * 2 for e in a] print(b) \u5728\u7b2c\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u5c06\u6bcf\u4e2a\u5143\u7d20\u4e58\u4ee5 2 \u4ece\u73b0\u6709\u5217\u8868\u4e2d\u521b\u5efa\u4e00\u4e2a\u65b0\u5217\u8868\u3002 1 b = [e * 2 for e in a] \u5c06 a \u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4e58\u4ee5 2\uff0c\u5e76\u5c06\u7ed3\u679c\u6dfb\u52a0\u5230\u65b0\u7684 b \u5217\u8868\u4e2d\u3002 1 2 $ ./multiply_elements.py [2, 4, 6, 8, 10, 12] \u6bcf\u4e2a\u5143\u7d20\u90fd\u4e58\u4ee5 2\u3002 \u4ece\u6444\u6c0f\u8ba1\u7b97\u534e\u6c0f\u6e29\u5ea6 \u00b6 \u6211\u4eec\u6709\u6444\u6c0f\u6e29\u5ea6\u7684\u5217\u8868\u3002 \u6211\u4eec\u8981\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6e29\u5ea6\u8868\uff0c\u4ee5\u534e\u6c0f\u6e29\u5ea6\u8868\u793a\u3002 fahrenheit_celsius.py 1 2 3 4 5 6 #!/usr/bin/python3 celsius = [22, 28, 33, 42, 52] fahr = [e * 9/5 + 32 for e in celsius] print(fahr) \u8be5\u793a\u4f8b\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u534e\u6c0f\u6e29\u5ea6\u5217\u8868\uff0c\u8be5\u5217\u8868\u662f\u6839\u636e\u6444\u6c0f\u6e29\u5ea6\u5217\u8868\u8ba1\u7b97\u5f97\u51fa\u7684\u3002 1 fahr = [e * 9/5 + 32 for e in celsius] \u8ba1\u7b97\u662f\u5728 Python \u5217\u8868\u63a8\u5bfc\u7684\u7b2c\u4e09\u4e2a\u8868\u8fbe\u5f0f\u90e8\u5206\u4e2d\u5b8c\u6210\u7684\u3002 1 2 $ ./fahrenheit_celsius.py [71.6, 82.4, 91.4, 107.6, 125.6] \u8fd9\u662f\u793a\u4f8b\u7684\u8f93\u51fa\u3002 Python \u5217\u8868\u63a8\u5bfc\u5f0f\u8fc7\u6ee4\u5217\u8868 \u00b6 \u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u5217\u8868\u63a8\u5bfc\u5f0f\u6765\u8fc7\u6ee4\u5217\u8868\u3002 filter_positive.py 1 2 3 4 5 6 #!/usr/bin/python3 a = [-4, 2, 0, -1, 12, -3] b = [e for e in a if e > 0] print(b) \u6211\u4eec\u6709\u4e00\u4e2a\u6574\u6570\u5217\u8868\u3002 \u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u4ec5\u5305\u542b\u6b63\u6574\u6570\u7684\u65b0\u5217\u8868\u3002 1 b = [e for e in a if e > 0] \u4e3a\u4e86\u53ea\u5305\u542b\u6b63\u6570\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 if \u6761\u4ef6\uff0c\u8be5\u6761\u4ef6\u5e94\u7528\u4e8e\u6bcf\u4e2a\u5143\u7d20\u3002 \u4ec5\u5f53\u6ee1\u8db3\u6761\u4ef6\u7684\u5143\u7d20\u624d\u5305\u542b\u5728\u65b0\u5217\u8868\u4e2d\u3002 1 2 $ ./filter_positive.py [2, 12] \u8fd9\u662f\u793a\u4f8b\u7684\u8f93\u51fa\u3002 \u4e0b\u4e00\u4e2a\u793a\u4f8b\u6309\u5143\u7d20\u7c7b\u578b\u8fc7\u6ee4\u5143\u7d20\u3002 filter_by_type.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/python3 a = ['a', 2, 'c', 12, 3, 'd'] b = [e for e in a if type(e) == int] c = [e for e in a if type(e) == str] print(b) print(c) \u6211\u4eec\u6709\u4e00\u4e2a\u5143\u7d20\u5217\u8868\uff0c\u5b83\u4eec\u662f\u6574\u6570\u548c\u5b57\u7b26\u4e32\u3002 \u6211\u4eec\u521b\u5efa\u4e24\u4e2a\u65b0\u5217\u8868\uff1b \u4e00\u4e2a\u53ea\u6709\u6574\u6570\uff0c\u53ea\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 1 b = [e for e in a if type(e) == int] \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u5217\u8868 b \uff0c\u5b83\u5c06\u4ec5\u5305\u542b\u6574\u6570\u503c\u3002 type() \u529f\u80fd\u7528\u4e8e\u786e\u5b9a\u5143\u7d20\u7684\u7c7b\u578b\u3002 1 2 3 $ ./filter_by_type.py [2, 12, 3] ['a', 'c', 'd'] \u8fd9\u662f\u793a\u4f8b\u7684\u8f93\u51fa\u3002 Python \u5217\u8868\u63a8\u5bfc\u5f0f\u591a\u4e2a if \u6761\u4ef6 \u00b6 Python \u5217\u8868\u63a8\u5bfc\u4e2d\u7684\u6761\u4ef6\u53ef\u4ee5\u4f7f\u7528\u591a\u4e2a\u3002 multiple_conditions.py 1 2 3 4 5 6 #!/usr/bin/python3 a = [9, 2, 18, 14, 22, 11, 7, 19, 23] b = [e for e in a if e > 10 if e < 20] print(b) \u6211\u4eec\u4ece\u5217\u8868 a \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6574\u6570\u5217\u8868\uff0c\u5b83\u4eec\u5927\u4e8e 10 \u4e14\u5c0f\u4e8e 20\u3002 1 b = [e for e in a if e > 10 if e < 20] \u5728\u6b64\u5217\u8868\u63a8\u5bfc\u5f0f\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e24\u4e2a if \u6761\u4ef6\u3002 1 2 $ ./multiple_conditions.py [18, 14, 11, 19] \u8fd9\u662f\u793a\u4f8b\u7684\u8f93\u51fa\u3002 Python \u5217\u8868\u63a8\u5bfc\u5f0f\u591a\u4e2a for \u5faa\u73af \u00b6 Python \u5217\u8868\u63a8\u5bfc\u4e2d\u53ef\u80fd\u6709\u591a\u4e2a for \u5faa\u73af\u3002 multiple_for_loops.py 1 2 3 4 5 6 7 #!/usr/bin/python3 a = [1, 2, 3] b = ['A', 'B', 'C'] c = [ str(i) + j for i in a for j in b] print(c) \u8be5\u793a\u4f8b\u521b\u5efa\u4e24\u4e2a\u5217\u8868\u7684\u7b1b\u5361\u5c14\u4e58\u79ef\u3002 1 c = [ str(i) + j for i in a for j in b] \u4e24\u4e2a for \u5faa\u73af\u7528\u4e8e\u521b\u5efa\u7b1b\u5361\u5c14\u4e58\u79ef\u3002 1 2 $ ./multiple_for_loops.py ['1A', '1B', '1C', '2A', '2B', '2C', '3A', '3B', '3C'] \u8fd9\u662f\u793a\u4f8b\u7684\u8f93\u51fa\u3002 \u4e0b\u4e00\u4e2a\u793a\u4f8b\u663e\u793a\u5982\u4f55\u5c55\u5e73 Python \u5217\u8868\u3002 flatten_list.py 1 2 3 4 5 6 #!/usr/bin/python3 nums = [[1, 2, 3], [3, 4, 5], [6, 7, 8]] c = [ e for num in nums for e in num] print(c) nums \u5217\u8868\u662f\u5d4c\u5957\u5217\u8868\u7684\u5217\u8868\u3002 \u6211\u4eec\u7528\u5217\u8868\u63a8\u5bfc\u5f0f\u6765\u4f7f\u5217\u8868\u6241\u5e73\u5316\u3002 1 c = [ e for num in nums for e in num] \u7b2c\u4e00\u4e2a\u5faa\u73af\u904d\u5386\u5916\u90e8\u5217\u8868\u3002 \u7b2c\u4e8c\u4e2a for \u5faa\u73af\u904d\u5386\u5d4c\u5957\u5217\u8868\u3002 1 2 $ ./flatten_list.py [1, 2, 3, 3, 4, 5, 6, 7, 8] \u8fd9\u662f\u793a\u4f8b\u7684\u8f93\u51fa\u3002 Python \u5d4c\u5957\u5217\u8868\u63a8\u5bfc\u5f0f \u00b6 Python \u5217\u8868\u63a8\u5bfc\u5f0f\u4e2d\u7684\u521d\u59cb\u8868\u8fbe\u5f0f\u53ef\u4ee5\u662f\u53e6\u4e00\u4e2a\u5217\u8868\u63a8\u5bfc\u5f0f\u3002 nested_list_comprehension.py 1 2 3 4 5 6 7 8 #!/usr/bin/python3 M1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] M1_tr = [[row[i] for row in M1] for i in range(3)] print(M1_tr) \u8be5\u793a\u4f8b\u5b9a\u4e49\u4e00\u4e2a\u77e9\u9635\uff0c\u5217\u8868\u63a8\u5bfc\u4ece\u539f\u59cb\u77e9\u9635\u521b\u5efa\u4e00\u4e2a\u8f6c\u7f6e\u77e9\u9635\u3002 1 2 $ ./nested_list_comprehension.py [[1, 4, 7], [2, 5, 8], [3, 6, 9]] \u8fd9\u662f\u793a\u4f8b\u7684\u8f93\u51fa\u3002 Eratosthenes \u00b6 Eratosthenes \u7684\u7b5b\u5b50\u662f\u4e00\u79cd\u53e4\u8001\u7684\u8ba1\u7b97\u7d20\u6570\u7684\u7b97\u6cd5\u3002 \u8d28\u6570\uff08\u6216\u7d20\u6570\uff09\u662f\u5927\u4e8e 1 \u7684\u81ea\u7136\u6570\uff0c\u9664 1 \u53ca\u5176\u672c\u8eab\u5916\u6ca1\u6709\u9664\u6570\u3002 \u8be5\u7b97\u6cd5\u5c06\u6bcf\u4e2a\u7d20\u6570\u7684\u500d\u6570\u4ece 2 \u7684\u500d\u6570\u5f00\u59cb\u8fed\u4ee3\u6807\u8bb0\u4e3a\u590d\u5408\uff08\u5373\u4e0d\u662f\u7d20\u6570\uff09\u3002 sieve_of_eratosthenes.py 1 2 3 4 5 #!/usr/bin/python3 no_primes = [j for i in range(2, 8) for j in range(i*2, 100, i)] primes = [e for e in range(2, 100) if e not in no_primes] print (primes) \u8be5\u793a\u4f8b\u8ba1\u7b97\u7684\u8d28\u6570\u6700\u5927\u4e3a 100\u3002 1 no_primes = [j for i in range(2, 8) for j in range(i*2, 100, i)] \u9996\u5148\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u4e0d\u662f\u7d20\u6570\u7684\u6570\u5b57\u5217\u8868\u3002 1 primes = [e for e in range(2, 100) if e not in no_primes] \u8d28\u6570\u5c31\u662f\u8fd9\u4e9b\u6ca1\u6709\u5305\u542b\u5728 no_primes \u5217\u8868\u4e2d\u7684\u6570\u5b57\u3002 1 2 $ ./sieve_of_eratosthenes.py [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] \u8fd9\u662f\u8f93\u51fa\u3002 \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86 Python \u5217\u8868\u63a8\u5bfc\u3002","title":"Python \u5217\u8868\u63a8\u5bfc\u5f0f"},{"location":"pages/python/pytutorial/python-listcomprehensions/#Python-\u5217\u8868\u63a8\u5bfc\u5f0f","text":"\u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u5c06\u5b66\u4e60\u4f7f\u7528 Python \u5217\u8868\u63a8\u5bfc \u3002","title":"Python \u5217\u8868\u63a8\u5bfc\u5f0f"},{"location":"pages/python/pytutorial/python-listcomprehensions/#Python-\u5217\u8868\u63a8\u5bfc\u5f0f_1","text":"\u5217\u8868\u63a8\u5bfc\u5f0f\u662f\u4e00\u79cd\u57fa\u4e8e\u73b0\u6709\u5217\u8868\u521b\u5efa\u5217\u8868\u7684\u8bed\u6cd5\u7ed3\u6784\u3002 \u5217\u8868\u63a8\u5bfc\u5f0f\u4e3a\u521b\u5efa\u5217\u8868\u63d0\u4f9b\u4e86\u4e00\u79cd\u7b80\u6d01\u7684\u65b9\u6cd5\u3002 \u5e38\u89c1\u7684\u8981\u6c42\u662f\u521b\u5efa\u65b0\u5217\u8868\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u662f\u5e94\u7528\u4e8e\u53e6\u4e00\u5e8f\u5217\u7684\u6bcf\u4e2a\u6210\u5458\u6216\u53ef\u8fed\u4ee3\u7684\u67d0\u4e9b\u64cd\u4f5c\u7684\u7ed3\u679c\uff0c\u6216\u8005\u521b\u5efa\u6ee1\u8db3\u7279\u5b9a\u6761\u4ef6\u7684\u90a3\u4e9b\u5143\u7d20\u7684\u5b50\u5e8f\u5217\u3002","title":"Python \u5217\u8868\u63a8\u5bfc\u5f0f"},{"location":"pages/python/pytutorial/python-listcomprehensions/#Python-\u5217\u8868\u63a8\u5bfc\u5f0f\u7528\u6cd5","text":"\u5217\u8868\u63a8\u5bfc\u53ef\u7528\u4e8e\uff1a \u8f6c\u6362\u5217\u8868 \u7b5b\u9009\u5217\u8868 \u5217\u8868\u63a8\u5bfc\u5f0f\u7684\u8bed\u6cd5\u53d7\u96c6\u5408\u7684\u6570\u5b66\u7b26\u53f7\u7684\u5f71\u54cd\u3002 Python \u8bed\u6cd5\u53d7 Haskell \u7f16\u7a0b\u8bed\u8a00\u542f\u53d1\u3002 1 S = {x\u00b2 : x in {0 ... 16}} \u8fd9\u662f\u7528\u4e8e\u521b\u5efa\u4e00\u7ec4\u6574\u6570\u503c\u7684\u6570\u5b66\u7b26\u53f7\u3002 1 L = [expression for variable in sequence [if condition]] \u4e0a\u9762\u7684\u4f2a\u4ee3\u7801\u663e\u793a\u4e86\u5217\u8868\u63a8\u5bfc\u5f0f\u7684\u8bed\u6cd5\u3002 \u5b83\u7531\u4e09\u90e8\u5206\u7ec4\u6210\uff1afor \u5faa\u73af\uff0c\u53ef\u9009\u6761\u4ef6\u548c\u8868\u8fbe\u5f0f\u3002 for \u5faa\u73af\u904d\u5386\u6574\u4e2a\u5e8f\u5217\u3002 \u5bf9\u4e8e\u6bcf\u4e2a\u5faa\u73af\uff0c\u5982\u679c\u6ee1\u8db3\u6761\u4ef6\uff0c\u5219\u5bf9\u8868\u8fbe\u5f0f\u8fdb\u884c\u6c42\u503c\u3002 \u5982\u679c\u8ba1\u7b97\u51fa\u8be5\u503c\uff0c\u5b83\u5c06\u88ab\u6dfb\u52a0\u5230\u65b0\u5217\u8868\u4e2d\u3002 for \u5faa\u73af\u548c if \u6761\u4ef6\u53ef\u4ee5\u6709\u591a\u4e2a\u3002","title":"Python \u5217\u8868\u63a8\u5bfc\u5f0f\u7528\u6cd5"},{"location":"pages/python/pytutorial/python-listcomprehensions/#Python-\u5217\u8868\u63a8\u5bfc\u5f0f\u8f6c\u6362\u5217\u8868","text":"\u4e0b\u9762\u7684\u793a\u4f8b\u501f\u52a9\u5217\u8868\u63a8\u5bfc\u5f0f\u5c06\u4e00\u4e2a\u5217\u8868\u8f6c\u6362\u4e3a\u53e6\u4e00\u4e2a\u5217\u8868\u3002 multiply_elements.py 1 2 3 4 5 6 #!/usr/bin/python3 a = [1, 2, 3, 4, 5, 6] b = [e * 2 for e in a] print(b) \u5728\u7b2c\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u5c06\u6bcf\u4e2a\u5143\u7d20\u4e58\u4ee5 2 \u4ece\u73b0\u6709\u5217\u8868\u4e2d\u521b\u5efa\u4e00\u4e2a\u65b0\u5217\u8868\u3002 1 b = [e * 2 for e in a] \u5c06 a \u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4e58\u4ee5 2\uff0c\u5e76\u5c06\u7ed3\u679c\u6dfb\u52a0\u5230\u65b0\u7684 b \u5217\u8868\u4e2d\u3002 1 2 $ ./multiply_elements.py [2, 4, 6, 8, 10, 12] \u6bcf\u4e2a\u5143\u7d20\u90fd\u4e58\u4ee5 2\u3002","title":"Python \u5217\u8868\u63a8\u5bfc\u5f0f\u8f6c\u6362\u5217\u8868"},{"location":"pages/python/pytutorial/python-listcomprehensions/#\u4ece\u6444\u6c0f\u8ba1\u7b97\u534e\u6c0f\u6e29\u5ea6","text":"\u6211\u4eec\u6709\u6444\u6c0f\u6e29\u5ea6\u7684\u5217\u8868\u3002 \u6211\u4eec\u8981\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6e29\u5ea6\u8868\uff0c\u4ee5\u534e\u6c0f\u6e29\u5ea6\u8868\u793a\u3002 fahrenheit_celsius.py 1 2 3 4 5 6 #!/usr/bin/python3 celsius = [22, 28, 33, 42, 52] fahr = [e * 9/5 + 32 for e in celsius] print(fahr) \u8be5\u793a\u4f8b\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u534e\u6c0f\u6e29\u5ea6\u5217\u8868\uff0c\u8be5\u5217\u8868\u662f\u6839\u636e\u6444\u6c0f\u6e29\u5ea6\u5217\u8868\u8ba1\u7b97\u5f97\u51fa\u7684\u3002 1 fahr = [e * 9/5 + 32 for e in celsius] \u8ba1\u7b97\u662f\u5728 Python \u5217\u8868\u63a8\u5bfc\u7684\u7b2c\u4e09\u4e2a\u8868\u8fbe\u5f0f\u90e8\u5206\u4e2d\u5b8c\u6210\u7684\u3002 1 2 $ ./fahrenheit_celsius.py [71.6, 82.4, 91.4, 107.6, 125.6] \u8fd9\u662f\u793a\u4f8b\u7684\u8f93\u51fa\u3002","title":"\u4ece\u6444\u6c0f\u8ba1\u7b97\u534e\u6c0f\u6e29\u5ea6"},{"location":"pages/python/pytutorial/python-listcomprehensions/#Python-\u5217\u8868\u63a8\u5bfc\u5f0f\u8fc7\u6ee4\u5217\u8868","text":"\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u5217\u8868\u63a8\u5bfc\u5f0f\u6765\u8fc7\u6ee4\u5217\u8868\u3002 filter_positive.py 1 2 3 4 5 6 #!/usr/bin/python3 a = [-4, 2, 0, -1, 12, -3] b = [e for e in a if e > 0] print(b) \u6211\u4eec\u6709\u4e00\u4e2a\u6574\u6570\u5217\u8868\u3002 \u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u4ec5\u5305\u542b\u6b63\u6574\u6570\u7684\u65b0\u5217\u8868\u3002 1 b = [e for e in a if e > 0] \u4e3a\u4e86\u53ea\u5305\u542b\u6b63\u6570\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 if \u6761\u4ef6\uff0c\u8be5\u6761\u4ef6\u5e94\u7528\u4e8e\u6bcf\u4e2a\u5143\u7d20\u3002 \u4ec5\u5f53\u6ee1\u8db3\u6761\u4ef6\u7684\u5143\u7d20\u624d\u5305\u542b\u5728\u65b0\u5217\u8868\u4e2d\u3002 1 2 $ ./filter_positive.py [2, 12] \u8fd9\u662f\u793a\u4f8b\u7684\u8f93\u51fa\u3002 \u4e0b\u4e00\u4e2a\u793a\u4f8b\u6309\u5143\u7d20\u7c7b\u578b\u8fc7\u6ee4\u5143\u7d20\u3002 filter_by_type.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/python3 a = ['a', 2, 'c', 12, 3, 'd'] b = [e for e in a if type(e) == int] c = [e for e in a if type(e) == str] print(b) print(c) \u6211\u4eec\u6709\u4e00\u4e2a\u5143\u7d20\u5217\u8868\uff0c\u5b83\u4eec\u662f\u6574\u6570\u548c\u5b57\u7b26\u4e32\u3002 \u6211\u4eec\u521b\u5efa\u4e24\u4e2a\u65b0\u5217\u8868\uff1b \u4e00\u4e2a\u53ea\u6709\u6574\u6570\uff0c\u53ea\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 1 b = [e for e in a if type(e) == int] \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u5217\u8868 b \uff0c\u5b83\u5c06\u4ec5\u5305\u542b\u6574\u6570\u503c\u3002 type() \u529f\u80fd\u7528\u4e8e\u786e\u5b9a\u5143\u7d20\u7684\u7c7b\u578b\u3002 1 2 3 $ ./filter_by_type.py [2, 12, 3] ['a', 'c', 'd'] \u8fd9\u662f\u793a\u4f8b\u7684\u8f93\u51fa\u3002","title":"Python \u5217\u8868\u63a8\u5bfc\u5f0f\u8fc7\u6ee4\u5217\u8868"},{"location":"pages/python/pytutorial/python-listcomprehensions/#Python-\u5217\u8868\u63a8\u5bfc\u5f0f\u591a\u4e2aif\u6761\u4ef6","text":"Python \u5217\u8868\u63a8\u5bfc\u4e2d\u7684\u6761\u4ef6\u53ef\u4ee5\u4f7f\u7528\u591a\u4e2a\u3002 multiple_conditions.py 1 2 3 4 5 6 #!/usr/bin/python3 a = [9, 2, 18, 14, 22, 11, 7, 19, 23] b = [e for e in a if e > 10 if e < 20] print(b) \u6211\u4eec\u4ece\u5217\u8868 a \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6574\u6570\u5217\u8868\uff0c\u5b83\u4eec\u5927\u4e8e 10 \u4e14\u5c0f\u4e8e 20\u3002 1 b = [e for e in a if e > 10 if e < 20] \u5728\u6b64\u5217\u8868\u63a8\u5bfc\u5f0f\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e24\u4e2a if \u6761\u4ef6\u3002 1 2 $ ./multiple_conditions.py [18, 14, 11, 19] \u8fd9\u662f\u793a\u4f8b\u7684\u8f93\u51fa\u3002","title":"Python \u5217\u8868\u63a8\u5bfc\u5f0f\u591a\u4e2aif\u6761\u4ef6"},{"location":"pages/python/pytutorial/python-listcomprehensions/#Python-\u5217\u8868\u63a8\u5bfc\u5f0f\u591a\u4e2afor\u5faa\u73af","text":"Python \u5217\u8868\u63a8\u5bfc\u4e2d\u53ef\u80fd\u6709\u591a\u4e2a for \u5faa\u73af\u3002 multiple_for_loops.py 1 2 3 4 5 6 7 #!/usr/bin/python3 a = [1, 2, 3] b = ['A', 'B', 'C'] c = [ str(i) + j for i in a for j in b] print(c) \u8be5\u793a\u4f8b\u521b\u5efa\u4e24\u4e2a\u5217\u8868\u7684\u7b1b\u5361\u5c14\u4e58\u79ef\u3002 1 c = [ str(i) + j for i in a for j in b] \u4e24\u4e2a for \u5faa\u73af\u7528\u4e8e\u521b\u5efa\u7b1b\u5361\u5c14\u4e58\u79ef\u3002 1 2 $ ./multiple_for_loops.py ['1A', '1B', '1C', '2A', '2B', '2C', '3A', '3B', '3C'] \u8fd9\u662f\u793a\u4f8b\u7684\u8f93\u51fa\u3002 \u4e0b\u4e00\u4e2a\u793a\u4f8b\u663e\u793a\u5982\u4f55\u5c55\u5e73 Python \u5217\u8868\u3002 flatten_list.py 1 2 3 4 5 6 #!/usr/bin/python3 nums = [[1, 2, 3], [3, 4, 5], [6, 7, 8]] c = [ e for num in nums for e in num] print(c) nums \u5217\u8868\u662f\u5d4c\u5957\u5217\u8868\u7684\u5217\u8868\u3002 \u6211\u4eec\u7528\u5217\u8868\u63a8\u5bfc\u5f0f\u6765\u4f7f\u5217\u8868\u6241\u5e73\u5316\u3002 1 c = [ e for num in nums for e in num] \u7b2c\u4e00\u4e2a\u5faa\u73af\u904d\u5386\u5916\u90e8\u5217\u8868\u3002 \u7b2c\u4e8c\u4e2a for \u5faa\u73af\u904d\u5386\u5d4c\u5957\u5217\u8868\u3002 1 2 $ ./flatten_list.py [1, 2, 3, 3, 4, 5, 6, 7, 8] \u8fd9\u662f\u793a\u4f8b\u7684\u8f93\u51fa\u3002","title":"Python \u5217\u8868\u63a8\u5bfc\u5f0f\u591a\u4e2afor\u5faa\u73af"},{"location":"pages/python/pytutorial/python-listcomprehensions/#Python-\u5d4c\u5957\u5217\u8868\u63a8\u5bfc\u5f0f","text":"Python \u5217\u8868\u63a8\u5bfc\u5f0f\u4e2d\u7684\u521d\u59cb\u8868\u8fbe\u5f0f\u53ef\u4ee5\u662f\u53e6\u4e00\u4e2a\u5217\u8868\u63a8\u5bfc\u5f0f\u3002 nested_list_comprehension.py 1 2 3 4 5 6 7 8 #!/usr/bin/python3 M1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] M1_tr = [[row[i] for row in M1] for i in range(3)] print(M1_tr) \u8be5\u793a\u4f8b\u5b9a\u4e49\u4e00\u4e2a\u77e9\u9635\uff0c\u5217\u8868\u63a8\u5bfc\u4ece\u539f\u59cb\u77e9\u9635\u521b\u5efa\u4e00\u4e2a\u8f6c\u7f6e\u77e9\u9635\u3002 1 2 $ ./nested_list_comprehension.py [[1, 4, 7], [2, 5, 8], [3, 6, 9]] \u8fd9\u662f\u793a\u4f8b\u7684\u8f93\u51fa\u3002","title":"Python \u5d4c\u5957\u5217\u8868\u63a8\u5bfc\u5f0f"},{"location":"pages/python/pytutorial/python-listcomprehensions/#Eratosthenes","text":"Eratosthenes \u7684\u7b5b\u5b50\u662f\u4e00\u79cd\u53e4\u8001\u7684\u8ba1\u7b97\u7d20\u6570\u7684\u7b97\u6cd5\u3002 \u8d28\u6570\uff08\u6216\u7d20\u6570\uff09\u662f\u5927\u4e8e 1 \u7684\u81ea\u7136\u6570\uff0c\u9664 1 \u53ca\u5176\u672c\u8eab\u5916\u6ca1\u6709\u9664\u6570\u3002 \u8be5\u7b97\u6cd5\u5c06\u6bcf\u4e2a\u7d20\u6570\u7684\u500d\u6570\u4ece 2 \u7684\u500d\u6570\u5f00\u59cb\u8fed\u4ee3\u6807\u8bb0\u4e3a\u590d\u5408\uff08\u5373\u4e0d\u662f\u7d20\u6570\uff09\u3002 sieve_of_eratosthenes.py 1 2 3 4 5 #!/usr/bin/python3 no_primes = [j for i in range(2, 8) for j in range(i*2, 100, i)] primes = [e for e in range(2, 100) if e not in no_primes] print (primes) \u8be5\u793a\u4f8b\u8ba1\u7b97\u7684\u8d28\u6570\u6700\u5927\u4e3a 100\u3002 1 no_primes = [j for i in range(2, 8) for j in range(i*2, 100, i)] \u9996\u5148\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u4e0d\u662f\u7d20\u6570\u7684\u6570\u5b57\u5217\u8868\u3002 1 primes = [e for e in range(2, 100) if e not in no_primes] \u8d28\u6570\u5c31\u662f\u8fd9\u4e9b\u6ca1\u6709\u5305\u542b\u5728 no_primes \u5217\u8868\u4e2d\u7684\u6570\u5b57\u3002 1 2 $ ./sieve_of_eratosthenes.py [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] \u8fd9\u662f\u8f93\u51fa\u3002 \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86 Python \u5217\u8868\u63a8\u5bfc\u3002","title":"Eratosthenes"},{"location":"pages/python/pytutorial/python-lists/","text":"Python \u5217\u8868 \u00b6 \u5217\u8868\u662f\u503c\u7684\u6709\u5e8f\u96c6\u5408\uff0c \u5b83\u53ef\u4ee5\u5305\u542b\u5404\u79cd\u7c7b\u578b\u7684\u503c\u3002 \u5217\u8868\u662f\u53ef\u53d8\u5bb9\u5668\uff0c \u8fd9\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u6dfb\u52a0\u503c\uff0c\u5220\u9664\u503c\u6216\u4fee\u6539\u73b0\u6709\u503c\u3002 Python \u5217\u8868\u8868\u793a\u6709\u9650\u5e8f\u5217\u7684\u6570\u5b66\u6982\u5ff5\uff0c\u5217\u8868\u7684\u503c\u79f0\u4e3a\u5217\u8868\u7684\u9879\u76ee\u6216\u5143\u7d20\u3002 \u5217\u8868\u53ef\u4ee5\u591a\u6b21\u5305\u542b\u76f8\u540c\u7684\u503c\uff0c \u6bcf\u6b21\u51fa\u73b0\u90fd\u88ab\u89c6\u4e3a\u4e0d\u540c\u7684\u9879\u76ee\u3002 Python \u5217\u8868\u7d22\u5f15 \u00b6 \u5217\u8868\u5143\u7d20\u53ef\u4ee5\u901a\u8fc7\u5176\u7d22\u5f15\u8fdb\u884c\u8bbf\u95ee\u3002 \u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u7d22\u5f15\u4e3a 0\uff0c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u7d22\u5f15\u4e3a-1\u3002 simple.py 1 2 3 4 5 6 #!/usr/bin/env python # simple.py nums = [1, 2, 3, 4, 5] print(nums) \u8fd9\u662f\u4e00\u4e2a\u5305\u542b\u4e94\u4e2a\u5143\u7d20\u7684\u7b80\u5355\u5217\u8868\u3002 \u8be5\u5217\u8868\u7531\u65b9\u62ec\u53f7 [] \u5206\u9694\u3002 \u5217\u8868\u7684\u5143\u7d20\u7531\u9017\u53f7\u5206\u9694\u3002 \u5217\u8868\u7684\u5185\u5bb9\u5c06\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 2 $ ./simple.py [1, 2, 3, 4, 5] \u5217\u8868\u53ef\u4ee5\u5305\u542b\u5404\u79cd\u6570\u636e\u7c7b\u578b\u7684\u5143\u7d20\u3002 various_types.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python # various_types.py class Being: pass objects = [1, -2, 3.4, None, False, [1, 2], \"Python\", (2, 3), Being(), {}] print(objects) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61\u5217\u8868\u3002 \u5b83\u5305\u542b\u6570\u5b57\uff0c\u5e03\u5c14\u503c\uff0c\u53e6\u4e00\u4e2a\u5217\u8868\uff0c\u5b57\u7b26\u4e32\uff0c\u5143\u7ec4\uff0c\u81ea\u5b9a\u4e49\u5bf9\u8c61\u548c\u5b57\u5178\u3002 1 2 3 $ ./various_types.py [1, -2, 3.4, None, False, [1, 2], 'Python', (2, 3), <__main__.Being instance at 0x7f653577f6c8>, {}] Python \u5217\u8868\u521d\u59cb\u5316 \u00b6 \u6709\u65f6\u6211\u4eec\u9700\u8981\u9884\u5148\u521d\u59cb\u5316\u4e00\u4e2a\u5217\u8868\u4ee5\u5177\u6709\u7279\u5b9a\u6570\u91cf\u7684\u5143\u7d20\u3002 initialization.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python n1 = [0 for i in range(15)] n2 = [0] * 15 print(n1) print(n2) n1[0:11] = [10] * 10 print(n1) \u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u5217\u8868\u63a8\u5bfc\u548c*\u8fd0\u7b97\u7b26\u521d\u59cb\u5316\u4e86\u4e24\u4e2a\u5217\u8868\u3002 1 2 n1 = [0 for i in range(15)] n2 = [0] * 15 \u8fd9\u4e24\u4e2a\u5217\u8868\u88ab\u521d\u59cb\u5316\u4e3a\u5341\u4e94\u4e2a\u96f6\u3002 1 n1[0:11] = [10] * 10 \u524d\u5341\u4e2a\u503c\u5c06\u66ff\u6362\u4e3a 10s\u3002 1 2 3 4 $ ./initialization.py [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 0, 0, 0, 0] Python \u5217\u8868\u51fd\u6570 \u00b6 list() \u51fd\u6570\u4ece\u53ef\u8fed\u4ee3\u5bf9\u8c61\u521b\u5efa\u5217\u8868\u3002 \u53ef\u8fed\u4ee3\u7684\u5bf9\u8c61\u53ef\u4ee5\u662f\u5e8f\u5217\uff0c\u652f\u6301\u8fed\u4ee3\u7684\u5bb9\u5668\u6216\u8fed\u4ee3\u5668\u5bf9\u8c61\u3002 \u5982\u679c\u672a\u6307\u5b9a\u4efb\u4f55\u53c2\u6570\uff0c\u5219\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7a7a\u5217\u8868\u3002 list_fun.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python # list_fun.py a = [] b = list() print(a == b) print(list((1, 2, 3))) print(list(\"ZetCode\")) print(list(['Ruby', 'Python', 'Perl'])) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u7a7a\u5217\u8868\uff0c\u4e00\u4e2a\u5143\u7ec4\u5217\u8868\uff0c\u4e00\u4e2a\u5b57\u7b26\u4e32\u548c\u53e6\u4e00\u4e2a\u5217\u8868\u3002 1 2 a = [] b = list() \u8fd9\u662f\u521b\u5efa\u7a7a\u5217\u8868\u7684\u4e24\u79cd\u65b9\u6cd5\u3002 1 print(a == b) \u8be5\u884c\u6253\u5370 True \u3002 \u8fd9\u8bc1\u5b9e\u4e86 a \u548c b \u76f8\u7b49\u3002 1 print(list((1, 2, 3))) \u6211\u4eec\u4ece Python \u5143\u7ec4\u521b\u5efa\u4e00\u4e2a\u5217\u8868\u3002 1 print(list(\"ZetCode\")) \u8be5\u884c\u4ece\u5b57\u7b26\u4e32\u751f\u6210\u5217\u8868\u3002 1 print(list(['Ruby', 'Python', 'Perl'])) \u6700\u540e\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u5b57\u7b26\u4e32\u5217\u8868\u7684\u526f\u672c\u3002 1 2 3 4 5 $ ./list_fun.py True [1, 2, 3] ['Z', 'e', 't', 'C', 'o', 'd', 'e'] ['Ruby', 'Python', 'Perl'] Python \u5217\u8868\u64cd\u4f5c \u00b6 \u4ee5\u4e0b\u4ee3\u7801\u663e\u793a\u4e86\u4e00\u4e9b\u57fa\u672c\u7684\u5217\u8868\u64cd\u4f5c\u3002 list_oper.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/env python # list_oper.py n1 = [1, 2, 3, 4, 5] n2 = [3, 4, 5, 6, 7] print(n1 == n2) print(n1 + n2) print(n1 * 3) print(2 in n1) print(2 in n2) \u6211\u4eec\u5b9a\u4e49\u4e86\u4e24\u4e2a\u6574\u6570\u5217\u8868\u3002 \u6211\u4eec\u5728\u8fd9\u4e9b\u5217\u8868\u4e0a\u4f7f\u7528\u4e00\u4e9b\u8fd0\u7b97\u7b26\u3002 1 print(n1 == n2) \u5217\u8868\u7684\u5185\u5bb9\u4e0e == \u8fd0\u7b97\u7b26\u8fdb\u884c\u6bd4\u8f83\u3002 \u7531\u4e8e\u5143\u7d20\u4e0d\u540c\uff0c\u8be5\u884c\u6253\u5370 False \u3002 1 print(n1 + n2) \u6dfb\u52a0 n1 \u548c n2 \u5217\u8868\u4ee5\u5f62\u6210\u65b0\u5217\u8868\u3002 \u65b0\u5217\u8868\u5305\u542b\u4e24\u4e2a\u5217\u8868\u7684\u6240\u6709\u5143\u7d20\u3002 1 print(n1 * 3) \u6211\u4eec\u5728\u5217\u8868\u4e0a\u4f7f\u7528\u4e58\u6cd5\u8fd0\u7b97\u7b26\u3002 \u5b83\u91cd\u590d\u5143\u7d20 n \u6b21\uff1b \u5728\u6211\u4eec\u7684\u60c5\u51b5\u4e0b\u662f\u4e09\u904d\u3002 1 print(2 in n1) \u6211\u4eec\u4f7f\u7528 in \u8fd0\u7b97\u7b26\u6765\u627e\u51fa\u5217\u8868\u4e2d\u662f\u5426\u5b58\u5728\u8be5\u503c\u3002 \u5b83\u8fd4\u56de\u5e03\u5c14\u503c True \u6216 False \u3002 1 2 3 4 5 6 $ ./lists.py False [1, 2, 3, 4, 5, 3, 4, 5, 6, 7] [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] True False Python \u5e8f\u5217\u51fd\u6570 \u00b6 \u5e8f\u5217\u51fd\u6570\u53ef\u7528\u4e8e\u4efb\u4f55\u5e8f\u5217\u7c7b\u578b\uff0c\u5305\u62ec\u5217\u8868\u3002 sequence_funs.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python # sequence_funs.py n = [1, 2, 3, 4, 5, 6, 7, 8] print(\"There are {0} items\".format(len(n))) print(\"Maximum is {0}\".format(max(n))) print(\"Minimum is {0}\".format(min(n))) print(\"The sum of values is {0}\".format(sum(n))) \u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5177\u6709\u56db\u4e2a\u51fd\u6570\uff1a len() \uff0c max() \uff0c min() \u548c sum() \u3002 1 print(\"There are {0} items\".format(len(n))) len() \u51fd\u6570\u8fd4\u56de\u5217\u8868\u7684\u5927\u5c0f\u3002 \u5217\u8868\u4e2d\u5143\u7d20\u7684\u6570\u91cf\u3002 1 2 print(\"Maximum is {0}\".format(max(n))) print(\"Minimum is {0}\".format(min(n))) max() \u548c min() \u51fd\u6570\u8fd4\u56de\u5217\u8868\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u3002 1 print(\"The sum of values is {0}\".format(sum(n))) sum() \u51fd\u6570\u8ba1\u7b97 n \u5217\u8868\u4e2d\u6570\u5b57\u7684\u603b\u548c\u3002 1 2 3 4 5 $ ./sequence_funs.py There are 8 items Maximum is 8 Minimum is 1 The sum of values is 36 Python \u6dfb\u52a0\u5217\u8868\u5143\u7d20 \u00b6 \u672c\u8282\u5c06\u663e\u793a\u5982\u4f55\u5c06\u5143\u7d20\u6dfb\u52a0\u5230 Python \u5217\u8868\u4e2d\u3002 adding.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/env python # adding.py langs = [] langs.append(\"Python\") langs.append(\"Perl\") print(langs) langs.insert(0, \"PHP\") langs.insert(2, \"Lua\") print(langs) langs.extend((\"JavaScript\", \"ActionScript\")) print(langs) \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e09\u79cd\u65b9\u6cd5\u5c06\u65b0\u5143\u7d20\u6dfb\u52a0\u5230\u5217\u8868\u4e2d\uff1a append() \uff0c insert() \u548c extend() \u3002 1 langs = [] \u521b\u5efa\u4e00\u4e2a\u7a7a\u5217\u8868\u3002 1 2 langs.append(\"Python\") langs.append(\"Perl\") append() \u65b9\u6cd5\u5c06\u4e00\u4e2a\u9879\u76ee\u6dfb\u52a0\u5230\u5217\u8868\u7684\u672b\u5c3e\uff1b \u6211\u4eec\u9644\u52a0\u4e24\u4e2a\u5b57\u7b26\u4e32\u3002 1 2 langs.insert(0, \"PHP\") langs.insert(2, \"Lua\") insert() \u65b9\u6cd5\u5c06\u5143\u7d20\u653e\u7f6e\u5728\u7d22\u5f15\u53f7\u6307\u793a\u7684\u7279\u5b9a\u4f4d\u7f6e\u3002 \"PHP\" \u5b57\u7b26\u4e32\u63d2\u5165\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\uff0c \"Lua\" \u5b57\u7b26\u4e32\u63d2\u5165\u7b2c\u4e09\u4e2a\u4f4d\u7f6e\u3002 \u8bf7\u6ce8\u610f\uff0c\u5217\u8868\u7d22\u5f15\u53f7\u4ece\u96f6\u5f00\u59cb\u3002 1 langs.extend((\"JavaScript\", \"ActionScript\")) extend() \u65b9\u6cd5\u5c06\u503c\u7684\u5e8f\u5217\u6dfb\u52a0\u5230\u5217\u8868\u7684\u672b\u5c3e\u3002 \u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u4e24\u4e2a Python \u5143\u7ec4\u5b57\u7b26\u4e32\u9644\u52a0\u5728\u5217\u8868\u7684\u672b\u5c3e\u3002 1 2 3 4 $ ./adding.py ['Python', 'Perl'] ['PHP', 'Python', 'Lua', 'Perl'] ['PHP', 'Python', 'Lua', 'Perl', 'JavaScript', 'ActionScript'] IndexError \u00b6 \u5217\u8868\u4e0b\u6807\u8d85\u51fa\u8303\u56f4\u65f6\uff0c\u5c06\u5f15\u53d1 IndexError \u3002 index_error.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/env python # index_error.py n = [1, 2, 3, 4, 5] try: n[0] = 10 n[6] = 60 except IndexError as e: print(e) \u5728\u811a\u672c\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5305\u542b\u4e94\u4e2a\u6574\u6570\u7684\u5217\u8868\u3002 \u8fd9\u4e9b\u5143\u7d20\u7684\u7d22\u5f15\u5206\u522b\u4e3a 0\u30011\u30012\u30013 \u548c 4\u3002\u4f7f\u7528\u8f83\u5927\u7684\u7d22\u5f15\u4f1a\u5bfc\u81f4\u9519\u8bef\u3002 1 n[6] = 60 \u7d22\u5f15 6 \u8d85\u51fa\u4e86\u6211\u4eec\u7684\u5217\u8868\u8303\u56f4\u3002 \u629b\u51fa IndexError \u3002 1 2 3 except IndexError as e: print(e) \u6211\u4eec\u4f7f\u7528 except \u5b50\u53e5\u6355\u83b7\u9519\u8bef\u3002 \u5728\u5b50\u53e5\u7684\u6b63\u6587\u4e2d\uff0c\u6211\u4eec\u663e\u793a\u9519\u8bef\u6d88\u606f\u3002 1 2 $ ./index_error.py list assignment index out of range TypeError \u00b6 \u5982\u679c\u5143\u7ec4\u7684\u7d22\u5f15\u4e0d\u662f\u7eaf\u6574\u6570\uff0c\u5219\u4f1a\u629b\u51fa TypeError \u3002 type_error.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/env python # type_error.py n = [1, 2, 3, 4, 5] try: print(n[1]) print(n['2']) except TypeError as e: print(\"Error in file {0}\".format( __file__)) print(\"Message: {0}\".format(e)) \u672c\u793a\u4f8b\u629b\u51fa\u4e00\u4e2a TypeError \u3002 1 print(n['2']) \u5217\u8868\u7d22\u5f15\u5fc5\u987b\u662f\u6574\u6570\u3002 \u5176\u4ed6\u7c7b\u578b\u4ee5\u9519\u8bef\u7ed3\u5c3e\u3002 1 2 3 4 except TypeError as e: print(\"Error in file {0}\".format( __file__)) print(\"Message: {0}\".format(e)) \u5728 except \u5757\u4e2d\uff0c\u6211\u4eec\u6253\u5370\u53d1\u751f\u5f02\u5e38\u7684\u6587\u4ef6\u540d\u548c\u6d88\u606f\u5b57\u7b26\u4e32\u3002 1 2 3 4 $ ./typeerror.py 2 Error in file ./typeerror.py Message: list indices must be integers, not str \u4ece Python \u5217\u8868\u4e2d\u5220\u9664\u5143\u7d20 \u00b6 \u4ee5\u524d\uff0c\u6211\u4eec\u5df2\u5c06\u9879\u76ee\u6dfb\u52a0\u5230\u5217\u8868\u4e2d\u3002 \u73b0\u5728\uff0c\u6211\u4eec\u5c06\u4ece\u5217\u8868\u4e2d\u5220\u9664\u5b83\u4eec\u3002 removing.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env python # removing.py langs = [\"Python\", \"Ruby\", \"Perl\", \"Lua\", \"JavaScript\"] print(langs) lang = langs.pop(3) print(\"{0} was removed\".format(lang)) lang = langs.pop() print(\"{0} was removed\".format(lang)) print(langs) langs.remove(\"Ruby\") print(langs) pop() \u65b9\u6cd5\u5220\u9664\u5e76\u8fd4\u56de\u5177\u6709\u6307\u5b9a\u7d22\u5f15\u7684\u5143\u7d20\uff0c\u5982\u679c\u6ca1\u6709\u7ed9\u51fa\u7d22\u5f15\u53f7\uff0c\u5219\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002 remove() \u65b9\u6cd5\u4ece\u5217\u8868\u4e2d\u5220\u9664\u7279\u5b9a\u9879\u76ee\u3002 1 2 lang = langs.pop(3) print(\"{0} was removed\".format(lang)) \u6211\u4eec\u5220\u9664\u5177\u6709\u7d22\u5f15 3 \u7684\u5143\u7d20\u3002 pop() \u65b9\u6cd5\u8fd4\u56de\u5df2\u5220\u9664\u5143\u7d20\u7684\u540d\u79f0\uff1b \u5b83\u88ab\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 2 lang = langs.pop() print(\"{0} was removed\".format(lang)) \u5217\u8868\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u5373 \"JavaScript\" \u5b57\u7b26\u4e32\uff0c\u4ece\u5217\u8868\u4e2d\u5220\u9664\u3002 1 langs.remove(\"Ruby\") \u6b64\u884c\u4ece langs \u5217\u8868\u4e2d\u5220\u9664 \"Ruby\" \u5b57\u7b26\u4e32\u3002 1 2 3 4 5 ['Python', 'Ruby', 'Perl', 'Lua', 'JavaScript'] Lua was removed JavaScript was removed ['Python', 'Ruby', 'Perl'] ['Python', 'Perl'] \u4ece\u811a\u672c\u7684\u8f93\u51fa\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6240\u63cf\u8ff0\u65b9\u6cd5\u7684\u6548\u679c\u3002 del \u5173\u952e\u5b57\u4e5f\u53ef\u7528\u4e8e\u5220\u9664\u5217\u8868\u5143\u7d20\u3002 removing2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/env python # removing2.py langs = [\"Python\", \"Ruby\", \"Perl\", \"Lua\", \"JavaScript\"] print(langs) del langs[1] print(langs) #del langs[15] del langs[:] print(langs) \u6211\u4eec\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32\u5217\u8868\u3002 \u6211\u4eec\u4f7f\u7528 del \u5173\u952e\u5b57\u5220\u9664\u5217\u8868\u5143\u7d20\u3002 1 del langs[1] \u6211\u4eec\u4ece\u5217\u8868\u4e2d\u5220\u9664\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\u3002 \u5b83\u662f \"Ruby\" \u5b57\u7b26\u4e32\u3002 1 #del langs[15] \u6211\u4eec\u53ea\u80fd\u5220\u9664\u73b0\u6709\u5143\u7d20\u3002 \u5982\u679c\u53d6\u6d88\u6ce8\u91ca\u4ee3\u7801\u884c\uff0c\u6211\u4eec\u5c06\u6536\u5230 IndexError \u6d88\u606f\u3002 1 del langs[:] \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4ece\u5217\u8868\u4e2d\u5220\u9664\u6240\u6709\u5269\u4f59\u7684\u5143\u7d20\u3002 [:] \u5b57\u7b26\u8868\u793a\u5217\u8868\u7684\u6240\u6709\u9879\u76ee\u3002 1 2 3 4 $ ./removing2.py ['Python', 'Ruby', 'Perl', 'Lua', 'JavaScript'] ['Python', 'Perl', 'Lua', 'JavaScript'] [] Python \u4fee\u6539\u5217\u8868\u5143\u7d20 \u00b6 \u5728\u4e0b\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u4fee\u6539\u5217\u8868\u5143\u7d20\u3002 modifying.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python # modifying.py langs = [\"Python\", \"Ruby\", \"Perl\"] langs.pop(2) langs.insert(2, \"PHP\") print(langs) langs[2] = \"Perl\" print(langs) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4e24\u6b21\u4fee\u6539\u4e86 langs \u5217\u8868\u7684\u7b2c\u4e09\u4e2a\u5143\u7d20\u3002 1 2 langs.pop(2) langs.insert(2, \"PHP\") \u4fee\u6539\u5143\u7d20\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u5c06\u5176\u5220\u9664\uff0c\u7136\u540e\u5c06\u53e6\u4e00\u4e2a\u5143\u7d20\u653e\u7f6e\u5728\u540c\u4e00\u4f4d\u7f6e\u3002 1 langs[2] = \"Perl\" \u53e6\u4e00\u79cd\u65b9\u6cd5\u66f4\u7b80\u5355\u3002 \u6211\u4eec\u5728\u7ed9\u5b9a\u4f4d\u7f6e\u5206\u914d\u4e00\u4e2a\u65b0\u5143\u7d20\u3002 \u73b0\u5728\uff0c\u5728\u7b2c\u4e09\u4e2a\u4f4d\u7f6e\u518d\u6b21\u6709 \"Perl\" \u5b57\u7b26\u4e32\u3002 1 2 3 $ ./modifying.py ['Python', 'Ruby', 'PHP'] ['Python', 'Ruby', 'Perl'] Python \u590d\u5236\u5217\u8868 \u00b6 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u591a\u79cd\u65b9\u5f0f\u5728 Python \u4e2d\u590d\u5236\u5217\u8868\u3002 \u6211\u4eec\u5c06\u63d0\u53ca\u5176\u4e2d\u7684\u4e00\u4e9b\u3002 copying.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #!/usr/bin/env python # copying.py import copy w = [\"Python\", \"Ruby\", \"Perl\"] c1 = w[:] c2 = list(w) c3 = copy.copy(w) c4 = copy.deepcopy(w) c5 = [e for e in w] c6 = [] for e in w: c6.append(e) c7 = [] c7.extend(w) print(c1, c2, c3, c4, c5, c6, c7) \u6211\u4eec\u5217\u51fa\u4e86\u4e09\u4e2a\u5b57\u7b26\u4e32\u3002 \u6211\u4eec\u5c06\u5217\u8868\u590d\u5236\u4e86\u4e03\u6b21\u3002 1 import copy \u6211\u4eec\u5bfc\u5165 copy \u6a21\u5757\uff0c\u5176\u4e2d\u6709\u4e24\u79cd\u590d\u5236\u65b9\u6cd5\u3002 1 c1 = w[:] \u4f7f\u7528\u5207\u7247\u8bed\u6cd5\u590d\u5236\u5217\u8868\u3002 1 c2 = list(w) \u5f53 list() \u51fd\u6570\u5c06\u5217\u8868\u4f5c\u4e3a\u53c2\u6570\u65f6\uff0c\u5b83\u4f1a\u521b\u5efa\u4e00\u4e2a\u5217\u8868\u526f\u672c\u3002 1 2 c3 = copy.copy(w) c4 = copy.deepcopy(w) copy() \u65b9\u6cd5\u4ea7\u751f\u5217\u8868\u7684\u6d45\u8868\u526f\u672c\u3002 deepcopy() \u4ea7\u751f\u5217\u8868\u7684\u6df1\u5c42\u526f\u672c\u3002 1 c5 = [e for e in w] \u4f7f\u7528\u5217\u8868\u63a8\u5bfc\u521b\u5efa\u5b57\u7b26\u4e32\u7684\u526f\u672c\u3002 1 2 3 4 c6 = [] for e in w: c6.append(e) \u7531 for \u5faa\u73af\u521b\u5efa\u7684\u526f\u672c\u3002 1 2 c7 = [] c7.extend(w) extend() \u65b9\u6cd5\u4e5f\u53ef\u7528\u4e8e\u521b\u5efa\u526f\u672c\u3002 1 2 3 4 $ ./copying.py ['Python', 'Ruby', 'Perl'] ['Python', 'Ruby', 'Perl'] ['Python', 'Ruby', 'Perl'] ['Python', 'Ruby', 'Perl'] ['Python', 'Ruby', 'Perl'] ['Python', 'Ruby', 'Perl'] ['Python', 'Ruby', 'Perl'] \u4f7f\u7528\u4e0d\u540c\u7684\u6280\u672f\u521b\u5efa\u4e86\u4e00\u4e2a\u5b57\u7b26\u4e32\u5217\u8868\u7684\u4e03\u4e2a\u526f\u672c\u3002 Python \u7d22\u5f15\u5217\u8868\u5143\u7d20 \u00b6 Python \u5217\u8868\u4e2d\u7684\u5143\u7d20\u53ef\u4ee5\u901a\u8fc7\u5176\u7d22\u5f15\u8fdb\u884c\u8bbf\u95ee\u3002 \u7d22\u5f15\u53f7\u662f\u6574\u6570\uff1b \u4ed6\u4eec\u4ece\u96f6\u5f00\u59cb\u3002 \u7d22\u5f15\u53ef\u4ee5\u662f\u8d1f\u6570\uff1b \u8d1f\u7d22\u5f15\u662f\u6307\u5217\u8868\u672b\u5c3e\u7684\u5143\u7d20\u3002 \u5217\u8868\u4e2d\u7684\u7b2c\u4e00\u9879\u5177\u6709\u7d22\u5f15 0\uff0c\u6700\u540e\u4e00\u9879\u5177\u6709-1\u3002 indexing.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python # indexing.py n = [1, 2, 3, 4, 5, 6, 7, 8] print(n[0]) print(n[-1]) print(n[-2]) print(n[3]) print(n[5]) \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5176\u7d22\u5f15\u8bbf\u95ee\u5217\u8868\u7684\u5143\u7d20\u3002 \u7d22\u5f15\u4f4d\u4e8e\u5217\u8868\u540d\u79f0\u540e\u65b9\u62ec\u53f7 [] \u4e4b\u95f4\u3002 1 2 3 print(n[0]) print(n[-1]) print(n[-2]) \u8fd9\u4e09\u884c\u5c06\u6253\u5370\u5217\u8868\u7684\u7b2c\u4e00\uff0c\u6700\u540e\u548c\u6700\u540e\u4e00\u4e2a\u9879\u76ee\u3002 1 2 print(n[3]) print(n[5]) \u4e24\u884c\u663e\u793a\u5217\u8868\u7684\u7b2c\u56db\u548c\u7b2c\u516d\u4e2a\u5143\u7d20\u3002 1 2 3 4 5 6 $ ./indexing.py 1 8 7 4 6 index(e, start, end) \u65b9\u6cd5\u67e5\u627e\u7279\u5b9a\u5143\u7d20\u5e76\u8fd4\u56de\u5176\u6700\u4f4e\u7d22\u5f15\u3002 start \u548c end \u662f\u53ef\u9009\u53c2\u6570\uff0c\u5b83\u4eec\u5c06\u641c\u7d22\u9650\u5236\u5230\u7ed9\u5b9a\u7684\u8fb9\u754c\u3002 indexing2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/env python # indexing2.py n = [1, 2, 3, 4, 1, 2, 3, 1, 2] print(n.index(1)) print(n.index(2)) print(n.index(1, 1)) print(n.index(2, 2)) print(n.index(1, 2, 5)) print(n.index(3, 4, 8)) index() \u65b9\u6cd5\u7684\u4ee3\u7801\u793a\u4f8b\u3002 1 2 print(n.index(1)) print(n.index(2)) \u8fd9\u4e24\u884c\u663e\u793a n \u5217\u8868\u4e2d\u6700\u5de6\u8fb9\u7684 1\u30012 \u503c\u7684\u7d22\u5f15\u3002 1 2 print(n.index(1, 1)) print(n.index(2, 2)) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5728\u6307\u5b9a\u7d22\u5f15\u4e4b\u540e\u641c\u7d22\u503c 1 \u548c 2\u3002 1 print(n.index(1, 2, 5)) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5728\u7d22\u5f15\u4e3a 2 \u548c 5 \u7684\u503c\u4e4b\u95f4\u641c\u7d22\u503c 1\u3002 1 2 3 4 5 6 7 $ ./indexing2.py 0 1 4 5 4 6 Python \u5207\u7247\u5217\u8868 \u00b6 \u5217\u8868\u5207\u7247\u662f\u4e00\u79cd\u4ece\u5217\u8868\u4e2d\u63d0\u53d6\u67d0\u4e9b\u5143\u7d20\u5e76\u5c06\u5176\u5f62\u6210\u53e6\u4e00\u4e2a\u5217\u8868\u7684\u64cd\u4f5c\u3002 \u53ef\u80fd\u5177\u6709\u4e0d\u540c\u6570\u91cf\u7684\u7d22\u5f15\u548c\u4e0d\u540c\u7684\u7d22\u5f15\u8303\u56f4\u3002 \u5217\u8868\u5207\u7247\u7684\u8bed\u6cd5\u5982\u4e0b\uff1a 1 [start:end:step] \u8bed\u6cd5\u7684\u5f00\u59cb\uff0c\u7ed3\u675f\uff0c\u6b65\u9aa4\u90e8\u5206\u662f\u6574\u6570\u3002 \u5b83\u4eec\u6bcf\u4e2a\u90fd\u662f\u53ef\u9009\u7684\u3002 \u5b83\u4eec\u53ef\u4ee5\u662f\u6b63\u9762\u7684\u4e5f\u53ef\u4ee5\u662f\u8d1f\u9762\u7684\u3002 \u5177\u6709\u7ed3\u675f\u7d22\u5f15\u7684\u503c\u4e0d\u5305\u62ec\u5728\u5207\u7247\u4e2d\u3002 slice.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python # slice.py n = [1, 2, 3, 4, 5, 6, 7, 8] print(n[1:5]) print(n[:5]) print(n[1:]) print(n[:]) \u6211\u4eec\u4ece\u516b\u4e2a\u6574\u6570\u7684\u5217\u8868\u4e2d\u521b\u5efa\u56db\u4e2a\u5207\u7247\u3002 1 print(n[1:5]) \u7b2c\u4e00\u4e2a\u5207\u7247\u7684\u7d22\u5f15\u503c\u4e3a 1\u30012\u30013 \u548c 4\u3002\u65b0\u5f62\u6210\u7684\u5217\u8868\u4e3a[2\u30013\u30014\u30015]\u3002 1 print(n[:5]) \u5982\u679c\u7701\u7565\u8d77\u59cb\u7d22\u5f15\uff0c\u5219\u5047\u5b9a\u9ed8\u8ba4\u503c\u4e3a 0\u3002\u5207\u7247\u4e3a[1\u30012\u30013\u30014\u30015]\u3002 1 print(n[1:]) \u5982\u679c\u7701\u7565\u4e86\u7ed3\u675f\u7d22\u5f15\uff0c\u5219\u91c7\u7528-1 \u9ed8\u8ba4\u503c\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5207\u7247\u5c06\u6240\u6709\u503c\u5e26\u5230\u5217\u8868\u7684\u672b\u5c3e\u3002 1 print(n[:]) \u751a\u81f3\u4e24\u4e2a\u7d22\u5f15\u90fd\u53ef\u4ee5\u5ffd\u7565\u3002 \u6b64\u8bed\u6cd5\u521b\u5efa\u5217\u8868\u7684\u526f\u672c\u3002 1 2 3 4 5 $ ./slice.py [2, 3, 4, 5] [1, 2, 3, 4, 5] [2, 3, 4, 5, 6, 7, 8] [1, 2, 3, 4, 5, 6, 7, 8] \u793a\u4f8b\u7684\u8f93\u51fa\u3002 \u5207\u7247\u8bed\u6cd5\u4e2d\u7684\u7b2c\u4e09\u4e2a\u7d22\u5f15\u662f\u6b65\u9aa4\u3002 \u5b83\u5141\u8bb8\u6211\u4eec\u4ece\u5217\u8868\u4e2d\u83b7\u53d6\u7b2c n \u4e2a\u503c\u3002 slice2.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python # slice2.py n = [1, 2, 3, 4, 5, 6, 7, 8] print(n[1:9:2]) print(n[::2]) print(n[::1]) print(n[1::3]) \u6211\u4eec\u4f7f\u7528 step \u503c\u5f62\u6210\u56db\u4e2a\u65b0\u5217\u8868\u3002 1 print(n[1:9:2]) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u5207\u7247\uff0c\u8be5\u5207\u7247\u5177\u6709\u4ece n \u5217\u8868\u5f00\u59cb\u7684\u6bcf\u4e2a\u7b2c\u4e8c\u5143\u7d20\uff0c\u4ece\u7b2c\u4e8c\u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u4ee5\u7b2c\u516b\u4e2a\u5143\u7d20\u7ed3\u675f\u3002 \u65b0\u5217\u8868\u5177\u6709\u4ee5\u4e0b\u5143\u7d20\uff1a[2\u30014\u30016\u30018]\u3002 1 print(n[::2]) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u901a\u8fc7\u83b7\u53d6\u5217\u8868\u5f00\u5934\u5230\u7ed3\u5c3e\u7684\u6bcf\u4e2a\u7b2c\u4e8c\u4e2a\u503c\u6765\u6784\u5efa\u5207\u7247\u3002 1 print(n[::1]) \u8fd9\u5c06\u521b\u5efa\u4e00\u4e2a\u5217\u8868\u7684\u526f\u672c\u3002 1 print(n[1::3]) \u5207\u7247\u5177\u6709\u7b2c\u4e8c\u4e2a\u5143\u7d20\uff0c\u4ece\u7b2c\u4e8c\u4e2a\u5143\u7d20\u5230\u5217\u8868\u7684\u672b\u5c3e\u3002 1 2 3 4 5 $ ./slice2.py [2, 4, 6, 8] [1, 3, 5, 7] [1, 2, 3, 4, 5, 6, 7, 8] [2, 5, 8] \u7d22\u5f15\u53ef\u4ee5\u662f\u8d1f\u6570\u3002 \u8d1f\u7d22\u5f15\u662f\u6307\u5217\u8868\u672b\u5c3e\u7684\u503c\u3002 \u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u7d22\u5f15\u4e3a-1\uff0c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u7d22\u5f15\u4e3a-2\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\u8d1f\u6570\u8f83\u5c0f\u7684\u7d22\u5f15\u5fc5\u987b\u5728\u8bed\u6cd5\u4e2d\u6392\u5728\u9996\u4f4d\u3002 \u8fd9\u610f\u5473\u7740\u6211\u4eec\u5199[-6\uff0c-2]\u800c\u4e0d\u662f[-2\uff0c-6]\u3002 \u540e\u8005\u8fd4\u56de\u4e00\u4e2a\u7a7a\u5217\u8868\u3002 slice3.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python # slice3.py n = [1, 2, 3, 4, 5, 6, 7, 8] print(n[-4:-1]) print(n[-1:-4]) print(n[-5:]) print(n[-6:-2:2]) print(n[::-1]) \u5728\u6b64\u811a\u672c\u4e2d\uff0c\u6211\u4eec\u5f62\u6210\u4e94\u4e2a\u5217\u8868\u3002 \u6211\u4eec\u8fd8\u4f7f\u7528\u8d1f\u7d22\u5f15\u53f7\u3002 1 2 print(n[-4:-1]) print(n[-1:-4]) \u7b2c\u4e00\u884c\u8fd4\u56de[5\uff0c6\uff0c7]\uff0c\u7b2c\u4e8c\u884c\u8fd4\u56de\u4e00\u4e2a\u7a7a\u5217\u8868\u3002 \u8f83\u4f4e\u7684\u7d22\u5f15\u5fc5\u987b\u5148\u4e8e\u8f83\u9ad8\u7684\u7d22\u5f15\u3002 1 print(n[::-1]) \u8fd9\u5c06\u521b\u5efa\u4e00\u4e2a\u53cd\u5411\u5217\u8868\u3002 1 2 3 4 5 6 $ ./slice3.py [5, 6, 7] [] [4, 5, 6, 7, 8] [3, 5] [8, 7, 6, 5, 4, 3, 2, 1] \u4e0a\u9762\u63d0\u5230\u7684\u8bed\u6cd5\u53ef\u4ee5\u5728\u5206\u914d\u4e2d\u4f7f\u7528\u3002 \u4f5c\u4e1a\u7684\u53f3\u4fa7\u5fc5\u987b\u6709\u4e00\u4e2a\u53ef\u8fed\u4ee3\u7684\u5bf9\u8c61\u3002 slice4.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python # slice4.py n = [1, 2, 3, 4, 5, 6, 7, 8] n[0] = 10 n[1:3] = 20, 30 n[3::1] = 40, 50, 60, 70, 80 print(n) \u6211\u4eec\u6709\u516b\u4e2a\u6574\u6570\u7684\u5217\u8868\u3002 \u6211\u4eec\u4f7f\u7528\u5207\u7247\u8bed\u6cd5\u5c06\u5143\u7d20\u66ff\u6362\u4e3a\u65b0\u503c\u3002 \u904d\u5386 Python \u5217\u8868 \u00b6 \u672c\u8282\u5c06\u6307\u51fa\u5728 Python \u4e2d\u904d\u5386\u5217\u8868\u7684\u4e09\u79cd\u57fa\u672c\u65b9\u6cd5\u3002 traverse.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python # traverse.py n = [1, 2, 3, 4, 5] for e in n: print(e, end=\" \") print() \u7b2c\u4e00\u4e2a\u662f\u904d\u5386\u5217\u8868\u7684\u6700\u76f4\u63a5\u65b9\u6cd5\u3002 1 n = [1, 2, 3, 4, 5] \u6211\u4eec\u6709\u4e00\u4e2a\u6570\u5b57\u5217\u8868\u3002 \u5217\u8868\u4e2d\u6709\u4e94\u4e2a\u6574\u6570\u3002 1 2 for e in n: print(e, end=\" \") \u4f7f\u7528 for \u5faa\u73af\uff0c\u6211\u4eec\u4e00\u5f20\u4e00\u5f20\u5730\u6d4f\u89c8\u5217\u8868\uff0c\u7136\u540e\u5c06\u5f53\u524d\u5143\u7d20\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 2 $ ./traverse.py 1 2 3 4 5 \u8fd9\u662f\u811a\u672c\u7684\u8f93\u51fa\u3002 \u6574\u6570\u5c06\u6253\u5370\u5230\u7ec8\u7aef\u3002 \u7b2c\u4e8c\u4e2a\u793a\u4f8b\u66f4\u4e3a\u8be6\u7ec6\u3002 traverse2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python # traverse2.py n = [1, 2, 3, 4, 5] i = 0 s = len(n) while i < s: print(n[i], end=\" \") i = i + 1 print() \u6211\u4eec\u6b63\u5728\u4f7f\u7528 while \u5faa\u73af\u904d\u5386\u5217\u8868\u3002 1 2 i = 0 l = len(n) \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a\u8ba1\u6570\u5668\u5e76\u627e\u51fa\u5217\u8868\u7684\u5927\u5c0f\u3002 1 2 3 4 while i < s: print(n[i], end=\" \") i = i + 1 \u5728\u8fd9\u4e24\u4e2a\u6570\u5b57\u7684\u5e2e\u52a9\u4e0b\uff0c\u6211\u4eec\u904d\u5386\u5217\u8868\u5e76\u5c06\u6bcf\u4e2a\u5143\u7d20\u6253\u5370\u5230\u7ec8\u7aef\u3002 enumerate() \u5185\u7f6e\u51fd\u6570\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u5faa\u73af\u4e2d\u5217\u8868\u7684\u7d22\u5f15\u548c\u503c\u3002 traverse3.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python # traverse3.py n = [1, 2, 3, 4, 5] print(list(enumerate(n))) for e, i in enumerate(n): print(\"n[{0}] = {1}\".format(e, i)) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6253\u5370\u503c\u548c\u503c\u7684\u7d22\u5f15\u3002 1 2 3 4 5 6 7 $ ./traverse3.py [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5)] n[0] = 1 n[1] = 2 n[2] = 3 n[3] = 4 n[4] = 5 Python \u8ba1\u6570\u5217\u8868\u5143\u7d20 \u00b6 \u6709\u65f6\u5bf9\u5217\u8868\u5143\u7d20\u8fdb\u884c\u8ba1\u6570\u5f88\u91cd\u8981\u3002 \u4e3a\u6b64\uff0cPython \u5177\u6709 count() \u65b9\u6cd5\u3002 counting.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python # counting.py n = [1, 1, 2, 3, 4, 4, 4, 5] print(n.count(4)) print(n.count(1)) print(n.count(2)) print(n.count(6)) \u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u8ba1\u7b97 n \u5217\u8868\u4e2d\u51e0\u4e2a\u6570\u5b57\u7684\u51fa\u73b0\u6b21\u6570\u3002 1 n = [1, 1, 2, 3, 4, 4, 4, 5] \u6211\u4eec\u6709\u4e00\u4e2a\u6574\u6570\u5217\u8868\u3002 \u6574\u6570 1 \u548c 4 \u591a\u6b21\u51fa\u73b0\u3002 1 2 3 4 print(n.count(4)) print(n.count(1)) print(n.count(2)) print(n.count(6)) \u4f7f\u7528 count() \u65b9\u6cd5\uff0c\u6211\u4eec\u53d1\u73b0 4\u30011\u30012 \u548c 6 \u4e2a\u6570\u5b57\u7684\u51fa\u73b0\u3002 1 2 3 4 5 $ ./counting.py 3 2 1 0 \u6570\u5b57 4 \u51fa\u73b0 3 \u6b21\uff0c1 \u6b21\u4e24\u6b21\uff0c2 \u6b21\u4e00\u6b21\u4ee5\u53ca 6 \u5728\u5217\u8868\u4e2d\u4e0d\u5b58\u5728\u3002 Python \u5d4c\u5957\u5217\u8868 \u00b6 \u53ef\u4ee5\u5c06\u5217\u8868\u5d4c\u5957\u5230\u53e6\u4e00\u4e2a\u5217\u8868\u4e2d\u3002 \u4f7f\u7528\u5d4c\u5957\u5217\u8868\uff0c\u5c06\u521b\u5efa\u4e00\u4e2a\u65b0\u7ef4\u5ea6\u3002 \u8981\u8bbf\u95ee\u5d4c\u5957\u5217\u8868\uff0c\u9700\u8981\u9644\u52a0\u7684\u65b9\u62ec\u53f7 [] \u3002 nested.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env python # nested.py nums = [[1, 2], [3, 4], [5, 6]] print(nums[0]) print(nums[1]) print(nums[2]) print(nums[0][0]) print(nums[0][1]) print(nums[1][0]) print(nums[2][1]) print(len(nums)) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\u4e09\u4e2a\u5d4c\u5957\u5217\u8868\uff0c\u6bcf\u4e2a\u5d4c\u5957\u5217\u8868\u5305\u542b\u4e24\u4e2a\u5143\u7d20\u3002 1 2 3 print(nums[0]) print(nums[1]) print(nums[2]) nums \u5217\u8868\u7684\u4e09\u4e2a\u5d4c\u5957\u5217\u8868\u5c06\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 2 print(nums[0][0]) print(nums[0][1]) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u6253\u5370\u7b2c\u4e00\u4e2a\u5d4c\u5957\u5217\u8868\u7684\u4e24\u4e2a\u5143\u7d20\u3002 nums[0] \u5f15\u7528\u7b2c\u4e00\u4e2a\u5d4c\u5957\u5217\u8868\uff1b nums[0][0] \u5f15\u7528\u7b2c\u4e00\u4e2a\u5d4c\u5957\u5217\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u5373 1\u3002 1 print(len(nums)) \u8be5\u884c\u663e\u793a 3\u3002\u6bcf\u4e2a\u5d4c\u5957\u5217\u8868\u90fd\u8ba1\u4e3a\u4e00\u4e2a\u5143\u7d20\u3002 \u4e0d\u8003\u8651\u5176\u5185\u90e8\u5143\u7d20\u3002 1 2 3 4 5 6 7 8 9 $ ./nested.py [1, 2] [3, 4] [5, 6] 1 2 3 6 3 \u7b2c\u4e8c\u4e2a\u793a\u4f8b\u5177\u6709\u5176\u4ed6\u7ef4\u5ea6\u3002 nested2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python # nested2.py nums = [[1, 2, [3, 4, [5, 6]]]] print(nums[0]) print(nums[0][2]) print(nums[0][2][2]) print(nums[0][0]) print(nums[0][2][1]) print(nums[0][2][2][0]) \u5728\u793a\u4f8b\u4e2d\uff0c[5\uff0c6]\u5217\u8868\u5d4c\u5957\u5230[3\uff0c4\uff0c\u2026]\u5217\u8868\u4e2d\uff0c[3\uff0c4\uff0c[4\uff0c6]]\u5d4c\u5957\u5230[1,2\uff0c\u2026]\u4e2d list \u6700\u7ec8\u662f nums \u5217\u8868\u7684\u5143\u7d20\u3002 1 2 3 print(nums[0]) print(nums[0][2]) print(nums[0][2][2]) \u8fd9\u4e09\u884c\u5c06\u5d4c\u5957\u5217\u8868\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 2 3 print(nums[0][0]) print(nums[0][2][1]) print(nums[0][2][2][0]) \u5728\u6b64\u8bbf\u95ee\u4e09\u4e2a\u5143\u7d20\u3002 \u5f15\u7528\u5185\u90e8\u5217\u8868\u65f6\uff0c\u9700\u8981\u5176\u4ed6\u65b9\u62ec\u53f7 [] \u3002 1 2 3 4 5 6 7 $ ./nested2.py [1, 2, [3, 4, [5, 6]]] [3, 4, [5, 6]] [5, 6] 1 4 5 Python \u6392\u5e8f\u5217\u8868 \u00b6 \u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5bf9\u5217\u8868\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\u3002 Python \u5177\u6709\u7528\u4e8e\u6267\u884c\u6392\u5e8f\u7684\u5185\u7f6e\u5217\u8868\u65b9\u6cd5 sort() \u548c sorted() \u51fd\u6570\u3002 sorting.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python # sorting.py n = [3, 4, 7, 1, 2, 8, 9, 5, 6] print(n) n.sort() print(n) n.sort(reverse=True) print(n) \u5728\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u672a\u6392\u5e8f\u6574\u6570\u7684\u5217\u8868\u3002 \u6211\u4eec\u4f7f\u7528 sort() \u65b9\u6cd5\u5bf9\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\u3002 \u8be5\u65b9\u6cd5\u5bf9\u5143\u7d20\u8fdb\u884c\u539f\u4f4d\u6392\u5e8f\uff1b \u539f\u59cb\u5217\u8868\u5df2\u4fee\u6539\u3002 1 n.sort() sort() \u65b9\u6cd5\u4ee5\u5347\u5e8f\u5bf9\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\u3002 1 n.sort(reverse=True) \u5c06\u53cd\u5411\u53c2\u6570\u8bbe\u7f6e\u4e3a True \u65f6\uff0c\u5217\u8868\u4ee5\u964d\u5e8f\u6392\u5e8f\u3002 1 2 3 4 $ ./sorting.py [3, 4, 7, 1, 2, 8, 9, 5, 6] [1, 2, 3, 4, 5, 6, 7, 8, 9] [9, 8, 7, 6, 5, 4, 3, 2, 1] \u5728\u8f93\u51fa\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u539f\u59cb\u5217\u8868\uff0c\u5373\u6309\u5347\u5e8f\u548c\u964d\u5e8f\u6392\u5e8f\u7684\u5217\u8868\u3002 \u5982\u679c\u6211\u4eec\u4e0d\u60f3\u66f4\u6539\u539f\u59cb\u5217\u8868\uff0c\u53ef\u4ee5\u4f7f\u7528 sorted \u51fd\u6570\u3002 \u6b64\u51fd\u6570\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6392\u5e8f\u5217\u8868\u3002 sorting2.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python # sorting2.py n = [3, 4, 1, 7, 2, 5, 8, 6] print(n) print(sorted(n)) print(n) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 sorted() \u51fd\u6570\u5bf9\u5217\u8868\u7684\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\u3002 1 2 3 4 $ ./sorting2.py [3, 4, 1, 7, 2, 5, 8, 6] [1, 2, 3, 4, 5, 6, 7, 8] [3, 4, 1, 7, 2, 5, 8, 6] \u4ece\u811a\u672c\u7684\u8f93\u51fa\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u539f\u59cb\u5217\u8868\u6ca1\u6709\u88ab\u4fee\u6539\u3002 sort() \u65b9\u6cd5\u5177\u6709\u53ef\u9009\u7684 key \u53c2\u6570\u3002 \u8be5\u53c2\u6570\u6307\u5b9a\u5728\u8fdb\u884c\u6bd4\u8f83\u4e4b\u524d\u5728\u6bcf\u4e2a\u5217\u8868\u5143\u7d20\u4e0a\u8981\u8c03\u7528\u7684\u51fd\u6570\u3002 sorting3.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python # sorting3.py words = [\"big\", \"Blue\", \"seven\", \"glass\", \"Green\", \"after\", \"Anctartica\"] words.sort() print(words) words.sort(key=str.lower) print(words) \u8be5\u793a\u4f8b\u4ea7\u751f\u533a\u5206\u5927\u5c0f\u5199\u548c\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u7684\u5b57\u7b26\u4e32\u6bd4\u8f83\u3002 1 words.sort(key=str.lower) \u4e3a\u4e86\u521b\u5efa\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u7684\u6bd4\u8f83\uff0c\u6211\u4eec\u5c06 str.lower \u51fd\u6570\u6dfb\u52a0\u5230 key \u53c2\u6570\u4e2d\u3002 1 2 3 $ ./sorting3.py ['Anctartica', 'Blue', 'Green', 'after', 'big', 'glass', 'seven'] ['after', 'Anctartica', 'big', 'Blue', 'glass', 'Green', 'seven'] \u5982\u679c\u8981\u5bf9 Unicode \u5b57\u7b26\u4e32\u8fdb\u884c\u6392\u5e8f\uff0c\u6211\u4eec\u9700\u8981\u505a\u5176\u4ed6\u5de5\u4f5c\u3002 sorting_locale.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python import locale from functools import cmp_to_key w = [u'zem', u'\u0161tebot', u'rum', u'\u017eelezo', u'prame\u0148', u\"sob\"] locale.setlocale(locale.LC_COLLATE, ('sk_SK', 'UTF8')) w.sort(key=cmp_to_key(locale.strcoll)) for e in w: print(e) \u6211\u4eec\u6709\u516d\u4e2a unicode \u5b57\u7b26\u4e32\u7684\u5217\u8868\u3002 \u6211\u4eec\u66f4\u6539\u8bed\u8a00\u73af\u5883\u8bbe\u7f6e\uff0c\u4ee5\u6839\u636e\u5f53\u524d\u8bed\u8a00\u9009\u9879\u5bf9\u5b57\u7b26\u4e32\u8fdb\u884c\u6392\u5e8f\u3002 1 2 import locale from functools import cmp_to_key \u6211\u4eec\u5bfc\u5165 locale \u6a21\u5757\u548c cmp_to_key \u8f6c\u6362\u51fd\u6570\u3002 1 w = [u'zem', u'\u0161tebot', u'rum', u'\u017eelezo', u'prame\u0148', u\"sob\"] \u8fd9\u662f\u516d\u4e2a\u5b57\u7b26\u4e32\u7684\u5217\u8868\u3002 \u5b57\u7b26\u4e32\u4f7f\u7528\u65af\u6d1b\u4f10\u514b\u8bed\uff0c\u5e76\u5e26\u6709\u4e00\u4e9b\u53d8\u97f3\u6807\u8bb0\u3002 \u5b83\u4eec\u5728\u6b63\u786e\u6392\u5e8f\u5b57\u7b26\u65b9\u9762\u53d1\u6325\u4f5c\u7528\u3002 1 locale.setlocale(locale.LC_COLLATE, ('sk_SK', 'UTF8')) \u6211\u4eec\u4e3a\u65af\u6d1b\u4f10\u514b\u8bed\u8bbe\u7f6e\u4e86\u8bed\u8a00\u73af\u5883\u3002 1 w.sort(key=cmp_to_key(locale.strcoll)) \u6211\u4eec\u5bf9\u5217\u8868\u8fdb\u884c\u6392\u5e8f\u3002 locale.strcoll \u6839\u636e\u5f53\u524d LC_COLLATE \u8bbe\u7f6e\u6bd4\u8f83\u4e24\u4e2a\u5b57\u7b26\u4e32\u3002 cmp_to_key \u51fd\u6570\u5c06 old-style \u6bd4\u8f83\u51fd\u6570\u8f6c\u6362\u4e3a\u952e\u51fd\u6570\u3002 1 2 for e in w: print(e) \u6211\u4eec\u5c06\u5df2\u6392\u5e8f\u7684\u5355\u8bcd\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 2 3 4 5 6 7 $ ./sorting_locale.py prame\u0148 rum sob \u0161tebot zem \u017eelezo \u5143\u7d20\u5df2\u6b63\u786e\u6392\u5e8f\u3002 \u8003\u8651\u4e86\u65af\u6d1b\u4f10\u514b\u5b57\u6bcd\u7684\u7ec6\u8282\u3002 Python \u53cd\u8f6c\u5217\u8868\u5143\u7d20 \u00b6 \u6211\u4eec\u53ef\u4ee5\u5728 Python \u4e2d\u4ee5\u51e0\u79cd\u65b9\u5f0f\u53cd\u8f6c\u5217\u8868\u4e2d\u7684\u5143\u7d20\u3002 \u53cd\u5411\u5143\u7d20\u4e0d\u5e94\u4e0e\u53cd\u5411\u6392\u5e8f\u6df7\u6dc6\u3002 reversing.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #!/usr/bin/env python # reversing.py a1 = [\"bear\", \"lion\", \"tiger\", \"eagle\"] a2 = [\"bear\", \"lion\", \"tiger\", \"eagle\"] a3 = [\"bear\", \"lion\", \"tiger\", \"eagle\"] a1.reverse() print(a1) it = reversed(a2) r = list() for e in it: r.append(e) print(r) print(a3[::-1]) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\u4e09\u4e2a\u76f8\u540c\u7684\u5b57\u7b26\u4e32\u5217\u8868\u3002 \u6211\u4eec\u4ee5\u4e09\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u53cd\u8f6c\u5143\u7d20\u3002 1 a1.reverse() \u7b2c\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528 reverse() \u65b9\u6cd5\u3002 1 2 3 4 5 it = reversed(a2) r = list() for e in it: r.append(e) reversed() \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u53cd\u5411\u8fed\u4ee3\u5668\u3002 \u6211\u4eec\u5728 for \u5faa\u73af\u4e2d\u4f7f\u7528\u8fed\u4ee3\u5668\uff0c\u5e76\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u53cd\u5411\u5217\u8868\u3002 1 print(a3[::-1]) \u7b2c\u4e09\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528 slice \u8bed\u6cd5\u53cd\u8f6c\u5217\u8868\uff0c\u5176\u4e2d step \u53c2\u6570\u8bbe\u7f6e\u4e3a-1\u3002 1 2 3 4 $ ./reversing.py ['eagle', 'tiger', 'lion', 'bear'] ['eagle', 'tiger', 'lion', 'bear'] ['eagle', 'tiger', 'lion', 'bear'] \u4e09\u4e2a\u5217\u8868\u5168\u90e8\u98a0\u5012\u4e86\u3002 Python \u5217\u8868\u63a8\u5bfc\u5f0f \u00b6 \u5217\u8868\u63a8\u5bfc\u5f0f\u662f\u4e00\u79cd\u57fa\u4e8e\u73b0\u6709\u5217\u8868\u521b\u5efa\u5217\u8868\u7684\u8bed\u6cd5\u7ed3\u6784\u3002 \u8bed\u6cd5\u53d7\u96c6\u5408\u7684\u6570\u5b66\u7b26\u53f7\u7684\u5f71\u54cd\u3002 Python \u8bed\u6cd5\u53d7 Haskell \u7f16\u7a0b\u8bed\u8a00\u542f\u53d1\u3002 1 L = [expression for variable in sequence [if condition]] \u4e0a\u9762\u7684\u4f2a\u4ee3\u7801\u663e\u793a\u4e86\u5217\u8868\u63a8\u5bfc\u5f0f\u7684\u8bed\u6cd5\u3002 \u5217\u8868\u63a8\u5bfc\u5f0f\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u5217\u8868\u3002 \u5b83\u57fa\u4e8e\u73b0\u6709\u5217\u8868\u3002 for \u5faa\u73af\u904d\u5386\u6574\u4e2a\u5e8f\u5217\u3002 \u5bf9\u4e8e\u6bcf\u4e2a\u5faa\u73af\uff0c\u5982\u679c\u6ee1\u8db3\u6761\u4ef6\uff0c\u5219\u5bf9\u8868\u8fbe\u5f0f\u8fdb\u884c\u6c42\u503c\u3002 \u5982\u679c\u8ba1\u7b97\u51fa\u8be5\u503c\uff0c\u5b83\u5c06\u88ab\u6dfb\u52a0\u5230\u65b0\u5217\u8868\u4e2d\u3002 \u6761\u4ef6\u662f\u53ef\u9009\u7684\u3002 \u5728\u53ef\u4ee5\u4f7f\u7528 map() \u548c filter() \u548c/\u6216\u5d4c\u5957\u5faa\u73af\u7684\u60c5\u51b5\u4e0b\uff0c\u5217\u8868\u63a8\u5bfc\u5f0f\u4e3a\u521b\u5efa\u5217\u8868\u63d0\u4f9b\u4e86\u4e00\u79cd\u66f4\u7b80\u6d01\u7684\u65b9\u6cd5\u3002 list_comprehension.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python # list_comprehension.py a = [1, 2, 3, 4, 5, 6, 7, 8, 9] b = [e for e in a if e % 2] print(b) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u6570\u5b57\u5217\u8868\u3002 \u5728\u5217\u8868\u63a8\u5bfc\u5f0f\u7684\u5e2e\u52a9\u4e0b\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u6570\u5b57\u5217\u8868\uff0c\u8fd9\u4e9b\u6570\u5b57\u4e0d\u80fd\u9664\u4ee5 2 \u800c\u6ca1\u6709\u4f59\u6570\u3002 1 a = [1, 2, 3, 4, 5, 6, 7, 8, 9] \u8fd9\u662f\u4e5d\u4e2a\u6574\u6570\u7684\u5217\u8868\u3002 1 b = [e for e in a if e % 2] \u8fd9\u91cc\u6211\u4eec\u6709\u5217\u8868\u63a8\u5bfc\u5f0f\u3002 \u5728 for e in a \u5faa\u73af\u4e2d\uff0c\u83b7\u53d6\u5217\u8868\u7684\u6bcf\u4e2a\u5143\u7d20\u3002 \u7136\u540e\u6d4b\u8bd5 if e % 2 \u6761\u4ef6\u3002 \u5982\u679c\u6ee1\u8db3\u6761\u4ef6\uff0c\u5219\u5bf9\u8868\u8fbe\u5f0f\u6c42\u503c\u3002 \u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u8868\u8fbe\u5f0f\u662f\u4e00\u4e2a\u7eaf e \uff0c\u5b83\u76f4\u63a5\u4f7f\u7528\u5143\u7d20\u3002 \u6700\u540e\uff0c\u5143\u7d20\u88ab\u6dfb\u52a0\u5230\u5217\u8868\u4e2d\u3002 1 2 $ ./list_comprehension.py [1, 3, 5, 7, 9] \u793a\u4f8b\u8f93\u51fa\u3002 \u5217\u8868\u4e2d\u7684\u6570\u5b57\u4e0d\u80fd\u9664\u4ee5 2\uff0c\u4e0d\u80fd\u6709\u4f59\u6570\u3002 \u5728\u7b2c\u4e8c\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u5217\u8868\u63a8\u5bfc\u5f0f\u4e0e\u4f20\u7edf\u7684 for \u5faa\u73af\u8fdb\u884c\u4e86\u6bd4\u8f83\u3002 list_comprehension2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python # list_comprehension2.py lang = \"Python\" a = [] for e in lang: a.append(ord(e)) b = [ord(e) for e in lang] print(a) print(b) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 \u6211\u4eec\u8981\u521b\u5efa\u5b57\u7b26\u4e32\u5b57\u6bcd\u7684 ASCII \u6574\u6570\u4ee3\u7801\u7684\u5217\u8868\u3002 1 2 3 4 a = [] for e in lang: a.append(ord(e)) \u6211\u4eec\u4f7f\u7528 for \u5faa\u73af\u521b\u5efa\u8fd9\u6837\u7684\u5217\u8868\u3002 1 b = [ord(e) for e in lang] \u8fd9\u91cc\u4f7f\u7528\u5217\u8868\u63a8\u5bfc\u4ea7\u751f\u76f8\u540c\u7684\u7ed3\u679c\u3002 \u6ce8\u610f\uff0c\u7701\u7565\u4e86 if \u6761\u4ef6\u3002 \u5b83\u662f\u53ef\u9009\u7684\u3002 1 2 3 $ ./list_comprehension2.py [80, 121, 116, 104, 111, 110] [80, 121, 116, 104, 111, 110] \u8fd9\u662f\u793a\u4f8b\u8f93\u51fa\u3002 \u60a8\u53ef\u4ee5\u5728Python \u5217\u8868\u63a8\u5bfc\u6559\u7a0b\u4e2d\u627e\u5230\u6709\u5173\u5217\u8868\u63a8\u5bfc\u7684\u66f4\u591a\u4fe1\u606f\u3002 Python \u6620\u5c04\u548c\u8fc7\u6ee4\u5668\u51fd\u6570 \u00b6 map() \u548c filter() \u51fd\u6570\u662f\u53ef\u5728\u6240\u6709\u5217\u8868\u9879\u4e0a\u4f7f\u7528\u7684\u8d28\u91cf\u51fd\u6570\u3002 \u5b83\u4eec\u662f Python \u8bed\u8a00\u5185\u7f6e\u7684\u51fd\u6570\u7f16\u7a0b\u7684\u4e00\u90e8\u5206\u3002 \u4eca\u5929\uff0c\u5efa\u8bae\u5c3d\u53ef\u80fd\u4f7f\u7528\u5217\u8868\u63a8\u5bfc\u4ee3\u66ff\u8fd9\u4e9b\u51fd\u6570\u3002 map_fun.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python # map_fun.py def to_upper(s): return s.upper() words = [\"stone\", \"cloud\", \"dream\", \"sky\"] words2 = list(map(to_upper, words)) print(words2) map() \u51fd\u6570\u5c06\u7279\u5b9a\u51fd\u6570\u5e94\u7528\u4e8e\u5217\u8868\u7684\u6bcf\u4e2a\u5143\u7d20\u3002 1 2 3 def to_upper(s): return s.upper() \u8fd9\u662f\u5c06\u5e94\u7528\u4e8e\u6bcf\u4e2a\u5217\u8868\u5143\u7d20\u7684\u51fd\u6570\u7684\u5b9a\u4e49\u3002 \u5b83\u5728\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u4e0a\u8c03\u7528 upper() \u5b57\u7b26\u4e32\u65b9\u6cd5\u3002 1 words = [\"stone\", \"cloud\", \"dream\", \"sky\"] \u8fd9\u662f\u5b57\u7b26\u4e32\u5217\u8868\u3002 1 2 words2 = map(to_upper, words) print(words2) map() \u51fd\u6570\u5c06 to_upper() \u51fd\u6570\u5e94\u7528\u4e8e\u5355\u8bcd\u5217\u8868\u7684\u6bcf\u4e2a\u5b57\u7b26\u4e32\u5143\u7d20\u3002 \u5f62\u6210\u4e00\u4e2a\u65b0\u5217\u8868\u5e76\u8fd4\u56de\u3002 \u6211\u4eec\u5c06\u5176\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 2 $ ./map_fun.py ['STONE', 'CLOUD', 'DREAM', 'SKY'] \u5217\u8868\u4e2d\u7684\u6bcf\u4e00\u9879\u5747\u4ee5\u5927\u5199\u5b57\u6bcd\u8868\u793a\u3002 filter() \u51fd\u6570\u4ece\u5217\u8868\u7684\u90a3\u4e9b\u5143\u7d20\u4e2d\u4e3a\u51fd\u6570\u8fd4\u56de true \u7684\u5217\u8868\u6784\u9020\u4e00\u4e2a\u5217\u8868\u3002 filter_fun.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python # filter_fun.py def positive(x): return x > 0 n = [-2, 0, 1, 2, -3, 4, 4, -1] print(list(filter(positive, n))) \u6f14\u793a filter() \u51fd\u6570\u7684\u793a\u4f8b\u3002 \u5b83\u5c06\u521b\u5efa\u4e00\u4e2a\u4ec5\u5177\u6709\u6b63\u503c\u7684\u65b0\u5217\u8868\u3002 \u5b83\u5c06\u6ee4\u9664\u6240\u6709\u8d1f\u503c\u548c 0\u3002 1 2 def positive(x): return x > 0 \u8fd9\u662f filter() \u51fd\u6570\u4f7f\u7528\u7684\u51fd\u6570\u7684\u5b9a\u4e49\u3002 \u8fd4\u56de True \u6216 False \u3002 \u8fd4\u56de\u5e03\u5c14\u503c\u7684\u51fd\u6570\u79f0\u4e3a\u8c13\u8bcd\u3002 1 2 $ ./filter_fun.py [1, 2, 4, 4] filter_fun.py \u811a\u672c\u7684\u8f93\u51fa\u3002","title":"Python \u5217\u8868"},{"location":"pages/python/pytutorial/python-lists/#Python-\u5217\u8868","text":"\u5217\u8868\u662f\u503c\u7684\u6709\u5e8f\u96c6\u5408\uff0c \u5b83\u53ef\u4ee5\u5305\u542b\u5404\u79cd\u7c7b\u578b\u7684\u503c\u3002 \u5217\u8868\u662f\u53ef\u53d8\u5bb9\u5668\uff0c \u8fd9\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u6dfb\u52a0\u503c\uff0c\u5220\u9664\u503c\u6216\u4fee\u6539\u73b0\u6709\u503c\u3002 Python \u5217\u8868\u8868\u793a\u6709\u9650\u5e8f\u5217\u7684\u6570\u5b66\u6982\u5ff5\uff0c\u5217\u8868\u7684\u503c\u79f0\u4e3a\u5217\u8868\u7684\u9879\u76ee\u6216\u5143\u7d20\u3002 \u5217\u8868\u53ef\u4ee5\u591a\u6b21\u5305\u542b\u76f8\u540c\u7684\u503c\uff0c \u6bcf\u6b21\u51fa\u73b0\u90fd\u88ab\u89c6\u4e3a\u4e0d\u540c\u7684\u9879\u76ee\u3002","title":"Python \u5217\u8868"},{"location":"pages/python/pytutorial/python-lists/#Python-\u5217\u8868\u7d22\u5f15","text":"\u5217\u8868\u5143\u7d20\u53ef\u4ee5\u901a\u8fc7\u5176\u7d22\u5f15\u8fdb\u884c\u8bbf\u95ee\u3002 \u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u7d22\u5f15\u4e3a 0\uff0c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u7d22\u5f15\u4e3a-1\u3002 simple.py 1 2 3 4 5 6 #!/usr/bin/env python # simple.py nums = [1, 2, 3, 4, 5] print(nums) \u8fd9\u662f\u4e00\u4e2a\u5305\u542b\u4e94\u4e2a\u5143\u7d20\u7684\u7b80\u5355\u5217\u8868\u3002 \u8be5\u5217\u8868\u7531\u65b9\u62ec\u53f7 [] \u5206\u9694\u3002 \u5217\u8868\u7684\u5143\u7d20\u7531\u9017\u53f7\u5206\u9694\u3002 \u5217\u8868\u7684\u5185\u5bb9\u5c06\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 2 $ ./simple.py [1, 2, 3, 4, 5] \u5217\u8868\u53ef\u4ee5\u5305\u542b\u5404\u79cd\u6570\u636e\u7c7b\u578b\u7684\u5143\u7d20\u3002 various_types.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python # various_types.py class Being: pass objects = [1, -2, 3.4, None, False, [1, 2], \"Python\", (2, 3), Being(), {}] print(objects) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61\u5217\u8868\u3002 \u5b83\u5305\u542b\u6570\u5b57\uff0c\u5e03\u5c14\u503c\uff0c\u53e6\u4e00\u4e2a\u5217\u8868\uff0c\u5b57\u7b26\u4e32\uff0c\u5143\u7ec4\uff0c\u81ea\u5b9a\u4e49\u5bf9\u8c61\u548c\u5b57\u5178\u3002 1 2 3 $ ./various_types.py [1, -2, 3.4, None, False, [1, 2], 'Python', (2, 3), <__main__.Being instance at 0x7f653577f6c8>, {}]","title":"Python \u5217\u8868\u7d22\u5f15"},{"location":"pages/python/pytutorial/python-lists/#Python-\u5217\u8868\u521d\u59cb\u5316","text":"\u6709\u65f6\u6211\u4eec\u9700\u8981\u9884\u5148\u521d\u59cb\u5316\u4e00\u4e2a\u5217\u8868\u4ee5\u5177\u6709\u7279\u5b9a\u6570\u91cf\u7684\u5143\u7d20\u3002 initialization.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python n1 = [0 for i in range(15)] n2 = [0] * 15 print(n1) print(n2) n1[0:11] = [10] * 10 print(n1) \u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u5217\u8868\u63a8\u5bfc\u548c*\u8fd0\u7b97\u7b26\u521d\u59cb\u5316\u4e86\u4e24\u4e2a\u5217\u8868\u3002 1 2 n1 = [0 for i in range(15)] n2 = [0] * 15 \u8fd9\u4e24\u4e2a\u5217\u8868\u88ab\u521d\u59cb\u5316\u4e3a\u5341\u4e94\u4e2a\u96f6\u3002 1 n1[0:11] = [10] * 10 \u524d\u5341\u4e2a\u503c\u5c06\u66ff\u6362\u4e3a 10s\u3002 1 2 3 4 $ ./initialization.py [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 0, 0, 0, 0]","title":"Python \u5217\u8868\u521d\u59cb\u5316"},{"location":"pages/python/pytutorial/python-lists/#Python-\u5217\u8868\u51fd\u6570","text":"list() \u51fd\u6570\u4ece\u53ef\u8fed\u4ee3\u5bf9\u8c61\u521b\u5efa\u5217\u8868\u3002 \u53ef\u8fed\u4ee3\u7684\u5bf9\u8c61\u53ef\u4ee5\u662f\u5e8f\u5217\uff0c\u652f\u6301\u8fed\u4ee3\u7684\u5bb9\u5668\u6216\u8fed\u4ee3\u5668\u5bf9\u8c61\u3002 \u5982\u679c\u672a\u6307\u5b9a\u4efb\u4f55\u53c2\u6570\uff0c\u5219\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7a7a\u5217\u8868\u3002 list_fun.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python # list_fun.py a = [] b = list() print(a == b) print(list((1, 2, 3))) print(list(\"ZetCode\")) print(list(['Ruby', 'Python', 'Perl'])) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u7a7a\u5217\u8868\uff0c\u4e00\u4e2a\u5143\u7ec4\u5217\u8868\uff0c\u4e00\u4e2a\u5b57\u7b26\u4e32\u548c\u53e6\u4e00\u4e2a\u5217\u8868\u3002 1 2 a = [] b = list() \u8fd9\u662f\u521b\u5efa\u7a7a\u5217\u8868\u7684\u4e24\u79cd\u65b9\u6cd5\u3002 1 print(a == b) \u8be5\u884c\u6253\u5370 True \u3002 \u8fd9\u8bc1\u5b9e\u4e86 a \u548c b \u76f8\u7b49\u3002 1 print(list((1, 2, 3))) \u6211\u4eec\u4ece Python \u5143\u7ec4\u521b\u5efa\u4e00\u4e2a\u5217\u8868\u3002 1 print(list(\"ZetCode\")) \u8be5\u884c\u4ece\u5b57\u7b26\u4e32\u751f\u6210\u5217\u8868\u3002 1 print(list(['Ruby', 'Python', 'Perl'])) \u6700\u540e\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u5b57\u7b26\u4e32\u5217\u8868\u7684\u526f\u672c\u3002 1 2 3 4 5 $ ./list_fun.py True [1, 2, 3] ['Z', 'e', 't', 'C', 'o', 'd', 'e'] ['Ruby', 'Python', 'Perl']","title":"Python \u5217\u8868\u51fd\u6570"},{"location":"pages/python/pytutorial/python-lists/#Python-\u5217\u8868\u64cd\u4f5c","text":"\u4ee5\u4e0b\u4ee3\u7801\u663e\u793a\u4e86\u4e00\u4e9b\u57fa\u672c\u7684\u5217\u8868\u64cd\u4f5c\u3002 list_oper.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/env python # list_oper.py n1 = [1, 2, 3, 4, 5] n2 = [3, 4, 5, 6, 7] print(n1 == n2) print(n1 + n2) print(n1 * 3) print(2 in n1) print(2 in n2) \u6211\u4eec\u5b9a\u4e49\u4e86\u4e24\u4e2a\u6574\u6570\u5217\u8868\u3002 \u6211\u4eec\u5728\u8fd9\u4e9b\u5217\u8868\u4e0a\u4f7f\u7528\u4e00\u4e9b\u8fd0\u7b97\u7b26\u3002 1 print(n1 == n2) \u5217\u8868\u7684\u5185\u5bb9\u4e0e == \u8fd0\u7b97\u7b26\u8fdb\u884c\u6bd4\u8f83\u3002 \u7531\u4e8e\u5143\u7d20\u4e0d\u540c\uff0c\u8be5\u884c\u6253\u5370 False \u3002 1 print(n1 + n2) \u6dfb\u52a0 n1 \u548c n2 \u5217\u8868\u4ee5\u5f62\u6210\u65b0\u5217\u8868\u3002 \u65b0\u5217\u8868\u5305\u542b\u4e24\u4e2a\u5217\u8868\u7684\u6240\u6709\u5143\u7d20\u3002 1 print(n1 * 3) \u6211\u4eec\u5728\u5217\u8868\u4e0a\u4f7f\u7528\u4e58\u6cd5\u8fd0\u7b97\u7b26\u3002 \u5b83\u91cd\u590d\u5143\u7d20 n \u6b21\uff1b \u5728\u6211\u4eec\u7684\u60c5\u51b5\u4e0b\u662f\u4e09\u904d\u3002 1 print(2 in n1) \u6211\u4eec\u4f7f\u7528 in \u8fd0\u7b97\u7b26\u6765\u627e\u51fa\u5217\u8868\u4e2d\u662f\u5426\u5b58\u5728\u8be5\u503c\u3002 \u5b83\u8fd4\u56de\u5e03\u5c14\u503c True \u6216 False \u3002 1 2 3 4 5 6 $ ./lists.py False [1, 2, 3, 4, 5, 3, 4, 5, 6, 7] [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] True False","title":"Python \u5217\u8868\u64cd\u4f5c"},{"location":"pages/python/pytutorial/python-lists/#Python-\u5e8f\u5217\u51fd\u6570","text":"\u5e8f\u5217\u51fd\u6570\u53ef\u7528\u4e8e\u4efb\u4f55\u5e8f\u5217\u7c7b\u578b\uff0c\u5305\u62ec\u5217\u8868\u3002 sequence_funs.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python # sequence_funs.py n = [1, 2, 3, 4, 5, 6, 7, 8] print(\"There are {0} items\".format(len(n))) print(\"Maximum is {0}\".format(max(n))) print(\"Minimum is {0}\".format(min(n))) print(\"The sum of values is {0}\".format(sum(n))) \u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5177\u6709\u56db\u4e2a\u51fd\u6570\uff1a len() \uff0c max() \uff0c min() \u548c sum() \u3002 1 print(\"There are {0} items\".format(len(n))) len() \u51fd\u6570\u8fd4\u56de\u5217\u8868\u7684\u5927\u5c0f\u3002 \u5217\u8868\u4e2d\u5143\u7d20\u7684\u6570\u91cf\u3002 1 2 print(\"Maximum is {0}\".format(max(n))) print(\"Minimum is {0}\".format(min(n))) max() \u548c min() \u51fd\u6570\u8fd4\u56de\u5217\u8868\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u3002 1 print(\"The sum of values is {0}\".format(sum(n))) sum() \u51fd\u6570\u8ba1\u7b97 n \u5217\u8868\u4e2d\u6570\u5b57\u7684\u603b\u548c\u3002 1 2 3 4 5 $ ./sequence_funs.py There are 8 items Maximum is 8 Minimum is 1 The sum of values is 36","title":"Python \u5e8f\u5217\u51fd\u6570"},{"location":"pages/python/pytutorial/python-lists/#Python-\u6dfb\u52a0\u5217\u8868\u5143\u7d20","text":"\u672c\u8282\u5c06\u663e\u793a\u5982\u4f55\u5c06\u5143\u7d20\u6dfb\u52a0\u5230 Python \u5217\u8868\u4e2d\u3002 adding.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/env python # adding.py langs = [] langs.append(\"Python\") langs.append(\"Perl\") print(langs) langs.insert(0, \"PHP\") langs.insert(2, \"Lua\") print(langs) langs.extend((\"JavaScript\", \"ActionScript\")) print(langs) \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e09\u79cd\u65b9\u6cd5\u5c06\u65b0\u5143\u7d20\u6dfb\u52a0\u5230\u5217\u8868\u4e2d\uff1a append() \uff0c insert() \u548c extend() \u3002 1 langs = [] \u521b\u5efa\u4e00\u4e2a\u7a7a\u5217\u8868\u3002 1 2 langs.append(\"Python\") langs.append(\"Perl\") append() \u65b9\u6cd5\u5c06\u4e00\u4e2a\u9879\u76ee\u6dfb\u52a0\u5230\u5217\u8868\u7684\u672b\u5c3e\uff1b \u6211\u4eec\u9644\u52a0\u4e24\u4e2a\u5b57\u7b26\u4e32\u3002 1 2 langs.insert(0, \"PHP\") langs.insert(2, \"Lua\") insert() \u65b9\u6cd5\u5c06\u5143\u7d20\u653e\u7f6e\u5728\u7d22\u5f15\u53f7\u6307\u793a\u7684\u7279\u5b9a\u4f4d\u7f6e\u3002 \"PHP\" \u5b57\u7b26\u4e32\u63d2\u5165\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\uff0c \"Lua\" \u5b57\u7b26\u4e32\u63d2\u5165\u7b2c\u4e09\u4e2a\u4f4d\u7f6e\u3002 \u8bf7\u6ce8\u610f\uff0c\u5217\u8868\u7d22\u5f15\u53f7\u4ece\u96f6\u5f00\u59cb\u3002 1 langs.extend((\"JavaScript\", \"ActionScript\")) extend() \u65b9\u6cd5\u5c06\u503c\u7684\u5e8f\u5217\u6dfb\u52a0\u5230\u5217\u8868\u7684\u672b\u5c3e\u3002 \u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u4e24\u4e2a Python \u5143\u7ec4\u5b57\u7b26\u4e32\u9644\u52a0\u5728\u5217\u8868\u7684\u672b\u5c3e\u3002 1 2 3 4 $ ./adding.py ['Python', 'Perl'] ['PHP', 'Python', 'Lua', 'Perl'] ['PHP', 'Python', 'Lua', 'Perl', 'JavaScript', 'ActionScript']","title":"Python \u6dfb\u52a0\u5217\u8868\u5143\u7d20"},{"location":"pages/python/pytutorial/python-lists/#IndexError","text":"\u5217\u8868\u4e0b\u6807\u8d85\u51fa\u8303\u56f4\u65f6\uff0c\u5c06\u5f15\u53d1 IndexError \u3002 index_error.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/env python # index_error.py n = [1, 2, 3, 4, 5] try: n[0] = 10 n[6] = 60 except IndexError as e: print(e) \u5728\u811a\u672c\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5305\u542b\u4e94\u4e2a\u6574\u6570\u7684\u5217\u8868\u3002 \u8fd9\u4e9b\u5143\u7d20\u7684\u7d22\u5f15\u5206\u522b\u4e3a 0\u30011\u30012\u30013 \u548c 4\u3002\u4f7f\u7528\u8f83\u5927\u7684\u7d22\u5f15\u4f1a\u5bfc\u81f4\u9519\u8bef\u3002 1 n[6] = 60 \u7d22\u5f15 6 \u8d85\u51fa\u4e86\u6211\u4eec\u7684\u5217\u8868\u8303\u56f4\u3002 \u629b\u51fa IndexError \u3002 1 2 3 except IndexError as e: print(e) \u6211\u4eec\u4f7f\u7528 except \u5b50\u53e5\u6355\u83b7\u9519\u8bef\u3002 \u5728\u5b50\u53e5\u7684\u6b63\u6587\u4e2d\uff0c\u6211\u4eec\u663e\u793a\u9519\u8bef\u6d88\u606f\u3002 1 2 $ ./index_error.py list assignment index out of range","title":"IndexError"},{"location":"pages/python/pytutorial/python-lists/#TypeError","text":"\u5982\u679c\u5143\u7ec4\u7684\u7d22\u5f15\u4e0d\u662f\u7eaf\u6574\u6570\uff0c\u5219\u4f1a\u629b\u51fa TypeError \u3002 type_error.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/env python # type_error.py n = [1, 2, 3, 4, 5] try: print(n[1]) print(n['2']) except TypeError as e: print(\"Error in file {0}\".format( __file__)) print(\"Message: {0}\".format(e)) \u672c\u793a\u4f8b\u629b\u51fa\u4e00\u4e2a TypeError \u3002 1 print(n['2']) \u5217\u8868\u7d22\u5f15\u5fc5\u987b\u662f\u6574\u6570\u3002 \u5176\u4ed6\u7c7b\u578b\u4ee5\u9519\u8bef\u7ed3\u5c3e\u3002 1 2 3 4 except TypeError as e: print(\"Error in file {0}\".format( __file__)) print(\"Message: {0}\".format(e)) \u5728 except \u5757\u4e2d\uff0c\u6211\u4eec\u6253\u5370\u53d1\u751f\u5f02\u5e38\u7684\u6587\u4ef6\u540d\u548c\u6d88\u606f\u5b57\u7b26\u4e32\u3002 1 2 3 4 $ ./typeerror.py 2 Error in file ./typeerror.py Message: list indices must be integers, not str","title":"TypeError"},{"location":"pages/python/pytutorial/python-lists/#\u4ece-Python-\u5217\u8868\u4e2d\u5220\u9664\u5143\u7d20","text":"\u4ee5\u524d\uff0c\u6211\u4eec\u5df2\u5c06\u9879\u76ee\u6dfb\u52a0\u5230\u5217\u8868\u4e2d\u3002 \u73b0\u5728\uff0c\u6211\u4eec\u5c06\u4ece\u5217\u8868\u4e2d\u5220\u9664\u5b83\u4eec\u3002 removing.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env python # removing.py langs = [\"Python\", \"Ruby\", \"Perl\", \"Lua\", \"JavaScript\"] print(langs) lang = langs.pop(3) print(\"{0} was removed\".format(lang)) lang = langs.pop() print(\"{0} was removed\".format(lang)) print(langs) langs.remove(\"Ruby\") print(langs) pop() \u65b9\u6cd5\u5220\u9664\u5e76\u8fd4\u56de\u5177\u6709\u6307\u5b9a\u7d22\u5f15\u7684\u5143\u7d20\uff0c\u5982\u679c\u6ca1\u6709\u7ed9\u51fa\u7d22\u5f15\u53f7\uff0c\u5219\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002 remove() \u65b9\u6cd5\u4ece\u5217\u8868\u4e2d\u5220\u9664\u7279\u5b9a\u9879\u76ee\u3002 1 2 lang = langs.pop(3) print(\"{0} was removed\".format(lang)) \u6211\u4eec\u5220\u9664\u5177\u6709\u7d22\u5f15 3 \u7684\u5143\u7d20\u3002 pop() \u65b9\u6cd5\u8fd4\u56de\u5df2\u5220\u9664\u5143\u7d20\u7684\u540d\u79f0\uff1b \u5b83\u88ab\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 2 lang = langs.pop() print(\"{0} was removed\".format(lang)) \u5217\u8868\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u5373 \"JavaScript\" \u5b57\u7b26\u4e32\uff0c\u4ece\u5217\u8868\u4e2d\u5220\u9664\u3002 1 langs.remove(\"Ruby\") \u6b64\u884c\u4ece langs \u5217\u8868\u4e2d\u5220\u9664 \"Ruby\" \u5b57\u7b26\u4e32\u3002 1 2 3 4 5 ['Python', 'Ruby', 'Perl', 'Lua', 'JavaScript'] Lua was removed JavaScript was removed ['Python', 'Ruby', 'Perl'] ['Python', 'Perl'] \u4ece\u811a\u672c\u7684\u8f93\u51fa\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6240\u63cf\u8ff0\u65b9\u6cd5\u7684\u6548\u679c\u3002 del \u5173\u952e\u5b57\u4e5f\u53ef\u7528\u4e8e\u5220\u9664\u5217\u8868\u5143\u7d20\u3002 removing2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/env python # removing2.py langs = [\"Python\", \"Ruby\", \"Perl\", \"Lua\", \"JavaScript\"] print(langs) del langs[1] print(langs) #del langs[15] del langs[:] print(langs) \u6211\u4eec\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32\u5217\u8868\u3002 \u6211\u4eec\u4f7f\u7528 del \u5173\u952e\u5b57\u5220\u9664\u5217\u8868\u5143\u7d20\u3002 1 del langs[1] \u6211\u4eec\u4ece\u5217\u8868\u4e2d\u5220\u9664\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\u3002 \u5b83\u662f \"Ruby\" \u5b57\u7b26\u4e32\u3002 1 #del langs[15] \u6211\u4eec\u53ea\u80fd\u5220\u9664\u73b0\u6709\u5143\u7d20\u3002 \u5982\u679c\u53d6\u6d88\u6ce8\u91ca\u4ee3\u7801\u884c\uff0c\u6211\u4eec\u5c06\u6536\u5230 IndexError \u6d88\u606f\u3002 1 del langs[:] \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4ece\u5217\u8868\u4e2d\u5220\u9664\u6240\u6709\u5269\u4f59\u7684\u5143\u7d20\u3002 [:] \u5b57\u7b26\u8868\u793a\u5217\u8868\u7684\u6240\u6709\u9879\u76ee\u3002 1 2 3 4 $ ./removing2.py ['Python', 'Ruby', 'Perl', 'Lua', 'JavaScript'] ['Python', 'Perl', 'Lua', 'JavaScript'] []","title":"\u4ece Python \u5217\u8868\u4e2d\u5220\u9664\u5143\u7d20"},{"location":"pages/python/pytutorial/python-lists/#Python-\u4fee\u6539\u5217\u8868\u5143\u7d20","text":"\u5728\u4e0b\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u4fee\u6539\u5217\u8868\u5143\u7d20\u3002 modifying.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python # modifying.py langs = [\"Python\", \"Ruby\", \"Perl\"] langs.pop(2) langs.insert(2, \"PHP\") print(langs) langs[2] = \"Perl\" print(langs) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4e24\u6b21\u4fee\u6539\u4e86 langs \u5217\u8868\u7684\u7b2c\u4e09\u4e2a\u5143\u7d20\u3002 1 2 langs.pop(2) langs.insert(2, \"PHP\") \u4fee\u6539\u5143\u7d20\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u5c06\u5176\u5220\u9664\uff0c\u7136\u540e\u5c06\u53e6\u4e00\u4e2a\u5143\u7d20\u653e\u7f6e\u5728\u540c\u4e00\u4f4d\u7f6e\u3002 1 langs[2] = \"Perl\" \u53e6\u4e00\u79cd\u65b9\u6cd5\u66f4\u7b80\u5355\u3002 \u6211\u4eec\u5728\u7ed9\u5b9a\u4f4d\u7f6e\u5206\u914d\u4e00\u4e2a\u65b0\u5143\u7d20\u3002 \u73b0\u5728\uff0c\u5728\u7b2c\u4e09\u4e2a\u4f4d\u7f6e\u518d\u6b21\u6709 \"Perl\" \u5b57\u7b26\u4e32\u3002 1 2 3 $ ./modifying.py ['Python', 'Ruby', 'PHP'] ['Python', 'Ruby', 'Perl']","title":"Python \u4fee\u6539\u5217\u8868\u5143\u7d20"},{"location":"pages/python/pytutorial/python-lists/#Python-\u590d\u5236\u5217\u8868","text":"\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u591a\u79cd\u65b9\u5f0f\u5728 Python \u4e2d\u590d\u5236\u5217\u8868\u3002 \u6211\u4eec\u5c06\u63d0\u53ca\u5176\u4e2d\u7684\u4e00\u4e9b\u3002 copying.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #!/usr/bin/env python # copying.py import copy w = [\"Python\", \"Ruby\", \"Perl\"] c1 = w[:] c2 = list(w) c3 = copy.copy(w) c4 = copy.deepcopy(w) c5 = [e for e in w] c6 = [] for e in w: c6.append(e) c7 = [] c7.extend(w) print(c1, c2, c3, c4, c5, c6, c7) \u6211\u4eec\u5217\u51fa\u4e86\u4e09\u4e2a\u5b57\u7b26\u4e32\u3002 \u6211\u4eec\u5c06\u5217\u8868\u590d\u5236\u4e86\u4e03\u6b21\u3002 1 import copy \u6211\u4eec\u5bfc\u5165 copy \u6a21\u5757\uff0c\u5176\u4e2d\u6709\u4e24\u79cd\u590d\u5236\u65b9\u6cd5\u3002 1 c1 = w[:] \u4f7f\u7528\u5207\u7247\u8bed\u6cd5\u590d\u5236\u5217\u8868\u3002 1 c2 = list(w) \u5f53 list() \u51fd\u6570\u5c06\u5217\u8868\u4f5c\u4e3a\u53c2\u6570\u65f6\uff0c\u5b83\u4f1a\u521b\u5efa\u4e00\u4e2a\u5217\u8868\u526f\u672c\u3002 1 2 c3 = copy.copy(w) c4 = copy.deepcopy(w) copy() \u65b9\u6cd5\u4ea7\u751f\u5217\u8868\u7684\u6d45\u8868\u526f\u672c\u3002 deepcopy() \u4ea7\u751f\u5217\u8868\u7684\u6df1\u5c42\u526f\u672c\u3002 1 c5 = [e for e in w] \u4f7f\u7528\u5217\u8868\u63a8\u5bfc\u521b\u5efa\u5b57\u7b26\u4e32\u7684\u526f\u672c\u3002 1 2 3 4 c6 = [] for e in w: c6.append(e) \u7531 for \u5faa\u73af\u521b\u5efa\u7684\u526f\u672c\u3002 1 2 c7 = [] c7.extend(w) extend() \u65b9\u6cd5\u4e5f\u53ef\u7528\u4e8e\u521b\u5efa\u526f\u672c\u3002 1 2 3 4 $ ./copying.py ['Python', 'Ruby', 'Perl'] ['Python', 'Ruby', 'Perl'] ['Python', 'Ruby', 'Perl'] ['Python', 'Ruby', 'Perl'] ['Python', 'Ruby', 'Perl'] ['Python', 'Ruby', 'Perl'] ['Python', 'Ruby', 'Perl'] \u4f7f\u7528\u4e0d\u540c\u7684\u6280\u672f\u521b\u5efa\u4e86\u4e00\u4e2a\u5b57\u7b26\u4e32\u5217\u8868\u7684\u4e03\u4e2a\u526f\u672c\u3002","title":"Python \u590d\u5236\u5217\u8868"},{"location":"pages/python/pytutorial/python-lists/#Python-\u7d22\u5f15\u5217\u8868\u5143\u7d20","text":"Python \u5217\u8868\u4e2d\u7684\u5143\u7d20\u53ef\u4ee5\u901a\u8fc7\u5176\u7d22\u5f15\u8fdb\u884c\u8bbf\u95ee\u3002 \u7d22\u5f15\u53f7\u662f\u6574\u6570\uff1b \u4ed6\u4eec\u4ece\u96f6\u5f00\u59cb\u3002 \u7d22\u5f15\u53ef\u4ee5\u662f\u8d1f\u6570\uff1b \u8d1f\u7d22\u5f15\u662f\u6307\u5217\u8868\u672b\u5c3e\u7684\u5143\u7d20\u3002 \u5217\u8868\u4e2d\u7684\u7b2c\u4e00\u9879\u5177\u6709\u7d22\u5f15 0\uff0c\u6700\u540e\u4e00\u9879\u5177\u6709-1\u3002 indexing.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python # indexing.py n = [1, 2, 3, 4, 5, 6, 7, 8] print(n[0]) print(n[-1]) print(n[-2]) print(n[3]) print(n[5]) \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5176\u7d22\u5f15\u8bbf\u95ee\u5217\u8868\u7684\u5143\u7d20\u3002 \u7d22\u5f15\u4f4d\u4e8e\u5217\u8868\u540d\u79f0\u540e\u65b9\u62ec\u53f7 [] \u4e4b\u95f4\u3002 1 2 3 print(n[0]) print(n[-1]) print(n[-2]) \u8fd9\u4e09\u884c\u5c06\u6253\u5370\u5217\u8868\u7684\u7b2c\u4e00\uff0c\u6700\u540e\u548c\u6700\u540e\u4e00\u4e2a\u9879\u76ee\u3002 1 2 print(n[3]) print(n[5]) \u4e24\u884c\u663e\u793a\u5217\u8868\u7684\u7b2c\u56db\u548c\u7b2c\u516d\u4e2a\u5143\u7d20\u3002 1 2 3 4 5 6 $ ./indexing.py 1 8 7 4 6 index(e, start, end) \u65b9\u6cd5\u67e5\u627e\u7279\u5b9a\u5143\u7d20\u5e76\u8fd4\u56de\u5176\u6700\u4f4e\u7d22\u5f15\u3002 start \u548c end \u662f\u53ef\u9009\u53c2\u6570\uff0c\u5b83\u4eec\u5c06\u641c\u7d22\u9650\u5236\u5230\u7ed9\u5b9a\u7684\u8fb9\u754c\u3002 indexing2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/env python # indexing2.py n = [1, 2, 3, 4, 1, 2, 3, 1, 2] print(n.index(1)) print(n.index(2)) print(n.index(1, 1)) print(n.index(2, 2)) print(n.index(1, 2, 5)) print(n.index(3, 4, 8)) index() \u65b9\u6cd5\u7684\u4ee3\u7801\u793a\u4f8b\u3002 1 2 print(n.index(1)) print(n.index(2)) \u8fd9\u4e24\u884c\u663e\u793a n \u5217\u8868\u4e2d\u6700\u5de6\u8fb9\u7684 1\u30012 \u503c\u7684\u7d22\u5f15\u3002 1 2 print(n.index(1, 1)) print(n.index(2, 2)) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5728\u6307\u5b9a\u7d22\u5f15\u4e4b\u540e\u641c\u7d22\u503c 1 \u548c 2\u3002 1 print(n.index(1, 2, 5)) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5728\u7d22\u5f15\u4e3a 2 \u548c 5 \u7684\u503c\u4e4b\u95f4\u641c\u7d22\u503c 1\u3002 1 2 3 4 5 6 7 $ ./indexing2.py 0 1 4 5 4 6","title":"Python \u7d22\u5f15\u5217\u8868\u5143\u7d20"},{"location":"pages/python/pytutorial/python-lists/#Python-\u5207\u7247\u5217\u8868","text":"\u5217\u8868\u5207\u7247\u662f\u4e00\u79cd\u4ece\u5217\u8868\u4e2d\u63d0\u53d6\u67d0\u4e9b\u5143\u7d20\u5e76\u5c06\u5176\u5f62\u6210\u53e6\u4e00\u4e2a\u5217\u8868\u7684\u64cd\u4f5c\u3002 \u53ef\u80fd\u5177\u6709\u4e0d\u540c\u6570\u91cf\u7684\u7d22\u5f15\u548c\u4e0d\u540c\u7684\u7d22\u5f15\u8303\u56f4\u3002 \u5217\u8868\u5207\u7247\u7684\u8bed\u6cd5\u5982\u4e0b\uff1a 1 [start:end:step] \u8bed\u6cd5\u7684\u5f00\u59cb\uff0c\u7ed3\u675f\uff0c\u6b65\u9aa4\u90e8\u5206\u662f\u6574\u6570\u3002 \u5b83\u4eec\u6bcf\u4e2a\u90fd\u662f\u53ef\u9009\u7684\u3002 \u5b83\u4eec\u53ef\u4ee5\u662f\u6b63\u9762\u7684\u4e5f\u53ef\u4ee5\u662f\u8d1f\u9762\u7684\u3002 \u5177\u6709\u7ed3\u675f\u7d22\u5f15\u7684\u503c\u4e0d\u5305\u62ec\u5728\u5207\u7247\u4e2d\u3002 slice.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python # slice.py n = [1, 2, 3, 4, 5, 6, 7, 8] print(n[1:5]) print(n[:5]) print(n[1:]) print(n[:]) \u6211\u4eec\u4ece\u516b\u4e2a\u6574\u6570\u7684\u5217\u8868\u4e2d\u521b\u5efa\u56db\u4e2a\u5207\u7247\u3002 1 print(n[1:5]) \u7b2c\u4e00\u4e2a\u5207\u7247\u7684\u7d22\u5f15\u503c\u4e3a 1\u30012\u30013 \u548c 4\u3002\u65b0\u5f62\u6210\u7684\u5217\u8868\u4e3a[2\u30013\u30014\u30015]\u3002 1 print(n[:5]) \u5982\u679c\u7701\u7565\u8d77\u59cb\u7d22\u5f15\uff0c\u5219\u5047\u5b9a\u9ed8\u8ba4\u503c\u4e3a 0\u3002\u5207\u7247\u4e3a[1\u30012\u30013\u30014\u30015]\u3002 1 print(n[1:]) \u5982\u679c\u7701\u7565\u4e86\u7ed3\u675f\u7d22\u5f15\uff0c\u5219\u91c7\u7528-1 \u9ed8\u8ba4\u503c\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5207\u7247\u5c06\u6240\u6709\u503c\u5e26\u5230\u5217\u8868\u7684\u672b\u5c3e\u3002 1 print(n[:]) \u751a\u81f3\u4e24\u4e2a\u7d22\u5f15\u90fd\u53ef\u4ee5\u5ffd\u7565\u3002 \u6b64\u8bed\u6cd5\u521b\u5efa\u5217\u8868\u7684\u526f\u672c\u3002 1 2 3 4 5 $ ./slice.py [2, 3, 4, 5] [1, 2, 3, 4, 5] [2, 3, 4, 5, 6, 7, 8] [1, 2, 3, 4, 5, 6, 7, 8] \u793a\u4f8b\u7684\u8f93\u51fa\u3002 \u5207\u7247\u8bed\u6cd5\u4e2d\u7684\u7b2c\u4e09\u4e2a\u7d22\u5f15\u662f\u6b65\u9aa4\u3002 \u5b83\u5141\u8bb8\u6211\u4eec\u4ece\u5217\u8868\u4e2d\u83b7\u53d6\u7b2c n \u4e2a\u503c\u3002 slice2.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python # slice2.py n = [1, 2, 3, 4, 5, 6, 7, 8] print(n[1:9:2]) print(n[::2]) print(n[::1]) print(n[1::3]) \u6211\u4eec\u4f7f\u7528 step \u503c\u5f62\u6210\u56db\u4e2a\u65b0\u5217\u8868\u3002 1 print(n[1:9:2]) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u5207\u7247\uff0c\u8be5\u5207\u7247\u5177\u6709\u4ece n \u5217\u8868\u5f00\u59cb\u7684\u6bcf\u4e2a\u7b2c\u4e8c\u5143\u7d20\uff0c\u4ece\u7b2c\u4e8c\u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u4ee5\u7b2c\u516b\u4e2a\u5143\u7d20\u7ed3\u675f\u3002 \u65b0\u5217\u8868\u5177\u6709\u4ee5\u4e0b\u5143\u7d20\uff1a[2\u30014\u30016\u30018]\u3002 1 print(n[::2]) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u901a\u8fc7\u83b7\u53d6\u5217\u8868\u5f00\u5934\u5230\u7ed3\u5c3e\u7684\u6bcf\u4e2a\u7b2c\u4e8c\u4e2a\u503c\u6765\u6784\u5efa\u5207\u7247\u3002 1 print(n[::1]) \u8fd9\u5c06\u521b\u5efa\u4e00\u4e2a\u5217\u8868\u7684\u526f\u672c\u3002 1 print(n[1::3]) \u5207\u7247\u5177\u6709\u7b2c\u4e8c\u4e2a\u5143\u7d20\uff0c\u4ece\u7b2c\u4e8c\u4e2a\u5143\u7d20\u5230\u5217\u8868\u7684\u672b\u5c3e\u3002 1 2 3 4 5 $ ./slice2.py [2, 4, 6, 8] [1, 3, 5, 7] [1, 2, 3, 4, 5, 6, 7, 8] [2, 5, 8] \u7d22\u5f15\u53ef\u4ee5\u662f\u8d1f\u6570\u3002 \u8d1f\u7d22\u5f15\u662f\u6307\u5217\u8868\u672b\u5c3e\u7684\u503c\u3002 \u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u7d22\u5f15\u4e3a-1\uff0c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u7d22\u5f15\u4e3a-2\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\u8d1f\u6570\u8f83\u5c0f\u7684\u7d22\u5f15\u5fc5\u987b\u5728\u8bed\u6cd5\u4e2d\u6392\u5728\u9996\u4f4d\u3002 \u8fd9\u610f\u5473\u7740\u6211\u4eec\u5199[-6\uff0c-2]\u800c\u4e0d\u662f[-2\uff0c-6]\u3002 \u540e\u8005\u8fd4\u56de\u4e00\u4e2a\u7a7a\u5217\u8868\u3002 slice3.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python # slice3.py n = [1, 2, 3, 4, 5, 6, 7, 8] print(n[-4:-1]) print(n[-1:-4]) print(n[-5:]) print(n[-6:-2:2]) print(n[::-1]) \u5728\u6b64\u811a\u672c\u4e2d\uff0c\u6211\u4eec\u5f62\u6210\u4e94\u4e2a\u5217\u8868\u3002 \u6211\u4eec\u8fd8\u4f7f\u7528\u8d1f\u7d22\u5f15\u53f7\u3002 1 2 print(n[-4:-1]) print(n[-1:-4]) \u7b2c\u4e00\u884c\u8fd4\u56de[5\uff0c6\uff0c7]\uff0c\u7b2c\u4e8c\u884c\u8fd4\u56de\u4e00\u4e2a\u7a7a\u5217\u8868\u3002 \u8f83\u4f4e\u7684\u7d22\u5f15\u5fc5\u987b\u5148\u4e8e\u8f83\u9ad8\u7684\u7d22\u5f15\u3002 1 print(n[::-1]) \u8fd9\u5c06\u521b\u5efa\u4e00\u4e2a\u53cd\u5411\u5217\u8868\u3002 1 2 3 4 5 6 $ ./slice3.py [5, 6, 7] [] [4, 5, 6, 7, 8] [3, 5] [8, 7, 6, 5, 4, 3, 2, 1] \u4e0a\u9762\u63d0\u5230\u7684\u8bed\u6cd5\u53ef\u4ee5\u5728\u5206\u914d\u4e2d\u4f7f\u7528\u3002 \u4f5c\u4e1a\u7684\u53f3\u4fa7\u5fc5\u987b\u6709\u4e00\u4e2a\u53ef\u8fed\u4ee3\u7684\u5bf9\u8c61\u3002 slice4.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python # slice4.py n = [1, 2, 3, 4, 5, 6, 7, 8] n[0] = 10 n[1:3] = 20, 30 n[3::1] = 40, 50, 60, 70, 80 print(n) \u6211\u4eec\u6709\u516b\u4e2a\u6574\u6570\u7684\u5217\u8868\u3002 \u6211\u4eec\u4f7f\u7528\u5207\u7247\u8bed\u6cd5\u5c06\u5143\u7d20\u66ff\u6362\u4e3a\u65b0\u503c\u3002","title":"Python \u5207\u7247\u5217\u8868"},{"location":"pages/python/pytutorial/python-lists/#\u904d\u5386-Python-\u5217\u8868","text":"\u672c\u8282\u5c06\u6307\u51fa\u5728 Python \u4e2d\u904d\u5386\u5217\u8868\u7684\u4e09\u79cd\u57fa\u672c\u65b9\u6cd5\u3002 traverse.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python # traverse.py n = [1, 2, 3, 4, 5] for e in n: print(e, end=\" \") print() \u7b2c\u4e00\u4e2a\u662f\u904d\u5386\u5217\u8868\u7684\u6700\u76f4\u63a5\u65b9\u6cd5\u3002 1 n = [1, 2, 3, 4, 5] \u6211\u4eec\u6709\u4e00\u4e2a\u6570\u5b57\u5217\u8868\u3002 \u5217\u8868\u4e2d\u6709\u4e94\u4e2a\u6574\u6570\u3002 1 2 for e in n: print(e, end=\" \") \u4f7f\u7528 for \u5faa\u73af\uff0c\u6211\u4eec\u4e00\u5f20\u4e00\u5f20\u5730\u6d4f\u89c8\u5217\u8868\uff0c\u7136\u540e\u5c06\u5f53\u524d\u5143\u7d20\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 2 $ ./traverse.py 1 2 3 4 5 \u8fd9\u662f\u811a\u672c\u7684\u8f93\u51fa\u3002 \u6574\u6570\u5c06\u6253\u5370\u5230\u7ec8\u7aef\u3002 \u7b2c\u4e8c\u4e2a\u793a\u4f8b\u66f4\u4e3a\u8be6\u7ec6\u3002 traverse2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python # traverse2.py n = [1, 2, 3, 4, 5] i = 0 s = len(n) while i < s: print(n[i], end=\" \") i = i + 1 print() \u6211\u4eec\u6b63\u5728\u4f7f\u7528 while \u5faa\u73af\u904d\u5386\u5217\u8868\u3002 1 2 i = 0 l = len(n) \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a\u8ba1\u6570\u5668\u5e76\u627e\u51fa\u5217\u8868\u7684\u5927\u5c0f\u3002 1 2 3 4 while i < s: print(n[i], end=\" \") i = i + 1 \u5728\u8fd9\u4e24\u4e2a\u6570\u5b57\u7684\u5e2e\u52a9\u4e0b\uff0c\u6211\u4eec\u904d\u5386\u5217\u8868\u5e76\u5c06\u6bcf\u4e2a\u5143\u7d20\u6253\u5370\u5230\u7ec8\u7aef\u3002 enumerate() \u5185\u7f6e\u51fd\u6570\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u5faa\u73af\u4e2d\u5217\u8868\u7684\u7d22\u5f15\u548c\u503c\u3002 traverse3.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python # traverse3.py n = [1, 2, 3, 4, 5] print(list(enumerate(n))) for e, i in enumerate(n): print(\"n[{0}] = {1}\".format(e, i)) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6253\u5370\u503c\u548c\u503c\u7684\u7d22\u5f15\u3002 1 2 3 4 5 6 7 $ ./traverse3.py [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5)] n[0] = 1 n[1] = 2 n[2] = 3 n[3] = 4 n[4] = 5","title":"\u904d\u5386 Python \u5217\u8868"},{"location":"pages/python/pytutorial/python-lists/#Python-\u8ba1\u6570\u5217\u8868\u5143\u7d20","text":"\u6709\u65f6\u5bf9\u5217\u8868\u5143\u7d20\u8fdb\u884c\u8ba1\u6570\u5f88\u91cd\u8981\u3002 \u4e3a\u6b64\uff0cPython \u5177\u6709 count() \u65b9\u6cd5\u3002 counting.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python # counting.py n = [1, 1, 2, 3, 4, 4, 4, 5] print(n.count(4)) print(n.count(1)) print(n.count(2)) print(n.count(6)) \u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u8ba1\u7b97 n \u5217\u8868\u4e2d\u51e0\u4e2a\u6570\u5b57\u7684\u51fa\u73b0\u6b21\u6570\u3002 1 n = [1, 1, 2, 3, 4, 4, 4, 5] \u6211\u4eec\u6709\u4e00\u4e2a\u6574\u6570\u5217\u8868\u3002 \u6574\u6570 1 \u548c 4 \u591a\u6b21\u51fa\u73b0\u3002 1 2 3 4 print(n.count(4)) print(n.count(1)) print(n.count(2)) print(n.count(6)) \u4f7f\u7528 count() \u65b9\u6cd5\uff0c\u6211\u4eec\u53d1\u73b0 4\u30011\u30012 \u548c 6 \u4e2a\u6570\u5b57\u7684\u51fa\u73b0\u3002 1 2 3 4 5 $ ./counting.py 3 2 1 0 \u6570\u5b57 4 \u51fa\u73b0 3 \u6b21\uff0c1 \u6b21\u4e24\u6b21\uff0c2 \u6b21\u4e00\u6b21\u4ee5\u53ca 6 \u5728\u5217\u8868\u4e2d\u4e0d\u5b58\u5728\u3002","title":"Python \u8ba1\u6570\u5217\u8868\u5143\u7d20"},{"location":"pages/python/pytutorial/python-lists/#Python-\u5d4c\u5957\u5217\u8868","text":"\u53ef\u4ee5\u5c06\u5217\u8868\u5d4c\u5957\u5230\u53e6\u4e00\u4e2a\u5217\u8868\u4e2d\u3002 \u4f7f\u7528\u5d4c\u5957\u5217\u8868\uff0c\u5c06\u521b\u5efa\u4e00\u4e2a\u65b0\u7ef4\u5ea6\u3002 \u8981\u8bbf\u95ee\u5d4c\u5957\u5217\u8868\uff0c\u9700\u8981\u9644\u52a0\u7684\u65b9\u62ec\u53f7 [] \u3002 nested.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env python # nested.py nums = [[1, 2], [3, 4], [5, 6]] print(nums[0]) print(nums[1]) print(nums[2]) print(nums[0][0]) print(nums[0][1]) print(nums[1][0]) print(nums[2][1]) print(len(nums)) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\u4e09\u4e2a\u5d4c\u5957\u5217\u8868\uff0c\u6bcf\u4e2a\u5d4c\u5957\u5217\u8868\u5305\u542b\u4e24\u4e2a\u5143\u7d20\u3002 1 2 3 print(nums[0]) print(nums[1]) print(nums[2]) nums \u5217\u8868\u7684\u4e09\u4e2a\u5d4c\u5957\u5217\u8868\u5c06\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 2 print(nums[0][0]) print(nums[0][1]) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u6253\u5370\u7b2c\u4e00\u4e2a\u5d4c\u5957\u5217\u8868\u7684\u4e24\u4e2a\u5143\u7d20\u3002 nums[0] \u5f15\u7528\u7b2c\u4e00\u4e2a\u5d4c\u5957\u5217\u8868\uff1b nums[0][0] \u5f15\u7528\u7b2c\u4e00\u4e2a\u5d4c\u5957\u5217\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u5373 1\u3002 1 print(len(nums)) \u8be5\u884c\u663e\u793a 3\u3002\u6bcf\u4e2a\u5d4c\u5957\u5217\u8868\u90fd\u8ba1\u4e3a\u4e00\u4e2a\u5143\u7d20\u3002 \u4e0d\u8003\u8651\u5176\u5185\u90e8\u5143\u7d20\u3002 1 2 3 4 5 6 7 8 9 $ ./nested.py [1, 2] [3, 4] [5, 6] 1 2 3 6 3 \u7b2c\u4e8c\u4e2a\u793a\u4f8b\u5177\u6709\u5176\u4ed6\u7ef4\u5ea6\u3002 nested2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python # nested2.py nums = [[1, 2, [3, 4, [5, 6]]]] print(nums[0]) print(nums[0][2]) print(nums[0][2][2]) print(nums[0][0]) print(nums[0][2][1]) print(nums[0][2][2][0]) \u5728\u793a\u4f8b\u4e2d\uff0c[5\uff0c6]\u5217\u8868\u5d4c\u5957\u5230[3\uff0c4\uff0c\u2026]\u5217\u8868\u4e2d\uff0c[3\uff0c4\uff0c[4\uff0c6]]\u5d4c\u5957\u5230[1,2\uff0c\u2026]\u4e2d list \u6700\u7ec8\u662f nums \u5217\u8868\u7684\u5143\u7d20\u3002 1 2 3 print(nums[0]) print(nums[0][2]) print(nums[0][2][2]) \u8fd9\u4e09\u884c\u5c06\u5d4c\u5957\u5217\u8868\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 2 3 print(nums[0][0]) print(nums[0][2][1]) print(nums[0][2][2][0]) \u5728\u6b64\u8bbf\u95ee\u4e09\u4e2a\u5143\u7d20\u3002 \u5f15\u7528\u5185\u90e8\u5217\u8868\u65f6\uff0c\u9700\u8981\u5176\u4ed6\u65b9\u62ec\u53f7 [] \u3002 1 2 3 4 5 6 7 $ ./nested2.py [1, 2, [3, 4, [5, 6]]] [3, 4, [5, 6]] [5, 6] 1 4 5","title":"Python \u5d4c\u5957\u5217\u8868"},{"location":"pages/python/pytutorial/python-lists/#Python-\u6392\u5e8f\u5217\u8868","text":"\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5bf9\u5217\u8868\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\u3002 Python \u5177\u6709\u7528\u4e8e\u6267\u884c\u6392\u5e8f\u7684\u5185\u7f6e\u5217\u8868\u65b9\u6cd5 sort() \u548c sorted() \u51fd\u6570\u3002 sorting.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python # sorting.py n = [3, 4, 7, 1, 2, 8, 9, 5, 6] print(n) n.sort() print(n) n.sort(reverse=True) print(n) \u5728\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u672a\u6392\u5e8f\u6574\u6570\u7684\u5217\u8868\u3002 \u6211\u4eec\u4f7f\u7528 sort() \u65b9\u6cd5\u5bf9\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\u3002 \u8be5\u65b9\u6cd5\u5bf9\u5143\u7d20\u8fdb\u884c\u539f\u4f4d\u6392\u5e8f\uff1b \u539f\u59cb\u5217\u8868\u5df2\u4fee\u6539\u3002 1 n.sort() sort() \u65b9\u6cd5\u4ee5\u5347\u5e8f\u5bf9\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\u3002 1 n.sort(reverse=True) \u5c06\u53cd\u5411\u53c2\u6570\u8bbe\u7f6e\u4e3a True \u65f6\uff0c\u5217\u8868\u4ee5\u964d\u5e8f\u6392\u5e8f\u3002 1 2 3 4 $ ./sorting.py [3, 4, 7, 1, 2, 8, 9, 5, 6] [1, 2, 3, 4, 5, 6, 7, 8, 9] [9, 8, 7, 6, 5, 4, 3, 2, 1] \u5728\u8f93\u51fa\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u539f\u59cb\u5217\u8868\uff0c\u5373\u6309\u5347\u5e8f\u548c\u964d\u5e8f\u6392\u5e8f\u7684\u5217\u8868\u3002 \u5982\u679c\u6211\u4eec\u4e0d\u60f3\u66f4\u6539\u539f\u59cb\u5217\u8868\uff0c\u53ef\u4ee5\u4f7f\u7528 sorted \u51fd\u6570\u3002 \u6b64\u51fd\u6570\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6392\u5e8f\u5217\u8868\u3002 sorting2.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python # sorting2.py n = [3, 4, 1, 7, 2, 5, 8, 6] print(n) print(sorted(n)) print(n) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 sorted() \u51fd\u6570\u5bf9\u5217\u8868\u7684\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\u3002 1 2 3 4 $ ./sorting2.py [3, 4, 1, 7, 2, 5, 8, 6] [1, 2, 3, 4, 5, 6, 7, 8] [3, 4, 1, 7, 2, 5, 8, 6] \u4ece\u811a\u672c\u7684\u8f93\u51fa\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u539f\u59cb\u5217\u8868\u6ca1\u6709\u88ab\u4fee\u6539\u3002 sort() \u65b9\u6cd5\u5177\u6709\u53ef\u9009\u7684 key \u53c2\u6570\u3002 \u8be5\u53c2\u6570\u6307\u5b9a\u5728\u8fdb\u884c\u6bd4\u8f83\u4e4b\u524d\u5728\u6bcf\u4e2a\u5217\u8868\u5143\u7d20\u4e0a\u8981\u8c03\u7528\u7684\u51fd\u6570\u3002 sorting3.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python # sorting3.py words = [\"big\", \"Blue\", \"seven\", \"glass\", \"Green\", \"after\", \"Anctartica\"] words.sort() print(words) words.sort(key=str.lower) print(words) \u8be5\u793a\u4f8b\u4ea7\u751f\u533a\u5206\u5927\u5c0f\u5199\u548c\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u7684\u5b57\u7b26\u4e32\u6bd4\u8f83\u3002 1 words.sort(key=str.lower) \u4e3a\u4e86\u521b\u5efa\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u7684\u6bd4\u8f83\uff0c\u6211\u4eec\u5c06 str.lower \u51fd\u6570\u6dfb\u52a0\u5230 key \u53c2\u6570\u4e2d\u3002 1 2 3 $ ./sorting3.py ['Anctartica', 'Blue', 'Green', 'after', 'big', 'glass', 'seven'] ['after', 'Anctartica', 'big', 'Blue', 'glass', 'Green', 'seven'] \u5982\u679c\u8981\u5bf9 Unicode \u5b57\u7b26\u4e32\u8fdb\u884c\u6392\u5e8f\uff0c\u6211\u4eec\u9700\u8981\u505a\u5176\u4ed6\u5de5\u4f5c\u3002 sorting_locale.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python import locale from functools import cmp_to_key w = [u'zem', u'\u0161tebot', u'rum', u'\u017eelezo', u'prame\u0148', u\"sob\"] locale.setlocale(locale.LC_COLLATE, ('sk_SK', 'UTF8')) w.sort(key=cmp_to_key(locale.strcoll)) for e in w: print(e) \u6211\u4eec\u6709\u516d\u4e2a unicode \u5b57\u7b26\u4e32\u7684\u5217\u8868\u3002 \u6211\u4eec\u66f4\u6539\u8bed\u8a00\u73af\u5883\u8bbe\u7f6e\uff0c\u4ee5\u6839\u636e\u5f53\u524d\u8bed\u8a00\u9009\u9879\u5bf9\u5b57\u7b26\u4e32\u8fdb\u884c\u6392\u5e8f\u3002 1 2 import locale from functools import cmp_to_key \u6211\u4eec\u5bfc\u5165 locale \u6a21\u5757\u548c cmp_to_key \u8f6c\u6362\u51fd\u6570\u3002 1 w = [u'zem', u'\u0161tebot', u'rum', u'\u017eelezo', u'prame\u0148', u\"sob\"] \u8fd9\u662f\u516d\u4e2a\u5b57\u7b26\u4e32\u7684\u5217\u8868\u3002 \u5b57\u7b26\u4e32\u4f7f\u7528\u65af\u6d1b\u4f10\u514b\u8bed\uff0c\u5e76\u5e26\u6709\u4e00\u4e9b\u53d8\u97f3\u6807\u8bb0\u3002 \u5b83\u4eec\u5728\u6b63\u786e\u6392\u5e8f\u5b57\u7b26\u65b9\u9762\u53d1\u6325\u4f5c\u7528\u3002 1 locale.setlocale(locale.LC_COLLATE, ('sk_SK', 'UTF8')) \u6211\u4eec\u4e3a\u65af\u6d1b\u4f10\u514b\u8bed\u8bbe\u7f6e\u4e86\u8bed\u8a00\u73af\u5883\u3002 1 w.sort(key=cmp_to_key(locale.strcoll)) \u6211\u4eec\u5bf9\u5217\u8868\u8fdb\u884c\u6392\u5e8f\u3002 locale.strcoll \u6839\u636e\u5f53\u524d LC_COLLATE \u8bbe\u7f6e\u6bd4\u8f83\u4e24\u4e2a\u5b57\u7b26\u4e32\u3002 cmp_to_key \u51fd\u6570\u5c06 old-style \u6bd4\u8f83\u51fd\u6570\u8f6c\u6362\u4e3a\u952e\u51fd\u6570\u3002 1 2 for e in w: print(e) \u6211\u4eec\u5c06\u5df2\u6392\u5e8f\u7684\u5355\u8bcd\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 2 3 4 5 6 7 $ ./sorting_locale.py prame\u0148 rum sob \u0161tebot zem \u017eelezo \u5143\u7d20\u5df2\u6b63\u786e\u6392\u5e8f\u3002 \u8003\u8651\u4e86\u65af\u6d1b\u4f10\u514b\u5b57\u6bcd\u7684\u7ec6\u8282\u3002","title":"Python \u6392\u5e8f\u5217\u8868"},{"location":"pages/python/pytutorial/python-lists/#Python-\u53cd\u8f6c\u5217\u8868\u5143\u7d20","text":"\u6211\u4eec\u53ef\u4ee5\u5728 Python \u4e2d\u4ee5\u51e0\u79cd\u65b9\u5f0f\u53cd\u8f6c\u5217\u8868\u4e2d\u7684\u5143\u7d20\u3002 \u53cd\u5411\u5143\u7d20\u4e0d\u5e94\u4e0e\u53cd\u5411\u6392\u5e8f\u6df7\u6dc6\u3002 reversing.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #!/usr/bin/env python # reversing.py a1 = [\"bear\", \"lion\", \"tiger\", \"eagle\"] a2 = [\"bear\", \"lion\", \"tiger\", \"eagle\"] a3 = [\"bear\", \"lion\", \"tiger\", \"eagle\"] a1.reverse() print(a1) it = reversed(a2) r = list() for e in it: r.append(e) print(r) print(a3[::-1]) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\u4e09\u4e2a\u76f8\u540c\u7684\u5b57\u7b26\u4e32\u5217\u8868\u3002 \u6211\u4eec\u4ee5\u4e09\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u53cd\u8f6c\u5143\u7d20\u3002 1 a1.reverse() \u7b2c\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528 reverse() \u65b9\u6cd5\u3002 1 2 3 4 5 it = reversed(a2) r = list() for e in it: r.append(e) reversed() \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u53cd\u5411\u8fed\u4ee3\u5668\u3002 \u6211\u4eec\u5728 for \u5faa\u73af\u4e2d\u4f7f\u7528\u8fed\u4ee3\u5668\uff0c\u5e76\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u53cd\u5411\u5217\u8868\u3002 1 print(a3[::-1]) \u7b2c\u4e09\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528 slice \u8bed\u6cd5\u53cd\u8f6c\u5217\u8868\uff0c\u5176\u4e2d step \u53c2\u6570\u8bbe\u7f6e\u4e3a-1\u3002 1 2 3 4 $ ./reversing.py ['eagle', 'tiger', 'lion', 'bear'] ['eagle', 'tiger', 'lion', 'bear'] ['eagle', 'tiger', 'lion', 'bear'] \u4e09\u4e2a\u5217\u8868\u5168\u90e8\u98a0\u5012\u4e86\u3002","title":"Python \u53cd\u8f6c\u5217\u8868\u5143\u7d20"},{"location":"pages/python/pytutorial/python-lists/#Python-\u5217\u8868\u63a8\u5bfc\u5f0f","text":"\u5217\u8868\u63a8\u5bfc\u5f0f\u662f\u4e00\u79cd\u57fa\u4e8e\u73b0\u6709\u5217\u8868\u521b\u5efa\u5217\u8868\u7684\u8bed\u6cd5\u7ed3\u6784\u3002 \u8bed\u6cd5\u53d7\u96c6\u5408\u7684\u6570\u5b66\u7b26\u53f7\u7684\u5f71\u54cd\u3002 Python \u8bed\u6cd5\u53d7 Haskell \u7f16\u7a0b\u8bed\u8a00\u542f\u53d1\u3002 1 L = [expression for variable in sequence [if condition]] \u4e0a\u9762\u7684\u4f2a\u4ee3\u7801\u663e\u793a\u4e86\u5217\u8868\u63a8\u5bfc\u5f0f\u7684\u8bed\u6cd5\u3002 \u5217\u8868\u63a8\u5bfc\u5f0f\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u5217\u8868\u3002 \u5b83\u57fa\u4e8e\u73b0\u6709\u5217\u8868\u3002 for \u5faa\u73af\u904d\u5386\u6574\u4e2a\u5e8f\u5217\u3002 \u5bf9\u4e8e\u6bcf\u4e2a\u5faa\u73af\uff0c\u5982\u679c\u6ee1\u8db3\u6761\u4ef6\uff0c\u5219\u5bf9\u8868\u8fbe\u5f0f\u8fdb\u884c\u6c42\u503c\u3002 \u5982\u679c\u8ba1\u7b97\u51fa\u8be5\u503c\uff0c\u5b83\u5c06\u88ab\u6dfb\u52a0\u5230\u65b0\u5217\u8868\u4e2d\u3002 \u6761\u4ef6\u662f\u53ef\u9009\u7684\u3002 \u5728\u53ef\u4ee5\u4f7f\u7528 map() \u548c filter() \u548c/\u6216\u5d4c\u5957\u5faa\u73af\u7684\u60c5\u51b5\u4e0b\uff0c\u5217\u8868\u63a8\u5bfc\u5f0f\u4e3a\u521b\u5efa\u5217\u8868\u63d0\u4f9b\u4e86\u4e00\u79cd\u66f4\u7b80\u6d01\u7684\u65b9\u6cd5\u3002 list_comprehension.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python # list_comprehension.py a = [1, 2, 3, 4, 5, 6, 7, 8, 9] b = [e for e in a if e % 2] print(b) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u6570\u5b57\u5217\u8868\u3002 \u5728\u5217\u8868\u63a8\u5bfc\u5f0f\u7684\u5e2e\u52a9\u4e0b\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u6570\u5b57\u5217\u8868\uff0c\u8fd9\u4e9b\u6570\u5b57\u4e0d\u80fd\u9664\u4ee5 2 \u800c\u6ca1\u6709\u4f59\u6570\u3002 1 a = [1, 2, 3, 4, 5, 6, 7, 8, 9] \u8fd9\u662f\u4e5d\u4e2a\u6574\u6570\u7684\u5217\u8868\u3002 1 b = [e for e in a if e % 2] \u8fd9\u91cc\u6211\u4eec\u6709\u5217\u8868\u63a8\u5bfc\u5f0f\u3002 \u5728 for e in a \u5faa\u73af\u4e2d\uff0c\u83b7\u53d6\u5217\u8868\u7684\u6bcf\u4e2a\u5143\u7d20\u3002 \u7136\u540e\u6d4b\u8bd5 if e % 2 \u6761\u4ef6\u3002 \u5982\u679c\u6ee1\u8db3\u6761\u4ef6\uff0c\u5219\u5bf9\u8868\u8fbe\u5f0f\u6c42\u503c\u3002 \u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u8868\u8fbe\u5f0f\u662f\u4e00\u4e2a\u7eaf e \uff0c\u5b83\u76f4\u63a5\u4f7f\u7528\u5143\u7d20\u3002 \u6700\u540e\uff0c\u5143\u7d20\u88ab\u6dfb\u52a0\u5230\u5217\u8868\u4e2d\u3002 1 2 $ ./list_comprehension.py [1, 3, 5, 7, 9] \u793a\u4f8b\u8f93\u51fa\u3002 \u5217\u8868\u4e2d\u7684\u6570\u5b57\u4e0d\u80fd\u9664\u4ee5 2\uff0c\u4e0d\u80fd\u6709\u4f59\u6570\u3002 \u5728\u7b2c\u4e8c\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u5217\u8868\u63a8\u5bfc\u5f0f\u4e0e\u4f20\u7edf\u7684 for \u5faa\u73af\u8fdb\u884c\u4e86\u6bd4\u8f83\u3002 list_comprehension2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python # list_comprehension2.py lang = \"Python\" a = [] for e in lang: a.append(ord(e)) b = [ord(e) for e in lang] print(a) print(b) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 \u6211\u4eec\u8981\u521b\u5efa\u5b57\u7b26\u4e32\u5b57\u6bcd\u7684 ASCII \u6574\u6570\u4ee3\u7801\u7684\u5217\u8868\u3002 1 2 3 4 a = [] for e in lang: a.append(ord(e)) \u6211\u4eec\u4f7f\u7528 for \u5faa\u73af\u521b\u5efa\u8fd9\u6837\u7684\u5217\u8868\u3002 1 b = [ord(e) for e in lang] \u8fd9\u91cc\u4f7f\u7528\u5217\u8868\u63a8\u5bfc\u4ea7\u751f\u76f8\u540c\u7684\u7ed3\u679c\u3002 \u6ce8\u610f\uff0c\u7701\u7565\u4e86 if \u6761\u4ef6\u3002 \u5b83\u662f\u53ef\u9009\u7684\u3002 1 2 3 $ ./list_comprehension2.py [80, 121, 116, 104, 111, 110] [80, 121, 116, 104, 111, 110] \u8fd9\u662f\u793a\u4f8b\u8f93\u51fa\u3002 \u60a8\u53ef\u4ee5\u5728Python \u5217\u8868\u63a8\u5bfc\u6559\u7a0b\u4e2d\u627e\u5230\u6709\u5173\u5217\u8868\u63a8\u5bfc\u7684\u66f4\u591a\u4fe1\u606f\u3002","title":"Python \u5217\u8868\u63a8\u5bfc\u5f0f"},{"location":"pages/python/pytutorial/python-lists/#Python-\u6620\u5c04\u548c\u8fc7\u6ee4\u5668\u51fd\u6570","text":"map() \u548c filter() \u51fd\u6570\u662f\u53ef\u5728\u6240\u6709\u5217\u8868\u9879\u4e0a\u4f7f\u7528\u7684\u8d28\u91cf\u51fd\u6570\u3002 \u5b83\u4eec\u662f Python \u8bed\u8a00\u5185\u7f6e\u7684\u51fd\u6570\u7f16\u7a0b\u7684\u4e00\u90e8\u5206\u3002 \u4eca\u5929\uff0c\u5efa\u8bae\u5c3d\u53ef\u80fd\u4f7f\u7528\u5217\u8868\u63a8\u5bfc\u4ee3\u66ff\u8fd9\u4e9b\u51fd\u6570\u3002 map_fun.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python # map_fun.py def to_upper(s): return s.upper() words = [\"stone\", \"cloud\", \"dream\", \"sky\"] words2 = list(map(to_upper, words)) print(words2) map() \u51fd\u6570\u5c06\u7279\u5b9a\u51fd\u6570\u5e94\u7528\u4e8e\u5217\u8868\u7684\u6bcf\u4e2a\u5143\u7d20\u3002 1 2 3 def to_upper(s): return s.upper() \u8fd9\u662f\u5c06\u5e94\u7528\u4e8e\u6bcf\u4e2a\u5217\u8868\u5143\u7d20\u7684\u51fd\u6570\u7684\u5b9a\u4e49\u3002 \u5b83\u5728\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u4e0a\u8c03\u7528 upper() \u5b57\u7b26\u4e32\u65b9\u6cd5\u3002 1 words = [\"stone\", \"cloud\", \"dream\", \"sky\"] \u8fd9\u662f\u5b57\u7b26\u4e32\u5217\u8868\u3002 1 2 words2 = map(to_upper, words) print(words2) map() \u51fd\u6570\u5c06 to_upper() \u51fd\u6570\u5e94\u7528\u4e8e\u5355\u8bcd\u5217\u8868\u7684\u6bcf\u4e2a\u5b57\u7b26\u4e32\u5143\u7d20\u3002 \u5f62\u6210\u4e00\u4e2a\u65b0\u5217\u8868\u5e76\u8fd4\u56de\u3002 \u6211\u4eec\u5c06\u5176\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 2 $ ./map_fun.py ['STONE', 'CLOUD', 'DREAM', 'SKY'] \u5217\u8868\u4e2d\u7684\u6bcf\u4e00\u9879\u5747\u4ee5\u5927\u5199\u5b57\u6bcd\u8868\u793a\u3002 filter() \u51fd\u6570\u4ece\u5217\u8868\u7684\u90a3\u4e9b\u5143\u7d20\u4e2d\u4e3a\u51fd\u6570\u8fd4\u56de true \u7684\u5217\u8868\u6784\u9020\u4e00\u4e2a\u5217\u8868\u3002 filter_fun.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python # filter_fun.py def positive(x): return x > 0 n = [-2, 0, 1, 2, -3, 4, 4, -1] print(list(filter(positive, n))) \u6f14\u793a filter() \u51fd\u6570\u7684\u793a\u4f8b\u3002 \u5b83\u5c06\u521b\u5efa\u4e00\u4e2a\u4ec5\u5177\u6709\u6b63\u503c\u7684\u65b0\u5217\u8868\u3002 \u5b83\u5c06\u6ee4\u9664\u6240\u6709\u8d1f\u503c\u548c 0\u3002 1 2 def positive(x): return x > 0 \u8fd9\u662f filter() \u51fd\u6570\u4f7f\u7528\u7684\u51fd\u6570\u7684\u5b9a\u4e49\u3002 \u8fd4\u56de True \u6216 False \u3002 \u8fd4\u56de\u5e03\u5c14\u503c\u7684\u51fd\u6570\u79f0\u4e3a\u8c13\u8bcd\u3002 1 2 $ ./filter_fun.py [1, 2, 4, 4] filter_fun.py \u811a\u672c\u7684\u8f93\u51fa\u3002","title":"Python \u6620\u5c04\u548c\u8fc7\u6ee4\u5668\u51fd\u6570"},{"location":"pages/python/pytutorial/python-logging/","text":"Python \u65e5\u5fd7\u6559\u7a0b \u00b6 Python \u65e5\u5fd7\u6559\u7a0b \u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528\u65e5\u5fd7\u6a21\u5757\u5728 Python \u4e2d\u8fdb\u884c\u65e5\u5fd7\u3002 \u65e5\u5fd7 \u00b6 \u65e5\u5fd7\u662f\u5c06\u4fe1\u606f\u5199\u5165\u65e5\u5fd7\u6587\u4ef6\u7684\u8fc7\u7a0b\uff0c\u65e5\u5fd7\u6587\u4ef6\u5305\u542b\u6709\u5173\u5728\u64cd\u4f5c\u7cfb\u7edf\uff0c\u8f6f\u4ef6\u6216\u901a\u4fe1\u4e2d\u53d1\u751f\u7684\u5404\u79cd\u4e8b\u4ef6\u7684\u4fe1\u606f\u3002 \u8bb0\u5f55\u76ee\u7684 \u00b6 \u5b8c\u6210\u8bb0\u5f55\u662f\u51fa\u4e8e\u4ee5\u4e0b\u76ee\u7684\uff1a \u4fe1\u606f\u6536\u96c6 \u6545\u969c\u6392\u9664 \u4ea7\u751f\u7edf\u8ba1\u6570\u636e \u7a3d\u6838 \u5256\u6790 \u8bb0\u5f55\u4e0d\u4ec5\u9650\u4e8e\u8bc6\u522b\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u7684\u9519\u8bef\u3002 \u5b83\u8fd8\u53ef\u7528\u4e8e\u68c0\u6d4b\u5b89\u5168\u4e8b\u4ef6\uff0c\u76d1\u89c6\u7b56\u7565\u8fdd\u89c4\uff0c\u5728\u51fa\u73b0\u95ee\u9898\u65f6\u63d0\u4f9b\u4fe1\u606f\uff0c\u67e5\u627e\u5e94\u7528\u74f6\u9888\u6216\u751f\u6210\u4f7f\u7528\u60c5\u51b5\u6570\u636e\u3002 \u8981\u8bb0\u5f55\u54ea\u4e9b\u4e8b\u4ef6 \u00b6 \u5e94\u8bb0\u5f55\u7684\u4e8b\u4ef6\u5305\u62ec\u8f93\u5165\u9a8c\u8bc1\u5931\u8d25\uff0c\u8eab\u4efd\u9a8c\u8bc1\u548c\u6388\u6743\u5931\u8d25\uff0c\u5e94\u7528\u9519\u8bef\uff0c\u914d\u7f6e\u66f4\u6539\u4ee5\u53ca\u5e94\u7528\u542f\u52a8\u548c\u5173\u95ed\u3002 \u54ea\u4e9b\u4e8b\u4ef6\u4e0d\u8bb0\u5f55 \u00b6 \u4e0d\u5e94\u8bb0\u5f55\u7684\u4e8b\u4ef6\u5305\u62ec\u5e94\u7528\u6e90\u4ee3\u7801\uff0c\u4f1a\u8bdd\u6807\u8bc6\u503c\uff0c\u8bbf\u95ee\u4ee4\u724c\uff0c\u654f\u611f\u7684\u4e2a\u4eba\u6570\u636e\uff0c\u5bc6\u7801\uff0c\u6570\u636e\u5e93\u8fde\u63a5\u5b57\u7b26\u4e32\uff0c\u52a0\u5bc6\u952e\uff0c\u94f6\u884c\u5e10\u6237\u548c\u6301\u5361\u4eba\u6570\u636e\u3002 \u8bb0\u5f55\u6700\u4f73\u505a\u6cd5 \u00b6 \u4ee5\u4e0b\u662f\u8fdb\u884c\u65e5\u5fd7\u7684\u4e00\u4e9b\u6700\u4f73\u505a\u6cd5\uff1a \u65e5\u5fd7\u5e94\u8be5\u6709\u610f\u4e49\u3002 \u65e5\u5fd7\u5e94\u5305\u542b\u4e0a\u4e0b\u6587\u3002 \u65e5\u5fd7\u5e94\u5728\u4e0d\u540c\u7ea7\u522b\u8fdb\u884c\u7ed3\u6784\u5316\u548c\u5b8c\u6210\u3002 \u6d4b\u4e95\u5e94\u4fdd\u6301\u5e73\u8861\uff1b \u5b83\u4e0d\u5e94\u5305\u542b\u8fc7\u591a\u6216\u8fc7\u591a\u7684\u4fe1\u606f\u3002 \u8bb0\u5f55\u6d88\u606f\u5e94\u8be5\u662f\u4eba\u7c7b\u53ef\u4ee5\u7406\u89e3\u7684\uff0c\u5e76\u4e14\u53ef\u4ee5\u88ab\u673a\u5668\u89e3\u6790\u3002 \u767b\u5f55\u66f4\u590d\u6742\u7684\u5e94\u7528\u5e94\u5b8c\u6210\u51e0\u4e2a\u65e5\u5fd7\u6587\u4ef6\u3002 \u6d4b\u4e95\u5e94\u9002\u5e94\u5f00\u53d1\u548c\u751f\u4ea7\u3002 \u65e5\u5fd7\u6a21\u5757 \u00b6 Python \u65e5\u5fd7\u6a21\u5757\u5b9a\u4e49\u4e86\u5b9e\u73b0\u7528\u4e8e\u5e94\u7528\u548c\u5e93\u7684\u7075\u6d3b\u4e8b\u4ef6\u65e5\u5fd7\u7cfb\u7edf\u7684\u51fd\u6570\u548c\u7c7b\u3002 \u65e5\u5fd7\u6a21\u5757\u7ec4\u4ef6 \u00b6 \u65e5\u5fd7\u6a21\u5757\u5177\u6709\u56db\u4e2a\u4e3b\u8981\u7ec4\u4ef6\uff1a\u8bb0\u5f55\u5668\uff0c\u5904\u7406\u7a0b\u5e8f\uff0c\u8fc7\u6ee4\u5668\u548c\u683c\u5f0f\u5316\u7a0b\u5e8f\u3002 \u8bb0\u5f55\u5668\u516c\u5f00\u4e86\u5e94\u7528\u4ee3\u7801\u76f4\u63a5\u4f7f\u7528\u7684\u63a5\u53e3\u3002 \u5904\u7406\u7a0b\u5e8f\u5c06\u65e5\u5fd7\uff08\u7531\u8bb0\u5f55\u5668\u521b\u5efa\uff09\u53d1\u9001\u5230\u9002\u5f53\u7684\u76ee\u7684\u5730\u3002 \u7b5b\u9009\u5668\u63d0\u4f9b\u4e86\u66f4\u7ec6\u7c92\u5ea6\u7684\u529f\u80fd\uff0c\u7528\u4e8e\u786e\u5b9a\u8981\u8f93\u51fa\u7684\u65e5\u5fd7\u3002 \u683c\u5f0f\u5316\u7a0b\u5e8f\u5728\u6700\u7ec8\u8f93\u51fa\u4e2d\u6307\u5b9a\u65e5\u5fd7\u7684\u5e03\u5c40\u3002 Python \u65e5\u5fd7\u5c42\u6b21\u7ed3\u6784 \u00b6 Python \u8bb0\u5f55\u5668\u5f62\u6210\u4e00\u4e2a\u5c42\u6b21\u7ed3\u6784\u3002 \u540d\u4e3a main \u7684\u8bb0\u5f55\u5668\u662f main.new \u7684\u7236\u7ea7\u3002 \u5b50\u8bb0\u5f55\u5668\u5c06\u6d88\u606f\u4f20\u64ad\u5230\u4e0e\u5176\u7956\u5148\u8bb0\u5f55\u5668\u5173\u8054\u7684\u5904\u7406\u7a0b\u5e8f\u3002 \u56e0\u6b64\uff0c\u4e0d\u5fc5\u4e3a\u5e94\u7528\u4e2d\u7684\u6240\u6709\u8bb0\u5f55\u5668\u5b9a\u4e49\u548c\u914d\u7f6e\u5904\u7406\u7a0b\u5e8f\u3002 \u4e3a\u9876\u7ea7\u8bb0\u5f55\u5668\u914d\u7f6e\u5904\u7406\u7a0b\u5e8f\u5e76\u6839\u636e\u9700\u8981\u521b\u5efa\u5b50\u8bb0\u5f55\u5668\u5c31\u8db3\u591f\u4e86\u3002 Python \u65e5\u5fd7\u7ea7\u522b \u00b6 \u7ea7\u522b\u7528\u4e8e\u6807\u8bc6\u4e8b\u4ef6\u7684\u4e25\u91cd\u6027\u3002 \u6709\u516d\u4e2a\u65e5\u5fd7\u7ea7\u522b\uff1a \u5371\u6025 \u9519\u8bef \u8b66\u544a \u4fe1\u606f \u8c03\u8bd5 \u6ca1\u6709\u8bbe\u7f6e \u5982\u679c\u65e5\u5fd7\u7ea7\u522b\u8bbe\u7f6e\u4e3a WARNING \uff0c\u5219\u6240\u6709 WARNING \uff0c ERROR \u548c CRITICAL \u6d88\u606f\u90fd\u5c06\u5199\u5165\u65e5\u5fd7\u6587\u4ef6\u6216\u63a7\u5236\u53f0\u3002 \u5982\u679c\u5c06\u5176\u8bbe\u7f6e\u4e3a ERROR \uff0c\u5219\u4ec5\u8bb0\u5f55 ERROR \u548c CRITICAL \u6d88\u606f\u3002 \u8bb0\u5f55\u5668\u7684\u6982\u5ff5\u662f\u6709\u6548\u7ea7\u522b\u3002 \u5982\u679c\u672a\u5728\u8bb0\u5f55\u5668\u4e0a\u663e\u5f0f\u8bbe\u7f6e\u7ea7\u522b\uff0c\u5219\u5c06\u5176\u7236\u7ea7\u522b\u7528\u4f5c\u5176\u6709\u6548\u7ea7\u522b\u3002 \u5982\u679c\u7236\u7ea7\u6ca1\u6709\u663e\u5f0f\u8bbe\u7f6e\u7684\u7ea7\u522b\uff0c\u5219\u68c0\u67e5\u5176\u7236\u7ea7\uff0c\u4f9d\u6b64\u7c7b\u63a8-\u641c\u7d22\u6240\u6709\u7956\u5148\uff0c\u76f4\u5230\u627e\u5230\u663e\u5f0f\u8bbe\u7f6e\u7684\u7ea7\u522b\u3002 \u4f7f\u7528 getLogger() \u521b\u5efa\u8bb0\u5f55\u5668\u65f6\uff0c\u7ea7\u522b\u8bbe\u7f6e\u4e3a NOTSET \u3002 \u5982\u679c\u672a\u4f7f\u7528 setLevel() \u663e\u5f0f\u8bbe\u7f6e\u65e5\u5fd7\u7ea7\u522b\uff0c\u5219\u6d88\u606f\u5c06\u4f20\u64ad\u5230\u8bb0\u5f55\u5668\u7236\u7ea7\u3002 \u904d\u5386\u8bb0\u5f55\u5668\u7684\u7956\u5148\u8bb0\u5f55\u5668\u94fe\uff0c\u76f4\u5230\u627e\u5230\u5177\u6709 NOTSET \u4ee5\u5916\u7ea7\u522b\u7684\u7956\u5148\u6216\u5230\u8fbe\u6839\u3002 \u6839\u8bb0\u5f55\u5668\u5177\u6709\u9ed8\u8ba4\u7684 WARNING \u7ea7\u522b\u8bbe\u7f6e\u3002 \u6839\u8bb0\u5f55\u5668 \u00b6 \u6240\u6709\u8bb0\u5f55\u5668\u90fd\u662f\u6839\u8bb0\u5f55\u5668\u7684\u540e\u4ee3\u3002 \u6bcf\u4e2a\u8bb0\u5f55\u5668\u5c06\u65e5\u5fd7\u6d88\u606f\u4f20\u9012\u5230\u5176\u7236\u7ea7\u3002 \u4f7f\u7528 getLogger(name) \u65b9\u6cd5\u521b\u5efa\u65b0\u7684\u8bb0\u5f55\u5668\u3002 \u8c03\u7528\u4e0d\u5e26\u540d\u79f0\u7684\u51fd\u6570\uff08 getLogger() \uff09\u5c06\u8fd4\u56de root \u8bb0\u5f55\u5668\u3002 \u6839\u8bb0\u5f55\u5668\u59cb\u7ec8\u5177\u6709\u663e\u5f0f\u7ea7\u522b\u96c6\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e3a WARNING \u3002 \u6839\u53d1\u4fe1\u4eba\u4f4d\u4e8e\u5c42\u6b21\u7ed3\u6784\u7684\u9876\u90e8\uff0c\u5373\u4f7f\u672a\u914d\u7f6e\uff0c\u4e5f\u59cb\u7ec8\u5b58\u5728\u3002 \u901a\u5e38\uff0c\u7a0b\u5e8f\u6216\u5e93\u4e0d\u5e94\u76f4\u63a5\u767b\u5f55\u5230\u6839\u8bb0\u5f55\u5668\u3002 \u800c\u662f\u5e94\u914d\u7f6e\u8be5\u7a0b\u5e8f\u7684\u7279\u5b9a\u8bb0\u5f55\u5668\u3002 \u6839\u8bb0\u5f55\u5668\u53ef\u7528\u4e8e\u8f7b\u677e\u6253\u5f00\u548c\u5173\u95ed\u6240\u6709\u5e93\u4e2d\u7684\u6240\u6709\u8bb0\u5f55\u5668\u3002 Python \u65e5\u5fd7\u7b80\u5355\u793a\u4f8b \u00b6 logging \u6a21\u5757\u5177\u6709\u7b80\u5355\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u7acb\u5373\u4f7f\u7528\u800c\u65e0\u9700\u4efb\u4f55\u914d\u7f6e\u3002 \u8fd9\u53ef\u4ee5\u7528\u4e8e\u7b80\u5355\u7684\u65e5\u5fd7\u3002 simple.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python import logging logging.debug('This is a debug message') logging.info('This is an info message') logging.warning('This is a warning message') logging.error('This is an error message') logging.critical('This is a critical message') \u8be5\u793a\u4f8b\u8c03\u7528 logging \u6a21\u5757\u7684\u4e94\u4e2a\u65b9\u6cd5\u3002 \u6d88\u606f\u5c06\u5199\u5165\u63a7\u5236\u53f0\u3002 1 2 3 4 $ simple.py WARNING:root:This is a warning message ERROR:root:This is an error message CRITICAL:root:This is a critical message \u8bf7\u6ce8\u610f\uff0c\u4f7f\u7528\u4e86\u6839\u8bb0\u5f55\u5668\uff0c\u5e76\u4e14\u53ea\u5199\u5165\u4e86\u4e09\u5219\u6d88\u606f\u3002 \u8fd9\u662f\u56e0\u4e3a\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4ec5\u5199\u5165\u5177\u6709\u7ea7\u522b\u8b66\u544a\u548c\u66f4\u9ad8\u7ea7\u522b\u7684\u6d88\u606f\u3002 Python \u8bbe\u7f6e\u65e5\u5fd7\u7ea7\u522b \u00b6 \u8bb0\u5f55\u7ea7\u522b\u7531 setLevel() \u8bbe\u7f6e\u3002 \u5b83\u5c06\u6b64\u8bb0\u5f55\u5668\u7684\u9608\u503c\u8bbe\u7f6e\u4e3a lvl \u3002 \u4e25\u91cd\u6027\u4e0d\u53ca lvl \u7684\u65e5\u5fd7\u6d88\u606f\u5c06\u88ab\u5ffd\u7565\u3002 set_level.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python import logging logger = logging.getLogger('dev') logger.setLevel(logging.DEBUG) logger.debug('This is a debug message') logger.info('This is an info message') logger.warning('This is a warning message') logger.error('This is an error message') logger.critical('This is a critical message') \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u65e5\u5fd7\u7ea7\u522b\u66f4\u6539\u4e3a DEBUG \u3002 1 logger = logging.getLogger('dev') getLogger() \u8fd4\u56de\u5177\u6709\u6307\u5b9a\u540d\u79f0\u7684\u8bb0\u5f55\u5668\u3002 \u5982\u679c\u540d\u79f0\u4e3a None \uff0c\u5219\u8fd4\u56de\u6839\u8bb0\u5f55\u5668\u3002 \u540d\u79f0\u53ef\u4ee5\u662f\u70b9\u5206\u9694\u7684\u5b57\u7b26\u4e32\uff0c\u7528\u4e8e\u5b9a\u4e49\u65e5\u5fd7\u5c42\u6b21\u7ed3\u6784\u3002 \u4f8b\u5982\u201c a\u201d\uff0c\u201c a.b\u201d\u6216\u201c a.b.c\u201d\u3002 \u8bf7\u6ce8\u610f\uff0c\u6709\u4e00\u4e2a\u9690\u5f0f\u6839\u540d\uff0c\u672a\u663e\u793a\u3002 1 2 3 4 $ set_level.py This is a warning message This is an error message This is a critical message \u73b0\u5728\uff0c\u6240\u6709\u6d88\u606f\u5747\u5df2\u5199\u5165\u3002 Python \u6709\u6548\u65e5\u5fd7\u7ea7\u522b \u00b6 \u6709\u6548\u65e5\u5fd7\u7ea7\u522b\u662f\u663e\u5f0f\u8bbe\u7f6e\u7684\u7ea7\u522b\u6216\u7531\u8bb0\u5f55\u5668\u7236\u7ea7\u786e\u5b9a\u7684\u7ea7\u522b\u3002 effective_level.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python import logging main_logger = logging.getLogger('main') main_logger.setLevel(5) dev_logger = logging.getLogger('main.dev') print(main_logger.getEffectiveLevel()) print(dev_logger.getEffectiveLevel()) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u68c0\u67e5\u4e86\u4e24\u4e2a\u8bb0\u5f55\u5668\u7684\u6709\u6548\u8bb0\u5f55\u7ea7\u522b\u3002 1 dev_logger = logging.getLogger('main.dev') \u672a\u8bbe\u7f6e dev_logger \u7684\u7535\u5e73\uff1b \u7136\u540e\u4f7f\u7528\u5176\u7236\u7ea7\u3002 1 2 3 $ effective_level.py 5 5 Python \u65e5\u5fd7\u5904\u7406\u7a0b\u5e8f \u00b6 \u5904\u7406\u7a0b\u5e8f\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u8d1f\u8d23\u5c06\u9002\u5f53\u7684\u65e5\u5fd7\u6d88\u606f\uff08\u57fa\u4e8e\u65e5\u5fd7\u6d88\u606f\u7684\u4e25\u91cd\u6027\uff09\u8c03\u5ea6\u5230\u5904\u7406\u7a0b\u5e8f\u7684\u6307\u5b9a\u76ee\u6807\u3002 \u5904\u7406\u7a0b\u5e8f\u50cf\u7ea7\u522b\u4e00\u6837\u4f20\u64ad\u3002 \u5982\u679c\u8bb0\u5f55\u5668\u672a\u8bbe\u7f6e\u5904\u7406\u7a0b\u5e8f\uff0c\u5219\u5176\u7956\u5148\u94fe\u5c06\u641c\u7d22\u5904\u7406\u7a0b\u5e8f\u3002 handlers.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env python import logging logger = logging.getLogger('dev') logger.setLevel(logging.INFO) fileHandler = logging.FileHandler('test.log') fileHandler.setLevel(logging.INFO) consoleHandler = logging.StreamHandler() consoleHandler.setLevel(logging.INFO) logger.addHandler(fileHandler) logger.addHandler(consoleHandler) logger.info('information message') \u8be5\u793a\u4f8b\u4e3a\u8bb0\u5f55\u5668\u521b\u5efa\u4e24\u4e2a\u5904\u7406\u7a0b\u5e8f\uff1a\u6587\u4ef6\u5904\u7406\u7a0b\u5e8f\u548c\u63a7\u5236\u53f0\u5904\u7406\u7a0b\u5e8f\u3002 1 fileHandler = logging.FileHandler('test.log') FileHandler \u5c06\u65e5\u5fd7\u53d1\u9001\u5230 test.log \u6587\u4ef6\u3002 1 consoleHandler = logging.StreamHandler() StreamHandler \u5c06\u65e5\u5fd7\u53d1\u9001\u5230\u6d41\u3002 \u5982\u679c\u672a\u6307\u5b9a\u6d41\uff0c\u5219\u4f7f\u7528 sys.stderr \u3002 1 logger.addHandler(fileHandler) \u8be5\u5904\u7406\u7a0b\u5e8f\u5c06\u901a\u8fc7 addHandler() \u6dfb\u52a0\u5230\u8bb0\u5f55\u5668\u3002 Python \u65e5\u5fd7\u683c\u5f0f\u5316\u7a0b\u5e8f \u00b6 \u683c\u5f0f\u5316\u7a0b\u5e8f\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u7528\u4e8e\u914d\u7f6e\u65e5\u5fd7\u7684\u6700\u7ec8\u987a\u5e8f\uff0c\u7ed3\u6784\u548c\u5185\u5bb9\u3002 \u9664\u6d88\u606f\u5b57\u7b26\u4e32\u5916\uff0c\u65e5\u5fd7\u8fd8\u5305\u62ec\u65e5\u671f\u548c\u65f6\u95f4\uff0c\u65e5\u5fd7\u540d\u79f0\u548c\u65e5\u5fd7\u7ea7\u522b\u4e25\u91cd\u6027\u3002 formatter.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/env python import logging logger = logging.getLogger('dev') logger.setLevel(logging.INFO) consoleHandler = logging.StreamHandler() consoleHandler.setLevel(logging.INFO) logger.addHandler(consoleHandler) formatter = logging.Formatter('%(asctime)s %(name)s %(levelname)s: %(message)s') consoleHandler.setFormatter(formatter) logger.info('information message') \u8be5\u793a\u4f8b\u521b\u5efa\u4e00\u4e2a\u63a7\u5236\u53f0\u8bb0\u5f55\u5668\uff0c\u5e76\u5c06\u683c\u5f0f\u5316\u7a0b\u5e8f\u6dfb\u52a0\u5230\u5176\u5904\u7406\u7a0b\u5e8f\u3002 1 formatter = logging.Formatter('%(asctime)s %(name)s %(levelname)s: %(message)s') \u683c\u5f0f\u5316\u7a0b\u5e8f\u5df2\u521b\u5efa\u3002 \u5b83\u5305\u62ec\u65e5\u671f\u65f6\u95f4\uff0c\u8bb0\u5f55\u5668\u540d\u79f0\uff0c\u8bb0\u5f55\u7ea7\u522b\u540d\u79f0\u548c\u8bb0\u5f55\u6d88\u606f\u3002 1 consoleHandler.setFormatter(formatter) \u683c\u5f0f\u5316\u7a0b\u5e8f\u901a\u8fc7 setFormatter() \u8bbe\u7f6e\u4e3a\u5904\u7406\u7a0b\u5e8f\u3002 1 2 $ formatter.py 2019-03-28 14:53:27,446 dev INFO: information message \u5177\u6709\u5b9a\u4e49\u683c\u5f0f\u7684\u6d88\u606f\u663e\u793a\u5728\u63a7\u5236\u53f0\u4e2d\u3002 Python \u65e5\u5fd7 basicConfig \u00b6 basicConfig() \u914d\u7f6e\u6839\u8bb0\u5f55\u5668\u3002 \u5b83\u901a\u8fc7\u4f7f\u7528\u9ed8\u8ba4\u683c\u5f0f\u5316\u7a0b\u5e8f\u521b\u5efa\u6d41\u5904\u7406\u7a0b\u5e8f\u6765\u4e3a\u65e5\u5fd7\u7cfb\u7edf\u8fdb\u884c\u57fa\u672c\u914d\u7f6e\u3002 \u5982\u679c\u6ca1\u6709\u4e3a\u6839\u8bb0\u5f55\u5668\u5b9a\u4e49\u5904\u7406\u7a0b\u5e8f\uff0c\u5219 debug() \uff0c info() \uff0c warning() \uff0c error() \u548c critical() \u81ea\u52a8\u8c03\u7528 basicConfig() \u3002 basic_config.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python import logging logging.basicConfig(filename='test.log', format='%(filename)s: %(message)s', level=logging.DEBUG) logging.debug('This is a debug message') logging.info('This is an info message') logging.warning('This is a warning message') logging.error('This is an error message') logging.critical('This is a critical message') \u8be5\u793a\u4f8b\u4f7f\u7528 basicConfig \u914d\u7f6e\u6839\u8bb0\u5f55\u5668\u3002 1 2 logging.basicConfig(filename='test.log', format='%(filename)s: %(message)s', level=logging.DEBUG) \u4f7f\u7528 filename \uff0c\u6211\u4eec\u8bbe\u7f6e\u8981\u5199\u5165\u65e5\u5fd7\u6d88\u606f\u7684\u6587\u4ef6\u3002 format \u786e\u5b9a\u5c06\u4ec0\u4e48\u5185\u5bb9\u8bb0\u5f55\u5230\u6587\u4ef6\u4e2d\uff1b \u6211\u4eec\u6709\u6587\u4ef6\u540d\u548c\u6d88\u606f\u3002 \u4f7f\u7528 level \uff0c\u8bbe\u7f6e\u8bb0\u5f55\u9608\u503c\u3002 1 2 3 4 5 6 7 $ basic_config.py $ cat test.log basic_config.py: This is a debug message basic_config.py: This is an info message basic_config.py: This is a warning message basic_config.py: This is an error message basic_config.py: This is a critical message \u8fd0\u884c\u8be5\u7a0b\u5e8f\u540e\uff0c\u6211\u4eec\u5c06\u4e94\u6761\u6d88\u606f\u5199\u5165 test.log \u6587\u4ef6\u3002 Python \u65e5\u5fd7\u6587\u4ef6\u914d\u7f6e \u00b6 fileConfig() \u4ece configparser \u683c\u5f0f\u6587\u4ef6\u4e2d\u8bfb\u53d6\u65e5\u5fd7\u914d\u7f6e\u3002 log.conf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 [loggers] keys=root,dev [handlers] keys=consoleHandler [formatters] keys=extend,simple [logger_root] level=INFO handlers=consoleHandler [logger_dev] level=INFO handlers=consoleHandler qualname=dev propagate=0 [handler_consoleHandler] class=StreamHandler level=INFO formatter=extend args=(sys.stdout,) [formatter_extend] format=%(asctime)s - %(name)s - %(levelname)s - %(message)s [formatter_simple] format=%(asctime)s - %(message)s log.conf \u5b9a\u4e49\u4e86\u8bb0\u5f55\u5668\uff0c\u5904\u7406\u7a0b\u5e8f\u548c\u683c\u5f0f\u5316\u7a0b\u5e8f\u3002 file_config.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python import logging import logging.config logging.config.fileConfig(fname='log.conf') logger = logging.getLogger('dev') logger.info('This is an information message') \u8be5\u793a\u4f8b\u4ece log.conf \u8bfb\u53d6\u65e5\u5fd7\u914d\u7f6e\u6587\u4ef6\u3002 1 2 $ file_config.py 2019-03-28 15:26:31,137 - dev - INFO - This is an information message Python \u65e5\u5fd7\u53d8\u91cf \u00b6 \u901a\u8fc7\u4f7f\u7528\u5b57\u7b26\u4e32\u683c\u5f0f\u8bb0\u5f55\u52a8\u6001\u6570\u636e\u3002 log_variable.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python import logging root = logging.getLogger() root.setLevel(logging.INFO) log_format = '%(asctime)s %(filename)s: %(message)s' logging.basicConfig(filename=\"test.log\", format=log_format) # incident happens error_message = 'authentication failed' root.error(f'error: {error_message}') \u8be5\u793a\u4f8b\u5c06\u81ea\u5b9a\u4e49\u6570\u636e\u5199\u5165\u65e5\u5fd7\u6d88\u606f\u3002 1 2019-03-21 14:17:23,196 log_variable.py: error: authentication failed \u8fd9\u662f\u65e5\u5fd7\u6d88\u606f\u3002 Python \u65e5\u5fd7\u683c\u5f0f\u5316\u65e5\u671f\u65f6\u95f4 \u00b6 \u65e5\u671f\u65f6\u95f4\u5305\u542b\u5728 asctime \u65e5\u5fd7\u7684\u65e5\u5fd7\u6d88\u606f\u4e2d\u3002 \u4f7f\u7528 datefmt \u914d\u7f6e\u9009\u9879\uff0c\u6211\u4eec\u53ef\u4ee5\u683c\u5f0f\u5316\u65e5\u671f\u65f6\u95f4\u5b57\u7b26\u4e32\u3002 date_time.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python import logging logger = logging.getLogger() logger.setLevel(logging.DEBUG) log_format = '%(asctime)s %(filename)s: %(message)s' logging.basicConfig(filename=\"test.log\", format=log_format, datefmt='%Y-%m-%d %H:%M:%S') logger.info(\"information message\") \u8be5\u793a\u4f8b\u683c\u5f0f\u5316\u65e5\u5fd7\u6d88\u606f\u7684\u65e5\u671f\u65f6\u95f4\u3002 1 log_format = '%(asctime)s %(filename)s: %(message)s' \u6211\u4eec\u5c06\u65e5\u671f\u65f6\u95f4\u5b57\u7b26\u4e32\u5305\u542b\u5728 asctime \u4e2d\u3002 1 2 logging.basicConfig(filename=\"test.log\", format=log_format, datefmt='%Y-%m-%d %H:%M:%S') datefmt \u9009\u9879\u683c\u5f0f\u5316\u65e5\u671f\u65f6\u95f4\u5b57\u7b26\u4e32\u3002 1 2 2019-03-21 14:17:23,196 log_variable.py: error: authentication failed 2019-03-21 14:23:33 date_time.py: information message \u6ce8\u610f dattime \u5b57\u7b26\u4e32\u683c\u5f0f\u7684\u4e0d\u540c\u3002 Python \u65e5\u5fd7\u5806\u6808\u8ddf\u8e2a \u00b6 \u5806\u6808\u8ddf\u8e2a\u662f\u8c03\u7528\u51fd\u6570\u7684\u5806\u6808\uff0c\u8fd9\u4e9b\u51fd\u6570\u4e00\u76f4\u8fd0\u884c\u5230\u5f15\u53d1\u5f02\u5e38\u65f6\u4e3a\u6b62\u3002 \u5806\u6808\u8ddf\u8e2a\u5305\u542b\u5728 exc_info \u9009\u9879\u4e2d\u3002 stack_trace.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/env python import logging log_format = '%(asctime)s %(filename)s: %(message)s' logging.basicConfig(filename=\"test.log\", format=log_format) vals = [1, 2] try: print(vals[4]) except Exception as e: logging.error(\"exception occurred\", exc_info=True) \u5728\u8be5\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u8bb0\u5f55\u4e86\u5c1d\u8bd5\u8bbf\u95ee\u4e0d\u5b58\u5728\u7684\u5217\u8868\u7d22\u5f15\u65f6\u5f15\u53d1\u7684\u5f02\u5e38\u3002 1 logging.error(\"exception occurred\", exc_info=True) \u901a\u8fc7\u5c06 exc_info \u8bbe\u7f6e\u4e3a True \uff0c\u5806\u6808\u8ddf\u8e2a\u5c06\u5305\u542b\u5728\u65e5\u5fd7\u4e2d\u3002 1 2 3 4 5 2019-03-21 14:56:21,313 stack_trace.py: exception occurred Traceback (most recent call last): File \"C:\\Users\\Jano\\Documents\\pyprogs\\pylog\\stack_trace.py\", line 11, in <module> print(vals[4]) IndexError: list index out of range \u5806\u6808\u8ddf\u8e2a\u5305\u542b\u5728\u65e5\u5fd7\u4e2d\u3002 Python \u65e5\u5fd7 getLogger \u00b6 getLogger() \u8fd4\u56de\u5177\u6709\u6307\u5b9a\u540d\u79f0\u7684\u8bb0\u5f55\u5668\u3002 \u5982\u679c\u672a\u6307\u5b9a\u540d\u79f0\uff0c\u5219\u8fd4\u56de\u6839\u8bb0\u5f55\u5668\u3002 \u5728 __name__ \u4e2d\u653e\u7f6e\u6a21\u5757\u540d\u79f0\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u505a\u6cd5\u3002 \u4f7f\u7528\u7ed9\u5b9a\u540d\u79f0\u5bf9\u8be5\u51fd\u6570\u7684\u6240\u6709\u8c03\u7528\u5747\u8fd4\u56de\u76f8\u540c\u7684\u8bb0\u5f55\u5668\u5b9e\u4f8b\u3002 \u8fd9\u610f\u5473\u7740\u8bb0\u5f55\u5668\u5b9e\u4f8b\u6c38\u8fdc\u4e0d\u9700\u8981\u5728\u5e94\u7528\u7684\u4e0d\u540c\u90e8\u5206\u4e4b\u95f4\u4f20\u9012\u3002 get_logger.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #!/usr/bin/env python import logging import sys main = logging.getLogger('main') main.setLevel(logging.DEBUG) handler = logging.FileHandler('my.log') format = logging.Formatter('%(asctime)s %(name)s %(levelname)s: %(message)s') handler.setFormatter(format) main.addHandler(handler) main.info('info message') main.critical('critical message') main.debug('debug message') main.warning('warning message') main.error('error message') \u8be5\u793a\u4f8b\u4f7f\u7528 getLogger() \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8bb0\u5f55\u5668\u3002 \u5b83\u6709\u4e00\u4e2a\u6587\u4ef6\u5904\u7406\u7a0b\u5e8f\u548c\u4e00\u4e2a\u683c\u5f0f\u5316\u7a0b\u5e8f\u3002 1 2 main = logging.getLogger('main') main.setLevel(logging.DEBUG) \u521b\u5efa\u4e86\u4e00\u4e2a\u540d\u4e3a main \u7684\u8bb0\u5f55\u5668\uff1b \u6211\u4eec\u5c06\u65e5\u5fd7\u7ea7\u522b\u8bbe\u7f6e\u4e3a DEBUG \u3002 1 handler = logging.FileHandler('my.log') \u521b\u5efa\u4e00\u4e2a\u6587\u4ef6\u5904\u7406\u7a0b\u5e8f\u3002 \u6d88\u606f\u5c06\u88ab\u5199\u5165 my.log \u6587\u4ef6\u3002 1 2 3 format = logging.Formatter('%(asctime)s %(name)s %(levelname)s: %(message)s') handler.setFormatter(format) \u683c\u5f0f\u5316\u7a0b\u5e8f\u5df2\u521b\u5efa\u3002 \u5b83\u5305\u62ec\u65f6\u95f4\uff0c\u8bb0\u5f55\u5668\u540d\u79f0\uff0c\u8bb0\u5f55\u7ea7\u522b\u4ee5\u53ca\u8981\u8bb0\u5f55\u7684\u6d88\u606f\u3002 \u683c\u5f0f\u5316\u7a0b\u5e8f\u901a\u8fc7 setFormatter() \u8bbe\u7f6e\u4e3a\u5904\u7406\u7a0b\u5e8f\u3002 1 main.addHandler(handler) \u8be5\u5904\u7406\u7a0b\u5e8f\u5c06\u901a\u8fc7 addHandler() \u6dfb\u52a0\u5230\u8bb0\u5f55\u5668\u3002 1 2 3 4 5 6 $ cat my.log 2019-03-21 14:15:45,439 main INFO: info message 2019-03-21 14:15:45,439 main CRITICAL: critical message 2019-03-21 14:15:45,439 main DEBUG: debug message 2019-03-21 14:15:45,439 main WARNING: warning message 2019-03-21 14:15:45,439 main ERROR: error message \u8fd9\u4e9b\u662f\u4e66\u9762\u7684\u65e5\u5fd7\u6d88\u606f\u3002 Python \u65e5\u5fd7 YAML \u914d\u7f6e \u00b6 \u65e5\u5fd7\u8be6\u7ec6\u4fe1\u606f\u53ef\u4ee5\u5728 YAML \u914d\u7f6e\u6587\u4ef6\u4e2d\u5b9a\u4e49\u3002 YAML \u662f\u4e00\u79cd\u4eba\u7c7b\u53ef\u8bfb\u7684\u6570\u636e\u5e8f\u5217\u5316\u8bed\u8a00\u3002 \u5b83\u901a\u5e38\u7528\u4e8e\u914d\u7f6e\u6587\u4ef6\u3002 1 $ pip install pyyaml \u6211\u4eec\u9700\u8981\u5b89\u88c5 pyyaml \u6a21\u5757\u3002 config.yaml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 version: 1 formatters: simple: format: \"%(asctime)s %(name)s: %(message)s\" extended: format: \"%(asctime)s %(name)s %(levelname)s: %(message)s\" handlers: console: class: logging.StreamHandler level: INFO formatter: simple file_handler: class: logging.FileHandler level: INFO filename: test.log formatter: extended propagate: false loggers: dev: handlers: [console, file_handler] test: handlers: [file_handler] root: handlers: [file_handler] \u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u5404\u79cd\u683c\u5f0f\u5316\u7a0b\u5e8f\uff0c\u5904\u7406\u7a0b\u5e8f\u548c\u8bb0\u5f55\u5668\u3002 propagate \u9009\u9879\u53ef\u9632\u6b62\u5c06\u65e5\u5fd7\u6d88\u606f\u4f20\u64ad\u5230\u7236\u7ea7\u8bb0\u5f55\u5668\u3002 \u5c31\u6211\u4eec\u800c\u8a00\uff0c\u662f\u6839\u8bb0\u5f55\u5668\u3002 \u5426\u5219\uff0c\u6d88\u606f\u5c06\u88ab\u590d\u5236\u3002 log_yaml.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env python import logging import logging.config import yaml with open('config.yaml', 'r') as f: log_cfg = yaml.safe_load(f.read()) logging.config.dictConfig(log_cfg) logger = logging.getLogger('dev') logger.setLevel(logging.INFO) logger.info('This is an info message') logger.error('This is an error message') \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6\u5e76\u4f7f\u7528 dev \u8bb0\u5f55\u5668\u3002 1 2 3 $ log_yaml.py 2019-03-28 11:36:54,854 dev: This is an info message 2019-03-28 11:36:54,855 dev: This is an error message \u5f53\u6211\u4eec\u8fd0\u884c\u7a0b\u5e8f\u65f6\uff0c\u63a7\u5236\u53f0\u4e0a\u6709\u4e24\u6761\u6d88\u606f\u3002 \u63a7\u5236\u53f0\u5904\u7406\u7a0b\u5e8f\u4f7f\u7528\u5e26\u6709\u8f83\u5c11\u4fe1\u606f\u7684\u7b80\u5355\u683c\u5f0f\u5316\u7a0b\u5e8f\u3002 1 2 3 ... 2019-03-28 11:36:54,854 dev INFO: This is an info message 2019-03-28 11:36:54,855 dev ERROR: This is an error message test.log \u6587\u4ef6\u4e2d\u6709\u65e5\u5fd7\u6d88\u606f\uff0c\u5b83\u4eec\u7531\u6269\u5c55\u7684\u683c\u5f0f\u5316\u7a0b\u5e8f\u63d0\u4f9b\uff0c\u5177\u6709\u66f4\u591a\u4fe1\u606f\u3002","title":"Python \u65e5\u5fd7\u6559\u7a0b"},{"location":"pages/python/pytutorial/python-logging/#Python-\u65e5\u5fd7\u6559\u7a0b","text":"Python \u65e5\u5fd7\u6559\u7a0b \u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528\u65e5\u5fd7\u6a21\u5757\u5728 Python \u4e2d\u8fdb\u884c\u65e5\u5fd7\u3002","title":"Python \u65e5\u5fd7\u6559\u7a0b"},{"location":"pages/python/pytutorial/python-logging/#\u65e5\u5fd7","text":"\u65e5\u5fd7\u662f\u5c06\u4fe1\u606f\u5199\u5165\u65e5\u5fd7\u6587\u4ef6\u7684\u8fc7\u7a0b\uff0c\u65e5\u5fd7\u6587\u4ef6\u5305\u542b\u6709\u5173\u5728\u64cd\u4f5c\u7cfb\u7edf\uff0c\u8f6f\u4ef6\u6216\u901a\u4fe1\u4e2d\u53d1\u751f\u7684\u5404\u79cd\u4e8b\u4ef6\u7684\u4fe1\u606f\u3002","title":"\u65e5\u5fd7"},{"location":"pages/python/pytutorial/python-logging/#\u8bb0\u5f55\u76ee\u7684","text":"\u5b8c\u6210\u8bb0\u5f55\u662f\u51fa\u4e8e\u4ee5\u4e0b\u76ee\u7684\uff1a \u4fe1\u606f\u6536\u96c6 \u6545\u969c\u6392\u9664 \u4ea7\u751f\u7edf\u8ba1\u6570\u636e \u7a3d\u6838 \u5256\u6790 \u8bb0\u5f55\u4e0d\u4ec5\u9650\u4e8e\u8bc6\u522b\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u7684\u9519\u8bef\u3002 \u5b83\u8fd8\u53ef\u7528\u4e8e\u68c0\u6d4b\u5b89\u5168\u4e8b\u4ef6\uff0c\u76d1\u89c6\u7b56\u7565\u8fdd\u89c4\uff0c\u5728\u51fa\u73b0\u95ee\u9898\u65f6\u63d0\u4f9b\u4fe1\u606f\uff0c\u67e5\u627e\u5e94\u7528\u74f6\u9888\u6216\u751f\u6210\u4f7f\u7528\u60c5\u51b5\u6570\u636e\u3002","title":"\u8bb0\u5f55\u76ee\u7684"},{"location":"pages/python/pytutorial/python-logging/#\u8981\u8bb0\u5f55\u54ea\u4e9b\u4e8b\u4ef6","text":"\u5e94\u8bb0\u5f55\u7684\u4e8b\u4ef6\u5305\u62ec\u8f93\u5165\u9a8c\u8bc1\u5931\u8d25\uff0c\u8eab\u4efd\u9a8c\u8bc1\u548c\u6388\u6743\u5931\u8d25\uff0c\u5e94\u7528\u9519\u8bef\uff0c\u914d\u7f6e\u66f4\u6539\u4ee5\u53ca\u5e94\u7528\u542f\u52a8\u548c\u5173\u95ed\u3002","title":"\u8981\u8bb0\u5f55\u54ea\u4e9b\u4e8b\u4ef6"},{"location":"pages/python/pytutorial/python-logging/#\u54ea\u4e9b\u4e8b\u4ef6\u4e0d\u8bb0\u5f55","text":"\u4e0d\u5e94\u8bb0\u5f55\u7684\u4e8b\u4ef6\u5305\u62ec\u5e94\u7528\u6e90\u4ee3\u7801\uff0c\u4f1a\u8bdd\u6807\u8bc6\u503c\uff0c\u8bbf\u95ee\u4ee4\u724c\uff0c\u654f\u611f\u7684\u4e2a\u4eba\u6570\u636e\uff0c\u5bc6\u7801\uff0c\u6570\u636e\u5e93\u8fde\u63a5\u5b57\u7b26\u4e32\uff0c\u52a0\u5bc6\u952e\uff0c\u94f6\u884c\u5e10\u6237\u548c\u6301\u5361\u4eba\u6570\u636e\u3002","title":"\u54ea\u4e9b\u4e8b\u4ef6\u4e0d\u8bb0\u5f55"},{"location":"pages/python/pytutorial/python-logging/#\u8bb0\u5f55\u6700\u4f73\u505a\u6cd5","text":"\u4ee5\u4e0b\u662f\u8fdb\u884c\u65e5\u5fd7\u7684\u4e00\u4e9b\u6700\u4f73\u505a\u6cd5\uff1a \u65e5\u5fd7\u5e94\u8be5\u6709\u610f\u4e49\u3002 \u65e5\u5fd7\u5e94\u5305\u542b\u4e0a\u4e0b\u6587\u3002 \u65e5\u5fd7\u5e94\u5728\u4e0d\u540c\u7ea7\u522b\u8fdb\u884c\u7ed3\u6784\u5316\u548c\u5b8c\u6210\u3002 \u6d4b\u4e95\u5e94\u4fdd\u6301\u5e73\u8861\uff1b \u5b83\u4e0d\u5e94\u5305\u542b\u8fc7\u591a\u6216\u8fc7\u591a\u7684\u4fe1\u606f\u3002 \u8bb0\u5f55\u6d88\u606f\u5e94\u8be5\u662f\u4eba\u7c7b\u53ef\u4ee5\u7406\u89e3\u7684\uff0c\u5e76\u4e14\u53ef\u4ee5\u88ab\u673a\u5668\u89e3\u6790\u3002 \u767b\u5f55\u66f4\u590d\u6742\u7684\u5e94\u7528\u5e94\u5b8c\u6210\u51e0\u4e2a\u65e5\u5fd7\u6587\u4ef6\u3002 \u6d4b\u4e95\u5e94\u9002\u5e94\u5f00\u53d1\u548c\u751f\u4ea7\u3002","title":"\u8bb0\u5f55\u6700\u4f73\u505a\u6cd5"},{"location":"pages/python/pytutorial/python-logging/#\u65e5\u5fd7\u6a21\u5757","text":"Python \u65e5\u5fd7\u6a21\u5757\u5b9a\u4e49\u4e86\u5b9e\u73b0\u7528\u4e8e\u5e94\u7528\u548c\u5e93\u7684\u7075\u6d3b\u4e8b\u4ef6\u65e5\u5fd7\u7cfb\u7edf\u7684\u51fd\u6570\u548c\u7c7b\u3002","title":"\u65e5\u5fd7\u6a21\u5757"},{"location":"pages/python/pytutorial/python-logging/#\u65e5\u5fd7\u6a21\u5757\u7ec4\u4ef6","text":"\u65e5\u5fd7\u6a21\u5757\u5177\u6709\u56db\u4e2a\u4e3b\u8981\u7ec4\u4ef6\uff1a\u8bb0\u5f55\u5668\uff0c\u5904\u7406\u7a0b\u5e8f\uff0c\u8fc7\u6ee4\u5668\u548c\u683c\u5f0f\u5316\u7a0b\u5e8f\u3002 \u8bb0\u5f55\u5668\u516c\u5f00\u4e86\u5e94\u7528\u4ee3\u7801\u76f4\u63a5\u4f7f\u7528\u7684\u63a5\u53e3\u3002 \u5904\u7406\u7a0b\u5e8f\u5c06\u65e5\u5fd7\uff08\u7531\u8bb0\u5f55\u5668\u521b\u5efa\uff09\u53d1\u9001\u5230\u9002\u5f53\u7684\u76ee\u7684\u5730\u3002 \u7b5b\u9009\u5668\u63d0\u4f9b\u4e86\u66f4\u7ec6\u7c92\u5ea6\u7684\u529f\u80fd\uff0c\u7528\u4e8e\u786e\u5b9a\u8981\u8f93\u51fa\u7684\u65e5\u5fd7\u3002 \u683c\u5f0f\u5316\u7a0b\u5e8f\u5728\u6700\u7ec8\u8f93\u51fa\u4e2d\u6307\u5b9a\u65e5\u5fd7\u7684\u5e03\u5c40\u3002","title":"\u65e5\u5fd7\u6a21\u5757\u7ec4\u4ef6"},{"location":"pages/python/pytutorial/python-logging/#Python-\u65e5\u5fd7\u5c42\u6b21\u7ed3\u6784","text":"Python \u8bb0\u5f55\u5668\u5f62\u6210\u4e00\u4e2a\u5c42\u6b21\u7ed3\u6784\u3002 \u540d\u4e3a main \u7684\u8bb0\u5f55\u5668\u662f main.new \u7684\u7236\u7ea7\u3002 \u5b50\u8bb0\u5f55\u5668\u5c06\u6d88\u606f\u4f20\u64ad\u5230\u4e0e\u5176\u7956\u5148\u8bb0\u5f55\u5668\u5173\u8054\u7684\u5904\u7406\u7a0b\u5e8f\u3002 \u56e0\u6b64\uff0c\u4e0d\u5fc5\u4e3a\u5e94\u7528\u4e2d\u7684\u6240\u6709\u8bb0\u5f55\u5668\u5b9a\u4e49\u548c\u914d\u7f6e\u5904\u7406\u7a0b\u5e8f\u3002 \u4e3a\u9876\u7ea7\u8bb0\u5f55\u5668\u914d\u7f6e\u5904\u7406\u7a0b\u5e8f\u5e76\u6839\u636e\u9700\u8981\u521b\u5efa\u5b50\u8bb0\u5f55\u5668\u5c31\u8db3\u591f\u4e86\u3002","title":"Python \u65e5\u5fd7\u5c42\u6b21\u7ed3\u6784"},{"location":"pages/python/pytutorial/python-logging/#Python-\u65e5\u5fd7\u7ea7\u522b","text":"\u7ea7\u522b\u7528\u4e8e\u6807\u8bc6\u4e8b\u4ef6\u7684\u4e25\u91cd\u6027\u3002 \u6709\u516d\u4e2a\u65e5\u5fd7\u7ea7\u522b\uff1a \u5371\u6025 \u9519\u8bef \u8b66\u544a \u4fe1\u606f \u8c03\u8bd5 \u6ca1\u6709\u8bbe\u7f6e \u5982\u679c\u65e5\u5fd7\u7ea7\u522b\u8bbe\u7f6e\u4e3a WARNING \uff0c\u5219\u6240\u6709 WARNING \uff0c ERROR \u548c CRITICAL \u6d88\u606f\u90fd\u5c06\u5199\u5165\u65e5\u5fd7\u6587\u4ef6\u6216\u63a7\u5236\u53f0\u3002 \u5982\u679c\u5c06\u5176\u8bbe\u7f6e\u4e3a ERROR \uff0c\u5219\u4ec5\u8bb0\u5f55 ERROR \u548c CRITICAL \u6d88\u606f\u3002 \u8bb0\u5f55\u5668\u7684\u6982\u5ff5\u662f\u6709\u6548\u7ea7\u522b\u3002 \u5982\u679c\u672a\u5728\u8bb0\u5f55\u5668\u4e0a\u663e\u5f0f\u8bbe\u7f6e\u7ea7\u522b\uff0c\u5219\u5c06\u5176\u7236\u7ea7\u522b\u7528\u4f5c\u5176\u6709\u6548\u7ea7\u522b\u3002 \u5982\u679c\u7236\u7ea7\u6ca1\u6709\u663e\u5f0f\u8bbe\u7f6e\u7684\u7ea7\u522b\uff0c\u5219\u68c0\u67e5\u5176\u7236\u7ea7\uff0c\u4f9d\u6b64\u7c7b\u63a8-\u641c\u7d22\u6240\u6709\u7956\u5148\uff0c\u76f4\u5230\u627e\u5230\u663e\u5f0f\u8bbe\u7f6e\u7684\u7ea7\u522b\u3002 \u4f7f\u7528 getLogger() \u521b\u5efa\u8bb0\u5f55\u5668\u65f6\uff0c\u7ea7\u522b\u8bbe\u7f6e\u4e3a NOTSET \u3002 \u5982\u679c\u672a\u4f7f\u7528 setLevel() \u663e\u5f0f\u8bbe\u7f6e\u65e5\u5fd7\u7ea7\u522b\uff0c\u5219\u6d88\u606f\u5c06\u4f20\u64ad\u5230\u8bb0\u5f55\u5668\u7236\u7ea7\u3002 \u904d\u5386\u8bb0\u5f55\u5668\u7684\u7956\u5148\u8bb0\u5f55\u5668\u94fe\uff0c\u76f4\u5230\u627e\u5230\u5177\u6709 NOTSET \u4ee5\u5916\u7ea7\u522b\u7684\u7956\u5148\u6216\u5230\u8fbe\u6839\u3002 \u6839\u8bb0\u5f55\u5668\u5177\u6709\u9ed8\u8ba4\u7684 WARNING \u7ea7\u522b\u8bbe\u7f6e\u3002","title":"Python \u65e5\u5fd7\u7ea7\u522b"},{"location":"pages/python/pytutorial/python-logging/#\u6839\u8bb0\u5f55\u5668","text":"\u6240\u6709\u8bb0\u5f55\u5668\u90fd\u662f\u6839\u8bb0\u5f55\u5668\u7684\u540e\u4ee3\u3002 \u6bcf\u4e2a\u8bb0\u5f55\u5668\u5c06\u65e5\u5fd7\u6d88\u606f\u4f20\u9012\u5230\u5176\u7236\u7ea7\u3002 \u4f7f\u7528 getLogger(name) \u65b9\u6cd5\u521b\u5efa\u65b0\u7684\u8bb0\u5f55\u5668\u3002 \u8c03\u7528\u4e0d\u5e26\u540d\u79f0\u7684\u51fd\u6570\uff08 getLogger() \uff09\u5c06\u8fd4\u56de root \u8bb0\u5f55\u5668\u3002 \u6839\u8bb0\u5f55\u5668\u59cb\u7ec8\u5177\u6709\u663e\u5f0f\u7ea7\u522b\u96c6\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e3a WARNING \u3002 \u6839\u53d1\u4fe1\u4eba\u4f4d\u4e8e\u5c42\u6b21\u7ed3\u6784\u7684\u9876\u90e8\uff0c\u5373\u4f7f\u672a\u914d\u7f6e\uff0c\u4e5f\u59cb\u7ec8\u5b58\u5728\u3002 \u901a\u5e38\uff0c\u7a0b\u5e8f\u6216\u5e93\u4e0d\u5e94\u76f4\u63a5\u767b\u5f55\u5230\u6839\u8bb0\u5f55\u5668\u3002 \u800c\u662f\u5e94\u914d\u7f6e\u8be5\u7a0b\u5e8f\u7684\u7279\u5b9a\u8bb0\u5f55\u5668\u3002 \u6839\u8bb0\u5f55\u5668\u53ef\u7528\u4e8e\u8f7b\u677e\u6253\u5f00\u548c\u5173\u95ed\u6240\u6709\u5e93\u4e2d\u7684\u6240\u6709\u8bb0\u5f55\u5668\u3002","title":"\u6839\u8bb0\u5f55\u5668"},{"location":"pages/python/pytutorial/python-logging/#Python-\u65e5\u5fd7\u7b80\u5355\u793a\u4f8b","text":"logging \u6a21\u5757\u5177\u6709\u7b80\u5355\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u7acb\u5373\u4f7f\u7528\u800c\u65e0\u9700\u4efb\u4f55\u914d\u7f6e\u3002 \u8fd9\u53ef\u4ee5\u7528\u4e8e\u7b80\u5355\u7684\u65e5\u5fd7\u3002 simple.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python import logging logging.debug('This is a debug message') logging.info('This is an info message') logging.warning('This is a warning message') logging.error('This is an error message') logging.critical('This is a critical message') \u8be5\u793a\u4f8b\u8c03\u7528 logging \u6a21\u5757\u7684\u4e94\u4e2a\u65b9\u6cd5\u3002 \u6d88\u606f\u5c06\u5199\u5165\u63a7\u5236\u53f0\u3002 1 2 3 4 $ simple.py WARNING:root:This is a warning message ERROR:root:This is an error message CRITICAL:root:This is a critical message \u8bf7\u6ce8\u610f\uff0c\u4f7f\u7528\u4e86\u6839\u8bb0\u5f55\u5668\uff0c\u5e76\u4e14\u53ea\u5199\u5165\u4e86\u4e09\u5219\u6d88\u606f\u3002 \u8fd9\u662f\u56e0\u4e3a\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4ec5\u5199\u5165\u5177\u6709\u7ea7\u522b\u8b66\u544a\u548c\u66f4\u9ad8\u7ea7\u522b\u7684\u6d88\u606f\u3002","title":"Python \u65e5\u5fd7\u7b80\u5355\u793a\u4f8b"},{"location":"pages/python/pytutorial/python-logging/#Python-\u8bbe\u7f6e\u65e5\u5fd7\u7ea7\u522b","text":"\u8bb0\u5f55\u7ea7\u522b\u7531 setLevel() \u8bbe\u7f6e\u3002 \u5b83\u5c06\u6b64\u8bb0\u5f55\u5668\u7684\u9608\u503c\u8bbe\u7f6e\u4e3a lvl \u3002 \u4e25\u91cd\u6027\u4e0d\u53ca lvl \u7684\u65e5\u5fd7\u6d88\u606f\u5c06\u88ab\u5ffd\u7565\u3002 set_level.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python import logging logger = logging.getLogger('dev') logger.setLevel(logging.DEBUG) logger.debug('This is a debug message') logger.info('This is an info message') logger.warning('This is a warning message') logger.error('This is an error message') logger.critical('This is a critical message') \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u65e5\u5fd7\u7ea7\u522b\u66f4\u6539\u4e3a DEBUG \u3002 1 logger = logging.getLogger('dev') getLogger() \u8fd4\u56de\u5177\u6709\u6307\u5b9a\u540d\u79f0\u7684\u8bb0\u5f55\u5668\u3002 \u5982\u679c\u540d\u79f0\u4e3a None \uff0c\u5219\u8fd4\u56de\u6839\u8bb0\u5f55\u5668\u3002 \u540d\u79f0\u53ef\u4ee5\u662f\u70b9\u5206\u9694\u7684\u5b57\u7b26\u4e32\uff0c\u7528\u4e8e\u5b9a\u4e49\u65e5\u5fd7\u5c42\u6b21\u7ed3\u6784\u3002 \u4f8b\u5982\u201c a\u201d\uff0c\u201c a.b\u201d\u6216\u201c a.b.c\u201d\u3002 \u8bf7\u6ce8\u610f\uff0c\u6709\u4e00\u4e2a\u9690\u5f0f\u6839\u540d\uff0c\u672a\u663e\u793a\u3002 1 2 3 4 $ set_level.py This is a warning message This is an error message This is a critical message \u73b0\u5728\uff0c\u6240\u6709\u6d88\u606f\u5747\u5df2\u5199\u5165\u3002","title":"Python \u8bbe\u7f6e\u65e5\u5fd7\u7ea7\u522b"},{"location":"pages/python/pytutorial/python-logging/#Python-\u6709\u6548\u65e5\u5fd7\u7ea7\u522b","text":"\u6709\u6548\u65e5\u5fd7\u7ea7\u522b\u662f\u663e\u5f0f\u8bbe\u7f6e\u7684\u7ea7\u522b\u6216\u7531\u8bb0\u5f55\u5668\u7236\u7ea7\u786e\u5b9a\u7684\u7ea7\u522b\u3002 effective_level.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python import logging main_logger = logging.getLogger('main') main_logger.setLevel(5) dev_logger = logging.getLogger('main.dev') print(main_logger.getEffectiveLevel()) print(dev_logger.getEffectiveLevel()) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u68c0\u67e5\u4e86\u4e24\u4e2a\u8bb0\u5f55\u5668\u7684\u6709\u6548\u8bb0\u5f55\u7ea7\u522b\u3002 1 dev_logger = logging.getLogger('main.dev') \u672a\u8bbe\u7f6e dev_logger \u7684\u7535\u5e73\uff1b \u7136\u540e\u4f7f\u7528\u5176\u7236\u7ea7\u3002 1 2 3 $ effective_level.py 5 5","title":"Python \u6709\u6548\u65e5\u5fd7\u7ea7\u522b"},{"location":"pages/python/pytutorial/python-logging/#Python-\u65e5\u5fd7\u5904\u7406\u7a0b\u5e8f","text":"\u5904\u7406\u7a0b\u5e8f\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u8d1f\u8d23\u5c06\u9002\u5f53\u7684\u65e5\u5fd7\u6d88\u606f\uff08\u57fa\u4e8e\u65e5\u5fd7\u6d88\u606f\u7684\u4e25\u91cd\u6027\uff09\u8c03\u5ea6\u5230\u5904\u7406\u7a0b\u5e8f\u7684\u6307\u5b9a\u76ee\u6807\u3002 \u5904\u7406\u7a0b\u5e8f\u50cf\u7ea7\u522b\u4e00\u6837\u4f20\u64ad\u3002 \u5982\u679c\u8bb0\u5f55\u5668\u672a\u8bbe\u7f6e\u5904\u7406\u7a0b\u5e8f\uff0c\u5219\u5176\u7956\u5148\u94fe\u5c06\u641c\u7d22\u5904\u7406\u7a0b\u5e8f\u3002 handlers.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env python import logging logger = logging.getLogger('dev') logger.setLevel(logging.INFO) fileHandler = logging.FileHandler('test.log') fileHandler.setLevel(logging.INFO) consoleHandler = logging.StreamHandler() consoleHandler.setLevel(logging.INFO) logger.addHandler(fileHandler) logger.addHandler(consoleHandler) logger.info('information message') \u8be5\u793a\u4f8b\u4e3a\u8bb0\u5f55\u5668\u521b\u5efa\u4e24\u4e2a\u5904\u7406\u7a0b\u5e8f\uff1a\u6587\u4ef6\u5904\u7406\u7a0b\u5e8f\u548c\u63a7\u5236\u53f0\u5904\u7406\u7a0b\u5e8f\u3002 1 fileHandler = logging.FileHandler('test.log') FileHandler \u5c06\u65e5\u5fd7\u53d1\u9001\u5230 test.log \u6587\u4ef6\u3002 1 consoleHandler = logging.StreamHandler() StreamHandler \u5c06\u65e5\u5fd7\u53d1\u9001\u5230\u6d41\u3002 \u5982\u679c\u672a\u6307\u5b9a\u6d41\uff0c\u5219\u4f7f\u7528 sys.stderr \u3002 1 logger.addHandler(fileHandler) \u8be5\u5904\u7406\u7a0b\u5e8f\u5c06\u901a\u8fc7 addHandler() \u6dfb\u52a0\u5230\u8bb0\u5f55\u5668\u3002","title":"Python \u65e5\u5fd7\u5904\u7406\u7a0b\u5e8f"},{"location":"pages/python/pytutorial/python-logging/#Python-\u65e5\u5fd7\u683c\u5f0f\u5316\u7a0b\u5e8f","text":"\u683c\u5f0f\u5316\u7a0b\u5e8f\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u7528\u4e8e\u914d\u7f6e\u65e5\u5fd7\u7684\u6700\u7ec8\u987a\u5e8f\uff0c\u7ed3\u6784\u548c\u5185\u5bb9\u3002 \u9664\u6d88\u606f\u5b57\u7b26\u4e32\u5916\uff0c\u65e5\u5fd7\u8fd8\u5305\u62ec\u65e5\u671f\u548c\u65f6\u95f4\uff0c\u65e5\u5fd7\u540d\u79f0\u548c\u65e5\u5fd7\u7ea7\u522b\u4e25\u91cd\u6027\u3002 formatter.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/env python import logging logger = logging.getLogger('dev') logger.setLevel(logging.INFO) consoleHandler = logging.StreamHandler() consoleHandler.setLevel(logging.INFO) logger.addHandler(consoleHandler) formatter = logging.Formatter('%(asctime)s %(name)s %(levelname)s: %(message)s') consoleHandler.setFormatter(formatter) logger.info('information message') \u8be5\u793a\u4f8b\u521b\u5efa\u4e00\u4e2a\u63a7\u5236\u53f0\u8bb0\u5f55\u5668\uff0c\u5e76\u5c06\u683c\u5f0f\u5316\u7a0b\u5e8f\u6dfb\u52a0\u5230\u5176\u5904\u7406\u7a0b\u5e8f\u3002 1 formatter = logging.Formatter('%(asctime)s %(name)s %(levelname)s: %(message)s') \u683c\u5f0f\u5316\u7a0b\u5e8f\u5df2\u521b\u5efa\u3002 \u5b83\u5305\u62ec\u65e5\u671f\u65f6\u95f4\uff0c\u8bb0\u5f55\u5668\u540d\u79f0\uff0c\u8bb0\u5f55\u7ea7\u522b\u540d\u79f0\u548c\u8bb0\u5f55\u6d88\u606f\u3002 1 consoleHandler.setFormatter(formatter) \u683c\u5f0f\u5316\u7a0b\u5e8f\u901a\u8fc7 setFormatter() \u8bbe\u7f6e\u4e3a\u5904\u7406\u7a0b\u5e8f\u3002 1 2 $ formatter.py 2019-03-28 14:53:27,446 dev INFO: information message \u5177\u6709\u5b9a\u4e49\u683c\u5f0f\u7684\u6d88\u606f\u663e\u793a\u5728\u63a7\u5236\u53f0\u4e2d\u3002","title":"Python \u65e5\u5fd7\u683c\u5f0f\u5316\u7a0b\u5e8f"},{"location":"pages/python/pytutorial/python-logging/#Python-\u65e5\u5fd7-basicConfig","text":"basicConfig() \u914d\u7f6e\u6839\u8bb0\u5f55\u5668\u3002 \u5b83\u901a\u8fc7\u4f7f\u7528\u9ed8\u8ba4\u683c\u5f0f\u5316\u7a0b\u5e8f\u521b\u5efa\u6d41\u5904\u7406\u7a0b\u5e8f\u6765\u4e3a\u65e5\u5fd7\u7cfb\u7edf\u8fdb\u884c\u57fa\u672c\u914d\u7f6e\u3002 \u5982\u679c\u6ca1\u6709\u4e3a\u6839\u8bb0\u5f55\u5668\u5b9a\u4e49\u5904\u7406\u7a0b\u5e8f\uff0c\u5219 debug() \uff0c info() \uff0c warning() \uff0c error() \u548c critical() \u81ea\u52a8\u8c03\u7528 basicConfig() \u3002 basic_config.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python import logging logging.basicConfig(filename='test.log', format='%(filename)s: %(message)s', level=logging.DEBUG) logging.debug('This is a debug message') logging.info('This is an info message') logging.warning('This is a warning message') logging.error('This is an error message') logging.critical('This is a critical message') \u8be5\u793a\u4f8b\u4f7f\u7528 basicConfig \u914d\u7f6e\u6839\u8bb0\u5f55\u5668\u3002 1 2 logging.basicConfig(filename='test.log', format='%(filename)s: %(message)s', level=logging.DEBUG) \u4f7f\u7528 filename \uff0c\u6211\u4eec\u8bbe\u7f6e\u8981\u5199\u5165\u65e5\u5fd7\u6d88\u606f\u7684\u6587\u4ef6\u3002 format \u786e\u5b9a\u5c06\u4ec0\u4e48\u5185\u5bb9\u8bb0\u5f55\u5230\u6587\u4ef6\u4e2d\uff1b \u6211\u4eec\u6709\u6587\u4ef6\u540d\u548c\u6d88\u606f\u3002 \u4f7f\u7528 level \uff0c\u8bbe\u7f6e\u8bb0\u5f55\u9608\u503c\u3002 1 2 3 4 5 6 7 $ basic_config.py $ cat test.log basic_config.py: This is a debug message basic_config.py: This is an info message basic_config.py: This is a warning message basic_config.py: This is an error message basic_config.py: This is a critical message \u8fd0\u884c\u8be5\u7a0b\u5e8f\u540e\uff0c\u6211\u4eec\u5c06\u4e94\u6761\u6d88\u606f\u5199\u5165 test.log \u6587\u4ef6\u3002","title":"Python \u65e5\u5fd7 basicConfig"},{"location":"pages/python/pytutorial/python-logging/#Python-\u65e5\u5fd7\u6587\u4ef6\u914d\u7f6e","text":"fileConfig() \u4ece configparser \u683c\u5f0f\u6587\u4ef6\u4e2d\u8bfb\u53d6\u65e5\u5fd7\u914d\u7f6e\u3002 log.conf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 [loggers] keys=root,dev [handlers] keys=consoleHandler [formatters] keys=extend,simple [logger_root] level=INFO handlers=consoleHandler [logger_dev] level=INFO handlers=consoleHandler qualname=dev propagate=0 [handler_consoleHandler] class=StreamHandler level=INFO formatter=extend args=(sys.stdout,) [formatter_extend] format=%(asctime)s - %(name)s - %(levelname)s - %(message)s [formatter_simple] format=%(asctime)s - %(message)s log.conf \u5b9a\u4e49\u4e86\u8bb0\u5f55\u5668\uff0c\u5904\u7406\u7a0b\u5e8f\u548c\u683c\u5f0f\u5316\u7a0b\u5e8f\u3002 file_config.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python import logging import logging.config logging.config.fileConfig(fname='log.conf') logger = logging.getLogger('dev') logger.info('This is an information message') \u8be5\u793a\u4f8b\u4ece log.conf \u8bfb\u53d6\u65e5\u5fd7\u914d\u7f6e\u6587\u4ef6\u3002 1 2 $ file_config.py 2019-03-28 15:26:31,137 - dev - INFO - This is an information message","title":"Python \u65e5\u5fd7\u6587\u4ef6\u914d\u7f6e"},{"location":"pages/python/pytutorial/python-logging/#Python-\u65e5\u5fd7\u53d8\u91cf","text":"\u901a\u8fc7\u4f7f\u7528\u5b57\u7b26\u4e32\u683c\u5f0f\u8bb0\u5f55\u52a8\u6001\u6570\u636e\u3002 log_variable.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python import logging root = logging.getLogger() root.setLevel(logging.INFO) log_format = '%(asctime)s %(filename)s: %(message)s' logging.basicConfig(filename=\"test.log\", format=log_format) # incident happens error_message = 'authentication failed' root.error(f'error: {error_message}') \u8be5\u793a\u4f8b\u5c06\u81ea\u5b9a\u4e49\u6570\u636e\u5199\u5165\u65e5\u5fd7\u6d88\u606f\u3002 1 2019-03-21 14:17:23,196 log_variable.py: error: authentication failed \u8fd9\u662f\u65e5\u5fd7\u6d88\u606f\u3002","title":"Python \u65e5\u5fd7\u53d8\u91cf"},{"location":"pages/python/pytutorial/python-logging/#Python-\u65e5\u5fd7\u683c\u5f0f\u5316\u65e5\u671f\u65f6\u95f4","text":"\u65e5\u671f\u65f6\u95f4\u5305\u542b\u5728 asctime \u65e5\u5fd7\u7684\u65e5\u5fd7\u6d88\u606f\u4e2d\u3002 \u4f7f\u7528 datefmt \u914d\u7f6e\u9009\u9879\uff0c\u6211\u4eec\u53ef\u4ee5\u683c\u5f0f\u5316\u65e5\u671f\u65f6\u95f4\u5b57\u7b26\u4e32\u3002 date_time.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python import logging logger = logging.getLogger() logger.setLevel(logging.DEBUG) log_format = '%(asctime)s %(filename)s: %(message)s' logging.basicConfig(filename=\"test.log\", format=log_format, datefmt='%Y-%m-%d %H:%M:%S') logger.info(\"information message\") \u8be5\u793a\u4f8b\u683c\u5f0f\u5316\u65e5\u5fd7\u6d88\u606f\u7684\u65e5\u671f\u65f6\u95f4\u3002 1 log_format = '%(asctime)s %(filename)s: %(message)s' \u6211\u4eec\u5c06\u65e5\u671f\u65f6\u95f4\u5b57\u7b26\u4e32\u5305\u542b\u5728 asctime \u4e2d\u3002 1 2 logging.basicConfig(filename=\"test.log\", format=log_format, datefmt='%Y-%m-%d %H:%M:%S') datefmt \u9009\u9879\u683c\u5f0f\u5316\u65e5\u671f\u65f6\u95f4\u5b57\u7b26\u4e32\u3002 1 2 2019-03-21 14:17:23,196 log_variable.py: error: authentication failed 2019-03-21 14:23:33 date_time.py: information message \u6ce8\u610f dattime \u5b57\u7b26\u4e32\u683c\u5f0f\u7684\u4e0d\u540c\u3002","title":"Python \u65e5\u5fd7\u683c\u5f0f\u5316\u65e5\u671f\u65f6\u95f4"},{"location":"pages/python/pytutorial/python-logging/#Python-\u65e5\u5fd7\u5806\u6808\u8ddf\u8e2a","text":"\u5806\u6808\u8ddf\u8e2a\u662f\u8c03\u7528\u51fd\u6570\u7684\u5806\u6808\uff0c\u8fd9\u4e9b\u51fd\u6570\u4e00\u76f4\u8fd0\u884c\u5230\u5f15\u53d1\u5f02\u5e38\u65f6\u4e3a\u6b62\u3002 \u5806\u6808\u8ddf\u8e2a\u5305\u542b\u5728 exc_info \u9009\u9879\u4e2d\u3002 stack_trace.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/env python import logging log_format = '%(asctime)s %(filename)s: %(message)s' logging.basicConfig(filename=\"test.log\", format=log_format) vals = [1, 2] try: print(vals[4]) except Exception as e: logging.error(\"exception occurred\", exc_info=True) \u5728\u8be5\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u8bb0\u5f55\u4e86\u5c1d\u8bd5\u8bbf\u95ee\u4e0d\u5b58\u5728\u7684\u5217\u8868\u7d22\u5f15\u65f6\u5f15\u53d1\u7684\u5f02\u5e38\u3002 1 logging.error(\"exception occurred\", exc_info=True) \u901a\u8fc7\u5c06 exc_info \u8bbe\u7f6e\u4e3a True \uff0c\u5806\u6808\u8ddf\u8e2a\u5c06\u5305\u542b\u5728\u65e5\u5fd7\u4e2d\u3002 1 2 3 4 5 2019-03-21 14:56:21,313 stack_trace.py: exception occurred Traceback (most recent call last): File \"C:\\Users\\Jano\\Documents\\pyprogs\\pylog\\stack_trace.py\", line 11, in <module> print(vals[4]) IndexError: list index out of range \u5806\u6808\u8ddf\u8e2a\u5305\u542b\u5728\u65e5\u5fd7\u4e2d\u3002","title":"Python \u65e5\u5fd7\u5806\u6808\u8ddf\u8e2a"},{"location":"pages/python/pytutorial/python-logging/#Python-\u65e5\u5fd7getLogger","text":"getLogger() \u8fd4\u56de\u5177\u6709\u6307\u5b9a\u540d\u79f0\u7684\u8bb0\u5f55\u5668\u3002 \u5982\u679c\u672a\u6307\u5b9a\u540d\u79f0\uff0c\u5219\u8fd4\u56de\u6839\u8bb0\u5f55\u5668\u3002 \u5728 __name__ \u4e2d\u653e\u7f6e\u6a21\u5757\u540d\u79f0\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u505a\u6cd5\u3002 \u4f7f\u7528\u7ed9\u5b9a\u540d\u79f0\u5bf9\u8be5\u51fd\u6570\u7684\u6240\u6709\u8c03\u7528\u5747\u8fd4\u56de\u76f8\u540c\u7684\u8bb0\u5f55\u5668\u5b9e\u4f8b\u3002 \u8fd9\u610f\u5473\u7740\u8bb0\u5f55\u5668\u5b9e\u4f8b\u6c38\u8fdc\u4e0d\u9700\u8981\u5728\u5e94\u7528\u7684\u4e0d\u540c\u90e8\u5206\u4e4b\u95f4\u4f20\u9012\u3002 get_logger.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #!/usr/bin/env python import logging import sys main = logging.getLogger('main') main.setLevel(logging.DEBUG) handler = logging.FileHandler('my.log') format = logging.Formatter('%(asctime)s %(name)s %(levelname)s: %(message)s') handler.setFormatter(format) main.addHandler(handler) main.info('info message') main.critical('critical message') main.debug('debug message') main.warning('warning message') main.error('error message') \u8be5\u793a\u4f8b\u4f7f\u7528 getLogger() \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8bb0\u5f55\u5668\u3002 \u5b83\u6709\u4e00\u4e2a\u6587\u4ef6\u5904\u7406\u7a0b\u5e8f\u548c\u4e00\u4e2a\u683c\u5f0f\u5316\u7a0b\u5e8f\u3002 1 2 main = logging.getLogger('main') main.setLevel(logging.DEBUG) \u521b\u5efa\u4e86\u4e00\u4e2a\u540d\u4e3a main \u7684\u8bb0\u5f55\u5668\uff1b \u6211\u4eec\u5c06\u65e5\u5fd7\u7ea7\u522b\u8bbe\u7f6e\u4e3a DEBUG \u3002 1 handler = logging.FileHandler('my.log') \u521b\u5efa\u4e00\u4e2a\u6587\u4ef6\u5904\u7406\u7a0b\u5e8f\u3002 \u6d88\u606f\u5c06\u88ab\u5199\u5165 my.log \u6587\u4ef6\u3002 1 2 3 format = logging.Formatter('%(asctime)s %(name)s %(levelname)s: %(message)s') handler.setFormatter(format) \u683c\u5f0f\u5316\u7a0b\u5e8f\u5df2\u521b\u5efa\u3002 \u5b83\u5305\u62ec\u65f6\u95f4\uff0c\u8bb0\u5f55\u5668\u540d\u79f0\uff0c\u8bb0\u5f55\u7ea7\u522b\u4ee5\u53ca\u8981\u8bb0\u5f55\u7684\u6d88\u606f\u3002 \u683c\u5f0f\u5316\u7a0b\u5e8f\u901a\u8fc7 setFormatter() \u8bbe\u7f6e\u4e3a\u5904\u7406\u7a0b\u5e8f\u3002 1 main.addHandler(handler) \u8be5\u5904\u7406\u7a0b\u5e8f\u5c06\u901a\u8fc7 addHandler() \u6dfb\u52a0\u5230\u8bb0\u5f55\u5668\u3002 1 2 3 4 5 6 $ cat my.log 2019-03-21 14:15:45,439 main INFO: info message 2019-03-21 14:15:45,439 main CRITICAL: critical message 2019-03-21 14:15:45,439 main DEBUG: debug message 2019-03-21 14:15:45,439 main WARNING: warning message 2019-03-21 14:15:45,439 main ERROR: error message \u8fd9\u4e9b\u662f\u4e66\u9762\u7684\u65e5\u5fd7\u6d88\u606f\u3002","title":"Python \u65e5\u5fd7getLogger"},{"location":"pages/python/pytutorial/python-logging/#Python-\u65e5\u5fd7-YAML-\u914d\u7f6e","text":"\u65e5\u5fd7\u8be6\u7ec6\u4fe1\u606f\u53ef\u4ee5\u5728 YAML \u914d\u7f6e\u6587\u4ef6\u4e2d\u5b9a\u4e49\u3002 YAML \u662f\u4e00\u79cd\u4eba\u7c7b\u53ef\u8bfb\u7684\u6570\u636e\u5e8f\u5217\u5316\u8bed\u8a00\u3002 \u5b83\u901a\u5e38\u7528\u4e8e\u914d\u7f6e\u6587\u4ef6\u3002 1 $ pip install pyyaml \u6211\u4eec\u9700\u8981\u5b89\u88c5 pyyaml \u6a21\u5757\u3002 config.yaml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 version: 1 formatters: simple: format: \"%(asctime)s %(name)s: %(message)s\" extended: format: \"%(asctime)s %(name)s %(levelname)s: %(message)s\" handlers: console: class: logging.StreamHandler level: INFO formatter: simple file_handler: class: logging.FileHandler level: INFO filename: test.log formatter: extended propagate: false loggers: dev: handlers: [console, file_handler] test: handlers: [file_handler] root: handlers: [file_handler] \u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u5404\u79cd\u683c\u5f0f\u5316\u7a0b\u5e8f\uff0c\u5904\u7406\u7a0b\u5e8f\u548c\u8bb0\u5f55\u5668\u3002 propagate \u9009\u9879\u53ef\u9632\u6b62\u5c06\u65e5\u5fd7\u6d88\u606f\u4f20\u64ad\u5230\u7236\u7ea7\u8bb0\u5f55\u5668\u3002 \u5c31\u6211\u4eec\u800c\u8a00\uff0c\u662f\u6839\u8bb0\u5f55\u5668\u3002 \u5426\u5219\uff0c\u6d88\u606f\u5c06\u88ab\u590d\u5236\u3002 log_yaml.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env python import logging import logging.config import yaml with open('config.yaml', 'r') as f: log_cfg = yaml.safe_load(f.read()) logging.config.dictConfig(log_cfg) logger = logging.getLogger('dev') logger.setLevel(logging.INFO) logger.info('This is an info message') logger.error('This is an error message') \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6\u5e76\u4f7f\u7528 dev \u8bb0\u5f55\u5668\u3002 1 2 3 $ log_yaml.py 2019-03-28 11:36:54,854 dev: This is an info message 2019-03-28 11:36:54,855 dev: This is an error message \u5f53\u6211\u4eec\u8fd0\u884c\u7a0b\u5e8f\u65f6\uff0c\u63a7\u5236\u53f0\u4e0a\u6709\u4e24\u6761\u6d88\u606f\u3002 \u63a7\u5236\u53f0\u5904\u7406\u7a0b\u5e8f\u4f7f\u7528\u5e26\u6709\u8f83\u5c11\u4fe1\u606f\u7684\u7b80\u5355\u683c\u5f0f\u5316\u7a0b\u5e8f\u3002 1 2 3 ... 2019-03-28 11:36:54,854 dev INFO: This is an info message 2019-03-28 11:36:54,855 dev ERROR: This is an error message test.log \u6587\u4ef6\u4e2d\u6709\u65e5\u5fd7\u6d88\u606f\uff0c\u5b83\u4eec\u7531\u6269\u5c55\u7684\u683c\u5f0f\u5316\u7a0b\u5e8f\u63d0\u4f9b\uff0c\u5177\u6709\u66f4\u591a\u4fe1\u606f\u3002","title":"Python \u65e5\u5fd7 YAML \u914d\u7f6e"},{"location":"pages/python/pytutorial/python-magicmethods/","text":"Python \u9b54\u672f\u65b9\u6cd5 \u00b6 Python \u9b54\u672f\u65b9\u6cd5 \u6559\u7a0b\u63cf\u8ff0\u4e86\u4ec0\u4e48\u662f Python \u9b54\u672f\u65b9\u6cd5\uff0c\u5e76\u8bf4\u660e\u4e86\u5982\u4f55\u4f7f\u7528\u5b83\u4eec\u3002 \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86\u4e00\u4e9b\u5e38\u89c1\u7684\u9b54\u672f\u65b9\u6cd5\u3002 Python \u9b54\u672f\u65b9\u6cd5 \u00b6 Python \u9b54\u672f\u65b9\u6cd5\u662f\u4e3a\u6211\u4eec\u7684\u81ea\u5b9a\u4e49\u7c7b\u6dfb\u52a0\u529f\u80fd\u7684\u7279\u6b8a\u65b9\u6cd5\u3002 \u5b83\u4eec\u88ab\u53cc\u4e0b\u5212\u7ebf\u5305\u56f4\uff08\u4f8b\u5982 __add __() \uff09\u3002 Python \u4e2d\u6709\u8bb8\u591a\u9b54\u672f\u65b9\u6cd5\u3002 \u5b83\u4eec\u4e2d\u7684\u5927\u591a\u6570\u7528\u4e8e\u975e\u5e38\u7279\u6b8a\u7684\u60c5\u51b5\u3002 \u6211\u4eec\u5c06\u63d0\u5230\u4e00\u4e9b\u66f4\u6d41\u884c\u7684\u65b9\u6cd5\u3002 __add__ \u65b9\u6cd5 \u00b6 __add__() \u65b9\u6cd5\u7528\u4e8e\u5b9e\u73b0\u52a0\u6cd5\u8fd0\u7b97\u3002 \u5728 Python \u4e2d\uff0c\u6570\u5b57\u4e0d\u662f\u539f\u59cb\u6587\u5b57\uff0c\u800c\u662f\u5bf9\u8c61\u3002 num + 4 \u8868\u8fbe\u5f0f\u7b49\u6548\u4e8e num.__add__(4) \u3002 add_dict.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python class MyDict(dict): def __add__(self, other): self.update(other) return MyDict(self) a = MyDict({'de': 'Germany'}) b = MyDict({'sk': 'Slovakia'}) print(a + b) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u81ea\u5b9a\u4e49\u8bcd\u5178\uff0c\u8be5\u8bcd\u5178\u4f7f\u7528 __add__() \u5b9e\u73b0\u52a0\u6cd5\u8fd0\u7b97\u3002 1 2 3 4 5 6 class MyDict(dict): def __add__(self, other): self.update(other) return MyDict(self) \u81ea\u5b9a\u4e49\u8bcd\u5178\u7ee7\u627f\u81ea\u5185\u7f6e dict \u3002 __add__() \u65b9\u6cd5\u4e0e update() \u65b9\u6cd5\u6dfb\u52a0\u4e24\u4e2a\u5b57\u5178\uff0c\u5e76\u8fd4\u56de\u65b0\u521b\u5efa\u7684\u5b57\u5178\u3002 1 2 a = MyDict({'de': 'Germany'}) b = MyDict({'sk': 'Slovakia'}) \u6211\u4eec\u521b\u5efa\u4e24\u4e2a\u7b80\u5355\u7684\u5b57\u5178\u3002 1 print(a + b) \u6211\u4eec\u6dfb\u52a0\u4e24\u4e2a\u5b57\u5178\u3002 1 2 $ ./add_dict.py {'de': 'Germany', 'sk': 'Slovakia'} \u8fd9\u662f\u8f93\u51fa\u3002 __init__ \u548c __str__ \u65b9\u6cd5 \u00b6 __init__() \u65b9\u6cd5\u7528\u4e8e\u521d\u59cb\u5316\u5bf9\u8c61\u3002 \u6b64\u65b9\u6cd5\u7528\u4e8e\u5b9e\u73b0\u5bf9\u8c61\u7684\u6784\u9020\u51fd\u6570\u3002 __str__() \u63d0\u4f9b\u4e86\u5bf9\u8c61\u53ef\u8bfb\u7684\u8f93\u51fa\u3002 init_str.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python class Person: def __init__(self, name, occupation): self.name = name self.occupation = occupation def __str__(self): return f'{self.name} is a {self.occupation}' p = Person('John Doe', 'gardener') print(p) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a Person \u7c7b\uff0c\u5177\u6709\u4e24\u4e2a\u5c5e\u6027\uff1a name \u548c occupation \u3002 1 2 3 4 def __init__(self, name, occupation): self.name = name self.occupation = occupation \u5728 __init__() \u65b9\u6cd5\u4e2d\uff0c\u6211\u4eec\u5c06\u5b9e\u4f8b\u53d8\u91cf\u8bbe\u7f6e\u4e3a\u4f20\u9012\u7ed9\u6784\u9020\u51fd\u6570\u7684\u503c\u3002 1 2 3 def __str__(self): return f'{self.name} is a {self.occupation}' __str__() \u65b9\u6cd5\u53ef\u4ee5\u5f88\u597d\u5730\u8f93\u51fa\u5bf9\u8c61\u3002 1 2 $ ./init_str.py John Doe is a gardener \u8fd9\u662f\u8f93\u51fa\u3002 __repr__ \u65b9\u6cd5 \u00b6 __repr__() \u65b9\u6cd5\u7531\u5185\u7f6e\u51fd\u6570 repr() \u8c03\u7528\u3002 \u5f53\u5b83\u8bc4\u4f30\u8fd4\u56de\u5bf9\u8c61\u7684\u8868\u8fbe\u5f0f\u65f6\uff0c\u5728 Python shell \u4e0a\u4f7f\u7528\u5b83\u3002 __str__() \u7528\u4e8e\u63d0\u4f9b\u5bf9\u8c61\u7684\u4eba\u7c7b\u53ef\u8bfb\u7248\u672c\uff0c __repr__() \u7528\u4e8e\u63d0\u4f9b\u5bf9\u8c61\u7684\u5b8c\u6574\u8868\u793a\u3002 \u540e\u8005\u7684\u8f93\u51fa\u4e5f\u66f4\u9002\u5408\u5f00\u53d1\u4eba\u5458\u3002 \u5982\u679c\u7f3a\u5c11 __str__() \u5b9e\u73b0\uff0c\u5219\u5c06 __repr__() \u65b9\u6cd5\u7528\u4f5c\u540e\u5907\u3002 1 2 3 def __repr__(self): return '<{0}.{1} object at {2}>'.format( self.__module__, type(self).__name__, hex(id(self))) \u5bf9\u8c61\u7684 __repr__() \u65b9\u6cd5\u7684\u9ed8\u8ba4\u5b9e\u73b0\u7c7b\u4f3c\u4e8e\u4e0a\u9762\u7684\u4ee3\u7801\u3002 repr_ex.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #!/usr/bin/env python class Person: def __init__(self, name, occupation): self.name = name self.occupation = occupation def __str__(self): return f'{self.name} is a {self.occupation}' def __repr__(self): return f'Person(name: {self.name}, occupation: {self.occupation})' p = Person('John Doe', 'gardener') print(p) print(repr(p)) \u8be5\u793a\u4f8b\u5b9e\u73b0\u4e86 __str__() \u548c __repr__() \u65b9\u6cd5\u3002 1 2 3 $ ./repr_ex.py John Doe is a gardener Person{name: John Doe, occupation: gardener} \u8fd9\u662f\u8f93\u51fa\u3002 __len__ \u548c __getitem__ \u65b9\u6cd5 \u00b6 __len__() \u65b9\u6cd5\u8fd4\u56de\u5bb9\u5668\u7684\u957f\u5ea6\u3002 \u5f53\u6211\u4eec\u5728\u5bf9\u8c61\u4e0a\u4f7f\u7528\u5185\u7f6e\u7684 len() \u65b9\u6cd5\u65f6\uff0c\u5c06\u8c03\u7528\u8be5\u65b9\u6cd5\u3002 __getitem__() \u65b9\u6cd5\u5b9a\u4e49\u9879\u76ee\u8bbf\u95ee\uff08[]\uff09\u8fd0\u7b97\u7b26\u3002 french_deck.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #!/usr/bin/env python import collections from random import choice Card = collections.namedtuple('Card', ['suit', 'rank']) class FrenchDeck: ranks = [str(i) for i in range(2, 11)] + list('JQKA') suits = [\"heart\", \"clubs\", \"spades\", \"diamond\"] def __init__(self): self.total = [Card(suit, rank) for suit in self.suits for rank in self.ranks] def __len__(self): return len(self.total) def __getitem__(self, index): return self.total[index] deck = FrenchDeck() print(deck[0]) print(len(deck)) print(choice(deck)) \u8be5\u65b9\u6cd5\u7528\u4e8e\u5b9e\u73b0\u6cd5\u8bed\u5361\u7247\u7ec4\u3002 1 Card = collections.namedtuple('Card', ['suit', 'rank']) \u6211\u4eec\u4f7f\u7528\u4e00\u4e2a\u547d\u540d\u7684\u5143\u7ec4\u6765\u5b9a\u4e49\u4e00\u4e2a Card \u7c7b\u3002 namedtuple \u662f\u7528\u4e8e\u521b\u5efa\u5143\u7ec4\u7c7b\u7684\u5de5\u5382\u529f\u80fd\u3002 \u6bcf\u5f20\u5361\u90fd\u6709\u4e00\u5957\u897f\u88c5\u548c\u4e00\u4e2a\u7b49\u7ea7\u3002 1 2 def __len__(self): return len(self.total) __len__() \u65b9\u6cd5\u8fd4\u56de\u5361\u5ea7\uff0852\uff09\u4e2d\u7684\u5361\u6570\u3002 1 2 def __getitem__(self, index): return self.total[index] __getitem__() \u5b9e\u73b0\u7d22\u5f15\u64cd\u4f5c\u3002 1 print(deck[0]) \u6211\u4eec\u5f97\u5230\u5361\u7ec4\u7684\u7b2c\u4e00\u5f20\u724c\u3002 \u8fd9\u79f0\u4e3a __getitem__() \u3002 1 print(len(deck)) \u8fd9\u5c06\u8c03\u7528 __len__() \u65b9\u6cd5\u3002 1 2 3 4 $ ./french_deck.py Card(suit='heart', rank='2') 52 Card(suit='diamond', rank='A') \u8fd9\u662f\u8f93\u51fa\u3002 __int__ \u548c __index__ \u65b9\u6cd5 \u00b6 \u8c03\u7528 __int__() \u65b9\u6cd5\u4ee5\u5b9e\u73b0\u5185\u7f6e\u7684 int() \u529f\u80fd\u3002 \u5f53\u5728\u5207\u7247\u8868\u8fbe\u5f0f\u4e2d\u4f7f\u7528\u5bf9\u8c61\u4ee5\u53ca\u5185\u7f6e\u7684 hex() \uff0c oct() \u548c bin() \u51fd\u6570\u65f6\uff0c __index__() \u65b9\u6cd5\u5c06\u7c7b\u578b\u8f6c\u6362\u4e3a int\u3002 char_ex.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/usr/bin/env python class Char: def __init__(self, val): self.val = val def __int__(self): return ord(self.val) def __index__(self): return ord(self.val) c1 = Char('a') print(int(c1)) print(hex(c1)) print(bin(c1)) print(oct(c1)) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684 Char \u7c7b\uff0c\u8be5\u7c7b\u5b9e\u73b0\u4e86 int() \uff0c hex() \uff0c bin() \u548c oct() \u51fd\u6570\u3002 1 2 3 4 5 ./char_ex.py 97 0x61 0b1100001 0o141 \u8fd9\u662f\u8f93\u51fa\u3002 __eq __ \uff0c __ lt__ \u548c __gt__ \u65b9\u6cd5 \u00b6 __eq__() \u5b9e\u73b0\u4e86 == \u8fd0\u7b97\u7b26\u3002 __lt__() \u5b9e\u73b0\u4e86 &lt; \u8fd0\u7b97\u7b26\uff0c __gt__() \u5b9e\u73b0\u4e86 &gt; \u8fd0\u7b97\u7b26\u3002 pouch.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 #!/usr/bin/env python import collections Coin = collections.namedtuple('coin', ['rank']) # a gold coin equals to two silver and six bronze coins class Pouch: def __init__(self): self.bag = [] def add(self, coin): self.bag.append(coin) def __eq__(self, other): val1, val2 = self.__evaluate(other) if val1 == val2: return True else: return False def __lt__(self, other): val1, val2 = self.__evaluate(other) if val1 < val2: return True else: return False def __gt__(self, other): val1, val2 = self.__evaluate(other) if val1 > val2: return True else: return False def __str__(self): return str(self.bag) def __evaluate(self, other): val1 = 0 val2 = 0 for coin in self.bag: if coin.rank == 'g': val1 += 6 if coin.rank == 's': val1 += 3 if coin.rank == 'b': val1 += 1 for coin in other.bag: if coin.rank == 'g': val2 += 6 if coin.rank == 's': val2 += 3 if coin.rank == 'b': val2 += 1 return val1, val2 pouch1 = Pouch() pouch1.add(Coin('g')) pouch1.add(Coin('g')) pouch1.add(Coin('s')) pouch2 = Pouch() pouch2.add(Coin('g')) pouch2.add(Coin('s')) pouch2.add(Coin('s')) pouch2.add(Coin('b')) pouch2.add(Coin('b')) pouch2.add(Coin('b')) print(pouch1) print(pouch2) if pouch1 == pouch2: print('Pouches have equal value') elif pouch1 > pouch2: print('Pouch 1 is more valueable than Pouch 2') else: print('Pouch 2 is more valueable than Pouch 1') \u6211\u4eec\u6709\u4e00\u4e2a\u53ef\u4ee5\u5bb9\u7eb3\u91d1\uff0c\u94f6\u548c\u9752\u94dc\u786c\u5e01\u7684\u5c0f\u888b\u3002 \u4e00\u679a\u91d1\u5e01\u7b49\u4e8e\u4e24\u4e2a\u94f6\u5e01\u548c\u516d\u4e2a\u94dc\u5e01\u3002 \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 Python magic \u65b9\u6cd5\u4e3a pouch \u5bf9\u8c61\u5b9e\u73b0\u4e86\u4e09\u4e2a\u6bd4\u8f83\u8fd0\u7b97\u7b26\u3002 1 2 3 4 5 6 7 8 def __eq__(self, other): val1, val2 = self.__evaluate(other) if val1 == val2: return True else: return False \u5728 __eq__() \u65b9\u6cd5\u4e2d\uff0c\u6211\u4eec\u9996\u5148\u8bc4\u4f30\u4e24\u4e2a\u5c0f\u888b\u7684\u503c\u3002 \u7136\u540e\u6211\u4eec\u6bd4\u8f83\u5b83\u4eec\u5e76\u8fd4\u56de\u5e03\u5c14\u7ed3\u679c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 def __evaluate(self, other): val1 = 0 val2 = 0 for coin in self.bag: if coin.rank == 'g': val1 += 6 if coin.rank == 's': val1 += 3 if coin.rank == 'b': val1 += 1 for coin in other.bag: if coin.rank == 'g': val2 += 6 if coin.rank == 's': val2 += 3 if coin.rank == 'b': val2 += 1 return val1, val2 __evaluate() \u65b9\u6cd5\u8ba1\u7b97\u4e24\u4e2a\u888b\u7684\u503c\u3002 \u5b83\u7a7f\u8fc7\u5c0f\u888b\u7684\u786c\u5e01\uff0c\u5e76\u6839\u636e\u786c\u5e01\u7684\u7b49\u7ea7\u589e\u52a0\u4e00\u4e2a\u503c\u3002 1 2 3 4 5 pouch1 = Pouch() pouch1.add(Coin('g')) pouch1.add(Coin('g')) pouch1.add(Coin('s')) \u6211\u4eec\u521b\u5efa\u7b2c\u4e00\u4e2a\u888b\uff0c\u5e76\u5728\u5176\u4e2d\u6dfb\u52a0\u4e09\u4e2a\u786c\u5e01\u3002 1 2 3 4 5 6 7 if pouch1 == pouch2: print('Pouches have equal value') elif pouch1 > pouch2: print('Pouch 1 is more valueable than Pouch 2') else: print('Pouch 2 is more valueable than Pouch 1') \u6211\u4eec\u5c06\u5c0f\u888b\u4e0e\u6bd4\u8f83\u8fd0\u7b97\u7b26\u8fdb\u884c\u6bd4\u8f83\u3002 2D \u5411\u91cf\u793a\u4f8b \u00b6 \u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86\u51e0\u79cd\u5176\u4ed6\u9b54\u672f\u65b9\u6cd5\uff0c\u5305\u62ec __sub__() \uff0c __mul__() \u548c __abs__() \u3002 vector.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 #!/usr/bin/env python import math class Vec2D: def __init__(self, x, y): self.x = x self.y = y def __add__(self, other): return Vec2D(self.x + other.x, self.y + other.y) def __sub__(self, other): return Vec2D(self.x - other.x, self.y - other.y) def __mul__(self, other): return self.x * other.x + self.y * other.y def __abs__(self): return math.sqrt(self.x ** 2 + self.y ** 2) def __eq__(self, other): return self.x == other.x and self.y == other.y def __str__(self): return f'({self.x}, {self.y})' def __ne__(self, other): return not self.__eq__(other) u = Vec2D(0, 1) v = Vec2D(2, 3) w = Vec2D(-1, 1) a = u + v print(a) print(a == w) a = u - v print(a) a = u * v print(a) print(abs(u)) print(u == v) print(u != v) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a Vec2D \u7c7b\u3002 \u6211\u4eec\u53ef\u4ee5\u6bd4\u8f83\uff0c\u52a0\uff0c\u51cf\u548c\u4e58\u5411\u91cf\u3002 \u6211\u4eec\u8fd8\u53ef\u4ee5\u8ba1\u7b97\u5411\u91cf\u7684\u957f\u5ea6\u3002 1 2 3 4 5 6 7 8 $ ./vector.py (2, 4) False (-2, -2) 3 1.0 False True \u8fd9\u662f\u8f93\u51fa\u3002","title":"Python \u9b54\u672f\u65b9\u6cd5"},{"location":"pages/python/pytutorial/python-magicmethods/#Python-\u9b54\u672f\u65b9\u6cd5","text":"Python \u9b54\u672f\u65b9\u6cd5 \u6559\u7a0b\u63cf\u8ff0\u4e86\u4ec0\u4e48\u662f Python \u9b54\u672f\u65b9\u6cd5\uff0c\u5e76\u8bf4\u660e\u4e86\u5982\u4f55\u4f7f\u7528\u5b83\u4eec\u3002 \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86\u4e00\u4e9b\u5e38\u89c1\u7684\u9b54\u672f\u65b9\u6cd5\u3002","title":"Python \u9b54\u672f\u65b9\u6cd5"},{"location":"pages/python/pytutorial/python-magicmethods/#Python-\u9b54\u672f\u65b9\u6cd5_1","text":"Python \u9b54\u672f\u65b9\u6cd5\u662f\u4e3a\u6211\u4eec\u7684\u81ea\u5b9a\u4e49\u7c7b\u6dfb\u52a0\u529f\u80fd\u7684\u7279\u6b8a\u65b9\u6cd5\u3002 \u5b83\u4eec\u88ab\u53cc\u4e0b\u5212\u7ebf\u5305\u56f4\uff08\u4f8b\u5982 __add __() \uff09\u3002 Python \u4e2d\u6709\u8bb8\u591a\u9b54\u672f\u65b9\u6cd5\u3002 \u5b83\u4eec\u4e2d\u7684\u5927\u591a\u6570\u7528\u4e8e\u975e\u5e38\u7279\u6b8a\u7684\u60c5\u51b5\u3002 \u6211\u4eec\u5c06\u63d0\u5230\u4e00\u4e9b\u66f4\u6d41\u884c\u7684\u65b9\u6cd5\u3002","title":"Python \u9b54\u672f\u65b9\u6cd5"},{"location":"pages/python/pytutorial/python-magicmethods/#__add__\u65b9\u6cd5","text":"__add__() \u65b9\u6cd5\u7528\u4e8e\u5b9e\u73b0\u52a0\u6cd5\u8fd0\u7b97\u3002 \u5728 Python \u4e2d\uff0c\u6570\u5b57\u4e0d\u662f\u539f\u59cb\u6587\u5b57\uff0c\u800c\u662f\u5bf9\u8c61\u3002 num + 4 \u8868\u8fbe\u5f0f\u7b49\u6548\u4e8e num.__add__(4) \u3002 add_dict.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python class MyDict(dict): def __add__(self, other): self.update(other) return MyDict(self) a = MyDict({'de': 'Germany'}) b = MyDict({'sk': 'Slovakia'}) print(a + b) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u81ea\u5b9a\u4e49\u8bcd\u5178\uff0c\u8be5\u8bcd\u5178\u4f7f\u7528 __add__() \u5b9e\u73b0\u52a0\u6cd5\u8fd0\u7b97\u3002 1 2 3 4 5 6 class MyDict(dict): def __add__(self, other): self.update(other) return MyDict(self) \u81ea\u5b9a\u4e49\u8bcd\u5178\u7ee7\u627f\u81ea\u5185\u7f6e dict \u3002 __add__() \u65b9\u6cd5\u4e0e update() \u65b9\u6cd5\u6dfb\u52a0\u4e24\u4e2a\u5b57\u5178\uff0c\u5e76\u8fd4\u56de\u65b0\u521b\u5efa\u7684\u5b57\u5178\u3002 1 2 a = MyDict({'de': 'Germany'}) b = MyDict({'sk': 'Slovakia'}) \u6211\u4eec\u521b\u5efa\u4e24\u4e2a\u7b80\u5355\u7684\u5b57\u5178\u3002 1 print(a + b) \u6211\u4eec\u6dfb\u52a0\u4e24\u4e2a\u5b57\u5178\u3002 1 2 $ ./add_dict.py {'de': 'Germany', 'sk': 'Slovakia'} \u8fd9\u662f\u8f93\u51fa\u3002","title":"__add__\u65b9\u6cd5"},{"location":"pages/python/pytutorial/python-magicmethods/#__init__\u548c__str__\u65b9\u6cd5","text":"__init__() \u65b9\u6cd5\u7528\u4e8e\u521d\u59cb\u5316\u5bf9\u8c61\u3002 \u6b64\u65b9\u6cd5\u7528\u4e8e\u5b9e\u73b0\u5bf9\u8c61\u7684\u6784\u9020\u51fd\u6570\u3002 __str__() \u63d0\u4f9b\u4e86\u5bf9\u8c61\u53ef\u8bfb\u7684\u8f93\u51fa\u3002 init_str.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python class Person: def __init__(self, name, occupation): self.name = name self.occupation = occupation def __str__(self): return f'{self.name} is a {self.occupation}' p = Person('John Doe', 'gardener') print(p) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a Person \u7c7b\uff0c\u5177\u6709\u4e24\u4e2a\u5c5e\u6027\uff1a name \u548c occupation \u3002 1 2 3 4 def __init__(self, name, occupation): self.name = name self.occupation = occupation \u5728 __init__() \u65b9\u6cd5\u4e2d\uff0c\u6211\u4eec\u5c06\u5b9e\u4f8b\u53d8\u91cf\u8bbe\u7f6e\u4e3a\u4f20\u9012\u7ed9\u6784\u9020\u51fd\u6570\u7684\u503c\u3002 1 2 3 def __str__(self): return f'{self.name} is a {self.occupation}' __str__() \u65b9\u6cd5\u53ef\u4ee5\u5f88\u597d\u5730\u8f93\u51fa\u5bf9\u8c61\u3002 1 2 $ ./init_str.py John Doe is a gardener \u8fd9\u662f\u8f93\u51fa\u3002","title":"__init__\u548c__str__\u65b9\u6cd5"},{"location":"pages/python/pytutorial/python-magicmethods/#__repr__\u65b9\u6cd5","text":"__repr__() \u65b9\u6cd5\u7531\u5185\u7f6e\u51fd\u6570 repr() \u8c03\u7528\u3002 \u5f53\u5b83\u8bc4\u4f30\u8fd4\u56de\u5bf9\u8c61\u7684\u8868\u8fbe\u5f0f\u65f6\uff0c\u5728 Python shell \u4e0a\u4f7f\u7528\u5b83\u3002 __str__() \u7528\u4e8e\u63d0\u4f9b\u5bf9\u8c61\u7684\u4eba\u7c7b\u53ef\u8bfb\u7248\u672c\uff0c __repr__() \u7528\u4e8e\u63d0\u4f9b\u5bf9\u8c61\u7684\u5b8c\u6574\u8868\u793a\u3002 \u540e\u8005\u7684\u8f93\u51fa\u4e5f\u66f4\u9002\u5408\u5f00\u53d1\u4eba\u5458\u3002 \u5982\u679c\u7f3a\u5c11 __str__() \u5b9e\u73b0\uff0c\u5219\u5c06 __repr__() \u65b9\u6cd5\u7528\u4f5c\u540e\u5907\u3002 1 2 3 def __repr__(self): return '<{0}.{1} object at {2}>'.format( self.__module__, type(self).__name__, hex(id(self))) \u5bf9\u8c61\u7684 __repr__() \u65b9\u6cd5\u7684\u9ed8\u8ba4\u5b9e\u73b0\u7c7b\u4f3c\u4e8e\u4e0a\u9762\u7684\u4ee3\u7801\u3002 repr_ex.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #!/usr/bin/env python class Person: def __init__(self, name, occupation): self.name = name self.occupation = occupation def __str__(self): return f'{self.name} is a {self.occupation}' def __repr__(self): return f'Person(name: {self.name}, occupation: {self.occupation})' p = Person('John Doe', 'gardener') print(p) print(repr(p)) \u8be5\u793a\u4f8b\u5b9e\u73b0\u4e86 __str__() \u548c __repr__() \u65b9\u6cd5\u3002 1 2 3 $ ./repr_ex.py John Doe is a gardener Person{name: John Doe, occupation: gardener} \u8fd9\u662f\u8f93\u51fa\u3002","title":"__repr__\u65b9\u6cd5"},{"location":"pages/python/pytutorial/python-magicmethods/#__len__\u548c__getitem__\u65b9\u6cd5","text":"__len__() \u65b9\u6cd5\u8fd4\u56de\u5bb9\u5668\u7684\u957f\u5ea6\u3002 \u5f53\u6211\u4eec\u5728\u5bf9\u8c61\u4e0a\u4f7f\u7528\u5185\u7f6e\u7684 len() \u65b9\u6cd5\u65f6\uff0c\u5c06\u8c03\u7528\u8be5\u65b9\u6cd5\u3002 __getitem__() \u65b9\u6cd5\u5b9a\u4e49\u9879\u76ee\u8bbf\u95ee\uff08[]\uff09\u8fd0\u7b97\u7b26\u3002 french_deck.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #!/usr/bin/env python import collections from random import choice Card = collections.namedtuple('Card', ['suit', 'rank']) class FrenchDeck: ranks = [str(i) for i in range(2, 11)] + list('JQKA') suits = [\"heart\", \"clubs\", \"spades\", \"diamond\"] def __init__(self): self.total = [Card(suit, rank) for suit in self.suits for rank in self.ranks] def __len__(self): return len(self.total) def __getitem__(self, index): return self.total[index] deck = FrenchDeck() print(deck[0]) print(len(deck)) print(choice(deck)) \u8be5\u65b9\u6cd5\u7528\u4e8e\u5b9e\u73b0\u6cd5\u8bed\u5361\u7247\u7ec4\u3002 1 Card = collections.namedtuple('Card', ['suit', 'rank']) \u6211\u4eec\u4f7f\u7528\u4e00\u4e2a\u547d\u540d\u7684\u5143\u7ec4\u6765\u5b9a\u4e49\u4e00\u4e2a Card \u7c7b\u3002 namedtuple \u662f\u7528\u4e8e\u521b\u5efa\u5143\u7ec4\u7c7b\u7684\u5de5\u5382\u529f\u80fd\u3002 \u6bcf\u5f20\u5361\u90fd\u6709\u4e00\u5957\u897f\u88c5\u548c\u4e00\u4e2a\u7b49\u7ea7\u3002 1 2 def __len__(self): return len(self.total) __len__() \u65b9\u6cd5\u8fd4\u56de\u5361\u5ea7\uff0852\uff09\u4e2d\u7684\u5361\u6570\u3002 1 2 def __getitem__(self, index): return self.total[index] __getitem__() \u5b9e\u73b0\u7d22\u5f15\u64cd\u4f5c\u3002 1 print(deck[0]) \u6211\u4eec\u5f97\u5230\u5361\u7ec4\u7684\u7b2c\u4e00\u5f20\u724c\u3002 \u8fd9\u79f0\u4e3a __getitem__() \u3002 1 print(len(deck)) \u8fd9\u5c06\u8c03\u7528 __len__() \u65b9\u6cd5\u3002 1 2 3 4 $ ./french_deck.py Card(suit='heart', rank='2') 52 Card(suit='diamond', rank='A') \u8fd9\u662f\u8f93\u51fa\u3002","title":"__len__\u548c__getitem__\u65b9\u6cd5"},{"location":"pages/python/pytutorial/python-magicmethods/#__int__\u548c__index__\u65b9\u6cd5","text":"\u8c03\u7528 __int__() \u65b9\u6cd5\u4ee5\u5b9e\u73b0\u5185\u7f6e\u7684 int() \u529f\u80fd\u3002 \u5f53\u5728\u5207\u7247\u8868\u8fbe\u5f0f\u4e2d\u4f7f\u7528\u5bf9\u8c61\u4ee5\u53ca\u5185\u7f6e\u7684 hex() \uff0c oct() \u548c bin() \u51fd\u6570\u65f6\uff0c __index__() \u65b9\u6cd5\u5c06\u7c7b\u578b\u8f6c\u6362\u4e3a int\u3002 char_ex.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/usr/bin/env python class Char: def __init__(self, val): self.val = val def __int__(self): return ord(self.val) def __index__(self): return ord(self.val) c1 = Char('a') print(int(c1)) print(hex(c1)) print(bin(c1)) print(oct(c1)) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684 Char \u7c7b\uff0c\u8be5\u7c7b\u5b9e\u73b0\u4e86 int() \uff0c hex() \uff0c bin() \u548c oct() \u51fd\u6570\u3002 1 2 3 4 5 ./char_ex.py 97 0x61 0b1100001 0o141 \u8fd9\u662f\u8f93\u51fa\u3002","title":"__int__\u548c__index__\u65b9\u6cd5"},{"location":"pages/python/pytutorial/python-magicmethods/#__eq-____-lt__\u548c__gt__\u65b9\u6cd5","text":"__eq__() \u5b9e\u73b0\u4e86 == \u8fd0\u7b97\u7b26\u3002 __lt__() \u5b9e\u73b0\u4e86 &lt; \u8fd0\u7b97\u7b26\uff0c __gt__() \u5b9e\u73b0\u4e86 &gt; \u8fd0\u7b97\u7b26\u3002 pouch.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 #!/usr/bin/env python import collections Coin = collections.namedtuple('coin', ['rank']) # a gold coin equals to two silver and six bronze coins class Pouch: def __init__(self): self.bag = [] def add(self, coin): self.bag.append(coin) def __eq__(self, other): val1, val2 = self.__evaluate(other) if val1 == val2: return True else: return False def __lt__(self, other): val1, val2 = self.__evaluate(other) if val1 < val2: return True else: return False def __gt__(self, other): val1, val2 = self.__evaluate(other) if val1 > val2: return True else: return False def __str__(self): return str(self.bag) def __evaluate(self, other): val1 = 0 val2 = 0 for coin in self.bag: if coin.rank == 'g': val1 += 6 if coin.rank == 's': val1 += 3 if coin.rank == 'b': val1 += 1 for coin in other.bag: if coin.rank == 'g': val2 += 6 if coin.rank == 's': val2 += 3 if coin.rank == 'b': val2 += 1 return val1, val2 pouch1 = Pouch() pouch1.add(Coin('g')) pouch1.add(Coin('g')) pouch1.add(Coin('s')) pouch2 = Pouch() pouch2.add(Coin('g')) pouch2.add(Coin('s')) pouch2.add(Coin('s')) pouch2.add(Coin('b')) pouch2.add(Coin('b')) pouch2.add(Coin('b')) print(pouch1) print(pouch2) if pouch1 == pouch2: print('Pouches have equal value') elif pouch1 > pouch2: print('Pouch 1 is more valueable than Pouch 2') else: print('Pouch 2 is more valueable than Pouch 1') \u6211\u4eec\u6709\u4e00\u4e2a\u53ef\u4ee5\u5bb9\u7eb3\u91d1\uff0c\u94f6\u548c\u9752\u94dc\u786c\u5e01\u7684\u5c0f\u888b\u3002 \u4e00\u679a\u91d1\u5e01\u7b49\u4e8e\u4e24\u4e2a\u94f6\u5e01\u548c\u516d\u4e2a\u94dc\u5e01\u3002 \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 Python magic \u65b9\u6cd5\u4e3a pouch \u5bf9\u8c61\u5b9e\u73b0\u4e86\u4e09\u4e2a\u6bd4\u8f83\u8fd0\u7b97\u7b26\u3002 1 2 3 4 5 6 7 8 def __eq__(self, other): val1, val2 = self.__evaluate(other) if val1 == val2: return True else: return False \u5728 __eq__() \u65b9\u6cd5\u4e2d\uff0c\u6211\u4eec\u9996\u5148\u8bc4\u4f30\u4e24\u4e2a\u5c0f\u888b\u7684\u503c\u3002 \u7136\u540e\u6211\u4eec\u6bd4\u8f83\u5b83\u4eec\u5e76\u8fd4\u56de\u5e03\u5c14\u7ed3\u679c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 def __evaluate(self, other): val1 = 0 val2 = 0 for coin in self.bag: if coin.rank == 'g': val1 += 6 if coin.rank == 's': val1 += 3 if coin.rank == 'b': val1 += 1 for coin in other.bag: if coin.rank == 'g': val2 += 6 if coin.rank == 's': val2 += 3 if coin.rank == 'b': val2 += 1 return val1, val2 __evaluate() \u65b9\u6cd5\u8ba1\u7b97\u4e24\u4e2a\u888b\u7684\u503c\u3002 \u5b83\u7a7f\u8fc7\u5c0f\u888b\u7684\u786c\u5e01\uff0c\u5e76\u6839\u636e\u786c\u5e01\u7684\u7b49\u7ea7\u589e\u52a0\u4e00\u4e2a\u503c\u3002 1 2 3 4 5 pouch1 = Pouch() pouch1.add(Coin('g')) pouch1.add(Coin('g')) pouch1.add(Coin('s')) \u6211\u4eec\u521b\u5efa\u7b2c\u4e00\u4e2a\u888b\uff0c\u5e76\u5728\u5176\u4e2d\u6dfb\u52a0\u4e09\u4e2a\u786c\u5e01\u3002 1 2 3 4 5 6 7 if pouch1 == pouch2: print('Pouches have equal value') elif pouch1 > pouch2: print('Pouch 1 is more valueable than Pouch 2') else: print('Pouch 2 is more valueable than Pouch 1') \u6211\u4eec\u5c06\u5c0f\u888b\u4e0e\u6bd4\u8f83\u8fd0\u7b97\u7b26\u8fdb\u884c\u6bd4\u8f83\u3002","title":"__eq __\uff0c__ lt__\u548c__gt__\u65b9\u6cd5"},{"location":"pages/python/pytutorial/python-magicmethods/#2D-\u5411\u91cf\u793a\u4f8b","text":"\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86\u51e0\u79cd\u5176\u4ed6\u9b54\u672f\u65b9\u6cd5\uff0c\u5305\u62ec __sub__() \uff0c __mul__() \u548c __abs__() \u3002 vector.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 #!/usr/bin/env python import math class Vec2D: def __init__(self, x, y): self.x = x self.y = y def __add__(self, other): return Vec2D(self.x + other.x, self.y + other.y) def __sub__(self, other): return Vec2D(self.x - other.x, self.y - other.y) def __mul__(self, other): return self.x * other.x + self.y * other.y def __abs__(self): return math.sqrt(self.x ** 2 + self.y ** 2) def __eq__(self, other): return self.x == other.x and self.y == other.y def __str__(self): return f'({self.x}, {self.y})' def __ne__(self, other): return not self.__eq__(other) u = Vec2D(0, 1) v = Vec2D(2, 3) w = Vec2D(-1, 1) a = u + v print(a) print(a == w) a = u - v print(a) a = u * v print(a) print(abs(u)) print(u == v) print(u != v) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a Vec2D \u7c7b\u3002 \u6211\u4eec\u53ef\u4ee5\u6bd4\u8f83\uff0c\u52a0\uff0c\u51cf\u548c\u4e58\u5411\u91cf\u3002 \u6211\u4eec\u8fd8\u53ef\u4ee5\u8ba1\u7b97\u5411\u91cf\u7684\u957f\u5ea6\u3002 1 2 3 4 5 6 7 8 $ ./vector.py (2, 4) False (-2, -2) 3 1.0 False True \u8fd9\u662f\u8f93\u51fa\u3002","title":"2D \u5411\u91cf\u793a\u4f8b"},{"location":"pages/python/pytutorial/python-map/","text":"Python \u6620\u5c04 \u00b6 Python \u6620\u5c04 \u6559\u7a0b\u4ecb\u7ecd\u4e86 Python \u5185\u7f6e\u7684 map() \u51fd\u6570\u3002 Python map() \u51fd\u6570 \u00b6 Python map() \u5185\u7f6e\u51fd\u6570\u5c06\u7ed9\u5b9a\u51fd\u6570\u5e94\u7528\u4e8e\u53ef\u8fed\u4ee3\u7684\u6bcf\u4e00\u9879\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\u5bf9\u8c61\u3002 1 map(function, iterable, ...) \u53ef\u4ee5\u5c06\u591a\u4e2a\u8fed\u4ee3\u4f20\u9012\u7ed9 map() \u51fd\u6570\u3002 \u8be5\u51fd\u6570\u5fc5\u987b\u91c7\u7528\u4e0e\u53ef\u8fed\u4ee3\u9879\u4e00\u6837\u591a\u7684\u53c2\u6570\u3002 Python \u6620\u5c04\u793a\u4f8b \u00b6 \u4ee5\u4e0b\u793a\u4f8b\u5728\u6574\u6570\u5217\u8868\u4e0a\u4f7f\u7528 Python map() \u3002 python_map.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/python3 def square(x): return x * x nums = [1, 2, 3, 4, 5] nums_squared = map(square, nums) for num in nums_squared: print(num) \u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u6574\u6570\u5217\u8868\uff0c\u5e76\u4f7f\u7528 map() \u5728\u5217\u8868\u7684\u6bcf\u4e2a\u5143\u7d20\u4e0a\u5e94\u7528 square() \u51fd\u6570\u3002 1 2 3 def square(x): return x * x square() \u51fd\u6570\u5e73\u65b9\u5176\u53c2\u6570\u3002 1 nums = [1, 2, 3, 4, 5] \u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u6574\u6570\u5217\u8868\u3002 1 nums_squared = map(square, nums) map() \u529f\u80fd\u5c06 square() \u529f\u80fd\u5e94\u7528\u4e8e nums \u5217\u8868\u7684\u6bcf\u4e2a\u5143\u7d20\u3002 1 2 3 for num in nums_squared: print(num) \u6211\u4eec\u904d\u5386\u8fd4\u56de\u7684 iterable \u5e76\u6253\u5370\u5143\u7d20\u3002 1 2 3 4 5 6 $ ./python_map.py 1 4 9 16 25 \u8fd9\u662f\u8f93\u51fa\u3002 \u7b49\u6548\u7684 Python \u6620\u5c04 \u00b6 \u4ee5\u4e0b\u793a\u4f8b\u663e\u793a\u4e86\u4e0e Python 3 map() \u51fd\u6570\u7b49\u6548\u7684\u81ea\u5b9a\u4e49\u3002 mymap_fun.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/usr/bin/python3 def square(x): return x * x def mymap(func, iterable): for i in iterable: yield func(i) nums = [1, 2, 3, 4, 5] nums_squared = mymap(square, nums) for num in nums_squared: print(num) mymap() \u4e0e Python 3 map() \u505a\u76f8\u540c\u7684\u4e8b\u60c5\u3002 \u5e26 lambda \u7684 Python \u6620\u5c04 \u00b6 \u4e0b\u4e00\u4e2a\u793a\u4f8b\u4f7f\u7528 lambda \u8fd0\u7b97\u7b26\u5728 map() \u5185\u90e8\u521b\u5efa\u4e00\u4e2a\u533f\u540d\u51fd\u6570\u3002 python_map_lambda.py 1 2 3 4 5 6 7 8 #!/usr/bin/python3 nums = [1, 2, 3, 4, 5] nums_squared = map(lambda x: x*x, nums) for num in nums_squared: print(num) \u8be5\u4ee3\u7801\u793a\u4f8b\u5c06\u5217\u8868\u5143\u7d20\u4e0e map() \u5e73\u65b9\u5728\u4e00\u8d77\uff0c\u5e76\u5c06\u533f\u540d\u51fd\u6570\u4e0e lambda \u521b\u5efa\u3002 \u5177\u6709\u591a\u4e2a\u53ef\u8fed\u4ee3\u9879\u7684 Python \u6620\u5c04 \u00b6 \u524d\u9762\u5df2\u7ecf\u63d0\u5230\u8fc7\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u591a\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4f20\u9012\u7ed9 map() \u3002 python_map_iterables.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/python3 def multiply(x, y): return x * y nums1 = [1, 2, 3, 4, 5] nums2 = [6, 7, 8, 9, 10] mult = map(multiply, nums1, nums2) for num in mult: print(num) \u5728\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6709\u4e24\u4e2a\u6301\u6709\u6574\u6570\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61\u3002 \u6765\u81ea\u4e24\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u503c\u76f8\u4e58\u3002 1 2 3 def multiply(x, y): return x * y \u8be5\u51fd\u6570\u5fc5\u987b\u5e26\u6709\u4e24\u4e2a\u53c2\u6570\uff0c\u56e0\u4e3a\u6709\u4e24\u4e2a\u53ef\u8fed\u4ee3\u53d8\u91cf\u4f20\u9012\u7ed9 map() \u3002 1 2 3 4 5 6 $ ./python_map_iterables.py 6 14 24 36 50 \u8fd9\u662f\u8f93\u51fa\u3002 Python \u6620\u5c04\u591a\u4e2a\u51fd\u6570 \u00b6 \u5728\u4e0b\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u663e\u793a\u5982\u4f55\u5728 Python map() \u4e2d\u4f7f\u7528\u591a\u4e2a\u51fd\u6570\u3002 python_map_multiple_funcs.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/python3 def add(x): return x + x def square(x): return x * x nums = [1, 2, 3, 4, 5] for i in nums: vals = list(map(lambda x: x(i), (add, square))) print(vals) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06 add() \u548c square() \u51fd\u6570\u5e94\u7528\u4e8e\u6574\u6570\u503c\u5217\u8868\u3002 1 2 3 4 5 for i in nums: vals = list(map(lambda x: x(i), (add, square))) print(vals) \u6211\u4eec\u904d\u5386 for \u5faa\u73af\u4e2d\u7684\u5143\u7d20\u3002 \u5728\u6bcf\u4e2a\u5faa\u73af\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e24\u4e2a\u503c\u7684\u5217\u8868\uff0c\u8fd9\u4e9b\u503c\u662f\u901a\u8fc7\u5bf9\u503c\u5e94\u7528 add() \u548c square() \u51fd\u6570\u6765\u8ba1\u7b97\u7684\u3002 1 2 3 4 5 6 $ ./python_map_multiple_funcs.py [2, 1] [4, 4] [6, 9] [8, 16] [10, 25] \u7b2c\u4e00\u4e2a\u503c\u901a\u8fc7\u52a0\u6cd5\u5f62\u6210\uff0c\u7b2c\u4e8c\u4e2a\u503c\u901a\u8fc7\u4e58\u6cd5\u5f62\u6210\u3002 Python \u5217\u8868\u63a8\u5bfc\u5f0f \u00b6 Python map() \u7684\u529f\u80fd\u4e5f\u53ef\u4ee5\u901a\u8fc7 Python \u5217\u8868\u63a8\u5bfc\u5f0f\u6765\u5b9e\u73b0\u3002 python_list_comprehension.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/python3 def square(x): return x * x nums = [1, 2, 3, 4, 5] nums_squared = [square(num) for num in nums] for num in nums_squared: print(num) \u8be5\u793a\u4f8b\u4f7f\u7528 Python \u5217\u8868\u63a8\u5bfc\u5f0f\u4ece\u6574\u6570\u5217\u8868\u521b\u5efa\u5e73\u65b9\u503c\u5217\u8868\u3002","title":"Python \u6620\u5c04"},{"location":"pages/python/pytutorial/python-map/#Python-\u6620\u5c04","text":"Python \u6620\u5c04 \u6559\u7a0b\u4ecb\u7ecd\u4e86 Python \u5185\u7f6e\u7684 map() \u51fd\u6570\u3002","title":"Python \u6620\u5c04"},{"location":"pages/python/pytutorial/python-map/#Python-map\u51fd\u6570","text":"Python map() \u5185\u7f6e\u51fd\u6570\u5c06\u7ed9\u5b9a\u51fd\u6570\u5e94\u7528\u4e8e\u53ef\u8fed\u4ee3\u7684\u6bcf\u4e00\u9879\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\u5bf9\u8c61\u3002 1 map(function, iterable, ...) \u53ef\u4ee5\u5c06\u591a\u4e2a\u8fed\u4ee3\u4f20\u9012\u7ed9 map() \u51fd\u6570\u3002 \u8be5\u51fd\u6570\u5fc5\u987b\u91c7\u7528\u4e0e\u53ef\u8fed\u4ee3\u9879\u4e00\u6837\u591a\u7684\u53c2\u6570\u3002","title":"Python map()\u51fd\u6570"},{"location":"pages/python/pytutorial/python-map/#Python-\u6620\u5c04\u793a\u4f8b","text":"\u4ee5\u4e0b\u793a\u4f8b\u5728\u6574\u6570\u5217\u8868\u4e0a\u4f7f\u7528 Python map() \u3002 python_map.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/python3 def square(x): return x * x nums = [1, 2, 3, 4, 5] nums_squared = map(square, nums) for num in nums_squared: print(num) \u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u6574\u6570\u5217\u8868\uff0c\u5e76\u4f7f\u7528 map() \u5728\u5217\u8868\u7684\u6bcf\u4e2a\u5143\u7d20\u4e0a\u5e94\u7528 square() \u51fd\u6570\u3002 1 2 3 def square(x): return x * x square() \u51fd\u6570\u5e73\u65b9\u5176\u53c2\u6570\u3002 1 nums = [1, 2, 3, 4, 5] \u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u6574\u6570\u5217\u8868\u3002 1 nums_squared = map(square, nums) map() \u529f\u80fd\u5c06 square() \u529f\u80fd\u5e94\u7528\u4e8e nums \u5217\u8868\u7684\u6bcf\u4e2a\u5143\u7d20\u3002 1 2 3 for num in nums_squared: print(num) \u6211\u4eec\u904d\u5386\u8fd4\u56de\u7684 iterable \u5e76\u6253\u5370\u5143\u7d20\u3002 1 2 3 4 5 6 $ ./python_map.py 1 4 9 16 25 \u8fd9\u662f\u8f93\u51fa\u3002","title":"Python \u6620\u5c04\u793a\u4f8b"},{"location":"pages/python/pytutorial/python-map/#\u7b49\u6548\u7684-Python-\u6620\u5c04","text":"\u4ee5\u4e0b\u793a\u4f8b\u663e\u793a\u4e86\u4e0e Python 3 map() \u51fd\u6570\u7b49\u6548\u7684\u81ea\u5b9a\u4e49\u3002 mymap_fun.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/usr/bin/python3 def square(x): return x * x def mymap(func, iterable): for i in iterable: yield func(i) nums = [1, 2, 3, 4, 5] nums_squared = mymap(square, nums) for num in nums_squared: print(num) mymap() \u4e0e Python 3 map() \u505a\u76f8\u540c\u7684\u4e8b\u60c5\u3002","title":"\u7b49\u6548\u7684 Python \u6620\u5c04"},{"location":"pages/python/pytutorial/python-map/#\u5e26-lambda-\u7684-Python-\u6620\u5c04","text":"\u4e0b\u4e00\u4e2a\u793a\u4f8b\u4f7f\u7528 lambda \u8fd0\u7b97\u7b26\u5728 map() \u5185\u90e8\u521b\u5efa\u4e00\u4e2a\u533f\u540d\u51fd\u6570\u3002 python_map_lambda.py 1 2 3 4 5 6 7 8 #!/usr/bin/python3 nums = [1, 2, 3, 4, 5] nums_squared = map(lambda x: x*x, nums) for num in nums_squared: print(num) \u8be5\u4ee3\u7801\u793a\u4f8b\u5c06\u5217\u8868\u5143\u7d20\u4e0e map() \u5e73\u65b9\u5728\u4e00\u8d77\uff0c\u5e76\u5c06\u533f\u540d\u51fd\u6570\u4e0e lambda \u521b\u5efa\u3002","title":"\u5e26 lambda \u7684 Python \u6620\u5c04"},{"location":"pages/python/pytutorial/python-map/#\u5177\u6709\u591a\u4e2a\u53ef\u8fed\u4ee3\u9879\u7684-Python-\u6620\u5c04","text":"\u524d\u9762\u5df2\u7ecf\u63d0\u5230\u8fc7\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u591a\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4f20\u9012\u7ed9 map() \u3002 python_map_iterables.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/python3 def multiply(x, y): return x * y nums1 = [1, 2, 3, 4, 5] nums2 = [6, 7, 8, 9, 10] mult = map(multiply, nums1, nums2) for num in mult: print(num) \u5728\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6709\u4e24\u4e2a\u6301\u6709\u6574\u6570\u7684\u53ef\u8fed\u4ee3\u5bf9\u8c61\u3002 \u6765\u81ea\u4e24\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u503c\u76f8\u4e58\u3002 1 2 3 def multiply(x, y): return x * y \u8be5\u51fd\u6570\u5fc5\u987b\u5e26\u6709\u4e24\u4e2a\u53c2\u6570\uff0c\u56e0\u4e3a\u6709\u4e24\u4e2a\u53ef\u8fed\u4ee3\u53d8\u91cf\u4f20\u9012\u7ed9 map() \u3002 1 2 3 4 5 6 $ ./python_map_iterables.py 6 14 24 36 50 \u8fd9\u662f\u8f93\u51fa\u3002","title":"\u5177\u6709\u591a\u4e2a\u53ef\u8fed\u4ee3\u9879\u7684 Python \u6620\u5c04"},{"location":"pages/python/pytutorial/python-map/#Python-\u6620\u5c04\u591a\u4e2a\u51fd\u6570","text":"\u5728\u4e0b\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u663e\u793a\u5982\u4f55\u5728 Python map() \u4e2d\u4f7f\u7528\u591a\u4e2a\u51fd\u6570\u3002 python_map_multiple_funcs.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/python3 def add(x): return x + x def square(x): return x * x nums = [1, 2, 3, 4, 5] for i in nums: vals = list(map(lambda x: x(i), (add, square))) print(vals) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06 add() \u548c square() \u51fd\u6570\u5e94\u7528\u4e8e\u6574\u6570\u503c\u5217\u8868\u3002 1 2 3 4 5 for i in nums: vals = list(map(lambda x: x(i), (add, square))) print(vals) \u6211\u4eec\u904d\u5386 for \u5faa\u73af\u4e2d\u7684\u5143\u7d20\u3002 \u5728\u6bcf\u4e2a\u5faa\u73af\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e24\u4e2a\u503c\u7684\u5217\u8868\uff0c\u8fd9\u4e9b\u503c\u662f\u901a\u8fc7\u5bf9\u503c\u5e94\u7528 add() \u548c square() \u51fd\u6570\u6765\u8ba1\u7b97\u7684\u3002 1 2 3 4 5 6 $ ./python_map_multiple_funcs.py [2, 1] [4, 4] [6, 9] [8, 16] [10, 25] \u7b2c\u4e00\u4e2a\u503c\u901a\u8fc7\u52a0\u6cd5\u5f62\u6210\uff0c\u7b2c\u4e8c\u4e2a\u503c\u901a\u8fc7\u4e58\u6cd5\u5f62\u6210\u3002","title":"Python \u6620\u5c04\u591a\u4e2a\u51fd\u6570"},{"location":"pages/python/pytutorial/python-map/#Python-\u5217\u8868\u63a8\u5bfc\u5f0f","text":"Python map() \u7684\u529f\u80fd\u4e5f\u53ef\u4ee5\u901a\u8fc7 Python \u5217\u8868\u63a8\u5bfc\u5f0f\u6765\u5b9e\u73b0\u3002 python_list_comprehension.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/python3 def square(x): return x * x nums = [1, 2, 3, 4, 5] nums_squared = [square(num) for num in nums] for num in nums_squared: print(num) \u8be5\u793a\u4f8b\u4f7f\u7528 Python \u5217\u8868\u63a8\u5bfc\u5f0f\u4ece\u6574\u6570\u5217\u8868\u521b\u5efa\u5e73\u65b9\u503c\u5217\u8868\u3002","title":"Python \u5217\u8868\u63a8\u5bfc\u5f0f"},{"location":"pages/python/pytutorial/python-matplotlib/","text":"Matplotlib \u6559\u7a0b \u00b6 Matplotlib \u6559\u7a0b \u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528 Matplotlib \u5728 Python \u4e2d\u521b\u5efa\u56fe\u8868\u3002 \u6211\u4eec\u521b\u5efa\u6563\u70b9\u56fe\uff0c\u6298\u7ebf\u56fe\uff0c\u6761\u5f62\u56fe\u548c\u997c\u56fe\u3002 Matplotlib \u00b6 Matplotlib \u662f\u7528\u4e8e\u521b\u5efa\u56fe\u8868\u7684 Python \u5e93\u3002 Matplotlib \u53ef\u7528\u4e8e Python \u811a\u672c\uff0cPython \u548c IPython shell\uff0cjupyter \u7b14\u8bb0\u672c\uff0cWeb \u5e94\u7528\u670d\u52a1\u5668\u4ee5\u53ca\u56db\u4e2a\u56fe\u5f62\u7528\u6237\u754c\u9762\u5de5\u5177\u5305\u3002 Matplotlib \u5b89\u88c5 \u00b6 Matplotlib \u662f\u9700\u8981\u5b89\u88c5\u7684\u5916\u90e8 Python \u5e93\u3002 1 $ sudo pip install matplotlib \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 pip \u5de5\u5177\u5b89\u88c5\u8be5\u5e93\u3002 Matplotlib \u6563\u70b9\u56fe \u00b6 \u6563\u70b9\u56fe\u662f\u4e00\u79cd\u56fe\u5f62\u6216\u6570\u5b66\u56fe\uff0c\u4f7f\u7528\u7b1b\u5361\u5c14\u5750\u6807\u663e\u793a\u4e00\u7ec4\u6570\u636e\u7684\u4e24\u4e2a\u53d8\u91cf\u7684\u503c\u3002 scatter.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/python3 import matplotlib.pyplot as plt x_axis = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] y_axis = [5, 16, 34, 56, 32, 56, 32, 12, 76, 89] plt.title(\"Prices over 10 years\") plt.scatter(x_axis, y_axis, color='darkblue', marker='x', label=\"item 1\") plt.xlabel(\"Time (years)\") plt.ylabel(\"Price (dollars)\") plt.grid(True) plt.legend() plt.show() \u8be5\u793a\u4f8b\u7ed8\u5236\u4e86\u4e00\u4e2a\u6563\u70b9\u56fe\u3002 \u8be5\u56fe\u8868\u663e\u793a\u4e86\u5341\u5e74\u5185\u67d0\u4e9b\u5546\u54c1\u7684\u4ef7\u683c\u3002 1 import matplotlib.pyplot as plt \u6211\u4eec\u4ece matplotlib \u6a21\u5757\u5bfc\u5165 pyplot \u3002 \u5b83\u662f\u521b\u5efa\u56fe\u8868\u7684\u547d\u4ee4\u6837\u5f0f\u51fd\u6570\u7684\u96c6\u5408\u3002 \u5b83\u7684\u64cd\u4f5c\u4e0e MATLAB \u7c7b\u4f3c\u3002 1 2 x_axis = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] y_axis = [5, 16, 34, 56, 32, 56, 32, 12, 76, 89] \u6211\u4eec\u6709 x \u548c y \u8f74\u7684\u6570\u636e\u3002 1 plt.title(\"Prices over 10 years\") \u901a\u8fc7 title() \u529f\u80fd\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3a\u56fe\u8868\u8bbe\u7f6e\u6807\u9898\u3002 1 plt.scatter(x_axis, y_axis, color='darkblue', marker='x', label=\"item 1\") scatter() \u529f\u80fd\u7ed8\u5236\u6563\u70b9\u56fe\u3002 \u5b83\u63a5\u53d7 x \u548c y \u8f74\uff0c\u6807\u8bb0\u7684\u989c\u8272\uff0c\u6807\u8bb0\u7684\u5f62\u72b6\u548c\u6807\u7b7e\u7684\u6570\u636e\u3002 1 2 plt.xlabel(\"Time (years)\") plt.ylabel(\"Price (dollars)\") \u6211\u4eec\u4e3a\u8f74\u8bbe\u7f6e\u6807\u7b7e\u3002 1 plt.grid(True) \u6211\u4eec\u7528 grid() \u529f\u80fd\u663e\u793a\u7f51\u683c\u3002 \u7f51\u683c\u7531\u8bb8\u591a\u5782\u76f4\u548c\u6c34\u5e73\u7ebf\u7ec4\u6210\u3002 1 plt.legend() legend() \u529f\u80fd\u5728\u8f74\u4e0a\u653e\u7f6e\u56fe\u4f8b\u3002 1 plt.show() show() \u529f\u80fd\u663e\u793a\u56fe\u8868\u3002 \u4e24\u4e2a\u6570\u636e\u96c6 \u00b6 \u5728\u4e0b\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u53e6\u4e00\u4e2a\u6570\u636e\u96c6\u6dfb\u52a0\u5230\u56fe\u8868\u3002 scatter2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #!/usr/bin/python3 import matplotlib.pyplot as plt x_axis1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] y_axis1 = [5, 16, 34, 56, 32, 56, 32, 12, 76, 89] x_axis2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] y_axis2 = [53, 6, 46, 36, 15, 64, 73, 25, 82, 9] plt.title(\"Prices over 10 years\") plt.scatter(x_axis1, y_axis1, color='darkblue', marker='x', label=\"item 1\") plt.scatter(x_axis2, y_axis2, color='darkred', marker='x', label=\"item 2\") plt.xlabel(\"Time (years)\") plt.ylabel(\"Price (dollars)\") plt.grid(True) plt.legend() plt.show() \u8be5\u56fe\u8868\u663e\u793a\u4e24\u4e2a\u6570\u636e\u96c6\u3002 \u6211\u4eec\u901a\u8fc7\u6807\u8bb0\u7684\u989c\u8272\u6765\u533a\u5206\u5b83\u4eec\u3002 1 2 3 4 5 x_axis1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] y_axis1 = [5, 16, 34, 56, 32, 56, 32, 12, 76, 89] x_axis2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] y_axis2 = [53, 6, 46, 36, 15, 64, 73, 25, 82, 9] \u6211\u4eec\u6709\u4e24\u4e2a\u6570\u636e\u96c6\u3002 1 2 plt.scatter(x_axis1, y_axis1, color='darkblue', marker='x', label=\"item 1\") plt.scatter(x_axis2, y_axis2, color='darkred', marker='x', label=\"item 2\") \u6211\u4eec\u4e3a\u6bcf\u4e2a\u96c6\u5408\u8c03\u7528 scatter() \u51fd\u6570\u3002 Matplotlib \u6298\u7ebf\u56fe \u00b6 \u6298\u7ebf\u56fe\u662f\u4e00\u79cd\u663e\u793a\u56fe\u8868\u7684\u56fe\u8868\uff0c\u8be5\u4fe1\u606f\u663e\u793a\u4e3a\u4e00\u7cfb\u5217\u6570\u636e\u70b9\uff0c\u8fd9\u4e9b\u6570\u636e\u70b9\u901a\u8fc7\u76f4\u7ebf\u6bb5\u76f8\u8fde\uff0c\u79f0\u4e3a\u6807\u8bb0\u3002 linechart.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/python3 import numpy as np import matplotlib.pyplot as plt t = np.arange(0.0, 3.0, 0.01) s = np.sin(2.5 * np.pi * t) plt.plot(t, s) plt.xlabel('time (s)') plt.ylabel('voltage (mV)') plt.title('Sine Wave') plt.grid(True) plt.show() \u8be5\u793a\u4f8b\u663e\u793a\u6b63\u5f26\u6ce2\u6298\u7ebf\u56fe\u3002 1 import numpy as np \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u8fd8\u9700\u8981 numpy \u6a21\u5757\u3002 1 t = np.arange(0.0, 3.0, 0.01) arange() \u51fd\u6570\u8fd4\u56de\u7ed9\u5b9a\u95f4\u9694\u5185\u7684\u5747\u5300\u95f4\u9694\u7684\u503c\u5217\u8868\u3002 1 s = np.sin(2.5 * np.pi * t) \u6211\u4eec\u83b7\u5f97\u6570\u636e\u7684 sin() \u503c\u3002 1 plt.plot(t, s) \u6211\u4eec\u4f7f\u7528 plot() \u529f\u80fd\u7ed8\u5236\u6298\u7ebf\u56fe\u3002 Matplotlib \u6761\u5f62\u56fe \u00b6 \u6761\u5f62\u56fe\u663e\u793a\u5e26\u6709\u77e9\u5f62\u6761\u7684\u5206\u7ec4\u6570\u636e\uff0c\u5176\u957f\u5ea6\u4e0e\u5b83\u4eec\u4ee3\u8868\u7684\u503c\u6210\u6bd4\u4f8b\u3002 \u6761\u5f62\u56fe\u53ef\u4ee5\u5782\u76f4\u6216\u6c34\u5e73\u7ed8\u5236\u3002 barchart.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #!/usr/bin/python3 from matplotlib import pyplot as plt from matplotlib import style style.use('ggplot') x = [0, 1, 2, 3, 4, 5] y = [46, 38, 29, 22, 13, 11] fig, ax = plt.subplots() ax.bar(x, y, align='center') ax.set_title('Olympic Gold medals in London') ax.set_ylabel('Gold medals') ax.set_xlabel('Countries') ax.set_xticks(x) ax.set_xticklabels((\"USA\", \"China\", \"UK\", \"Russia\", \"South Korea\", \"Germany\")) plt.show() \u8be5\u793a\u4f8b\u7ed8\u5236\u4e86\u6761\u5f62\u56fe\u3002 \u5b83\u663e\u793a\u4e86 2012 \u5e74\u4f26\u6566\u6bcf\u4e2a\u56fd\u5bb6/\u5730\u533a\u7684\u5965\u8fd0\u91d1\u724c\u6570\u91cf\u3002 1 style.use('ggplot') \u53ef\u4ee5\u4f7f\u7528\u9884\u5b9a\u4e49\u7684\u6837\u5f0f\u3002 1 fig, ax = plt.subplots() subplots() \u51fd\u6570\u8fd4\u56de\u56fe\u5f62\u548c\u8f74\u5bf9\u8c61\u3002 1 ax.bar(x, y, align='center') \u4f7f\u7528 bar() \u529f\u80fd\u751f\u6210\u6761\u5f62\u56fe\u3002 1 2 3 ax.set_xticks(x) ax.set_xticklabels((\"USA\", \"China\", \"UK\", \"Russia\", \"South Korea\", \"Germany\")) \u6211\u4eec\u4e3a x \u8f74\u8bbe\u7f6e\u56fd\u5bb6/\u5730\u533a\u540d\u79f0\u3002 Matplotlib \u997c\u56fe \u00b6 \u997c\u56fe\u662f\u5706\u5f62\u56fe\uff0c\u5c06\u5176\u5206\u6210\u591a\u4e2a\u5207\u7247\u4ee5\u8bf4\u660e\u6570\u503c\u6bd4\u4f8b\u3002 piechart.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/python3 import matplotlib.pyplot as plt labels = ['Oranges', 'Pears', 'Plums', 'Blueberries'] quantity = [38, 45, 24, 10] colors = ['yellowgreen', 'gold', 'lightskyblue', 'lightcoral'] plt.pie(quantity, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=90) plt.axis('equal') plt.show() \u8be5\u793a\u4f8b\u521b\u5efa\u4e00\u4e2a\u997c\u56fe\u3002 1 2 labels = ['Oranges', 'Pears', 'Plums', 'Blueberries'] quantity = [38, 45, 24, 10] \u6211\u4eec\u6709\u6807\u7b7e\u548c\u76f8\u5e94\u7684\u6570\u91cf\u3002 1 colors = ['yellowgreen', 'gold', 'lightskyblue', 'lightcoral'] \u6211\u4eec\u4e3a\u997c\u56fe\u7684\u5207\u7247\u5b9a\u4e49\u989c\u8272\u3002 1 2 plt.pie(quantity, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=90) \u997c\u56fe\u662f\u901a\u8fc7 pie() \u529f\u80fd\u751f\u6210\u7684\u3002 autopct \u8d1f\u8d23\u5728\u56fe\u8868\u7684\u6954\u5f62\u56fe\u4e2d\u663e\u793a\u767e\u5206\u6bd4\u3002 1 plt.axis('equal') \u6211\u4eec\u8bbe\u7f6e\u4e86\u76f8\u7b49\u7684\u957f\u5bbd\u6bd4\uff0c\u4ee5\u4fbf\u5c06\u997c\u56fe\u7ed8\u5236\u4e3a\u5706\u5f62\u3002 \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 Matplotlib \u5e93\u521b\u5efa\u4e86\u6563\u70b9\u56fe\uff0c\u6298\u7ebf\u56fe\uff0c\u6761\u5f62\u56fe\u548c\u997c\u56fe\u3002","title":"Matplotlib \u6559\u7a0b"},{"location":"pages/python/pytutorial/python-matplotlib/#Matplotlib-\u6559\u7a0b","text":"Matplotlib \u6559\u7a0b \u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528 Matplotlib \u5728 Python \u4e2d\u521b\u5efa\u56fe\u8868\u3002 \u6211\u4eec\u521b\u5efa\u6563\u70b9\u56fe\uff0c\u6298\u7ebf\u56fe\uff0c\u6761\u5f62\u56fe\u548c\u997c\u56fe\u3002","title":"Matplotlib \u6559\u7a0b"},{"location":"pages/python/pytutorial/python-matplotlib/#Matplotlib","text":"Matplotlib \u662f\u7528\u4e8e\u521b\u5efa\u56fe\u8868\u7684 Python \u5e93\u3002 Matplotlib \u53ef\u7528\u4e8e Python \u811a\u672c\uff0cPython \u548c IPython shell\uff0cjupyter \u7b14\u8bb0\u672c\uff0cWeb \u5e94\u7528\u670d\u52a1\u5668\u4ee5\u53ca\u56db\u4e2a\u56fe\u5f62\u7528\u6237\u754c\u9762\u5de5\u5177\u5305\u3002","title":"Matplotlib"},{"location":"pages/python/pytutorial/python-matplotlib/#Matplotlib-\u5b89\u88c5","text":"Matplotlib \u662f\u9700\u8981\u5b89\u88c5\u7684\u5916\u90e8 Python \u5e93\u3002 1 $ sudo pip install matplotlib \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 pip \u5de5\u5177\u5b89\u88c5\u8be5\u5e93\u3002","title":"Matplotlib \u5b89\u88c5"},{"location":"pages/python/pytutorial/python-matplotlib/#Matplotlib-\u6563\u70b9\u56fe","text":"\u6563\u70b9\u56fe\u662f\u4e00\u79cd\u56fe\u5f62\u6216\u6570\u5b66\u56fe\uff0c\u4f7f\u7528\u7b1b\u5361\u5c14\u5750\u6807\u663e\u793a\u4e00\u7ec4\u6570\u636e\u7684\u4e24\u4e2a\u53d8\u91cf\u7684\u503c\u3002 scatter.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/python3 import matplotlib.pyplot as plt x_axis = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] y_axis = [5, 16, 34, 56, 32, 56, 32, 12, 76, 89] plt.title(\"Prices over 10 years\") plt.scatter(x_axis, y_axis, color='darkblue', marker='x', label=\"item 1\") plt.xlabel(\"Time (years)\") plt.ylabel(\"Price (dollars)\") plt.grid(True) plt.legend() plt.show() \u8be5\u793a\u4f8b\u7ed8\u5236\u4e86\u4e00\u4e2a\u6563\u70b9\u56fe\u3002 \u8be5\u56fe\u8868\u663e\u793a\u4e86\u5341\u5e74\u5185\u67d0\u4e9b\u5546\u54c1\u7684\u4ef7\u683c\u3002 1 import matplotlib.pyplot as plt \u6211\u4eec\u4ece matplotlib \u6a21\u5757\u5bfc\u5165 pyplot \u3002 \u5b83\u662f\u521b\u5efa\u56fe\u8868\u7684\u547d\u4ee4\u6837\u5f0f\u51fd\u6570\u7684\u96c6\u5408\u3002 \u5b83\u7684\u64cd\u4f5c\u4e0e MATLAB \u7c7b\u4f3c\u3002 1 2 x_axis = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] y_axis = [5, 16, 34, 56, 32, 56, 32, 12, 76, 89] \u6211\u4eec\u6709 x \u548c y \u8f74\u7684\u6570\u636e\u3002 1 plt.title(\"Prices over 10 years\") \u901a\u8fc7 title() \u529f\u80fd\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3a\u56fe\u8868\u8bbe\u7f6e\u6807\u9898\u3002 1 plt.scatter(x_axis, y_axis, color='darkblue', marker='x', label=\"item 1\") scatter() \u529f\u80fd\u7ed8\u5236\u6563\u70b9\u56fe\u3002 \u5b83\u63a5\u53d7 x \u548c y \u8f74\uff0c\u6807\u8bb0\u7684\u989c\u8272\uff0c\u6807\u8bb0\u7684\u5f62\u72b6\u548c\u6807\u7b7e\u7684\u6570\u636e\u3002 1 2 plt.xlabel(\"Time (years)\") plt.ylabel(\"Price (dollars)\") \u6211\u4eec\u4e3a\u8f74\u8bbe\u7f6e\u6807\u7b7e\u3002 1 plt.grid(True) \u6211\u4eec\u7528 grid() \u529f\u80fd\u663e\u793a\u7f51\u683c\u3002 \u7f51\u683c\u7531\u8bb8\u591a\u5782\u76f4\u548c\u6c34\u5e73\u7ebf\u7ec4\u6210\u3002 1 plt.legend() legend() \u529f\u80fd\u5728\u8f74\u4e0a\u653e\u7f6e\u56fe\u4f8b\u3002 1 plt.show() show() \u529f\u80fd\u663e\u793a\u56fe\u8868\u3002","title":"Matplotlib \u6563\u70b9\u56fe"},{"location":"pages/python/pytutorial/python-matplotlib/#\u4e24\u4e2a\u6570\u636e\u96c6","text":"\u5728\u4e0b\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u53e6\u4e00\u4e2a\u6570\u636e\u96c6\u6dfb\u52a0\u5230\u56fe\u8868\u3002 scatter2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #!/usr/bin/python3 import matplotlib.pyplot as plt x_axis1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] y_axis1 = [5, 16, 34, 56, 32, 56, 32, 12, 76, 89] x_axis2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] y_axis2 = [53, 6, 46, 36, 15, 64, 73, 25, 82, 9] plt.title(\"Prices over 10 years\") plt.scatter(x_axis1, y_axis1, color='darkblue', marker='x', label=\"item 1\") plt.scatter(x_axis2, y_axis2, color='darkred', marker='x', label=\"item 2\") plt.xlabel(\"Time (years)\") plt.ylabel(\"Price (dollars)\") plt.grid(True) plt.legend() plt.show() \u8be5\u56fe\u8868\u663e\u793a\u4e24\u4e2a\u6570\u636e\u96c6\u3002 \u6211\u4eec\u901a\u8fc7\u6807\u8bb0\u7684\u989c\u8272\u6765\u533a\u5206\u5b83\u4eec\u3002 1 2 3 4 5 x_axis1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] y_axis1 = [5, 16, 34, 56, 32, 56, 32, 12, 76, 89] x_axis2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] y_axis2 = [53, 6, 46, 36, 15, 64, 73, 25, 82, 9] \u6211\u4eec\u6709\u4e24\u4e2a\u6570\u636e\u96c6\u3002 1 2 plt.scatter(x_axis1, y_axis1, color='darkblue', marker='x', label=\"item 1\") plt.scatter(x_axis2, y_axis2, color='darkred', marker='x', label=\"item 2\") \u6211\u4eec\u4e3a\u6bcf\u4e2a\u96c6\u5408\u8c03\u7528 scatter() \u51fd\u6570\u3002","title":"\u4e24\u4e2a\u6570\u636e\u96c6"},{"location":"pages/python/pytutorial/python-matplotlib/#Matplotlib-\u6298\u7ebf\u56fe","text":"\u6298\u7ebf\u56fe\u662f\u4e00\u79cd\u663e\u793a\u56fe\u8868\u7684\u56fe\u8868\uff0c\u8be5\u4fe1\u606f\u663e\u793a\u4e3a\u4e00\u7cfb\u5217\u6570\u636e\u70b9\uff0c\u8fd9\u4e9b\u6570\u636e\u70b9\u901a\u8fc7\u76f4\u7ebf\u6bb5\u76f8\u8fde\uff0c\u79f0\u4e3a\u6807\u8bb0\u3002 linechart.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/python3 import numpy as np import matplotlib.pyplot as plt t = np.arange(0.0, 3.0, 0.01) s = np.sin(2.5 * np.pi * t) plt.plot(t, s) plt.xlabel('time (s)') plt.ylabel('voltage (mV)') plt.title('Sine Wave') plt.grid(True) plt.show() \u8be5\u793a\u4f8b\u663e\u793a\u6b63\u5f26\u6ce2\u6298\u7ebf\u56fe\u3002 1 import numpy as np \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u8fd8\u9700\u8981 numpy \u6a21\u5757\u3002 1 t = np.arange(0.0, 3.0, 0.01) arange() \u51fd\u6570\u8fd4\u56de\u7ed9\u5b9a\u95f4\u9694\u5185\u7684\u5747\u5300\u95f4\u9694\u7684\u503c\u5217\u8868\u3002 1 s = np.sin(2.5 * np.pi * t) \u6211\u4eec\u83b7\u5f97\u6570\u636e\u7684 sin() \u503c\u3002 1 plt.plot(t, s) \u6211\u4eec\u4f7f\u7528 plot() \u529f\u80fd\u7ed8\u5236\u6298\u7ebf\u56fe\u3002","title":"Matplotlib \u6298\u7ebf\u56fe"},{"location":"pages/python/pytutorial/python-matplotlib/#Matplotlib-\u6761\u5f62\u56fe","text":"\u6761\u5f62\u56fe\u663e\u793a\u5e26\u6709\u77e9\u5f62\u6761\u7684\u5206\u7ec4\u6570\u636e\uff0c\u5176\u957f\u5ea6\u4e0e\u5b83\u4eec\u4ee3\u8868\u7684\u503c\u6210\u6bd4\u4f8b\u3002 \u6761\u5f62\u56fe\u53ef\u4ee5\u5782\u76f4\u6216\u6c34\u5e73\u7ed8\u5236\u3002 barchart.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #!/usr/bin/python3 from matplotlib import pyplot as plt from matplotlib import style style.use('ggplot') x = [0, 1, 2, 3, 4, 5] y = [46, 38, 29, 22, 13, 11] fig, ax = plt.subplots() ax.bar(x, y, align='center') ax.set_title('Olympic Gold medals in London') ax.set_ylabel('Gold medals') ax.set_xlabel('Countries') ax.set_xticks(x) ax.set_xticklabels((\"USA\", \"China\", \"UK\", \"Russia\", \"South Korea\", \"Germany\")) plt.show() \u8be5\u793a\u4f8b\u7ed8\u5236\u4e86\u6761\u5f62\u56fe\u3002 \u5b83\u663e\u793a\u4e86 2012 \u5e74\u4f26\u6566\u6bcf\u4e2a\u56fd\u5bb6/\u5730\u533a\u7684\u5965\u8fd0\u91d1\u724c\u6570\u91cf\u3002 1 style.use('ggplot') \u53ef\u4ee5\u4f7f\u7528\u9884\u5b9a\u4e49\u7684\u6837\u5f0f\u3002 1 fig, ax = plt.subplots() subplots() \u51fd\u6570\u8fd4\u56de\u56fe\u5f62\u548c\u8f74\u5bf9\u8c61\u3002 1 ax.bar(x, y, align='center') \u4f7f\u7528 bar() \u529f\u80fd\u751f\u6210\u6761\u5f62\u56fe\u3002 1 2 3 ax.set_xticks(x) ax.set_xticklabels((\"USA\", \"China\", \"UK\", \"Russia\", \"South Korea\", \"Germany\")) \u6211\u4eec\u4e3a x \u8f74\u8bbe\u7f6e\u56fd\u5bb6/\u5730\u533a\u540d\u79f0\u3002","title":"Matplotlib \u6761\u5f62\u56fe"},{"location":"pages/python/pytutorial/python-matplotlib/#Matplotlib-\u997c\u56fe","text":"\u997c\u56fe\u662f\u5706\u5f62\u56fe\uff0c\u5c06\u5176\u5206\u6210\u591a\u4e2a\u5207\u7247\u4ee5\u8bf4\u660e\u6570\u503c\u6bd4\u4f8b\u3002 piechart.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/python3 import matplotlib.pyplot as plt labels = ['Oranges', 'Pears', 'Plums', 'Blueberries'] quantity = [38, 45, 24, 10] colors = ['yellowgreen', 'gold', 'lightskyblue', 'lightcoral'] plt.pie(quantity, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=90) plt.axis('equal') plt.show() \u8be5\u793a\u4f8b\u521b\u5efa\u4e00\u4e2a\u997c\u56fe\u3002 1 2 labels = ['Oranges', 'Pears', 'Plums', 'Blueberries'] quantity = [38, 45, 24, 10] \u6211\u4eec\u6709\u6807\u7b7e\u548c\u76f8\u5e94\u7684\u6570\u91cf\u3002 1 colors = ['yellowgreen', 'gold', 'lightskyblue', 'lightcoral'] \u6211\u4eec\u4e3a\u997c\u56fe\u7684\u5207\u7247\u5b9a\u4e49\u989c\u8272\u3002 1 2 plt.pie(quantity, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=90) \u997c\u56fe\u662f\u901a\u8fc7 pie() \u529f\u80fd\u751f\u6210\u7684\u3002 autopct \u8d1f\u8d23\u5728\u56fe\u8868\u7684\u6954\u5f62\u56fe\u4e2d\u663e\u793a\u767e\u5206\u6bd4\u3002 1 plt.axis('equal') \u6211\u4eec\u8bbe\u7f6e\u4e86\u76f8\u7b49\u7684\u957f\u5bbd\u6bd4\uff0c\u4ee5\u4fbf\u5c06\u997c\u56fe\u7ed8\u5236\u4e3a\u5706\u5f62\u3002 \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 Matplotlib \u5e93\u521b\u5efa\u4e86\u6563\u70b9\u56fe\uff0c\u6298\u7ebf\u56fe\uff0c\u6761\u5f62\u56fe\u548c\u997c\u56fe\u3002","title":"Matplotlib \u997c\u56fe"},{"location":"pages/python/pytutorial/python-modules/","text":"Python \u6a21\u5757 \u00b6 \u672c\u6587\u4ecb\u7ecd\u5982\u4f55\u521b\u5efa\u548c\u4f7f\u7528 Python \u6a21\u5757\uff0c\u6a21\u5757\u662f\u4e00\u4e2a\u5305\u542b Python \u4ee3\u7801\u7684\u6587\u4ef6\uff0cPython \u6a21\u5757\u5177\u6709 .py \u6269\u5c55\u540d\u3002 \u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u65b9\u6cd5\u7ba1\u7406 Python \u4ee3\u7801\uff1a \u804c\u80fd \u7c7b \u6a21\u7ec4 \u5305\u88c5 Python \u6a21\u5757\u7528\u4e8e\u7ec4\u7ec7 Python \u4ee3\u7801\u3002 \u4f8b\u5982\uff0c\u4e0e\u6570\u636e\u5e93\u76f8\u5173\u7684\u4ee3\u7801\u4f4d\u4e8e\u6570\u636e\u5e93\u6a21\u5757\u5185\u90e8\uff0c\u5b89\u5168\u4ee3\u7801\u4f4d\u4e8e\u5b89\u5168\u6a21\u5757\u4e2d\uff0c\u7b49\u7b49\u3002\u8f83\u5c0f\u7684 Python \u811a\u672c\u53ef\u4ee5\u5177\u6709\u4e00\u4e2a\u6a21\u5757\u3002 \u4f46\u662f\u8f83\u5927\u7684\u7a0b\u5e8f\u5206\u4e3a\u51e0\u4e2a\u6a21\u5757\u3002 \u6a21\u5757\u7ec4\u5408\u5728\u4e00\u8d77\u5f62\u6210\u5305\u88c5\u3002 Python \u6a21\u5757\u540d\u79f0 \u00b6 \u6a21\u5757\u540d\u79f0\u662f\u5e26\u6709 .py \u6269\u5c55\u540d\u7684\u6587\u4ef6\u540d\u3002 \u5f53\u6211\u4eec\u6709\u4e00\u4e2a\u540d\u4e3a empty.py \u7684\u6587\u4ef6\u65f6\uff0c\u6a21\u5757\u540d\u79f0\u4e3a\u7a7a\u3002 __name__ \u662f\u4e00\u4e2a\u53d8\u91cf\uff0c\u5176\u4e2d\u5305\u542b\u8981\u5f15\u7528\u7684\u6a21\u5757\u7684\u540d\u79f0\u3002 \u5f53\u524d\u6a21\u5757\uff0c\u6b63\u5728\u6267\u884c\u7684\u6a21\u5757\uff08\u4e5f\u79f0\u4e3a\u4e3b\u6a21\u5757\uff09\u6709\u4e00\u4e2a\u7279\u6b8a\u540d\u79f0\uff1a '__main__' \u3002 \u4f7f\u7528\u6b64\u540d\u79f0\uff0c\u53ef\u4ee5\u4ece Python \u4ee3\u7801\u4e2d\u5f15\u7528\u5b83\u3002 \u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u4e2d\u6709\u4e24\u4e2a\u6587\u4ef6\uff1a empty.py \u548c test_empty.py \u3002 \u7b2c\u4e8c\u4e2a\u6a21\u5757\u662f\u6267\u884c\u7684\u4e3b\u6a21\u5757\u3002 \u5bfc\u5165\u7b2c\u4e00\u4e2a\u6a21\u5757\u3002 \u4f7f\u7528 import \u5173\u952e\u5b57\u5bfc\u5165\u6a21\u5757\u3002 empty.py 1 2 3 \"\"\" An empty module \"\"\" \u8fd9\u662f empty.py \u6a21\u5757\u3002 test_empty.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python import empty import sys print(__name__) print(empty.__name__) print(sys.__name__) \u5728\u6b64\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5bfc\u5165\u4e24\u4e2a\u6a21\u5757\uff1a\u5185\u7f6e\u6a21\u5757 sys \u548c\u4e00\u4e2a\u81ea\u5b9a\u4e49\u6a21\u5757 empty \u3002 \u6211\u4eec\u5c06\u6a21\u5757\u7684\u540d\u79f0\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 2 3 4 $ ./test_empty.py __main__ empty sys \u6b63\u5728\u6267\u884c\u7684\u6a21\u5757\u7684\u540d\u79f0\u59cb\u7ec8\u4e3a '__main__' \u3002 \u5176\u4ed6\u6a21\u5757\u4ee5\u6587\u4ef6\u540d\u547d\u540d\u3002 \u53ef\u4ee5\u4f7f\u7528 import \u5173\u952e\u5b57\u5c06\u6a21\u5757\u5bfc\u5165\u5176\u4ed6\u6a21\u5757\u3002 Python \u5b9a\u4f4d\u6a21\u5757 \u00b6 \u5bfc\u5165\u6a21\u5757\u65f6\uff0c\u89e3\u91ca\u5668\u9996\u5148\u641c\u7d22\u5177\u6709\u8be5\u540d\u79f0\u7684\u5185\u7f6e\u6a21\u5757\u3002 \u5982\u679c\u627e\u4e0d\u5230\uff0c\u5b83\u5c06\u5728\u53d8\u91cf sys.path \u7ed9\u5b9a\u7684\u76ee\u5f55\u5217\u8868\u4e2d\u641c\u7d22\u3002 sys.path \u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u5217\u8868\uff0c\u7528\u4e8e\u6307\u5b9a\u6a21\u5757\u7684\u641c\u7d22\u8def\u5f84\u3002 \u5b83\u7531\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\uff0c\u5728 PYTHONPATH \u73af\u5883\u53d8\u91cf\u4e2d\u6307\u5b9a\u7684\u76ee\u5f55\u540d\u79f0\u4ee5\u53ca\u4e00\u4e9b\u5176\u4ed6\u4e0e\u5b89\u88c5\u6709\u5173\u7684\u76ee\u5f55\u7ec4\u6210\u3002 \u5982\u679c\u627e\u4e0d\u5230\u8be5\u6a21\u5757\uff0c\u5219\u4f1a\u5f15\u53d1 ImportError \u3002 locating_modules.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python import sys import textwrap sp = sorted(sys.path) dnames = ', '.join(sp) print(textwrap.fill(dnames)) \u8be5\u811a\u672c\u4ece sys.path \u53d8\u91cf\u6253\u5370\u6240\u6709\u76ee\u5f55\u3002 1 import textwrap textwrap \u6a21\u5757\u7528\u4e8e\u8f7b\u677e\u8bbe\u7f6e\u6bb5\u843d\u683c\u5f0f\u3002 1 sp = sorted(sys.path) \u6211\u4eec\u4ece sys.path \u53d8\u91cf\u4e2d\u68c0\u7d22\u76ee\u5f55\u5217\u8868\u5e76\u5bf9\u5b83\u4eec\u8fdb\u884c\u6392\u5e8f\u3002 1 dnames = ', '.join(sp) \u6211\u4eec\u4ece\u5217\u8868\u4e2d\u53d6\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 1 2 3 4 5 6 7 $ ./locating_modules.py /home/janbodnar/.local/lib/python3.5/site-packages, /home/janbodnar/PycharmProjects/Simple, /home/janbodnar/PycharmProjects/Simple, /usr/lib/python3.5, /usr/lib/python3.5/lib-dynload, /usr/lib/python3.5/plat-x86_64-linux- gnu, /usr/lib/python3/dist-packages, /usr/lib/python35.zip, /usr/local/lib/python3.5/dist-packages Python \u5bfc\u5165\u5173\u952e\u5b57 \u00b6 import \u5173\u952e\u5b57\u53ef\u4ee5\u4ee5\u591a\u79cd\u65b9\u5f0f\u4f7f\u7528\u3002 1 from module import * \u6b64\u6784\u9020\u4f1a\u5c06\u6240\u6709 Python \u5b9a\u4e49\u5bfc\u5165\u53e6\u4e00\u4e2a\u6a21\u5757\u7684\u540d\u79f0\u7a7a\u95f4\u3002 \u6709\u4e00\u4e2a\u4f8b\u5916\u3002 \u4e0d\u5bfc\u5165\u4ee5\u4e0b\u5212\u7ebf\u5b57\u7b26 _ \u5f00\u5934\u7684\u5bf9\u8c61\u3002 \u9884\u671f\u5b83\u4eec\u53ea\u80fd\u7531\u5bfc\u5165\u7684\u6a21\u5757\u5728\u5185\u90e8\u4f7f\u7528\u3002 \u4e0d\u5efa\u8bae\u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\u5bfc\u5165\u6a21\u5757\u3002 everything.py 1 2 3 4 5 6 #!/usr/bin/python from math import * print(cos(3)) print(pi) \u6b64\u5bfc\u5165\u6784\u9020\u5df2\u4ece\u5185\u7f6e math \u6a21\u5757\u5bfc\u5165\u4e86\u6240\u6709\u5b9a\u4e49\u3002 \u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528\u6570\u5b66\u51fd\u6570\uff0c\u800c\u65e0\u9700\u5f15\u7528 math \u6a21\u5757\u3002 1 2 3 $ ./everything.py -0.9899924966004454 3.141592653589793 \u4f7f\u7528\u6b64\u5bfc\u5165\u6784\u9020\u53ef\u80fd\u4f1a\u5bfc\u81f4\u540d\u79f0\u7a7a\u95f4\u6c61\u67d3\u3002 \u6211\u4eec\u53ef\u80fd\u6709\u591a\u4e2a\u540c\u540d\u7684\u5bf9\u8c61\uff0c\u5e76\u4e14\u5b83\u4eec\u7684\u5b9a\u4e49\u53ef\u4ee5\u88ab\u8986\u76d6\u3002 pollution.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python from math import * pi = 3.14 print(cos(3)) print(pi) \u8be5\u793a\u4f8b\u5c06\u5728\u63a7\u5236\u53f0\u4e0a\u6253\u5370 3.14\u3002 \u8fd9\u53ef\u80fd\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u7684\u3002 \u5728\u5927\u578b\u9879\u76ee\u4e2d\uff0c\u547d\u540d\u7a7a\u95f4\u6c61\u67d3\u53ef\u80fd\u53d8\u5f97\u81f3\u5173\u91cd\u8981\u3002 \u672a\u5bfc\u5165\u7684 Python \u5bf9\u8c61 \u00b6 \u4ee5\u4e0b\u793a\u4f8b\u663e\u793a\u4e86\u672a\u4f7f\u7528\u6b64 import \u6784\u9020\u5bfc\u5165\u7684\u5b9a\u4e49\u3002 names.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/usr/bin/env python \"\"\" names is a test module \"\"\" _version = 1.0 names = [\"Paul\", \"Frank\", \"Jessica\", \"Thomas\", \"Katherine\"] def show_names(): for i in names: print(i) def _show_version(): print(_version) \u8fd9\u662f names.py \u6a21\u5757\u3002 test_names.py 1 2 3 4 5 6 7 #!/usr/bin/env python from names import * print(locals()) show_names() _version \u53d8\u91cf\u548c _show_version() \u529f\u80fd\u672a\u5bfc\u5165\u5230 test_names \u6a21\u5757\u4e2d\u3002 \u6211\u4eec\u5728\u547d\u540d\u7a7a\u95f4\u4e2d\u770b\u4e0d\u5230\u5b83\u4eec\u3002 locals() \u51fd\u6570\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u6a21\u5757\u4e2d\u6240\u6709\u53ef\u7528\u7684\u5b9a\u4e49\u3002 \u5bfc\u5165\u7279\u5b9a\u5bf9\u8c61 \u00b6 \u4f7f\u7528 from \u548c import \u5173\u952e\u5b57\uff0c\u53ef\u4ee5\u4ec5\u5bfc\u5165\u67d0\u4e9b\u5bf9\u8c61\u3002 1 from module import fun, var \u6b64\u5bfc\u5165\u6784\u9020\u4ec5\u4ece\u6a21\u5757\u5bfc\u5165\u7279\u5b9a\u5bf9\u8c61\u3002 \u8fd9\u6837\uff0c\u6211\u4eec\u4ec5\u5bfc\u5165\u6211\u4eec\u9700\u8981\u7684\u5b9a\u4e49\u3002 import_specific.py 1 2 3 4 5 6 #!/usr/bin/python from math import sin, pi print(sin(3)) print(pi) \u6211\u4eec\u4ece math \u6a21\u5757\u5bfc\u5165\u4e24\u4e2a\u5bf9\u8c61\u3002 \u6211\u4eec\u65e0\u6cd5\u5f15\u7528\u5176\u4ed6\u5b9a\u4e49\uff08\u4f8b\u5982 cos \u51fd\u6570\uff09\u3002 imnames.py 1 2 3 4 5 6 #!/usr/bin/python from names import _version, _show_version print(_version) _show_version() \u6211\u4eec\u4e5f\u53ef\u4ee5\u5bfc\u5165\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u5b9a\u4e49\u3002 \u4f46\u8fd9\u662f\u4e00\u4e2a\u4e0d\u597d\u7684\u505a\u6cd5\u3002 1 2 3 $ ./imnames.py 1.0 1.0 Python \u5bfc\u5165\u6a21\u5757 \u00b6 \u6700\u540e\u4e00\u79cd\u6784\u9020\u4f7f\u7528\u6700\u5e7f\u6cdb\u3002 1 import module \u5b83\u9632\u6b62\u540d\u79f0\u7a7a\u95f4\u6c61\u67d3\uff0c\u5e76\u5141\u8bb8\u4ece\u6a21\u5757\u8bbf\u95ee\u6240\u6709\u5b9a\u4e49\u3002 impmod.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python import math pi = 3.14 print(math.cos(3)) print(math.pi) print(math.sin(3)) print(pi) \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u901a\u8fc7\u6a21\u5757\u540d\u79f0\u5f15\u7528\u5b9a\u4e49\u3002 \u5982\u6211\u4eec\u6240\u89c1\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e24\u4e2a pi \u53d8\u91cf\u3002 \u6211\u4eec\u7684\u5b9a\u4e49\u6765\u81ea math \u6a21\u5757\u3002 1 2 3 4 5 $ ./impmod.py -0.9899924966004454 3.141592653589793 0.1411200080598672 3.14 Python \u522b\u540d\u6a21\u5757 \u00b6 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 as \u5173\u952e\u5b57\u4e3a\u6a21\u5757\u521b\u5efa\u522b\u540d\u3002 importas.py 1 2 3 4 5 6 7 8 #!/usr/bin/python # importas.py import math as m print(m.pi) print(m.cos(3)) \u6211\u4eec\u53ef\u4ee5\u66f4\u6539\u5f15\u7528\u6a21\u5757\u7684\u540d\u79f0\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u4f7f\u7528 as \u5173\u952e\u5b57\u3002 1 2 3 $ ./importas.py 3.14159265359 -0.9899924966 ImportError \u00b6 \u5982\u679c\u65e0\u6cd5\u5bfc\u5165\u6a21\u5757\uff0c\u5219\u4f1a\u5f15\u53d1 ImportError \u3002 importerror.py 1 2 3 4 5 6 #!/usr/bin/env python try: import empty2 except ImportError as e: print('Failed to import:', e) \u6211\u4eec\u5c1a\u672a\u521b\u5efa empty2 \u6a21\u5757\u3002 \u56e0\u6b64\u5f15\u53d1\u4e86\u5f02\u5e38\u3002 1 2 $ ./importerror.py Failed to import: No module named empty2 \u6267\u884c Python \u6a21\u5757 \u00b6 \u6a21\u5757\u53ef\u4ee5\u5bfc\u5165\u5176\u4ed6\u6a21\u5757\uff0c\u4e5f\u53ef\u4ee5\u6267\u884c\u3002 \u6a21\u5757\u4f5c\u8005\u7ecf\u5e38\u521b\u5efa\u6d4b\u8bd5\u5957\u4ef6\u6765\u6d4b\u8bd5\u6a21\u5757\u3002 \u4ec5\u5f53\u6a21\u5757\u4f5c\u4e3a\u811a\u672c\u6267\u884c\u65f6\uff0c __name__ \u5c5e\u6027\u7b49\u4e8e '__main__' \u3002 \u6211\u4eec\u5c06\u5728\u6590\u6ce2\u90a3\u5951\u6a21\u5757\u4e0a\u5bf9\u6b64\u8fdb\u884c\u6f14\u793a\u3002 \u6590\u6ce2\u90a3\u5951\u6570\u662f\u4e00\u4e2a\u6570\u5b57\u5e8f\u5217\uff0c\u5176\u4e2d\u6bcf\u4e2a\u6570\u5b57\u90fd\u662f\u5176\u4e24\u4e2a\u76f4\u63a5\u524d\u8f88\u7684\u603b\u548c\u3002 fibonacci.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #!/usr/bin/env python \"\"\" A module containing the fibonacci function. \"\"\" def fib(n): a, b = 0, 1 while b < n: print(b, end=\" \") (a, b) = (b, a + b) # testing if __name__ == '__main__': fib(500) \u901a\u5e38\u53ef\u4ee5\u7167\u5e38\u5bfc\u5165\u8be5\u6a21\u5757\u3002 \u8be5\u6a21\u5757\u4e5f\u53ef\u4ee5\u6267\u884c\u3002 1 2 $ ./fibonacci.py 1 1 2 3 5 8 13 21 34 55 89 144 233 377 \u5982\u679c\u786e\u5b9e\u5bfc\u5165\u4e86 fibonacci \u6a21\u5757\uff0c\u5219\u4e0d\u4f1a\u81ea\u52a8\u6267\u884c\u6d4b\u8bd5\u3002 1 2 3 >>> import fibonacci as fib >>> fib.fib(500) 1 1 2 3 5 8 13 21 34 55 89 144 233 377 \u5bfc\u5165\u4e86 fibonacci \u6a21\u5757\uff0c\u5e76\u6267\u884c\u4e86 fib() \u529f\u80fd\u3002 Python dir \u51fd\u6570 \u00b6 \u5185\u7f6e\u7684 dir() \u51fd\u6570\u63d0\u4f9b\u4e86\u5305\u542b\u6a21\u5757\u5b9a\u4e49\u540d\u79f0\u7684\u5b57\u7b26\u4e32\u6392\u5e8f\u5217\u8868\u3002 dirfun.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/usr/bin/env python \"\"\" This is dirfun module \"\"\" import math, sys version = 1.0 names = [\"Paul\", \"Frank\", \"Jessica\", \"Thomas\", \"Katherine\"] def show_names(): for i in names: print(i) print(dir()) \u5728\u6b64\u6a21\u5757\u4e2d\uff0c\u6211\u4eec\u5bfc\u5165\u4e24\u4e2a\u7cfb\u7edf\u6a21\u5757\u3002 \u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u53d8\u91cf\uff0c\u4e00\u4e2a\u5217\u8868\u548c\u4e00\u4e2a\u51fd\u6570\u3002 1 print(dir()) dir() \u51fd\u6570\u8fd4\u56de\u6a21\u5757\u5f53\u524d\u540d\u79f0\u7a7a\u95f4\u4e2d\u6240\u6709\u53ef\u7528\u7684\u540d\u79f0\u3002 1 2 3 $ ./dirfun.py ['__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'math', 'names', 'show_names', 'sys', 'version'] \u6211\u4eec\u53ef\u4ee5\u770b\u5230\u4e00\u4e9b\u5185\u7f6e\u540d\u79f0\uff0c\u4f8b\u5982 '__file__' \u6216 '__name__' \uff0c\u4ee5\u53ca\u6211\u4eec\u5b9a\u4e49\u548c\u5bfc\u5165\u7684\u6240\u6709\u5176\u4ed6\u540d\u79f0\u3002 Python \u5168\u5c40\u51fd\u6570 \u00b6 globals() \u51fd\u6570\u8fd4\u56de\u4ee3\u8868\u5f53\u524d\u5168\u5c40\u200b\u200b\u540d\u79f0\u7a7a\u95f4\u7684\u5b57\u5178\u3002 \u5b83\u662f\u5168\u5c40\u540d\u79f0\u53ca\u5176\u503c\u7684\u5b57\u5178\u3002 \u5b83\u662f\u5f53\u524d\u6a21\u5757\u7684\u5b57\u5178\u3002 globalsfun.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python import textwrap version = 1.0 def myfun(): pass gl = globals() gnames = ', '.join(gl) print(textwrap.fill(gnames)) \u6211\u4eec\u4f7f\u7528 globals() \u529f\u80fd\u6765\u6253\u5370\u5f53\u524d\u6a21\u5757\u7684\u6240\u6709\u5168\u5c40\u540d\u79f0\u3002 1 2 3 $ ./globalsfun.py textwrap, __package__, version, __builtins__, __name__, __spec__, __doc__, gl, __cached__, myfun, __loader__, __file__ \u8fd9\u4e9b\u662f\u5f53\u524d\u6a21\u5757\u7684\u5168\u5c40\u540d\u79f0\u3002 Python __module__ \u5c5e\u6027 \u00b6 __module__ \u7c7b\u5c5e\u6027\u5177\u6709\u5b9a\u4e49\u8be5\u7c7b\u7684\u6a21\u5757\u7684\u540d\u79f0\u3002 animals.py 1 2 3 4 5 6 7 8 9 \"\"\" module animals \"\"\" class Cat: pass class Dog: pass \u8fd9\u662f animals.py \u6587\u4ef6\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u6709\u4e24\u8282\u8bfe\u3002 mclass.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python from animals import Cat class Being: pass b = Being() print(b.__module__) c = Cat() print(c.__module__) \u5728\u6b64\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 __module__ \u5c5e\u6027\u3002 1 from animals import Cat \u4ece animals \u6a21\u5757\uff0c\u6211\u4eec\u5bfc\u5165 Cat \u7c7b\u3002 1 2 class Being: pass \u5728\u5f53\u524d\u6a21\u5757\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u7c7b Being \u3002 1 2 b = Being() print(b.__module__) \u521b\u5efa Being \u7c7b\u7684\u5b9e\u4f8b\u3002 \u6211\u4eec\u6253\u5370\u5176\u6a21\u5757\u7684\u540d\u79f0\u3002 1 2 c = Cat() print(c.__module__) \u6211\u4eec\u4ece Cat \u7c7b\u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61\u3002 \u6211\u4eec\u8fd8\u5c06\u5728\u5b9a\u4e49\u6a21\u5757\u7684\u4f4d\u7f6e\u6253\u5370\u3002 1 2 3 $ ./mclass.py __main__ animals \u5f53\u524d\u6a21\u5757\u7684\u540d\u79f0\u4e3a '__main__' \uff0c Cat's \u6a21\u5757\u7684\u540d\u79f0\u662f\u52a8\u7269\u3002","title":"Python \u6a21\u5757"},{"location":"pages/python/pytutorial/python-modules/#Python-\u6a21\u5757","text":"\u672c\u6587\u4ecb\u7ecd\u5982\u4f55\u521b\u5efa\u548c\u4f7f\u7528 Python \u6a21\u5757\uff0c\u6a21\u5757\u662f\u4e00\u4e2a\u5305\u542b Python \u4ee3\u7801\u7684\u6587\u4ef6\uff0cPython \u6a21\u5757\u5177\u6709 .py \u6269\u5c55\u540d\u3002 \u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u65b9\u6cd5\u7ba1\u7406 Python \u4ee3\u7801\uff1a \u804c\u80fd \u7c7b \u6a21\u7ec4 \u5305\u88c5 Python \u6a21\u5757\u7528\u4e8e\u7ec4\u7ec7 Python \u4ee3\u7801\u3002 \u4f8b\u5982\uff0c\u4e0e\u6570\u636e\u5e93\u76f8\u5173\u7684\u4ee3\u7801\u4f4d\u4e8e\u6570\u636e\u5e93\u6a21\u5757\u5185\u90e8\uff0c\u5b89\u5168\u4ee3\u7801\u4f4d\u4e8e\u5b89\u5168\u6a21\u5757\u4e2d\uff0c\u7b49\u7b49\u3002\u8f83\u5c0f\u7684 Python \u811a\u672c\u53ef\u4ee5\u5177\u6709\u4e00\u4e2a\u6a21\u5757\u3002 \u4f46\u662f\u8f83\u5927\u7684\u7a0b\u5e8f\u5206\u4e3a\u51e0\u4e2a\u6a21\u5757\u3002 \u6a21\u5757\u7ec4\u5408\u5728\u4e00\u8d77\u5f62\u6210\u5305\u88c5\u3002","title":"Python \u6a21\u5757"},{"location":"pages/python/pytutorial/python-modules/#Python-\u6a21\u5757\u540d\u79f0","text":"\u6a21\u5757\u540d\u79f0\u662f\u5e26\u6709 .py \u6269\u5c55\u540d\u7684\u6587\u4ef6\u540d\u3002 \u5f53\u6211\u4eec\u6709\u4e00\u4e2a\u540d\u4e3a empty.py \u7684\u6587\u4ef6\u65f6\uff0c\u6a21\u5757\u540d\u79f0\u4e3a\u7a7a\u3002 __name__ \u662f\u4e00\u4e2a\u53d8\u91cf\uff0c\u5176\u4e2d\u5305\u542b\u8981\u5f15\u7528\u7684\u6a21\u5757\u7684\u540d\u79f0\u3002 \u5f53\u524d\u6a21\u5757\uff0c\u6b63\u5728\u6267\u884c\u7684\u6a21\u5757\uff08\u4e5f\u79f0\u4e3a\u4e3b\u6a21\u5757\uff09\u6709\u4e00\u4e2a\u7279\u6b8a\u540d\u79f0\uff1a '__main__' \u3002 \u4f7f\u7528\u6b64\u540d\u79f0\uff0c\u53ef\u4ee5\u4ece Python \u4ee3\u7801\u4e2d\u5f15\u7528\u5b83\u3002 \u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u4e2d\u6709\u4e24\u4e2a\u6587\u4ef6\uff1a empty.py \u548c test_empty.py \u3002 \u7b2c\u4e8c\u4e2a\u6a21\u5757\u662f\u6267\u884c\u7684\u4e3b\u6a21\u5757\u3002 \u5bfc\u5165\u7b2c\u4e00\u4e2a\u6a21\u5757\u3002 \u4f7f\u7528 import \u5173\u952e\u5b57\u5bfc\u5165\u6a21\u5757\u3002 empty.py 1 2 3 \"\"\" An empty module \"\"\" \u8fd9\u662f empty.py \u6a21\u5757\u3002 test_empty.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python import empty import sys print(__name__) print(empty.__name__) print(sys.__name__) \u5728\u6b64\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5bfc\u5165\u4e24\u4e2a\u6a21\u5757\uff1a\u5185\u7f6e\u6a21\u5757 sys \u548c\u4e00\u4e2a\u81ea\u5b9a\u4e49\u6a21\u5757 empty \u3002 \u6211\u4eec\u5c06\u6a21\u5757\u7684\u540d\u79f0\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 2 3 4 $ ./test_empty.py __main__ empty sys \u6b63\u5728\u6267\u884c\u7684\u6a21\u5757\u7684\u540d\u79f0\u59cb\u7ec8\u4e3a '__main__' \u3002 \u5176\u4ed6\u6a21\u5757\u4ee5\u6587\u4ef6\u540d\u547d\u540d\u3002 \u53ef\u4ee5\u4f7f\u7528 import \u5173\u952e\u5b57\u5c06\u6a21\u5757\u5bfc\u5165\u5176\u4ed6\u6a21\u5757\u3002","title":"Python \u6a21\u5757\u540d\u79f0"},{"location":"pages/python/pytutorial/python-modules/#Python-\u5b9a\u4f4d\u6a21\u5757","text":"\u5bfc\u5165\u6a21\u5757\u65f6\uff0c\u89e3\u91ca\u5668\u9996\u5148\u641c\u7d22\u5177\u6709\u8be5\u540d\u79f0\u7684\u5185\u7f6e\u6a21\u5757\u3002 \u5982\u679c\u627e\u4e0d\u5230\uff0c\u5b83\u5c06\u5728\u53d8\u91cf sys.path \u7ed9\u5b9a\u7684\u76ee\u5f55\u5217\u8868\u4e2d\u641c\u7d22\u3002 sys.path \u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u5217\u8868\uff0c\u7528\u4e8e\u6307\u5b9a\u6a21\u5757\u7684\u641c\u7d22\u8def\u5f84\u3002 \u5b83\u7531\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\uff0c\u5728 PYTHONPATH \u73af\u5883\u53d8\u91cf\u4e2d\u6307\u5b9a\u7684\u76ee\u5f55\u540d\u79f0\u4ee5\u53ca\u4e00\u4e9b\u5176\u4ed6\u4e0e\u5b89\u88c5\u6709\u5173\u7684\u76ee\u5f55\u7ec4\u6210\u3002 \u5982\u679c\u627e\u4e0d\u5230\u8be5\u6a21\u5757\uff0c\u5219\u4f1a\u5f15\u53d1 ImportError \u3002 locating_modules.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python import sys import textwrap sp = sorted(sys.path) dnames = ', '.join(sp) print(textwrap.fill(dnames)) \u8be5\u811a\u672c\u4ece sys.path \u53d8\u91cf\u6253\u5370\u6240\u6709\u76ee\u5f55\u3002 1 import textwrap textwrap \u6a21\u5757\u7528\u4e8e\u8f7b\u677e\u8bbe\u7f6e\u6bb5\u843d\u683c\u5f0f\u3002 1 sp = sorted(sys.path) \u6211\u4eec\u4ece sys.path \u53d8\u91cf\u4e2d\u68c0\u7d22\u76ee\u5f55\u5217\u8868\u5e76\u5bf9\u5b83\u4eec\u8fdb\u884c\u6392\u5e8f\u3002 1 dnames = ', '.join(sp) \u6211\u4eec\u4ece\u5217\u8868\u4e2d\u53d6\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 1 2 3 4 5 6 7 $ ./locating_modules.py /home/janbodnar/.local/lib/python3.5/site-packages, /home/janbodnar/PycharmProjects/Simple, /home/janbodnar/PycharmProjects/Simple, /usr/lib/python3.5, /usr/lib/python3.5/lib-dynload, /usr/lib/python3.5/plat-x86_64-linux- gnu, /usr/lib/python3/dist-packages, /usr/lib/python35.zip, /usr/local/lib/python3.5/dist-packages","title":"Python \u5b9a\u4f4d\u6a21\u5757"},{"location":"pages/python/pytutorial/python-modules/#Python-\u5bfc\u5165\u5173\u952e\u5b57","text":"import \u5173\u952e\u5b57\u53ef\u4ee5\u4ee5\u591a\u79cd\u65b9\u5f0f\u4f7f\u7528\u3002 1 from module import * \u6b64\u6784\u9020\u4f1a\u5c06\u6240\u6709 Python \u5b9a\u4e49\u5bfc\u5165\u53e6\u4e00\u4e2a\u6a21\u5757\u7684\u540d\u79f0\u7a7a\u95f4\u3002 \u6709\u4e00\u4e2a\u4f8b\u5916\u3002 \u4e0d\u5bfc\u5165\u4ee5\u4e0b\u5212\u7ebf\u5b57\u7b26 _ \u5f00\u5934\u7684\u5bf9\u8c61\u3002 \u9884\u671f\u5b83\u4eec\u53ea\u80fd\u7531\u5bfc\u5165\u7684\u6a21\u5757\u5728\u5185\u90e8\u4f7f\u7528\u3002 \u4e0d\u5efa\u8bae\u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\u5bfc\u5165\u6a21\u5757\u3002 everything.py 1 2 3 4 5 6 #!/usr/bin/python from math import * print(cos(3)) print(pi) \u6b64\u5bfc\u5165\u6784\u9020\u5df2\u4ece\u5185\u7f6e math \u6a21\u5757\u5bfc\u5165\u4e86\u6240\u6709\u5b9a\u4e49\u3002 \u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528\u6570\u5b66\u51fd\u6570\uff0c\u800c\u65e0\u9700\u5f15\u7528 math \u6a21\u5757\u3002 1 2 3 $ ./everything.py -0.9899924966004454 3.141592653589793 \u4f7f\u7528\u6b64\u5bfc\u5165\u6784\u9020\u53ef\u80fd\u4f1a\u5bfc\u81f4\u540d\u79f0\u7a7a\u95f4\u6c61\u67d3\u3002 \u6211\u4eec\u53ef\u80fd\u6709\u591a\u4e2a\u540c\u540d\u7684\u5bf9\u8c61\uff0c\u5e76\u4e14\u5b83\u4eec\u7684\u5b9a\u4e49\u53ef\u4ee5\u88ab\u8986\u76d6\u3002 pollution.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python from math import * pi = 3.14 print(cos(3)) print(pi) \u8be5\u793a\u4f8b\u5c06\u5728\u63a7\u5236\u53f0\u4e0a\u6253\u5370 3.14\u3002 \u8fd9\u53ef\u80fd\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u7684\u3002 \u5728\u5927\u578b\u9879\u76ee\u4e2d\uff0c\u547d\u540d\u7a7a\u95f4\u6c61\u67d3\u53ef\u80fd\u53d8\u5f97\u81f3\u5173\u91cd\u8981\u3002","title":"Python \u5bfc\u5165\u5173\u952e\u5b57"},{"location":"pages/python/pytutorial/python-modules/#\u672a\u5bfc\u5165\u7684-Python-\u5bf9\u8c61","text":"\u4ee5\u4e0b\u793a\u4f8b\u663e\u793a\u4e86\u672a\u4f7f\u7528\u6b64 import \u6784\u9020\u5bfc\u5165\u7684\u5b9a\u4e49\u3002 names.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/usr/bin/env python \"\"\" names is a test module \"\"\" _version = 1.0 names = [\"Paul\", \"Frank\", \"Jessica\", \"Thomas\", \"Katherine\"] def show_names(): for i in names: print(i) def _show_version(): print(_version) \u8fd9\u662f names.py \u6a21\u5757\u3002 test_names.py 1 2 3 4 5 6 7 #!/usr/bin/env python from names import * print(locals()) show_names() _version \u53d8\u91cf\u548c _show_version() \u529f\u80fd\u672a\u5bfc\u5165\u5230 test_names \u6a21\u5757\u4e2d\u3002 \u6211\u4eec\u5728\u547d\u540d\u7a7a\u95f4\u4e2d\u770b\u4e0d\u5230\u5b83\u4eec\u3002 locals() \u51fd\u6570\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u6a21\u5757\u4e2d\u6240\u6709\u53ef\u7528\u7684\u5b9a\u4e49\u3002","title":"\u672a\u5bfc\u5165\u7684 Python \u5bf9\u8c61"},{"location":"pages/python/pytutorial/python-modules/#\u5bfc\u5165\u7279\u5b9a\u5bf9\u8c61","text":"\u4f7f\u7528 from \u548c import \u5173\u952e\u5b57\uff0c\u53ef\u4ee5\u4ec5\u5bfc\u5165\u67d0\u4e9b\u5bf9\u8c61\u3002 1 from module import fun, var \u6b64\u5bfc\u5165\u6784\u9020\u4ec5\u4ece\u6a21\u5757\u5bfc\u5165\u7279\u5b9a\u5bf9\u8c61\u3002 \u8fd9\u6837\uff0c\u6211\u4eec\u4ec5\u5bfc\u5165\u6211\u4eec\u9700\u8981\u7684\u5b9a\u4e49\u3002 import_specific.py 1 2 3 4 5 6 #!/usr/bin/python from math import sin, pi print(sin(3)) print(pi) \u6211\u4eec\u4ece math \u6a21\u5757\u5bfc\u5165\u4e24\u4e2a\u5bf9\u8c61\u3002 \u6211\u4eec\u65e0\u6cd5\u5f15\u7528\u5176\u4ed6\u5b9a\u4e49\uff08\u4f8b\u5982 cos \u51fd\u6570\uff09\u3002 imnames.py 1 2 3 4 5 6 #!/usr/bin/python from names import _version, _show_version print(_version) _show_version() \u6211\u4eec\u4e5f\u53ef\u4ee5\u5bfc\u5165\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u5b9a\u4e49\u3002 \u4f46\u8fd9\u662f\u4e00\u4e2a\u4e0d\u597d\u7684\u505a\u6cd5\u3002 1 2 3 $ ./imnames.py 1.0 1.0","title":"\u5bfc\u5165\u7279\u5b9a\u5bf9\u8c61"},{"location":"pages/python/pytutorial/python-modules/#Python-\u5bfc\u5165\u6a21\u5757","text":"\u6700\u540e\u4e00\u79cd\u6784\u9020\u4f7f\u7528\u6700\u5e7f\u6cdb\u3002 1 import module \u5b83\u9632\u6b62\u540d\u79f0\u7a7a\u95f4\u6c61\u67d3\uff0c\u5e76\u5141\u8bb8\u4ece\u6a21\u5757\u8bbf\u95ee\u6240\u6709\u5b9a\u4e49\u3002 impmod.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python import math pi = 3.14 print(math.cos(3)) print(math.pi) print(math.sin(3)) print(pi) \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u901a\u8fc7\u6a21\u5757\u540d\u79f0\u5f15\u7528\u5b9a\u4e49\u3002 \u5982\u6211\u4eec\u6240\u89c1\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e24\u4e2a pi \u53d8\u91cf\u3002 \u6211\u4eec\u7684\u5b9a\u4e49\u6765\u81ea math \u6a21\u5757\u3002 1 2 3 4 5 $ ./impmod.py -0.9899924966004454 3.141592653589793 0.1411200080598672 3.14","title":"Python \u5bfc\u5165\u6a21\u5757"},{"location":"pages/python/pytutorial/python-modules/#Python-\u522b\u540d\u6a21\u5757","text":"\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 as \u5173\u952e\u5b57\u4e3a\u6a21\u5757\u521b\u5efa\u522b\u540d\u3002 importas.py 1 2 3 4 5 6 7 8 #!/usr/bin/python # importas.py import math as m print(m.pi) print(m.cos(3)) \u6211\u4eec\u53ef\u4ee5\u66f4\u6539\u5f15\u7528\u6a21\u5757\u7684\u540d\u79f0\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u4f7f\u7528 as \u5173\u952e\u5b57\u3002 1 2 3 $ ./importas.py 3.14159265359 -0.9899924966","title":"Python \u522b\u540d\u6a21\u5757"},{"location":"pages/python/pytutorial/python-modules/#ImportError","text":"\u5982\u679c\u65e0\u6cd5\u5bfc\u5165\u6a21\u5757\uff0c\u5219\u4f1a\u5f15\u53d1 ImportError \u3002 importerror.py 1 2 3 4 5 6 #!/usr/bin/env python try: import empty2 except ImportError as e: print('Failed to import:', e) \u6211\u4eec\u5c1a\u672a\u521b\u5efa empty2 \u6a21\u5757\u3002 \u56e0\u6b64\u5f15\u53d1\u4e86\u5f02\u5e38\u3002 1 2 $ ./importerror.py Failed to import: No module named empty2","title":"ImportError"},{"location":"pages/python/pytutorial/python-modules/#\u6267\u884c-Python-\u6a21\u5757","text":"\u6a21\u5757\u53ef\u4ee5\u5bfc\u5165\u5176\u4ed6\u6a21\u5757\uff0c\u4e5f\u53ef\u4ee5\u6267\u884c\u3002 \u6a21\u5757\u4f5c\u8005\u7ecf\u5e38\u521b\u5efa\u6d4b\u8bd5\u5957\u4ef6\u6765\u6d4b\u8bd5\u6a21\u5757\u3002 \u4ec5\u5f53\u6a21\u5757\u4f5c\u4e3a\u811a\u672c\u6267\u884c\u65f6\uff0c __name__ \u5c5e\u6027\u7b49\u4e8e '__main__' \u3002 \u6211\u4eec\u5c06\u5728\u6590\u6ce2\u90a3\u5951\u6a21\u5757\u4e0a\u5bf9\u6b64\u8fdb\u884c\u6f14\u793a\u3002 \u6590\u6ce2\u90a3\u5951\u6570\u662f\u4e00\u4e2a\u6570\u5b57\u5e8f\u5217\uff0c\u5176\u4e2d\u6bcf\u4e2a\u6570\u5b57\u90fd\u662f\u5176\u4e24\u4e2a\u76f4\u63a5\u524d\u8f88\u7684\u603b\u548c\u3002 fibonacci.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #!/usr/bin/env python \"\"\" A module containing the fibonacci function. \"\"\" def fib(n): a, b = 0, 1 while b < n: print(b, end=\" \") (a, b) = (b, a + b) # testing if __name__ == '__main__': fib(500) \u901a\u5e38\u53ef\u4ee5\u7167\u5e38\u5bfc\u5165\u8be5\u6a21\u5757\u3002 \u8be5\u6a21\u5757\u4e5f\u53ef\u4ee5\u6267\u884c\u3002 1 2 $ ./fibonacci.py 1 1 2 3 5 8 13 21 34 55 89 144 233 377 \u5982\u679c\u786e\u5b9e\u5bfc\u5165\u4e86 fibonacci \u6a21\u5757\uff0c\u5219\u4e0d\u4f1a\u81ea\u52a8\u6267\u884c\u6d4b\u8bd5\u3002 1 2 3 >>> import fibonacci as fib >>> fib.fib(500) 1 1 2 3 5 8 13 21 34 55 89 144 233 377 \u5bfc\u5165\u4e86 fibonacci \u6a21\u5757\uff0c\u5e76\u6267\u884c\u4e86 fib() \u529f\u80fd\u3002","title":"\u6267\u884c Python \u6a21\u5757"},{"location":"pages/python/pytutorial/python-modules/#Python-dir-\u51fd\u6570","text":"\u5185\u7f6e\u7684 dir() \u51fd\u6570\u63d0\u4f9b\u4e86\u5305\u542b\u6a21\u5757\u5b9a\u4e49\u540d\u79f0\u7684\u5b57\u7b26\u4e32\u6392\u5e8f\u5217\u8868\u3002 dirfun.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/usr/bin/env python \"\"\" This is dirfun module \"\"\" import math, sys version = 1.0 names = [\"Paul\", \"Frank\", \"Jessica\", \"Thomas\", \"Katherine\"] def show_names(): for i in names: print(i) print(dir()) \u5728\u6b64\u6a21\u5757\u4e2d\uff0c\u6211\u4eec\u5bfc\u5165\u4e24\u4e2a\u7cfb\u7edf\u6a21\u5757\u3002 \u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u53d8\u91cf\uff0c\u4e00\u4e2a\u5217\u8868\u548c\u4e00\u4e2a\u51fd\u6570\u3002 1 print(dir()) dir() \u51fd\u6570\u8fd4\u56de\u6a21\u5757\u5f53\u524d\u540d\u79f0\u7a7a\u95f4\u4e2d\u6240\u6709\u53ef\u7528\u7684\u540d\u79f0\u3002 1 2 3 $ ./dirfun.py ['__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'math', 'names', 'show_names', 'sys', 'version'] \u6211\u4eec\u53ef\u4ee5\u770b\u5230\u4e00\u4e9b\u5185\u7f6e\u540d\u79f0\uff0c\u4f8b\u5982 '__file__' \u6216 '__name__' \uff0c\u4ee5\u53ca\u6211\u4eec\u5b9a\u4e49\u548c\u5bfc\u5165\u7684\u6240\u6709\u5176\u4ed6\u540d\u79f0\u3002","title":"Python dir \u51fd\u6570"},{"location":"pages/python/pytutorial/python-modules/#Python-\u5168\u5c40\u51fd\u6570","text":"globals() \u51fd\u6570\u8fd4\u56de\u4ee3\u8868\u5f53\u524d\u5168\u5c40\u200b\u200b\u540d\u79f0\u7a7a\u95f4\u7684\u5b57\u5178\u3002 \u5b83\u662f\u5168\u5c40\u540d\u79f0\u53ca\u5176\u503c\u7684\u5b57\u5178\u3002 \u5b83\u662f\u5f53\u524d\u6a21\u5757\u7684\u5b57\u5178\u3002 globalsfun.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python import textwrap version = 1.0 def myfun(): pass gl = globals() gnames = ', '.join(gl) print(textwrap.fill(gnames)) \u6211\u4eec\u4f7f\u7528 globals() \u529f\u80fd\u6765\u6253\u5370\u5f53\u524d\u6a21\u5757\u7684\u6240\u6709\u5168\u5c40\u540d\u79f0\u3002 1 2 3 $ ./globalsfun.py textwrap, __package__, version, __builtins__, __name__, __spec__, __doc__, gl, __cached__, myfun, __loader__, __file__ \u8fd9\u4e9b\u662f\u5f53\u524d\u6a21\u5757\u7684\u5168\u5c40\u540d\u79f0\u3002","title":"Python \u5168\u5c40\u51fd\u6570"},{"location":"pages/python/pytutorial/python-modules/#Python-__module__\u5c5e\u6027","text":"__module__ \u7c7b\u5c5e\u6027\u5177\u6709\u5b9a\u4e49\u8be5\u7c7b\u7684\u6a21\u5757\u7684\u540d\u79f0\u3002 animals.py 1 2 3 4 5 6 7 8 9 \"\"\" module animals \"\"\" class Cat: pass class Dog: pass \u8fd9\u662f animals.py \u6587\u4ef6\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u6709\u4e24\u8282\u8bfe\u3002 mclass.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python from animals import Cat class Being: pass b = Being() print(b.__module__) c = Cat() print(c.__module__) \u5728\u6b64\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 __module__ \u5c5e\u6027\u3002 1 from animals import Cat \u4ece animals \u6a21\u5757\uff0c\u6211\u4eec\u5bfc\u5165 Cat \u7c7b\u3002 1 2 class Being: pass \u5728\u5f53\u524d\u6a21\u5757\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u7c7b Being \u3002 1 2 b = Being() print(b.__module__) \u521b\u5efa Being \u7c7b\u7684\u5b9e\u4f8b\u3002 \u6211\u4eec\u6253\u5370\u5176\u6a21\u5757\u7684\u540d\u79f0\u3002 1 2 c = Cat() print(c.__module__) \u6211\u4eec\u4ece Cat \u7c7b\u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61\u3002 \u6211\u4eec\u8fd8\u5c06\u5728\u5b9a\u4e49\u6a21\u5757\u7684\u4f4d\u7f6e\u6253\u5370\u3002 1 2 3 $ ./mclass.py __main__ animals \u5f53\u524d\u6a21\u5757\u7684\u540d\u79f0\u4e3a '__main__' \uff0c Cat's \u6a21\u5757\u7684\u540d\u79f0\u662f\u52a8\u7269\u3002","title":"Python __module__\u5c5e\u6027"},{"location":"pages/python/pytutorial/python-oop/","text":"Python \u9762\u5411\u5bf9\u8c61\u7f16\u7a0b \u00b6 \u6709\u4e09\u79cd\u5e7f\u6cdb\u4f7f\u7528\u7684\u7f16\u7a0b\u793a\u4f8b\uff1a\u8fc7\u7a0b\u7f16\u7a0b\uff0c\u51fd\u6570\u7f16\u7a0b\u548c\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b\uff0cPython \u652f\u6301\u6240\u6709\u4e09\u79cd\u7f16\u7a0b\u3002 \u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\uff08OOP\uff09\u662f\u4e00\u79cd\u4f7f\u7528\u5bf9\u8c61\u53ca\u5176\u76f8\u4e92\u4f5c\u7528\u8bbe\u8ba1\u5e94\u7528\u548c\u8ba1\u7b97\u673a\u7a0b\u5e8f\u7684\u7f16\u7a0b\u793a\u4f8b\u3002 OOP \u4e2d\u6709\u4e00\u4e9b\u57fa\u672c\u7684\u7f16\u7a0b\u6982\u5ff5\uff1a \u62bd\u8c61\u5316 \u591a\u6001\u6027 \u5c01\u88c5\u5f62\u5f0f \u7ee7\u627f \u62bd\u8c61\u901a\u8fc7\u5efa\u6a21\u9002\u5408\u8be5\u95ee\u9898\u7684\u7c7b\u6765\u7b80\u5316\u590d\u6742\u7684\u73b0\u5b9e\u3002 \u591a\u6001\u6027\u662f\u5c06\u8fd0\u7b97\u7b26\u6216\u51fd\u6570\u4ee5\u4e0d\u540c\u65b9\u5f0f\u7528\u4e8e\u4e0d\u540c\u6570\u636e\u8f93\u5165\u7684\u8fc7\u7a0b\u3002 \u5c01\u88c5\u5bf9\u5176\u4ed6\u5bf9\u8c61\u9690\u85cf\u4e86\u7c7b\u7684\u5b9e\u73b0\u7ec6\u8282\u3002 \u7ee7\u627f\u662f\u4e00\u79cd\u4f7f\u7528\u5df2\u7ecf\u5b9a\u4e49\u7684\u7c7b\u5f62\u6210\u65b0\u7c7b\u7684\u65b9\u6cd5\u3002 Python \u5bf9\u8c61 \u00b6 Python \u4e2d\u7684\u6240\u6709\u5185\u5bb9\u90fd\u662f\u4e00\u4e2a\u5bf9\u8c61\u3002 \u5bf9\u8c61\u662f Python OOP \u7a0b\u5e8f\u7684\u57fa\u672c\u6784\u5efa\u5757\u3002 object_types.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env python # object_types.py import sys def function(): pass print(type(1)) print(type(\"\")) print(type([])) print(type({})) print(type(())) print(type(object)) print(type(function)) print(type(sys)) \u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u663e\u793a\u6240\u6709\u8fd9\u4e9b\u5b9e\u4f53\u5b9e\u9645\u4e0a\u90fd\u662f\u5bf9\u8c61\u3002 type() \u51fd\u6570\u8fd4\u56de\u6307\u5b9a\u5bf9\u8c61\u7684\u7c7b\u578b\u3002 1 2 3 4 5 6 7 8 9 $ ./object_types.py <class 'int'> <class 'str'> <class 'list'> <class 'dict'> <class 'tuple'> <class 'type'> <class 'function'> <class 'module'> \u6574\u6570\uff0c\u5b57\u7b26\u4e32\uff0c\u5217\u8868\uff0c\u5b57\u5178\uff0c\u5143\u7ec4\uff0c\u51fd\u6570\u548c\u6a21\u5757\u662f Python \u5bf9\u8c61\u3002 Python \u7c7b\u5173\u952e\u5b57 \u00b6 \u5148\u524d\u7684\u5bf9\u8c61\u90fd\u662f Python \u7f16\u7a0b\u8bed\u8a00\u7684\u5185\u7f6e\u5bf9\u8c61\u3002 \u7528\u6237\u5b9a\u4e49\u7684\u5bf9\u8c61\u662f\u4f7f\u7528 class \u5173\u952e\u5b57\u521b\u5efa\u7684\u3002 \u8be5\u7c7b\u662f\u5b9a\u4e49\u672a\u6765\u5bf9\u8c61\u6027\u8d28\u7684\u84dd\u56fe\u3002 \u4ece\u7c7b\u4e2d\uff0c\u6211\u4eec\u6784\u9020\u5b9e\u4f8b\u3002 \u5b9e\u4f8b\u662f\u4ece\u7279\u5b9a\u7c7b\u521b\u5efa\u7684\u7279\u5b9a\u5bf9\u8c61\u3002 \u4f8b\u5982\uff0cHuck \u53ef\u80fd\u662f Dog \u7c7b\u7684\u5b9e\u4f8b\u3002 first_object.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python # first_object.py class First: pass fr = First() print(type(fr)) print(type(First)) \u8fd9\u662f\u6211\u4eec\u7684\u5934\u7b49\u8231\u3002 \u8be5\u7c7b\u7684\u4e3b\u4f53\u6682\u65f6\u7559\u7a7a\u3002 \u6309\u7167\u60ef\u4f8b\uff0c\u7ed9\u7c7b\u8d77\u4e00\u4e2a\u4ee5\u5927\u5199\u5b57\u6bcd\u5f00\u5934\u7684\u540d\u79f0\u3002 1 2 class First: pass \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5b9a\u4e49 First \u7c7b\u3002 \u8bf7\u6ce8\u610f\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6240\u6709\u7c7b\u5747\u4ece\u57fa object \u7ee7\u627f\u3002 1 fr = First() \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u521b\u5efa First \u7c7b\u7684\u65b0\u5b9e\u4f8b\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec\u5b9e\u4f8b\u5316\u4e86 First \u7c7b\u3002 fr \u662f\u5bf9\u6211\u4eec\u65b0\u5bf9\u8c61\u7684\u5f15\u7528\u3002 1 2 3 $ ./first_object.py <class '__main__.First'> <class 'type'> \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u770b\u5230 fr \u662f First \u7c7b\u7684\u5b9e\u4f8b\u5bf9\u8c61\u3002 \u5728\u7c7b\u5185\u90e8\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u5c5e\u6027\u548c\u65b9\u6cd5\u3002 \u5c5e\u6027\u662f\u5bf9\u8c61\u7684\u7279\u5f81\u3002 \u4f8b\u5982\uff0c\u8fd9\u53ef\u4ee5\u662f\u96c7\u5458\u7684\u5de5\u8d44\u3002 \u65b9\u6cd5\u5b9a\u4e49\u4e86\u6211\u4eec\u53ef\u4ee5\u5bf9\u5bf9\u8c61\u6267\u884c\u7684\u64cd\u4f5c\u3002 \u4e00\u79cd\u65b9\u6cd5\u53ef\u4ee5\u5b9a\u4e49\u53d6\u6d88\u5e10\u6237\u3002 \u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u5c5e\u6027\u662f\u53d8\u91cf\uff0c\u65b9\u6cd5\u662f\u5728\u7c7b\u5185\u90e8\u5b9a\u4e49\u7684\u51fd\u6570\u3002 Python \u5bf9\u8c61\u521d\u59cb\u5316 \u00b6 \u79f0\u4e3a __init__() \u7684\u7279\u6b8a\u65b9\u6cd5\u7528\u4e8e\u521d\u59cb\u5316\u5bf9\u8c61\u3002 object_initialization.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python # object_initialization.py class Being: def __init__(self): print(\"Being is initialized\") Being() \u6211\u4eec\u6709\u4e00\u4e2a Being \u7c7b\u3002 \u521b\u5efa\u5bf9\u8c61\u540e\u7acb\u5373\u81ea\u52a8\u8c03\u7528\u7279\u6b8a\u65b9\u6cd5 __init__() \u3002 1 2 $ ./object_initialization.py Being is initialized Python \u5bf9\u8c61\u5c5e\u6027 \u00b6 \u5c5e\u6027\u662f\u5bf9\u8c61\u7684\u7279\u5f81\u3002 \u5728 __init__() \u65b9\u6cd5\u4e2d\u8bbe\u7f6e\u5c5e\u6027\u3002 attributes.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python # attributes.py class Cat: def __init__(self, name): self.name = name missy = Cat('Missy') lucky = Cat('Lucky') print(missy.name) print(lucky.name) \u5728\u6b64\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a Cat \u7c7b\u3002 \u521b\u5efa\u5bf9\u8c61\u540e\u7acb\u5373\u81ea\u52a8\u8c03\u7528\u7279\u6b8a\u65b9\u6cd5 __init__() \u3002 1 def __init__(self, name): \u7c7b\u5b9a\u4e49\u4e2d\u7684\u6bcf\u4e2a\u65b9\u6cd5\u90fd\u4ee5\u5bf9\u5b9e\u4f8b\u5bf9\u8c61\u7684\u5f15\u7528\u5f00\u5934\u3002 \u6309\u7167\u60ef\u4f8b\uff0c\u5b83\u7684\u540d\u79f0\u4e3a self \u3002 self \u540d\u79f0\u6ca1\u6709\u4ec0\u4e48\u7279\u522b\u7684\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u547d\u540d\u3002 \u7b2c\u4e8c\u4e2a\u53c2\u6570 name \u662f\u81ea\u53d8\u91cf\u3002 \u8be5\u503c\u5728\u7c7b\u521d\u59cb\u5316\u671f\u95f4\u4f20\u9012\u3002 1 self.name = name \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5c06\u5c5e\u6027\u4f20\u9012\u7ed9\u5b9e\u4f8b\u5bf9\u8c61\u3002 1 2 missy = Cat('Missy') lucky = Cat('Lucky') \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u521b\u5efa\u4e24\u4e2a\u5bf9\u8c61\uff1a\u732b Missy \u548c Lucky\u3002 \u53c2\u6570\u7684\u6570\u91cf\u5fc5\u987b\u4e0e\u7c7b\u5b9a\u4e49\u7684 __init__() \u65b9\u6cd5\u76f8\u5bf9\u5e94\u3002 \u201c Missy\u201d\u548c\u201c Lucky\u201d\u5b57\u7b26\u4e32\u6210\u4e3a __init__() \u65b9\u6cd5\u7684 name \u53c2\u6570\u3002 1 2 print(missy.name) print(lucky.name) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u6253\u5370\u4e24\u4e2a\u732b\u5bf9\u8c61\u7684\u5c5e\u6027\u3002 \u4e00\u4e2a\u7c7b\u7684\u6bcf\u4e2a\u5b9e\u4f8b\u53ef\u4ee5\u6709\u81ea\u5df1\u7684\u5c5e\u6027\u3002 1 2 3 $ ./attributes.py Missy Lucky \u53ef\u4ee5\u52a8\u6001\u5206\u914d\u5c5e\u6027\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u5728\u521d\u59cb\u5316\u8fc7\u7a0b\u4e2d\u3002 \u4e0b\u4e00\u4e2a\u793a\u4f8b\u5bf9\u6b64\u8fdb\u884c\u4e86\u8bf4\u660e\u3002 attributes_dynamic.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python # attributes_dynamic.py class Person: pass p = Person() p.age = 24 p.name = \"Peter\" print(\"{0} is {1} years old\".format(p.name, p.age)) \u6211\u4eec\u5b9a\u4e49\u5e76\u521b\u5efa\u4e00\u4e2a\u7a7a\u7684 Person \u7c7b\u3002 1 2 p.age = 24 p.name = \"Peter\" \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u52a8\u6001\u521b\u5efa\u4e24\u4e2a\u5c5e\u6027\uff1aage \u548c name\u3002 1 2 $ ./attributes_dynamic.py 24 is Peter years old Python \u7c7b\u5c5e\u6027 \u00b6 \u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u4e00\u76f4\u5728\u8ba8\u8bba\u5b9e\u4f8b\u5c5e\u6027\u3002 \u5728 Python \u4e2d\uff0c\u8fd8\u6709\u6240\u8c13\u7684\u7c7b\u5bf9\u8c61\u5c5e\u6027\u3002 \u7c7b\u7684\u6240\u6709\u5b9e\u4f8b\u7684\u7c7b\u5bf9\u8c61\u5c5e\u6027\u90fd\u76f8\u540c\u3002 class_attribute.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #!/usr/bin/env python # class_attribute.py class Cat: species = 'mammal' def __init__(self, name, age): self.name = name self.age = age missy = Cat('Missy', 3) lucky = Cat('Lucky', 5) print(missy.name, missy.age) print(lucky.name, lucky.age) print(Cat.species) print(missy.__class__.species) print(lucky.__class__.species) \u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\u4e24\u53ea\u5177\u6709\u7279\u5b9a name \u548c age \u5c5e\u6027\u7684\u732b\u3002 \u4e24\u53ea\u732b\u90fd\u6709\u4e00\u4e9b\u5171\u540c\u4e4b\u5904\u3002 \u5c0f\u59d0\u548c\u5e78\u8fd0\u8005\u90fd\u662f\u54fa\u4e73\u52a8\u7269\u3002 \u8fd9\u53cd\u6620\u5728\u7c7b\u7ea7\u522b\u5c5e\u6027 species \u4e2d\u3002 \u8be5\u5c5e\u6027\u662f\u5728\u7c7b\u4e3b\u4f53\u4e2d\u7684\u4efb\u4f55\u65b9\u6cd5\u540d\u79f0\u4e4b\u5916\u5b9a\u4e49\u7684\u3002 1 2 print(Cat.species) print(missy.__class__.species) \u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u8bbf\u95ee\u7c7b\u5bf9\u8c61\u5c5e\u6027\uff1a\u901a\u8fc7 Cat \u7c7b\u7684\u540d\u79f0\uff0c\u6216\u501f\u52a9\u7279\u6b8a\u7684 __class__ \u5c5e\u6027\u3002 1 2 3 4 5 6 $ ./class_attribute.py Missy 3 Lucky 5 mammal mammal mammal Python \u65b9\u6cd5 \u00b6 \u65b9\u6cd5\u662f\u5728\u7c7b\u4e3b\u4f53\u5185\u5b9a\u4e49\u7684\u51fd\u6570\u3002 \u5b83\u4eec\u7528\u4e8e\u901a\u8fc7\u5bf9\u8c61\u7684\u5c5e\u6027\u6267\u884c\u64cd\u4f5c\u3002 \u5728 OOP \u8303\u5f0f\u7684\u5c01\u88c5\u6982\u5ff5\u4e2d\uff0c\u65b9\u6cd5\u81f3\u5173\u91cd\u8981\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u7684 AccessDatabase \u7c7b\u4e2d\u53ef\u80fd\u6709\u4e00\u4e2a connect() \u65b9\u6cd5\u3002 \u6211\u4eec\u65e0\u9700\u77e5\u9053\u65b9\u6cd5\u8fde\u63a5\u5982\u4f55\u51c6\u786e\u5730\u8fde\u63a5\u5230\u6570\u636e\u5e93\u3002 \u6211\u4eec\u53ea\u77e5\u9053\u5b83\u7528\u4e8e\u8fde\u63a5\u6570\u636e\u5e93\u3002 \u8fd9\u5bf9\u4e8e\u5212\u5206\u7f16\u7a0b\u4e2d\u7684\u804c\u8d23\u81f3\u5173\u91cd\u8981\uff0c\u5c24\u5176\u662f\u5728\u5927\u578b\u5e94\u7528\u4e2d\u3002 methods.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #!/usr/bin/env python # methods.py class Circle: pi = 3.141592 def __init__(self, radius=1): self.radius = radius def area(self): return self.radius * self.radius * Circle.pi def setRadius(self, radius): self.radius = radius def getRadius(self): return self.radius c = Circle() c.setRadius(5) print(c.getRadius()) print(c.area()) \u5728\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a Circle \u7c7b\u3002 \u6211\u4eec\u5b9a\u4e49\u4e86\u4e09\u79cd\u65b0\u65b9\u6cd5\u3002 1 2 def area(self): return self.radius * self.radius * Circle.pi area() \u65b9\u6cd5\u8fd4\u56de\u5706\u7684\u9762\u79ef\u3002 1 2 def setRadius(self, radius): self.radius = radius setRadius() \u65b9\u6cd5\u4e3a radius \u5c5e\u6027\u8bbe\u7f6e\u65b0\u503c\u3002 1 2 def getRadius(self): return self.radius getRadius() \u65b9\u6cd5\u8fd4\u56de\u5f53\u524d\u534a\u5f84\u3002 1 c.setRadius(5) \u5728\u5b9e\u4f8b\u5bf9\u8c61\u4e0a\u8c03\u7528\u8be5\u65b9\u6cd5\u3002 c \u5bf9\u8c61\u4e0e\u7c7b\u5b9a\u4e49\u7684 self \u53c2\u6570\u914d\u5bf9\u3002 \u6570\u5b57 5 \u4e0e radius \u53c2\u6570\u914d\u5bf9\u3002 1 2 3 $ ./methods.py 5 78.5398 \u5728 Python \u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e24\u79cd\u65b9\u5f0f\u8c03\u7528\u65b9\u6cd5\u3002 \u6709\u6709\u754c\u7684\u548c\u65e0\u754c\u7684\u65b9\u6cd5\u8c03\u7528\u3002 bound_unbound_methods.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/env python # bound_unbound_methods.py class Methods: def __init__(self): self.name = 'Methods' def getName(self): return self.name m = Methods() print(m.getName()) print(Methods.getName(m)) \u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6f14\u793a\u4e86\u4e24\u4e2a\u65b9\u6cd5\u8c03\u7528\u3002 1 print(m.getName()) \u8fd9\u662f\u7ed1\u5b9a\u7684\u65b9\u6cd5\u8c03\u7528\u3002 Python \u89e3\u91ca\u5668\u4f1a\u81ea\u52a8\u5c06 m \u5b9e\u4f8b\u4e0e self \u53c2\u6570\u914d\u5bf9\u3002 1 print(Methods.getName(m)) \u8fd9\u662f\u65e0\u754c\u7684\u65b9\u6cd5\u8c03\u7528\u3002 \u5b9e\u4f8b\u5bf9\u8c61\u5df2\u663e\u5f0f\u63d0\u4f9b\u7ed9 getName() \u65b9\u6cd5\u3002 1 2 3 $ ./bound_unbound_methods.py Methods Methods Python \u7ee7\u627f \u00b6 \u7ee7\u627f\u662f\u4e00\u79cd\u4f7f\u7528\u5df2\u7ecf\u5b9a\u4e49\u7684\u7c7b\u5f62\u6210\u65b0\u7c7b\u7684\u65b9\u6cd5\u3002 \u65b0\u5f62\u6210\u7684\u7c7b\u79f0\u4e3a\u6d3e\u751f\u7684\u7c7b\uff0c\u6211\u4eec\u4ece\u4e2d\u884d\u751f\u7684\u7c7b\u79f0\u4e3a\u57fa\u7c7b\u3002 \u7ee7\u627f\u7684\u91cd\u8981\u597d\u5904\u662f\u4ee3\u7801\u91cd\u7528\u548c\u964d\u4f4e\u7a0b\u5e8f\u7684\u590d\u6742\u6027\u3002 \u6d3e\u751f\u7c7b\uff08\u540e\u4ee3\uff09\u5c06\u8986\u76d6\u6216\u6269\u5c55\u57fa\u7c7b\uff08\u7956\u5148\uff09\u7684\u529f\u80fd\u3002 inheritance.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #!/usr/bin/env python # inheritance.py class Animal: def __init__(self): print(\"Animal created\") def whoAmI(self): print(\"Animal\") def eat(self): print(\"Eating\") class Dog(Animal): def __init__(self): super().__init__() print(\"Dog created\") def whoAmI(self): print(\"Dog\") def bark(self): print(\"Woof!\") d = Dog() d.whoAmI() d.eat() d.bark() \u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\u4e24\u4e2a\u7c7b\uff1a Animal \u548c Dog \u3002 Animal \u662f\u57fa\u7c7b\uff0c Dog \u662f\u6d3e\u751f\u7c7b\u3002 \u6d3e\u751f\u7c7b\u7ee7\u627f\u57fa\u7c7b\u7684\u529f\u80fd\u3002 \u901a\u8fc7 eat() \u65b9\u6cd5\u663e\u793a\u3002 \u6d3e\u751f\u7684\u7c7b\u4fee\u6539\u4e86\u57fa\u7c7b\u7684\u73b0\u6709\u884c\u4e3a\uff0c\u5982 whoAmI() \u65b9\u6cd5\u6240\u793a\u3002 \u6700\u540e\uff0c\u6d3e\u751f\u7c7b\u901a\u8fc7\u5b9a\u4e49\u65b0\u7684 bark() \u65b9\u6cd5\u6765\u6269\u5c55\u57fa\u7c7b\u7684\u529f\u80fd\u3002 1 2 3 4 5 6 class Dog(Animal): def __init__(self): super().__init__() print(\"Dog created\") \u6211\u4eec\u5c06\u7956\u5148\u7c7b\u653e\u5728\u5b50\u5b59\u7c7b\u540d\u79f0\u4e4b\u540e\u7684\u5706\u62ec\u53f7\u4e2d\u3002 \u5982\u679c\u6d3e\u751f\u7c7b\u63d0\u4f9b\u4e86\u81ea\u5df1\u7684 __init__() \u65b9\u6cd5\uff0c\u5e76\u4e14\u6211\u4eec\u60f3\u8c03\u7528\u7236\u6784\u9020\u51fd\u6570\uff0c\u5219\u5fc5\u987b\u501f\u52a9 super \u51fd\u6570\u663e\u5f0f\u8c03\u7528\u57fa\u7c7b __init__() \u65b9\u6cd5\u3002 1 2 3 4 5 6 $ ./inherit.py Animal created Dog created Dog Eating Woof! Python \u591a\u6001\u6027 \u00b6 \u591a\u6001\u6027\u662f\u5bf9\u4e0d\u540c\u7684\u6570\u636e\u8f93\u5165\u4ee5\u4e0d\u540c\u65b9\u5f0f\u4f7f\u7528\u8fd0\u7b97\u7b26\u6216\u51fd\u6570\u7684\u8fc7\u7a0b\u3002 \u5b9e\u9645\u4e0a\uff0c\u591a\u6001\u6027\u610f\u5473\u7740\u5982\u679c\u7c7b B \u4ece\u7c7b A \u7ee7\u627f\uff0c\u5219\u4e0d\u5fc5\u7ee7\u627f\u5173\u4e8e\u7c7b A \u7684\u6240\u6709\u5185\u5bb9\uff1b \u5b83\u53ef\u4ee5\u5b8c\u6210 A \u7c7b\u6240\u505a\u7684\u67d0\u4e9b\u4e8b\u60c5\u3002 basic_polymorphism.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python # basic_polymorphism.py a = \"alfa\" b = (1, 2, 3, 4) c = ['o', 'm', 'e', 'g', 'a'] print(a[2]) print(b[1]) print(c[3]) Python \u5728\u5185\u7f6e\u7c7b\u578b\u4e2d\u5e7f\u6cdb\u4f7f\u7528\u4e86\u591a\u6001\u3002 \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5bf9\u4e09\u79cd\u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b\u4f7f\u7528\u76f8\u540c\u7684\u7d22\u5f15\u8fd0\u7b97\u7b26\u3002 1 2 3 4 $ ./basic_polymorphism.py f 2 g \u591a\u6001\u6027\u5728\u5904\u7406\u7ee7\u627f\u65f6\u6700\u5e38\u7528\u3002 polymorphism.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #!/usr/bin/env python # polymorphism.py class Animal: def __init__(self, name=''): self.name = name def talk(self): pass class Cat(Animal): def talk(self): print(\"Meow!\") class Dog(Animal): def talk(self): print(\"Woof!\") a = Animal() a.talk() c = Cat(\"Missy\") c.talk() d = Dog(\"Rocky\") d.talk() \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u6709\u4e24\u79cd\uff1a\u72d7\u548c\u732b\u3002 \u4e24\u8005\u90fd\u662f\u52a8\u7269\u3002 Dog \u7c7b\u548c Cat \u7c7b\u7ee7\u627f\u4e86 Animal \u7c7b\u3002 \u5b83\u4eec\u5177\u6709 talk() \u65b9\u6cd5\uff0c\u53ef\u4ee5\u4e3a\u5b83\u4eec\u63d0\u4f9b\u4e0d\u540c\u7684\u8f93\u51fa\u3002 1 2 3 $ ./polymorphism.py Meow! Woof! Python \u7279\u6b8a\u65b9\u6cd5 \u00b6 Python \u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u7c7b\u53ef\u4ee5\u4f7f\u7528\u7279\u6b8a\u7684\u65b9\u6cd5\u540d\u79f0\u6765\u5b9e\u73b0\u67d0\u4e9b\u64cd\u4f5c\u3002 \u8fd9\u4e9b\u65b9\u6cd5\u4e0d\u662f\u76f4\u63a5\u8c03\u7528\uff0c\u800c\u662f\u901a\u8fc7\u7279\u5b9a\u7684\u8bed\u8a00\u8bed\u6cd5\u8c03\u7528\u3002 \u8fd9\u7c7b\u4f3c\u4e8e\u5728 C++ \u6216 Ruby \u4e2d\u6240\u8c13\u7684\u8fd0\u7b97\u7b26\u91cd\u8f7d\u3002 special_methods.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #!/usr/bin/env python # special_methods.py class Book: def __init__(self, title, author, pages): print(\"A book is created\") self.title = title self.author = author self.pages = pages def __str__(self): return \"Title:{0} , author:{1}, pages:{2} \".format( self.title, self.author, self.pages) def __len__(self): return self.pages def __del__(self): print(\"A book is destroyed\") book = Book(\"Inside Steve's Brain\", \"Leander Kahney\", 304) print(book) print(len(book)) del book \u5728\u6211\u4eec\u7684\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a book \u7c7b\u3002 \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4ecb\u7ecd\u56db\u79cd\u7279\u6b8a\u65b9\u6cd5\uff1a __init__() \uff0c __str__() \uff0c __len__() \u548c __del__() \u3002 1 book = Book(\"Inside Steve's Brain\", \"Leander Kahney\", 304) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u79f0\u4e3a __init__() \u65b9\u6cd5\u3002 \u8be5\u65b9\u6cd5\u521b\u5efa Book \u7c7b\u7684\u65b0\u5b9e\u4f8b\u3002 1 print(book) print \u5173\u952e\u5b57\u8c03\u7528 __str__() \u65b9\u6cd5\u3002 \u6b64\u65b9\u6cd5\u5e94\u8fd4\u56de\u5bf9\u8c61\u7684\u975e\u6b63\u5f0f\u5b57\u7b26\u4e32\u8868\u793a\u5f62\u5f0f\u3002 1 print(len(book)) len() \u51fd\u6570\u8c03\u7528 __len__() \u65b9\u6cd5\u3002 \u5c31\u6211\u4eec\u800c\u8a00\uff0c\u6211\u4eec\u6253\u5370\u4e66\u7684\u9875\u6570\u3002 1 del book del \u5173\u952e\u5b57\u5220\u9664\u4e00\u4e2a\u5bf9\u8c61\u3002 \u5b83\u8c03\u7528\u5176 __del__() \u65b9\u6cd5\u3002 \u5728\u4e0b\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5b9e\u73b0\u4e00\u4e2a\u5411\u91cf\u7c7b\u5e76\u6f14\u793a\u5bf9\u5176\u7684\u52a0\u6cd5\u548c\u51cf\u6cd5\u8fd0\u7b97\u3002 vector.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 #!/usr/bin/env python # vector.py class Vector: def __init__(self, data): self.data = data def __str__(self): return repr(self.data) def __add__(self, other): data = [] for j in range(len(self.data)): data.append(self.data[j] + other.data[j]) return Vector(data) def __sub__(self, other): data = [] for j in range(len(self.data)): data.append(self.data[j] - other.data[j]) return Vector(data) x = Vector([1, 2, 3]) y = Vector([3, 0, 2]) print(x + y) print(y - x) \u8be5\u793a\u4f8b\u4ecb\u7ecd\u4e86 __add__ \u548c __sub__ \u65b9\u6cd5\u3002 1 2 3 4 5 6 7 8 9 def __add__(self, other): data = [] for j in range(len(self.data)): data.append(self.data[j] + other.data[j]) return Vector(data) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5b9e\u73b0\u5411\u91cf\u7684\u52a0\u6cd5\u8fd0\u7b97\u3002 \u5f53\u6211\u4eec\u4f7f\u7528 + \u8fd0\u7b97\u7b26\u6dfb\u52a0\u4e24\u4e2a Vector \u5bf9\u8c61\u65f6\uff0c\u5c06\u8c03\u7528 __add__() \u65b9\u6cd5\u3002 \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5c06\u5404\u4e2a\u5411\u91cf\u7684\u6bcf\u4e2a\u6210\u5458\u76f8\u52a0\u3002 1 2 3 $ ./vector.py [4, 2, 5] [2, -2, -1]","title":"Python \u9762\u5411\u5bf9\u8c61\u7f16\u7a0b"},{"location":"pages/python/pytutorial/python-oop/#Python-\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b","text":"\u6709\u4e09\u79cd\u5e7f\u6cdb\u4f7f\u7528\u7684\u7f16\u7a0b\u793a\u4f8b\uff1a\u8fc7\u7a0b\u7f16\u7a0b\uff0c\u51fd\u6570\u7f16\u7a0b\u548c\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b\uff0cPython \u652f\u6301\u6240\u6709\u4e09\u79cd\u7f16\u7a0b\u3002 \u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\uff08OOP\uff09\u662f\u4e00\u79cd\u4f7f\u7528\u5bf9\u8c61\u53ca\u5176\u76f8\u4e92\u4f5c\u7528\u8bbe\u8ba1\u5e94\u7528\u548c\u8ba1\u7b97\u673a\u7a0b\u5e8f\u7684\u7f16\u7a0b\u793a\u4f8b\u3002 OOP \u4e2d\u6709\u4e00\u4e9b\u57fa\u672c\u7684\u7f16\u7a0b\u6982\u5ff5\uff1a \u62bd\u8c61\u5316 \u591a\u6001\u6027 \u5c01\u88c5\u5f62\u5f0f \u7ee7\u627f \u62bd\u8c61\u901a\u8fc7\u5efa\u6a21\u9002\u5408\u8be5\u95ee\u9898\u7684\u7c7b\u6765\u7b80\u5316\u590d\u6742\u7684\u73b0\u5b9e\u3002 \u591a\u6001\u6027\u662f\u5c06\u8fd0\u7b97\u7b26\u6216\u51fd\u6570\u4ee5\u4e0d\u540c\u65b9\u5f0f\u7528\u4e8e\u4e0d\u540c\u6570\u636e\u8f93\u5165\u7684\u8fc7\u7a0b\u3002 \u5c01\u88c5\u5bf9\u5176\u4ed6\u5bf9\u8c61\u9690\u85cf\u4e86\u7c7b\u7684\u5b9e\u73b0\u7ec6\u8282\u3002 \u7ee7\u627f\u662f\u4e00\u79cd\u4f7f\u7528\u5df2\u7ecf\u5b9a\u4e49\u7684\u7c7b\u5f62\u6210\u65b0\u7c7b\u7684\u65b9\u6cd5\u3002","title":"Python \u9762\u5411\u5bf9\u8c61\u7f16\u7a0b"},{"location":"pages/python/pytutorial/python-oop/#Python-\u5bf9\u8c61","text":"Python \u4e2d\u7684\u6240\u6709\u5185\u5bb9\u90fd\u662f\u4e00\u4e2a\u5bf9\u8c61\u3002 \u5bf9\u8c61\u662f Python OOP \u7a0b\u5e8f\u7684\u57fa\u672c\u6784\u5efa\u5757\u3002 object_types.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env python # object_types.py import sys def function(): pass print(type(1)) print(type(\"\")) print(type([])) print(type({})) print(type(())) print(type(object)) print(type(function)) print(type(sys)) \u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u663e\u793a\u6240\u6709\u8fd9\u4e9b\u5b9e\u4f53\u5b9e\u9645\u4e0a\u90fd\u662f\u5bf9\u8c61\u3002 type() \u51fd\u6570\u8fd4\u56de\u6307\u5b9a\u5bf9\u8c61\u7684\u7c7b\u578b\u3002 1 2 3 4 5 6 7 8 9 $ ./object_types.py <class 'int'> <class 'str'> <class 'list'> <class 'dict'> <class 'tuple'> <class 'type'> <class 'function'> <class 'module'> \u6574\u6570\uff0c\u5b57\u7b26\u4e32\uff0c\u5217\u8868\uff0c\u5b57\u5178\uff0c\u5143\u7ec4\uff0c\u51fd\u6570\u548c\u6a21\u5757\u662f Python \u5bf9\u8c61\u3002","title":"Python \u5bf9\u8c61"},{"location":"pages/python/pytutorial/python-oop/#Python-\u7c7b\u5173\u952e\u5b57","text":"\u5148\u524d\u7684\u5bf9\u8c61\u90fd\u662f Python \u7f16\u7a0b\u8bed\u8a00\u7684\u5185\u7f6e\u5bf9\u8c61\u3002 \u7528\u6237\u5b9a\u4e49\u7684\u5bf9\u8c61\u662f\u4f7f\u7528 class \u5173\u952e\u5b57\u521b\u5efa\u7684\u3002 \u8be5\u7c7b\u662f\u5b9a\u4e49\u672a\u6765\u5bf9\u8c61\u6027\u8d28\u7684\u84dd\u56fe\u3002 \u4ece\u7c7b\u4e2d\uff0c\u6211\u4eec\u6784\u9020\u5b9e\u4f8b\u3002 \u5b9e\u4f8b\u662f\u4ece\u7279\u5b9a\u7c7b\u521b\u5efa\u7684\u7279\u5b9a\u5bf9\u8c61\u3002 \u4f8b\u5982\uff0cHuck \u53ef\u80fd\u662f Dog \u7c7b\u7684\u5b9e\u4f8b\u3002 first_object.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python # first_object.py class First: pass fr = First() print(type(fr)) print(type(First)) \u8fd9\u662f\u6211\u4eec\u7684\u5934\u7b49\u8231\u3002 \u8be5\u7c7b\u7684\u4e3b\u4f53\u6682\u65f6\u7559\u7a7a\u3002 \u6309\u7167\u60ef\u4f8b\uff0c\u7ed9\u7c7b\u8d77\u4e00\u4e2a\u4ee5\u5927\u5199\u5b57\u6bcd\u5f00\u5934\u7684\u540d\u79f0\u3002 1 2 class First: pass \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5b9a\u4e49 First \u7c7b\u3002 \u8bf7\u6ce8\u610f\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6240\u6709\u7c7b\u5747\u4ece\u57fa object \u7ee7\u627f\u3002 1 fr = First() \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u521b\u5efa First \u7c7b\u7684\u65b0\u5b9e\u4f8b\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec\u5b9e\u4f8b\u5316\u4e86 First \u7c7b\u3002 fr \u662f\u5bf9\u6211\u4eec\u65b0\u5bf9\u8c61\u7684\u5f15\u7528\u3002 1 2 3 $ ./first_object.py <class '__main__.First'> <class 'type'> \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u770b\u5230 fr \u662f First \u7c7b\u7684\u5b9e\u4f8b\u5bf9\u8c61\u3002 \u5728\u7c7b\u5185\u90e8\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u5c5e\u6027\u548c\u65b9\u6cd5\u3002 \u5c5e\u6027\u662f\u5bf9\u8c61\u7684\u7279\u5f81\u3002 \u4f8b\u5982\uff0c\u8fd9\u53ef\u4ee5\u662f\u96c7\u5458\u7684\u5de5\u8d44\u3002 \u65b9\u6cd5\u5b9a\u4e49\u4e86\u6211\u4eec\u53ef\u4ee5\u5bf9\u5bf9\u8c61\u6267\u884c\u7684\u64cd\u4f5c\u3002 \u4e00\u79cd\u65b9\u6cd5\u53ef\u4ee5\u5b9a\u4e49\u53d6\u6d88\u5e10\u6237\u3002 \u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u5c5e\u6027\u662f\u53d8\u91cf\uff0c\u65b9\u6cd5\u662f\u5728\u7c7b\u5185\u90e8\u5b9a\u4e49\u7684\u51fd\u6570\u3002","title":"Python \u7c7b\u5173\u952e\u5b57"},{"location":"pages/python/pytutorial/python-oop/#Python-\u5bf9\u8c61\u521d\u59cb\u5316","text":"\u79f0\u4e3a __init__() \u7684\u7279\u6b8a\u65b9\u6cd5\u7528\u4e8e\u521d\u59cb\u5316\u5bf9\u8c61\u3002 object_initialization.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python # object_initialization.py class Being: def __init__(self): print(\"Being is initialized\") Being() \u6211\u4eec\u6709\u4e00\u4e2a Being \u7c7b\u3002 \u521b\u5efa\u5bf9\u8c61\u540e\u7acb\u5373\u81ea\u52a8\u8c03\u7528\u7279\u6b8a\u65b9\u6cd5 __init__() \u3002 1 2 $ ./object_initialization.py Being is initialized","title":"Python \u5bf9\u8c61\u521d\u59cb\u5316"},{"location":"pages/python/pytutorial/python-oop/#Python-\u5bf9\u8c61\u5c5e\u6027","text":"\u5c5e\u6027\u662f\u5bf9\u8c61\u7684\u7279\u5f81\u3002 \u5728 __init__() \u65b9\u6cd5\u4e2d\u8bbe\u7f6e\u5c5e\u6027\u3002 attributes.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python # attributes.py class Cat: def __init__(self, name): self.name = name missy = Cat('Missy') lucky = Cat('Lucky') print(missy.name) print(lucky.name) \u5728\u6b64\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a Cat \u7c7b\u3002 \u521b\u5efa\u5bf9\u8c61\u540e\u7acb\u5373\u81ea\u52a8\u8c03\u7528\u7279\u6b8a\u65b9\u6cd5 __init__() \u3002 1 def __init__(self, name): \u7c7b\u5b9a\u4e49\u4e2d\u7684\u6bcf\u4e2a\u65b9\u6cd5\u90fd\u4ee5\u5bf9\u5b9e\u4f8b\u5bf9\u8c61\u7684\u5f15\u7528\u5f00\u5934\u3002 \u6309\u7167\u60ef\u4f8b\uff0c\u5b83\u7684\u540d\u79f0\u4e3a self \u3002 self \u540d\u79f0\u6ca1\u6709\u4ec0\u4e48\u7279\u522b\u7684\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u547d\u540d\u3002 \u7b2c\u4e8c\u4e2a\u53c2\u6570 name \u662f\u81ea\u53d8\u91cf\u3002 \u8be5\u503c\u5728\u7c7b\u521d\u59cb\u5316\u671f\u95f4\u4f20\u9012\u3002 1 self.name = name \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5c06\u5c5e\u6027\u4f20\u9012\u7ed9\u5b9e\u4f8b\u5bf9\u8c61\u3002 1 2 missy = Cat('Missy') lucky = Cat('Lucky') \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u521b\u5efa\u4e24\u4e2a\u5bf9\u8c61\uff1a\u732b Missy \u548c Lucky\u3002 \u53c2\u6570\u7684\u6570\u91cf\u5fc5\u987b\u4e0e\u7c7b\u5b9a\u4e49\u7684 __init__() \u65b9\u6cd5\u76f8\u5bf9\u5e94\u3002 \u201c Missy\u201d\u548c\u201c Lucky\u201d\u5b57\u7b26\u4e32\u6210\u4e3a __init__() \u65b9\u6cd5\u7684 name \u53c2\u6570\u3002 1 2 print(missy.name) print(lucky.name) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u6253\u5370\u4e24\u4e2a\u732b\u5bf9\u8c61\u7684\u5c5e\u6027\u3002 \u4e00\u4e2a\u7c7b\u7684\u6bcf\u4e2a\u5b9e\u4f8b\u53ef\u4ee5\u6709\u81ea\u5df1\u7684\u5c5e\u6027\u3002 1 2 3 $ ./attributes.py Missy Lucky \u53ef\u4ee5\u52a8\u6001\u5206\u914d\u5c5e\u6027\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u5728\u521d\u59cb\u5316\u8fc7\u7a0b\u4e2d\u3002 \u4e0b\u4e00\u4e2a\u793a\u4f8b\u5bf9\u6b64\u8fdb\u884c\u4e86\u8bf4\u660e\u3002 attributes_dynamic.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python # attributes_dynamic.py class Person: pass p = Person() p.age = 24 p.name = \"Peter\" print(\"{0} is {1} years old\".format(p.name, p.age)) \u6211\u4eec\u5b9a\u4e49\u5e76\u521b\u5efa\u4e00\u4e2a\u7a7a\u7684 Person \u7c7b\u3002 1 2 p.age = 24 p.name = \"Peter\" \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u52a8\u6001\u521b\u5efa\u4e24\u4e2a\u5c5e\u6027\uff1aage \u548c name\u3002 1 2 $ ./attributes_dynamic.py 24 is Peter years old","title":"Python \u5bf9\u8c61\u5c5e\u6027"},{"location":"pages/python/pytutorial/python-oop/#Python-\u7c7b\u5c5e\u6027","text":"\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u4e00\u76f4\u5728\u8ba8\u8bba\u5b9e\u4f8b\u5c5e\u6027\u3002 \u5728 Python \u4e2d\uff0c\u8fd8\u6709\u6240\u8c13\u7684\u7c7b\u5bf9\u8c61\u5c5e\u6027\u3002 \u7c7b\u7684\u6240\u6709\u5b9e\u4f8b\u7684\u7c7b\u5bf9\u8c61\u5c5e\u6027\u90fd\u76f8\u540c\u3002 class_attribute.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #!/usr/bin/env python # class_attribute.py class Cat: species = 'mammal' def __init__(self, name, age): self.name = name self.age = age missy = Cat('Missy', 3) lucky = Cat('Lucky', 5) print(missy.name, missy.age) print(lucky.name, lucky.age) print(Cat.species) print(missy.__class__.species) print(lucky.__class__.species) \u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\u4e24\u53ea\u5177\u6709\u7279\u5b9a name \u548c age \u5c5e\u6027\u7684\u732b\u3002 \u4e24\u53ea\u732b\u90fd\u6709\u4e00\u4e9b\u5171\u540c\u4e4b\u5904\u3002 \u5c0f\u59d0\u548c\u5e78\u8fd0\u8005\u90fd\u662f\u54fa\u4e73\u52a8\u7269\u3002 \u8fd9\u53cd\u6620\u5728\u7c7b\u7ea7\u522b\u5c5e\u6027 species \u4e2d\u3002 \u8be5\u5c5e\u6027\u662f\u5728\u7c7b\u4e3b\u4f53\u4e2d\u7684\u4efb\u4f55\u65b9\u6cd5\u540d\u79f0\u4e4b\u5916\u5b9a\u4e49\u7684\u3002 1 2 print(Cat.species) print(missy.__class__.species) \u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u8bbf\u95ee\u7c7b\u5bf9\u8c61\u5c5e\u6027\uff1a\u901a\u8fc7 Cat \u7c7b\u7684\u540d\u79f0\uff0c\u6216\u501f\u52a9\u7279\u6b8a\u7684 __class__ \u5c5e\u6027\u3002 1 2 3 4 5 6 $ ./class_attribute.py Missy 3 Lucky 5 mammal mammal mammal","title":"Python \u7c7b\u5c5e\u6027"},{"location":"pages/python/pytutorial/python-oop/#Python-\u65b9\u6cd5","text":"\u65b9\u6cd5\u662f\u5728\u7c7b\u4e3b\u4f53\u5185\u5b9a\u4e49\u7684\u51fd\u6570\u3002 \u5b83\u4eec\u7528\u4e8e\u901a\u8fc7\u5bf9\u8c61\u7684\u5c5e\u6027\u6267\u884c\u64cd\u4f5c\u3002 \u5728 OOP \u8303\u5f0f\u7684\u5c01\u88c5\u6982\u5ff5\u4e2d\uff0c\u65b9\u6cd5\u81f3\u5173\u91cd\u8981\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u7684 AccessDatabase \u7c7b\u4e2d\u53ef\u80fd\u6709\u4e00\u4e2a connect() \u65b9\u6cd5\u3002 \u6211\u4eec\u65e0\u9700\u77e5\u9053\u65b9\u6cd5\u8fde\u63a5\u5982\u4f55\u51c6\u786e\u5730\u8fde\u63a5\u5230\u6570\u636e\u5e93\u3002 \u6211\u4eec\u53ea\u77e5\u9053\u5b83\u7528\u4e8e\u8fde\u63a5\u6570\u636e\u5e93\u3002 \u8fd9\u5bf9\u4e8e\u5212\u5206\u7f16\u7a0b\u4e2d\u7684\u804c\u8d23\u81f3\u5173\u91cd\u8981\uff0c\u5c24\u5176\u662f\u5728\u5927\u578b\u5e94\u7528\u4e2d\u3002 methods.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #!/usr/bin/env python # methods.py class Circle: pi = 3.141592 def __init__(self, radius=1): self.radius = radius def area(self): return self.radius * self.radius * Circle.pi def setRadius(self, radius): self.radius = radius def getRadius(self): return self.radius c = Circle() c.setRadius(5) print(c.getRadius()) print(c.area()) \u5728\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a Circle \u7c7b\u3002 \u6211\u4eec\u5b9a\u4e49\u4e86\u4e09\u79cd\u65b0\u65b9\u6cd5\u3002 1 2 def area(self): return self.radius * self.radius * Circle.pi area() \u65b9\u6cd5\u8fd4\u56de\u5706\u7684\u9762\u79ef\u3002 1 2 def setRadius(self, radius): self.radius = radius setRadius() \u65b9\u6cd5\u4e3a radius \u5c5e\u6027\u8bbe\u7f6e\u65b0\u503c\u3002 1 2 def getRadius(self): return self.radius getRadius() \u65b9\u6cd5\u8fd4\u56de\u5f53\u524d\u534a\u5f84\u3002 1 c.setRadius(5) \u5728\u5b9e\u4f8b\u5bf9\u8c61\u4e0a\u8c03\u7528\u8be5\u65b9\u6cd5\u3002 c \u5bf9\u8c61\u4e0e\u7c7b\u5b9a\u4e49\u7684 self \u53c2\u6570\u914d\u5bf9\u3002 \u6570\u5b57 5 \u4e0e radius \u53c2\u6570\u914d\u5bf9\u3002 1 2 3 $ ./methods.py 5 78.5398 \u5728 Python \u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e24\u79cd\u65b9\u5f0f\u8c03\u7528\u65b9\u6cd5\u3002 \u6709\u6709\u754c\u7684\u548c\u65e0\u754c\u7684\u65b9\u6cd5\u8c03\u7528\u3002 bound_unbound_methods.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/env python # bound_unbound_methods.py class Methods: def __init__(self): self.name = 'Methods' def getName(self): return self.name m = Methods() print(m.getName()) print(Methods.getName(m)) \u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6f14\u793a\u4e86\u4e24\u4e2a\u65b9\u6cd5\u8c03\u7528\u3002 1 print(m.getName()) \u8fd9\u662f\u7ed1\u5b9a\u7684\u65b9\u6cd5\u8c03\u7528\u3002 Python \u89e3\u91ca\u5668\u4f1a\u81ea\u52a8\u5c06 m \u5b9e\u4f8b\u4e0e self \u53c2\u6570\u914d\u5bf9\u3002 1 print(Methods.getName(m)) \u8fd9\u662f\u65e0\u754c\u7684\u65b9\u6cd5\u8c03\u7528\u3002 \u5b9e\u4f8b\u5bf9\u8c61\u5df2\u663e\u5f0f\u63d0\u4f9b\u7ed9 getName() \u65b9\u6cd5\u3002 1 2 3 $ ./bound_unbound_methods.py Methods Methods","title":"Python \u65b9\u6cd5"},{"location":"pages/python/pytutorial/python-oop/#Python-\u7ee7\u627f","text":"\u7ee7\u627f\u662f\u4e00\u79cd\u4f7f\u7528\u5df2\u7ecf\u5b9a\u4e49\u7684\u7c7b\u5f62\u6210\u65b0\u7c7b\u7684\u65b9\u6cd5\u3002 \u65b0\u5f62\u6210\u7684\u7c7b\u79f0\u4e3a\u6d3e\u751f\u7684\u7c7b\uff0c\u6211\u4eec\u4ece\u4e2d\u884d\u751f\u7684\u7c7b\u79f0\u4e3a\u57fa\u7c7b\u3002 \u7ee7\u627f\u7684\u91cd\u8981\u597d\u5904\u662f\u4ee3\u7801\u91cd\u7528\u548c\u964d\u4f4e\u7a0b\u5e8f\u7684\u590d\u6742\u6027\u3002 \u6d3e\u751f\u7c7b\uff08\u540e\u4ee3\uff09\u5c06\u8986\u76d6\u6216\u6269\u5c55\u57fa\u7c7b\uff08\u7956\u5148\uff09\u7684\u529f\u80fd\u3002 inheritance.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #!/usr/bin/env python # inheritance.py class Animal: def __init__(self): print(\"Animal created\") def whoAmI(self): print(\"Animal\") def eat(self): print(\"Eating\") class Dog(Animal): def __init__(self): super().__init__() print(\"Dog created\") def whoAmI(self): print(\"Dog\") def bark(self): print(\"Woof!\") d = Dog() d.whoAmI() d.eat() d.bark() \u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\u4e24\u4e2a\u7c7b\uff1a Animal \u548c Dog \u3002 Animal \u662f\u57fa\u7c7b\uff0c Dog \u662f\u6d3e\u751f\u7c7b\u3002 \u6d3e\u751f\u7c7b\u7ee7\u627f\u57fa\u7c7b\u7684\u529f\u80fd\u3002 \u901a\u8fc7 eat() \u65b9\u6cd5\u663e\u793a\u3002 \u6d3e\u751f\u7684\u7c7b\u4fee\u6539\u4e86\u57fa\u7c7b\u7684\u73b0\u6709\u884c\u4e3a\uff0c\u5982 whoAmI() \u65b9\u6cd5\u6240\u793a\u3002 \u6700\u540e\uff0c\u6d3e\u751f\u7c7b\u901a\u8fc7\u5b9a\u4e49\u65b0\u7684 bark() \u65b9\u6cd5\u6765\u6269\u5c55\u57fa\u7c7b\u7684\u529f\u80fd\u3002 1 2 3 4 5 6 class Dog(Animal): def __init__(self): super().__init__() print(\"Dog created\") \u6211\u4eec\u5c06\u7956\u5148\u7c7b\u653e\u5728\u5b50\u5b59\u7c7b\u540d\u79f0\u4e4b\u540e\u7684\u5706\u62ec\u53f7\u4e2d\u3002 \u5982\u679c\u6d3e\u751f\u7c7b\u63d0\u4f9b\u4e86\u81ea\u5df1\u7684 __init__() \u65b9\u6cd5\uff0c\u5e76\u4e14\u6211\u4eec\u60f3\u8c03\u7528\u7236\u6784\u9020\u51fd\u6570\uff0c\u5219\u5fc5\u987b\u501f\u52a9 super \u51fd\u6570\u663e\u5f0f\u8c03\u7528\u57fa\u7c7b __init__() \u65b9\u6cd5\u3002 1 2 3 4 5 6 $ ./inherit.py Animal created Dog created Dog Eating Woof!","title":"Python \u7ee7\u627f"},{"location":"pages/python/pytutorial/python-oop/#Python-\u591a\u6001\u6027","text":"\u591a\u6001\u6027\u662f\u5bf9\u4e0d\u540c\u7684\u6570\u636e\u8f93\u5165\u4ee5\u4e0d\u540c\u65b9\u5f0f\u4f7f\u7528\u8fd0\u7b97\u7b26\u6216\u51fd\u6570\u7684\u8fc7\u7a0b\u3002 \u5b9e\u9645\u4e0a\uff0c\u591a\u6001\u6027\u610f\u5473\u7740\u5982\u679c\u7c7b B \u4ece\u7c7b A \u7ee7\u627f\uff0c\u5219\u4e0d\u5fc5\u7ee7\u627f\u5173\u4e8e\u7c7b A \u7684\u6240\u6709\u5185\u5bb9\uff1b \u5b83\u53ef\u4ee5\u5b8c\u6210 A \u7c7b\u6240\u505a\u7684\u67d0\u4e9b\u4e8b\u60c5\u3002 basic_polymorphism.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python # basic_polymorphism.py a = \"alfa\" b = (1, 2, 3, 4) c = ['o', 'm', 'e', 'g', 'a'] print(a[2]) print(b[1]) print(c[3]) Python \u5728\u5185\u7f6e\u7c7b\u578b\u4e2d\u5e7f\u6cdb\u4f7f\u7528\u4e86\u591a\u6001\u3002 \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5bf9\u4e09\u79cd\u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b\u4f7f\u7528\u76f8\u540c\u7684\u7d22\u5f15\u8fd0\u7b97\u7b26\u3002 1 2 3 4 $ ./basic_polymorphism.py f 2 g \u591a\u6001\u6027\u5728\u5904\u7406\u7ee7\u627f\u65f6\u6700\u5e38\u7528\u3002 polymorphism.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #!/usr/bin/env python # polymorphism.py class Animal: def __init__(self, name=''): self.name = name def talk(self): pass class Cat(Animal): def talk(self): print(\"Meow!\") class Dog(Animal): def talk(self): print(\"Woof!\") a = Animal() a.talk() c = Cat(\"Missy\") c.talk() d = Dog(\"Rocky\") d.talk() \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u6709\u4e24\u79cd\uff1a\u72d7\u548c\u732b\u3002 \u4e24\u8005\u90fd\u662f\u52a8\u7269\u3002 Dog \u7c7b\u548c Cat \u7c7b\u7ee7\u627f\u4e86 Animal \u7c7b\u3002 \u5b83\u4eec\u5177\u6709 talk() \u65b9\u6cd5\uff0c\u53ef\u4ee5\u4e3a\u5b83\u4eec\u63d0\u4f9b\u4e0d\u540c\u7684\u8f93\u51fa\u3002 1 2 3 $ ./polymorphism.py Meow! Woof!","title":"Python \u591a\u6001\u6027"},{"location":"pages/python/pytutorial/python-oop/#Python-\u7279\u6b8a\u65b9\u6cd5","text":"Python \u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u7c7b\u53ef\u4ee5\u4f7f\u7528\u7279\u6b8a\u7684\u65b9\u6cd5\u540d\u79f0\u6765\u5b9e\u73b0\u67d0\u4e9b\u64cd\u4f5c\u3002 \u8fd9\u4e9b\u65b9\u6cd5\u4e0d\u662f\u76f4\u63a5\u8c03\u7528\uff0c\u800c\u662f\u901a\u8fc7\u7279\u5b9a\u7684\u8bed\u8a00\u8bed\u6cd5\u8c03\u7528\u3002 \u8fd9\u7c7b\u4f3c\u4e8e\u5728 C++ \u6216 Ruby \u4e2d\u6240\u8c13\u7684\u8fd0\u7b97\u7b26\u91cd\u8f7d\u3002 special_methods.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #!/usr/bin/env python # special_methods.py class Book: def __init__(self, title, author, pages): print(\"A book is created\") self.title = title self.author = author self.pages = pages def __str__(self): return \"Title:{0} , author:{1}, pages:{2} \".format( self.title, self.author, self.pages) def __len__(self): return self.pages def __del__(self): print(\"A book is destroyed\") book = Book(\"Inside Steve's Brain\", \"Leander Kahney\", 304) print(book) print(len(book)) del book \u5728\u6211\u4eec\u7684\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a book \u7c7b\u3002 \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4ecb\u7ecd\u56db\u79cd\u7279\u6b8a\u65b9\u6cd5\uff1a __init__() \uff0c __str__() \uff0c __len__() \u548c __del__() \u3002 1 book = Book(\"Inside Steve's Brain\", \"Leander Kahney\", 304) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u79f0\u4e3a __init__() \u65b9\u6cd5\u3002 \u8be5\u65b9\u6cd5\u521b\u5efa Book \u7c7b\u7684\u65b0\u5b9e\u4f8b\u3002 1 print(book) print \u5173\u952e\u5b57\u8c03\u7528 __str__() \u65b9\u6cd5\u3002 \u6b64\u65b9\u6cd5\u5e94\u8fd4\u56de\u5bf9\u8c61\u7684\u975e\u6b63\u5f0f\u5b57\u7b26\u4e32\u8868\u793a\u5f62\u5f0f\u3002 1 print(len(book)) len() \u51fd\u6570\u8c03\u7528 __len__() \u65b9\u6cd5\u3002 \u5c31\u6211\u4eec\u800c\u8a00\uff0c\u6211\u4eec\u6253\u5370\u4e66\u7684\u9875\u6570\u3002 1 del book del \u5173\u952e\u5b57\u5220\u9664\u4e00\u4e2a\u5bf9\u8c61\u3002 \u5b83\u8c03\u7528\u5176 __del__() \u65b9\u6cd5\u3002 \u5728\u4e0b\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5b9e\u73b0\u4e00\u4e2a\u5411\u91cf\u7c7b\u5e76\u6f14\u793a\u5bf9\u5176\u7684\u52a0\u6cd5\u548c\u51cf\u6cd5\u8fd0\u7b97\u3002 vector.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 #!/usr/bin/env python # vector.py class Vector: def __init__(self, data): self.data = data def __str__(self): return repr(self.data) def __add__(self, other): data = [] for j in range(len(self.data)): data.append(self.data[j] + other.data[j]) return Vector(data) def __sub__(self, other): data = [] for j in range(len(self.data)): data.append(self.data[j] - other.data[j]) return Vector(data) x = Vector([1, 2, 3]) y = Vector([3, 0, 2]) print(x + y) print(y - x) \u8be5\u793a\u4f8b\u4ecb\u7ecd\u4e86 __add__ \u548c __sub__ \u65b9\u6cd5\u3002 1 2 3 4 5 6 7 8 9 def __add__(self, other): data = [] for j in range(len(self.data)): data.append(self.data[j] + other.data[j]) return Vector(data) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5b9e\u73b0\u5411\u91cf\u7684\u52a0\u6cd5\u8fd0\u7b97\u3002 \u5f53\u6211\u4eec\u4f7f\u7528 + \u8fd0\u7b97\u7b26\u6dfb\u52a0\u4e24\u4e2a Vector \u5bf9\u8c61\u65f6\uff0c\u5c06\u8c03\u7528 __add__() \u65b9\u6cd5\u3002 \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5c06\u5404\u4e2a\u5411\u91cf\u7684\u6bcf\u4e2a\u6210\u5458\u76f8\u52a0\u3002 1 2 3 $ ./vector.py [4, 2, 5] [2, -2, -1]","title":"Python \u7279\u6b8a\u65b9\u6cd5"},{"location":"pages/python/pytutorial/python-operators/","text":"Python \u8fd0\u7b97\u7b26 \u00b6 Python \u8fd0\u7b97\u7b26 \u662f\u7279\u6b8a\u7b26\u53f7\uff0c\u8868\u793a\u5df2\u6267\u884c\u67d0\u4e2a\u8fc7\u7a0b\u3002 \u7f16\u7a0b\u8bed\u8a00\u7684\u8fd0\u7b97\u7b26\u6765\u81ea\u6570\u5b66\uff0c\u5e94\u7528\u5904\u7406\u6570\u636e\uff0c\u8fd0\u7b97\u7b26\u7528\u4e8e\u5904\u7406\u6570\u636e\u3002 \u5728 Python \u4e2d\uff0c\u6211\u4eec\u6709\u51e0\u79cd\u7c7b\u578b\u7684\u8fd0\u7b97\u7b26\uff1a \u7b97\u672f\u8fd0\u7b97\u7b26 \u5e03\u5c14\u8fd0\u7b97\u7b26 \u5173\u7cfb\u8fd0\u7b97\u7b26 \u6309\u4f4d\u8fd0\u7b97\u7b26 \u4e00\u4e2a\u8fd0\u7b97\u7b26\u53ef\u4ee5\u6709\u4e00\u4e2a\u6216\u4e24\u4e2a\u64cd\u4f5c\u6570\u3002 \u64cd\u4f5c\u6570\u662f\u8fd0\u7b97\u7b26\u7684\u8f93\u5165\uff08\u53c2\u6570\uff09\u4e4b\u4e00\u3002 \u4ec5\u4f7f\u7528\u4e00\u4e2a\u64cd\u4f5c\u6570\u7684\u90a3\u4e9b\u8fd0\u7b97\u7b26\u79f0\u4e3a\u4e00\u5143\u8fd0\u7b97\u7b26\u3002 \u90a3\u4e9b\u4f7f\u7528\u4e24\u4e2a\u64cd\u4f5c\u6570\u7684\u5bf9\u8c61\u79f0\u4e3a\u4e8c\u8fdb\u5236\u8fd0\u7b97\u7b26\u3002 +\u548c-\u53ef\u4ee5\u662f\u52a0\u51cf\u8fd0\u7b97\u7b26\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u5143\u7b26\u53f7\u8fd0\u7b97\u7b26\u3002 \u8fd9\u53d6\u51b3\u4e8e\u5b9e\u9645\u60c5\u51b5\u3002 1 2 3 4 5 >>> 2 2 >>> +2 2 >>> \u52a0\u53f7\u53ef\u4ee5\u7528\u6765\u8868\u793a\u6211\u4eec\u6709\u4e00\u4e2a\u6b63\u6570\u3002 \u4f46\u662f\u5b83\u901a\u5e38\u4e0d\u88ab\u4f7f\u7528\u3002 \u51cf\u53f7\u66f4\u6539\u503c\u7684\u7b26\u53f7\u3002 1 2 3 4 5 >>> a = 1 >>> -a -1 >>> -(-a) 1 \u4e58\u6cd5\u548c\u52a0\u6cd5\u8fd0\u7b97\u7b26\u662f\u4e8c\u8fdb\u5236\u8fd0\u7b97\u7b26\u7684\u793a\u4f8b\u3002 \u5b83\u4eec\u4e0e\u4e24\u4e2a\u64cd\u4f5c\u6570\u4e00\u8d77\u4f7f\u7528\u3002 1 2 3 4 >>> 3 * 3 9 >>> 3 + 3 6 Python \u8d4b\u503c\u8fd0\u7b97\u7b26 \u00b6 \u8d4b\u503c\u8fd0\u7b97\u7b26 = \u5c06\u503c\u8d4b\u7ed9\u53d8\u91cf\u3002 \u5728\u6570\u5b66\u4e2d\uff0c = \u8fd0\u7b97\u7b26\u5177\u6709\u4e0d\u540c\u7684\u542b\u4e49\u3002 \u5728\u7b49\u5f0f\u4e2d\uff0c = \u8fd0\u7b97\u7b26\u662f\u4e00\u4e2a\u76f8\u7b49\u8fd0\u7b97\u7b26\u3002 \u7b49\u5f0f\u7684\u5de6\u4fa7\u7b49\u4e8e\u53f3\u4fa7\u3002 1 2 3 >>> x = 1 >>> x 1 \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4e3a x \u53d8\u91cf\u5206\u914d\u4e00\u4e2a\u6570\u5b57\u3002 1 2 3 >>> x = x + 1 >>> x 2 \u5148\u524d\u7684\u8868\u8fbe\u5f0f\u5728\u6570\u5b66\u4e0a\u6ca1\u6709\u610f\u4e49\u3002 \u4f46\u8fd9\u5728\u7f16\u7a0b\u4e2d\u662f\u5408\u6cd5\u7684\u3002 \u8be5\u8868\u8fbe\u5f0f\u610f\u5473\u7740\u6211\u4eec\u5411 x \u53d8\u91cf\u52a0 1\u3002 \u53f3\u8fb9\u7b49\u4e8e 2\uff0c\u5e76\u4e14 2 \u5206\u914d\u7ed9 x \u3002 1 2 3 >>> a = b = c = 4 >>> print(a, b, c) 4 4 4 \u53ef\u4ee5\u4e3a\u591a\u4e2a\u53d8\u91cf\u5206\u914d\u4e00\u4e2a\u503c\u3002 1 2 3 >>> 3 = y File \"<stdin>\", line 1 SyntaxError: can't assign to literal \u6b64\u4ee3\u7801\u793a\u4f8b\u5bfc\u81f4\u8bed\u6cd5\u9519\u8bef\u3002 \u6211\u4eec\u65e0\u6cd5\u4e3a\u6587\u5b57\u5206\u914d\u503c\u3002 Python \u7b97\u672f\u8fd0\u7b97\u7b26 \u00b6 \u4e0b\u8868\u662f Python \u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u7b97\u672f\u8fd0\u7b97\u7b26\u8868\u3002 \u7b26\u53f7 \u540d\u79f0 `+` \u52a0\u6210 `-` \u51cf\u6cd5 `*` \u4e58\u6cd5 `/` \u9664\u6cd5 `//` \u6574\u6570\u9664\u6cd5 `%` \u6a21\u6570 `**` \u4e58\u65b9 \u4ee5\u4e0b\u793a\u4f8b\u663e\u793a\u4e86\u7b97\u672f\u8fd0\u7b97\u3002 arithmetic.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env python # arithmetic.py a = 10 b = 11 c = 12 add = a + b + c sub = c - a mult = a * b div = c / 3 power = a ** 2 print(add, sub, mult, div) print(power) \u6240\u6709\u8fd9\u4e9b\u90fd\u662f\u6570\u5b66\u4e0a\u5df2\u77e5\u7684\u8fd0\u7b97\u7b26\u3002 1 2 3 $ ./arithmetic.py 33 2 110 4.0 100 \u5171\u6709\u4e09\u4f4d\u8fd0\u7b97\u7b26\u8d1f\u8d23\u90e8\u95e8\u5212\u5206\u3002 division.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python # division.py print(9 / 3) print(9 / 4) print(9 // 4) print(9 % 4) \u8be5\u793a\u4f8b\u6f14\u793a\u4e86\u9664\u6cd5\u8fd0\u7b97\u7b26\u3002 1 print(9 / 4) \u7ed3\u679c\u4e3a 2.25\u3002 \u5728 Python 2.x \u4e2d\uff0c/\u8fd0\u7b97\u7b26\u662f\u6574\u6570\u9664\u6cd5\u8fd0\u7b97\u7b26\u3002 \u8fd9\u5728 Python 3 \u4e2d\u5df2\u66f4\u6539\u3002\u5728 Python 3 \u4e2d\uff0c/\u8fd0\u7b97\u7b26\u8fd4\u56de\u4e00\u4e2a\u5341\u8fdb\u5236\u6570\u3002 1 print(9 // 4) //\u8fd0\u7b97\u7b26\u662f Python 3 \u4e2d\u7684\u6574\u6570\u8fd0\u7b97\u7b26\u3002 1 print(9 % 4) % \u8fd0\u7b97\u7b26\u79f0\u4e3a\u6a21\u8fd0\u7b97\u7b26\u3002 \u5b83\u627e\u5230\u4e00\u4e2a\u6570\u9664\u4ee5\u53e6\u4e00\u4e2a\u7684\u4f59\u6570\u3002 9 % 4 \uff0c9 \u6a21 4 \u4e3a 1\uff0c\u56e0\u4e3a 4 \u4e24\u6b21\u8fdb\u5165 9 \u4e14\u4f59\u6570\u4e3a 1\u3002 1 2 3 4 5 $ ./division.py 3.0 2.25 2 1 1 2 >>> 'return' + 'of' + 'the' + 'king' 'returnoftheking' \u52a0\u6cd5\u8fd0\u7b97\u7b26\u8fd8\u53ef\u7528\u4e8e\u8fde\u63a5\u5b57\u7b26\u4e32\u3002 1 2 3 4 >>> 3 + ' apples' Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: unsupported operand type(s) for +: 'int' and 'str' \u6211\u4eec\u4e0d\u80fd\u6dfb\u52a0\u6574\u6570\u548c\u5b57\u7b26\u4e32\u3002 \u8fd9\u5bfc\u81f4 TypeError \u3002 1 2 >>> str(3) + ' apples' '3 apples' \u4e3a\u4e86\u4f7f\u793a\u4f8b\u751f\u6548\uff0c\u5fc5\u987b\u4f7f\u7528 str() \u51fd\u6570\u5c06\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u4e58\u6cd5\u8fd0\u7b97\u7b26\u53ef\u4ee5\u4e0e\u5b57\u7b26\u4e32\u548c\u6570\u5b57\u4e00\u8d77\u4f7f\u7528\u3002 1 2 >>> 'dollar ' * 5 'dollar dollar dollar dollar dollar ' Python \u5e03\u5c14\u8fd0\u7b97\u7b26 \u00b6 \u5728 Python \u4e2d\uff0c\u6211\u4eec\u5177\u6709 and \uff0c or \u548c not \u5e03\u5c14\u8fd0\u7b97\u7b26\u3002 \u4f7f\u7528\u5e03\u5c14\u8fd0\u7b97\u7b26\uff0c\u6211\u4eec\u53ef\u4ee5\u6267\u884c\u903b\u8f91\u8fd0\u7b97\u3002 \u8fd9\u4e9b\u6700\u5e38\u4e0e if \u548c while \u5173\u952e\u5b57\u4e00\u8d77\u4f7f\u7528\u3002 andop.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python # andop.py print(True and True) print(True and False) print(False and True) print(False and False) \u6b64\u793a\u4f8b\u663e\u793a\u4e86\u903b\u8f91\u548c\u8fd0\u7b97\u7b26\u3002 \u4ec5\u5f53\u4e24\u4e2a\u64cd\u4f5c\u6570\u5747\u4e3a True \u65f6\uff0c\u903b\u8f91\u548c\u8fd0\u7b97\u7b26\u624d\u5bf9 True \u6c42\u503c\u3002 1 2 3 4 5 $ ./andop.py True False False False \u5982\u679c\u4e24\u4e2a\u64cd\u4f5c\u6570\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u4e3a True \uff0c\u5219\u903b\u8f91\u6216\u8fd0\u7b97\u7b26\u6c42\u503c\u4e3a True \u3002 orop.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python # orop.py print(True or True) print(True or False) print(False or True) print(False or False) \u5982\u679c\u8fd0\u7b97\u7b26\u7684\u4e00\u65b9\u4e3a True \uff0c\u5219\u64cd\u4f5c\u7684\u7ed3\u679c\u4e3a True \u3002 1 2 3 4 5 $ ./orop.py True True True False \u5426\u5b9a\u8fd0\u7b97\u7b26 not \u4f7f True False \u548c False True \u3002 negation.py 1 2 3 4 5 6 7 #!/usr/bin/env python # negation.py print(not False) print(not True) print(not ( 4 < 3 )) \u8be5\u793a\u4f8b\u663e\u793a\u4e86 not \u8fd0\u7b97\u7b26\u7684\u4f5c\u7528\u3002 1 2 3 4 $ ./negation.py True False True \u5e76\u4e14\uff0c\u6216\u8005\u5bf9\u77ed\u8def\u8fdb\u884c\u4e86\u8bc4\u4f30\u3002 \u77ed\u8def\u8bc4\u4f30\u610f\u5473\u7740\u4ec5\u5f53\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e0d\u8db3\u4ee5\u786e\u5b9a\u8868\u8fbe\u5f0f\u7684\u503c\u65f6\uff0c\u624d\u8bc4\u4f30\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff1a\u5f53\u548c\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u8bc4\u4f30\u4e3a false \u65f6\uff0c\u603b\u503c\u5fc5\u987b\u4e3a false\uff1b \u5f53\u6216\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a true \u65f6\uff0c\u603b\u503c\u5fc5\u987b\u4e3a true\u3002 \u4ee5\u4e0b\u793a\u4f8b\u6f14\u793a\u4e86\u7b80\u77ed\u7684\u8bfe\u65f6\u8bc4\u4f30\u3002 short_circuit.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python # short_circuit.py x = 10 y = 0 if (y != 0 and x/y < 100): print(\"a small value\") \u8868\u8fbe\u5f0f\u7684\u7b2c\u4e00\u90e8\u5206\u8ba1\u7b97\u4e3a False \u3002 \u8868\u8fbe\u5f0f\u7684\u7b2c\u4e8c\u90e8\u5206\u4e0d\u8ba1\u7b97\u3002 \u5426\u5219\uff0c\u6211\u4eec\u5c06\u5f97\u5230 ZeroDivisionError \u3002 Python \u5173\u7cfb\u8fd0\u7b97\u7b26 \u00b6 \u5173\u7cfb\u8fd0\u7b97\u7b26\u7528\u4e8e\u6bd4\u8f83\u503c\u3002 \u8fd9\u4e9b\u8fd0\u7b97\u7b26\u603b\u662f\u4ea7\u751f\u5e03\u5c14\u503c\u3002 \u7b26\u53f7 \u542b\u4e49 ` < ` \u5c0f\u4e8e ` < =` \u5c0f\u4e8e\u6216\u7b49\u4e8e `>` \u5927\u4e8e `>=` \u5927\u4e8e\u6216\u7b49\u4e8e `==` \u7b49\u4e8e `!=` \u4e0d\u7b49\u4e8e `is` \u5bf9\u8c61\u8eab\u4efd `is not` \u5426\u5b9a\u5bf9\u8c61\u8eab\u4efd \u4e0a\u8868\u663e\u793a\u4e86 Python \u5173\u7cfb\u8fd0\u7b97\u7b26\u3002 1 2 3 4 5 6 >>> 3 < 4 True >>> 4 == 3 False >>> 4 >= 3 True \u5982\u524d\u6240\u8ff0\uff0c\u5173\u7cfb\u8fd0\u7b97\u7b26\u8fd4\u56de\u5e03\u5c14\u503c\uff1a True \u6216 False \u3002 \u6ce8\u610f\uff0c\u5173\u7cfb\u8fd0\u7b97\u7b26\u4e0d\u9650\u4e8e\u6570\u5b57\u3002 \u6211\u4eec\u4e5f\u53ef\u4ee5\u5c06\u5b83\u4eec\u7528\u4e8e\u5176\u4ed6\u5bf9\u8c61\u3002 \u5c3d\u7ba1\u5b83\u4eec\u53ef\u80fd\u5e76\u4e0d\u603b\u662f\u6709\u610f\u4e49\u7684\u3002 1 2 3 4 >>> \"six\" == \"six\" True >>> 'a' < 'b' True \u6211\u4eec\u4e5f\u53ef\u4ee5\u6bd4\u8f83\u5b57\u7b26\u4e32\u5bf9\u8c61\u3002 1 >>> 'a' < 'b' \u8fd9\u91cc\u5230\u5e95\u53d1\u751f\u4e86\u4ec0\u4e48\uff1f \u8ba1\u7b97\u673a\u4e0d\u77e5\u9053\u5b57\u7b26\u6216\u5b57\u7b26\u4e32\u3002 \u5bf9\u4e8e\u4ed6\u4eec\u6765\u8bf4\uff0c\u4e00\u5207\u90fd\u53ea\u662f\u6570\u5b57\u3002 \u5b57\u7b26\u662f\u5b58\u50a8\u5728\u7279\u5b9a\u8868\u4e2d\u7684\u7279\u6b8a\u6570\u5b57\uff0c\u4f8b\u5982 ASCII\u3002 1 2 3 4 >>> 'a' > 6 Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: unorderable types: str() > int() \u5728\u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b\u4e0a\u4e0d\u80fd\u4f7f\u7528\u5173\u7cfb\u8fd0\u7b97\u7b26\u3002 \u8be5\u4ee3\u7801\u5bfc\u81f4\u4e00\u4e2a TypeError \u3002 compare.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python # compare.py print('a' < 'b') print(\"a is:\", ord('a')) print(\"b is:\", ord('b')) \u5728\u5185\u90e8\uff0ca \u548c b \u5b57\u7b26\u662f\u6570\u5b57\u3002 \u56e0\u6b64\uff0c\u5f53\u6211\u4eec\u6bd4\u8f83\u4e24\u4e2a\u5b57\u7b26\u65f6\uff0c\u6211\u4eec\u5c06\u6bd4\u8f83\u5b83\u4eec\u7684\u5b58\u50a8\u6570\u5b57\u3002 \u5185\u7f6e\u7684 ord() \u51fd\u6570\u8fd4\u56de\u5355\u4e2a\u5b57\u7b26\u7684 ASCII \u503c\u3002 1 2 3 4 $ ./compare.py True a is: 97 b is: 98 \u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u6bd4\u8f83\u4e24\u4e2a\u6570\u5b57\uff1a97 \u548c 98\u3002 1 2 >>> \"ab\" > \"aa\" True \u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u5305\u542b\u66f4\u591a\u5b57\u7b26\u7684\u5b57\u7b26\u4e32\u3002 \u5982\u679c\u524d\u51e0\u4e2a\u5b57\u7b26\u76f8\u7b49\uff0c\u6211\u4eec\u5c06\u6bd4\u8f83\u4e0b\u4e00\u4e2a\u5b57\u7b26\u3002 \u5728\u6211\u4eec\u7684\u60c5\u51b5\u4e0b\uff0c\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\u7684 b \u5b57\u7b26\u7684\u503c\u6bd4 a \u5b57\u7b26\u5927\u3002 \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u201c ab\u201d\u5b57\u7b26\u4e32\u5927\u4e8e\u201c aa\u201d\u5b57\u7b26\u4e32\u7684\u539f\u56e0\u3002 \u5f53\u7136\uff0c\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u6bd4\u8f83\u5b57\u7b26\u4e32\u6ca1\u6709\u591a\u5927\u610f\u4e49\u3002 \u4f46\u8fd9\u5728\u6280\u672f\u4e0a\u662f\u53ef\u80fd\u7684\u3002 Python \u5bf9\u8c61\u8eab\u4efd\u8fd0\u7b97\u7b26 \u00b6 \u5bf9\u8c61\u6807\u8bc6\u8fd0\u7b97\u7b26 is \u548c not is \u68c0\u67e5\u5176\u64cd\u4f5c\u7b26\u662f\u5426\u662f\u540c\u4e00\u5bf9\u8c61\u3002 object_identity.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python # object_identity.py print(None == None) print(None is None) print(True is True) print([] == []) print([] is []) print(\"Python\" is \"Python\") == \u8fd0\u7b97\u7b26\u6d4b\u8bd5\u662f\u5426\u76f8\u7b49\uff0c\u800c is \u8fd0\u7b97\u7b26\u6d4b\u8bd5\u5bf9\u8c61\u8eab\u4efd\u3002 \u6211\u4eec\u662f\u5426\u5728\u8c08\u8bba\u540c\u4e00\u5bf9\u8c61\u3002 \u8bf7\u6ce8\u610f\uff0c\u66f4\u591a\u53d8\u91cf\u53ef\u80fd\u5f15\u7528\u540c\u4e00\u5bf9\u8c61\u3002 1 2 3 4 5 6 7 $ ./object_identity.py True True True True False True \u8f93\u51fa\u53ef\u80fd\u4f1a\u8ba9\u60a8\u611f\u5230\u60ca\u8bb6\u3002 \u5728 Python \u8bed\u8a00\u4e2d\uff0c\u53ea\u6709\u4e00\u4e2a None \u548c\u4e00\u4e2a True \u5bf9\u8c61\u3002 \u8fd9\u5c31\u662f True \u76f8\u7b49\u4e14\u4e0e True \u76f8\u540c\u7684\u539f\u56e0\u3002 \u65e0\u8bba\u5982\u4f55\uff0c\u90a3\u91cc\u53ea\u6709\u4e00\u4e2a\u771f\u7406\u3002 \u7a7a\u5217\u8868[]\u7b49\u4e8e\u53e6\u4e00\u4e2a\u7a7a\u5217\u8868[]\u3002 \u4f46\u662f\u5b83\u4eec\u5e76\u4e0d\u76f8\u540c\u3002 Python \u5df2\u5c06\u5b83\u4eec\u653e\u5165\u4e24\u4e2a\u4e0d\u540c\u7684\u5185\u5b58\u4f4d\u7f6e\u3002 \u5b83\u4eec\u662f\u4e24\u4e2a\u4e0d\u540c\u7684\u5bf9\u8c61\u3002 \u56e0\u6b64\uff0c is \u8fd0\u7b97\u7b26\u8fd4\u56de False \u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u201c Python\u201d\u662f\u201c Python\u201d\u8fd4\u56de True \u3002 \u8fd9\u662f\u7531\u4e8e\u4f18\u5316\uff1a\u5982\u679c\u4e24\u4e2a\u5b57\u7b26\u4e32\u6587\u5b57\u76f8\u7b49\uff0c\u5219\u5c06\u5b83\u4eec\u653e\u7f6e\u5728\u76f8\u540c\u7684\u5185\u5b58\u4f4d\u7f6e\u3002 \u7531\u4e8e\u5b57\u7b26\u4e32\u662f\u4e0d\u53ef\u53d8\u7684\u5b9e\u4f53\uff0c\u56e0\u6b64\u4e0d\u4f1a\u9020\u6210\u4efb\u4f55\u4f24\u5bb3\u3002 Python \u6210\u5458\u8fd0\u7b97\u7b26 \u00b6 \u6210\u5458\u8fd0\u7b97\u7b26 in \u548c not in \u6d4b\u8bd5\u5e8f\u5217\u4e2d\u7684\u6210\u5458\u6027\uff0c\u4f8b\u5982\u5b57\u7b26\u4e32\uff0c\u5217\u8868\u6216\u5143\u7ec4\u3002 membership.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python # membership.py items = (\"coin\", \"book\", \"pencil\", \"spoon\", \"paper\") if \"coin\" in items: print(\"There is a coin in the tuple\") else: print(\"There is no coin in the tuple\") if \"bowl\" not in items: print(\"There is no bowl in the tuple\") else: print(\"There is a bowl in the tuple\") \u901a\u8fc7\u6210\u5458\u8fd0\u7b97\u7b26\uff0c\u6211\u4eec\u53ef\u4ee5\u6d4b\u8bd5\u5143\u7ec4\u4e2d\u662f\u5426\u5b58\u5728\u67d0\u4e2a\u9879\u76ee\u3002 1 if \"coin\" in items: \u4f7f\u7528 in \u8fd0\u7b97\u7b26\uff0c\u6211\u4eec\u68c0\u67e5 items \u5143\u7ec4\u4e2d\u662f\u5426\u5b58\u5728 \"coin\" \u3002 1 if \"bowl\" not in items: \u4f7f\u7528 not in \u8fd0\u7b97\u7b26\uff0c\u6211\u4eec\u68c0\u67e5 items \u5143\u7ec4\u4e2d\u662f\u5426\u4e0d\u5b58\u5728 \"bowl\" \u3002 1 2 3 $ ./membership.py There is a coin in the tuple There is no bowl in the tuple Python \u4e09\u5143\u8fd0\u7b97\u7b26 \u00b6 \u4e09\u5143\u8fd0\u7b97\u7b26\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u6761\u4ef6\u5206\u914d\u8bed\u53e5\u3002 1 exp1 if condition else exp2 \u5982\u679c\u6761\u4ef6\u4e3a true\uff0c\u5219\u5bf9 exp1 \u6c42\u503c\u5e76\u8fd4\u56de\u7ed3\u679c\u3002 \u5982\u679c\u6761\u4ef6\u4e3a\u5047\uff0c\u5219\u8bc4\u4f30 exp2 \u5e76\u8fd4\u56de\u5176\u7ed3\u679c\u3002 ternary.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python # ternary.py age = 31 adult = True if age >= 18 else False print(\"Adult: {0}\".format(adult)) \u5728\u8bb8\u591a\u56fd\u5bb6\uff0c\u6210\u5e74\u53d6\u51b3\u4e8e\u60a8\u7684\u5e74\u9f84\u3002 \u5982\u679c\u60a8\u7684\u5e74\u9f84\u8d85\u8fc7\u7279\u5b9a\u5e74\u9f84\uff0c\u5219\u60a8\u5df2\u7ecf\u6210\u5e74\u3002 \u5bf9\u4e8e\u4e09\u5143\u8fd0\u7b97\u7b26\uff0c\u8fd9\u662f\u4e00\u79cd\u60c5\u51b5\u3002 1 adult = True if age >= 18 else False \u9996\u5148\u8bc4\u4f30\u6761\u4ef6\u3002 \u5982\u679c\u5e74\u9f84\u5927\u4e8e\u6216\u7b49\u4e8e 18\uff0c\u5219\u8fd4\u56de True \u3002 \u5982\u679c\u4e0d\u662f\uff0c\u5219\u8fd4\u56de else \u5173\u952e\u5b57\u540e\u9762\u7684\u503c\u3002 \u7136\u540e\uff0c\u5c06\u8fd4\u56de\u7684\u503c\u5206\u914d\u7ed9 adult \u53d8\u91cf\u3002 1 2 $ ./ternary.py Adult: True 31 \u5c81\u7684\u6210\u5e74\u4eba\u662f\u6210\u5e74\u4eba\u3002 Python \u6309\u4f4d\u8fd0\u7b97\u7b26 \u00b6 \u5c0f\u6570\u5bf9\u4eba\u7c7b\u662f\u81ea\u7136\u7684\u3002 \u4e8c\u8fdb\u5236\u6570\u662f\u8ba1\u7b97\u673a\u56fa\u6709\u7684\u3002 \u4e8c\u8fdb\u5236\uff0c\u516b\u8fdb\u5236\uff0c\u5341\u8fdb\u5236\u6216\u5341\u516d\u8fdb\u5236\u7b26\u53f7\u4ec5\u662f\u76f8\u540c\u6570\u5b57\u7684\u7b26\u53f7\u3002 \u6309\u4f4d\u8fd0\u7b97\u7b26\u4f7f\u7528\u4e8c\u8fdb\u5236\u6570\u7684\u4f4d\u3002 \u6211\u4eec\u6709\u4e8c\u8fdb\u5236\u903b\u8f91\u8fd0\u7b97\u7b26\u548c\u79fb\u4f4d\u8fd0\u7b97\u7b26\u3002 \u5728 Python \u7b49\u9ad8\u7ea7\u8bed\u8a00\u4e2d\u5f88\u5c11\u4f7f\u7528\u6309\u4f4d\u8fd0\u7b97\u7b26\u3002 \u7b26\u53f7 \u542b\u4e49 `~` \u6309\u4f4d\u53d6\u53cd `^` \u6309\u4f4d\u5f02\u6216 `&` \u6309\u4f4d\u4e0e `|` \u6309\u4f4d\u6216 ` < < ` \u5de6\u79fb `>>` \u53f3\u79fb \u6309\u4f4d\u53d6\u53cd\u8fd0\u7b97\u7b26\u5206\u522b\u5c06 1 \u66f4\u6539\u4e3a 0\uff0c\u5c06 0 \u66f4\u6539\u4e3a 1\u3002 1 2 3 4 >>> ~7 -8 >>> ~-8 7 \u8fd0\u7b97\u7b26\u6062\u590d\u6570\u5b57 7 \u7684\u6240\u6709\u4f4d\u3002\u8fd9\u4e9b\u4f4d\u4e4b\u4e00\u8fd8\u786e\u5b9a\u6570\u5b57\u662f\u5426\u4e3a\u8d1f\u3002 \u5982\u679c\u6211\u4eec\u518d\u4e00\u6b21\u5bf9\u6240\u6709\u4f4d\u53d6\u53cd\uff0c\u6211\u4eec\u5c06\u518d\u6b21\u5f97\u5230 7\u3002 \u6309\u4f4d\uff0c\u8fd0\u7b97\u7b26\u5728\u4e24\u4e2a\u6570\u5b57\u4e4b\u95f4\u8fdb\u884c\u9010\u4f4d\u6bd4\u8f83\u3002 \u4ec5\u5f53\u64cd\u4f5c\u6570\u4e2d\u7684\u4e24\u4e2a\u5bf9\u5e94\u4f4d\u5747\u4e3a 1 \u65f6\uff0c\u4f4d\u4f4d\u7f6e\u7684\u7ed3\u679c\u624d\u4e3a 1\u3002 1 2 3 00110 & 00011 = 00010 \u7b2c\u4e00\u4e2a\u6570\u5b57\u662f\u4e8c\u8fdb\u5236\u8868\u793a\u6cd5 6\uff0c\u7b2c\u4e8c\u4e2a\u6570\u5b57\u662f 3\uff0c\u6700\u7ec8\u7ed3\u679c\u662f 2\u3002 1 2 3 4 >>> 6 & 3 2 >>> 3 & 6 2 \u6309\u4f4d\u6216\u8fd0\u7b97\u7b26\u5728\u4e24\u4e2a\u6570\u5b57\u4e4b\u95f4\u8fdb\u884c\u9010\u4f4d\u6bd4\u8f83\u3002 \u5982\u679c\u64cd\u4f5c\u6570\u4e2d\u7684\u4efb\u4f55\u5bf9\u5e94\u4f4d\u4e3a 1\uff0c\u5219\u4f4d\u4f4d\u7f6e\u7684\u7ed3\u679c\u4e3a 1\u3002 1 2 3 00110 | 00011 = 00111 \u7ed3\u679c\u4e3a 00110 \u6216\u5341\u8fdb\u5236 7\u3002 1 2 >>> 6 | 3 7 \u6309\u4f4d\u4e92\u65a5\u6216\u8fd0\u7b97\u7b26\u5728\u4e24\u4e2a\u6570\u5b57\u4e4b\u95f4\u8fdb\u884c\u9010\u4f4d\u6bd4\u8f83\u3002 \u5982\u679c\u64cd\u4f5c\u6570\u4e2d\u5bf9\u5e94\u4f4d\u4e2d\u7684\u4e00\u4e2a\u6216\u53e6\u4e00\u4e2a\uff08\u4f46\u4e0d\u662f\u5168\u90e8\uff09\u4e3a 1\uff0c\u5219\u4f4d\u4f4d\u7f6e\u7684\u7ed3\u679c\u4e3a 1\u3002 1 2 3 00110 ^ 00011 = 00101 \u7ed3\u679c\u4e3a 00101 \u6216\u5341\u8fdb\u5236 5\u3002 1 2 >>> 6 ^ 3 5 \u5982\u524d\u6240\u8ff0\uff0cPython \u548c\u5176\u4ed6\u9ad8\u7ea7\u8bed\u8a00\u5f88\u5c11\u4f7f\u7528\u6309\u4f4d\u8fd0\u7b97\u7b26\u3002 \u4f46\u662f\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u4f1a\u4f7f\u7528\u5b83\u4eec\u3002 \u4e00\u4e2a\u793a\u4f8b\u662f\u63a9\u7801\u3002 \u63a9\u7801\u662f\u7279\u5b9a\u7684\u4f4d\u6a21\u5f0f\u3002 \u5b83\u786e\u5b9a\u662f\u5426\u8bbe\u7f6e\u4e86\u67d0\u4e9b\u5c5e\u6027\u3002 \u8ba9\u6211\u4eec\u4e3e\u4e00\u4e2a GUI \u7f16\u7a0b\u7684\u4f8b\u5b50\u3002 bitwise_or.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python # bitwise_or.py import wx app = wx.App() window = wx.Frame(None, style=wx.MAXIMIZE_BOX | wx.RESIZE_BORDER | wx.SYSTEM_MENU | wx.CAPTION | wx.CLOSE_BOX) window.Show(True) app.MainLoop() \u8fd9\u662f wxPython \u4ee3\u7801\u7684\u4e00\u4e2a\u5c0f\u793a\u4f8b\u3002 wx.MAXIMIZE_BOX \uff0c wx.RESIZE_BORDER \uff0c wx.SYSTEM_MENU \uff0c wx.CAPTION \u548c wx.CLOSE_BOX \u662f\u5e38\u6570\u3002 \u6309\u4f4d\u6216\u8fd0\u7b97\u7b26\u5c06\u6240\u6709\u8fd9\u4e9b\u5e38\u6570\u6dfb\u52a0\u5230\u63a9\u7801\u4e2d\u3002 \u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u6240\u6709\u8fd9\u4e9b\u5c5e\u6027\u90fd\u662f\u4f7f\u7528\u6309\u4f4d\u6216\u8fd0\u7b97\u7b26\u8bbe\u7f6e\u7684\uff0c\u5e76\u5e94\u7528\u4e8e wx.Frame \u5c0f\u90e8\u4ef6\u3002 \u6700\u540e\uff0c\u6211\u4eec\u8fd8\u6709\u6309\u4f4d\u79fb\u4f4d\u8fd0\u7b97\u7b26\u3002 \u6309\u4f4d\u79fb\u4f4d\u8fd0\u7b97\u7b26\u5411\u53f3\u6216\u5411\u5de6\u79fb\u4f4d\u3002 1 2 number << n : multiply number 2 to the nth power number >> n : divide number by 2 to the nth power \u8fd9\u4e9b\u8fd0\u7b97\u7b26\u4e5f\u79f0\u4e3a\u7b97\u672f\u79fb\u4f4d\u3002 1 2 3 00110 >> 00001 = 00011 \u6211\u4eec\u5c06\u6570\u5b57 6 \u7684\u6bcf\u4e2a\u4f4d\u5411\u53f3\u79fb\u52a8\u3002 \u7b49\u4e8e\u5c06 6 \u9664\u4ee5 2\u3002\u7ed3\u679c\u4e3a 00011 \u6216\u5341\u8fdb\u5236 3\u3002 1 2 >>> 6 >> 1 3 1 2 3 00110 << 00001 = 01100 \u6211\u4eec\u5c06\u6570\u5b57 6 \u7684\u6bcf\u4e2a\u4f4d\u5411\u5de6\u79fb\u52a8\u3002 \u7b49\u4e8e\u5c06\u6570\u5b57 6 \u4e58\u4ee5 2\u3002\u7ed3\u679c\u4e3a 01100 \u6216\u5341\u8fdb\u5236 12\u3002 1 2 >>> 6 << 1 12 Python \u590d\u5408\u8d4b\u503c\u8fd0\u7b97\u7b26 \u00b6 \u590d\u5408\u8d4b\u503c\u8fd0\u7b97\u7b26\u7531\u4e24\u4e2a\u8fd0\u7b97\u7b26\u7ec4\u6210\u3002 \u4ed6\u4eec\u662f\u901f\u8bb0\u5458\u3002 1 2 3 4 5 6 7 >>> i = 1 >>> i = i + 1 >>> i 2 >>> i += 1 >>> i 3 += \u590d\u5408\u8fd0\u7b97\u7b26\u662f\u8fd9\u4e9b\u901f\u8bb0\u8fd0\u7b97\u7b26\u4e4b\u4e00\u3002 \u5176\u4ed6\u590d\u5408\u8fd0\u7b97\u7b26\u662f\uff1a 1 -= *= /= //= %= **= &= |= ^= >>= <<= Python \u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7 \u00b6 \u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7\u544a\u8bc9\u6211\u4eec\u9996\u5148\u8bc4\u4f30\u54ea\u4e2a\u8fd0\u7b97\u7b26\u3002 \u4f18\u5148\u7ea7\u5bf9\u4e8e\u907f\u514d\u8868\u8fbe\u5f0f\u4e2d\u7684\u6b67\u4e49\u662f\u5fc5\u8981\u7684\u3002 \u4ee5\u4e0b\u8868\u8fbe\u5f0f 28 \u6216 40 \u7684\u7ed3\u679c\u662f\u4ec0\u4e48\uff1f 1 3 + 5 * 5 \u50cf\u6570\u5b66\u4e2d\u4e00\u6837\uff0c\u4e58\u6cd5\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u9ad8\u4e8e\u52a0\u6cd5\u8fd0\u7b97\u7b26\u3002 \u7ed3\u679c\u662f 28\u3002 1 (3 + 5) * 5 \u8981\u66f4\u6539\u8bc4\u4f30\u987a\u5e8f\uff0c\u53ef\u4ee5\u4f7f\u7528\u65b9\u62ec\u53f7\u3002 \u65b9\u62ec\u53f7\u5185\u7684\u8868\u8fbe\u5f0f\u59cb\u7ec8\u9996\u5148\u88ab\u6c42\u503c\u3002 \u4ee5\u4e0b\u5217\u8868\u663e\u793a\u4e86 Python \u4e2d\u7684\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7\u3002 1 2 3 4 5 6 7 8 9 10 11 12 unary + - ~ ** * / % + - >> << & ^ | < <= == >= > != is not and or \u540c\u4e00\u884c\u4e0a\u7684\u8fd0\u7b97\u7b26\u5177\u6709\u76f8\u540c\u7684\u4f18\u5148\u7ea7\u3002 \u4f18\u5148\u7ea7\u4ece\u4f4e\u5230\u9ad8\u3002 precedence.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python # precedence.py print(3 + 5 * 5) print((3 + 5) * 5) print(2 ** 3 * 5) print(not True or True) print(not (True or True)) \u5728\u6b64\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u663e\u793a\u4e00\u4e9b\u5e38\u89c1\u7684\u8868\u8fbe\u5f0f\u3002 \u6bcf\u4e2a\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u53d6\u51b3\u4e8e\u4f18\u5148\u7ea7\u3002 1 print(2 ** 3 * 5) \u5e42\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u9ad8\u4e8e\u4e58\u6cd5\u8fd0\u7b97\u7b26\u3002 \u9996\u5148\uff0c\u5bf9 2 ** 3 \u6c42\u503c\uff0c\u8fd4\u56de 8\u3002\u7136\u540e\u5c06\u7ed3\u679c\u4e58\u4ee5 5\uff0c\u7ed3\u679c\u4e3a 40\u3002 1 print(not True or True) \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c not \u8fd0\u7b97\u7b26\u5177\u6709\u66f4\u9ad8\u7684\u4f18\u5148\u7ea7\u3002 \u9996\u5148\uff0c\u5c06\u7b2c\u4e00\u4e2a True \u503c\u53d6\u53cd\u4e3a False \uff0c\u7136\u540e or \u8fd0\u7b97\u7b26\u7ec4\u5408 False \u548c True \uff0c\u6700\u540e\u5f97\u5230 True \u3002 1 2 3 4 5 6 $ ./precedence.py 28 40 40 True False \u5173\u7cfb\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u9ad8\u4e8e\u903b\u8f91\u8fd0\u7b97\u7b26\u3002 positive.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python # positive.py a = 1 b = 2 if (a > 0 and b > 0): print(\"a and b are positive integers\") and \u8fd0\u7b97\u7b26\u7b49\u5f85\u4e24\u4e2a\u5e03\u5c14\u503c\u3002 \u5982\u679c\u5176\u4e2d\u4e00\u4e2a\u64cd\u4f5c\u6570\u4e0d\u662f\u5e03\u5c14\u503c\uff0c\u5219\u4f1a\u51fa\u73b0\u8bed\u6cd5\u9519\u8bef\u3002 \u5728 Python \u4e2d\uff0c\u5173\u7cfb\u8fd0\u7b97\u7b26\u5728\u903b\u8f91\u4e0e\u4e4b\u524d\u8fdb\u884c\u6c42\u503c\u3002 1 2 $ ./positive.py a and b are positive integers Python \u5173\u8054\u89c4\u5219 \u00b6 \u6709\u65f6\uff0c\u4f18\u5148\u7ea7\u4e0d\u80fd\u4ee4\u4eba\u6ee1\u610f\u5730\u786e\u5b9a\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u3002 \u8fd8\u6709\u53e6\u4e00\u4e2a\u89c4\u5219\u79f0\u4e3a\u5173\u8054\u6027\u3002 \u8fd0\u7b97\u7b26\u7684\u5173\u8054\u6027\u786e\u5b9a\u4f18\u5148\u7ea7\u4e0e\u76f8\u540c\u7684\u8fd0\u7b97\u7b26\u7684\u8bc4\u4f30\u987a\u5e8f\u3002 1 9 / 3 * 3 \u6b64\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u662f 9 \u8fd8\u662f 1\uff1f \u4e58\u6cd5\uff0c\u5220\u9664\u548c\u6a21\u8fd0\u7b97\u7b26\u4ece\u5de6\u5230\u53f3\u5173\u8054\u3002 \u56e0\u6b64\uff0c\u8be5\u8868\u8fbe\u5f0f\u7684\u8ba1\u7b97\u65b9\u5f0f\u4e3a\uff1a (9 / 3) * 3 \uff0c\u7ed3\u679c\u4e3a 9\u3002 \u7b97\u672f\uff0c\u5e03\u5c14\uff0c\u5173\u7cfb\u548c\u6309\u4f4d\u8fd0\u7b97\u7b26\u90fd\u662f\u4ece\u5de6\u5230\u53f3\u5173\u8054\u7684\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u8d4b\u503c\u8fd0\u7b97\u7b26\u662f\u6b63\u786e\u5173\u8054\u7684\u3002 1 2 3 >>> a = b = c = d = 0 >>> a, b, c, d (0, 0, 0, 0) \u5982\u679c\u5173\u8054\u4ece\u5de6\u5230\u53f3\uff0c\u5219\u4ee5\u524d\u7684\u8868\u8fbe\u5f0f\u5c06\u4e0d\u53ef\u80fd\u3002 \u590d\u5408\u8d4b\u503c\u8fd0\u7b97\u7b26\u4ece\u53f3\u5230\u5de6\u5173\u8054\u3002 1 2 3 4 >>> j = 0 >>> j *= 3 + 1 >>> j 0 \u60a8\u53ef\u80fd\u671f\u671b\u7ed3\u679c\u4e3a 1\uff0c\u4f46\u662f\u5b9e\u9645\u7ed3\u679c\u4e3a 0\u3002\u7531\u4e8e\u6709\u5173\u8054\u6027\uff0c\u9996\u5148\u8bc4\u4f30\u53f3\u8fb9\u7684\u8868\u8fbe\u5f0f\uff0c\u7136\u540e\u5e94\u7528\u590d\u5408\u8d4b\u503c\u8fd0\u7b97\u7b26\u3002","title":"Python \u8fd0\u7b97\u7b26"},{"location":"pages/python/pytutorial/python-operators/#Python-\u8fd0\u7b97\u7b26","text":"Python \u8fd0\u7b97\u7b26 \u662f\u7279\u6b8a\u7b26\u53f7\uff0c\u8868\u793a\u5df2\u6267\u884c\u67d0\u4e2a\u8fc7\u7a0b\u3002 \u7f16\u7a0b\u8bed\u8a00\u7684\u8fd0\u7b97\u7b26\u6765\u81ea\u6570\u5b66\uff0c\u5e94\u7528\u5904\u7406\u6570\u636e\uff0c\u8fd0\u7b97\u7b26\u7528\u4e8e\u5904\u7406\u6570\u636e\u3002 \u5728 Python \u4e2d\uff0c\u6211\u4eec\u6709\u51e0\u79cd\u7c7b\u578b\u7684\u8fd0\u7b97\u7b26\uff1a \u7b97\u672f\u8fd0\u7b97\u7b26 \u5e03\u5c14\u8fd0\u7b97\u7b26 \u5173\u7cfb\u8fd0\u7b97\u7b26 \u6309\u4f4d\u8fd0\u7b97\u7b26 \u4e00\u4e2a\u8fd0\u7b97\u7b26\u53ef\u4ee5\u6709\u4e00\u4e2a\u6216\u4e24\u4e2a\u64cd\u4f5c\u6570\u3002 \u64cd\u4f5c\u6570\u662f\u8fd0\u7b97\u7b26\u7684\u8f93\u5165\uff08\u53c2\u6570\uff09\u4e4b\u4e00\u3002 \u4ec5\u4f7f\u7528\u4e00\u4e2a\u64cd\u4f5c\u6570\u7684\u90a3\u4e9b\u8fd0\u7b97\u7b26\u79f0\u4e3a\u4e00\u5143\u8fd0\u7b97\u7b26\u3002 \u90a3\u4e9b\u4f7f\u7528\u4e24\u4e2a\u64cd\u4f5c\u6570\u7684\u5bf9\u8c61\u79f0\u4e3a\u4e8c\u8fdb\u5236\u8fd0\u7b97\u7b26\u3002 +\u548c-\u53ef\u4ee5\u662f\u52a0\u51cf\u8fd0\u7b97\u7b26\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u5143\u7b26\u53f7\u8fd0\u7b97\u7b26\u3002 \u8fd9\u53d6\u51b3\u4e8e\u5b9e\u9645\u60c5\u51b5\u3002 1 2 3 4 5 >>> 2 2 >>> +2 2 >>> \u52a0\u53f7\u53ef\u4ee5\u7528\u6765\u8868\u793a\u6211\u4eec\u6709\u4e00\u4e2a\u6b63\u6570\u3002 \u4f46\u662f\u5b83\u901a\u5e38\u4e0d\u88ab\u4f7f\u7528\u3002 \u51cf\u53f7\u66f4\u6539\u503c\u7684\u7b26\u53f7\u3002 1 2 3 4 5 >>> a = 1 >>> -a -1 >>> -(-a) 1 \u4e58\u6cd5\u548c\u52a0\u6cd5\u8fd0\u7b97\u7b26\u662f\u4e8c\u8fdb\u5236\u8fd0\u7b97\u7b26\u7684\u793a\u4f8b\u3002 \u5b83\u4eec\u4e0e\u4e24\u4e2a\u64cd\u4f5c\u6570\u4e00\u8d77\u4f7f\u7528\u3002 1 2 3 4 >>> 3 * 3 9 >>> 3 + 3 6","title":"Python \u8fd0\u7b97\u7b26"},{"location":"pages/python/pytutorial/python-operators/#Python-\u8d4b\u503c\u8fd0\u7b97\u7b26","text":"\u8d4b\u503c\u8fd0\u7b97\u7b26 = \u5c06\u503c\u8d4b\u7ed9\u53d8\u91cf\u3002 \u5728\u6570\u5b66\u4e2d\uff0c = \u8fd0\u7b97\u7b26\u5177\u6709\u4e0d\u540c\u7684\u542b\u4e49\u3002 \u5728\u7b49\u5f0f\u4e2d\uff0c = \u8fd0\u7b97\u7b26\u662f\u4e00\u4e2a\u76f8\u7b49\u8fd0\u7b97\u7b26\u3002 \u7b49\u5f0f\u7684\u5de6\u4fa7\u7b49\u4e8e\u53f3\u4fa7\u3002 1 2 3 >>> x = 1 >>> x 1 \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4e3a x \u53d8\u91cf\u5206\u914d\u4e00\u4e2a\u6570\u5b57\u3002 1 2 3 >>> x = x + 1 >>> x 2 \u5148\u524d\u7684\u8868\u8fbe\u5f0f\u5728\u6570\u5b66\u4e0a\u6ca1\u6709\u610f\u4e49\u3002 \u4f46\u8fd9\u5728\u7f16\u7a0b\u4e2d\u662f\u5408\u6cd5\u7684\u3002 \u8be5\u8868\u8fbe\u5f0f\u610f\u5473\u7740\u6211\u4eec\u5411 x \u53d8\u91cf\u52a0 1\u3002 \u53f3\u8fb9\u7b49\u4e8e 2\uff0c\u5e76\u4e14 2 \u5206\u914d\u7ed9 x \u3002 1 2 3 >>> a = b = c = 4 >>> print(a, b, c) 4 4 4 \u53ef\u4ee5\u4e3a\u591a\u4e2a\u53d8\u91cf\u5206\u914d\u4e00\u4e2a\u503c\u3002 1 2 3 >>> 3 = y File \"<stdin>\", line 1 SyntaxError: can't assign to literal \u6b64\u4ee3\u7801\u793a\u4f8b\u5bfc\u81f4\u8bed\u6cd5\u9519\u8bef\u3002 \u6211\u4eec\u65e0\u6cd5\u4e3a\u6587\u5b57\u5206\u914d\u503c\u3002","title":"Python \u8d4b\u503c\u8fd0\u7b97\u7b26"},{"location":"pages/python/pytutorial/python-operators/#Python-\u7b97\u672f\u8fd0\u7b97\u7b26","text":"\u4e0b\u8868\u662f Python \u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u7b97\u672f\u8fd0\u7b97\u7b26\u8868\u3002 \u7b26\u53f7 \u540d\u79f0 `+` \u52a0\u6210 `-` \u51cf\u6cd5 `*` \u4e58\u6cd5 `/` \u9664\u6cd5 `//` \u6574\u6570\u9664\u6cd5 `%` \u6a21\u6570 `**` \u4e58\u65b9 \u4ee5\u4e0b\u793a\u4f8b\u663e\u793a\u4e86\u7b97\u672f\u8fd0\u7b97\u3002 arithmetic.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env python # arithmetic.py a = 10 b = 11 c = 12 add = a + b + c sub = c - a mult = a * b div = c / 3 power = a ** 2 print(add, sub, mult, div) print(power) \u6240\u6709\u8fd9\u4e9b\u90fd\u662f\u6570\u5b66\u4e0a\u5df2\u77e5\u7684\u8fd0\u7b97\u7b26\u3002 1 2 3 $ ./arithmetic.py 33 2 110 4.0 100 \u5171\u6709\u4e09\u4f4d\u8fd0\u7b97\u7b26\u8d1f\u8d23\u90e8\u95e8\u5212\u5206\u3002 division.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python # division.py print(9 / 3) print(9 / 4) print(9 // 4) print(9 % 4) \u8be5\u793a\u4f8b\u6f14\u793a\u4e86\u9664\u6cd5\u8fd0\u7b97\u7b26\u3002 1 print(9 / 4) \u7ed3\u679c\u4e3a 2.25\u3002 \u5728 Python 2.x \u4e2d\uff0c/\u8fd0\u7b97\u7b26\u662f\u6574\u6570\u9664\u6cd5\u8fd0\u7b97\u7b26\u3002 \u8fd9\u5728 Python 3 \u4e2d\u5df2\u66f4\u6539\u3002\u5728 Python 3 \u4e2d\uff0c/\u8fd0\u7b97\u7b26\u8fd4\u56de\u4e00\u4e2a\u5341\u8fdb\u5236\u6570\u3002 1 print(9 // 4) //\u8fd0\u7b97\u7b26\u662f Python 3 \u4e2d\u7684\u6574\u6570\u8fd0\u7b97\u7b26\u3002 1 print(9 % 4) % \u8fd0\u7b97\u7b26\u79f0\u4e3a\u6a21\u8fd0\u7b97\u7b26\u3002 \u5b83\u627e\u5230\u4e00\u4e2a\u6570\u9664\u4ee5\u53e6\u4e00\u4e2a\u7684\u4f59\u6570\u3002 9 % 4 \uff0c9 \u6a21 4 \u4e3a 1\uff0c\u56e0\u4e3a 4 \u4e24\u6b21\u8fdb\u5165 9 \u4e14\u4f59\u6570\u4e3a 1\u3002 1 2 3 4 5 $ ./division.py 3.0 2.25 2 1 1 2 >>> 'return' + 'of' + 'the' + 'king' 'returnoftheking' \u52a0\u6cd5\u8fd0\u7b97\u7b26\u8fd8\u53ef\u7528\u4e8e\u8fde\u63a5\u5b57\u7b26\u4e32\u3002 1 2 3 4 >>> 3 + ' apples' Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: unsupported operand type(s) for +: 'int' and 'str' \u6211\u4eec\u4e0d\u80fd\u6dfb\u52a0\u6574\u6570\u548c\u5b57\u7b26\u4e32\u3002 \u8fd9\u5bfc\u81f4 TypeError \u3002 1 2 >>> str(3) + ' apples' '3 apples' \u4e3a\u4e86\u4f7f\u793a\u4f8b\u751f\u6548\uff0c\u5fc5\u987b\u4f7f\u7528 str() \u51fd\u6570\u5c06\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u4e58\u6cd5\u8fd0\u7b97\u7b26\u53ef\u4ee5\u4e0e\u5b57\u7b26\u4e32\u548c\u6570\u5b57\u4e00\u8d77\u4f7f\u7528\u3002 1 2 >>> 'dollar ' * 5 'dollar dollar dollar dollar dollar '","title":"Python \u7b97\u672f\u8fd0\u7b97\u7b26"},{"location":"pages/python/pytutorial/python-operators/#Python-\u5e03\u5c14\u8fd0\u7b97\u7b26","text":"\u5728 Python \u4e2d\uff0c\u6211\u4eec\u5177\u6709 and \uff0c or \u548c not \u5e03\u5c14\u8fd0\u7b97\u7b26\u3002 \u4f7f\u7528\u5e03\u5c14\u8fd0\u7b97\u7b26\uff0c\u6211\u4eec\u53ef\u4ee5\u6267\u884c\u903b\u8f91\u8fd0\u7b97\u3002 \u8fd9\u4e9b\u6700\u5e38\u4e0e if \u548c while \u5173\u952e\u5b57\u4e00\u8d77\u4f7f\u7528\u3002 andop.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python # andop.py print(True and True) print(True and False) print(False and True) print(False and False) \u6b64\u793a\u4f8b\u663e\u793a\u4e86\u903b\u8f91\u548c\u8fd0\u7b97\u7b26\u3002 \u4ec5\u5f53\u4e24\u4e2a\u64cd\u4f5c\u6570\u5747\u4e3a True \u65f6\uff0c\u903b\u8f91\u548c\u8fd0\u7b97\u7b26\u624d\u5bf9 True \u6c42\u503c\u3002 1 2 3 4 5 $ ./andop.py True False False False \u5982\u679c\u4e24\u4e2a\u64cd\u4f5c\u6570\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u4e3a True \uff0c\u5219\u903b\u8f91\u6216\u8fd0\u7b97\u7b26\u6c42\u503c\u4e3a True \u3002 orop.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python # orop.py print(True or True) print(True or False) print(False or True) print(False or False) \u5982\u679c\u8fd0\u7b97\u7b26\u7684\u4e00\u65b9\u4e3a True \uff0c\u5219\u64cd\u4f5c\u7684\u7ed3\u679c\u4e3a True \u3002 1 2 3 4 5 $ ./orop.py True True True False \u5426\u5b9a\u8fd0\u7b97\u7b26 not \u4f7f True False \u548c False True \u3002 negation.py 1 2 3 4 5 6 7 #!/usr/bin/env python # negation.py print(not False) print(not True) print(not ( 4 < 3 )) \u8be5\u793a\u4f8b\u663e\u793a\u4e86 not \u8fd0\u7b97\u7b26\u7684\u4f5c\u7528\u3002 1 2 3 4 $ ./negation.py True False True \u5e76\u4e14\uff0c\u6216\u8005\u5bf9\u77ed\u8def\u8fdb\u884c\u4e86\u8bc4\u4f30\u3002 \u77ed\u8def\u8bc4\u4f30\u610f\u5473\u7740\u4ec5\u5f53\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e0d\u8db3\u4ee5\u786e\u5b9a\u8868\u8fbe\u5f0f\u7684\u503c\u65f6\uff0c\u624d\u8bc4\u4f30\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff1a\u5f53\u548c\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u8bc4\u4f30\u4e3a false \u65f6\uff0c\u603b\u503c\u5fc5\u987b\u4e3a false\uff1b \u5f53\u6216\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a true \u65f6\uff0c\u603b\u503c\u5fc5\u987b\u4e3a true\u3002 \u4ee5\u4e0b\u793a\u4f8b\u6f14\u793a\u4e86\u7b80\u77ed\u7684\u8bfe\u65f6\u8bc4\u4f30\u3002 short_circuit.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python # short_circuit.py x = 10 y = 0 if (y != 0 and x/y < 100): print(\"a small value\") \u8868\u8fbe\u5f0f\u7684\u7b2c\u4e00\u90e8\u5206\u8ba1\u7b97\u4e3a False \u3002 \u8868\u8fbe\u5f0f\u7684\u7b2c\u4e8c\u90e8\u5206\u4e0d\u8ba1\u7b97\u3002 \u5426\u5219\uff0c\u6211\u4eec\u5c06\u5f97\u5230 ZeroDivisionError \u3002","title":"Python \u5e03\u5c14\u8fd0\u7b97\u7b26"},{"location":"pages/python/pytutorial/python-operators/#Python-\u5173\u7cfb\u8fd0\u7b97\u7b26","text":"\u5173\u7cfb\u8fd0\u7b97\u7b26\u7528\u4e8e\u6bd4\u8f83\u503c\u3002 \u8fd9\u4e9b\u8fd0\u7b97\u7b26\u603b\u662f\u4ea7\u751f\u5e03\u5c14\u503c\u3002 \u7b26\u53f7 \u542b\u4e49 ` < ` \u5c0f\u4e8e ` < =` \u5c0f\u4e8e\u6216\u7b49\u4e8e `>` \u5927\u4e8e `>=` \u5927\u4e8e\u6216\u7b49\u4e8e `==` \u7b49\u4e8e `!=` \u4e0d\u7b49\u4e8e `is` \u5bf9\u8c61\u8eab\u4efd `is not` \u5426\u5b9a\u5bf9\u8c61\u8eab\u4efd \u4e0a\u8868\u663e\u793a\u4e86 Python \u5173\u7cfb\u8fd0\u7b97\u7b26\u3002 1 2 3 4 5 6 >>> 3 < 4 True >>> 4 == 3 False >>> 4 >= 3 True \u5982\u524d\u6240\u8ff0\uff0c\u5173\u7cfb\u8fd0\u7b97\u7b26\u8fd4\u56de\u5e03\u5c14\u503c\uff1a True \u6216 False \u3002 \u6ce8\u610f\uff0c\u5173\u7cfb\u8fd0\u7b97\u7b26\u4e0d\u9650\u4e8e\u6570\u5b57\u3002 \u6211\u4eec\u4e5f\u53ef\u4ee5\u5c06\u5b83\u4eec\u7528\u4e8e\u5176\u4ed6\u5bf9\u8c61\u3002 \u5c3d\u7ba1\u5b83\u4eec\u53ef\u80fd\u5e76\u4e0d\u603b\u662f\u6709\u610f\u4e49\u7684\u3002 1 2 3 4 >>> \"six\" == \"six\" True >>> 'a' < 'b' True \u6211\u4eec\u4e5f\u53ef\u4ee5\u6bd4\u8f83\u5b57\u7b26\u4e32\u5bf9\u8c61\u3002 1 >>> 'a' < 'b' \u8fd9\u91cc\u5230\u5e95\u53d1\u751f\u4e86\u4ec0\u4e48\uff1f \u8ba1\u7b97\u673a\u4e0d\u77e5\u9053\u5b57\u7b26\u6216\u5b57\u7b26\u4e32\u3002 \u5bf9\u4e8e\u4ed6\u4eec\u6765\u8bf4\uff0c\u4e00\u5207\u90fd\u53ea\u662f\u6570\u5b57\u3002 \u5b57\u7b26\u662f\u5b58\u50a8\u5728\u7279\u5b9a\u8868\u4e2d\u7684\u7279\u6b8a\u6570\u5b57\uff0c\u4f8b\u5982 ASCII\u3002 1 2 3 4 >>> 'a' > 6 Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: unorderable types: str() > int() \u5728\u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b\u4e0a\u4e0d\u80fd\u4f7f\u7528\u5173\u7cfb\u8fd0\u7b97\u7b26\u3002 \u8be5\u4ee3\u7801\u5bfc\u81f4\u4e00\u4e2a TypeError \u3002 compare.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python # compare.py print('a' < 'b') print(\"a is:\", ord('a')) print(\"b is:\", ord('b')) \u5728\u5185\u90e8\uff0ca \u548c b \u5b57\u7b26\u662f\u6570\u5b57\u3002 \u56e0\u6b64\uff0c\u5f53\u6211\u4eec\u6bd4\u8f83\u4e24\u4e2a\u5b57\u7b26\u65f6\uff0c\u6211\u4eec\u5c06\u6bd4\u8f83\u5b83\u4eec\u7684\u5b58\u50a8\u6570\u5b57\u3002 \u5185\u7f6e\u7684 ord() \u51fd\u6570\u8fd4\u56de\u5355\u4e2a\u5b57\u7b26\u7684 ASCII \u503c\u3002 1 2 3 4 $ ./compare.py True a is: 97 b is: 98 \u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u6bd4\u8f83\u4e24\u4e2a\u6570\u5b57\uff1a97 \u548c 98\u3002 1 2 >>> \"ab\" > \"aa\" True \u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u5305\u542b\u66f4\u591a\u5b57\u7b26\u7684\u5b57\u7b26\u4e32\u3002 \u5982\u679c\u524d\u51e0\u4e2a\u5b57\u7b26\u76f8\u7b49\uff0c\u6211\u4eec\u5c06\u6bd4\u8f83\u4e0b\u4e00\u4e2a\u5b57\u7b26\u3002 \u5728\u6211\u4eec\u7684\u60c5\u51b5\u4e0b\uff0c\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\u7684 b \u5b57\u7b26\u7684\u503c\u6bd4 a \u5b57\u7b26\u5927\u3002 \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u201c ab\u201d\u5b57\u7b26\u4e32\u5927\u4e8e\u201c aa\u201d\u5b57\u7b26\u4e32\u7684\u539f\u56e0\u3002 \u5f53\u7136\uff0c\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u6bd4\u8f83\u5b57\u7b26\u4e32\u6ca1\u6709\u591a\u5927\u610f\u4e49\u3002 \u4f46\u8fd9\u5728\u6280\u672f\u4e0a\u662f\u53ef\u80fd\u7684\u3002","title":"Python \u5173\u7cfb\u8fd0\u7b97\u7b26"},{"location":"pages/python/pytutorial/python-operators/#Python-\u5bf9\u8c61\u8eab\u4efd\u8fd0\u7b97\u7b26","text":"\u5bf9\u8c61\u6807\u8bc6\u8fd0\u7b97\u7b26 is \u548c not is \u68c0\u67e5\u5176\u64cd\u4f5c\u7b26\u662f\u5426\u662f\u540c\u4e00\u5bf9\u8c61\u3002 object_identity.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python # object_identity.py print(None == None) print(None is None) print(True is True) print([] == []) print([] is []) print(\"Python\" is \"Python\") == \u8fd0\u7b97\u7b26\u6d4b\u8bd5\u662f\u5426\u76f8\u7b49\uff0c\u800c is \u8fd0\u7b97\u7b26\u6d4b\u8bd5\u5bf9\u8c61\u8eab\u4efd\u3002 \u6211\u4eec\u662f\u5426\u5728\u8c08\u8bba\u540c\u4e00\u5bf9\u8c61\u3002 \u8bf7\u6ce8\u610f\uff0c\u66f4\u591a\u53d8\u91cf\u53ef\u80fd\u5f15\u7528\u540c\u4e00\u5bf9\u8c61\u3002 1 2 3 4 5 6 7 $ ./object_identity.py True True True True False True \u8f93\u51fa\u53ef\u80fd\u4f1a\u8ba9\u60a8\u611f\u5230\u60ca\u8bb6\u3002 \u5728 Python \u8bed\u8a00\u4e2d\uff0c\u53ea\u6709\u4e00\u4e2a None \u548c\u4e00\u4e2a True \u5bf9\u8c61\u3002 \u8fd9\u5c31\u662f True \u76f8\u7b49\u4e14\u4e0e True \u76f8\u540c\u7684\u539f\u56e0\u3002 \u65e0\u8bba\u5982\u4f55\uff0c\u90a3\u91cc\u53ea\u6709\u4e00\u4e2a\u771f\u7406\u3002 \u7a7a\u5217\u8868[]\u7b49\u4e8e\u53e6\u4e00\u4e2a\u7a7a\u5217\u8868[]\u3002 \u4f46\u662f\u5b83\u4eec\u5e76\u4e0d\u76f8\u540c\u3002 Python \u5df2\u5c06\u5b83\u4eec\u653e\u5165\u4e24\u4e2a\u4e0d\u540c\u7684\u5185\u5b58\u4f4d\u7f6e\u3002 \u5b83\u4eec\u662f\u4e24\u4e2a\u4e0d\u540c\u7684\u5bf9\u8c61\u3002 \u56e0\u6b64\uff0c is \u8fd0\u7b97\u7b26\u8fd4\u56de False \u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u201c Python\u201d\u662f\u201c Python\u201d\u8fd4\u56de True \u3002 \u8fd9\u662f\u7531\u4e8e\u4f18\u5316\uff1a\u5982\u679c\u4e24\u4e2a\u5b57\u7b26\u4e32\u6587\u5b57\u76f8\u7b49\uff0c\u5219\u5c06\u5b83\u4eec\u653e\u7f6e\u5728\u76f8\u540c\u7684\u5185\u5b58\u4f4d\u7f6e\u3002 \u7531\u4e8e\u5b57\u7b26\u4e32\u662f\u4e0d\u53ef\u53d8\u7684\u5b9e\u4f53\uff0c\u56e0\u6b64\u4e0d\u4f1a\u9020\u6210\u4efb\u4f55\u4f24\u5bb3\u3002","title":"Python \u5bf9\u8c61\u8eab\u4efd\u8fd0\u7b97\u7b26"},{"location":"pages/python/pytutorial/python-operators/#Python-\u6210\u5458\u8fd0\u7b97\u7b26","text":"\u6210\u5458\u8fd0\u7b97\u7b26 in \u548c not in \u6d4b\u8bd5\u5e8f\u5217\u4e2d\u7684\u6210\u5458\u6027\uff0c\u4f8b\u5982\u5b57\u7b26\u4e32\uff0c\u5217\u8868\u6216\u5143\u7ec4\u3002 membership.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python # membership.py items = (\"coin\", \"book\", \"pencil\", \"spoon\", \"paper\") if \"coin\" in items: print(\"There is a coin in the tuple\") else: print(\"There is no coin in the tuple\") if \"bowl\" not in items: print(\"There is no bowl in the tuple\") else: print(\"There is a bowl in the tuple\") \u901a\u8fc7\u6210\u5458\u8fd0\u7b97\u7b26\uff0c\u6211\u4eec\u53ef\u4ee5\u6d4b\u8bd5\u5143\u7ec4\u4e2d\u662f\u5426\u5b58\u5728\u67d0\u4e2a\u9879\u76ee\u3002 1 if \"coin\" in items: \u4f7f\u7528 in \u8fd0\u7b97\u7b26\uff0c\u6211\u4eec\u68c0\u67e5 items \u5143\u7ec4\u4e2d\u662f\u5426\u5b58\u5728 \"coin\" \u3002 1 if \"bowl\" not in items: \u4f7f\u7528 not in \u8fd0\u7b97\u7b26\uff0c\u6211\u4eec\u68c0\u67e5 items \u5143\u7ec4\u4e2d\u662f\u5426\u4e0d\u5b58\u5728 \"bowl\" \u3002 1 2 3 $ ./membership.py There is a coin in the tuple There is no bowl in the tuple","title":"Python \u6210\u5458\u8fd0\u7b97\u7b26"},{"location":"pages/python/pytutorial/python-operators/#Python-\u4e09\u5143\u8fd0\u7b97\u7b26","text":"\u4e09\u5143\u8fd0\u7b97\u7b26\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u6761\u4ef6\u5206\u914d\u8bed\u53e5\u3002 1 exp1 if condition else exp2 \u5982\u679c\u6761\u4ef6\u4e3a true\uff0c\u5219\u5bf9 exp1 \u6c42\u503c\u5e76\u8fd4\u56de\u7ed3\u679c\u3002 \u5982\u679c\u6761\u4ef6\u4e3a\u5047\uff0c\u5219\u8bc4\u4f30 exp2 \u5e76\u8fd4\u56de\u5176\u7ed3\u679c\u3002 ternary.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python # ternary.py age = 31 adult = True if age >= 18 else False print(\"Adult: {0}\".format(adult)) \u5728\u8bb8\u591a\u56fd\u5bb6\uff0c\u6210\u5e74\u53d6\u51b3\u4e8e\u60a8\u7684\u5e74\u9f84\u3002 \u5982\u679c\u60a8\u7684\u5e74\u9f84\u8d85\u8fc7\u7279\u5b9a\u5e74\u9f84\uff0c\u5219\u60a8\u5df2\u7ecf\u6210\u5e74\u3002 \u5bf9\u4e8e\u4e09\u5143\u8fd0\u7b97\u7b26\uff0c\u8fd9\u662f\u4e00\u79cd\u60c5\u51b5\u3002 1 adult = True if age >= 18 else False \u9996\u5148\u8bc4\u4f30\u6761\u4ef6\u3002 \u5982\u679c\u5e74\u9f84\u5927\u4e8e\u6216\u7b49\u4e8e 18\uff0c\u5219\u8fd4\u56de True \u3002 \u5982\u679c\u4e0d\u662f\uff0c\u5219\u8fd4\u56de else \u5173\u952e\u5b57\u540e\u9762\u7684\u503c\u3002 \u7136\u540e\uff0c\u5c06\u8fd4\u56de\u7684\u503c\u5206\u914d\u7ed9 adult \u53d8\u91cf\u3002 1 2 $ ./ternary.py Adult: True 31 \u5c81\u7684\u6210\u5e74\u4eba\u662f\u6210\u5e74\u4eba\u3002","title":"Python \u4e09\u5143\u8fd0\u7b97\u7b26"},{"location":"pages/python/pytutorial/python-operators/#Python-\u6309\u4f4d\u8fd0\u7b97\u7b26","text":"\u5c0f\u6570\u5bf9\u4eba\u7c7b\u662f\u81ea\u7136\u7684\u3002 \u4e8c\u8fdb\u5236\u6570\u662f\u8ba1\u7b97\u673a\u56fa\u6709\u7684\u3002 \u4e8c\u8fdb\u5236\uff0c\u516b\u8fdb\u5236\uff0c\u5341\u8fdb\u5236\u6216\u5341\u516d\u8fdb\u5236\u7b26\u53f7\u4ec5\u662f\u76f8\u540c\u6570\u5b57\u7684\u7b26\u53f7\u3002 \u6309\u4f4d\u8fd0\u7b97\u7b26\u4f7f\u7528\u4e8c\u8fdb\u5236\u6570\u7684\u4f4d\u3002 \u6211\u4eec\u6709\u4e8c\u8fdb\u5236\u903b\u8f91\u8fd0\u7b97\u7b26\u548c\u79fb\u4f4d\u8fd0\u7b97\u7b26\u3002 \u5728 Python \u7b49\u9ad8\u7ea7\u8bed\u8a00\u4e2d\u5f88\u5c11\u4f7f\u7528\u6309\u4f4d\u8fd0\u7b97\u7b26\u3002 \u7b26\u53f7 \u542b\u4e49 `~` \u6309\u4f4d\u53d6\u53cd `^` \u6309\u4f4d\u5f02\u6216 `&` \u6309\u4f4d\u4e0e `|` \u6309\u4f4d\u6216 ` < < ` \u5de6\u79fb `>>` \u53f3\u79fb \u6309\u4f4d\u53d6\u53cd\u8fd0\u7b97\u7b26\u5206\u522b\u5c06 1 \u66f4\u6539\u4e3a 0\uff0c\u5c06 0 \u66f4\u6539\u4e3a 1\u3002 1 2 3 4 >>> ~7 -8 >>> ~-8 7 \u8fd0\u7b97\u7b26\u6062\u590d\u6570\u5b57 7 \u7684\u6240\u6709\u4f4d\u3002\u8fd9\u4e9b\u4f4d\u4e4b\u4e00\u8fd8\u786e\u5b9a\u6570\u5b57\u662f\u5426\u4e3a\u8d1f\u3002 \u5982\u679c\u6211\u4eec\u518d\u4e00\u6b21\u5bf9\u6240\u6709\u4f4d\u53d6\u53cd\uff0c\u6211\u4eec\u5c06\u518d\u6b21\u5f97\u5230 7\u3002 \u6309\u4f4d\uff0c\u8fd0\u7b97\u7b26\u5728\u4e24\u4e2a\u6570\u5b57\u4e4b\u95f4\u8fdb\u884c\u9010\u4f4d\u6bd4\u8f83\u3002 \u4ec5\u5f53\u64cd\u4f5c\u6570\u4e2d\u7684\u4e24\u4e2a\u5bf9\u5e94\u4f4d\u5747\u4e3a 1 \u65f6\uff0c\u4f4d\u4f4d\u7f6e\u7684\u7ed3\u679c\u624d\u4e3a 1\u3002 1 2 3 00110 & 00011 = 00010 \u7b2c\u4e00\u4e2a\u6570\u5b57\u662f\u4e8c\u8fdb\u5236\u8868\u793a\u6cd5 6\uff0c\u7b2c\u4e8c\u4e2a\u6570\u5b57\u662f 3\uff0c\u6700\u7ec8\u7ed3\u679c\u662f 2\u3002 1 2 3 4 >>> 6 & 3 2 >>> 3 & 6 2 \u6309\u4f4d\u6216\u8fd0\u7b97\u7b26\u5728\u4e24\u4e2a\u6570\u5b57\u4e4b\u95f4\u8fdb\u884c\u9010\u4f4d\u6bd4\u8f83\u3002 \u5982\u679c\u64cd\u4f5c\u6570\u4e2d\u7684\u4efb\u4f55\u5bf9\u5e94\u4f4d\u4e3a 1\uff0c\u5219\u4f4d\u4f4d\u7f6e\u7684\u7ed3\u679c\u4e3a 1\u3002 1 2 3 00110 | 00011 = 00111 \u7ed3\u679c\u4e3a 00110 \u6216\u5341\u8fdb\u5236 7\u3002 1 2 >>> 6 | 3 7 \u6309\u4f4d\u4e92\u65a5\u6216\u8fd0\u7b97\u7b26\u5728\u4e24\u4e2a\u6570\u5b57\u4e4b\u95f4\u8fdb\u884c\u9010\u4f4d\u6bd4\u8f83\u3002 \u5982\u679c\u64cd\u4f5c\u6570\u4e2d\u5bf9\u5e94\u4f4d\u4e2d\u7684\u4e00\u4e2a\u6216\u53e6\u4e00\u4e2a\uff08\u4f46\u4e0d\u662f\u5168\u90e8\uff09\u4e3a 1\uff0c\u5219\u4f4d\u4f4d\u7f6e\u7684\u7ed3\u679c\u4e3a 1\u3002 1 2 3 00110 ^ 00011 = 00101 \u7ed3\u679c\u4e3a 00101 \u6216\u5341\u8fdb\u5236 5\u3002 1 2 >>> 6 ^ 3 5 \u5982\u524d\u6240\u8ff0\uff0cPython \u548c\u5176\u4ed6\u9ad8\u7ea7\u8bed\u8a00\u5f88\u5c11\u4f7f\u7528\u6309\u4f4d\u8fd0\u7b97\u7b26\u3002 \u4f46\u662f\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u4f1a\u4f7f\u7528\u5b83\u4eec\u3002 \u4e00\u4e2a\u793a\u4f8b\u662f\u63a9\u7801\u3002 \u63a9\u7801\u662f\u7279\u5b9a\u7684\u4f4d\u6a21\u5f0f\u3002 \u5b83\u786e\u5b9a\u662f\u5426\u8bbe\u7f6e\u4e86\u67d0\u4e9b\u5c5e\u6027\u3002 \u8ba9\u6211\u4eec\u4e3e\u4e00\u4e2a GUI \u7f16\u7a0b\u7684\u4f8b\u5b50\u3002 bitwise_or.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python # bitwise_or.py import wx app = wx.App() window = wx.Frame(None, style=wx.MAXIMIZE_BOX | wx.RESIZE_BORDER | wx.SYSTEM_MENU | wx.CAPTION | wx.CLOSE_BOX) window.Show(True) app.MainLoop() \u8fd9\u662f wxPython \u4ee3\u7801\u7684\u4e00\u4e2a\u5c0f\u793a\u4f8b\u3002 wx.MAXIMIZE_BOX \uff0c wx.RESIZE_BORDER \uff0c wx.SYSTEM_MENU \uff0c wx.CAPTION \u548c wx.CLOSE_BOX \u662f\u5e38\u6570\u3002 \u6309\u4f4d\u6216\u8fd0\u7b97\u7b26\u5c06\u6240\u6709\u8fd9\u4e9b\u5e38\u6570\u6dfb\u52a0\u5230\u63a9\u7801\u4e2d\u3002 \u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u6240\u6709\u8fd9\u4e9b\u5c5e\u6027\u90fd\u662f\u4f7f\u7528\u6309\u4f4d\u6216\u8fd0\u7b97\u7b26\u8bbe\u7f6e\u7684\uff0c\u5e76\u5e94\u7528\u4e8e wx.Frame \u5c0f\u90e8\u4ef6\u3002 \u6700\u540e\uff0c\u6211\u4eec\u8fd8\u6709\u6309\u4f4d\u79fb\u4f4d\u8fd0\u7b97\u7b26\u3002 \u6309\u4f4d\u79fb\u4f4d\u8fd0\u7b97\u7b26\u5411\u53f3\u6216\u5411\u5de6\u79fb\u4f4d\u3002 1 2 number << n : multiply number 2 to the nth power number >> n : divide number by 2 to the nth power \u8fd9\u4e9b\u8fd0\u7b97\u7b26\u4e5f\u79f0\u4e3a\u7b97\u672f\u79fb\u4f4d\u3002 1 2 3 00110 >> 00001 = 00011 \u6211\u4eec\u5c06\u6570\u5b57 6 \u7684\u6bcf\u4e2a\u4f4d\u5411\u53f3\u79fb\u52a8\u3002 \u7b49\u4e8e\u5c06 6 \u9664\u4ee5 2\u3002\u7ed3\u679c\u4e3a 00011 \u6216\u5341\u8fdb\u5236 3\u3002 1 2 >>> 6 >> 1 3 1 2 3 00110 << 00001 = 01100 \u6211\u4eec\u5c06\u6570\u5b57 6 \u7684\u6bcf\u4e2a\u4f4d\u5411\u5de6\u79fb\u52a8\u3002 \u7b49\u4e8e\u5c06\u6570\u5b57 6 \u4e58\u4ee5 2\u3002\u7ed3\u679c\u4e3a 01100 \u6216\u5341\u8fdb\u5236 12\u3002 1 2 >>> 6 << 1 12","title":"Python \u6309\u4f4d\u8fd0\u7b97\u7b26"},{"location":"pages/python/pytutorial/python-operators/#Python-\u590d\u5408\u8d4b\u503c\u8fd0\u7b97\u7b26","text":"\u590d\u5408\u8d4b\u503c\u8fd0\u7b97\u7b26\u7531\u4e24\u4e2a\u8fd0\u7b97\u7b26\u7ec4\u6210\u3002 \u4ed6\u4eec\u662f\u901f\u8bb0\u5458\u3002 1 2 3 4 5 6 7 >>> i = 1 >>> i = i + 1 >>> i 2 >>> i += 1 >>> i 3 += \u590d\u5408\u8fd0\u7b97\u7b26\u662f\u8fd9\u4e9b\u901f\u8bb0\u8fd0\u7b97\u7b26\u4e4b\u4e00\u3002 \u5176\u4ed6\u590d\u5408\u8fd0\u7b97\u7b26\u662f\uff1a 1 -= *= /= //= %= **= &= |= ^= >>= <<=","title":"Python \u590d\u5408\u8d4b\u503c\u8fd0\u7b97\u7b26"},{"location":"pages/python/pytutorial/python-operators/#Python-\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7","text":"\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7\u544a\u8bc9\u6211\u4eec\u9996\u5148\u8bc4\u4f30\u54ea\u4e2a\u8fd0\u7b97\u7b26\u3002 \u4f18\u5148\u7ea7\u5bf9\u4e8e\u907f\u514d\u8868\u8fbe\u5f0f\u4e2d\u7684\u6b67\u4e49\u662f\u5fc5\u8981\u7684\u3002 \u4ee5\u4e0b\u8868\u8fbe\u5f0f 28 \u6216 40 \u7684\u7ed3\u679c\u662f\u4ec0\u4e48\uff1f 1 3 + 5 * 5 \u50cf\u6570\u5b66\u4e2d\u4e00\u6837\uff0c\u4e58\u6cd5\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u9ad8\u4e8e\u52a0\u6cd5\u8fd0\u7b97\u7b26\u3002 \u7ed3\u679c\u662f 28\u3002 1 (3 + 5) * 5 \u8981\u66f4\u6539\u8bc4\u4f30\u987a\u5e8f\uff0c\u53ef\u4ee5\u4f7f\u7528\u65b9\u62ec\u53f7\u3002 \u65b9\u62ec\u53f7\u5185\u7684\u8868\u8fbe\u5f0f\u59cb\u7ec8\u9996\u5148\u88ab\u6c42\u503c\u3002 \u4ee5\u4e0b\u5217\u8868\u663e\u793a\u4e86 Python \u4e2d\u7684\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7\u3002 1 2 3 4 5 6 7 8 9 10 11 12 unary + - ~ ** * / % + - >> << & ^ | < <= == >= > != is not and or \u540c\u4e00\u884c\u4e0a\u7684\u8fd0\u7b97\u7b26\u5177\u6709\u76f8\u540c\u7684\u4f18\u5148\u7ea7\u3002 \u4f18\u5148\u7ea7\u4ece\u4f4e\u5230\u9ad8\u3002 precedence.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python # precedence.py print(3 + 5 * 5) print((3 + 5) * 5) print(2 ** 3 * 5) print(not True or True) print(not (True or True)) \u5728\u6b64\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u663e\u793a\u4e00\u4e9b\u5e38\u89c1\u7684\u8868\u8fbe\u5f0f\u3002 \u6bcf\u4e2a\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u53d6\u51b3\u4e8e\u4f18\u5148\u7ea7\u3002 1 print(2 ** 3 * 5) \u5e42\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u9ad8\u4e8e\u4e58\u6cd5\u8fd0\u7b97\u7b26\u3002 \u9996\u5148\uff0c\u5bf9 2 ** 3 \u6c42\u503c\uff0c\u8fd4\u56de 8\u3002\u7136\u540e\u5c06\u7ed3\u679c\u4e58\u4ee5 5\uff0c\u7ed3\u679c\u4e3a 40\u3002 1 print(not True or True) \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c not \u8fd0\u7b97\u7b26\u5177\u6709\u66f4\u9ad8\u7684\u4f18\u5148\u7ea7\u3002 \u9996\u5148\uff0c\u5c06\u7b2c\u4e00\u4e2a True \u503c\u53d6\u53cd\u4e3a False \uff0c\u7136\u540e or \u8fd0\u7b97\u7b26\u7ec4\u5408 False \u548c True \uff0c\u6700\u540e\u5f97\u5230 True \u3002 1 2 3 4 5 6 $ ./precedence.py 28 40 40 True False \u5173\u7cfb\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u9ad8\u4e8e\u903b\u8f91\u8fd0\u7b97\u7b26\u3002 positive.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python # positive.py a = 1 b = 2 if (a > 0 and b > 0): print(\"a and b are positive integers\") and \u8fd0\u7b97\u7b26\u7b49\u5f85\u4e24\u4e2a\u5e03\u5c14\u503c\u3002 \u5982\u679c\u5176\u4e2d\u4e00\u4e2a\u64cd\u4f5c\u6570\u4e0d\u662f\u5e03\u5c14\u503c\uff0c\u5219\u4f1a\u51fa\u73b0\u8bed\u6cd5\u9519\u8bef\u3002 \u5728 Python \u4e2d\uff0c\u5173\u7cfb\u8fd0\u7b97\u7b26\u5728\u903b\u8f91\u4e0e\u4e4b\u524d\u8fdb\u884c\u6c42\u503c\u3002 1 2 $ ./positive.py a and b are positive integers","title":"Python \u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7"},{"location":"pages/python/pytutorial/python-operators/#Python-\u5173\u8054\u89c4\u5219","text":"\u6709\u65f6\uff0c\u4f18\u5148\u7ea7\u4e0d\u80fd\u4ee4\u4eba\u6ee1\u610f\u5730\u786e\u5b9a\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u3002 \u8fd8\u6709\u53e6\u4e00\u4e2a\u89c4\u5219\u79f0\u4e3a\u5173\u8054\u6027\u3002 \u8fd0\u7b97\u7b26\u7684\u5173\u8054\u6027\u786e\u5b9a\u4f18\u5148\u7ea7\u4e0e\u76f8\u540c\u7684\u8fd0\u7b97\u7b26\u7684\u8bc4\u4f30\u987a\u5e8f\u3002 1 9 / 3 * 3 \u6b64\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u662f 9 \u8fd8\u662f 1\uff1f \u4e58\u6cd5\uff0c\u5220\u9664\u548c\u6a21\u8fd0\u7b97\u7b26\u4ece\u5de6\u5230\u53f3\u5173\u8054\u3002 \u56e0\u6b64\uff0c\u8be5\u8868\u8fbe\u5f0f\u7684\u8ba1\u7b97\u65b9\u5f0f\u4e3a\uff1a (9 / 3) * 3 \uff0c\u7ed3\u679c\u4e3a 9\u3002 \u7b97\u672f\uff0c\u5e03\u5c14\uff0c\u5173\u7cfb\u548c\u6309\u4f4d\u8fd0\u7b97\u7b26\u90fd\u662f\u4ece\u5de6\u5230\u53f3\u5173\u8054\u7684\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u8d4b\u503c\u8fd0\u7b97\u7b26\u662f\u6b63\u786e\u5173\u8054\u7684\u3002 1 2 3 >>> a = b = c = d = 0 >>> a, b, c, d (0, 0, 0, 0) \u5982\u679c\u5173\u8054\u4ece\u5de6\u5230\u53f3\uff0c\u5219\u4ee5\u524d\u7684\u8868\u8fbe\u5f0f\u5c06\u4e0d\u53ef\u80fd\u3002 \u590d\u5408\u8d4b\u503c\u8fd0\u7b97\u7b26\u4ece\u53f3\u5230\u5de6\u5173\u8054\u3002 1 2 3 4 >>> j = 0 >>> j *= 3 + 1 >>> j 0 \u60a8\u53ef\u80fd\u671f\u671b\u7ed3\u679c\u4e3a 1\uff0c\u4f46\u662f\u5b9e\u9645\u7ed3\u679c\u4e3a 0\u3002\u7531\u4e8e\u6709\u5173\u8054\u6027\uff0c\u9996\u5148\u8bc4\u4f30\u53f3\u8fb9\u7684\u8868\u8fbe\u5f0f\uff0c\u7136\u540e\u5e94\u7528\u590d\u5408\u8d4b\u503c\u8fd0\u7b97\u7b26\u3002","title":"Python \u5173\u8054\u89c4\u5219"},{"location":"pages/python/pytutorial/python-packages/","text":"Python \u4e2d\u7684\u8f6f\u4ef6\u5305 \u00b6 Python \u5305 \u662f\u5177\u6709\u901a\u7528\u76ee\u7684\u7684\u6a21\u5757\u7684\u96c6\u5408\uff0c\u8f6f\u4ef6\u5305\u76ee\u5f55\u5fc5\u987b\u6709\u4e00\u4e2a\u540d\u4e3a __init__.py \u7684\u7279\u6b8a\u6587\u4ef6\u3002 \uff08\u4ece Python 3.3 \u5f00\u59cb\uff0c\u4e0d\u518d\u9700\u8981 __init__.py \u6765\u5b9a\u4e49\u8f6f\u4ef6\u5305\u76ee\u5f55\u3002\uff09Python \u6a21\u5757\u662f\u5355\u4e2a Python \u6587\u4ef6\u3002 \u5f53\u6211\u4eec\u5904\u7406\u5305\u542b\u6210\u767e\u4e0a\u5343\u4e2a\u6a21\u5757\u7684\u5927\u578b\u9879\u76ee\u65f6\uff0c\u4f7f\u7528\u5305\u81f3\u5173\u91cd\u8981\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6240\u6709\u4e0e\u6570\u636e\u5e93\u76f8\u5173\u7684\u6a21\u5757\u653e\u5728\u4e00\u4e2a\u6570\u636e\u5e93\u5305\u4e2d\uff0c\u5e76\u5c06\u7528\u6237\u754c\u9762\u4ee3\u7801\u653e\u5728 ui \u5305\u4e2d\u3002 \u5185\u7f6e\u8f6f\u4ef6\u5305\u53ef\u5728\u9884\u5b9a\u4e49\u76ee\u5f55\u4e2d\u4f7f\u7528\uff1b \u4f8b\u5982 Debian Linux \u4e0a\u7684 /usr/lib/python3.5 \u6216 C:\\Users\\Jano\\AppData\\Local\\Programs\\Python\\Python36-32\\Lib\\site-packages \u3002 \u7b2c\u4e09\u65b9\u8f6f\u4ef6\u5305\u5df2\u5b89\u88c5\u5230\u9884\u5b9a\u4e49\u76ee\u5f55\u4e2d\uff0c\u4f8b\u5982 Debian Linux \u4e0a\u7684 /usr/local/lib/python3.5/dist-packages \u6216 Windows \u4e0a\u7684 C:\\Users\\Jano\\AppData\\Local\\Programs\\Python\\Python36-32\\libs \u3002 Python \u5305\u7ba1\u7406 \u00b6 Python \u8f6f\u4ef6\u5305\u7531 Python \u8f6f\u4ef6\u5305\u7ba1\u7406\u5668 pip \u8fdb\u884c\u7ba1\u7406\u3002 1 $ sudo pip3 install arrow \u4f8b\u5982\uff0c\u4f7f\u7528\u4e0a\u8ff0\u547d\u4ee4\u5b89\u88c5\u4e86\u7bad\u5934\u5e93\u3002 1 $ sudo pip3 uninstall arrow \u8981\u5378\u8f7d\u7bad\u5934\uff0c\u6211\u4eec\u4f7f\u7528\u4e0a\u9762\u7684\u547d\u4ee4\u3002 \u7a7a\u767d __init__.py \u7684 Python \u8f6f\u4ef6\u5305 \u00b6 \u5728\u7b2c\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 Python \u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u7a0b\u5e8f\u5305\u3002 1 2 3 4 5 6 $ tree . \u251c\u2500\u2500 mymath \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 mfuns.py \u2514\u2500\u2500 myprog.py \u5728\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a mymath \u76ee\u5f55\u548c\u4e00\u4e2a myprog.py \u811a\u672c\u3002 mymath \u5305\u542b __init__.py \u6587\u4ef6\uff0c\u8be5\u6587\u4ef6\u5c06 mymath \u76ee\u5f55\u6807\u8bb0\u4e3a\u8f6f\u4ef6\u5305\u76ee\u5f55\u3002 mymath \u76ee\u5f55\u6709\u4e24\u4e2a\u6587\u4ef6\uff1a __init__.py \u6587\u4ef6\u4f7f\u5e38\u91cf\u6210\u4e3a Python \u8f6f\u4ef6\u5305\u76ee\u5f55\uff0c\u800c mfuns.py \u662f Python \u6a21\u5757\u3002 __init__.py __init__.py \u4e3a\u7a7a\u767d\uff0c\u5b83\u53ef\u4ee5\u5305\u542b\u4e00\u4e9b\u4ee3\u7801\uff0c\u4f46\u4e5f\u53ef\u4ee5\u4e3a\u7a7a\u3002 mfuns.py 1 2 3 def mycube(x): return x * x * x \u5728 mfuns.py \u6a21\u5757\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86 cube() \u51fd\u6570\u3002 myprog.py 1 2 3 4 5 6 7 #!/usr/bin/env python # myprog.py from mymath.mfuns import mycube print(mycube(3)) \u5728 myprog.py \u7a0b\u5e8f\u4e2d\uff0c\u6211\u4eec\u4ece mymath.mfuns \u6a21\u5757\u5bfc\u5165 mycube \u529f\u80fd\u3002 \u6a21\u5757\u540d\u79f0\u548c\u7a0b\u5e8f\u5305\u540d\u79f0\u7528\u70b9\u5b57\u7b26\u5206\u9694\u3002 __init__.py \u4e2d\u7684 Python \u5bfc\u5165\u529f\u80fd \u00b6 \u5728\u4e0b\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5728 __init__.py \u6587\u4ef6\u4e2d\u6709\u4e00\u4e9b\u4ee3\u7801\u3002 1 2 3 4 5 6 $ tree . \u251c\u2500\u2500 mymath \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 mfuns.py \u2514\u2500\u2500 myprog.py \u6211\u4eec\u5177\u6709\u76f8\u540c\u7684\u76ee\u5f55\u7ed3\u6784\u3002 init .py 1 from .mfuns import mycube \u5728 __init__.py \u6587\u4ef6\u4e2d\uff0c\u6211\u4eec\u5bfc\u5165 mycube \u529f\u80fd\u3002 \u7ed3\u679c\uff0c\u5f53\u6211\u4eec\u4ece mymath \u5305\u4e2d\u5f15\u7528 mycube \u51fd\u6570\u65f6\uff0c\u6211\u4eec\u4e0d\u5fc5\u6307\u5b9a\u6a21\u5757\u540d\u79f0\u3002 mfuns.py 1 2 3 def mycube(x): return x * x * x \u5728 mfuns.py \u6a21\u5757\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86 cube() \u51fd\u6570\u3002 myprog.py 1 2 3 4 5 6 7 #!/usr/bin/env python # myprog.py from mymath import mycube print(mycube(3)) \u5728 myprog.py \u7a0b\u5e8f\u4e2d\uff0c\u6211\u4eec\u5bfc\u5165 mycube \u529f\u80fd\u3002 \u8fd9\u6b21\u6211\u4eec\u7701\u7565\u4e86\u6a21\u5757\u540d\u79f0\u3002 \u6ca1\u6709 __init__.py \u7684 Python \u5305 \u00b6 \u4ece Python 3.3 \u5f00\u59cb\uff0c\u65e0\u9700\u4f7f\u7528 __init__.py \u6587\u4ef6\u5c31\u53ef\u4ee5\u5b9a\u4e49\u8f6f\u4ef6\u5305\u76ee\u5f55\u3002 1 2 3 read.py constants/ data.py \u5728\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a constants \u76ee\u5f55\u548c\u4e00\u4e2a read.py \u811a\u672c\u3002 data.py 1 2 colours = ('yellow', 'blue', 'red', 'orange', 'brown') names = ('Jack', 'Jessica', 'Robert', 'Lucy', 'Tom') data.py \u6a21\u5757\u6709\u4e24\u4e2a\u5143\u7ec4\u3002 read.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python # read.py from constants.data import colours import constants.data as mydata print(colours) print(mydata.names) \u5728 read.py \u811a\u672c\u4e2d\uff0c\u6211\u4eec\u5bfc\u5165\u5143\u7ec4\u5e76\u5c06\u5176\u6253\u5370\u5230\u7ec8\u7aef\u3002 1 2 3 $ ./read.py ('yellow', 'blue', 'red', 'orange', 'brown') ('Jack', 'Jessica', 'Robert', 'Lucy', 'Tom') Python arrow \u5305 \u00b6 arrow \u662f\u7528\u4e8e\u5728 Python \u4e2d\u5904\u7406\u65e5\u671f\u548c\u65f6\u95f4\u7684\u7b2c\u4e09\u65b9\u5e93\u3002 1 2 3 $ ls /usr/local/lib/python3.5/dist-packages/arrow api.py arrow.py factory.py formatter.py __init__.py locales.py parser.py __pycache__ util.py \u8be5\u5e93\u5b89\u88c5\u5728 Debian Linux \u4e2d dist-packages \u4e0b\u7684 arrow \u76ee\u5f55\u4e2d\u3002 \u8be5\u5e93\u968f pip \u8f6f\u4ef6\u5305\u7ba1\u7406\u5668\u4e00\u8d77\u5b89\u88c5\u3002 \u5982\u6211\u4eec\u6240\u89c1\uff0c\u8be5\u5e93\u662f Python \u6a21\u5757\u7684\u96c6\u5408\u3002 Python \u5b50\u5305 \u00b6 \u6211\u4eec\u8fd8\u53ef\u4ee5\u521b\u5efa\u5b50\u5305\uff0c\u8981\u8bbf\u95ee\u5b50\u5305\uff0c\u6211\u4eec\u4f7f\u7528\u70b9\u8fd0\u7b97\u7b26\u3002 1 2 3 4 5 6 7 8 9 $ tree . \u251c\u2500\u2500 constants \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 data.py \u2502 \u2514\u2500\u2500 numbers \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 myintegers.py \u2514\u2500\u2500 read.py \u8fd9\u662f\u65b0\u7684\u5c42\u6b21\u7ed3\u6784\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u79f0\u4e3a\u6570\u5b57\u7684\u5b50\u5305\u3002 constants/ init .py 1 from .data import names \u8fd9\u662f constants \u76ee\u5f55\u4e2d\u7684 __init__.py \u6587\u4ef6\uff0c\u6211\u4eec\u5bfc\u5165 names \u5143\u7ec4\u3002 constants/data.py 1 names = ('Jack', 'Jessica', 'Robert', 'Lucy', 'Tom') \u8fd9\u662f constants \u76ee\u5f55\u4e2d\u7684 data.py \u6a21\u5757\uff0c\u5b83\u5305\u542b names \u5143\u7ec4\u3002 numbers/ init .py 1 from .myintegers import myintegers \u6570\u5b57\u5305\u4e2d\u7684 __init__.py \u6587\u4ef6\u5177\u6709\u8fd9\u4e00\u884c\u3002 numbers/myintegers.py 1 myintegers = (2, 3, 45, 6, 7, 8, 9) \u6574\u6570\u6a21\u5757\u5b9a\u4e49\u4e86\u4e03\u4e2a\u6574\u6570\u7684\u5143\u7ec4\u3002 \u8be5\u5143\u7ec4\u5c06\u901a\u8fc7 read.py \u811a\u672c\u8fdb\u884c\u8bbf\u95ee\u3002 read.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python # read.py from constants import names from constants.numbers import myintegers print(names) print(myintegers) \u8fd9\u662f read.py \u7a0b\u5e8f\u3002 \u6211\u4eec\u4ece constants \u5305\u4e2d\u5bfc\u5165 names \u5143\u7ec4\uff0c\u5e76\u4ece constants.numbers \u5b50\u5305\u4e2d\u5bfc\u5165 myintegers \u5143\u7ec4\u3002 1 2 3 $ ./read.py ('Jack', 'Jessica', 'Robert', 'Lucy', 'Tom') (2, 3, 45, 6, 7, 8, 9)","title":"Python \u4e2d\u7684\u8f6f\u4ef6\u5305"},{"location":"pages/python/pytutorial/python-packages/#Python-\u4e2d\u7684\u8f6f\u4ef6\u5305","text":"Python \u5305 \u662f\u5177\u6709\u901a\u7528\u76ee\u7684\u7684\u6a21\u5757\u7684\u96c6\u5408\uff0c\u8f6f\u4ef6\u5305\u76ee\u5f55\u5fc5\u987b\u6709\u4e00\u4e2a\u540d\u4e3a __init__.py \u7684\u7279\u6b8a\u6587\u4ef6\u3002 \uff08\u4ece Python 3.3 \u5f00\u59cb\uff0c\u4e0d\u518d\u9700\u8981 __init__.py \u6765\u5b9a\u4e49\u8f6f\u4ef6\u5305\u76ee\u5f55\u3002\uff09Python \u6a21\u5757\u662f\u5355\u4e2a Python \u6587\u4ef6\u3002 \u5f53\u6211\u4eec\u5904\u7406\u5305\u542b\u6210\u767e\u4e0a\u5343\u4e2a\u6a21\u5757\u7684\u5927\u578b\u9879\u76ee\u65f6\uff0c\u4f7f\u7528\u5305\u81f3\u5173\u91cd\u8981\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6240\u6709\u4e0e\u6570\u636e\u5e93\u76f8\u5173\u7684\u6a21\u5757\u653e\u5728\u4e00\u4e2a\u6570\u636e\u5e93\u5305\u4e2d\uff0c\u5e76\u5c06\u7528\u6237\u754c\u9762\u4ee3\u7801\u653e\u5728 ui \u5305\u4e2d\u3002 \u5185\u7f6e\u8f6f\u4ef6\u5305\u53ef\u5728\u9884\u5b9a\u4e49\u76ee\u5f55\u4e2d\u4f7f\u7528\uff1b \u4f8b\u5982 Debian Linux \u4e0a\u7684 /usr/lib/python3.5 \u6216 C:\\Users\\Jano\\AppData\\Local\\Programs\\Python\\Python36-32\\Lib\\site-packages \u3002 \u7b2c\u4e09\u65b9\u8f6f\u4ef6\u5305\u5df2\u5b89\u88c5\u5230\u9884\u5b9a\u4e49\u76ee\u5f55\u4e2d\uff0c\u4f8b\u5982 Debian Linux \u4e0a\u7684 /usr/local/lib/python3.5/dist-packages \u6216 Windows \u4e0a\u7684 C:\\Users\\Jano\\AppData\\Local\\Programs\\Python\\Python36-32\\libs \u3002","title":"Python \u4e2d\u7684\u8f6f\u4ef6\u5305"},{"location":"pages/python/pytutorial/python-packages/#Python-\u5305\u7ba1\u7406","text":"Python \u8f6f\u4ef6\u5305\u7531 Python \u8f6f\u4ef6\u5305\u7ba1\u7406\u5668 pip \u8fdb\u884c\u7ba1\u7406\u3002 1 $ sudo pip3 install arrow \u4f8b\u5982\uff0c\u4f7f\u7528\u4e0a\u8ff0\u547d\u4ee4\u5b89\u88c5\u4e86\u7bad\u5934\u5e93\u3002 1 $ sudo pip3 uninstall arrow \u8981\u5378\u8f7d\u7bad\u5934\uff0c\u6211\u4eec\u4f7f\u7528\u4e0a\u9762\u7684\u547d\u4ee4\u3002","title":"Python \u5305\u7ba1\u7406"},{"location":"pages/python/pytutorial/python-packages/#\u7a7a\u767d__init__py\u7684-Python-\u8f6f\u4ef6\u5305","text":"\u5728\u7b2c\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 Python \u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u7a0b\u5e8f\u5305\u3002 1 2 3 4 5 6 $ tree . \u251c\u2500\u2500 mymath \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 mfuns.py \u2514\u2500\u2500 myprog.py \u5728\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a mymath \u76ee\u5f55\u548c\u4e00\u4e2a myprog.py \u811a\u672c\u3002 mymath \u5305\u542b __init__.py \u6587\u4ef6\uff0c\u8be5\u6587\u4ef6\u5c06 mymath \u76ee\u5f55\u6807\u8bb0\u4e3a\u8f6f\u4ef6\u5305\u76ee\u5f55\u3002 mymath \u76ee\u5f55\u6709\u4e24\u4e2a\u6587\u4ef6\uff1a __init__.py \u6587\u4ef6\u4f7f\u5e38\u91cf\u6210\u4e3a Python \u8f6f\u4ef6\u5305\u76ee\u5f55\uff0c\u800c mfuns.py \u662f Python \u6a21\u5757\u3002 __init__.py __init__.py \u4e3a\u7a7a\u767d\uff0c\u5b83\u53ef\u4ee5\u5305\u542b\u4e00\u4e9b\u4ee3\u7801\uff0c\u4f46\u4e5f\u53ef\u4ee5\u4e3a\u7a7a\u3002 mfuns.py 1 2 3 def mycube(x): return x * x * x \u5728 mfuns.py \u6a21\u5757\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86 cube() \u51fd\u6570\u3002 myprog.py 1 2 3 4 5 6 7 #!/usr/bin/env python # myprog.py from mymath.mfuns import mycube print(mycube(3)) \u5728 myprog.py \u7a0b\u5e8f\u4e2d\uff0c\u6211\u4eec\u4ece mymath.mfuns \u6a21\u5757\u5bfc\u5165 mycube \u529f\u80fd\u3002 \u6a21\u5757\u540d\u79f0\u548c\u7a0b\u5e8f\u5305\u540d\u79f0\u7528\u70b9\u5b57\u7b26\u5206\u9694\u3002","title":"\u7a7a\u767d__init__.py\u7684 Python \u8f6f\u4ef6\u5305"},{"location":"pages/python/pytutorial/python-packages/#__init__py\u4e2d\u7684-Python-\u5bfc\u5165\u529f\u80fd","text":"\u5728\u4e0b\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5728 __init__.py \u6587\u4ef6\u4e2d\u6709\u4e00\u4e9b\u4ee3\u7801\u3002 1 2 3 4 5 6 $ tree . \u251c\u2500\u2500 mymath \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 mfuns.py \u2514\u2500\u2500 myprog.py \u6211\u4eec\u5177\u6709\u76f8\u540c\u7684\u76ee\u5f55\u7ed3\u6784\u3002 init .py 1 from .mfuns import mycube \u5728 __init__.py \u6587\u4ef6\u4e2d\uff0c\u6211\u4eec\u5bfc\u5165 mycube \u529f\u80fd\u3002 \u7ed3\u679c\uff0c\u5f53\u6211\u4eec\u4ece mymath \u5305\u4e2d\u5f15\u7528 mycube \u51fd\u6570\u65f6\uff0c\u6211\u4eec\u4e0d\u5fc5\u6307\u5b9a\u6a21\u5757\u540d\u79f0\u3002 mfuns.py 1 2 3 def mycube(x): return x * x * x \u5728 mfuns.py \u6a21\u5757\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86 cube() \u51fd\u6570\u3002 myprog.py 1 2 3 4 5 6 7 #!/usr/bin/env python # myprog.py from mymath import mycube print(mycube(3)) \u5728 myprog.py \u7a0b\u5e8f\u4e2d\uff0c\u6211\u4eec\u5bfc\u5165 mycube \u529f\u80fd\u3002 \u8fd9\u6b21\u6211\u4eec\u7701\u7565\u4e86\u6a21\u5757\u540d\u79f0\u3002","title":"__init__.py\u4e2d\u7684 Python \u5bfc\u5165\u529f\u80fd"},{"location":"pages/python/pytutorial/python-packages/#\u6ca1\u6709__init__py\u7684-Python-\u5305","text":"\u4ece Python 3.3 \u5f00\u59cb\uff0c\u65e0\u9700\u4f7f\u7528 __init__.py \u6587\u4ef6\u5c31\u53ef\u4ee5\u5b9a\u4e49\u8f6f\u4ef6\u5305\u76ee\u5f55\u3002 1 2 3 read.py constants/ data.py \u5728\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a constants \u76ee\u5f55\u548c\u4e00\u4e2a read.py \u811a\u672c\u3002 data.py 1 2 colours = ('yellow', 'blue', 'red', 'orange', 'brown') names = ('Jack', 'Jessica', 'Robert', 'Lucy', 'Tom') data.py \u6a21\u5757\u6709\u4e24\u4e2a\u5143\u7ec4\u3002 read.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python # read.py from constants.data import colours import constants.data as mydata print(colours) print(mydata.names) \u5728 read.py \u811a\u672c\u4e2d\uff0c\u6211\u4eec\u5bfc\u5165\u5143\u7ec4\u5e76\u5c06\u5176\u6253\u5370\u5230\u7ec8\u7aef\u3002 1 2 3 $ ./read.py ('yellow', 'blue', 'red', 'orange', 'brown') ('Jack', 'Jessica', 'Robert', 'Lucy', 'Tom')","title":"\u6ca1\u6709__init__.py\u7684 Python \u5305"},{"location":"pages/python/pytutorial/python-packages/#Python-arrow\u5305","text":"arrow \u662f\u7528\u4e8e\u5728 Python \u4e2d\u5904\u7406\u65e5\u671f\u548c\u65f6\u95f4\u7684\u7b2c\u4e09\u65b9\u5e93\u3002 1 2 3 $ ls /usr/local/lib/python3.5/dist-packages/arrow api.py arrow.py factory.py formatter.py __init__.py locales.py parser.py __pycache__ util.py \u8be5\u5e93\u5b89\u88c5\u5728 Debian Linux \u4e2d dist-packages \u4e0b\u7684 arrow \u76ee\u5f55\u4e2d\u3002 \u8be5\u5e93\u968f pip \u8f6f\u4ef6\u5305\u7ba1\u7406\u5668\u4e00\u8d77\u5b89\u88c5\u3002 \u5982\u6211\u4eec\u6240\u89c1\uff0c\u8be5\u5e93\u662f Python \u6a21\u5757\u7684\u96c6\u5408\u3002","title":"Python arrow\u5305"},{"location":"pages/python/pytutorial/python-packages/#Python-\u5b50\u5305","text":"\u6211\u4eec\u8fd8\u53ef\u4ee5\u521b\u5efa\u5b50\u5305\uff0c\u8981\u8bbf\u95ee\u5b50\u5305\uff0c\u6211\u4eec\u4f7f\u7528\u70b9\u8fd0\u7b97\u7b26\u3002 1 2 3 4 5 6 7 8 9 $ tree . \u251c\u2500\u2500 constants \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 data.py \u2502 \u2514\u2500\u2500 numbers \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 myintegers.py \u2514\u2500\u2500 read.py \u8fd9\u662f\u65b0\u7684\u5c42\u6b21\u7ed3\u6784\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u79f0\u4e3a\u6570\u5b57\u7684\u5b50\u5305\u3002 constants/ init .py 1 from .data import names \u8fd9\u662f constants \u76ee\u5f55\u4e2d\u7684 __init__.py \u6587\u4ef6\uff0c\u6211\u4eec\u5bfc\u5165 names \u5143\u7ec4\u3002 constants/data.py 1 names = ('Jack', 'Jessica', 'Robert', 'Lucy', 'Tom') \u8fd9\u662f constants \u76ee\u5f55\u4e2d\u7684 data.py \u6a21\u5757\uff0c\u5b83\u5305\u542b names \u5143\u7ec4\u3002 numbers/ init .py 1 from .myintegers import myintegers \u6570\u5b57\u5305\u4e2d\u7684 __init__.py \u6587\u4ef6\u5177\u6709\u8fd9\u4e00\u884c\u3002 numbers/myintegers.py 1 myintegers = (2, 3, 45, 6, 7, 8, 9) \u6574\u6570\u6a21\u5757\u5b9a\u4e49\u4e86\u4e03\u4e2a\u6574\u6570\u7684\u5143\u7ec4\u3002 \u8be5\u5143\u7ec4\u5c06\u901a\u8fc7 read.py \u811a\u672c\u8fdb\u884c\u8bbf\u95ee\u3002 read.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python # read.py from constants import names from constants.numbers import myintegers print(names) print(myintegers) \u8fd9\u662f read.py \u7a0b\u5e8f\u3002 \u6211\u4eec\u4ece constants \u5305\u4e2d\u5bfc\u5165 names \u5143\u7ec4\uff0c\u5e76\u4ece constants.numbers \u5b50\u5305\u4e2d\u5bfc\u5165 myintegers \u5143\u7ec4\u3002 1 2 3 $ ./read.py ('Jack', 'Jessica', 'Robert', 'Lucy', 'Tom') (2, 3, 45, 6, 7, 8, 9)","title":"Python \u5b50\u5305"},{"location":"pages/python/pytutorial/python-pandas/","text":"Pandas \u6559\u7a0b \u00b6 \u8fd9\u662f Pandas \u7684\u5165\u95e8\u6559\u7a0b \uff0c\u672c\u6559\u7a0b\u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528 Pandas \u5e93\u5728 Python \u4e2d\u8fdb\u884c\u57fa\u672c\u6570\u636e\u5206\u6790\u3002 Pandas \u00b6 Pandas \u662f BSD \u8bb8\u53ef\u7684\u5f00\u653e\u6e90\u4ee3\u7801\u5e93\uff0c\u4e3a Python \u7f16\u7a0b\u8bed\u8a00\u63d0\u4f9b\u4e86\u9ad8\u6027\u80fd\uff0c\u6613\u4e8e\u4f7f\u7528\u7684\u6570\u636e\u7ed3\u6784\u548c\u6570\u636e\u5206\u6790\u5de5\u5177\u3002 \u5e93\u7684\u540d\u79f0\u6765\u81ea\u201c\u9762\u677f\u6570\u636e\u201d\u4e00\u8bcd\uff0c\u8fd9\u662f\u5bf9\u6570\u636e\u96c6\u7684\u8ba1\u91cf\u7ecf\u6d4e\u5b66\u672f\u8bed\uff0c\u5176\u4e2d\u5305\u62ec\u5bf9\u540c\u4e00\u4e2a\u4eba\u5728\u591a\u4e2a\u65f6\u95f4\u6bb5\u5185\u7684\u89c2\u5bdf\u3002 \u5b83\u63d0\u4f9b\u7528\u4e8e\u64cd\u7eb5\u6570\u503c\u8868\u548c\u65f6\u95f4\u5e8f\u5217\u7684\u6570\u636e\u7ed3\u6784\u548c\u64cd\u4f5c\u3002 \u4e3b\u8981\u7684\u4e24\u79cd\u6570\u636e\u7c7b\u578b\u662f\uff1a Series \u548c DataFrame \u3002 DataFrame \u662f\u5e26\u6709\u6807\u8bb0\u8f74\uff08\u884c\u548c\u5217\uff09\u7684\u4e8c\u7ef4\u5927\u5c0f\u53ef\u53d8\u7684\uff0c\u53ef\u80fd\u662f\u5f02\u6784\u7684\u8868\u683c\u6570\u636e\u7ed3\u6784\u3002 \u5b83\u662f\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u7535\u5b50\u8868\u683c\u7684\u6570\u636e\u7ed3\u6784\u3002 Series \u662f DataFrame \u7684\u5355\u4e2a\u5217\u3002 DataFrame \u53ef\u4ee5\u770b\u4f5c\u662f Series \u5bf9\u8c61\u7684\u5b57\u5178\u3002 \u5b89\u88c5 Pandas \u00b6 \u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5b89\u88c5 Pandas\uff1a 1 $ pip3 install pandas \u6211\u4eec\u4f7f\u7528 pip3 \u547d\u4ee4\u5b89\u88c5 pandas \u6a21\u5757\u3002 1 $ pip3 install numpy \u4e00\u4e9b\u793a\u4f8b\u8fd8\u4f7f\u7528 numpy \u3002 Pandas \u7b80\u5355\u7684\u4f8b\u5b50 \u00b6 \u4ee5\u4e0b\u662f\u4e00\u4e2a\u7b80\u5355\u7684 Pandas \u793a\u4f8b\u3002 simple.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python3 import pandas as pd data = [['Alex', 10], ['Ronald', 18], ['Jane', 33]] df = pd.DataFrame(data, columns=['Name', 'Age']) print(df) \u5728\u7a0b\u5e8f\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684 DataFrame \u5e76\u5c06\u5176\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 import pandas as pd \u6211\u4eec\u5bfc\u5165 Pandas \u5e93\u3002 1 data = [['Alex', 10], ['Ronald', 18], ['Jane', 33]] \u8fd9\u662f\u8981\u5728\u6846\u67b6\u4e2d\u663e\u793a\u7684\u6570\u636e\u3002 \u6bcf\u4e2a\u5d4c\u5957\u5217\u8868\u5728\u8868\u4e2d\u90fd\u662f\u4e00\u884c\u3002 \u8bf7\u6ce8\u610f\uff0c\u6709\u5f88\u591a\u65b9\u6cd5\u53ef\u4ee5\u521d\u59cb\u5316 Pandas DataFrame \u3002 1 df = pd.DataFrame(data, columns=['Name', 'Age']) \u6839\u636e\u6570\u636e\u521b\u5efa\u4e00\u4e2a DataFrame \u3002 \u6211\u4eec\u7528 columns \u5c5e\u6027\u7ed9\u6846\u67b6\u5217\u540d\u3002 1 2 3 4 5 $ python simple.py Name Age 0 Alex 10 1 Ronald 18 2 Jane 33 \u8fd9\u662f\u8f93\u51fa\u3002 \u7b2c\u4e00\u5217\u662f\u884c\u7d22\u5f15\u3002 Pandas \u6539\u53d8\u7d22\u5f15 \u00b6 \u6211\u4eec\u53ef\u4ee5\u66f4\u65b0\u7d22\u5f15\uff0c\u4f7f\u5176\u4e0d\u4ece 0 \u5f00\u59cb\u3002 change_index.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python3 import pandas as pd data = [['Alex', 10], ['Ronald', 18], ['Jane', 33]] df = pd.DataFrame(data, columns=['Name', 'Age']) df.index = df.index + 1 print(df) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06 1 \u52a0\u5230\u7d22\u5f15\u3002 1 2 3 4 5 $ python change_index.py Name Age 1 Alex 10 2 Ronald 18 3 Jane 33 \u8fd9\u662f\u8f93\u51fa\u3002 Pandas \u6807\u91cf\u5e8f\u5217 \u00b6 \u4ee5\u4e0b\u793a\u4f8b\u521b\u5efa\u4e00\u7cfb\u5217\u6807\u91cf\u503c\u3002 series_scalar.py 1 2 3 4 5 6 #!/usr/bin/env python3 import pandas as pd s = pd.Series(5, index=[0, 1, 2, 3]) print(s) \u6211\u4eec\u6709\u4e00\u5217\u5305\u542b\u6570\u5b57\u3002 1 2 3 4 5 6 $ python series_scalar.py 0 5 1 5 2 5 3 5 dtype: int64 \u5de6\u5217\u662f\u7d22\u5f15\u3002 Pandas \u5e8f\u5217 ndarray \u00b6 \u6211\u4eec\u53ef\u4ee5\u4ece numpy ndarray \u521b\u5efa\u4e00\u4e2a\u7cfb\u5217\u5bf9\u8c61\u3002 series_numpy.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python3 import pandas as pd import numpy as np data = np.array(['a', 'b', 'c', 'd']) s = pd.Series(data) print(s) \u8be5\u793a\u4f8b\u4ece ndarray \u521b\u5efa\u4e00\u5217\u5b57\u6bcd\u3002 1 2 3 4 5 6 $ python series_numpy.py 0 a 1 b 2 c 3 d dtype: object \u8fd9\u662f\u8f93\u51fa\u3002 Pandas \u5e8f\u5217\u5b57\u5178 \u00b6 \u53ef\u4ee5\u4ece Python \u5b57\u5178\u521b\u5efa\u7cfb\u5217\u3002 series_dict.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python3 import pandas as pd import numpy as np data = {'coins' : 22, 'pens' : 3, 'books' : 28} s = pd.Series(data) print(s) \u8be5\u793a\u4f8b\u6839\u636e\u4e00\u7cfb\u5217\u9879\u76ee\u521b\u5efa\u4e00\u4e2a\u7cfb\u5217\u5bf9\u8c61\u3002 1 2 3 4 5 $ python series_dict.py coins 22 pens 3 books 28 dtype: int64 \u7d22\u5f15\u7531\u9879\u76ee\u540d\u79f0\u7ec4\u6210\u3002 Pandas \u5e8f\u5217\u68c0\u7d22 \u00b6 \u4ee5\u4e0b\u793a\u4f8b\u4ece\u4e00\u7cfb\u5217\u5bf9\u8c61\u4e2d\u68c0\u7d22\u503c\u3002 series_retrieve.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python3 import pandas as pd s = pd.Series([1, 2, 3, 4, 5], index=['a', 'b', 'c', 'd', 'e']) print(s[0]) print('-----------------------') print(s[1:4]) print('-----------------------') print(s[['a','c','d']]) \u8be5\u793a\u4f8b\u4ece\u7cfb\u5217\u5bf9\u8c61\u68c0\u7d22\u503c\u3002 1 print(s[0]) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5f97\u5230\u4e00\u4e2a\u503c\u3002 1 print(s[1:4]) \u6211\u4eec\u901a\u8fc7\u5b83\u4eec\u7684\u7d22\u5f15\u68c0\u7d22\u884c\u3002 1 print(s[['a','c','d']]) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u901a\u8fc7\u7d22\u5f15\u6807\u7b7e\u83b7\u53d6\u503c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 $ python series_retrieve.py 1 ----------------------- b 2 c 3 d 4 dtype: int64 ----------------------- a 1 c 3 d 4 dtype: int64 \u8fd9\u662f\u8f93\u51fa\u3002 Pandas \u81ea\u5b9a\u4e49\u7d22\u5f15 \u00b6 \u7d22\u5f15\u5217\u4e0d\u5fc5\u662f\u6570\u5b57\u3002 \u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u81ea\u5df1\u7684\u81ea\u5b9a\u4e49\u7d22\u5f15\u3002 custom_index.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/env python3 import pandas as pd data = {\"country\": [\"Brazil\", \"Russia\", \"India\", \"China\", \"South Africa\"], \"capital\": [\"Brasilia\", \"Moscow\", \"New Dehli\", \"Beijing\", \"Pretoria\"], \"area\": [8.516, 17.10, 3.286, 9.597, 1.221], \"population\": [200.4, 143.5, 1252, 1357, 52.98]} frame = pd.DataFrame(data) print(frame) print('------------------------------') frame.index = [\"BR\", \"RU\", \"IN\", \"CH\", \"SA\"] print(frame) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4ece\u6570\u636e\u5b57\u5178\u521b\u5efa\u6570\u636e\u6846\u67b6\u3002 \u6211\u4eec\u5148\u6253\u5370\u6570\u636e\u6846\uff0c\u7136\u540e\u4f7f\u7528 index \u5c5e\u6027\u66f4\u6539\u7d22\u5f15\u5217\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 $ python custom_index.py country capital area population 0 Brazil Brasilia 8.516 200.40 1 Russia Moscow 17.100 143.50 2 India New Dehli 3.286 1252.00 3 China Beijing 9.597 1357.00 4 South Africa Pretoria 1.221 52.98 ------------------------------ country capital area population BR Brazil Brasilia 8.516 200.40 RU Russia Moscow 17.100 143.50 IN India New Dehli 3.286 1252.00 CH China Beijing 9.597 1357.00 SA South Africa Pretoria 1.221 52.98 \u8fd9\u662f\u8f93\u51fa\u3002 Pandas \u7d22\u5f15\u3001\u5217\u548c\u503c \u00b6 Pandas DataFrame \u5177\u6709\u4e09\u4e2a\u57fa\u672c\u90e8\u5206\uff1a\u7d22\u5f15\uff0c\u5217\u548c\u503c\u3002 index_vals_cols.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python3 import pandas as pd data = [['Alex', 10], ['Ronald', 18], ['Jane', 33]] df = pd.DataFrame(data, columns=['Name', 'Age']) print(f'Index: {df.index}') print(f'Columns: {df.columns}') print(f'Values: {df.values}') \u8be5\u793a\u4f8b\u663e\u793a\u6570\u636e\u6846\u7684\u7d22\u5f15\uff0c\u5217\u548c\u503c\u3002 1 2 3 4 5 6 $ python index_vals_cols.py Index: RangeIndex(start=0, stop=3, step=1) Columns: Index(['Name', 'Age'], dtype='object') Values: [['Alex' 10] ['Ronald' 18] ['Jane' 33]] \u8fd9\u662f\u8f93\u51fa\u3002 Pandas \u7684\u603b\u548c\u548c\u6700\u5927\u503c \u00b6 \u4e0b\u9762\u7684\u793a\u4f8b\u8ba1\u7b97\u6570\u636e\u5e27\u5217\u4e2d\u503c\u7684\u603b\u548c\u548c\u6700\u5927\u503c\u3002 \u5b83\u8fd8\u4f7f\u7528 numpy \u5e93\u3002 sum_max.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python3 import pandas as pd import numpy as np df = pd.DataFrame(np.arange(0, 1200, 2), columns=['A']) # df.index = df.index + 1 print(sum(df['A'])) print(max(df['A'])) # print(df) \u8be5\u793a\u4f8b\u8ba1\u7b97\u6700\u5927\u503c\u548c\u503c\u4e4b\u548c\u3002 \u5b83\u4f7f\u7528 numpy's arange() \u51fd\u6570\u751f\u6210\u503c\u6570\u7ec4\u3002 1 print(sum(df['A'])) \u5f53\u8ba1\u7b97\u603b\u548c\u503c\u65f6\uff0c\u6211\u4eec\u901a\u8fc7\u540d\u79f0\u6765\u5f15\u7528\u8be5\u5217\u3002 1 2 3 $ sum_max.py 359400 1198 \u8fd9\u662f\u8f93\u51fa\u3002 Pandas \u8bfb CSV \u00b6 Pandas \u4f7f\u7528 read_csv() \u4ece CSV \u6587\u4ef6\u8bfb\u53d6\u6570\u636e\u3002 military_spending.csv 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Pos, Country, Amount (Bn. $), GDP 1, United States, 610.0, 3.1 2, China, 228.0, 1.9 3, Saudi Arabia, 69.4, 10.0 4, Russia, 66.3, 4.3 5, India, 63.9, 2.5 6, France, 57.8, 2.3 7, United Kingdom, 47.2, 1.8 8, Japan, 45.4, 0.9 9, Germany, 44.3, 1.2 10, South Korea, 39.2, 2.6 11, Brazil, 29.3, 1.4 12, Italy Italy, 29.2, 1.5 13, Australia Australia, 27.5, 2.0 14, Canada Canada, 20.6, 1.3 15, Turkey Turkey, 18.2, 2.2 \u8fd9\u662f\u4e00\u4e2a\u7b80\u5355\u7684 CSV \u6587\u4ef6\uff0c\u5176\u4e2d\u5305\u542b\u6709\u5173\u56fd\u5bb6\u519b\u4e8b\u652f\u51fa\u7684\u6570\u636e\u3002 \u6ce8\u610f: CSV\u6587\u4ef6\u7684\u7b2c\u4e00\u884c\u53ef\u80fd\u6709\u53ef\u9009\u7684\u5217\u540d. read_from_csv.py 1 2 3 4 5 6 7 #!/usr/bin/env python3 import pandas as pd df = pd.read_csv(\"military_spending.csv\") print(df.to_string(index=False)) \u8be5\u793a\u4f8b\u4ece military_spending.csv \u6587\u4ef6\u4e2d\u8bfb\u53d6\u6240\u6709\u6570\u636e\uff0c\u5e76\u4ee5\u8868\u683c\u683c\u5f0f\u5c06\u5176\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 \u5b83\u4f7f\u7528 read_csv() \u65b9\u6cd5\u3002 1 print(df.to_string(index=False)) \u7531\u4e8e\u6211\u4eec\u6709 positions \u5217\uff0c\u56e0\u6b64\u6211\u4eec\u4ece\u8f93\u51fa\u4e2d\u9690\u85cf\u7d22\u5f15\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 $ python read_from_csv.py Pos Country Amount (Bn. $) GDP 1 United States 610.0 3.1 2 China 228.0 1.9 3 Saudi Arabia 69.4 10.0 4 Russia 66.3 4.3 5 India 63.9 2.5 6 France 57.8 2.3 7 United Kingdom 47.2 1.8 8 Japan 45.4 0.9 9 Germany 44.3 1.2 10 South Korea 39.2 2.6 11 Brazil 29.3 1.4 12 Italy Italy 29.2 1.5 13 Australia Australia 27.5 2.0 14 Canada Canada 20.6 1.3 15 Turkey Turkey 18.2 2.2 \u8fd9\u662f\u8f93\u51fa\u3002 Pandas \u5199 CSV \u00b6 \u7528 to_csv() \u5c06 DataFrame \u5199\u5165 CSV \u6587\u4ef6\u3002 write_csv.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python3 import pandas as pd data = [['Alex', 10], ['Ronald', 18], ['Jane', 33]] df = pd.DataFrame(data, columns=['Name', 'Age']) df.to_csv(\"users.csv\", index=False) \u8be5\u793a\u4f8b\u5c06\u6570\u636e\u5199\u5165 users.csv \u6587\u4ef6\u3002 Pandas \u968f\u673a\u884c \u00b6 \u53ef\u4ee5\u4f7f\u7528 sample() \u9009\u62e9\u6570\u636e\u5e27\u4e2d\u7684\u968f\u673a\u884c\u3002 random_sample.py 1 2 3 4 5 6 7 #!/usr/bin/env python3 import pandas as pd df = pd.read_csv(\"military_spending.csv\") print(df.sample(3)) \u5728\u8be5\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4ece\u6570\u636e\u6846\u4e2d\u6253\u5370\u4e86\u4e09\u4e2a\u968f\u673a\u884c\u3002 Pandas \u6570\u636e\u5b9a\u4f4d \u00b6 to_dict() \u5c06\u6570\u636e\u6846\u8f6c\u6362\u4e3a Python \u5b57\u5178\u3002 \u5b57\u5178\u53ef\u4ee5\u663e\u793a\u5728\u4e0d\u540c\u7684\u6570\u636e\u8f93\u51fa\u4e2d\u3002 data_orient.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #!/usr/bin/env python3 import pandas as pd data = [['Alex', 10], ['Ronald', 18], ['Jane', 33]] df = pd.DataFrame(data, columns=['Name', 'Age']) print('list') print(df.to_dict(orient='list')) print('************************************') print('series') print(df.to_dict(orient='series')) print('************************************') print('dict') print(df.to_dict(orient='dict')) print('************************************') print('split') print(df.to_dict(orient='split')) print('************************************') print('records') print(df.to_dict(orient='records')) print('************************************') print('index') print(df.to_dict(orient='index')) \u8be5\u793a\u4f8b\u4ee5\u516d\u79cd\u4e0d\u540c\u683c\u5f0f\u5c06\u6570\u636e\u5e27\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 Pandas \u63cf\u8ff0 \u00b6 describe() \u65b9\u6cd5\u751f\u6210\u63cf\u8ff0\u6027\u7edf\u8ba1\u6570\u636e\uff0c\u8be5\u6570\u636e\u7edf\u8ba1\u603b\u7ed3\u4e86 NaN \u503c\u4e4b\u5916\u7684\u6570\u636e\u96c6\u5206\u5e03\u7684\u96c6\u4e2d\u8d8b\u52bf\uff0c\u79bb\u6563\u5ea6\u548c\u5f62\u72b6\u3002 describing.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python3 import pandas as pd s1 = pd.Series([1, 2, 3, 4, 5, 6, 7, 8]) s2 = pd.Series([12, 23, 31, 14, 11, 61, 17, 18]) data = {'Vals 1': s1, 'Vals 2': s2} df = pd.DataFrame(data) print(df.describe()) \u8be5\u793a\u4f8b\u4ece\u6570\u636e\u6846\u4e2d\u6253\u5370\u63cf\u8ff0\u6027\u7edf\u8ba1\u4fe1\u606f\u3002 1 2 3 4 5 6 7 8 9 10 $ python describe.py Vals 1 Vals 2 count 8.00000 8.000000 mean 4.50000 23.375000 std 2.44949 16.535136 min 1.00000 11.000000 25% 2.75000 13.500000 50% 4.50000 17.500000 75% 6.25000 25.000000 max 8.00000 61.000000 \u8fd9\u662f\u8f93\u51fa\u3002 Pandas \u8ba1\u6570 \u00b6 \u4e0b\u4e00\u4e2a\u793a\u4f8b\u5bf9\u503c\u8fdb\u884c\u8ba1\u6570\u3002 counting.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python3 import pandas as pd df = pd.read_csv(\"employees.csv\") print(df.count()) print(f'Number of columns: {len(df.columns)}') print(df.shape) count() \u65b9\u6cd5\u8ba1\u7b97\u6bcf\u5217\u7684\u503c\u6570\u3002 \u7528 len(df.columns) \u68c0\u7d22\u5217\u6570\u3002 shape \u8fd4\u56de\u8868\u793a\u6570\u636e\u5e27\u7ef4\u6570\u7684\u5143\u7ec4\u3002 1 2 3 4 5 6 7 8 9 10 11 12 $ python counting.py First Name 933 Gender 855 Start Date 1000 Last Login Time 1000 Salary 1000 Bonus % 1000 Senior Management 933 Team 957 dtype: int64 Number of columns: 8 (1000, 8) \u8bf7\u6ce8\u610f\uff0c\u8fd9\u4e9b\u5217\u5177\u6709\u4e0d\u540c\u6570\u91cf\u7684\u503c\uff0c\u56e0\u4e3a\u7f3a\u5c11\u67d0\u4e9b\u503c\u3002 Pandas head() \u548c tail() \u00b6 \u4f7f\u7528 head() \u548c tail() \u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u663e\u793a\u6570\u636e\u5e27\u7684\u524d n \u884c\u548c\u540e n \u884c\u3002 head_tail.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python3 import pandas as pd df = pd.read_csv(\"military_spending.csv\") print(df.head(4)) print('*******************************************') print(df.tail(4)) \u8be5\u793a\u4f8b\u663e\u793a\u6570\u636e\u6846\u7684\u524d\u56db\u884c\u548c\u540e\u56db\u884c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 $ python head_tail.py Pos Country Amount (Bn. $) GDP 0 1 United States 610.0 3.1 1 2 China 228.0 1.9 2 3 Saudi Arabia 69.4 10.0 3 4 Russia 66.3 4.3 ******************************************* Pos Country Amount (Bn. $) GDP 11 12 Italy Italy 29.2 1.5 12 13 Australia Australia 27.5 2.0 13 14 Canada Canada 20.6 1.3 14 15 Turkey Turkey 18.2 2.2 \u8fd9\u662f\u8f93\u51fa\u3002 Pandas \u6ca1\u6709\u6807\u9898\u548c\u7d22\u5f15 \u00b6 \u5f53\u6211\u4eec\u663e\u793a\u6570\u636e\u6846\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u9690\u85cf\u6807\u9898\u548c\u7d22\u5f15\u3002 no_header_index.py 1 2 3 4 5 6 7 #!/usr/bin/env python3 import pandas as pd df = pd.read_csv(\"military_spending.csv\") print(df.head(4).to_string(header=False, index=False)) \u901a\u8fc7\u5c06 header \u548c index \u5c5e\u6027\u8bbe\u7f6e\u4e3a False \uff0c\u6211\u4eec\u5c06\u8f93\u51fa\u6ca1\u6709\u6807\u9898\u548c\u7d22\u5f15\u7684\u6570\u636e\u5e27\u3002 1 2 3 4 5 $ python no_header.py 1 United States 610.0 3.1 2 China 228.0 1.9 3 Saudi Arabia 69.4 10.0 4 Russia 66.3 4.3 \u8fd9\u662f\u8f93\u51fa\u3002 \uff08\u503c 1 \u5230 4 \u6765\u81ea pos \u5217\u3002\uff09 Pandas loc() \u00b6 loc() \u65b9\u6cd5\u5141\u8bb8\u6309\u6807\u7b7e\u6216\u5e03\u5c14\u6570\u7ec4\u8bbf\u95ee\u4e00\u7ec4\u884c\u548c\u5217\u3002 select_loc.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python3 import pandas as pd data = {'Items': ['coins', 'pens', 'books'], 'Quantity': [22, 28, 3]} df = pd.DataFrame(data, index=['A', 'B', 'C']) print(df.loc['A']) print('-------------------------------') print(df.loc[['A', 'B'], ['Items']]) \u8be5\u793a\u4f8b\u4f7f\u7528 loc() \u51fd\u6570\u3002 1 print(df.loc['A']) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5f97\u5230\u7b2c\u4e00\u884c\u3002 \u6211\u4eec\u901a\u8fc7\u5176\u7d22\u5f15\u6807\u7b7e\u8bbf\u95ee\u8be5\u884c\u3002 1 print(df.loc[['A', 'B'], ['Items']]) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u83b7\u5f97\u4e86 Items \u5217\u7684\u524d\u4e24\u884c\u3002 1 2 3 4 5 6 7 8 $ python select_loc.py Items coins Quantity 22 Name: A, dtype: object ------------------------------- Items A coins B pens \u8fd9\u662f\u8f93\u51fa\u3002 \u7b2c\u4e8c\u4e2a\u793a\u4f8b\u663e\u793a\u5982\u4f55\u901a\u8fc7\u5e03\u5c14\u6570\u7ec4\u9009\u62e9\u3002 select_loc2.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python3 import pandas as pd data = {'Items': ['coins', 'pens', 'books'], 'Quantity': [22, 28, 3]} df = pd.DataFrame(data, index=['A', 'B', 'C']) print(df.loc[[True, False, True], ['Items', 'Quantity']]) \u8be5\u793a\u4f8b\u901a\u8fc7\u5e03\u5c14\u6570\u7ec4\u9009\u62e9\u884c\u3002 1 2 3 4 $ select_loc2.py Items Quantity A coins 22 C books 3 \u8fd9\u662f\u8f93\u51fa\u3002 \u5728\u7b2c\u4e09\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5728\u9009\u62e9\u65f6\u5e94\u7528\u6761\u4ef6\u3002 select_loc3.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python3 import pandas as pd df = pd.read_csv(\"employees.csv\") data = df.loc[(df['Salary'] > 10000) & (df['Salary'] < 50000)] print(data.head(5)) \u8be5\u793a\u4f8b\u4ece employees.csv \u6587\u4ef6\u4e2d\u6253\u5370\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u524d\u4e94\u884c\uff1a\u85aa\u6c34\u5728 10000 \u81f3 50000 \u4e4b\u95f4\u3002 Pandas iloc \u00b6 iloc \u51fd\u6570\u5141\u8bb8\u57fa\u4e8e\u6574\u6570\u4f4d\u7f6e\u7684\u7d22\u5f15\uff0c\u4ee5\u6309\u4f4d\u7f6e\u8fdb\u884c\u9009\u62e9\u3002 select_iloc.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #!/usr/bin/env python3 import pandas as pd df = pd.read_csv(\"employees.csv\") # integer-location based indexing for selection by position. # Multiple row and column selections using iloc and DataFrame print(df.iloc[0:6]) # first six rows of dataframe print('--------------------------------------') print(df.iloc[:, 0:2]) # first two columns of data frame with all rows print('--------------------------------------') # 1st, 4th, 7th, 25th row + 1st 6th 8th column print(df.iloc[[0, 3, 6, 24], [0, 5, 7]]) print('--------------------------------------') # first 5 rows and 5th, 6th, 7th columns of data frame print(df.iloc[:5, 5:8]) print('--------------------------------------') \u8be5\u793a\u4f8b\u663e\u793a\u4e86\u5982\u4f55\u4f7f\u7528 iloc() \u9009\u62e9\u884c\u548c\u5217\u7684\u5404\u79cd\u7ec4\u5408\u3002 Pandas \u6392\u5e8f \u00b6 sort_values() \u6309\u5347\u5e8f\u6216\u964d\u5e8f\u5bf9\u7cfb\u5217\u8fdb\u884c\u6392\u5e8f\u3002 sorting.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python3 import pandas as pd s1 = pd.Series([2, 1, 4, 5, 3, 8, 7, 6]) s2 = pd.Series([12, 23, 31, 14, 11, 61, 17, 18]) data = {'Col 1': s1, 'Col 2': s2} df = pd.DataFrame(data) print(df.sort_values('Col 1', ascending=True)) print('------------------------------------') print('Sorted') print(df.sort_values('Col 2', ascending=False)) \u8be5\u793a\u4f8b\u6309\u5347\u5e8f\u6216\u964d\u5e8f\u5bf9\u5217\u8fdb\u884c\u6392\u5e8f\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 $ python sorting.py Col 1 Col 2 1 1 23 0 2 12 4 3 11 2 4 31 3 5 14 7 6 18 6 7 17 5 8 61 ------------------------------------ Sorted Col 1 Col 2 5 8 61 2 4 31 1 1 23 7 6 18 6 7 17 3 5 14 0 2 12 4 3 11 \u8fd9\u662f\u8f93\u51fa\u3002 \u5728\u4e0b\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6309\u591a\u5217\u6392\u5e8f\u3002 sorting2.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python3 import pandas as pd s1 = pd.Series([1, 2, 1, 2, 2, 1, 2, 2]) s2 = pd.Series(['A', 'A', 'B', 'A', 'C', 'C', 'C', 'B']) data = {'Col 1': s1, 'Col 2': s2} df = pd.DataFrame(data) print(df.sort_values(['Col 1', 'Col 2'], ascending=[True, False])) \u8be5\u793a\u4f8b\u6309\u5305\u542b\u6574\u6570\u7684\u7b2c\u4e00\u5217\u8fdb\u884c\u6392\u5e8f\u3002 \u7136\u540e\uff0c\u5c06\u8003\u8651\u7b2c\u4e00\u6392\u5e8f\u7684\u7ed3\u679c\u5bf9\u7b2c\u4e8c\u5217\u8fdb\u884c\u6392\u5e8f\u3002 1 2 3 4 5 6 7 8 9 10 $ python sorting2.py Col 1 Col 2 5 1 C 2 1 B 0 1 A 4 2 C 6 2 C 7 2 B 1 2 A 3 2 A \u8fd9\u662f\u8f93\u51fa\u3002","title":"Pandas \u6559\u7a0b"},{"location":"pages/python/pytutorial/python-pandas/#Pandas-\u6559\u7a0b","text":"\u8fd9\u662f Pandas \u7684\u5165\u95e8\u6559\u7a0b \uff0c\u672c\u6559\u7a0b\u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528 Pandas \u5e93\u5728 Python \u4e2d\u8fdb\u884c\u57fa\u672c\u6570\u636e\u5206\u6790\u3002","title":"Pandas \u6559\u7a0b"},{"location":"pages/python/pytutorial/python-pandas/#Pandas","text":"Pandas \u662f BSD \u8bb8\u53ef\u7684\u5f00\u653e\u6e90\u4ee3\u7801\u5e93\uff0c\u4e3a Python \u7f16\u7a0b\u8bed\u8a00\u63d0\u4f9b\u4e86\u9ad8\u6027\u80fd\uff0c\u6613\u4e8e\u4f7f\u7528\u7684\u6570\u636e\u7ed3\u6784\u548c\u6570\u636e\u5206\u6790\u5de5\u5177\u3002 \u5e93\u7684\u540d\u79f0\u6765\u81ea\u201c\u9762\u677f\u6570\u636e\u201d\u4e00\u8bcd\uff0c\u8fd9\u662f\u5bf9\u6570\u636e\u96c6\u7684\u8ba1\u91cf\u7ecf\u6d4e\u5b66\u672f\u8bed\uff0c\u5176\u4e2d\u5305\u62ec\u5bf9\u540c\u4e00\u4e2a\u4eba\u5728\u591a\u4e2a\u65f6\u95f4\u6bb5\u5185\u7684\u89c2\u5bdf\u3002 \u5b83\u63d0\u4f9b\u7528\u4e8e\u64cd\u7eb5\u6570\u503c\u8868\u548c\u65f6\u95f4\u5e8f\u5217\u7684\u6570\u636e\u7ed3\u6784\u548c\u64cd\u4f5c\u3002 \u4e3b\u8981\u7684\u4e24\u79cd\u6570\u636e\u7c7b\u578b\u662f\uff1a Series \u548c DataFrame \u3002 DataFrame \u662f\u5e26\u6709\u6807\u8bb0\u8f74\uff08\u884c\u548c\u5217\uff09\u7684\u4e8c\u7ef4\u5927\u5c0f\u53ef\u53d8\u7684\uff0c\u53ef\u80fd\u662f\u5f02\u6784\u7684\u8868\u683c\u6570\u636e\u7ed3\u6784\u3002 \u5b83\u662f\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u7535\u5b50\u8868\u683c\u7684\u6570\u636e\u7ed3\u6784\u3002 Series \u662f DataFrame \u7684\u5355\u4e2a\u5217\u3002 DataFrame \u53ef\u4ee5\u770b\u4f5c\u662f Series \u5bf9\u8c61\u7684\u5b57\u5178\u3002","title":"Pandas"},{"location":"pages/python/pytutorial/python-pandas/#\u5b89\u88c5-Pandas","text":"\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5b89\u88c5 Pandas\uff1a 1 $ pip3 install pandas \u6211\u4eec\u4f7f\u7528 pip3 \u547d\u4ee4\u5b89\u88c5 pandas \u6a21\u5757\u3002 1 $ pip3 install numpy \u4e00\u4e9b\u793a\u4f8b\u8fd8\u4f7f\u7528 numpy \u3002","title":"\u5b89\u88c5 Pandas"},{"location":"pages/python/pytutorial/python-pandas/#Pandas-\u7b80\u5355\u7684\u4f8b\u5b50","text":"\u4ee5\u4e0b\u662f\u4e00\u4e2a\u7b80\u5355\u7684 Pandas \u793a\u4f8b\u3002 simple.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python3 import pandas as pd data = [['Alex', 10], ['Ronald', 18], ['Jane', 33]] df = pd.DataFrame(data, columns=['Name', 'Age']) print(df) \u5728\u7a0b\u5e8f\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684 DataFrame \u5e76\u5c06\u5176\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 import pandas as pd \u6211\u4eec\u5bfc\u5165 Pandas \u5e93\u3002 1 data = [['Alex', 10], ['Ronald', 18], ['Jane', 33]] \u8fd9\u662f\u8981\u5728\u6846\u67b6\u4e2d\u663e\u793a\u7684\u6570\u636e\u3002 \u6bcf\u4e2a\u5d4c\u5957\u5217\u8868\u5728\u8868\u4e2d\u90fd\u662f\u4e00\u884c\u3002 \u8bf7\u6ce8\u610f\uff0c\u6709\u5f88\u591a\u65b9\u6cd5\u53ef\u4ee5\u521d\u59cb\u5316 Pandas DataFrame \u3002 1 df = pd.DataFrame(data, columns=['Name', 'Age']) \u6839\u636e\u6570\u636e\u521b\u5efa\u4e00\u4e2a DataFrame \u3002 \u6211\u4eec\u7528 columns \u5c5e\u6027\u7ed9\u6846\u67b6\u5217\u540d\u3002 1 2 3 4 5 $ python simple.py Name Age 0 Alex 10 1 Ronald 18 2 Jane 33 \u8fd9\u662f\u8f93\u51fa\u3002 \u7b2c\u4e00\u5217\u662f\u884c\u7d22\u5f15\u3002","title":"Pandas \u7b80\u5355\u7684\u4f8b\u5b50"},{"location":"pages/python/pytutorial/python-pandas/#Pandas-\u6539\u53d8\u7d22\u5f15","text":"\u6211\u4eec\u53ef\u4ee5\u66f4\u65b0\u7d22\u5f15\uff0c\u4f7f\u5176\u4e0d\u4ece 0 \u5f00\u59cb\u3002 change_index.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python3 import pandas as pd data = [['Alex', 10], ['Ronald', 18], ['Jane', 33]] df = pd.DataFrame(data, columns=['Name', 'Age']) df.index = df.index + 1 print(df) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06 1 \u52a0\u5230\u7d22\u5f15\u3002 1 2 3 4 5 $ python change_index.py Name Age 1 Alex 10 2 Ronald 18 3 Jane 33 \u8fd9\u662f\u8f93\u51fa\u3002","title":"Pandas \u6539\u53d8\u7d22\u5f15"},{"location":"pages/python/pytutorial/python-pandas/#Pandas-\u6807\u91cf\u5e8f\u5217","text":"\u4ee5\u4e0b\u793a\u4f8b\u521b\u5efa\u4e00\u7cfb\u5217\u6807\u91cf\u503c\u3002 series_scalar.py 1 2 3 4 5 6 #!/usr/bin/env python3 import pandas as pd s = pd.Series(5, index=[0, 1, 2, 3]) print(s) \u6211\u4eec\u6709\u4e00\u5217\u5305\u542b\u6570\u5b57\u3002 1 2 3 4 5 6 $ python series_scalar.py 0 5 1 5 2 5 3 5 dtype: int64 \u5de6\u5217\u662f\u7d22\u5f15\u3002","title":"Pandas \u6807\u91cf\u5e8f\u5217"},{"location":"pages/python/pytutorial/python-pandas/#Pandas-\u5e8f\u5217-ndarray","text":"\u6211\u4eec\u53ef\u4ee5\u4ece numpy ndarray \u521b\u5efa\u4e00\u4e2a\u7cfb\u5217\u5bf9\u8c61\u3002 series_numpy.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python3 import pandas as pd import numpy as np data = np.array(['a', 'b', 'c', 'd']) s = pd.Series(data) print(s) \u8be5\u793a\u4f8b\u4ece ndarray \u521b\u5efa\u4e00\u5217\u5b57\u6bcd\u3002 1 2 3 4 5 6 $ python series_numpy.py 0 a 1 b 2 c 3 d dtype: object \u8fd9\u662f\u8f93\u51fa\u3002","title":"Pandas \u5e8f\u5217 ndarray"},{"location":"pages/python/pytutorial/python-pandas/#Pandas-\u5e8f\u5217\u5b57\u5178","text":"\u53ef\u4ee5\u4ece Python \u5b57\u5178\u521b\u5efa\u7cfb\u5217\u3002 series_dict.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python3 import pandas as pd import numpy as np data = {'coins' : 22, 'pens' : 3, 'books' : 28} s = pd.Series(data) print(s) \u8be5\u793a\u4f8b\u6839\u636e\u4e00\u7cfb\u5217\u9879\u76ee\u521b\u5efa\u4e00\u4e2a\u7cfb\u5217\u5bf9\u8c61\u3002 1 2 3 4 5 $ python series_dict.py coins 22 pens 3 books 28 dtype: int64 \u7d22\u5f15\u7531\u9879\u76ee\u540d\u79f0\u7ec4\u6210\u3002","title":"Pandas \u5e8f\u5217\u5b57\u5178"},{"location":"pages/python/pytutorial/python-pandas/#Pandas-\u5e8f\u5217\u68c0\u7d22","text":"\u4ee5\u4e0b\u793a\u4f8b\u4ece\u4e00\u7cfb\u5217\u5bf9\u8c61\u4e2d\u68c0\u7d22\u503c\u3002 series_retrieve.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python3 import pandas as pd s = pd.Series([1, 2, 3, 4, 5], index=['a', 'b', 'c', 'd', 'e']) print(s[0]) print('-----------------------') print(s[1:4]) print('-----------------------') print(s[['a','c','d']]) \u8be5\u793a\u4f8b\u4ece\u7cfb\u5217\u5bf9\u8c61\u68c0\u7d22\u503c\u3002 1 print(s[0]) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5f97\u5230\u4e00\u4e2a\u503c\u3002 1 print(s[1:4]) \u6211\u4eec\u901a\u8fc7\u5b83\u4eec\u7684\u7d22\u5f15\u68c0\u7d22\u884c\u3002 1 print(s[['a','c','d']]) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u901a\u8fc7\u7d22\u5f15\u6807\u7b7e\u83b7\u53d6\u503c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 $ python series_retrieve.py 1 ----------------------- b 2 c 3 d 4 dtype: int64 ----------------------- a 1 c 3 d 4 dtype: int64 \u8fd9\u662f\u8f93\u51fa\u3002","title":"Pandas \u5e8f\u5217\u68c0\u7d22"},{"location":"pages/python/pytutorial/python-pandas/#Pandas-\u81ea\u5b9a\u4e49\u7d22\u5f15","text":"\u7d22\u5f15\u5217\u4e0d\u5fc5\u662f\u6570\u5b57\u3002 \u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u81ea\u5df1\u7684\u81ea\u5b9a\u4e49\u7d22\u5f15\u3002 custom_index.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/env python3 import pandas as pd data = {\"country\": [\"Brazil\", \"Russia\", \"India\", \"China\", \"South Africa\"], \"capital\": [\"Brasilia\", \"Moscow\", \"New Dehli\", \"Beijing\", \"Pretoria\"], \"area\": [8.516, 17.10, 3.286, 9.597, 1.221], \"population\": [200.4, 143.5, 1252, 1357, 52.98]} frame = pd.DataFrame(data) print(frame) print('------------------------------') frame.index = [\"BR\", \"RU\", \"IN\", \"CH\", \"SA\"] print(frame) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4ece\u6570\u636e\u5b57\u5178\u521b\u5efa\u6570\u636e\u6846\u67b6\u3002 \u6211\u4eec\u5148\u6253\u5370\u6570\u636e\u6846\uff0c\u7136\u540e\u4f7f\u7528 index \u5c5e\u6027\u66f4\u6539\u7d22\u5f15\u5217\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 $ python custom_index.py country capital area population 0 Brazil Brasilia 8.516 200.40 1 Russia Moscow 17.100 143.50 2 India New Dehli 3.286 1252.00 3 China Beijing 9.597 1357.00 4 South Africa Pretoria 1.221 52.98 ------------------------------ country capital area population BR Brazil Brasilia 8.516 200.40 RU Russia Moscow 17.100 143.50 IN India New Dehli 3.286 1252.00 CH China Beijing 9.597 1357.00 SA South Africa Pretoria 1.221 52.98 \u8fd9\u662f\u8f93\u51fa\u3002","title":"Pandas \u81ea\u5b9a\u4e49\u7d22\u5f15"},{"location":"pages/python/pytutorial/python-pandas/#Pandas-\u7d22\u5f15\u5217\u548c\u503c","text":"Pandas DataFrame \u5177\u6709\u4e09\u4e2a\u57fa\u672c\u90e8\u5206\uff1a\u7d22\u5f15\uff0c\u5217\u548c\u503c\u3002 index_vals_cols.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python3 import pandas as pd data = [['Alex', 10], ['Ronald', 18], ['Jane', 33]] df = pd.DataFrame(data, columns=['Name', 'Age']) print(f'Index: {df.index}') print(f'Columns: {df.columns}') print(f'Values: {df.values}') \u8be5\u793a\u4f8b\u663e\u793a\u6570\u636e\u6846\u7684\u7d22\u5f15\uff0c\u5217\u548c\u503c\u3002 1 2 3 4 5 6 $ python index_vals_cols.py Index: RangeIndex(start=0, stop=3, step=1) Columns: Index(['Name', 'Age'], dtype='object') Values: [['Alex' 10] ['Ronald' 18] ['Jane' 33]] \u8fd9\u662f\u8f93\u51fa\u3002","title":"Pandas \u7d22\u5f15\u3001\u5217\u548c\u503c"},{"location":"pages/python/pytutorial/python-pandas/#Pandas-\u7684\u603b\u548c\u548c\u6700\u5927\u503c","text":"\u4e0b\u9762\u7684\u793a\u4f8b\u8ba1\u7b97\u6570\u636e\u5e27\u5217\u4e2d\u503c\u7684\u603b\u548c\u548c\u6700\u5927\u503c\u3002 \u5b83\u8fd8\u4f7f\u7528 numpy \u5e93\u3002 sum_max.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python3 import pandas as pd import numpy as np df = pd.DataFrame(np.arange(0, 1200, 2), columns=['A']) # df.index = df.index + 1 print(sum(df['A'])) print(max(df['A'])) # print(df) \u8be5\u793a\u4f8b\u8ba1\u7b97\u6700\u5927\u503c\u548c\u503c\u4e4b\u548c\u3002 \u5b83\u4f7f\u7528 numpy's arange() \u51fd\u6570\u751f\u6210\u503c\u6570\u7ec4\u3002 1 print(sum(df['A'])) \u5f53\u8ba1\u7b97\u603b\u548c\u503c\u65f6\uff0c\u6211\u4eec\u901a\u8fc7\u540d\u79f0\u6765\u5f15\u7528\u8be5\u5217\u3002 1 2 3 $ sum_max.py 359400 1198 \u8fd9\u662f\u8f93\u51fa\u3002","title":"Pandas \u7684\u603b\u548c\u548c\u6700\u5927\u503c"},{"location":"pages/python/pytutorial/python-pandas/#Pandas-\u8bfb-CSV","text":"Pandas \u4f7f\u7528 read_csv() \u4ece CSV \u6587\u4ef6\u8bfb\u53d6\u6570\u636e\u3002 military_spending.csv 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Pos, Country, Amount (Bn. $), GDP 1, United States, 610.0, 3.1 2, China, 228.0, 1.9 3, Saudi Arabia, 69.4, 10.0 4, Russia, 66.3, 4.3 5, India, 63.9, 2.5 6, France, 57.8, 2.3 7, United Kingdom, 47.2, 1.8 8, Japan, 45.4, 0.9 9, Germany, 44.3, 1.2 10, South Korea, 39.2, 2.6 11, Brazil, 29.3, 1.4 12, Italy Italy, 29.2, 1.5 13, Australia Australia, 27.5, 2.0 14, Canada Canada, 20.6, 1.3 15, Turkey Turkey, 18.2, 2.2 \u8fd9\u662f\u4e00\u4e2a\u7b80\u5355\u7684 CSV \u6587\u4ef6\uff0c\u5176\u4e2d\u5305\u542b\u6709\u5173\u56fd\u5bb6\u519b\u4e8b\u652f\u51fa\u7684\u6570\u636e\u3002 \u6ce8\u610f: CSV\u6587\u4ef6\u7684\u7b2c\u4e00\u884c\u53ef\u80fd\u6709\u53ef\u9009\u7684\u5217\u540d. read_from_csv.py 1 2 3 4 5 6 7 #!/usr/bin/env python3 import pandas as pd df = pd.read_csv(\"military_spending.csv\") print(df.to_string(index=False)) \u8be5\u793a\u4f8b\u4ece military_spending.csv \u6587\u4ef6\u4e2d\u8bfb\u53d6\u6240\u6709\u6570\u636e\uff0c\u5e76\u4ee5\u8868\u683c\u683c\u5f0f\u5c06\u5176\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 \u5b83\u4f7f\u7528 read_csv() \u65b9\u6cd5\u3002 1 print(df.to_string(index=False)) \u7531\u4e8e\u6211\u4eec\u6709 positions \u5217\uff0c\u56e0\u6b64\u6211\u4eec\u4ece\u8f93\u51fa\u4e2d\u9690\u85cf\u7d22\u5f15\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 $ python read_from_csv.py Pos Country Amount (Bn. $) GDP 1 United States 610.0 3.1 2 China 228.0 1.9 3 Saudi Arabia 69.4 10.0 4 Russia 66.3 4.3 5 India 63.9 2.5 6 France 57.8 2.3 7 United Kingdom 47.2 1.8 8 Japan 45.4 0.9 9 Germany 44.3 1.2 10 South Korea 39.2 2.6 11 Brazil 29.3 1.4 12 Italy Italy 29.2 1.5 13 Australia Australia 27.5 2.0 14 Canada Canada 20.6 1.3 15 Turkey Turkey 18.2 2.2 \u8fd9\u662f\u8f93\u51fa\u3002","title":"Pandas \u8bfb CSV"},{"location":"pages/python/pytutorial/python-pandas/#Pandas-\u5199-CSV","text":"\u7528 to_csv() \u5c06 DataFrame \u5199\u5165 CSV \u6587\u4ef6\u3002 write_csv.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python3 import pandas as pd data = [['Alex', 10], ['Ronald', 18], ['Jane', 33]] df = pd.DataFrame(data, columns=['Name', 'Age']) df.to_csv(\"users.csv\", index=False) \u8be5\u793a\u4f8b\u5c06\u6570\u636e\u5199\u5165 users.csv \u6587\u4ef6\u3002","title":"Pandas \u5199 CSV"},{"location":"pages/python/pytutorial/python-pandas/#Pandas-\u968f\u673a\u884c","text":"\u53ef\u4ee5\u4f7f\u7528 sample() \u9009\u62e9\u6570\u636e\u5e27\u4e2d\u7684\u968f\u673a\u884c\u3002 random_sample.py 1 2 3 4 5 6 7 #!/usr/bin/env python3 import pandas as pd df = pd.read_csv(\"military_spending.csv\") print(df.sample(3)) \u5728\u8be5\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4ece\u6570\u636e\u6846\u4e2d\u6253\u5370\u4e86\u4e09\u4e2a\u968f\u673a\u884c\u3002","title":"Pandas \u968f\u673a\u884c"},{"location":"pages/python/pytutorial/python-pandas/#Pandas-\u6570\u636e\u5b9a\u4f4d","text":"to_dict() \u5c06\u6570\u636e\u6846\u8f6c\u6362\u4e3a Python \u5b57\u5178\u3002 \u5b57\u5178\u53ef\u4ee5\u663e\u793a\u5728\u4e0d\u540c\u7684\u6570\u636e\u8f93\u51fa\u4e2d\u3002 data_orient.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #!/usr/bin/env python3 import pandas as pd data = [['Alex', 10], ['Ronald', 18], ['Jane', 33]] df = pd.DataFrame(data, columns=['Name', 'Age']) print('list') print(df.to_dict(orient='list')) print('************************************') print('series') print(df.to_dict(orient='series')) print('************************************') print('dict') print(df.to_dict(orient='dict')) print('************************************') print('split') print(df.to_dict(orient='split')) print('************************************') print('records') print(df.to_dict(orient='records')) print('************************************') print('index') print(df.to_dict(orient='index')) \u8be5\u793a\u4f8b\u4ee5\u516d\u79cd\u4e0d\u540c\u683c\u5f0f\u5c06\u6570\u636e\u5e27\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002","title":"Pandas \u6570\u636e\u5b9a\u4f4d"},{"location":"pages/python/pytutorial/python-pandas/#Pandas-\u63cf\u8ff0","text":"describe() \u65b9\u6cd5\u751f\u6210\u63cf\u8ff0\u6027\u7edf\u8ba1\u6570\u636e\uff0c\u8be5\u6570\u636e\u7edf\u8ba1\u603b\u7ed3\u4e86 NaN \u503c\u4e4b\u5916\u7684\u6570\u636e\u96c6\u5206\u5e03\u7684\u96c6\u4e2d\u8d8b\u52bf\uff0c\u79bb\u6563\u5ea6\u548c\u5f62\u72b6\u3002 describing.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python3 import pandas as pd s1 = pd.Series([1, 2, 3, 4, 5, 6, 7, 8]) s2 = pd.Series([12, 23, 31, 14, 11, 61, 17, 18]) data = {'Vals 1': s1, 'Vals 2': s2} df = pd.DataFrame(data) print(df.describe()) \u8be5\u793a\u4f8b\u4ece\u6570\u636e\u6846\u4e2d\u6253\u5370\u63cf\u8ff0\u6027\u7edf\u8ba1\u4fe1\u606f\u3002 1 2 3 4 5 6 7 8 9 10 $ python describe.py Vals 1 Vals 2 count 8.00000 8.000000 mean 4.50000 23.375000 std 2.44949 16.535136 min 1.00000 11.000000 25% 2.75000 13.500000 50% 4.50000 17.500000 75% 6.25000 25.000000 max 8.00000 61.000000 \u8fd9\u662f\u8f93\u51fa\u3002","title":"Pandas \u63cf\u8ff0"},{"location":"pages/python/pytutorial/python-pandas/#Pandas-\u8ba1\u6570","text":"\u4e0b\u4e00\u4e2a\u793a\u4f8b\u5bf9\u503c\u8fdb\u884c\u8ba1\u6570\u3002 counting.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python3 import pandas as pd df = pd.read_csv(\"employees.csv\") print(df.count()) print(f'Number of columns: {len(df.columns)}') print(df.shape) count() \u65b9\u6cd5\u8ba1\u7b97\u6bcf\u5217\u7684\u503c\u6570\u3002 \u7528 len(df.columns) \u68c0\u7d22\u5217\u6570\u3002 shape \u8fd4\u56de\u8868\u793a\u6570\u636e\u5e27\u7ef4\u6570\u7684\u5143\u7ec4\u3002 1 2 3 4 5 6 7 8 9 10 11 12 $ python counting.py First Name 933 Gender 855 Start Date 1000 Last Login Time 1000 Salary 1000 Bonus % 1000 Senior Management 933 Team 957 dtype: int64 Number of columns: 8 (1000, 8) \u8bf7\u6ce8\u610f\uff0c\u8fd9\u4e9b\u5217\u5177\u6709\u4e0d\u540c\u6570\u91cf\u7684\u503c\uff0c\u56e0\u4e3a\u7f3a\u5c11\u67d0\u4e9b\u503c\u3002","title":"Pandas \u8ba1\u6570"},{"location":"pages/python/pytutorial/python-pandas/#Pandas-head\u548ctail","text":"\u4f7f\u7528 head() \u548c tail() \u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u663e\u793a\u6570\u636e\u5e27\u7684\u524d n \u884c\u548c\u540e n \u884c\u3002 head_tail.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python3 import pandas as pd df = pd.read_csv(\"military_spending.csv\") print(df.head(4)) print('*******************************************') print(df.tail(4)) \u8be5\u793a\u4f8b\u663e\u793a\u6570\u636e\u6846\u7684\u524d\u56db\u884c\u548c\u540e\u56db\u884c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 $ python head_tail.py Pos Country Amount (Bn. $) GDP 0 1 United States 610.0 3.1 1 2 China 228.0 1.9 2 3 Saudi Arabia 69.4 10.0 3 4 Russia 66.3 4.3 ******************************************* Pos Country Amount (Bn. $) GDP 11 12 Italy Italy 29.2 1.5 12 13 Australia Australia 27.5 2.0 13 14 Canada Canada 20.6 1.3 14 15 Turkey Turkey 18.2 2.2 \u8fd9\u662f\u8f93\u51fa\u3002","title":"Pandas head()\u548ctail()"},{"location":"pages/python/pytutorial/python-pandas/#Pandas-\u6ca1\u6709\u6807\u9898\u548c\u7d22\u5f15","text":"\u5f53\u6211\u4eec\u663e\u793a\u6570\u636e\u6846\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u9690\u85cf\u6807\u9898\u548c\u7d22\u5f15\u3002 no_header_index.py 1 2 3 4 5 6 7 #!/usr/bin/env python3 import pandas as pd df = pd.read_csv(\"military_spending.csv\") print(df.head(4).to_string(header=False, index=False)) \u901a\u8fc7\u5c06 header \u548c index \u5c5e\u6027\u8bbe\u7f6e\u4e3a False \uff0c\u6211\u4eec\u5c06\u8f93\u51fa\u6ca1\u6709\u6807\u9898\u548c\u7d22\u5f15\u7684\u6570\u636e\u5e27\u3002 1 2 3 4 5 $ python no_header.py 1 United States 610.0 3.1 2 China 228.0 1.9 3 Saudi Arabia 69.4 10.0 4 Russia 66.3 4.3 \u8fd9\u662f\u8f93\u51fa\u3002 \uff08\u503c 1 \u5230 4 \u6765\u81ea pos \u5217\u3002\uff09","title":"Pandas \u6ca1\u6709\u6807\u9898\u548c\u7d22\u5f15"},{"location":"pages/python/pytutorial/python-pandas/#Pandas-loc","text":"loc() \u65b9\u6cd5\u5141\u8bb8\u6309\u6807\u7b7e\u6216\u5e03\u5c14\u6570\u7ec4\u8bbf\u95ee\u4e00\u7ec4\u884c\u548c\u5217\u3002 select_loc.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python3 import pandas as pd data = {'Items': ['coins', 'pens', 'books'], 'Quantity': [22, 28, 3]} df = pd.DataFrame(data, index=['A', 'B', 'C']) print(df.loc['A']) print('-------------------------------') print(df.loc[['A', 'B'], ['Items']]) \u8be5\u793a\u4f8b\u4f7f\u7528 loc() \u51fd\u6570\u3002 1 print(df.loc['A']) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5f97\u5230\u7b2c\u4e00\u884c\u3002 \u6211\u4eec\u901a\u8fc7\u5176\u7d22\u5f15\u6807\u7b7e\u8bbf\u95ee\u8be5\u884c\u3002 1 print(df.loc[['A', 'B'], ['Items']]) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u83b7\u5f97\u4e86 Items \u5217\u7684\u524d\u4e24\u884c\u3002 1 2 3 4 5 6 7 8 $ python select_loc.py Items coins Quantity 22 Name: A, dtype: object ------------------------------- Items A coins B pens \u8fd9\u662f\u8f93\u51fa\u3002 \u7b2c\u4e8c\u4e2a\u793a\u4f8b\u663e\u793a\u5982\u4f55\u901a\u8fc7\u5e03\u5c14\u6570\u7ec4\u9009\u62e9\u3002 select_loc2.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python3 import pandas as pd data = {'Items': ['coins', 'pens', 'books'], 'Quantity': [22, 28, 3]} df = pd.DataFrame(data, index=['A', 'B', 'C']) print(df.loc[[True, False, True], ['Items', 'Quantity']]) \u8be5\u793a\u4f8b\u901a\u8fc7\u5e03\u5c14\u6570\u7ec4\u9009\u62e9\u884c\u3002 1 2 3 4 $ select_loc2.py Items Quantity A coins 22 C books 3 \u8fd9\u662f\u8f93\u51fa\u3002 \u5728\u7b2c\u4e09\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5728\u9009\u62e9\u65f6\u5e94\u7528\u6761\u4ef6\u3002 select_loc3.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python3 import pandas as pd df = pd.read_csv(\"employees.csv\") data = df.loc[(df['Salary'] > 10000) & (df['Salary'] < 50000)] print(data.head(5)) \u8be5\u793a\u4f8b\u4ece employees.csv \u6587\u4ef6\u4e2d\u6253\u5370\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u524d\u4e94\u884c\uff1a\u85aa\u6c34\u5728 10000 \u81f3 50000 \u4e4b\u95f4\u3002","title":"Pandas loc()"},{"location":"pages/python/pytutorial/python-pandas/#Pandas-iloc","text":"iloc \u51fd\u6570\u5141\u8bb8\u57fa\u4e8e\u6574\u6570\u4f4d\u7f6e\u7684\u7d22\u5f15\uff0c\u4ee5\u6309\u4f4d\u7f6e\u8fdb\u884c\u9009\u62e9\u3002 select_iloc.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #!/usr/bin/env python3 import pandas as pd df = pd.read_csv(\"employees.csv\") # integer-location based indexing for selection by position. # Multiple row and column selections using iloc and DataFrame print(df.iloc[0:6]) # first six rows of dataframe print('--------------------------------------') print(df.iloc[:, 0:2]) # first two columns of data frame with all rows print('--------------------------------------') # 1st, 4th, 7th, 25th row + 1st 6th 8th column print(df.iloc[[0, 3, 6, 24], [0, 5, 7]]) print('--------------------------------------') # first 5 rows and 5th, 6th, 7th columns of data frame print(df.iloc[:5, 5:8]) print('--------------------------------------') \u8be5\u793a\u4f8b\u663e\u793a\u4e86\u5982\u4f55\u4f7f\u7528 iloc() \u9009\u62e9\u884c\u548c\u5217\u7684\u5404\u79cd\u7ec4\u5408\u3002","title":"Pandas iloc"},{"location":"pages/python/pytutorial/python-pandas/#Pandas-\u6392\u5e8f","text":"sort_values() \u6309\u5347\u5e8f\u6216\u964d\u5e8f\u5bf9\u7cfb\u5217\u8fdb\u884c\u6392\u5e8f\u3002 sorting.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python3 import pandas as pd s1 = pd.Series([2, 1, 4, 5, 3, 8, 7, 6]) s2 = pd.Series([12, 23, 31, 14, 11, 61, 17, 18]) data = {'Col 1': s1, 'Col 2': s2} df = pd.DataFrame(data) print(df.sort_values('Col 1', ascending=True)) print('------------------------------------') print('Sorted') print(df.sort_values('Col 2', ascending=False)) \u8be5\u793a\u4f8b\u6309\u5347\u5e8f\u6216\u964d\u5e8f\u5bf9\u5217\u8fdb\u884c\u6392\u5e8f\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 $ python sorting.py Col 1 Col 2 1 1 23 0 2 12 4 3 11 2 4 31 3 5 14 7 6 18 6 7 17 5 8 61 ------------------------------------ Sorted Col 1 Col 2 5 8 61 2 4 31 1 1 23 7 6 18 6 7 17 3 5 14 0 2 12 4 3 11 \u8fd9\u662f\u8f93\u51fa\u3002 \u5728\u4e0b\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6309\u591a\u5217\u6392\u5e8f\u3002 sorting2.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python3 import pandas as pd s1 = pd.Series([1, 2, 1, 2, 2, 1, 2, 2]) s2 = pd.Series(['A', 'A', 'B', 'A', 'C', 'C', 'C', 'B']) data = {'Col 1': s1, 'Col 2': s2} df = pd.DataFrame(data) print(df.sort_values(['Col 1', 'Col 2'], ascending=[True, False])) \u8be5\u793a\u4f8b\u6309\u5305\u542b\u6574\u6570\u7684\u7b2c\u4e00\u5217\u8fdb\u884c\u6392\u5e8f\u3002 \u7136\u540e\uff0c\u5c06\u8003\u8651\u7b2c\u4e00\u6392\u5e8f\u7684\u7ed3\u679c\u5bf9\u7b2c\u4e8c\u5217\u8fdb\u884c\u6392\u5e8f\u3002 1 2 3 4 5 6 7 8 9 10 $ python sorting2.py Col 1 Col 2 5 1 C 2 1 B 0 1 A 4 2 C 6 2 C 7 2 B 1 2 A 3 2 A \u8fd9\u662f\u8f93\u51fa\u3002","title":"Pandas \u6392\u5e8f"},{"location":"pages/python/pytutorial/python-peewee/","text":"Python Peewee \u6559\u7a0b \u00b6 Python Peewee \u6559\u7a0b \u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528 Python Peewee ORM\u3002 \u5bf9\u8c61\u5173\u7cfb\u6620\u5c04\uff08ORM\uff09\u662f\u4e00\u79cd\u4ece\u9762\u5411\u5bf9\u8c61\u7684\u8bed\u8a00\u8bbf\u95ee\u5173\u7cfb\u6570\u636e\u5e93\u7684\u6280\u672f\uff0c\u5b83\u662f Python \u6570\u636e\u5e93 API \u7684\u62bd\u8c61\u3002 Python Peewee \u00b6 Peewee \u662f\u4e00\u4e2a\u7b80\u5355\u800c\u5c0f\u578b\u7684 Python ORM \u5de5\u5177\u3002 \u5b83\u652f\u6301 SQLite\uff0cMySQL \u548c PostgreSQL\u3002 1 $ pip install peewee \u6211\u4eec\u5b89\u88c5 peewee \u6a21\u5757\u3002 Peewee \u6620\u5c04 \u00b6 Model \u6620\u5c04\u5230\u6570\u636e\u5e93\u8868\uff0c Field \u6620\u5c04\u5230\u8868\u5217\uff0c instance \u6620\u5c04\u5230\u8868\u884c\u3002 Peewee \u5bf9\u4e8e MySQL \u4f7f\u7528 MySQLDatabase \uff0c\u5bf9\u4e8e PostgreSQL \u4f7f\u7528 PostgresqlDatabase \uff0c\u5bf9\u4e8e SQLite \u4f7f\u7528 SqliteDatabase \u3002 \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 SQLite \u6570\u636e\u5e93\u3002 Peewee \u5b57\u6bb5\u7c7b\u578b \u00b6 Peewee \u6a21\u578b\u4e2d\u7684\u5b57\u6bb5\u7c7b\u578b\u5b9a\u4e49\u6a21\u578b\u7684\u5b58\u50a8\u7c7b\u578b\u3002 \u5b83\u4eec\u88ab\u8f6c\u6362\u4e3a\u76f8\u5e94\u7684\u6570\u636e\u5e93\u5217\u7c7b\u578b\u3002 \u5b57\u6bb5\u7c7b\u578b SQLite PostgreSQL MySQL `CharField` `varchar` `varchar` `varchar` `TextField` `text` `text` `longtext` `DateTimeField` `datetime` `timestamp` `longtext` `IntegerField` `integer` `integer` `integer` `BooleanField` `smallint` `bool` `bool` `FloatField` `real` `real` `real` `DoubleField` `real` `double` `double` `BigIntegerField` `integer` `bigint` `bigint` `DecimalField` `decimal` `numeric` `numeric` `PrimaryKeyField` `integer` `serial` `integer` `ForeignKeyField` `integer` `integer` `integer` `DateField` `date` `date` `date` `TimeField` `time` `time` `time` \u4e0b\u8868\u5217\u51fa\u4e86 Peewee \u5b57\u6bb5\u7c7b\u578b\u4ee5\u53ca\u76f8\u5e94\u7684 SQLite\uff0cPostgreSQL \u548c MySQL \u5217\u7c7b\u578b\u3002 Peewee \u6a21\u578b\u5b9a\u4e49 \u00b6 \u5728\u7b2c\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u6570\u636e\u5e93\u8868\u3002 model_definition.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #!/usr/bin/env python3 import peewee import datetime db = peewee.SqliteDatabase('test.db') class Note(peewee.Model): text = peewee.CharField() created = peewee.DateField(default=datetime.date.today) class Meta: database = db db_table = 'notes' Note.create_table() note1 = Note.create(text='Went to the cinema') note1.save() note2 = Note.create(text='Exercised in the morning', created=datetime.date(2018, 10, 20)) note2.save() note3 = Note.create(text='Worked in the garden', created=datetime.date(2018, 10, 22)) note3.save() note4 = Note.create(text='Listened to music') note4.save() \u8be5\u793a\u4f8b\u5728 SQLite \u4e2d\u521b\u5efa notes \u6570\u636e\u5e93\u8868\u3002 1 db = peewee.SqliteDatabase('test.db') \u6211\u4eec\u542f\u52a8 test.db SQLite \u6570\u636e\u5e93\u3002 \u8fd9\u5c06\u5728\u6587\u4ef6\u7cfb\u7edf\u4e0a\u521b\u5efa\u4e00\u4e2a test.db \u6587\u4ef6\u3002 1 2 class Note(peewee.Model): ... \u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u540d\u4e3a Note \u7684\u6570\u636e\u5e93\u6a21\u578b\u3002 Peewee \u6a21\u578b\u7ee7\u627f\u81ea peewee.Model \u3002 1 2 text = peewee.CharField() created = peewee.DateField(default=datetime.date.today) \u6211\u4eec\u6307\u5b9a\u6a21\u578b\u5b57\u6bb5\u3002 \u6211\u4eec\u6709\u4e00\u4e2a CharField \u548c\u4e00\u4e2a DateField \u3002 CharField \u662f\u7528\u4e8e\u5b58\u50a8\u5b57\u7b26\u4e32\u7684\u5b57\u6bb5\u7c7b\u3002 DateField \u662f\u7528\u4e8e\u5b58\u50a8\u65e5\u671f\u7684\u5b57\u6bb5\u7c7b\u3002 \u5982\u679c\u672a\u6307\u5b9a\uff0c\u5219\u91c7\u7528\u9ed8\u8ba4\u503c\u3002 1 2 3 class Meta: database = db db_table = 'notes' \u5728 Meta \u7c7b\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u5bf9\u6570\u636e\u5e93\u7684\u5f15\u7528\u548c\u6570\u636e\u5e93\u8868\u540d\u79f0\u3002 1 Note.create_table() \u8be5\u8868\u662f\u4f7f\u7528 create_table() \u4ece\u6a21\u578b\u521b\u5efa\u7684\u3002 1 2 note1 = Note.create(text='Went to the cinema') note1.save() \u6211\u4eec\u521b\u5efa\u5e76\u4fdd\u5b58\u4e00\u4e2a\u65b0\u5b9e\u4f8b\u3002 1 2 3 4 5 sqlite> select * from notes; 1|Went to the cinema|2018-11-01 2|Exercised in the morning|2018-10-20 3|Worked in the garden|2018-10-22 4|Listened to music|2018-11-01 \u6211\u4eec\u9a8c\u8bc1\u6570\u636e\u3002 Peewee \u5220\u9664\u8868 \u00b6 \u4f7f\u7528 drop_table() \u6a21\u578b\u65b9\u6cd5\u5220\u9664\u8be5\u8868\u3002 drop_table.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env python3 import peewee import datetime db = peewee.SqliteDatabase('test.db') class Note(peewee.Model): text = peewee.CharField() created = peewee.DateField(default=datetime.date.today) class Meta: database = db db_table = 'notes' Note.drop_table() \u8be5\u793a\u4f8b\u5220\u9664 notes \u8868\u3002 Peewee insert_many \u00b6 insert_many() \u65b9\u6cd5\u5141\u8bb8\u8fdb\u884c\u6279\u91cf\u521b\u5efa\u3002 insert_many.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #!/usr/bin/env python3 import peewee import datetime db = peewee.SqliteDatabase('test.db') class Note(peewee.Model): text = peewee.CharField() created = peewee.DateField(default=datetime.date.today) class Meta: database = db db_table = 'notes' Note.create_table() data = [ { 'text': 'Tai chi in the morning', 'created': datetime.date(2018, 10, 20) }, { 'text': 'Visited friend', 'created': datetime.date(2018, 10, 12) }, { 'text': 'Went to cinema', 'created': datetime.date(2018, 10, 5) }, { 'text': 'Listened to music', 'created': datetime.date(2018, 10, 28) }, { 'text': 'Watched TV all day', 'created': datetime.date(2018, 10, 14) }, { 'text': 'Worked in the garden', 'created': datetime.date(2018, 10, 22) }, { 'text': 'Walked for a hour', 'created': datetime.date(2018, 10, 28) } ] with db.atomic(): query = Note.insert_many(data) query.execute() \u8be5\u4ee3\u7801\u793a\u4f8b\u901a\u8fc7\u4e00\u6b21\u6279\u91cf\u521b\u5efa\u64cd\u4f5c\u6765\u91cd\u65b0\u521b\u5efa notes \u8868\u3002 1 2 3 4 5 6 7 8 9 data = [ { 'text': 'Tai chi in the morning', 'created': datetime.date(2018, 10, 20) }, { 'text': 'Visited friend', 'created': datetime.date(2018, 10, 12) }, { 'text': 'Went to cinema', 'created': datetime.date(2018, 10, 5) }, { 'text': 'Listened to music', 'created': datetime.date(2018, 10, 28) }, { 'text': 'Watched TV all day', 'created': datetime.date(2018, 10, 14) }, { 'text': 'Worked in the garden', 'created': datetime.date(2018, 10, 22) }, { 'text': 'Walked for a hour', 'created': datetime.date(2018, 10, 28) } ] \u6211\u4eec\u5728\u8bcd\u5178\u5217\u8868\u4e2d\u5b9a\u4e49\u6570\u636e\u3002 1 2 3 4 with db.atomic(): query = Note.insert_many(data) query.execute() \u6211\u4eec\u6267\u884c\u6279\u91cf\u64cd\u4f5c\u3002 atomic() \u65b9\u6cd5\u5c06\u6279\u91cf\u64cd\u4f5c\u7f6e\u4e8e\u4e8b\u52a1\u4e2d\u3002 Peewee \u9009\u62e9\u6240\u6709\u5b9e\u4f8b \u00b6 select() \u65b9\u6cd5\u7528\u4e8e\u68c0\u7d22\u5b9a\u4e49\u7684\u6a21\u578b\u7684\u5b9e\u4f8b\u3002 fetch_all.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #!/usr/bin/env python3 import peewee import datetime db = peewee.SqliteDatabase('test.db') class Note(peewee.Model): text = peewee.CharField() created = peewee.DateField(default=datetime.date.today) class Meta: database = db db_table = 'notes' notes = Note.select() for note in notes: print('{} on {}'.format(note.text, note.created)) \u8be5\u793a\u4f8b\u83b7\u53d6\u5e76\u663e\u793a\u6240\u6709 Note \u5b9e\u4f8b\u3002 1 notes = Note.select() select() \u65b9\u6cd5\u521b\u5efa\u4e00\u4e2a SELECT \u67e5\u8be2\u3002 \u5982\u679c\u672a\u660e\u786e\u63d0\u4f9b\u4efb\u4f55\u5b57\u6bb5\uff0c\u5219\u67e5\u8be2\u5c06\u9ed8\u8ba4\u9009\u62e9\u6a21\u578b\u4e0a\u5b9a\u4e49\u7684\u6240\u6709\u5b57\u6bb5\u3002 1 2 3 4 5 6 7 8 $ ./fetch_all.py Tai chi in the morning on 2018-10-20 Visited friend on 2018-10-12 Went to cinema on 2018-10-05 Listened to music on 2018-10-28 Watched TV all day on 2018-10-14 Worked in the garden on 2018-10-22 Walked for a hour on 2018-10-28 \u8fd9\u662f\u8f93\u51fa\u3002 Peewee where \u8fc7\u6ee4\u5668 \u00b6 where() \u65b9\u6cd5\u53ef\u4ee5\u6839\u636e\u7ed9\u5b9a\u6761\u4ef6\u8fc7\u6ee4\u6570\u636e\u3002 where_clause.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #!/usr/bin/env python3 import peewee import datetime db = peewee.SqliteDatabase('test.db') class Note(peewee.Model): text = peewee.CharField() created = peewee.DateField(default=datetime.date.today) class Meta: database = db db_table = 'notes' notes = Note.select().where(Note.id > 3) for note in notes: print('{} {} on {}'.format(note.id, note.text, note.created)) \u8be5\u793a\u4f8b\u68c0\u7d22 ID \u5927\u4e8e\u4e09\u7684\u6240\u6709\u884c\u3002 1 notes = Note.select().where(Note.id > 3) where() \u65b9\u6cd5\u5bf9\u67e5\u8be2\u5e94\u7528\u8fc7\u6ee4\u6761\u4ef6\u3002 1 2 3 4 5 $ ./where_clause.py 4 Listened to music on 2018-10-28 5 Watched TV all day on 2018-10-14 6 Worked in the garden on 2018-10-22 7 Walked for a hour on 2018-10-28 \u8fd9\u662f\u8f93\u51fa\u3002 Peewee \u591a\u4e2a where \u8868\u8fbe\u5f0f \u00b6 \u6211\u4eec\u53ef\u4ee5\u7ec4\u5408\u591a\u4e2a where \u8868\u8fbe\u5f0f\u3002 multiple_where_expr.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #!/usr/bin/env python3 import peewee import datetime db = peewee.SqliteDatabase('test.db') class Note(peewee.Model): text = peewee.CharField() created = peewee.DateField(default=datetime.date.today) class Meta: database = db db_table = 'notes' notes = Note.select().where((Note.id > 2) & (Note.id < 6)) for note in notes: print('{} {} on {}'.format(note.id, note.text, note.created)) \u8be5\u793a\u4f8b\u68c0\u7d22 id \u5927\u4e8e 2 \u4e14\u5c0f\u4e8e 6 \u7684\u6240\u6709\u884c\u3002 1 notes = Note.select().where((Note.id > 2) & (Note.id < 6)) \u6211\u4eec\u5c06\u4e24\u4e2a where \u8868\u8fbe\u5f0f\u4e0e&\u8fd0\u7b97\u7b26\u7ed3\u5408\u4f7f\u7528\u3002 1 2 3 4 $ ./multiple_where_expr.py 3 Went to cinema on 2018-10-05 4 Listened to music on 2018-10-28 5 Watched TV all day on 2018-10-14 \u8fd9\u662f\u8f93\u51fa\u3002 Peewee \u68c0\u7d22\u5355\u4e2a\u5b9e\u4f8b \u00b6 \u9009\u62e9\u5355\u4e2a\u5b9e\u4f8b\u6709\u4e24\u79cd\u65b9\u6cd5\uff1a \u5b83\u4eec\u6bcf\u4e2a\u90fd\u4f7f\u7528 get() \u65b9\u6cd5\u3002 single_instance.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #!/usr/bin/env python3 import peewee import datetime db = peewee.SqliteDatabase('test.db') class Note(peewee.Model): text = peewee.CharField() created = peewee.DateField(default=datetime.date.today) class Meta: database = db db_table = 'notes' note1 = Note.select().where(Note.text == 'Went to cinema').get() print(note1.id) print(note1.text) print(note1.created) note2 = Note.get(Note.text == 'Listened to music') print(note2.id) print(note2.text) print(note2.created) \u8be5\u793a\u4f8b\u663e\u793a\u4e86\u5982\u4f55\u4ee5\u4e24\u79cd\u65b9\u5f0f\u68c0\u7d22\u5355\u4e2a\u5b9e\u4f8b\u3002 1 note1 = Note.select().where(Note.text == 'Went to cinema').get() \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Note.select().where().get() \u65b9\u6cd5\u94fe\u3002 1 note2 = Note.get(Note.text == 'Listened to music') \u8fd8\u6709\u4e00\u4e2a Note.get() \u5feb\u6377\u65b9\u5f0f\uff0c\u5176\u529f\u80fd\u76f8\u540c\u3002 1 2 3 4 5 6 7 $ ./single_instance.py 3 Went to cinema 2018-10-05 4 Listened to music 2018-10-28 \u8fd9\u662f\u8f93\u51fa\u3002 Peewee \u9009\u62e9\u7279\u5b9a\u7684\u5217 \u00b6 \u5728 select() \u65b9\u6cd5\u5185\u90e8\uff0c\u6211\u4eec\u53ef\u4ee5\u6307\u5b9a\u8981\u5305\u542b\u5728\u67e5\u8be2\u4e2d\u7684\u5217\u7684\u540d\u79f0\u3002 columns.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #!/usr/bin/env python3 import peewee import datetime db = peewee.SqliteDatabase('test.db') class Note(peewee.Model): text = peewee.CharField() created = peewee.DateField(default=datetime.date.today) class Meta: database = db db_table = 'notes' notes = Note.select(Note.text, Note.created).limit(2) output = [e for e in notes.tuples()] print(output) \u8be5\u793a\u4f8b\u5305\u62ec\u4e24\u5217\uff1atext \u548c created\u3002 \u8be5 ID \u88ab\u8df3\u8fc7\u3002 \u6211\u4eec\u5c06\u67e5\u8be2\u9650\u5236\u4e3a\u4e24\u4e2a\u5b9e\u4f8b\u3002 1 2 3 $ ./columns.py [('Tai chi in the morning', datetime.date(2018, 10, 20)), ('Visited friend', datetime.date(2018, 10, 12))] \u8fd9\u662f\u8f93\u51fa\u3002 Peewee \u8ba1\u6570\u5b9e\u4f8b \u00b6 \u8981\u8ba1\u7b97\u8868\u4e2d\u7684\u6a21\u578b\u5b9e\u4f8b\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 count() \u65b9\u6cd5\u3002 count_instances.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #!/usr/bin/env python3 import peewee import datetime db = peewee.SqliteDatabase('test.db') class Note(peewee.Model): text = peewee.CharField() created = peewee.DateField(default=datetime.date.today) class Meta: database = db db_table = 'notes' n = Note.select().count() print(n) n2 = Note.select().where(Note.created >= datetime.date(2018, 10, 20)).count() print(n2) \u8be5\u793a\u4f8b\u8ba1\u7b97\u6240\u6709\u5b9e\u4f8b\u7684\u6570\u91cf\u4ee5\u53ca\u65e5\u671f\u7b49\u4e8e\u6216\u665a\u4e8e 2018/10/20 \u7684\u5b9e\u4f8b\u7684\u6570\u91cf\u3002 1 2 3 $ ./count_instances.py 7 4 \u8fd9\u662f\u8f93\u51fa\u3002 Peewee \u663e\u793a SQL \u8bed\u53e5 \u00b6 \u53ef\u4ee5\u4f7f\u7528 sql() \u65b9\u6cd5\u663e\u793a\u751f\u6210\u7684 SQL \u8bed\u53e5\u3002 show_sql.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/usr/bin/env python3 import peewee import datetime db = peewee.SqliteDatabase('test.db') class Note(peewee.Model): text = peewee.CharField() created = peewee.DateField(default=datetime.date.today) class Meta: database = db db_table = 'notes' note3 = Note.select().where(Note.id == 3) print(note3.sql()) \u8be5\u793a\u4f8b\u663e\u793a\u5c06 ORM \u67e5\u8be2\u8f6c\u6362\u4e3a\u7684 SQL\u3002 1 2 3 $ ./show_sql.py ('SELECT \"t1\".\"id\", \"t1\".\"text\", \"t1\".\"created\" FROM \"notes\" AS \"t1\" WHERE (\"t1\".\"id\" = ?)', [3]) \u8fd9\u662f\u8f93\u51fa\u3002 Peewee offset \u548c limit \u00b6 \u901a\u8fc7 offset \u548c limit \u5c5e\u6027\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u5b9e\u4f8b\u7684\u521d\u59cb\u8df3\u8fc7\u548c\u8981\u5305\u542b\u5728 select() \u4e2d\u7684\u5b9e\u4f8b\u6570\u3002 offset_limit.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #!/usr/bin/env python3 import peewee import datetime db = peewee.SqliteDatabase('test.db') class Note(peewee.Model): text = peewee.CharField() created = peewee.DateField(default=datetime.date.today) class Meta: database = db db_table = 'notes' notes = Note.select().offset(2).limit(3) for note in notes: print(note.id, note.text, note.created) \u8be5\u793a\u4f8b\u4ece\u7b2c\u4e8c\u4e2a\u5b9e\u4f8b\u5f00\u59cb\u8fd4\u56de\u4e09\u4e2a\u5b9e\u4f8b\u3002 1 2 3 4 $ ./offset_limit.py 3 Went to cinema 2018-10-05 4 Listened to music 2018-10-28 5 Watched TV all day 2018-10-14 \u8fd9\u662f\u8f93\u51fa\u3002 Peewee \u6392\u5e8f \u00b6 \u53ef\u4ee5\u4f7f\u7528 order_by() \u5bf9\u68c0\u7d22\u5230\u7684\u5b9e\u4f8b\u8fdb\u884c\u6392\u5e8f\u3002 order_by.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #!/usr/bin/env python3 import peewee import datetime db = peewee.SqliteDatabase('test.db') class Note(peewee.Model): text = peewee.CharField() created = peewee.DateField(default=datetime.date.today) class Meta: database = db db_table = 'notes' print('Ascending order') print('*****************************') notes = Note.select(Note.text, Note.created).order_by(Note.created) for note in notes: print(note.text, note.created) print() print('Descending order') print('*****************************') notes = Note.select(Note.text, Note.created).order_by(Note.created.desc()) for note in notes: print(note.text, note.created) \u8be5\u4ee3\u7801\u793a\u4f8b\u6309\u521b\u5efa\u65e5\u671f\u5bf9\u5b9e\u4f8b\u8fdb\u884c\u6392\u5e8f\u3002 1 notes = Note.select(Note.text, Note.created).order_by(Note.created) \u8be5\u884c\u8fd4\u56de\u6309\u521b\u5efa\u65e5\u671f\u5347\u5e8f\u6392\u5217\u7684\u6ce8\u91ca\u5b9e\u4f8b\u3002 1 notes = Note.select(Note.text, Note.created).order_by(Note.created.desc()) \u8981\u6309\u5347\u5e8f\u68c0\u7d22\u7b14\u8bb0\uff0c\u6211\u4eec\u5728\u5b57\u6bb5\u4e0a\u9644\u52a0 desc() \u65b9\u6cd5\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 Ascending order ***************************** Went to cinema 2018-10-05 Visited friend 2018-10-12 Watched TV all day 2018-10-14 Tai chi in the morning 2018-10-20 Worked in the garden 2018-10-22 Listened to music 2018-10-28 Walked for a hour 2018-10-28 Descending order ***************************** Listened to music 2018-10-28 Walked for a hour 2018-10-28 Worked in the garden 2018-10-22 Tai chi in the morning 2018-10-20 Watched TV all day 2018-10-14 Visited friend 2018-10-12 Went to cinema 2018-10-05 \u8fd9\u662f\u97f3\u7b26\u5b9e\u4f8b\u7684\u6709\u5e8f\u5217\u8868\u3002 Peewee \u5220\u9664\u5b9e\u4f8b \u00b6 delete_by_id() \u65b9\u6cd5\u5220\u9664\u7531\u5176 ID \u6807\u8bc6\u7684\u5b9e\u4f8b\u3002 \u5b83\u8fd4\u56de\u5df2\u5220\u9664\u5b9e\u4f8b\u7684\u6570\u91cf\u3002 delete_by_id.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/usr/bin/env python3 import peewee import datetime db = peewee.SqliteDatabase('test.db') class Note(peewee.Model): text = peewee.CharField() created = peewee.DateField(default=datetime.date.today) class Meta: database = db db_table = 'notes' n2 = Note.delete_by_id(1) print(n2) \u8be5\u793a\u4f8b\u5220\u9664\u4e00\u4e2a ID \u4e3a 1 \u7684 Note \u5b9e\u4f8b\u3002 Peewee \u5220\u9664\u591a\u4e2a\u5b9e\u4f8b \u00b6 \u8981\u5220\u9664\u66f4\u591a\u5b9e\u4f8b\uff0c\u6211\u4eec\u8c03\u7528 delete() \u65b9\u6cd5\u3002 \u5b83\u8fd4\u56de\u6210\u529f\u5220\u9664\u7684\u5b9e\u4f8b\u6570\u3002 delete_instances.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #!/usr/bin/env python3 import peewee import datetime db = peewee.SqliteDatabase('test.db') class Note(peewee.Model): text = peewee.CharField() created = peewee.DateField(default=datetime.date.today) class Meta: database = db db_table = 'notes' query = Note.delete().where(Note.id > 3) n = query.execute() print('{} instances deleted'.format(n)) \u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5220\u9664\u4e86 ID \u5927\u4e8e 3 \u7684\u6240\u6709\u5b9e\u4f8b\u3002 1 2 $ ./delete_instances.py 4 instances deleted \u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5220\u9664\u4e86\u56db\u4e2a Note \u5b9e\u4f8b\u3002 Peewee \u66f4\u65b0\u5b9e\u4f8b \u00b6 update() \u65b9\u6cd5\u66f4\u65b0\u4e00\u4e2a\u5b9e\u4f8b\u3002 \u5b83\u8fd4\u56de\u6210\u529f\u66f4\u65b0\u7684\u5b9e\u4f8b\u6570\u3002 update_instance.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #!/usr/bin/env python3 import peewee import datetime db = peewee.SqliteDatabase('test.db') class Note(peewee.Model): text = peewee.CharField() created = peewee.DateField(default=datetime.date.today) class Meta: database = db db_table = 'notes' query = Note.update(created=datetime.date(2018, 10, 27)).where(Note.id == 1) n = query.execute() print('# of rows updated: {}'.format(n)) \u8be5\u793a\u4f8b\u4f7f\u7528 ID 1 \u4fee\u6539\u6ce8\u91ca\u7684\u521b\u5efa\u65e5\u671f\u3002 Peewee \u4e00\u5bf9\u591a\u5173\u7cfb \u00b6 \u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u6a21\u578b\u6620\u5c04\u5230\u73b0\u6709\u8868\u3002 \u4f7f\u7528 ForeignKeyField \u521b\u5efa\u6a21\u578b\u4e4b\u95f4\u7684\u5173\u7cfb\u3002 customers_reservations.sql 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 BEGIN TRANSACTION; DROP TABLE IF EXISTS reservations; DROP TABLE IF EXISTS customers; CREATE TABLE IF NOT EXISTS customers(id INTEGER PRIMARY KEY, name TEXT); INSERT INTO customers(Name) VALUES('Paul Novak'); INSERT INTO customers(Name) VALUES('Terry Neils'); INSERT INTO customers(Name) VALUES('Jack Fonda'); INSERT INTO customers(Name) VALUES('Tom Willis'); CREATE TABLE IF NOT EXISTS reservations(id INTEGER PRIMARY KEY, customer_id INTEGER, created DATE, FOREIGN KEY(customer_id) REFERENCES customers(id)); INSERT INTO reservations(customer_id, created) VALUES(1, '2018-22-11'); INSERT INTO reservations(customer_id, created) VALUES(2, '2018-28-11'); INSERT INTO reservations(customer_id, created) VALUES(2, '2018-29-11'); INSERT INTO reservations(customer_id, created) VALUES(1, '2018-29-11'); INSERT INTO reservations(customer_id, created) VALUES(3, '2018-02-12'); COMMIT; \u8be5 SQL \u521b\u5efa\u4e24\u4e2a\u8868\uff1a customers \u548c reservations \u3002 \u4e24\u4e2a\u8868\u4e4b\u95f4\u5b58\u5728\u4e00\u5bf9\u591a\u7684\u5173\u7cfb\uff1a\u4e00\u4e2a\u5ba2\u6237\u53ef\u4ee5\u8fdb\u884c\u5f88\u591a\u9884\u8ba2\u3002 1 sqlite> .read customers_reservations.sql \u6211\u4eec\u5c06 SQL \u6587\u4ef6\u8bfb\u5165\u6570\u636e\u5e93\u3002 one2many.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #!/usr/bin/env python3 import peewee import datetime db = peewee.SqliteDatabase('test.db') class Customer(peewee.Model): name = peewee.TextField() class Meta: database = db db_table = 'customers' class Reservation(peewee.Model): customer = peewee.ForeignKeyField(Customer, backref='reservations') created = peewee.DateField(default=datetime.date.today) class Meta: database = db db_table = 'reservations' customer = Customer.select().where(Customer.name == 'Paul Novak').get() for reservation in customer.reservations: print(reservation.id) print(reservation.created) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e24\u4e2a\u6620\u5c04\u5230\u8868\u7684\u6a21\u578b\u3002 \u7136\u540e\uff0c\u6211\u4eec\u9009\u62e9\u4e00\u4e2a\u5ba2\u6237\u5e76\u663e\u793a\u5176\u9884\u8ba2\u3002 1 customer = peewee.ForeignKeyField(Customer, backref='reservations') Customer \u548c Reservation \u6a21\u578b\u4e4b\u95f4\u7684\u5173\u7cfb\u662f\u901a\u8fc7 ForeignKeyField \u521b\u5efa\u7684\u3002 backref \u5c5e\u6027\u8bbe\u7f6e\u4e86\u6211\u4eec\u5982\u4f55\u53c2\u8003\u5ba2\u6237\u7684\u9884\u8ba2\u3002 1 for reservation in customer.reservations: \u5ba2\u6237\u5b9e\u4f8b\u5177\u6709 reservations \u5c5e\u6027\uff0c\u5176\u4e2d\u5305\u542b\u76f8\u5e94\u7684\u9884\u7559\u3002 1 2 3 4 5 $ ./one2many.py 1 2018-22-11 4 2018-29-11 \u8fd9\u662f\u8f93\u51fa\u3002 \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86 Python Peewee ORM\u3002","title":"Python Peewee \u6559\u7a0b"},{"location":"pages/python/pytutorial/python-peewee/#Python-Peewee-\u6559\u7a0b","text":"Python Peewee \u6559\u7a0b \u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528 Python Peewee ORM\u3002 \u5bf9\u8c61\u5173\u7cfb\u6620\u5c04\uff08ORM\uff09\u662f\u4e00\u79cd\u4ece\u9762\u5411\u5bf9\u8c61\u7684\u8bed\u8a00\u8bbf\u95ee\u5173\u7cfb\u6570\u636e\u5e93\u7684\u6280\u672f\uff0c\u5b83\u662f Python \u6570\u636e\u5e93 API \u7684\u62bd\u8c61\u3002","title":"Python Peewee \u6559\u7a0b"},{"location":"pages/python/pytutorial/python-peewee/#Python-Peewee","text":"Peewee \u662f\u4e00\u4e2a\u7b80\u5355\u800c\u5c0f\u578b\u7684 Python ORM \u5de5\u5177\u3002 \u5b83\u652f\u6301 SQLite\uff0cMySQL \u548c PostgreSQL\u3002 1 $ pip install peewee \u6211\u4eec\u5b89\u88c5 peewee \u6a21\u5757\u3002","title":"Python Peewee"},{"location":"pages/python/pytutorial/python-peewee/#Peewee-\u6620\u5c04","text":"Model \u6620\u5c04\u5230\u6570\u636e\u5e93\u8868\uff0c Field \u6620\u5c04\u5230\u8868\u5217\uff0c instance \u6620\u5c04\u5230\u8868\u884c\u3002 Peewee \u5bf9\u4e8e MySQL \u4f7f\u7528 MySQLDatabase \uff0c\u5bf9\u4e8e PostgreSQL \u4f7f\u7528 PostgresqlDatabase \uff0c\u5bf9\u4e8e SQLite \u4f7f\u7528 SqliteDatabase \u3002 \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 SQLite \u6570\u636e\u5e93\u3002","title":"Peewee \u6620\u5c04"},{"location":"pages/python/pytutorial/python-peewee/#Peewee-\u5b57\u6bb5\u7c7b\u578b","text":"Peewee \u6a21\u578b\u4e2d\u7684\u5b57\u6bb5\u7c7b\u578b\u5b9a\u4e49\u6a21\u578b\u7684\u5b58\u50a8\u7c7b\u578b\u3002 \u5b83\u4eec\u88ab\u8f6c\u6362\u4e3a\u76f8\u5e94\u7684\u6570\u636e\u5e93\u5217\u7c7b\u578b\u3002 \u5b57\u6bb5\u7c7b\u578b SQLite PostgreSQL MySQL `CharField` `varchar` `varchar` `varchar` `TextField` `text` `text` `longtext` `DateTimeField` `datetime` `timestamp` `longtext` `IntegerField` `integer` `integer` `integer` `BooleanField` `smallint` `bool` `bool` `FloatField` `real` `real` `real` `DoubleField` `real` `double` `double` `BigIntegerField` `integer` `bigint` `bigint` `DecimalField` `decimal` `numeric` `numeric` `PrimaryKeyField` `integer` `serial` `integer` `ForeignKeyField` `integer` `integer` `integer` `DateField` `date` `date` `date` `TimeField` `time` `time` `time` \u4e0b\u8868\u5217\u51fa\u4e86 Peewee \u5b57\u6bb5\u7c7b\u578b\u4ee5\u53ca\u76f8\u5e94\u7684 SQLite\uff0cPostgreSQL \u548c MySQL \u5217\u7c7b\u578b\u3002","title":"Peewee \u5b57\u6bb5\u7c7b\u578b"},{"location":"pages/python/pytutorial/python-peewee/#Peewee-\u6a21\u578b\u5b9a\u4e49","text":"\u5728\u7b2c\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u6570\u636e\u5e93\u8868\u3002 model_definition.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #!/usr/bin/env python3 import peewee import datetime db = peewee.SqliteDatabase('test.db') class Note(peewee.Model): text = peewee.CharField() created = peewee.DateField(default=datetime.date.today) class Meta: database = db db_table = 'notes' Note.create_table() note1 = Note.create(text='Went to the cinema') note1.save() note2 = Note.create(text='Exercised in the morning', created=datetime.date(2018, 10, 20)) note2.save() note3 = Note.create(text='Worked in the garden', created=datetime.date(2018, 10, 22)) note3.save() note4 = Note.create(text='Listened to music') note4.save() \u8be5\u793a\u4f8b\u5728 SQLite \u4e2d\u521b\u5efa notes \u6570\u636e\u5e93\u8868\u3002 1 db = peewee.SqliteDatabase('test.db') \u6211\u4eec\u542f\u52a8 test.db SQLite \u6570\u636e\u5e93\u3002 \u8fd9\u5c06\u5728\u6587\u4ef6\u7cfb\u7edf\u4e0a\u521b\u5efa\u4e00\u4e2a test.db \u6587\u4ef6\u3002 1 2 class Note(peewee.Model): ... \u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u540d\u4e3a Note \u7684\u6570\u636e\u5e93\u6a21\u578b\u3002 Peewee \u6a21\u578b\u7ee7\u627f\u81ea peewee.Model \u3002 1 2 text = peewee.CharField() created = peewee.DateField(default=datetime.date.today) \u6211\u4eec\u6307\u5b9a\u6a21\u578b\u5b57\u6bb5\u3002 \u6211\u4eec\u6709\u4e00\u4e2a CharField \u548c\u4e00\u4e2a DateField \u3002 CharField \u662f\u7528\u4e8e\u5b58\u50a8\u5b57\u7b26\u4e32\u7684\u5b57\u6bb5\u7c7b\u3002 DateField \u662f\u7528\u4e8e\u5b58\u50a8\u65e5\u671f\u7684\u5b57\u6bb5\u7c7b\u3002 \u5982\u679c\u672a\u6307\u5b9a\uff0c\u5219\u91c7\u7528\u9ed8\u8ba4\u503c\u3002 1 2 3 class Meta: database = db db_table = 'notes' \u5728 Meta \u7c7b\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u5bf9\u6570\u636e\u5e93\u7684\u5f15\u7528\u548c\u6570\u636e\u5e93\u8868\u540d\u79f0\u3002 1 Note.create_table() \u8be5\u8868\u662f\u4f7f\u7528 create_table() \u4ece\u6a21\u578b\u521b\u5efa\u7684\u3002 1 2 note1 = Note.create(text='Went to the cinema') note1.save() \u6211\u4eec\u521b\u5efa\u5e76\u4fdd\u5b58\u4e00\u4e2a\u65b0\u5b9e\u4f8b\u3002 1 2 3 4 5 sqlite> select * from notes; 1|Went to the cinema|2018-11-01 2|Exercised in the morning|2018-10-20 3|Worked in the garden|2018-10-22 4|Listened to music|2018-11-01 \u6211\u4eec\u9a8c\u8bc1\u6570\u636e\u3002","title":"Peewee \u6a21\u578b\u5b9a\u4e49"},{"location":"pages/python/pytutorial/python-peewee/#Peewee-\u5220\u9664\u8868","text":"\u4f7f\u7528 drop_table() \u6a21\u578b\u65b9\u6cd5\u5220\u9664\u8be5\u8868\u3002 drop_table.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env python3 import peewee import datetime db = peewee.SqliteDatabase('test.db') class Note(peewee.Model): text = peewee.CharField() created = peewee.DateField(default=datetime.date.today) class Meta: database = db db_table = 'notes' Note.drop_table() \u8be5\u793a\u4f8b\u5220\u9664 notes \u8868\u3002","title":"Peewee \u5220\u9664\u8868"},{"location":"pages/python/pytutorial/python-peewee/#Peewee-insert_many","text":"insert_many() \u65b9\u6cd5\u5141\u8bb8\u8fdb\u884c\u6279\u91cf\u521b\u5efa\u3002 insert_many.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #!/usr/bin/env python3 import peewee import datetime db = peewee.SqliteDatabase('test.db') class Note(peewee.Model): text = peewee.CharField() created = peewee.DateField(default=datetime.date.today) class Meta: database = db db_table = 'notes' Note.create_table() data = [ { 'text': 'Tai chi in the morning', 'created': datetime.date(2018, 10, 20) }, { 'text': 'Visited friend', 'created': datetime.date(2018, 10, 12) }, { 'text': 'Went to cinema', 'created': datetime.date(2018, 10, 5) }, { 'text': 'Listened to music', 'created': datetime.date(2018, 10, 28) }, { 'text': 'Watched TV all day', 'created': datetime.date(2018, 10, 14) }, { 'text': 'Worked in the garden', 'created': datetime.date(2018, 10, 22) }, { 'text': 'Walked for a hour', 'created': datetime.date(2018, 10, 28) } ] with db.atomic(): query = Note.insert_many(data) query.execute() \u8be5\u4ee3\u7801\u793a\u4f8b\u901a\u8fc7\u4e00\u6b21\u6279\u91cf\u521b\u5efa\u64cd\u4f5c\u6765\u91cd\u65b0\u521b\u5efa notes \u8868\u3002 1 2 3 4 5 6 7 8 9 data = [ { 'text': 'Tai chi in the morning', 'created': datetime.date(2018, 10, 20) }, { 'text': 'Visited friend', 'created': datetime.date(2018, 10, 12) }, { 'text': 'Went to cinema', 'created': datetime.date(2018, 10, 5) }, { 'text': 'Listened to music', 'created': datetime.date(2018, 10, 28) }, { 'text': 'Watched TV all day', 'created': datetime.date(2018, 10, 14) }, { 'text': 'Worked in the garden', 'created': datetime.date(2018, 10, 22) }, { 'text': 'Walked for a hour', 'created': datetime.date(2018, 10, 28) } ] \u6211\u4eec\u5728\u8bcd\u5178\u5217\u8868\u4e2d\u5b9a\u4e49\u6570\u636e\u3002 1 2 3 4 with db.atomic(): query = Note.insert_many(data) query.execute() \u6211\u4eec\u6267\u884c\u6279\u91cf\u64cd\u4f5c\u3002 atomic() \u65b9\u6cd5\u5c06\u6279\u91cf\u64cd\u4f5c\u7f6e\u4e8e\u4e8b\u52a1\u4e2d\u3002","title":"Peewee insert_many"},{"location":"pages/python/pytutorial/python-peewee/#Peewee-\u9009\u62e9\u6240\u6709\u5b9e\u4f8b","text":"select() \u65b9\u6cd5\u7528\u4e8e\u68c0\u7d22\u5b9a\u4e49\u7684\u6a21\u578b\u7684\u5b9e\u4f8b\u3002 fetch_all.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #!/usr/bin/env python3 import peewee import datetime db = peewee.SqliteDatabase('test.db') class Note(peewee.Model): text = peewee.CharField() created = peewee.DateField(default=datetime.date.today) class Meta: database = db db_table = 'notes' notes = Note.select() for note in notes: print('{} on {}'.format(note.text, note.created)) \u8be5\u793a\u4f8b\u83b7\u53d6\u5e76\u663e\u793a\u6240\u6709 Note \u5b9e\u4f8b\u3002 1 notes = Note.select() select() \u65b9\u6cd5\u521b\u5efa\u4e00\u4e2a SELECT \u67e5\u8be2\u3002 \u5982\u679c\u672a\u660e\u786e\u63d0\u4f9b\u4efb\u4f55\u5b57\u6bb5\uff0c\u5219\u67e5\u8be2\u5c06\u9ed8\u8ba4\u9009\u62e9\u6a21\u578b\u4e0a\u5b9a\u4e49\u7684\u6240\u6709\u5b57\u6bb5\u3002 1 2 3 4 5 6 7 8 $ ./fetch_all.py Tai chi in the morning on 2018-10-20 Visited friend on 2018-10-12 Went to cinema on 2018-10-05 Listened to music on 2018-10-28 Watched TV all day on 2018-10-14 Worked in the garden on 2018-10-22 Walked for a hour on 2018-10-28 \u8fd9\u662f\u8f93\u51fa\u3002","title":"Peewee \u9009\u62e9\u6240\u6709\u5b9e\u4f8b"},{"location":"pages/python/pytutorial/python-peewee/#Peewee-where\u8fc7\u6ee4\u5668","text":"where() \u65b9\u6cd5\u53ef\u4ee5\u6839\u636e\u7ed9\u5b9a\u6761\u4ef6\u8fc7\u6ee4\u6570\u636e\u3002 where_clause.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #!/usr/bin/env python3 import peewee import datetime db = peewee.SqliteDatabase('test.db') class Note(peewee.Model): text = peewee.CharField() created = peewee.DateField(default=datetime.date.today) class Meta: database = db db_table = 'notes' notes = Note.select().where(Note.id > 3) for note in notes: print('{} {} on {}'.format(note.id, note.text, note.created)) \u8be5\u793a\u4f8b\u68c0\u7d22 ID \u5927\u4e8e\u4e09\u7684\u6240\u6709\u884c\u3002 1 notes = Note.select().where(Note.id > 3) where() \u65b9\u6cd5\u5bf9\u67e5\u8be2\u5e94\u7528\u8fc7\u6ee4\u6761\u4ef6\u3002 1 2 3 4 5 $ ./where_clause.py 4 Listened to music on 2018-10-28 5 Watched TV all day on 2018-10-14 6 Worked in the garden on 2018-10-22 7 Walked for a hour on 2018-10-28 \u8fd9\u662f\u8f93\u51fa\u3002","title":"Peewee where\u8fc7\u6ee4\u5668"},{"location":"pages/python/pytutorial/python-peewee/#Peewee-\u591a\u4e2awhere\u8868\u8fbe\u5f0f","text":"\u6211\u4eec\u53ef\u4ee5\u7ec4\u5408\u591a\u4e2a where \u8868\u8fbe\u5f0f\u3002 multiple_where_expr.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #!/usr/bin/env python3 import peewee import datetime db = peewee.SqliteDatabase('test.db') class Note(peewee.Model): text = peewee.CharField() created = peewee.DateField(default=datetime.date.today) class Meta: database = db db_table = 'notes' notes = Note.select().where((Note.id > 2) & (Note.id < 6)) for note in notes: print('{} {} on {}'.format(note.id, note.text, note.created)) \u8be5\u793a\u4f8b\u68c0\u7d22 id \u5927\u4e8e 2 \u4e14\u5c0f\u4e8e 6 \u7684\u6240\u6709\u884c\u3002 1 notes = Note.select().where((Note.id > 2) & (Note.id < 6)) \u6211\u4eec\u5c06\u4e24\u4e2a where \u8868\u8fbe\u5f0f\u4e0e&\u8fd0\u7b97\u7b26\u7ed3\u5408\u4f7f\u7528\u3002 1 2 3 4 $ ./multiple_where_expr.py 3 Went to cinema on 2018-10-05 4 Listened to music on 2018-10-28 5 Watched TV all day on 2018-10-14 \u8fd9\u662f\u8f93\u51fa\u3002","title":"Peewee \u591a\u4e2awhere\u8868\u8fbe\u5f0f"},{"location":"pages/python/pytutorial/python-peewee/#Peewee-\u68c0\u7d22\u5355\u4e2a\u5b9e\u4f8b","text":"\u9009\u62e9\u5355\u4e2a\u5b9e\u4f8b\u6709\u4e24\u79cd\u65b9\u6cd5\uff1a \u5b83\u4eec\u6bcf\u4e2a\u90fd\u4f7f\u7528 get() \u65b9\u6cd5\u3002 single_instance.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #!/usr/bin/env python3 import peewee import datetime db = peewee.SqliteDatabase('test.db') class Note(peewee.Model): text = peewee.CharField() created = peewee.DateField(default=datetime.date.today) class Meta: database = db db_table = 'notes' note1 = Note.select().where(Note.text == 'Went to cinema').get() print(note1.id) print(note1.text) print(note1.created) note2 = Note.get(Note.text == 'Listened to music') print(note2.id) print(note2.text) print(note2.created) \u8be5\u793a\u4f8b\u663e\u793a\u4e86\u5982\u4f55\u4ee5\u4e24\u79cd\u65b9\u5f0f\u68c0\u7d22\u5355\u4e2a\u5b9e\u4f8b\u3002 1 note1 = Note.select().where(Note.text == 'Went to cinema').get() \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Note.select().where().get() \u65b9\u6cd5\u94fe\u3002 1 note2 = Note.get(Note.text == 'Listened to music') \u8fd8\u6709\u4e00\u4e2a Note.get() \u5feb\u6377\u65b9\u5f0f\uff0c\u5176\u529f\u80fd\u76f8\u540c\u3002 1 2 3 4 5 6 7 $ ./single_instance.py 3 Went to cinema 2018-10-05 4 Listened to music 2018-10-28 \u8fd9\u662f\u8f93\u51fa\u3002","title":"Peewee \u68c0\u7d22\u5355\u4e2a\u5b9e\u4f8b"},{"location":"pages/python/pytutorial/python-peewee/#Peewee-\u9009\u62e9\u7279\u5b9a\u7684\u5217","text":"\u5728 select() \u65b9\u6cd5\u5185\u90e8\uff0c\u6211\u4eec\u53ef\u4ee5\u6307\u5b9a\u8981\u5305\u542b\u5728\u67e5\u8be2\u4e2d\u7684\u5217\u7684\u540d\u79f0\u3002 columns.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #!/usr/bin/env python3 import peewee import datetime db = peewee.SqliteDatabase('test.db') class Note(peewee.Model): text = peewee.CharField() created = peewee.DateField(default=datetime.date.today) class Meta: database = db db_table = 'notes' notes = Note.select(Note.text, Note.created).limit(2) output = [e for e in notes.tuples()] print(output) \u8be5\u793a\u4f8b\u5305\u62ec\u4e24\u5217\uff1atext \u548c created\u3002 \u8be5 ID \u88ab\u8df3\u8fc7\u3002 \u6211\u4eec\u5c06\u67e5\u8be2\u9650\u5236\u4e3a\u4e24\u4e2a\u5b9e\u4f8b\u3002 1 2 3 $ ./columns.py [('Tai chi in the morning', datetime.date(2018, 10, 20)), ('Visited friend', datetime.date(2018, 10, 12))] \u8fd9\u662f\u8f93\u51fa\u3002","title":"Peewee \u9009\u62e9\u7279\u5b9a\u7684\u5217"},{"location":"pages/python/pytutorial/python-peewee/#Peewee-\u8ba1\u6570\u5b9e\u4f8b","text":"\u8981\u8ba1\u7b97\u8868\u4e2d\u7684\u6a21\u578b\u5b9e\u4f8b\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 count() \u65b9\u6cd5\u3002 count_instances.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #!/usr/bin/env python3 import peewee import datetime db = peewee.SqliteDatabase('test.db') class Note(peewee.Model): text = peewee.CharField() created = peewee.DateField(default=datetime.date.today) class Meta: database = db db_table = 'notes' n = Note.select().count() print(n) n2 = Note.select().where(Note.created >= datetime.date(2018, 10, 20)).count() print(n2) \u8be5\u793a\u4f8b\u8ba1\u7b97\u6240\u6709\u5b9e\u4f8b\u7684\u6570\u91cf\u4ee5\u53ca\u65e5\u671f\u7b49\u4e8e\u6216\u665a\u4e8e 2018/10/20 \u7684\u5b9e\u4f8b\u7684\u6570\u91cf\u3002 1 2 3 $ ./count_instances.py 7 4 \u8fd9\u662f\u8f93\u51fa\u3002","title":"Peewee \u8ba1\u6570\u5b9e\u4f8b"},{"location":"pages/python/pytutorial/python-peewee/#Peewee-\u663e\u793a-SQL-\u8bed\u53e5","text":"\u53ef\u4ee5\u4f7f\u7528 sql() \u65b9\u6cd5\u663e\u793a\u751f\u6210\u7684 SQL \u8bed\u53e5\u3002 show_sql.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/usr/bin/env python3 import peewee import datetime db = peewee.SqliteDatabase('test.db') class Note(peewee.Model): text = peewee.CharField() created = peewee.DateField(default=datetime.date.today) class Meta: database = db db_table = 'notes' note3 = Note.select().where(Note.id == 3) print(note3.sql()) \u8be5\u793a\u4f8b\u663e\u793a\u5c06 ORM \u67e5\u8be2\u8f6c\u6362\u4e3a\u7684 SQL\u3002 1 2 3 $ ./show_sql.py ('SELECT \"t1\".\"id\", \"t1\".\"text\", \"t1\".\"created\" FROM \"notes\" AS \"t1\" WHERE (\"t1\".\"id\" = ?)', [3]) \u8fd9\u662f\u8f93\u51fa\u3002","title":"Peewee \u663e\u793a SQL \u8bed\u53e5"},{"location":"pages/python/pytutorial/python-peewee/#Peewee-offset\u548climit","text":"\u901a\u8fc7 offset \u548c limit \u5c5e\u6027\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u5b9e\u4f8b\u7684\u521d\u59cb\u8df3\u8fc7\u548c\u8981\u5305\u542b\u5728 select() \u4e2d\u7684\u5b9e\u4f8b\u6570\u3002 offset_limit.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #!/usr/bin/env python3 import peewee import datetime db = peewee.SqliteDatabase('test.db') class Note(peewee.Model): text = peewee.CharField() created = peewee.DateField(default=datetime.date.today) class Meta: database = db db_table = 'notes' notes = Note.select().offset(2).limit(3) for note in notes: print(note.id, note.text, note.created) \u8be5\u793a\u4f8b\u4ece\u7b2c\u4e8c\u4e2a\u5b9e\u4f8b\u5f00\u59cb\u8fd4\u56de\u4e09\u4e2a\u5b9e\u4f8b\u3002 1 2 3 4 $ ./offset_limit.py 3 Went to cinema 2018-10-05 4 Listened to music 2018-10-28 5 Watched TV all day 2018-10-14 \u8fd9\u662f\u8f93\u51fa\u3002","title":"Peewee offset\u548climit"},{"location":"pages/python/pytutorial/python-peewee/#Peewee-\u6392\u5e8f","text":"\u53ef\u4ee5\u4f7f\u7528 order_by() \u5bf9\u68c0\u7d22\u5230\u7684\u5b9e\u4f8b\u8fdb\u884c\u6392\u5e8f\u3002 order_by.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #!/usr/bin/env python3 import peewee import datetime db = peewee.SqliteDatabase('test.db') class Note(peewee.Model): text = peewee.CharField() created = peewee.DateField(default=datetime.date.today) class Meta: database = db db_table = 'notes' print('Ascending order') print('*****************************') notes = Note.select(Note.text, Note.created).order_by(Note.created) for note in notes: print(note.text, note.created) print() print('Descending order') print('*****************************') notes = Note.select(Note.text, Note.created).order_by(Note.created.desc()) for note in notes: print(note.text, note.created) \u8be5\u4ee3\u7801\u793a\u4f8b\u6309\u521b\u5efa\u65e5\u671f\u5bf9\u5b9e\u4f8b\u8fdb\u884c\u6392\u5e8f\u3002 1 notes = Note.select(Note.text, Note.created).order_by(Note.created) \u8be5\u884c\u8fd4\u56de\u6309\u521b\u5efa\u65e5\u671f\u5347\u5e8f\u6392\u5217\u7684\u6ce8\u91ca\u5b9e\u4f8b\u3002 1 notes = Note.select(Note.text, Note.created).order_by(Note.created.desc()) \u8981\u6309\u5347\u5e8f\u68c0\u7d22\u7b14\u8bb0\uff0c\u6211\u4eec\u5728\u5b57\u6bb5\u4e0a\u9644\u52a0 desc() \u65b9\u6cd5\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 Ascending order ***************************** Went to cinema 2018-10-05 Visited friend 2018-10-12 Watched TV all day 2018-10-14 Tai chi in the morning 2018-10-20 Worked in the garden 2018-10-22 Listened to music 2018-10-28 Walked for a hour 2018-10-28 Descending order ***************************** Listened to music 2018-10-28 Walked for a hour 2018-10-28 Worked in the garden 2018-10-22 Tai chi in the morning 2018-10-20 Watched TV all day 2018-10-14 Visited friend 2018-10-12 Went to cinema 2018-10-05 \u8fd9\u662f\u97f3\u7b26\u5b9e\u4f8b\u7684\u6709\u5e8f\u5217\u8868\u3002","title":"Peewee \u6392\u5e8f"},{"location":"pages/python/pytutorial/python-peewee/#Peewee-\u5220\u9664\u5b9e\u4f8b","text":"delete_by_id() \u65b9\u6cd5\u5220\u9664\u7531\u5176 ID \u6807\u8bc6\u7684\u5b9e\u4f8b\u3002 \u5b83\u8fd4\u56de\u5df2\u5220\u9664\u5b9e\u4f8b\u7684\u6570\u91cf\u3002 delete_by_id.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/usr/bin/env python3 import peewee import datetime db = peewee.SqliteDatabase('test.db') class Note(peewee.Model): text = peewee.CharField() created = peewee.DateField(default=datetime.date.today) class Meta: database = db db_table = 'notes' n2 = Note.delete_by_id(1) print(n2) \u8be5\u793a\u4f8b\u5220\u9664\u4e00\u4e2a ID \u4e3a 1 \u7684 Note \u5b9e\u4f8b\u3002","title":"Peewee \u5220\u9664\u5b9e\u4f8b"},{"location":"pages/python/pytutorial/python-peewee/#Peewee-\u5220\u9664\u591a\u4e2a\u5b9e\u4f8b","text":"\u8981\u5220\u9664\u66f4\u591a\u5b9e\u4f8b\uff0c\u6211\u4eec\u8c03\u7528 delete() \u65b9\u6cd5\u3002 \u5b83\u8fd4\u56de\u6210\u529f\u5220\u9664\u7684\u5b9e\u4f8b\u6570\u3002 delete_instances.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #!/usr/bin/env python3 import peewee import datetime db = peewee.SqliteDatabase('test.db') class Note(peewee.Model): text = peewee.CharField() created = peewee.DateField(default=datetime.date.today) class Meta: database = db db_table = 'notes' query = Note.delete().where(Note.id > 3) n = query.execute() print('{} instances deleted'.format(n)) \u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5220\u9664\u4e86 ID \u5927\u4e8e 3 \u7684\u6240\u6709\u5b9e\u4f8b\u3002 1 2 $ ./delete_instances.py 4 instances deleted \u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5220\u9664\u4e86\u56db\u4e2a Note \u5b9e\u4f8b\u3002","title":"Peewee \u5220\u9664\u591a\u4e2a\u5b9e\u4f8b"},{"location":"pages/python/pytutorial/python-peewee/#Peewee-\u66f4\u65b0\u5b9e\u4f8b","text":"update() \u65b9\u6cd5\u66f4\u65b0\u4e00\u4e2a\u5b9e\u4f8b\u3002 \u5b83\u8fd4\u56de\u6210\u529f\u66f4\u65b0\u7684\u5b9e\u4f8b\u6570\u3002 update_instance.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #!/usr/bin/env python3 import peewee import datetime db = peewee.SqliteDatabase('test.db') class Note(peewee.Model): text = peewee.CharField() created = peewee.DateField(default=datetime.date.today) class Meta: database = db db_table = 'notes' query = Note.update(created=datetime.date(2018, 10, 27)).where(Note.id == 1) n = query.execute() print('# of rows updated: {}'.format(n)) \u8be5\u793a\u4f8b\u4f7f\u7528 ID 1 \u4fee\u6539\u6ce8\u91ca\u7684\u521b\u5efa\u65e5\u671f\u3002","title":"Peewee \u66f4\u65b0\u5b9e\u4f8b"},{"location":"pages/python/pytutorial/python-peewee/#Peewee-\u4e00\u5bf9\u591a\u5173\u7cfb","text":"\u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u6a21\u578b\u6620\u5c04\u5230\u73b0\u6709\u8868\u3002 \u4f7f\u7528 ForeignKeyField \u521b\u5efa\u6a21\u578b\u4e4b\u95f4\u7684\u5173\u7cfb\u3002 customers_reservations.sql 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 BEGIN TRANSACTION; DROP TABLE IF EXISTS reservations; DROP TABLE IF EXISTS customers; CREATE TABLE IF NOT EXISTS customers(id INTEGER PRIMARY KEY, name TEXT); INSERT INTO customers(Name) VALUES('Paul Novak'); INSERT INTO customers(Name) VALUES('Terry Neils'); INSERT INTO customers(Name) VALUES('Jack Fonda'); INSERT INTO customers(Name) VALUES('Tom Willis'); CREATE TABLE IF NOT EXISTS reservations(id INTEGER PRIMARY KEY, customer_id INTEGER, created DATE, FOREIGN KEY(customer_id) REFERENCES customers(id)); INSERT INTO reservations(customer_id, created) VALUES(1, '2018-22-11'); INSERT INTO reservations(customer_id, created) VALUES(2, '2018-28-11'); INSERT INTO reservations(customer_id, created) VALUES(2, '2018-29-11'); INSERT INTO reservations(customer_id, created) VALUES(1, '2018-29-11'); INSERT INTO reservations(customer_id, created) VALUES(3, '2018-02-12'); COMMIT; \u8be5 SQL \u521b\u5efa\u4e24\u4e2a\u8868\uff1a customers \u548c reservations \u3002 \u4e24\u4e2a\u8868\u4e4b\u95f4\u5b58\u5728\u4e00\u5bf9\u591a\u7684\u5173\u7cfb\uff1a\u4e00\u4e2a\u5ba2\u6237\u53ef\u4ee5\u8fdb\u884c\u5f88\u591a\u9884\u8ba2\u3002 1 sqlite> .read customers_reservations.sql \u6211\u4eec\u5c06 SQL \u6587\u4ef6\u8bfb\u5165\u6570\u636e\u5e93\u3002 one2many.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #!/usr/bin/env python3 import peewee import datetime db = peewee.SqliteDatabase('test.db') class Customer(peewee.Model): name = peewee.TextField() class Meta: database = db db_table = 'customers' class Reservation(peewee.Model): customer = peewee.ForeignKeyField(Customer, backref='reservations') created = peewee.DateField(default=datetime.date.today) class Meta: database = db db_table = 'reservations' customer = Customer.select().where(Customer.name == 'Paul Novak').get() for reservation in customer.reservations: print(reservation.id) print(reservation.created) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e24\u4e2a\u6620\u5c04\u5230\u8868\u7684\u6a21\u578b\u3002 \u7136\u540e\uff0c\u6211\u4eec\u9009\u62e9\u4e00\u4e2a\u5ba2\u6237\u5e76\u663e\u793a\u5176\u9884\u8ba2\u3002 1 customer = peewee.ForeignKeyField(Customer, backref='reservations') Customer \u548c Reservation \u6a21\u578b\u4e4b\u95f4\u7684\u5173\u7cfb\u662f\u901a\u8fc7 ForeignKeyField \u521b\u5efa\u7684\u3002 backref \u5c5e\u6027\u8bbe\u7f6e\u4e86\u6211\u4eec\u5982\u4f55\u53c2\u8003\u5ba2\u6237\u7684\u9884\u8ba2\u3002 1 for reservation in customer.reservations: \u5ba2\u6237\u5b9e\u4f8b\u5177\u6709 reservations \u5c5e\u6027\uff0c\u5176\u4e2d\u5305\u542b\u76f8\u5e94\u7684\u9884\u7559\u3002 1 2 3 4 5 $ ./one2many.py 1 2018-22-11 4 2018-29-11 \u8fd9\u662f\u8f93\u51fa\u3002 \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86 Python Peewee ORM\u3002","title":"Peewee \u4e00\u5bf9\u591a\u5173\u7cfb"},{"location":"pages/python/pytutorial/python-pillow/","text":"Pillow \u6559\u7a0b \u00b6 Pillow \u6559\u7a0b\u5c55\u793a\u4e86\u5982\u4f55\u5728 Python \u4e2d\u4f7f\u7528 Pillow \u6765\u5904\u7406\u56fe\u50cf\u3002 Pillow \u00b6 Pillow \u662f Python \u56fe\u50cf\u5e93\uff08PIL\uff09\uff0c\u5b83\u589e\u52a0\u4e86\u5bf9\u6253\u5f00\uff0c\u64cd\u4f5c\u548c\u4fdd\u5b58\u56fe\u50cf\u7684\u652f\u6301\u3002 \u5f53\u524d\u7248\u672c\u6807\u8bc6\u5e76\u8bfb\u53d6\u5927\u91cf\u683c\u5f0f\u3002 \u6709\u610f\u5c06\u5199\u652f\u6301\u9650\u5236\u4e3a\u6700\u5e38\u7528\u7684\u4ea4\u6362\u548c\u8868\u793a\u683c\u5f0f\u3002 \u663e\u793a\u56fe\u7247 \u00b6 \u5728\u7b2c\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u8bfb\u53d6\u56fe\u50cf\u6587\u4ef6\u5e76\u5728\u5916\u90e8\u7a0b\u5e8f\u4e2d\u663e\u793a\u5b83\u3002 show_image.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/python3 from PIL import Image import sys try: tatras = Image.open(\"tatras.jpg\") except IOError: print(\"Unable to load image\") sys.exit(1) tatras.show() \u8be5\u7a0b\u5e8f\u8bfb\u53d6 JPG \u56fe\u50cf\u5e76\u5c06\u5176\u663e\u793a\u5728\u5916\u90e8\u5e94\u7528\u4e2d\u3002 1 from PIL import Image \u5728 PIL \u6a21\u5757\u4e2d\uff0c\u6211\u4eec\u5305\u542b Image \u7c7b\u3002 1 tatras = Image.open(\"tatras.jpg\") Image.open() \u65b9\u6cd5\u8bfb\u53d6\u56fe\u50cf\u6587\u4ef6\u3002Pillow \u53ef\u4ee5\u8bfb\u53d6 30 \u591a\u79cd\u4e0d\u540c\u7684\u6587\u4ef6\u683c\u5f0f\u3002 1 tatras.show() show() \u65b9\u6cd5\u4e3b\u8981\u7528\u4e8e\u8c03\u8bd5\u76ee\u7684\u3002 \u5b83\u5c06\u56fe\u50cf\u4fdd\u5b58\u5230\u4e00\u4e2a\u4e34\u65f6\u6587\u4ef6\u4e2d\u5e76\u5728\u5916\u90e8\u7a0b\u5e8f\u4e2d\u663e\u793a\u3002 \u5728 Linux \u4e0a\u53ef\u4ee5\u662f ImageMagic\uff0c\u5728 Windows \u4e0a\u53ef\u4ee5\u662f Paint\u3002 Pillow \u7684\u57fa\u672c\u56fe\u50cf\u4fe1\u606f \u00b6 Pillow \u4f7f\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u6709\u5173\u56fe\u50cf\u7684\u4e00\u4e9b\u57fa\u672c\u4fe1\u606f\u3002 basic_info.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/python3 from PIL import Image import sys try: tatras = Image.open(\"tatras.jpg\") except IOError: print(\"Unable to load image\") sys.exit(1) print(\"Format: {0}\\nSize: {1}\\nMode: {2}\".format(tatras.format, tatras.size, tatras.mode)) \u8be5\u793a\u4f8b\u4f7f\u7528 Pillow \u6253\u5370\u6709\u5173\u56fe\u50cf\u7684\u57fa\u672c\u4fe1\u606f\u3002 1 2 print(\"Format: {0}\\nSize: {1}\\nMode: {2}\".format(tatras.format, tatras.size, tatras.mode)) \u6211\u4eec\u6253\u5370\u56fe\u50cf\u683c\u5f0f\uff0c\u5927\u5c0f\u548c\u6a21\u5f0f\u3002 1 2 3 4 $ ./basic_info.py Format: JPEG Size: (350, 232) Mode: RGB \u8fd9\u662f\u7a0b\u5e8f\u7684\u8f93\u51fa\u3002 \u56fe\u50cf\u6a21\u7cca \u00b6 ImageFilter \u6a21\u5757\u5305\u542b\u4e00\u7ec4\u9884\u5b9a\u4e49\u7684\u8fc7\u6ee4\u5668\u7684\u5b9a\u4e49\uff0c\u53ef\u4ee5\u4e0e filter() \u65b9\u6cd5\u4e00\u8d77\u4f7f\u7528\u3002 blur_image.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/python3 from PIL import Image, ImageFilter import sys try: img = Image.open(\"tatras.jpg\") except IOError: print(\"Unable to load image\") sys.exit(1) blurred = img.filter(ImageFilter.BLUR) blurred.save(\"blurred.png\") \u8be5\u7a0b\u5e8f\u52a0\u8f7d\u56fe\u50cf\uff0c\u4ece\u539f\u59cb\u56fe\u50cf\u521b\u5efa\u6a21\u7cca\u56fe\u50cf\uff0c\u7136\u540e\u5c06\u65b0\u56fe\u50cf\u4fdd\u5b58\u5728\u78c1\u76d8\u4e0a\u3002 1 from PIL import Image, ImageFilter \u6211\u4eec\u5bfc\u5165 Image \u548c ImageFilter \u6a21\u5757\u3002 1 blurred = img.filter(ImageFilter.BLUR) \u6211\u4eec\u5c06 ImageFilter.BLUR \u5e94\u7528\u4e8e\u539f\u59cb\u56fe\u50cf\uff1b \u8be5\u64cd\u4f5c\u5c06\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u4fee\u6539\u56fe\u50cf\u3002 1 blurred.save(\"blurred.png\") \u4f7f\u7528 save() \u65b9\u6cd5\uff0c\u6211\u4eec\u5c06\u6a21\u7cca\u7684\u56fe\u50cf\u4fdd\u5b58\u5728\u78c1\u76d8\u4e0a\u3002 \u7528 Pillow \u8f6c\u6362\u56fe\u50cf \u00b6 \u4f7f\u7528 save() \u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u56fe\u50cf\u8f6c\u6362\u4e3a\u5176\u4ed6\u683c\u5f0f\u3002 convert2png.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/python3 from PIL import Image import sys try: tatras = Image.open(\"tatras.jpg\") except IOError: print(\"Unable to load image\") sys.exit(1) tatras.save('tatras.png', 'png') \u8be5\u7a0b\u5e8f\u8bfb\u53d6 JPG \u56fe\u50cf\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a PNG \u683c\u5f0f\u3002 1 tatras.save('tatras.png', 'png') save() \u65b9\u6cd5\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u6307\u5b9a\u56fe\u50cf\u683c\u5f0f\u3002 \u7070\u5ea6\u56fe\u50cf \u00b6 \u4f7f\u7528 Image.convert() \u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u4ea7\u751f\u9ed1\u767d\u56fe\u50cf\u3002 grayscale.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/python3 from PIL import Image import sys try: tatras = Image.open(\"tatras.jpg\") except IOError: print(\"Unable to load image\") sys.exit(1) grayscale = tatras.convert('L') grayscale.show() \u8be5\u7a0b\u5e8f\u8bfb\u53d6\u56fe\u50cf\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a\u7070\u5ea6\u56fe\u50cf\u3002 1 grayscale = tatras.convert('L') convert() \u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f mode\uff1b \u201c L\u201d\u6a21\u5f0f\u662f\u9ed1\u767d\u7684\u3002 \u7528 Pillow \u88c1\u526a\u56fe\u50cf \u00b6 Image.crop() \u88c1\u526a\u56fe\u50cf\u3002 crop_image.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/python3 from PIL import Image import sys try: tatras = Image.open(\"tatras.jpg\") except IOError: print(\"Unable to load image\") sys.exit(1) cropped = tatras.crop((100, 100, 350, 350)) cropped.save('tatras_cropped.jpg') \u8be5\u7a0b\u5e8f\u5c06\u88c1\u526a\u56fe\u50cf\u3002 \u88c1\u526a\u540e\u7684\u56fe\u50cf\u4fdd\u5b58\u5728\u78c1\u76d8\u4e0a\u3002 1 cropped = tatras.crop((100, 100, 350, 350)) crop() \u65b9\u6cd5\u91c7\u7528 4 \u4e2a\u5143\u7ec4\u6765\u5b9a\u4e49\u5de6\uff0c\u4e0a\uff0c\u53f3\u548c\u4e0b\u50cf\u7d20\u5750\u6807\u3002 \u7528 Pillow \u65cb\u8f6c\u56fe\u50cf \u00b6 Image.rotate() \u8fd4\u56de\u56fe\u50cf\u7684\u65cb\u8f6c\u526f\u672c\u3002 rotate_image.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/python3 from PIL import Image import sys try: tatras = Image.open(\"tatras.jpg\") except IOError: print(\"Unable to load image\") sys.exit(1) rotated = tatras.rotate(180) rotated.save('tatras_rotated.jpg') \u8be5\u7a0b\u5e8f\u5c06\u56fe\u50cf\u65cb\u8f6c 180 \u5ea6\u5e76\u5c06\u65b0\u521b\u5efa\u7684\u56fe\u50cf\u4fdd\u5b58\u5728\u78c1\u76d8\u4e0a\u3002 \u5728 Tkinter \u4e2d\u663e\u793a\u56fe\u50cf \u00b6 \u4ee5\u4e0b\u7a0b\u5e8f\u5728 Tkinter \u7a0b\u5e8f\u4e2d\u663e\u793a\u56fe\u50cf\u3002 show_tkinter.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 #!/usr/bin/python3 # -*- coding: utf-8 -*- from PIL import Image, ImageTk from tkinter import Tk from tkinter.ttk import Frame, Label import sys class Example(Frame): def __init__(self): super().__init__() self.loadImage() self.initUI() def loadImage(self): try: self.img = Image.open(\"tatrs.jpg\") except IOError: print(\"Unable to load image\") sys.exit(1) def initUI(self): self.master.title(\"Label\") tatras = ImageTk.PhotoImage(self.img) label = Label(self, image=tatras) # reference must be stored label.image = tatras label.pack() self.pack() def setGeometry(self): w, h = self.img.size self.master.geometry((\"%dx%d+300+300\") % (w, h)) def main(): root = Tk() ex = Example() ex.setGeometry() root.mainloop() if __name__ == '__main__': main() \u8be5\u7a0b\u5e8f\u5728 Tkinter \u5de5\u5177\u7bb1\u7684 Label \u5c0f\u90e8\u4ef6\u4e2d\u663e\u793a\u56fe\u50cf\u3002 1 from PIL import Image, ImageTk ImageTk \u662f Tkinter \u517c\u5bb9\u7684\u7167\u7247\u56fe\u50cf\u3002 \u5b83\u53ef\u4ee5\u5728 Tkinter \u9700\u8981\u56fe\u50cf\u5bf9\u8c61\u7684\u4efb\u4f55\u5730\u65b9\u4f7f\u7528\u3002 1 tatras = ImageTk.PhotoImage(self.img) \u6211\u4eec\u521b\u5efa\u7167\u7247\u56fe\u50cf\u3002 1 label = Label(self, image=tatras) \u5c06\u7167\u7247\u56fe\u50cf\u63d0\u4f9b\u7ed9\u6807\u7b7e\u7a97\u53e3\u5c0f\u90e8\u4ef6\u7684 image \u53c2\u6570\u3002 1 label.image = tatras \u4e3a\u4e86\u4e0d\u88ab\u5783\u573e\u6536\u96c6\uff0c\u5fc5\u987b\u5b58\u50a8\u56fe\u50cf\u53c2\u8003\u3002 1 2 w, h = self.img.size self.master.geometry((\"%dx%d+300+300\") % (w, h)) \u7a97\u53e3\u7684\u5927\u5c0f\u9002\u5408\u56fe\u50cf\u5927\u5c0f\u3002 \u4ece URL \u8bfb\u53d6\u56fe\u50cf \u00b6 \u4e0b\u4e00\u4e2a\u793a\u4f8b\u4ece URL \u8bfb\u53d6\u56fe\u50cf\u3002 read_from_url.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #!/usr/bin/python3 from PIL import Image import requests import sys url = 'https://i.ytimg.com/vi/vEYsdh6uiS4/maxresdefault.jpg' try: resp = requests.get(url, stream=True).raw except requests.exceptions.RequestException as e: sys.exit(1) try: img = Image.open(resp) except IOError: print(\"Unable to open image\") sys.exit(1) img.save('sid.jpg', 'jpeg') \u8be5\u793a\u4f8b\u4ece URL \u8bfb\u53d6\u56fe\u50cf\u5e76\u5c06\u5176\u4fdd\u5b58\u5728\u78c1\u76d8\u4e0a\u3002 1 import requests \u6211\u4eec\u4f7f\u7528 requests \u5e93\u4e0b\u8f7d\u56fe\u50cf\u3002 1 resp = requests.get(url, stream=True).raw \u6211\u4eec\u5c06\u56fe\u50cf\u8bfb\u53d6\u4e3a\u539f\u59cb\u6570\u636e\u3002 1 img = Image.open(resp) Image \u662f\u4ece\u54cd\u5e94\u5bf9\u8c61\u521b\u5efa\u7684\u3002 1 img.save('sid.jpg', 'jpeg') \u56fe\u50cf\u88ab\u4fdd\u5b58\u3002 Pillow \u7ed8\u5236\u56fe\u50cf \u00b6 Pillow \u5177\u6709\u4e00\u4e9b\u57fa\u672c\u7684 2D \u56fe\u5f62\u529f\u80fd\u3002 ImageDraw \u6a21\u5757\u4e3a Image \u5bf9\u8c61\u63d0\u4f9b\u7b80\u5355\u7684 2D \u56fe\u5f62\u3002 \u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u65b0\u56fe\u50cf\uff0c\u6ce8\u91ca\u6216\u4fee\u9970\u73b0\u6709\u56fe\u50cf\uff0c\u4ee5\u53ca\u5373\u65f6\u751f\u6210\u56fe\u5f62\u4ee5\u4f9b Web \u4f7f\u7528\u3002 draw2image.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/python3 from PIL import Image, ImageDraw img = Image.new('RGBA', (200, 200), 'white') idraw = ImageDraw.Draw(img) idraw.rectangle((10, 10, 100, 100), fill='blue') img.save('rectangle.png') \u8be5\u793a\u4f8b\u521b\u5efa\u4e00\u4e2a\u65b0\u56fe\u50cf\uff0c\u5e76\u5728\u56fe\u50cf\u4e0a\u7ed8\u5236\u4e00\u4e2a\u84dd\u8272\u77e9\u5f62\u3002 1 img = Image.new('RGBA', (200, 200), 'white') \u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Image \u3002 \u56fe\u50cf\u6a21\u5f0f\u4e3a\u201c RGBA\u201d\u3002 \u5c3a\u5bf8\u4e3a 200\u00d7200\uff0c\u80cc\u666f\u4e3a\u767d\u8272\u3002 1 idraw = ImageDraw.Draw(img) \u6839\u636e\u56fe\u50cf\uff0c\u6211\u4eec\u521b\u5efa ImageDraw \u5bf9\u8c61\u3002 \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5728\u56fe\u50cf\u4e0a\u6267\u884c\u4e00\u4e9b\u7ed8\u5236\u64cd\u4f5c\u3002 1 idraw.rectangle((10, 10, 100, 100), fill='blue') \u4f7f\u7528 rectangle() \u65b9\u6cd5\uff0c\u6211\u4eec\u5728\u56fe\u50cf\u4e0a\u7ed8\u5236\u4e86\u4e00\u4e2a\u84dd\u8272\u77e9\u5f62\u3002 \u7528 Pillow \u521b\u5efa\u6c34\u5370 \u00b6 \u4ee5\u4e0b\u793a\u4f8b\u521b\u5efa\u4e00\u4e2a\u6c34\u5370\u3002 watermark.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #!/usr/bin/python3 from PIL import Image, ImageDraw, ImageFont import sys try: tatras = Image.open(\"tatras.jpg\") except: print(\"Unable to load image\") sys.exit(1) idraw = ImageDraw.Draw(tatras) text = \"High Tatras\" font = ImageFont.truetype(\"arial.ttf\", size=18) idraw.text((10, 10), text, font=font) tatras.save('tatras_watermarked.png') \u6211\u4eec\u4f7f\u7528 ImageDraw \u6a21\u5757\u521b\u5efa\u6c34\u5370\u3002 1 font = ImageFont.truetype(\"arial.ttf\", size=18) \u6211\u4eec\u521b\u5efa 18 \u5927\u5c0f\u7684 Arial \u5b57\u4f53\u3002 1 idraw.text((10, 10), text, font=font) \u6c34\u5370\u662f\u901a\u8fc7 text() \u65b9\u6cd5\u521b\u5efa\u7684\u3002 \u6587\u672c\u7684\u9ed8\u8ba4\u989c\u8272\u662f\u767d\u8272\u3002 \u6211\u4eec\u4f7f\u7528\u521b\u5efa\u7684\u5b57\u4f53\u3002 \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 Python Pillow \u5e93\u3002","title":"Pillow \u6559\u7a0b"},{"location":"pages/python/pytutorial/python-pillow/#Pillow-\u6559\u7a0b","text":"Pillow \u6559\u7a0b\u5c55\u793a\u4e86\u5982\u4f55\u5728 Python \u4e2d\u4f7f\u7528 Pillow \u6765\u5904\u7406\u56fe\u50cf\u3002","title":"Pillow \u6559\u7a0b"},{"location":"pages/python/pytutorial/python-pillow/#Pillow","text":"Pillow \u662f Python \u56fe\u50cf\u5e93\uff08PIL\uff09\uff0c\u5b83\u589e\u52a0\u4e86\u5bf9\u6253\u5f00\uff0c\u64cd\u4f5c\u548c\u4fdd\u5b58\u56fe\u50cf\u7684\u652f\u6301\u3002 \u5f53\u524d\u7248\u672c\u6807\u8bc6\u5e76\u8bfb\u53d6\u5927\u91cf\u683c\u5f0f\u3002 \u6709\u610f\u5c06\u5199\u652f\u6301\u9650\u5236\u4e3a\u6700\u5e38\u7528\u7684\u4ea4\u6362\u548c\u8868\u793a\u683c\u5f0f\u3002","title":"Pillow"},{"location":"pages/python/pytutorial/python-pillow/#\u663e\u793a\u56fe\u7247","text":"\u5728\u7b2c\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u8bfb\u53d6\u56fe\u50cf\u6587\u4ef6\u5e76\u5728\u5916\u90e8\u7a0b\u5e8f\u4e2d\u663e\u793a\u5b83\u3002 show_image.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/python3 from PIL import Image import sys try: tatras = Image.open(\"tatras.jpg\") except IOError: print(\"Unable to load image\") sys.exit(1) tatras.show() \u8be5\u7a0b\u5e8f\u8bfb\u53d6 JPG \u56fe\u50cf\u5e76\u5c06\u5176\u663e\u793a\u5728\u5916\u90e8\u5e94\u7528\u4e2d\u3002 1 from PIL import Image \u5728 PIL \u6a21\u5757\u4e2d\uff0c\u6211\u4eec\u5305\u542b Image \u7c7b\u3002 1 tatras = Image.open(\"tatras.jpg\") Image.open() \u65b9\u6cd5\u8bfb\u53d6\u56fe\u50cf\u6587\u4ef6\u3002Pillow \u53ef\u4ee5\u8bfb\u53d6 30 \u591a\u79cd\u4e0d\u540c\u7684\u6587\u4ef6\u683c\u5f0f\u3002 1 tatras.show() show() \u65b9\u6cd5\u4e3b\u8981\u7528\u4e8e\u8c03\u8bd5\u76ee\u7684\u3002 \u5b83\u5c06\u56fe\u50cf\u4fdd\u5b58\u5230\u4e00\u4e2a\u4e34\u65f6\u6587\u4ef6\u4e2d\u5e76\u5728\u5916\u90e8\u7a0b\u5e8f\u4e2d\u663e\u793a\u3002 \u5728 Linux \u4e0a\u53ef\u4ee5\u662f ImageMagic\uff0c\u5728 Windows \u4e0a\u53ef\u4ee5\u662f Paint\u3002","title":"\u663e\u793a\u56fe\u7247"},{"location":"pages/python/pytutorial/python-pillow/#Pillow-\u7684\u57fa\u672c\u56fe\u50cf\u4fe1\u606f","text":"Pillow \u4f7f\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u6709\u5173\u56fe\u50cf\u7684\u4e00\u4e9b\u57fa\u672c\u4fe1\u606f\u3002 basic_info.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/python3 from PIL import Image import sys try: tatras = Image.open(\"tatras.jpg\") except IOError: print(\"Unable to load image\") sys.exit(1) print(\"Format: {0}\\nSize: {1}\\nMode: {2}\".format(tatras.format, tatras.size, tatras.mode)) \u8be5\u793a\u4f8b\u4f7f\u7528 Pillow \u6253\u5370\u6709\u5173\u56fe\u50cf\u7684\u57fa\u672c\u4fe1\u606f\u3002 1 2 print(\"Format: {0}\\nSize: {1}\\nMode: {2}\".format(tatras.format, tatras.size, tatras.mode)) \u6211\u4eec\u6253\u5370\u56fe\u50cf\u683c\u5f0f\uff0c\u5927\u5c0f\u548c\u6a21\u5f0f\u3002 1 2 3 4 $ ./basic_info.py Format: JPEG Size: (350, 232) Mode: RGB \u8fd9\u662f\u7a0b\u5e8f\u7684\u8f93\u51fa\u3002","title":"Pillow \u7684\u57fa\u672c\u56fe\u50cf\u4fe1\u606f"},{"location":"pages/python/pytutorial/python-pillow/#\u56fe\u50cf\u6a21\u7cca","text":"ImageFilter \u6a21\u5757\u5305\u542b\u4e00\u7ec4\u9884\u5b9a\u4e49\u7684\u8fc7\u6ee4\u5668\u7684\u5b9a\u4e49\uff0c\u53ef\u4ee5\u4e0e filter() \u65b9\u6cd5\u4e00\u8d77\u4f7f\u7528\u3002 blur_image.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/python3 from PIL import Image, ImageFilter import sys try: img = Image.open(\"tatras.jpg\") except IOError: print(\"Unable to load image\") sys.exit(1) blurred = img.filter(ImageFilter.BLUR) blurred.save(\"blurred.png\") \u8be5\u7a0b\u5e8f\u52a0\u8f7d\u56fe\u50cf\uff0c\u4ece\u539f\u59cb\u56fe\u50cf\u521b\u5efa\u6a21\u7cca\u56fe\u50cf\uff0c\u7136\u540e\u5c06\u65b0\u56fe\u50cf\u4fdd\u5b58\u5728\u78c1\u76d8\u4e0a\u3002 1 from PIL import Image, ImageFilter \u6211\u4eec\u5bfc\u5165 Image \u548c ImageFilter \u6a21\u5757\u3002 1 blurred = img.filter(ImageFilter.BLUR) \u6211\u4eec\u5c06 ImageFilter.BLUR \u5e94\u7528\u4e8e\u539f\u59cb\u56fe\u50cf\uff1b \u8be5\u64cd\u4f5c\u5c06\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u4fee\u6539\u56fe\u50cf\u3002 1 blurred.save(\"blurred.png\") \u4f7f\u7528 save() \u65b9\u6cd5\uff0c\u6211\u4eec\u5c06\u6a21\u7cca\u7684\u56fe\u50cf\u4fdd\u5b58\u5728\u78c1\u76d8\u4e0a\u3002","title":"\u56fe\u50cf\u6a21\u7cca"},{"location":"pages/python/pytutorial/python-pillow/#\u7528-Pillow-\u8f6c\u6362\u56fe\u50cf","text":"\u4f7f\u7528 save() \u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u56fe\u50cf\u8f6c\u6362\u4e3a\u5176\u4ed6\u683c\u5f0f\u3002 convert2png.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/python3 from PIL import Image import sys try: tatras = Image.open(\"tatras.jpg\") except IOError: print(\"Unable to load image\") sys.exit(1) tatras.save('tatras.png', 'png') \u8be5\u7a0b\u5e8f\u8bfb\u53d6 JPG \u56fe\u50cf\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a PNG \u683c\u5f0f\u3002 1 tatras.save('tatras.png', 'png') save() \u65b9\u6cd5\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u6307\u5b9a\u56fe\u50cf\u683c\u5f0f\u3002","title":"\u7528 Pillow \u8f6c\u6362\u56fe\u50cf"},{"location":"pages/python/pytutorial/python-pillow/#\u7070\u5ea6\u56fe\u50cf","text":"\u4f7f\u7528 Image.convert() \u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u4ea7\u751f\u9ed1\u767d\u56fe\u50cf\u3002 grayscale.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/python3 from PIL import Image import sys try: tatras = Image.open(\"tatras.jpg\") except IOError: print(\"Unable to load image\") sys.exit(1) grayscale = tatras.convert('L') grayscale.show() \u8be5\u7a0b\u5e8f\u8bfb\u53d6\u56fe\u50cf\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a\u7070\u5ea6\u56fe\u50cf\u3002 1 grayscale = tatras.convert('L') convert() \u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f mode\uff1b \u201c L\u201d\u6a21\u5f0f\u662f\u9ed1\u767d\u7684\u3002","title":"\u7070\u5ea6\u56fe\u50cf"},{"location":"pages/python/pytutorial/python-pillow/#\u7528-Pillow-\u88c1\u526a\u56fe\u50cf","text":"Image.crop() \u88c1\u526a\u56fe\u50cf\u3002 crop_image.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/python3 from PIL import Image import sys try: tatras = Image.open(\"tatras.jpg\") except IOError: print(\"Unable to load image\") sys.exit(1) cropped = tatras.crop((100, 100, 350, 350)) cropped.save('tatras_cropped.jpg') \u8be5\u7a0b\u5e8f\u5c06\u88c1\u526a\u56fe\u50cf\u3002 \u88c1\u526a\u540e\u7684\u56fe\u50cf\u4fdd\u5b58\u5728\u78c1\u76d8\u4e0a\u3002 1 cropped = tatras.crop((100, 100, 350, 350)) crop() \u65b9\u6cd5\u91c7\u7528 4 \u4e2a\u5143\u7ec4\u6765\u5b9a\u4e49\u5de6\uff0c\u4e0a\uff0c\u53f3\u548c\u4e0b\u50cf\u7d20\u5750\u6807\u3002","title":"\u7528 Pillow \u88c1\u526a\u56fe\u50cf"},{"location":"pages/python/pytutorial/python-pillow/#\u7528-Pillow-\u65cb\u8f6c\u56fe\u50cf","text":"Image.rotate() \u8fd4\u56de\u56fe\u50cf\u7684\u65cb\u8f6c\u526f\u672c\u3002 rotate_image.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/python3 from PIL import Image import sys try: tatras = Image.open(\"tatras.jpg\") except IOError: print(\"Unable to load image\") sys.exit(1) rotated = tatras.rotate(180) rotated.save('tatras_rotated.jpg') \u8be5\u7a0b\u5e8f\u5c06\u56fe\u50cf\u65cb\u8f6c 180 \u5ea6\u5e76\u5c06\u65b0\u521b\u5efa\u7684\u56fe\u50cf\u4fdd\u5b58\u5728\u78c1\u76d8\u4e0a\u3002","title":"\u7528 Pillow \u65cb\u8f6c\u56fe\u50cf"},{"location":"pages/python/pytutorial/python-pillow/#\u5728-Tkinter-\u4e2d\u663e\u793a\u56fe\u50cf","text":"\u4ee5\u4e0b\u7a0b\u5e8f\u5728 Tkinter \u7a0b\u5e8f\u4e2d\u663e\u793a\u56fe\u50cf\u3002 show_tkinter.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 #!/usr/bin/python3 # -*- coding: utf-8 -*- from PIL import Image, ImageTk from tkinter import Tk from tkinter.ttk import Frame, Label import sys class Example(Frame): def __init__(self): super().__init__() self.loadImage() self.initUI() def loadImage(self): try: self.img = Image.open(\"tatrs.jpg\") except IOError: print(\"Unable to load image\") sys.exit(1) def initUI(self): self.master.title(\"Label\") tatras = ImageTk.PhotoImage(self.img) label = Label(self, image=tatras) # reference must be stored label.image = tatras label.pack() self.pack() def setGeometry(self): w, h = self.img.size self.master.geometry((\"%dx%d+300+300\") % (w, h)) def main(): root = Tk() ex = Example() ex.setGeometry() root.mainloop() if __name__ == '__main__': main() \u8be5\u7a0b\u5e8f\u5728 Tkinter \u5de5\u5177\u7bb1\u7684 Label \u5c0f\u90e8\u4ef6\u4e2d\u663e\u793a\u56fe\u50cf\u3002 1 from PIL import Image, ImageTk ImageTk \u662f Tkinter \u517c\u5bb9\u7684\u7167\u7247\u56fe\u50cf\u3002 \u5b83\u53ef\u4ee5\u5728 Tkinter \u9700\u8981\u56fe\u50cf\u5bf9\u8c61\u7684\u4efb\u4f55\u5730\u65b9\u4f7f\u7528\u3002 1 tatras = ImageTk.PhotoImage(self.img) \u6211\u4eec\u521b\u5efa\u7167\u7247\u56fe\u50cf\u3002 1 label = Label(self, image=tatras) \u5c06\u7167\u7247\u56fe\u50cf\u63d0\u4f9b\u7ed9\u6807\u7b7e\u7a97\u53e3\u5c0f\u90e8\u4ef6\u7684 image \u53c2\u6570\u3002 1 label.image = tatras \u4e3a\u4e86\u4e0d\u88ab\u5783\u573e\u6536\u96c6\uff0c\u5fc5\u987b\u5b58\u50a8\u56fe\u50cf\u53c2\u8003\u3002 1 2 w, h = self.img.size self.master.geometry((\"%dx%d+300+300\") % (w, h)) \u7a97\u53e3\u7684\u5927\u5c0f\u9002\u5408\u56fe\u50cf\u5927\u5c0f\u3002","title":"\u5728 Tkinter \u4e2d\u663e\u793a\u56fe\u50cf"},{"location":"pages/python/pytutorial/python-pillow/#\u4ece-URL-\u8bfb\u53d6\u56fe\u50cf","text":"\u4e0b\u4e00\u4e2a\u793a\u4f8b\u4ece URL \u8bfb\u53d6\u56fe\u50cf\u3002 read_from_url.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #!/usr/bin/python3 from PIL import Image import requests import sys url = 'https://i.ytimg.com/vi/vEYsdh6uiS4/maxresdefault.jpg' try: resp = requests.get(url, stream=True).raw except requests.exceptions.RequestException as e: sys.exit(1) try: img = Image.open(resp) except IOError: print(\"Unable to open image\") sys.exit(1) img.save('sid.jpg', 'jpeg') \u8be5\u793a\u4f8b\u4ece URL \u8bfb\u53d6\u56fe\u50cf\u5e76\u5c06\u5176\u4fdd\u5b58\u5728\u78c1\u76d8\u4e0a\u3002 1 import requests \u6211\u4eec\u4f7f\u7528 requests \u5e93\u4e0b\u8f7d\u56fe\u50cf\u3002 1 resp = requests.get(url, stream=True).raw \u6211\u4eec\u5c06\u56fe\u50cf\u8bfb\u53d6\u4e3a\u539f\u59cb\u6570\u636e\u3002 1 img = Image.open(resp) Image \u662f\u4ece\u54cd\u5e94\u5bf9\u8c61\u521b\u5efa\u7684\u3002 1 img.save('sid.jpg', 'jpeg') \u56fe\u50cf\u88ab\u4fdd\u5b58\u3002","title":"\u4ece URL \u8bfb\u53d6\u56fe\u50cf"},{"location":"pages/python/pytutorial/python-pillow/#Pillow-\u7ed8\u5236\u56fe\u50cf","text":"Pillow \u5177\u6709\u4e00\u4e9b\u57fa\u672c\u7684 2D \u56fe\u5f62\u529f\u80fd\u3002 ImageDraw \u6a21\u5757\u4e3a Image \u5bf9\u8c61\u63d0\u4f9b\u7b80\u5355\u7684 2D \u56fe\u5f62\u3002 \u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u65b0\u56fe\u50cf\uff0c\u6ce8\u91ca\u6216\u4fee\u9970\u73b0\u6709\u56fe\u50cf\uff0c\u4ee5\u53ca\u5373\u65f6\u751f\u6210\u56fe\u5f62\u4ee5\u4f9b Web \u4f7f\u7528\u3002 draw2image.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/python3 from PIL import Image, ImageDraw img = Image.new('RGBA', (200, 200), 'white') idraw = ImageDraw.Draw(img) idraw.rectangle((10, 10, 100, 100), fill='blue') img.save('rectangle.png') \u8be5\u793a\u4f8b\u521b\u5efa\u4e00\u4e2a\u65b0\u56fe\u50cf\uff0c\u5e76\u5728\u56fe\u50cf\u4e0a\u7ed8\u5236\u4e00\u4e2a\u84dd\u8272\u77e9\u5f62\u3002 1 img = Image.new('RGBA', (200, 200), 'white') \u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Image \u3002 \u56fe\u50cf\u6a21\u5f0f\u4e3a\u201c RGBA\u201d\u3002 \u5c3a\u5bf8\u4e3a 200\u00d7200\uff0c\u80cc\u666f\u4e3a\u767d\u8272\u3002 1 idraw = ImageDraw.Draw(img) \u6839\u636e\u56fe\u50cf\uff0c\u6211\u4eec\u521b\u5efa ImageDraw \u5bf9\u8c61\u3002 \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5728\u56fe\u50cf\u4e0a\u6267\u884c\u4e00\u4e9b\u7ed8\u5236\u64cd\u4f5c\u3002 1 idraw.rectangle((10, 10, 100, 100), fill='blue') \u4f7f\u7528 rectangle() \u65b9\u6cd5\uff0c\u6211\u4eec\u5728\u56fe\u50cf\u4e0a\u7ed8\u5236\u4e86\u4e00\u4e2a\u84dd\u8272\u77e9\u5f62\u3002","title":"Pillow \u7ed8\u5236\u56fe\u50cf"},{"location":"pages/python/pytutorial/python-pillow/#\u7528-Pillow-\u521b\u5efa\u6c34\u5370","text":"\u4ee5\u4e0b\u793a\u4f8b\u521b\u5efa\u4e00\u4e2a\u6c34\u5370\u3002 watermark.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #!/usr/bin/python3 from PIL import Image, ImageDraw, ImageFont import sys try: tatras = Image.open(\"tatras.jpg\") except: print(\"Unable to load image\") sys.exit(1) idraw = ImageDraw.Draw(tatras) text = \"High Tatras\" font = ImageFont.truetype(\"arial.ttf\", size=18) idraw.text((10, 10), text, font=font) tatras.save('tatras_watermarked.png') \u6211\u4eec\u4f7f\u7528 ImageDraw \u6a21\u5757\u521b\u5efa\u6c34\u5370\u3002 1 font = ImageFont.truetype(\"arial.ttf\", size=18) \u6211\u4eec\u521b\u5efa 18 \u5927\u5c0f\u7684 Arial \u5b57\u4f53\u3002 1 idraw.text((10, 10), text, font=font) \u6c34\u5370\u662f\u901a\u8fc7 text() \u65b9\u6cd5\u521b\u5efa\u7684\u3002 \u6587\u672c\u7684\u9ed8\u8ba4\u989c\u8272\u662f\u767d\u8272\u3002 \u6211\u4eec\u4f7f\u7528\u521b\u5efa\u7684\u5b57\u4f53\u3002 \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 Python Pillow \u5e93\u3002","title":"\u7528 Pillow \u521b\u5efa\u6c34\u5370"},{"location":"pages/python/pytutorial/python-pydal/","text":"Python pyDAL \u6559\u7a0b \u00b6 Python pyDAL \u6559\u7a0b \u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528 pyDAL \u6570\u636e\u5e93\u62bd\u8c61\u5c42\u5728 Python \u4e2d\u5bf9\u6570\u636e\u5e93\u8fdb\u884c\u7f16\u7a0b\u3002 \u6211\u4eec\u5728\u4ee3\u7801\u793a\u4f8b\u4e2d\u4f7f\u7528 SQLite\u3002 pyDAL \u00b6 pyDAL \u662f\u7eaf Python \u6570\u636e\u5e93\u62bd\u8c61\u5c42\u3002 pyDAL \u6a21\u5757\u4ee5\u6307\u5b9a\u7684\u65b9\u8a00\u4e3a\u6570\u636e\u5e93\u540e\u7aef\u52a8\u6001\u751f\u6210 SQL\u3002 \u751f\u6210\u7684\u4ee3\u7801\u53ef\u5728\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\u5e93\u4e4b\u95f4\u79fb\u690d\u3002 pyDAL \u5b89\u88c5 \u00b6 1 $ sudo pip3 install pyDAL \u6211\u4eec\u4f7f\u7528 pip3 \u5de5\u5177\u5b89\u88c5 pyDAL\u3002 pyDAL \u521b\u5efa\u6570\u636e\u5e93\u8868 \u00b6 \u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u6570\u636e\u5e93\u8868\u3002 create_table.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #!/usr/bin/env python3 from pydal import DAL, Field db = DAL('sqlite://test.db', folder='dbs') try: db.define_table('cars', Field('name'), Field('price', type='integer')) db.cars.insert(name='Audi', price=52642) db.cars.insert(name='Skoda', price=9000) db.cars.insert(name='Volvo', price=29000) db.cars.insert(name='Bentley', price=350000) db.cars.insert(name='Citroen', price=21000) db.cars.insert(name='Hummer', price=41400) db.cars.insert(name='Volkswagen', price=21600) finally: if db: db.close() \u8be5\u793a\u4f8b\u521b\u5efa\u4e00\u4e2a\u5177\u6709\u4e03\u884c\u7684 cars \u8868\u3002 1 db = DAL('sqlite://test.db', folder='dbs') DAL \u4ee3\u8868\u6570\u636e\u5e93\u8fde\u63a5\u3002 \u5b83\u4ee5\u6570\u636e\u5e93\u8fde\u63a5\u5b57\u7b26\u4e32\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u3002 \u6211\u4eec\u8fde\u63a5\u5230 SQLite \u6570\u636e\u5e93\u3002 1 db.define_table('cars', Field('name'), Field('price', type='integer')) \u6570\u636e\u5e93\u8868\u7531 define_table() \u5b9a\u4e49\u3002 \u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u521b\u5efa\u5b83\u3002 \u5b83\u6709\u4e24\u4e2a\u5b57\u6bb5\uff1a\u540d\u79f0\u548c\u4ef7\u683c\u3002 id \u5b57\u6bb5\u4f1a\u81ea\u52a8\u751f\u6210\u3002 1 db.cars.insert(name='Audi', price=52642) \u6211\u4eec\u4f7f\u7528 insert() \u5c06\u65b0\u884c\u63d2\u5165\u8868\u4e2d\u3002 \u5728 db \u8fde\u63a5\u7684 cars \u8868\u4e0a\u8c03\u7528\u8be5\u65b9\u6cd5\u3002 1 2 $ ls dbs c95cf9bab36fcb04c2424cdf9be0f6e3_cars.table sql.log test.db \u9664\u4e86 test.db \u6570\u636e\u5e93\u4e4b\u5916\uff0c\u6211\u4eec\u8fd8\u6709\u4e00\u4e2a\u6269\u5c55\u540d\u4e3a .table \u7684\u8fc1\u79fb\u6587\u4ef6\u548c\u4e00\u4e2a\u65e5\u5fd7\u6587\u4ef6\u3002 pyDAL \u5220\u9664\u8868 \u00b6 \u4f7f\u7528 drop() \u5220\u9664\u4e86\u6570\u636e\u5e93\u8868\u3002 drop_table.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python3 from pydal import DAL, Field try: db = DAL('sqlite://test.db', folder='dbs') cars = db.define_table('cars', Field('name'), Field('price', 'integer')) cars.drop() finally: if db: db.close() \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 drop() \u65b9\u6cd5\u5220\u9664 cars \u8868\u3002 pyDAL \u9009\u62e9\u884c \u00b6 \u4f7f\u7528 select() \u9009\u62e9\u8868\u884c\u3002 select_all_rows.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/usr/bin/env python3 from pydal import DAL, Field try: db = DAL('sqlite://test.db', folder='dbs') db.define_table('cars', Field('name'), Field('price')) rows = db().select(db.cars.ALL) for row in rows: print(\"{} {} {}\".format(row['id'], row['name'], row['price'])) finally: if db: db.close() \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4ece cars \u8868\u4e2d\u68c0\u7d22\u6240\u6709\u884c\u3002 1 rows = db().select(db.cars.ALL) \u6211\u4eec\u4f7f\u7528 select() \u65b9\u6cd5\u83b7\u53d6\u6240\u6709\u884c\u3002 db.cars.ALL \u6307\u793a\u4ece\u8868\u4e2d\u9009\u62e9\u6240\u6709\u5217\u3002 1 2 for row in rows: print(\"{} {} {}\".format(row['id'], row['name'], row['price'])) \u6211\u4eec\u904d\u5386\u6bcf\u4e00\u884c\u5e76\u6253\u5370\u5176\u5b57\u6bb5\u3002 1 2 3 4 5 6 7 8 $ ./select_all_cars.py 1 Audi 52642 2 Skoda 9000 3 Volvo 29000 4 Bentley 350000 5 Citroen 21000 6 Hummer 41400 7 Volkswagen 21600 \u8fd9\u662f\u8f93\u51fa\u3002 pyDAL \u6392\u5e8f \u00b6 \u4ee5\u4e0b\u793a\u4f8b\u663e\u793a\u5982\u4f55\u4f7f\u7528 pyDAL \u6392\u5e8f\u6570\u636e\u3002 order_by.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #!/usr/bin/env python3 from pydal import DAL, Field try: db = DAL('sqlite://test.db') db.define_table('cars', Field('name'), Field('price', 'integer')) rows = db(db.cars).select(orderby=db.cars.price) for row in rows: print(\"{} {} {}\".format(row['id'], row['name'], row['price'])) print(\"**************************************\") rows = db(db.cars).select(orderby=~db.cars.price) for row in rows: print(\"{} {} {}\".format(row['id'], row['name'], row['price'])) finally: if db: db.close() \u8be5\u793a\u4f8b\u6253\u5370\u8868\u4e2d\u7684\u6240\u6709\u884c\uff0c\u5e76\u6309\u4ef7\u683c\u5347\u5e8f\u548c\u964d\u5e8f\u5bf9\u5176\u8fdb\u884c\u6392\u5e8f\u3002 1 rows = db(db.cars).select(orderby=db.cars.price) \u901a\u8fc7 select() \u65b9\u6cd5\u7684 orderby \u53c2\u6570\u8fdb\u884c\u6392\u5e8f\u3002 1 rows = db(db.cars).select(orderby=~db.cars.price) \u8981\u6309\u964d\u5e8f\u6392\u5e8f\uff0c\u6211\u4eec\u4f7f\u7528 tilda \u5b57\u7b26\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 $ ./order_by.py 5 Citroen 21000 7 Volkswagen 21600 3 Volvo 29000 4 Bentley 350000 6 Hummer 41400 1 Audi 52642 2 Skoda 9000 ************************************** 2 Skoda 9000 1 Audi 52642 6 Hummer 41400 4 Bentley 350000 3 Volvo 29000 7 Volkswagen 21600 5 Citroen 21000 \u8fd9\u662f\u8f93\u51fa\u3002 pyDAL \u9650\u5236\u6570\u636e\u8f93\u51fa \u00b6 \u53ef\u4ee5\u4f7f\u7528 select() \u65b9\u6cd5\u7684 limitby \u53c2\u6570\u9650\u5236\u6570\u636e\u8f93\u51fa\u3002 limit_by.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/usr/bin/env python3 from pydal import DAL, Field try: db = DAL('sqlite://test.db', folder='dbs') db.define_table('cars', Field('name'), Field('price', 'integer')) rows = db(db.cars).select(limitby=(2, 5)) for row in rows: print(\"{} {} {}\".format(row['id'], row['name'], row['price'])) finally: if db: db.close() \u5728\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u8f93\u51fa\u9650\u5236\u4e3a\u504f\u79fb\u91cf\u4e3a 2 \u7684\u4e09\u884c\u3002 1 2 3 4 $ ./limit_by.py 3 Volvo 29000 4 Bentley 350000 5 Citroen 21000 \u8fd9\u662f\u8f93\u51fa\u3002 pyDAL \u8ba1\u6570\u884c \u00b6 \u4f7f\u7528 count() \uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u8868\u4e2d\u7684\u884c\u6570\u3002 count_rows.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env python3 from pydal import DAL, Field try: db = DAL('sqlite://test.db', folder='dbs') db.define_table('cars', Field('name'), Field('price', 'integer')) n = db(db.cars.id).count() print(\"There are {} rows in the table\".format(n)) finally: if db: db.close() \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6253\u5370 cars \u8868\u4e2d\u7684\u884c\u6570\u3002 1 2 $ ./count_rows.py There are 7 rows in the table \u8868\u4e2d\u6709\u4e03\u884c\u3002 pyDAL JSON \u8f93\u51fa \u00b6 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 as_json() \u83b7\u5f97 JSON \u683c\u5f0f\u7684\u6570\u636e\u3002 json_output.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/env python3 from pydal import DAL, Field try: db = DAL('sqlite://test.db', folder='dbs') db.define_table('cars', Field('name'), Field('price', 'integer')) rows = db(db.cars).select() print(rows.as_json()) finally: if db: db.close() \u8be5\u793a\u4f8b\u4ee5 JSON \u683c\u5f0f\u663e\u793a\u6240\u6709\u884c\u3002 1 2 3 4 5 6 7 8 $ ./json_output.py [{\"id\": 1, \"price\": 52642, \"name\": \"Audi\"}, {\"id\": 2, \"price\": 9000, \"name\": \"Skoda\"}, {\"id\": 3, \"price\": 29000, \"name\": \"Volvo\"}, {\"id\": 4, \"price\": 350000, \"name\": \"Bentley\"}, {\"id\": 5, \"price\": 21000, \"name\": \"Citroen\"}, {\"id\": 6, \"price\": 41400, \"name\": \"Hummer\"}, {\"id\": 7, \"price\": 21600, \"name\": \"Volkswagen\"}] \u8fd9\u662f\u8f93\u51fa\u3002 pyDAL \u6700\u540e\u4e00\u4e2a SQL \u00b6 pyDAL \u6700\u540e\u6267\u884c\u7684 SQL \u53ef\u4ee5\u901a\u8fc7 _lastsql() \u627e\u5230\u3002 lastsql.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/usr/bin/env python3 from pydal import DAL, Field try: db = DAL('sqlite://test.db', folder='dbs') db.define_table('cars', Field('name'), Field('price', 'integer')) # we ignore the result db(db.cars.id).select(db.cars.name, db.cars.price) print(db._lastsql) finally: if db: db.close() \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5728\u6267\u884c select \u8bed\u53e5\u65f6\u6253\u5370 pyDAL \u6267\u884c\u7684 SQL\u3002 1 2 $ ./lastsql.py ('SELECT \"cars\".\"name\", \"cars\".\"price\" FROM \"cars\" WHERE (\"cars\".\"id\" IS NOT NULL);', 0.0005686283111572266) \u8be5 SQL \u7531 pyDAL \u751f\u6210\u3002 pyDAL \u6267\u884c\u539f\u59cb SQL \u00b6 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 executesql() \u65b9\u6cd5\u6267\u884c\u539f\u59cb SQL\u3002 raw_sql.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env python3 from pydal import DAL, Field try: db = DAL('sqlite://test.db', folder='dbs') db.define_table('cars', Field('name'), Field('price', 'integer')) data = db.executesql('SELECT * FROM cars WHERE id=6')[0] print(data) finally: if db: db.close() \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 executesql() \u6267\u884c SQL SELECT \u8bed\u53e5\u3002 1 2 $ ./raw_sql.py (6, 'Hummer', '41400') \u8fd9\u662f\u8f93\u51fa\u3002 \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 pyDAL \u5904\u7406 SQLite \u6570\u636e\u5e93\u3002","title":"Python pyDAL \u6559\u7a0b"},{"location":"pages/python/pytutorial/python-pydal/#Python-pyDAL-\u6559\u7a0b","text":"Python pyDAL \u6559\u7a0b \u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528 pyDAL \u6570\u636e\u5e93\u62bd\u8c61\u5c42\u5728 Python \u4e2d\u5bf9\u6570\u636e\u5e93\u8fdb\u884c\u7f16\u7a0b\u3002 \u6211\u4eec\u5728\u4ee3\u7801\u793a\u4f8b\u4e2d\u4f7f\u7528 SQLite\u3002","title":"Python pyDAL \u6559\u7a0b"},{"location":"pages/python/pytutorial/python-pydal/#pyDAL","text":"pyDAL \u662f\u7eaf Python \u6570\u636e\u5e93\u62bd\u8c61\u5c42\u3002 pyDAL \u6a21\u5757\u4ee5\u6307\u5b9a\u7684\u65b9\u8a00\u4e3a\u6570\u636e\u5e93\u540e\u7aef\u52a8\u6001\u751f\u6210 SQL\u3002 \u751f\u6210\u7684\u4ee3\u7801\u53ef\u5728\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\u5e93\u4e4b\u95f4\u79fb\u690d\u3002","title":"pyDAL"},{"location":"pages/python/pytutorial/python-pydal/#pyDAL-\u5b89\u88c5","text":"1 $ sudo pip3 install pyDAL \u6211\u4eec\u4f7f\u7528 pip3 \u5de5\u5177\u5b89\u88c5 pyDAL\u3002","title":"pyDAL \u5b89\u88c5"},{"location":"pages/python/pytutorial/python-pydal/#pyDAL-\u521b\u5efa\u6570\u636e\u5e93\u8868","text":"\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u6570\u636e\u5e93\u8868\u3002 create_table.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #!/usr/bin/env python3 from pydal import DAL, Field db = DAL('sqlite://test.db', folder='dbs') try: db.define_table('cars', Field('name'), Field('price', type='integer')) db.cars.insert(name='Audi', price=52642) db.cars.insert(name='Skoda', price=9000) db.cars.insert(name='Volvo', price=29000) db.cars.insert(name='Bentley', price=350000) db.cars.insert(name='Citroen', price=21000) db.cars.insert(name='Hummer', price=41400) db.cars.insert(name='Volkswagen', price=21600) finally: if db: db.close() \u8be5\u793a\u4f8b\u521b\u5efa\u4e00\u4e2a\u5177\u6709\u4e03\u884c\u7684 cars \u8868\u3002 1 db = DAL('sqlite://test.db', folder='dbs') DAL \u4ee3\u8868\u6570\u636e\u5e93\u8fde\u63a5\u3002 \u5b83\u4ee5\u6570\u636e\u5e93\u8fde\u63a5\u5b57\u7b26\u4e32\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u3002 \u6211\u4eec\u8fde\u63a5\u5230 SQLite \u6570\u636e\u5e93\u3002 1 db.define_table('cars', Field('name'), Field('price', type='integer')) \u6570\u636e\u5e93\u8868\u7531 define_table() \u5b9a\u4e49\u3002 \u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u521b\u5efa\u5b83\u3002 \u5b83\u6709\u4e24\u4e2a\u5b57\u6bb5\uff1a\u540d\u79f0\u548c\u4ef7\u683c\u3002 id \u5b57\u6bb5\u4f1a\u81ea\u52a8\u751f\u6210\u3002 1 db.cars.insert(name='Audi', price=52642) \u6211\u4eec\u4f7f\u7528 insert() \u5c06\u65b0\u884c\u63d2\u5165\u8868\u4e2d\u3002 \u5728 db \u8fde\u63a5\u7684 cars \u8868\u4e0a\u8c03\u7528\u8be5\u65b9\u6cd5\u3002 1 2 $ ls dbs c95cf9bab36fcb04c2424cdf9be0f6e3_cars.table sql.log test.db \u9664\u4e86 test.db \u6570\u636e\u5e93\u4e4b\u5916\uff0c\u6211\u4eec\u8fd8\u6709\u4e00\u4e2a\u6269\u5c55\u540d\u4e3a .table \u7684\u8fc1\u79fb\u6587\u4ef6\u548c\u4e00\u4e2a\u65e5\u5fd7\u6587\u4ef6\u3002","title":"pyDAL \u521b\u5efa\u6570\u636e\u5e93\u8868"},{"location":"pages/python/pytutorial/python-pydal/#pyDAL-\u5220\u9664\u8868","text":"\u4f7f\u7528 drop() \u5220\u9664\u4e86\u6570\u636e\u5e93\u8868\u3002 drop_table.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python3 from pydal import DAL, Field try: db = DAL('sqlite://test.db', folder='dbs') cars = db.define_table('cars', Field('name'), Field('price', 'integer')) cars.drop() finally: if db: db.close() \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 drop() \u65b9\u6cd5\u5220\u9664 cars \u8868\u3002","title":"pyDAL \u5220\u9664\u8868"},{"location":"pages/python/pytutorial/python-pydal/#pyDAL-\u9009\u62e9\u884c","text":"\u4f7f\u7528 select() \u9009\u62e9\u8868\u884c\u3002 select_all_rows.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/usr/bin/env python3 from pydal import DAL, Field try: db = DAL('sqlite://test.db', folder='dbs') db.define_table('cars', Field('name'), Field('price')) rows = db().select(db.cars.ALL) for row in rows: print(\"{} {} {}\".format(row['id'], row['name'], row['price'])) finally: if db: db.close() \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4ece cars \u8868\u4e2d\u68c0\u7d22\u6240\u6709\u884c\u3002 1 rows = db().select(db.cars.ALL) \u6211\u4eec\u4f7f\u7528 select() \u65b9\u6cd5\u83b7\u53d6\u6240\u6709\u884c\u3002 db.cars.ALL \u6307\u793a\u4ece\u8868\u4e2d\u9009\u62e9\u6240\u6709\u5217\u3002 1 2 for row in rows: print(\"{} {} {}\".format(row['id'], row['name'], row['price'])) \u6211\u4eec\u904d\u5386\u6bcf\u4e00\u884c\u5e76\u6253\u5370\u5176\u5b57\u6bb5\u3002 1 2 3 4 5 6 7 8 $ ./select_all_cars.py 1 Audi 52642 2 Skoda 9000 3 Volvo 29000 4 Bentley 350000 5 Citroen 21000 6 Hummer 41400 7 Volkswagen 21600 \u8fd9\u662f\u8f93\u51fa\u3002","title":"pyDAL \u9009\u62e9\u884c"},{"location":"pages/python/pytutorial/python-pydal/#pyDAL-\u6392\u5e8f","text":"\u4ee5\u4e0b\u793a\u4f8b\u663e\u793a\u5982\u4f55\u4f7f\u7528 pyDAL \u6392\u5e8f\u6570\u636e\u3002 order_by.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #!/usr/bin/env python3 from pydal import DAL, Field try: db = DAL('sqlite://test.db') db.define_table('cars', Field('name'), Field('price', 'integer')) rows = db(db.cars).select(orderby=db.cars.price) for row in rows: print(\"{} {} {}\".format(row['id'], row['name'], row['price'])) print(\"**************************************\") rows = db(db.cars).select(orderby=~db.cars.price) for row in rows: print(\"{} {} {}\".format(row['id'], row['name'], row['price'])) finally: if db: db.close() \u8be5\u793a\u4f8b\u6253\u5370\u8868\u4e2d\u7684\u6240\u6709\u884c\uff0c\u5e76\u6309\u4ef7\u683c\u5347\u5e8f\u548c\u964d\u5e8f\u5bf9\u5176\u8fdb\u884c\u6392\u5e8f\u3002 1 rows = db(db.cars).select(orderby=db.cars.price) \u901a\u8fc7 select() \u65b9\u6cd5\u7684 orderby \u53c2\u6570\u8fdb\u884c\u6392\u5e8f\u3002 1 rows = db(db.cars).select(orderby=~db.cars.price) \u8981\u6309\u964d\u5e8f\u6392\u5e8f\uff0c\u6211\u4eec\u4f7f\u7528 tilda \u5b57\u7b26\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 $ ./order_by.py 5 Citroen 21000 7 Volkswagen 21600 3 Volvo 29000 4 Bentley 350000 6 Hummer 41400 1 Audi 52642 2 Skoda 9000 ************************************** 2 Skoda 9000 1 Audi 52642 6 Hummer 41400 4 Bentley 350000 3 Volvo 29000 7 Volkswagen 21600 5 Citroen 21000 \u8fd9\u662f\u8f93\u51fa\u3002","title":"pyDAL \u6392\u5e8f"},{"location":"pages/python/pytutorial/python-pydal/#pyDAL-\u9650\u5236\u6570\u636e\u8f93\u51fa","text":"\u53ef\u4ee5\u4f7f\u7528 select() \u65b9\u6cd5\u7684 limitby \u53c2\u6570\u9650\u5236\u6570\u636e\u8f93\u51fa\u3002 limit_by.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/usr/bin/env python3 from pydal import DAL, Field try: db = DAL('sqlite://test.db', folder='dbs') db.define_table('cars', Field('name'), Field('price', 'integer')) rows = db(db.cars).select(limitby=(2, 5)) for row in rows: print(\"{} {} {}\".format(row['id'], row['name'], row['price'])) finally: if db: db.close() \u5728\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u8f93\u51fa\u9650\u5236\u4e3a\u504f\u79fb\u91cf\u4e3a 2 \u7684\u4e09\u884c\u3002 1 2 3 4 $ ./limit_by.py 3 Volvo 29000 4 Bentley 350000 5 Citroen 21000 \u8fd9\u662f\u8f93\u51fa\u3002","title":"pyDAL \u9650\u5236\u6570\u636e\u8f93\u51fa"},{"location":"pages/python/pytutorial/python-pydal/#pyDAL-\u8ba1\u6570\u884c","text":"\u4f7f\u7528 count() \uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u8868\u4e2d\u7684\u884c\u6570\u3002 count_rows.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env python3 from pydal import DAL, Field try: db = DAL('sqlite://test.db', folder='dbs') db.define_table('cars', Field('name'), Field('price', 'integer')) n = db(db.cars.id).count() print(\"There are {} rows in the table\".format(n)) finally: if db: db.close() \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6253\u5370 cars \u8868\u4e2d\u7684\u884c\u6570\u3002 1 2 $ ./count_rows.py There are 7 rows in the table \u8868\u4e2d\u6709\u4e03\u884c\u3002","title":"pyDAL \u8ba1\u6570\u884c"},{"location":"pages/python/pytutorial/python-pydal/#pyDAL-JSON-\u8f93\u51fa","text":"\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 as_json() \u83b7\u5f97 JSON \u683c\u5f0f\u7684\u6570\u636e\u3002 json_output.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/env python3 from pydal import DAL, Field try: db = DAL('sqlite://test.db', folder='dbs') db.define_table('cars', Field('name'), Field('price', 'integer')) rows = db(db.cars).select() print(rows.as_json()) finally: if db: db.close() \u8be5\u793a\u4f8b\u4ee5 JSON \u683c\u5f0f\u663e\u793a\u6240\u6709\u884c\u3002 1 2 3 4 5 6 7 8 $ ./json_output.py [{\"id\": 1, \"price\": 52642, \"name\": \"Audi\"}, {\"id\": 2, \"price\": 9000, \"name\": \"Skoda\"}, {\"id\": 3, \"price\": 29000, \"name\": \"Volvo\"}, {\"id\": 4, \"price\": 350000, \"name\": \"Bentley\"}, {\"id\": 5, \"price\": 21000, \"name\": \"Citroen\"}, {\"id\": 6, \"price\": 41400, \"name\": \"Hummer\"}, {\"id\": 7, \"price\": 21600, \"name\": \"Volkswagen\"}] \u8fd9\u662f\u8f93\u51fa\u3002","title":"pyDAL JSON \u8f93\u51fa"},{"location":"pages/python/pytutorial/python-pydal/#pyDAL-\u6700\u540e\u4e00\u4e2a-SQL","text":"pyDAL \u6700\u540e\u6267\u884c\u7684 SQL \u53ef\u4ee5\u901a\u8fc7 _lastsql() \u627e\u5230\u3002 lastsql.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/usr/bin/env python3 from pydal import DAL, Field try: db = DAL('sqlite://test.db', folder='dbs') db.define_table('cars', Field('name'), Field('price', 'integer')) # we ignore the result db(db.cars.id).select(db.cars.name, db.cars.price) print(db._lastsql) finally: if db: db.close() \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5728\u6267\u884c select \u8bed\u53e5\u65f6\u6253\u5370 pyDAL \u6267\u884c\u7684 SQL\u3002 1 2 $ ./lastsql.py ('SELECT \"cars\".\"name\", \"cars\".\"price\" FROM \"cars\" WHERE (\"cars\".\"id\" IS NOT NULL);', 0.0005686283111572266) \u8be5 SQL \u7531 pyDAL \u751f\u6210\u3002","title":"pyDAL \u6700\u540e\u4e00\u4e2a SQL"},{"location":"pages/python/pytutorial/python-pydal/#pyDAL-\u6267\u884c\u539f\u59cb-SQL","text":"\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 executesql() \u65b9\u6cd5\u6267\u884c\u539f\u59cb SQL\u3002 raw_sql.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env python3 from pydal import DAL, Field try: db = DAL('sqlite://test.db', folder='dbs') db.define_table('cars', Field('name'), Field('price', 'integer')) data = db.executesql('SELECT * FROM cars WHERE id=6')[0] print(data) finally: if db: db.close() \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 executesql() \u6267\u884c SQL SELECT \u8bed\u53e5\u3002 1 2 $ ./raw_sql.py (6, 'Hummer', '41400') \u8fd9\u662f\u8f93\u51fa\u3002 \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 pyDAL \u5904\u7406 SQLite \u6570\u636e\u5e93\u3002","title":"pyDAL \u6267\u884c\u539f\u59cb SQL"},{"location":"pages/python/pytutorial/python-pymysql/","text":"Python PyMySQL \u6559\u7a0b \u00b6 PyMySQL \u6559\u7a0b \u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528 PyMySQL \u6a21\u5757\u5728 Python \u4e2d\u5bf9 MySQL \u8fdb\u884c\u7f16\u7a0b\u3002 PyMySQL \u00b6 PyMySQL \u662f\u57fa\u4e8e PEP 249 \u7684\u7eaf Python MySQL \u5ba2\u6237\u7aef\u5e93\u3002\u5927\u591a\u6570\u516c\u5171 API \u4e0e mysqlclient \u548c MySQLdb \u517c\u5bb9\u3002 PyMySQL \u53ef\u4e0e MySQL 5.5+\u548c MariaDB 5.5+\u4e00\u8d77\u4f7f\u7528\u3002 MySQL \u662f\u9886\u5148\u7684\u5f00\u6e90\u6570\u636e\u5e93\u7ba1\u7406\u7cfb\u7edf\u3002 \u5b83\u662f\u4e00\u4e2a\u591a\u7528\u6237\uff0c\u591a\u7ebf\u7a0b\u7684\u6570\u636e\u5e93\u7ba1\u7406\u7cfb\u7edf\u3002 MySQL \u5728\u7f51\u7edc\u4e0a\u7279\u522b\u6d41\u884c\u3002 PyMySQL \u5b89\u88c5 \u00b6 1 $ sudo pip3 install PyMySQL \u6211\u4eec\u4f7f\u7528 pip3 \u5de5\u5177\u5b89\u88c5 PyMySQL\u3002 PyMySQL \u7248\u672c\u793a\u4f8b \u00b6 \u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u83b7\u53d6 MySQL \u7684\u7248\u672c\u3002 version.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/python3 # -*- coding: utf-8 -*- import pymysql con = pymysql.connect('localhost', 'user17', 's$cret', 'mydb') with con: cur = con.cursor() cur.execute(\"SELECT VERSION()\") version = cur.fetchone() print(\"Database version: {}\".format(version[0])) \u5728 MySQL \u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 SELECT VERSION() \u83b7\u53d6 MySQL \u7684\u7248\u672c\u3002 1 import pymysql \u6211\u4eec\u5bfc\u5165 pymysql \u6a21\u5757\u3002 1 2 con = pymysql.connect('localhost', 'user17', 's$cret', 'mydb') \u6211\u4eec\u4f7f\u7528 connect() \u8fde\u63a5\u5230\u6570\u636e\u5e93\u3002 \u6211\u4eec\u4f20\u9012\u56db\u4e2a\u53c2\u6570\uff1a\u4e3b\u673a\u540d\uff0cMySQL \u7528\u6237\u540d\uff0c\u5bc6\u7801\u548c\u6570\u636e\u5e93\u540d\u3002 1 with con: \u4f7f\u7528 with \u5173\u952e\u5b57\uff0cPython \u89e3\u91ca\u5668\u4f1a\u81ea\u52a8\u91ca\u653e\u8d44\u6e90\u3002 \u5b83\u8fd8\u63d0\u4f9b\u9519\u8bef\u5904\u7406\u3002 1 cur = con.cursor() \u4ece\u8fde\u63a5\u5bf9\u8c61\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u6e38\u6807\u3002 \u6e38\u6807\u7528\u4e8e\u904d\u5386\u7ed3\u679c\u96c6\u4e2d\u7684\u8bb0\u5f55\u3002 1 cur.execute(\"SELECT VERSION()\") \u6211\u4eec\u8c03\u7528\u6e38\u6807\u7684 execute() \u65b9\u6cd5\u5e76\u6267\u884c SQL \u8bed\u53e5\u3002 1 version = cur.fetchone() fetchone() \u65b9\u6cd5\u83b7\u53d6\u67e5\u8be2\u7ed3\u679c\u96c6\u7684\u4e0b\u4e00\u884c\uff0c\u8fd4\u56de\u5355\u4e2a\u5e8f\u5217\uff0c\u6216\u8005\u5728\u6ca1\u6709\u66f4\u591a\u6570\u636e\u53ef\u7528\u65f6\u8fd4\u56de None \u3002 1 print(\"Database version: {}\".format(version[0])) \u6211\u4eec\u6253\u5370\u6570\u636e\u5e93\u7684\u7248\u672c\u3002 1 2 $ ./version.py Database version: 5.7.23-0ubuntu0.16.04.1 \u8fd9\u662f\u8f93\u51fa\u3002 PyMySQL fetchAll \u00b6 fetchAll() \u65b9\u6cd5\u68c0\u7d22\u67e5\u8be2\u7ed3\u679c\u7684\u6240\u6709\uff08\u5269\u4f59\uff09\u884c\uff0c\u5e76\u5c06\u5b83\u4eec\u4f5c\u4e3a\u5e8f\u5217\u5e8f\u5217\u8fd4\u56de\u3002 retrieve_all.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/python3 # -*- coding: utf-8 -*- import pymysql con = pymysql.connect('localhost', 'user17', 's$cret', 'testdb') with con: cur = con.cursor() cur.execute(\"SELECT * FROM cities\") rows = cur.fetchall() for row in rows: print(\"{0} {1} {2}\".format(row[0], row[1], row[2])) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4ece\u6570\u636e\u5e93\u8868\u4e2d\u68c0\u7d22\u6240\u6709\u57ce\u5e02\u3002 1 cur.execute(\"SELECT * FROM cities\") \u8be5 SQL \u8bed\u53e5\u4ece citys \u8868\u4e2d\u9009\u62e9\u6240\u6709\u6570\u636e\u3002 1 rows = cur.fetchall() fetchall() \u65b9\u6cd5\u83b7\u53d6\u6240\u6709\u8bb0\u5f55\u3002 \u5b83\u8fd4\u56de\u4e00\u4e2a\u7ed3\u679c\u96c6\u3002 \u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u5b83\u662f\u4e00\u4e2a\u5143\u7ec4\u7684\u5143\u7ec4\u3002 \u6bcf\u4e2a\u5185\u90e8\u5143\u7ec4\u4ee3\u8868\u8868\u4e2d\u7684\u4e00\u884c\u3002 1 2 for row in rows: print(\"{0} {1} {2}\".format(row[0], row[1], row[2])) \u6211\u4eec\u5c06\u6570\u636e\u9010\u884c\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 2 3 4 5 6 7 8 9 $ ./retrieve_all.py 1 Bratislava 432000 2 Budapest 1759000 3 Prague 1280000 4 Warsaw 1748000 5 Los Angeles 3971000 6 New York 8550000 7 Edinburgh 464000 8 Berlin 3671000 \u8fd9\u662f\u8f93\u51fa\u3002 PyMySQL \u5b57\u5178\u6e38\u6807 \u00b6 \u9ed8\u8ba4\u6e38\u6807\u4ee5\u5143\u7ec4\u7684\u5143\u7ec4\u8fd4\u56de\u6570\u636e\u3002 \u5f53\u6211\u4eec\u4f7f\u7528\u5b57\u5178\u6e38\u6807\u65f6\uff0c\u6570\u636e\u4ee5 Python \u5b57\u5178\u7684\u5f62\u5f0f\u53d1\u9001\u3002 \u8fd9\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5217\u540d\u79f0\u6765\u5f15\u7528\u6570\u636e\u3002 dictionary_cursor.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #!/usr/bin/python3 # -*- coding: utf-8 -*- import pymysql import pymysql.cursors con = pymysql.connect(host='localhost', user='user17', password='s$cret', db='mydb', charset='utf8mb4', cursorclass=pymysql.cursors.DictCursor) with con: cur = con.cursor() cur.execute(\"SELECT * FROM cities\") rows = cur.fetchall() for row in rows: print(row[\"id\"], row[\"name\"]) \u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u5b57\u5178\u6e38\u6807\u83b7\u53d6 citys \u8868\u7684\u7b2c\u4e00\u884c\u3002 1 2 3 4 5 6 con = pymysql.connect(host='localhost', user='user17', password='s$cret', db='mydb', charset='utf8mb4', cursorclass=pymysql.cursors.DictCursor) \u5728 connect() \u65b9\u6cd5\u4e2d\uff0c\u6211\u4eec\u5c06 pymysql.cursors.DictCursor \u503c\u4f20\u9012\u7ed9 cursorclass \u53c2\u6570\u3002 1 2 for row in rows: print(row[\"id\"], row[\"name\"]) \u6211\u4eec\u901a\u8fc7\u201c\u57ce\u5e02\u201d\u8868\u7684\u5217\u540d\u79f0\u5f15\u7528\u6570\u636e\u3002 PyMySQL \u5217\u6807\u9898 \u00b6 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u5c55\u793a\u5982\u4f55\u4f7f\u7528\u6570\u636e\u5e93\u8868\u4e2d\u7684\u6570\u636e\u6253\u5370\u5217\u6807\u9898\u3002 column_headers.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #!/usr/bin/python3 # -*- coding: utf-8 -*- import pymysql con = pymysql.connect('localhost', 'user17', 's$cret', 'testdb') with con: cur = con.cursor() cur.execute(\"SELECT * FROM cities\") rows = cur.fetchall() desc = cur.description print(\"{0:>3} {1:>10}\".format(desc[0][0], desc[1][0])) for row in rows: print(\"{0:3} {1:>10}\".format(row[0], row[2])) \u5217\u540d\u79f0\u88ab\u8ba4\u4e3a\u662f\u5143\u6570\u636e\u3002 \u5b83\u4eec\u662f\u4ece\u6e38\u6807\u5bf9\u8c61\u83b7\u5f97\u7684\u3002 1 desc = cur.description \u6e38\u6807\u7684 description \u5c5e\u6027\u8fd4\u56de\u6709\u5173\u67e5\u8be2\u7684\u6bcf\u4e2a\u7ed3\u679c\u5217\u7684\u4fe1\u606f\u3002 1 print(\"{0:>3} {1:>10}\".format(desc[0][0], desc[1][0])) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u6253\u5370\u5e76\u683c\u5f0f\u5316\u8868\u683c\u7684\u5217\u540d\u3002 1 2 for row in rows: print(\"{0:3} {1:>10}\".format(row[0], row[2])) \u6211\u4eec\u904d\u5386\u5e76\u6253\u5370\u6570\u636e\u3002 1 2 3 4 5 6 7 8 9 10 $ ./column_headers.py id name 1 432000 2 1759000 3 1280000 4 1748000 5 3971000 6 8550000 7 464000 8 3671000 \u8fd9\u662f\u8f93\u51fa\u3002 PyMySQL \u9884\u5907\u8bed\u53e5 \u00b6 \u5728\u7f16\u5199\u9884\u5907\u8bed\u53e5\u65f6\uff0c\u6211\u4eec\u4f7f\u7528\u5360\u4f4d\u7b26\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u5c06\u503c\u5199\u5165\u8bed\u53e5\u4e2d\u3002 \u9884\u51c6\u5907\u7684\u8bed\u53e5\u53ef\u63d0\u9ad8\u5b89\u5168\u6027\u548c\u6027\u80fd\u3002 prepared_statement.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/usr/bin/python3 # -*- coding: utf-8 -*- import pymysql con = pymysql.connect('localhost', 'user17', 's$cret', 'testdb') # user input myid = 4 with con: cur = con.cursor() cur.execute(\"SELECT * FROM cities WHERE id=%s\", myid) cid, name, population = cur.fetchone() print(cid, name, population) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u83b7\u5f97\u5177\u6709\u6307\u5b9a ID \u7684\u884c\u3002 1 cur.execute(\"SELECT * FROM cities WHERE id=%s\", myid) \u6211\u4eec\u4f7f\u7528\u7531 %s \u6807\u8bb0\u6807\u8bc6\u7684\u5360\u4f4d\u7b26\u3002 \u5728\u6267\u884c SQL \u8bed\u53e5\u4e4b\u524d\uff0c\u5c06\u503c\u7ed1\u5b9a\u5230\u5b83\u4eec\u7684\u5360\u4f4d\u7b26\u3002 1 2 $ ./prepared_statement.py 4 Warsaw 1748000 \u8fd9\u662f\u8f93\u51fa\u3002 PyMySQL \u53d7\u5f71\u54cd\u7684\u884c \u00b6 rowcount \u662f\u53ea\u8bfb\u7684\u6e38\u6807\u5c5e\u6027\uff0c\u5b83\u6307\u5b9a\u6700\u540e\u4e00\u6761 SELECT\uff0cUPDATE \u6216 INSERT \u8bed\u53e5\u4ea7\u751f\u7684\u884c\u6570\u3002 affected_rows.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/usr/bin/python3 # -*- coding: utf-8 -*- import pymysql con = pymysql.connect('localhost', 'user17', 's$cret', 'mydb') with con: cur = con.cursor() cur.execute(\"SELECT * FROM cities WHERE id IN (1, 2, 3)\") # rows = cur.fetchall() # for row in rows: # print(\"{0} {1} {2}\".format(row[0], row[1], row[2])) print(\"The query affected {} rows\".format(cur.rowcount)) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u6761 SELECT \u8bed\u53e5\u9009\u62e9\u4e09\u884c\u3002 1 print(\"The query affected {} rows\".format(cur.rowcount)) \u6211\u4eec\u751f\u6210\u4e00\u6761\u6d88\u606f\uff0c\u663e\u793a\u53d7\u5f71\u54cd\u7684\u884c\u6570\u3002 1 2 $ ./affected_rows.py The query affected 3 rows \u8fd9\u662f\u8f93\u51fa\u3002","title":"Python PyMySQL \u6559\u7a0b"},{"location":"pages/python/pytutorial/python-pymysql/#Python-PyMySQL-\u6559\u7a0b","text":"PyMySQL \u6559\u7a0b \u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528 PyMySQL \u6a21\u5757\u5728 Python \u4e2d\u5bf9 MySQL \u8fdb\u884c\u7f16\u7a0b\u3002","title":"Python PyMySQL \u6559\u7a0b"},{"location":"pages/python/pytutorial/python-pymysql/#PyMySQL","text":"PyMySQL \u662f\u57fa\u4e8e PEP 249 \u7684\u7eaf Python MySQL \u5ba2\u6237\u7aef\u5e93\u3002\u5927\u591a\u6570\u516c\u5171 API \u4e0e mysqlclient \u548c MySQLdb \u517c\u5bb9\u3002 PyMySQL \u53ef\u4e0e MySQL 5.5+\u548c MariaDB 5.5+\u4e00\u8d77\u4f7f\u7528\u3002 MySQL \u662f\u9886\u5148\u7684\u5f00\u6e90\u6570\u636e\u5e93\u7ba1\u7406\u7cfb\u7edf\u3002 \u5b83\u662f\u4e00\u4e2a\u591a\u7528\u6237\uff0c\u591a\u7ebf\u7a0b\u7684\u6570\u636e\u5e93\u7ba1\u7406\u7cfb\u7edf\u3002 MySQL \u5728\u7f51\u7edc\u4e0a\u7279\u522b\u6d41\u884c\u3002","title":"PyMySQL"},{"location":"pages/python/pytutorial/python-pymysql/#PyMySQL-\u5b89\u88c5","text":"1 $ sudo pip3 install PyMySQL \u6211\u4eec\u4f7f\u7528 pip3 \u5de5\u5177\u5b89\u88c5 PyMySQL\u3002","title":"PyMySQL \u5b89\u88c5"},{"location":"pages/python/pytutorial/python-pymysql/#PyMySQL-\u7248\u672c\u793a\u4f8b","text":"\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u83b7\u53d6 MySQL \u7684\u7248\u672c\u3002 version.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/python3 # -*- coding: utf-8 -*- import pymysql con = pymysql.connect('localhost', 'user17', 's$cret', 'mydb') with con: cur = con.cursor() cur.execute(\"SELECT VERSION()\") version = cur.fetchone() print(\"Database version: {}\".format(version[0])) \u5728 MySQL \u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 SELECT VERSION() \u83b7\u53d6 MySQL \u7684\u7248\u672c\u3002 1 import pymysql \u6211\u4eec\u5bfc\u5165 pymysql \u6a21\u5757\u3002 1 2 con = pymysql.connect('localhost', 'user17', 's$cret', 'mydb') \u6211\u4eec\u4f7f\u7528 connect() \u8fde\u63a5\u5230\u6570\u636e\u5e93\u3002 \u6211\u4eec\u4f20\u9012\u56db\u4e2a\u53c2\u6570\uff1a\u4e3b\u673a\u540d\uff0cMySQL \u7528\u6237\u540d\uff0c\u5bc6\u7801\u548c\u6570\u636e\u5e93\u540d\u3002 1 with con: \u4f7f\u7528 with \u5173\u952e\u5b57\uff0cPython \u89e3\u91ca\u5668\u4f1a\u81ea\u52a8\u91ca\u653e\u8d44\u6e90\u3002 \u5b83\u8fd8\u63d0\u4f9b\u9519\u8bef\u5904\u7406\u3002 1 cur = con.cursor() \u4ece\u8fde\u63a5\u5bf9\u8c61\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u6e38\u6807\u3002 \u6e38\u6807\u7528\u4e8e\u904d\u5386\u7ed3\u679c\u96c6\u4e2d\u7684\u8bb0\u5f55\u3002 1 cur.execute(\"SELECT VERSION()\") \u6211\u4eec\u8c03\u7528\u6e38\u6807\u7684 execute() \u65b9\u6cd5\u5e76\u6267\u884c SQL \u8bed\u53e5\u3002 1 version = cur.fetchone() fetchone() \u65b9\u6cd5\u83b7\u53d6\u67e5\u8be2\u7ed3\u679c\u96c6\u7684\u4e0b\u4e00\u884c\uff0c\u8fd4\u56de\u5355\u4e2a\u5e8f\u5217\uff0c\u6216\u8005\u5728\u6ca1\u6709\u66f4\u591a\u6570\u636e\u53ef\u7528\u65f6\u8fd4\u56de None \u3002 1 print(\"Database version: {}\".format(version[0])) \u6211\u4eec\u6253\u5370\u6570\u636e\u5e93\u7684\u7248\u672c\u3002 1 2 $ ./version.py Database version: 5.7.23-0ubuntu0.16.04.1 \u8fd9\u662f\u8f93\u51fa\u3002","title":"PyMySQL \u7248\u672c\u793a\u4f8b"},{"location":"pages/python/pytutorial/python-pymysql/#PyMySQL-fetchAll","text":"fetchAll() \u65b9\u6cd5\u68c0\u7d22\u67e5\u8be2\u7ed3\u679c\u7684\u6240\u6709\uff08\u5269\u4f59\uff09\u884c\uff0c\u5e76\u5c06\u5b83\u4eec\u4f5c\u4e3a\u5e8f\u5217\u5e8f\u5217\u8fd4\u56de\u3002 retrieve_all.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/python3 # -*- coding: utf-8 -*- import pymysql con = pymysql.connect('localhost', 'user17', 's$cret', 'testdb') with con: cur = con.cursor() cur.execute(\"SELECT * FROM cities\") rows = cur.fetchall() for row in rows: print(\"{0} {1} {2}\".format(row[0], row[1], row[2])) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4ece\u6570\u636e\u5e93\u8868\u4e2d\u68c0\u7d22\u6240\u6709\u57ce\u5e02\u3002 1 cur.execute(\"SELECT * FROM cities\") \u8be5 SQL \u8bed\u53e5\u4ece citys \u8868\u4e2d\u9009\u62e9\u6240\u6709\u6570\u636e\u3002 1 rows = cur.fetchall() fetchall() \u65b9\u6cd5\u83b7\u53d6\u6240\u6709\u8bb0\u5f55\u3002 \u5b83\u8fd4\u56de\u4e00\u4e2a\u7ed3\u679c\u96c6\u3002 \u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u5b83\u662f\u4e00\u4e2a\u5143\u7ec4\u7684\u5143\u7ec4\u3002 \u6bcf\u4e2a\u5185\u90e8\u5143\u7ec4\u4ee3\u8868\u8868\u4e2d\u7684\u4e00\u884c\u3002 1 2 for row in rows: print(\"{0} {1} {2}\".format(row[0], row[1], row[2])) \u6211\u4eec\u5c06\u6570\u636e\u9010\u884c\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 2 3 4 5 6 7 8 9 $ ./retrieve_all.py 1 Bratislava 432000 2 Budapest 1759000 3 Prague 1280000 4 Warsaw 1748000 5 Los Angeles 3971000 6 New York 8550000 7 Edinburgh 464000 8 Berlin 3671000 \u8fd9\u662f\u8f93\u51fa\u3002","title":"PyMySQL fetchAll"},{"location":"pages/python/pytutorial/python-pymysql/#PyMySQL-\u5b57\u5178\u6e38\u6807","text":"\u9ed8\u8ba4\u6e38\u6807\u4ee5\u5143\u7ec4\u7684\u5143\u7ec4\u8fd4\u56de\u6570\u636e\u3002 \u5f53\u6211\u4eec\u4f7f\u7528\u5b57\u5178\u6e38\u6807\u65f6\uff0c\u6570\u636e\u4ee5 Python \u5b57\u5178\u7684\u5f62\u5f0f\u53d1\u9001\u3002 \u8fd9\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5217\u540d\u79f0\u6765\u5f15\u7528\u6570\u636e\u3002 dictionary_cursor.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #!/usr/bin/python3 # -*- coding: utf-8 -*- import pymysql import pymysql.cursors con = pymysql.connect(host='localhost', user='user17', password='s$cret', db='mydb', charset='utf8mb4', cursorclass=pymysql.cursors.DictCursor) with con: cur = con.cursor() cur.execute(\"SELECT * FROM cities\") rows = cur.fetchall() for row in rows: print(row[\"id\"], row[\"name\"]) \u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u5b57\u5178\u6e38\u6807\u83b7\u53d6 citys \u8868\u7684\u7b2c\u4e00\u884c\u3002 1 2 3 4 5 6 con = pymysql.connect(host='localhost', user='user17', password='s$cret', db='mydb', charset='utf8mb4', cursorclass=pymysql.cursors.DictCursor) \u5728 connect() \u65b9\u6cd5\u4e2d\uff0c\u6211\u4eec\u5c06 pymysql.cursors.DictCursor \u503c\u4f20\u9012\u7ed9 cursorclass \u53c2\u6570\u3002 1 2 for row in rows: print(row[\"id\"], row[\"name\"]) \u6211\u4eec\u901a\u8fc7\u201c\u57ce\u5e02\u201d\u8868\u7684\u5217\u540d\u79f0\u5f15\u7528\u6570\u636e\u3002","title":"PyMySQL \u5b57\u5178\u6e38\u6807"},{"location":"pages/python/pytutorial/python-pymysql/#PyMySQL-\u5217\u6807\u9898","text":"\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u5c55\u793a\u5982\u4f55\u4f7f\u7528\u6570\u636e\u5e93\u8868\u4e2d\u7684\u6570\u636e\u6253\u5370\u5217\u6807\u9898\u3002 column_headers.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #!/usr/bin/python3 # -*- coding: utf-8 -*- import pymysql con = pymysql.connect('localhost', 'user17', 's$cret', 'testdb') with con: cur = con.cursor() cur.execute(\"SELECT * FROM cities\") rows = cur.fetchall() desc = cur.description print(\"{0:>3} {1:>10}\".format(desc[0][0], desc[1][0])) for row in rows: print(\"{0:3} {1:>10}\".format(row[0], row[2])) \u5217\u540d\u79f0\u88ab\u8ba4\u4e3a\u662f\u5143\u6570\u636e\u3002 \u5b83\u4eec\u662f\u4ece\u6e38\u6807\u5bf9\u8c61\u83b7\u5f97\u7684\u3002 1 desc = cur.description \u6e38\u6807\u7684 description \u5c5e\u6027\u8fd4\u56de\u6709\u5173\u67e5\u8be2\u7684\u6bcf\u4e2a\u7ed3\u679c\u5217\u7684\u4fe1\u606f\u3002 1 print(\"{0:>3} {1:>10}\".format(desc[0][0], desc[1][0])) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u6253\u5370\u5e76\u683c\u5f0f\u5316\u8868\u683c\u7684\u5217\u540d\u3002 1 2 for row in rows: print(\"{0:3} {1:>10}\".format(row[0], row[2])) \u6211\u4eec\u904d\u5386\u5e76\u6253\u5370\u6570\u636e\u3002 1 2 3 4 5 6 7 8 9 10 $ ./column_headers.py id name 1 432000 2 1759000 3 1280000 4 1748000 5 3971000 6 8550000 7 464000 8 3671000 \u8fd9\u662f\u8f93\u51fa\u3002","title":"PyMySQL \u5217\u6807\u9898"},{"location":"pages/python/pytutorial/python-pymysql/#PyMySQL-\u9884\u5907\u8bed\u53e5","text":"\u5728\u7f16\u5199\u9884\u5907\u8bed\u53e5\u65f6\uff0c\u6211\u4eec\u4f7f\u7528\u5360\u4f4d\u7b26\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u5c06\u503c\u5199\u5165\u8bed\u53e5\u4e2d\u3002 \u9884\u51c6\u5907\u7684\u8bed\u53e5\u53ef\u63d0\u9ad8\u5b89\u5168\u6027\u548c\u6027\u80fd\u3002 prepared_statement.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/usr/bin/python3 # -*- coding: utf-8 -*- import pymysql con = pymysql.connect('localhost', 'user17', 's$cret', 'testdb') # user input myid = 4 with con: cur = con.cursor() cur.execute(\"SELECT * FROM cities WHERE id=%s\", myid) cid, name, population = cur.fetchone() print(cid, name, population) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u83b7\u5f97\u5177\u6709\u6307\u5b9a ID \u7684\u884c\u3002 1 cur.execute(\"SELECT * FROM cities WHERE id=%s\", myid) \u6211\u4eec\u4f7f\u7528\u7531 %s \u6807\u8bb0\u6807\u8bc6\u7684\u5360\u4f4d\u7b26\u3002 \u5728\u6267\u884c SQL \u8bed\u53e5\u4e4b\u524d\uff0c\u5c06\u503c\u7ed1\u5b9a\u5230\u5b83\u4eec\u7684\u5360\u4f4d\u7b26\u3002 1 2 $ ./prepared_statement.py 4 Warsaw 1748000 \u8fd9\u662f\u8f93\u51fa\u3002","title":"PyMySQL \u9884\u5907\u8bed\u53e5"},{"location":"pages/python/pytutorial/python-pymysql/#PyMySQL-\u53d7\u5f71\u54cd\u7684\u884c","text":"rowcount \u662f\u53ea\u8bfb\u7684\u6e38\u6807\u5c5e\u6027\uff0c\u5b83\u6307\u5b9a\u6700\u540e\u4e00\u6761 SELECT\uff0cUPDATE \u6216 INSERT \u8bed\u53e5\u4ea7\u751f\u7684\u884c\u6570\u3002 affected_rows.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/usr/bin/python3 # -*- coding: utf-8 -*- import pymysql con = pymysql.connect('localhost', 'user17', 's$cret', 'mydb') with con: cur = con.cursor() cur.execute(\"SELECT * FROM cities WHERE id IN (1, 2, 3)\") # rows = cur.fetchall() # for row in rows: # print(\"{0} {1} {2}\".format(row[0], row[1], row[2])) print(\"The query affected {} rows\".format(cur.rowcount)) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u6761 SELECT \u8bed\u53e5\u9009\u62e9\u4e09\u884c\u3002 1 print(\"The query affected {} rows\".format(cur.rowcount)) \u6211\u4eec\u751f\u6210\u4e00\u6761\u6d88\u606f\uff0c\u663e\u793a\u53d7\u5f71\u54cd\u7684\u884c\u6570\u3002 1 2 $ ./affected_rows.py The query affected 3 rows \u8fd9\u662f\u8f93\u51fa\u3002","title":"PyMySQL \u53d7\u5f71\u54cd\u7684\u884c"},{"location":"pages/python/pytutorial/python-pyquery/","text":"Python pyquery \u6559\u7a0b \u00b6 Pyquery \u6559\u7a0b \u5c55\u793a\u4e86\u5982\u4f55\u5728 Python \u4e2d\u5bf9 XML \u6587\u6863\u8fdb\u884c jquery \u67e5\u8be2\u3002 jQuery \u00b6 jQuery \u662f\u4e00\u4e2a JavaScript \u5e93\uff0c\u7528\u4e8e\u5904\u7406 DOM\u3002 \u4f7f\u7528 jQuery\uff0c\u6211\u4eec\u53ef\u4ee5\u67e5\u627e\uff0c\u9009\u62e9\uff0c\u904d\u5386\u548c\u64cd\u4f5c HTML \u6587\u6863\u7684\u5404\u4e2a\u90e8\u5206\u3002 pyquery \u00b6 Pyquery \u662f\u4e00\u4e2a Python \u5e93\uff0c\u5177\u6709\u4e0e jQuery \u7c7b\u4f3c\u7684 API\u3002 \u5b83\u4f7f\u7528 lxml \u6a21\u5757\u8fdb\u884c\u5feb\u901f\u7684 XML \u548c HTML \u64cd\u4f5c\u3002 \u8be5 API \u5c3d\u53ef\u80fd\u7c7b\u4f3c\u4e8e jQuery\u3002 \u5b89\u88c5 pyquery \u00b6 \u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5b89\u88c5 Pyquery\uff1a 1 $ sudo pip3 install pyquery \u6211\u4eec\u4f7f\u7528 pip3 \u547d\u4ee4\u5b89\u88c5 pyquery \u6a21\u5757\u3002 HTML \u6587\u4ef6 \u00b6 \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u4ee5\u4e0b HTML \u6587\u4ef6\uff1a index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 <!DOCTYPE html> <html> <head> <title>Header</title> <meta charset=\"utf-8\"> </head> <body> <h2>Operating systems</h2> <ul id=\"mylist\" style=\"width:150px\"> <li>Solaris</li> <li>FreeBSD</li> <li>Debian</li> <li>NetBSD</li> <li>Windows</li> </ul> </body> </html> \u7b80\u5355\u7684\u4f8b\u5b50 \u00b6 \u5728\u7b2c\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 pyquery \u6a21\u5757\u83b7\u53d6\u6807\u5934\u7684\u6587\u672c\u3002 header.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/python3 from pyquery import PyQuery as pq with open(\"index.html\", \"r\") as f: contents = f.read() doc = pq(contents) text = doc(\"h2\").text() print(text) \u8be5\u4ee3\u7801\u793a\u4f8b\u6253\u5370 h2 \u5143\u7d20\u7684\u6587\u672c\u3002 1 from pyquery import PyQuery as pq \u6211\u4eec\u4ece pyquery \u6a21\u5757\u5bfc\u5165 PyQuery \u7c7b\u3002 PyQuery \u662f\u4ece\u4e8b\u5de5\u4f5c\u7684\u4e3b\u8981\u73ed\u7ea7\u3002 1 2 3 with open(\"index.html\", \"r\") as f: contents = f.read() \u6211\u4eec\u6253\u5f00 index.html \u6587\u4ef6\u5e76\u4f7f\u7528 read() \u65b9\u6cd5\u8bfb\u53d6\u5176\u5185\u5bb9\u3002 1 doc = pq(contents) \u521b\u5efa\u4e86 PyQuery \u5bf9\u8c61\uff1b HTML \u6570\u636e\u5c06\u4f20\u9012\u7ed9\u6784\u9020\u51fd\u6570\u3002 1 text = doc(\"h2\").text() \u6211\u4eec\u9009\u62e9 h2 \u6807\u7b7e\uff0c\u5e76\u4f7f\u7528 text() \u65b9\u6cd5\u83b7\u53d6\u5176\u6587\u672c\u3002 1 2 $ ./header.py Operating systems \u8fd9\u662f\u8f93\u51fa\u3002 \u6587\u672c\u548c HTML \u65b9\u6cd5 \u00b6 text() \u65b9\u6cd5\u68c0\u7d22\u5143\u7d20\u7684\u6587\u672c\uff0c\u800c html() \u65b9\u6cd5\u68c0\u7d22\u5143\u7d20\u7684 HTML \u6570\u636e\u3002 get_list.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/python3 from pyquery import PyQuery as pq with open(\"index.html\", \"r\") as f: contents = f.read() doc = pq(contents) text = doc(\"ul\").text() print(\"\\n\".join(text.split())) text = doc(\"ul\").html() print(\"\\n\".join(text.split())) \u6211\u4eec\u83b7\u5f97 ul \u5143\u7d20\u7684\u6587\u672c\u6570\u636e\u548c HTML \u6570\u636e\u3002 1 2 3 4 5 6 7 8 9 10 11 $ ./get_list.py Solaris FreeBSD Debian NetBSD Windows <li>Solaris</li> <li>FreeBSD</li> <li>Debian</li> <li>NetBSD</li> <li>Windows</li> \u8fd9\u662f\u8f93\u51fa\u3002 \u5c5e\u6027 \u00b6 \u5143\u7d20\u5c5e\u6027\u53ef\u4ee5\u4f7f\u7528 attr() \u65b9\u6cd5\u68c0\u7d22\u3002 attributes.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/python3 from pyquery import PyQuery as pq with open(\"index.html\", \"r\") as f: contents = f.read() doc = pq(contents) tag = doc(\"ul\") print(tag.attr(\"id\")) print(tag.attr(\"style\")) \u5728\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u68c0\u7d22\u5e76\u6253\u5370 ul \u5143\u7d20\u7684\u4e24\u4e2a\u5c5e\u6027\uff1a id \u548c style \u3002 1 2 3 $ ./attributes.py mylist width:150px \u8fd9\u662f\u8f93\u51fa\u3002 \u7f51\u9875\u6293\u53d6 \u00b6 \u8bf7\u6c42\u662f\u4e00\u4e2a\u7b80\u5355\u7684 Python HTTP \u5e93\u3002 \u5b83\u63d0\u4f9b\u4e86\u901a\u8fc7 HTTP \u8bbf\u95ee Web \u8d44\u6e90\u7684\u65b9\u6cd5\u3002 scraping.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/python3 from pyquery import PyQuery as pq import requests as req resp = req.get(\"http://www.something.com\") doc = pq(resp.text) title = doc('title').text() print(title) \u8be5\u793a\u4f8b\u68c0\u7d22\u4e00\u4e2a\u7b80\u5355\u7f51\u9875\u7684\u6807\u9898\u3002 1 2 resp = req.get(\"http://www.something.com\") doc = pq(resp.text) \u6211\u4eec\u83b7\u53d6\u9875\u9762\u7684 HTML \u6570\u636e\u3002 1 2 title = doc('title').text() print(title) \u6211\u4eec\u68c0\u7d22\u5176\u6807\u9898\u3002 1 2 $ ./scraping.py Something. \u8fd9\u662f\u8f93\u51fa\u3002 \u9009\u62e9\u6807\u7b7e \u00b6 \u9009\u62e9\u5668\u7528\u4e8e\u9009\u62e9 HTML \u6587\u6863\u4e2d\u6ee1\u8db3\u67d0\u4e9b\u6761\u4ef6\u7684\u5143\u7d20\u3002 \u6761\u4ef6\u53ef\u4ee5\u662f\u5b83\u4eec\u7684\u540d\u79f0\uff0cID\uff0c\u7c7b\u540d\u79f0\uff0c\u5c5e\u6027\u6216\u5b83\u4eec\u7684\u7ec4\u5408\u3002 selecting.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #!/usr/bin/python3 from pyquery import PyQuery as pq def print_item(self, item): print(\"Tag: {0}, Text: {1}\".format(item.tag, item.text)) with open(\"index.html\", \"r\") as f: contents = f.read() doc = pq(contents) first_li = doc(\"li:first\") print(first_li.text()) last_li = doc(\"li:last\") print(last_li.text()) odd_lis = doc(\"li:odd\") odd_lis.each(print_item) \u8be5\u793a\u4f8b\u4ece HTML \u6587\u6863\u4e2d\u9009\u62e9\u5404\u79cd li \u6807\u7b7e\u3002 1 2 3 def print_item(self, item): print(\"Tag: {0}, Text: {1}\".format(item.tag, item.text)) \u5728\u6b64\u529f\u80fd\u4e2d\uff0c\u6211\u4eec\u6253\u5370\u6807\u7b7e\u540d\u79f0\u53ca\u5176\u6587\u672c\u3002 1 2 first_li = doc(\"li:first\") print(first_li.text()) \u6211\u4eec\u9009\u62e9\u7b2c\u4e00\u4e2a li \u6807\u7b7e\uff0c\u5e76\u4f7f\u7528 text() \u65b9\u6cd5\u6253\u5370\u5176\u5185\u5bb9\u3002 1 2 last_li = doc(\"li:last\") print(last_li.text()) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5f97\u5230\u4e86\u6700\u540e\u7684 li \u6807\u7b7e\u3002 1 2 odd_lis = doc(\"li:odd\") odd_lis.each(print_item) \u501f\u52a9 each() \u65b9\u6cd5\uff0c\u6211\u4eec\u5c06\u6253\u5370\u6bcf\u4e2a\u5947\u6570 li \u5143\u7d20\u7684\u6807\u7b7e\u53ca\u5176\u5185\u5bb9\u3002 1 2 3 4 5 $ ./selecting.py Solaris Windows Tag: li, Text: FreeBSD Tag: li, Text: NetBSD \u8fd9\u662f\u8f93\u51fa\u3002 \u79fb\u9664\u5143\u7d20 \u00b6 remove() \u65b9\u6cd5\u5220\u9664\u6807\u7b7e\u3002 removing.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/python3 from pyquery import PyQuery as pq with open(\"index.html\", \"r\") as f: contents = f.read() doc = pq(contents) removed_item = doc('li:last').remove() print(removed_item) print(doc) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5220\u9664\u4e86\u6700\u540e\u4e00\u4e2a li \u6807\u7b7e\u3002 1 removed_item = doc('li:last').remove() \u6211\u4eec\u9009\u62e9\u6700\u540e\u4e00\u4e2a li \u6807\u7b7e\uff0c\u7136\u540e\u7528 remove() \u5220\u9664\u5b83\u3002 \u8fd4\u56de\u5220\u9664\u7684\u5143\u7d20\u3002 1 2 print(removed_item) print(doc) \u6211\u4eec\u5c06\u6253\u5370\u5df2\u5220\u9664\u7684\u9879\u76ee\u548c\u5df2\u5220\u9664\u5143\u7d20\u7684\u6587\u6863\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 $ ./removing.py <li>Windows</li> <html> <head> <title>Header</title> <meta charset=\"utf-8\"/> </head> <body> <h2>Operating systems</h2> <ul id=\"mylist\" style=\"width:150px\"> <li>Solaris</li> <li>FreeBSD</li> <li>Debian</li> <li>NetBSD</li> </ul> </body> </html> \u8fd9\u662f\u8f93\u51fa\u3002 items \u65b9\u6cd5 \u00b6 items() \u65b9\u6cd5\u5141\u8bb8\u8fed\u4ee3\u5143\u7d20\u3002 iterate.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/python3 from pyquery import PyQuery as pq with open(\"index.html\", \"r\") as f: contents = f.read() doc = pq(contents) items = [item.text() for item in doc.items('li')] print(items) \u8be5\u793a\u4f8b\u8fed\u4ee3\u6587\u6863\u7684 li \u5143\u7d20\u3002 1 items = [item.text() for item in doc.items('li')] items() \u65b9\u6cd5\u7528\u4e8e\u5728\u5217\u8868\u63a8\u5bfc\u5f0f\u4e2d\u521b\u5efa li \u5143\u7d20\u7684 Python \u5217\u8868\u3002 1 2 $ ./iterate.py ['Solaris', 'FreeBSD', 'Debian', 'NetBSD', 'Windows'] \u8fd9\u662f\u8f93\u51fa\u3002 \u8ffd\u52a0\u548c\u524d\u7f6e\u5143\u7d20 \u00b6 append() \u65b9\u6cd5\u5728\u8282\u70b9\u7684\u672b\u5c3e\u6dfb\u52a0\u5143\u7d20\uff0c prepend() \u65b9\u6cd5\u5728\u8282\u70b9\u7684\u672b\u5c3e\u6dfb\u52a0\u5143\u7d20\u3002 append_prepend.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/python3 from pyquery import PyQuery as pq with open(\"index.html\", \"r\") as f: contents = f.read() doc = pq(contents) mylist = doc(\"#mylist\") mylist.prepend(\"<li>DragonFly</li>\") mylist.append(\"<li>OpenBSD</li>\") print(mylist) \u8be5\u4ee3\u7801\u793a\u4f8b\u4f7f\u7528 prepend() \u548c append() \u65b9\u6cd5\u63d2\u5165\u4e24\u4e2a li \u5143\u7d20\u3002 filter \u65b9\u6cd5 \u00b6 filter() \u65b9\u6cd5\u7528\u4e8e\u8fc7\u6ee4\u5143\u7d20\u3002 filtering.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/python3 from pyquery import PyQuery as pq with open(\"index.html\", \"r\") as f: contents = f.read() doc = pq(contents) filtered = doc('li').filter(lambda i: pq(this).text().startswith(('F', 'D', 'N'))) print(filtered.text()) \u8be5\u793a\u4f8b\u663e\u793a\u4e86\u4ee5 F\uff0cD \u6216 N \u5f00\u5934\u7684\u64cd\u4f5c\u7cfb\u7edf\u3002\u6211\u4eec\u4f7f\u7528 filter() \u65b9\u6cd5\u548c\u533f\u540d\u51fd\u6570\u3002 1 2 ./filtering.py FreeBSD Debian NetBSD \u8fd9\u662f\u8f93\u51fa\u3002","title":"Python pyquery \u6559\u7a0b"},{"location":"pages/python/pytutorial/python-pyquery/#Python-pyquery-\u6559\u7a0b","text":"Pyquery \u6559\u7a0b \u5c55\u793a\u4e86\u5982\u4f55\u5728 Python \u4e2d\u5bf9 XML \u6587\u6863\u8fdb\u884c jquery \u67e5\u8be2\u3002","title":"Python pyquery \u6559\u7a0b"},{"location":"pages/python/pytutorial/python-pyquery/#jQuery","text":"jQuery \u662f\u4e00\u4e2a JavaScript \u5e93\uff0c\u7528\u4e8e\u5904\u7406 DOM\u3002 \u4f7f\u7528 jQuery\uff0c\u6211\u4eec\u53ef\u4ee5\u67e5\u627e\uff0c\u9009\u62e9\uff0c\u904d\u5386\u548c\u64cd\u4f5c HTML \u6587\u6863\u7684\u5404\u4e2a\u90e8\u5206\u3002","title":"jQuery"},{"location":"pages/python/pytutorial/python-pyquery/#pyquery","text":"Pyquery \u662f\u4e00\u4e2a Python \u5e93\uff0c\u5177\u6709\u4e0e jQuery \u7c7b\u4f3c\u7684 API\u3002 \u5b83\u4f7f\u7528 lxml \u6a21\u5757\u8fdb\u884c\u5feb\u901f\u7684 XML \u548c HTML \u64cd\u4f5c\u3002 \u8be5 API \u5c3d\u53ef\u80fd\u7c7b\u4f3c\u4e8e jQuery\u3002","title":"pyquery"},{"location":"pages/python/pytutorial/python-pyquery/#\u5b89\u88c5-pyquery","text":"\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5b89\u88c5 Pyquery\uff1a 1 $ sudo pip3 install pyquery \u6211\u4eec\u4f7f\u7528 pip3 \u547d\u4ee4\u5b89\u88c5 pyquery \u6a21\u5757\u3002","title":"\u5b89\u88c5 pyquery"},{"location":"pages/python/pytutorial/python-pyquery/#HTML-\u6587\u4ef6","text":"\u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u4ee5\u4e0b HTML \u6587\u4ef6\uff1a index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 <!DOCTYPE html> <html> <head> <title>Header</title> <meta charset=\"utf-8\"> </head> <body> <h2>Operating systems</h2> <ul id=\"mylist\" style=\"width:150px\"> <li>Solaris</li> <li>FreeBSD</li> <li>Debian</li> <li>NetBSD</li> <li>Windows</li> </ul> </body> </html>","title":"HTML \u6587\u4ef6"},{"location":"pages/python/pytutorial/python-pyquery/#\u7b80\u5355\u7684\u4f8b\u5b50","text":"\u5728\u7b2c\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 pyquery \u6a21\u5757\u83b7\u53d6\u6807\u5934\u7684\u6587\u672c\u3002 header.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/python3 from pyquery import PyQuery as pq with open(\"index.html\", \"r\") as f: contents = f.read() doc = pq(contents) text = doc(\"h2\").text() print(text) \u8be5\u4ee3\u7801\u793a\u4f8b\u6253\u5370 h2 \u5143\u7d20\u7684\u6587\u672c\u3002 1 from pyquery import PyQuery as pq \u6211\u4eec\u4ece pyquery \u6a21\u5757\u5bfc\u5165 PyQuery \u7c7b\u3002 PyQuery \u662f\u4ece\u4e8b\u5de5\u4f5c\u7684\u4e3b\u8981\u73ed\u7ea7\u3002 1 2 3 with open(\"index.html\", \"r\") as f: contents = f.read() \u6211\u4eec\u6253\u5f00 index.html \u6587\u4ef6\u5e76\u4f7f\u7528 read() \u65b9\u6cd5\u8bfb\u53d6\u5176\u5185\u5bb9\u3002 1 doc = pq(contents) \u521b\u5efa\u4e86 PyQuery \u5bf9\u8c61\uff1b HTML \u6570\u636e\u5c06\u4f20\u9012\u7ed9\u6784\u9020\u51fd\u6570\u3002 1 text = doc(\"h2\").text() \u6211\u4eec\u9009\u62e9 h2 \u6807\u7b7e\uff0c\u5e76\u4f7f\u7528 text() \u65b9\u6cd5\u83b7\u53d6\u5176\u6587\u672c\u3002 1 2 $ ./header.py Operating systems \u8fd9\u662f\u8f93\u51fa\u3002","title":"\u7b80\u5355\u7684\u4f8b\u5b50"},{"location":"pages/python/pytutorial/python-pyquery/#\u6587\u672c\u548c-HTML-\u65b9\u6cd5","text":"text() \u65b9\u6cd5\u68c0\u7d22\u5143\u7d20\u7684\u6587\u672c\uff0c\u800c html() \u65b9\u6cd5\u68c0\u7d22\u5143\u7d20\u7684 HTML \u6570\u636e\u3002 get_list.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/python3 from pyquery import PyQuery as pq with open(\"index.html\", \"r\") as f: contents = f.read() doc = pq(contents) text = doc(\"ul\").text() print(\"\\n\".join(text.split())) text = doc(\"ul\").html() print(\"\\n\".join(text.split())) \u6211\u4eec\u83b7\u5f97 ul \u5143\u7d20\u7684\u6587\u672c\u6570\u636e\u548c HTML \u6570\u636e\u3002 1 2 3 4 5 6 7 8 9 10 11 $ ./get_list.py Solaris FreeBSD Debian NetBSD Windows <li>Solaris</li> <li>FreeBSD</li> <li>Debian</li> <li>NetBSD</li> <li>Windows</li> \u8fd9\u662f\u8f93\u51fa\u3002","title":"\u6587\u672c\u548c HTML \u65b9\u6cd5"},{"location":"pages/python/pytutorial/python-pyquery/#\u5c5e\u6027","text":"\u5143\u7d20\u5c5e\u6027\u53ef\u4ee5\u4f7f\u7528 attr() \u65b9\u6cd5\u68c0\u7d22\u3002 attributes.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/python3 from pyquery import PyQuery as pq with open(\"index.html\", \"r\") as f: contents = f.read() doc = pq(contents) tag = doc(\"ul\") print(tag.attr(\"id\")) print(tag.attr(\"style\")) \u5728\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u68c0\u7d22\u5e76\u6253\u5370 ul \u5143\u7d20\u7684\u4e24\u4e2a\u5c5e\u6027\uff1a id \u548c style \u3002 1 2 3 $ ./attributes.py mylist width:150px \u8fd9\u662f\u8f93\u51fa\u3002","title":"\u5c5e\u6027"},{"location":"pages/python/pytutorial/python-pyquery/#\u7f51\u9875\u6293\u53d6","text":"\u8bf7\u6c42\u662f\u4e00\u4e2a\u7b80\u5355\u7684 Python HTTP \u5e93\u3002 \u5b83\u63d0\u4f9b\u4e86\u901a\u8fc7 HTTP \u8bbf\u95ee Web \u8d44\u6e90\u7684\u65b9\u6cd5\u3002 scraping.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/python3 from pyquery import PyQuery as pq import requests as req resp = req.get(\"http://www.something.com\") doc = pq(resp.text) title = doc('title').text() print(title) \u8be5\u793a\u4f8b\u68c0\u7d22\u4e00\u4e2a\u7b80\u5355\u7f51\u9875\u7684\u6807\u9898\u3002 1 2 resp = req.get(\"http://www.something.com\") doc = pq(resp.text) \u6211\u4eec\u83b7\u53d6\u9875\u9762\u7684 HTML \u6570\u636e\u3002 1 2 title = doc('title').text() print(title) \u6211\u4eec\u68c0\u7d22\u5176\u6807\u9898\u3002 1 2 $ ./scraping.py Something. \u8fd9\u662f\u8f93\u51fa\u3002","title":"\u7f51\u9875\u6293\u53d6"},{"location":"pages/python/pytutorial/python-pyquery/#\u9009\u62e9\u6807\u7b7e","text":"\u9009\u62e9\u5668\u7528\u4e8e\u9009\u62e9 HTML \u6587\u6863\u4e2d\u6ee1\u8db3\u67d0\u4e9b\u6761\u4ef6\u7684\u5143\u7d20\u3002 \u6761\u4ef6\u53ef\u4ee5\u662f\u5b83\u4eec\u7684\u540d\u79f0\uff0cID\uff0c\u7c7b\u540d\u79f0\uff0c\u5c5e\u6027\u6216\u5b83\u4eec\u7684\u7ec4\u5408\u3002 selecting.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #!/usr/bin/python3 from pyquery import PyQuery as pq def print_item(self, item): print(\"Tag: {0}, Text: {1}\".format(item.tag, item.text)) with open(\"index.html\", \"r\") as f: contents = f.read() doc = pq(contents) first_li = doc(\"li:first\") print(first_li.text()) last_li = doc(\"li:last\") print(last_li.text()) odd_lis = doc(\"li:odd\") odd_lis.each(print_item) \u8be5\u793a\u4f8b\u4ece HTML \u6587\u6863\u4e2d\u9009\u62e9\u5404\u79cd li \u6807\u7b7e\u3002 1 2 3 def print_item(self, item): print(\"Tag: {0}, Text: {1}\".format(item.tag, item.text)) \u5728\u6b64\u529f\u80fd\u4e2d\uff0c\u6211\u4eec\u6253\u5370\u6807\u7b7e\u540d\u79f0\u53ca\u5176\u6587\u672c\u3002 1 2 first_li = doc(\"li:first\") print(first_li.text()) \u6211\u4eec\u9009\u62e9\u7b2c\u4e00\u4e2a li \u6807\u7b7e\uff0c\u5e76\u4f7f\u7528 text() \u65b9\u6cd5\u6253\u5370\u5176\u5185\u5bb9\u3002 1 2 last_li = doc(\"li:last\") print(last_li.text()) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5f97\u5230\u4e86\u6700\u540e\u7684 li \u6807\u7b7e\u3002 1 2 odd_lis = doc(\"li:odd\") odd_lis.each(print_item) \u501f\u52a9 each() \u65b9\u6cd5\uff0c\u6211\u4eec\u5c06\u6253\u5370\u6bcf\u4e2a\u5947\u6570 li \u5143\u7d20\u7684\u6807\u7b7e\u53ca\u5176\u5185\u5bb9\u3002 1 2 3 4 5 $ ./selecting.py Solaris Windows Tag: li, Text: FreeBSD Tag: li, Text: NetBSD \u8fd9\u662f\u8f93\u51fa\u3002","title":"\u9009\u62e9\u6807\u7b7e"},{"location":"pages/python/pytutorial/python-pyquery/#\u79fb\u9664\u5143\u7d20","text":"remove() \u65b9\u6cd5\u5220\u9664\u6807\u7b7e\u3002 removing.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/python3 from pyquery import PyQuery as pq with open(\"index.html\", \"r\") as f: contents = f.read() doc = pq(contents) removed_item = doc('li:last').remove() print(removed_item) print(doc) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5220\u9664\u4e86\u6700\u540e\u4e00\u4e2a li \u6807\u7b7e\u3002 1 removed_item = doc('li:last').remove() \u6211\u4eec\u9009\u62e9\u6700\u540e\u4e00\u4e2a li \u6807\u7b7e\uff0c\u7136\u540e\u7528 remove() \u5220\u9664\u5b83\u3002 \u8fd4\u56de\u5220\u9664\u7684\u5143\u7d20\u3002 1 2 print(removed_item) print(doc) \u6211\u4eec\u5c06\u6253\u5370\u5df2\u5220\u9664\u7684\u9879\u76ee\u548c\u5df2\u5220\u9664\u5143\u7d20\u7684\u6587\u6863\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 $ ./removing.py <li>Windows</li> <html> <head> <title>Header</title> <meta charset=\"utf-8\"/> </head> <body> <h2>Operating systems</h2> <ul id=\"mylist\" style=\"width:150px\"> <li>Solaris</li> <li>FreeBSD</li> <li>Debian</li> <li>NetBSD</li> </ul> </body> </html> \u8fd9\u662f\u8f93\u51fa\u3002","title":"\u79fb\u9664\u5143\u7d20"},{"location":"pages/python/pytutorial/python-pyquery/#items\u65b9\u6cd5","text":"items() \u65b9\u6cd5\u5141\u8bb8\u8fed\u4ee3\u5143\u7d20\u3002 iterate.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/python3 from pyquery import PyQuery as pq with open(\"index.html\", \"r\") as f: contents = f.read() doc = pq(contents) items = [item.text() for item in doc.items('li')] print(items) \u8be5\u793a\u4f8b\u8fed\u4ee3\u6587\u6863\u7684 li \u5143\u7d20\u3002 1 items = [item.text() for item in doc.items('li')] items() \u65b9\u6cd5\u7528\u4e8e\u5728\u5217\u8868\u63a8\u5bfc\u5f0f\u4e2d\u521b\u5efa li \u5143\u7d20\u7684 Python \u5217\u8868\u3002 1 2 $ ./iterate.py ['Solaris', 'FreeBSD', 'Debian', 'NetBSD', 'Windows'] \u8fd9\u662f\u8f93\u51fa\u3002","title":"items\u65b9\u6cd5"},{"location":"pages/python/pytutorial/python-pyquery/#\u8ffd\u52a0\u548c\u524d\u7f6e\u5143\u7d20","text":"append() \u65b9\u6cd5\u5728\u8282\u70b9\u7684\u672b\u5c3e\u6dfb\u52a0\u5143\u7d20\uff0c prepend() \u65b9\u6cd5\u5728\u8282\u70b9\u7684\u672b\u5c3e\u6dfb\u52a0\u5143\u7d20\u3002 append_prepend.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/python3 from pyquery import PyQuery as pq with open(\"index.html\", \"r\") as f: contents = f.read() doc = pq(contents) mylist = doc(\"#mylist\") mylist.prepend(\"<li>DragonFly</li>\") mylist.append(\"<li>OpenBSD</li>\") print(mylist) \u8be5\u4ee3\u7801\u793a\u4f8b\u4f7f\u7528 prepend() \u548c append() \u65b9\u6cd5\u63d2\u5165\u4e24\u4e2a li \u5143\u7d20\u3002","title":"\u8ffd\u52a0\u548c\u524d\u7f6e\u5143\u7d20"},{"location":"pages/python/pytutorial/python-pyquery/#filter\u65b9\u6cd5","text":"filter() \u65b9\u6cd5\u7528\u4e8e\u8fc7\u6ee4\u5143\u7d20\u3002 filtering.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/python3 from pyquery import PyQuery as pq with open(\"index.html\", \"r\") as f: contents = f.read() doc = pq(contents) filtered = doc('li').filter(lambda i: pq(this).text().startswith(('F', 'D', 'N'))) print(filtered.text()) \u8be5\u793a\u4f8b\u663e\u793a\u4e86\u4ee5 F\uff0cD \u6216 N \u5f00\u5934\u7684\u64cd\u4f5c\u7cfb\u7edf\u3002\u6211\u4eec\u4f7f\u7528 filter() \u65b9\u6cd5\u548c\u533f\u540d\u51fd\u6570\u3002 1 2 ./filtering.py FreeBSD Debian NetBSD \u8fd9\u662f\u8f93\u51fa\u3002","title":"filter\u65b9\u6cd5"},{"location":"pages/python/pytutorial/python-pytest/","text":"Python Pytest \u6559\u7a0b \u00b6 Python Pytest \u6559\u7a0b \u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528 pytest \u6a21\u5757\u6d4b\u8bd5 Python \u5e94\u7528\u3002 python pytest \u00b6 Pytest \u662f\u7528\u4e8e\u6d4b\u8bd5 Python \u5e94\u7528\u7684 Python \u5e93\u3002 \u5b83\u662f\u9f3b\u5b50\u6d4b\u8bd5\u548c\u5355\u5143\u6d4b\u8bd5\u7684\u66ff\u4ee3\u65b9\u6cd5\u3002 pytest \u5b89\u88c5 \u00b6 \u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5b89\u88c5 Pytest\uff1a 1 $ pip install pytest \u8fd9\u5c06\u5b89\u88c5 pytest \u5e93\u3002 pytest \u6d4b\u8bd5\u53d1\u73b0\u7ea6\u5b9a \u00b6 \u5982\u679c\u672a\u6307\u5b9a\u4efb\u4f55\u53c2\u6570\uff0c\u5219\u5728 testpaths \uff08\u5982\u679c\u5df2\u914d\u7f6e\uff09\u6216\u5f53\u524d\u76ee\u5f55\u4e2d\u7684\u4f4d\u7f6e\u641c\u7d22\u6d4b\u8bd5\u6587\u4ef6\u3002 \u53e6\u5916\uff0c\u547d\u4ee4\u884c\u53c2\u6570\u53ef\u4ee5\u5728\u76ee\u5f55\uff0c\u6587\u4ef6\u540d\u6216\u8282\u70b9 ID \u7684\u4efb\u4f55\u7ec4\u5408\u4e2d\u4f7f\u7528\u3002 pytest \u5728\u6240\u9009\u76ee\u5f55\u4e2d\u67e5\u627e test_*.py \u6216 *_test.py \u6587\u4ef6\u3002 \u5728\u9009\u5b9a\u7684\u6587\u4ef6\u4e2d\uff0cpytest \u5728\u7c7b\u4e4b\u5916\u67e5\u627e\u5e26\u524d\u7f00\u7684\u6d4b\u8bd5\u51fd\u6570\uff0c\u5e76\u5728\u5e26\u524d\u7f00\u7684\u6d4b\u8bd5\u7c7b\u4e2d\u67e5\u627e\u5e26\u524d\u7f00\u7684\u6d4b\u8bd5\u65b9\u6cd5\uff08\u65e0 __init__() \u65b9\u6cd5\uff09\u3002 \u8fd0\u884c pytest \u00b6 pytest \u4e0d\u5e26\u4efb\u4f55\u53c2\u6570\uff0c\u5c06\u67e5\u770b\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\uff08\u6216\u5176\u4ed6\u4e00\u4e9b\u9884\u914d\u7f6e\u7684\u76ee\u5f55\uff09\u4ee5\u53ca\u6d4b\u8bd5\u6587\u4ef6\u7684\u6240\u6709\u5b50\u76ee\u5f55\uff0c\u5e76\u8fd0\u884c\u627e\u5230\u7684\u6d4b\u8bd5\u4ee3\u7801\u3002 1 $ pytest \u8fd0\u884c\u5f53\u524d\u76ee\u5f55\u4e2d\u7684\u6240\u6709\u6d4b\u8bd5\u6587\u4ef6\u3002 1 $ pytest min_max_test.py \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u540d\u79f0\u4f5c\u4e3a\u53c2\u6570\u6765\u8fd0\u884c\u7279\u5b9a\u7684\u6d4b\u8bd5\u6587\u4ef6\u3002 1 $ pytest min_max_test.py::test_min \u53ef\u4ee5\u901a\u8fc7\u5728 :: \u5b57\u7b26\u540e\u63d0\u4f9b\u5176\u540d\u79f0\u6765\u8fd0\u884c\u7279\u5b9a\u529f\u80fd\u3002 1 $ pytest -m smoke \u6807\u8bb0\u53ef\u7528\u4e8e\u5bf9\u6d4b\u8bd5\u8fdb\u884c\u5206\u7ec4\u3002 \u7136\u540e\u4f7f\u7528 pytest -m \u8fd0\u884c\u4e00\u7ec4\u6807\u8bb0\u7684\u6d4b\u8bd5\u3002 1 $ pytest -k <expression> \u53e6\u5916\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8868\u8fbe\u5f0f\u6765\u8fd0\u884c\u4e0e\u6d4b\u8bd5\u51fd\u6570\u548c\u7c7b\u7684\u540d\u79f0\u5339\u914d\u7684\u6d4b\u8bd5\u3002 Python pytest \u7b80\u5355\u793a\u4f8b \u00b6 \u5728\u7b2c\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 pytest \u6d4b\u8bd5\u4e24\u4e2a\u7b80\u5355\u7684\u6570\u5b66\u7b97\u6cd5\u3002 algo.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 def max(values): _max = values[0] for val in values: if val > _max: _max = val return _max def min(values): _min = values[0] for val in values: if val < _min: _min = val return _min \u6211\u4eec\u6709\u4e00\u4e2a\u5e26\u6709\u81ea\u5b9a\u4e49 max() \u548c min() \u529f\u80fd\u7684\u6a21\u5757\u3002 min_max_test.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python3 import algo def test_min(): values = (2, 3, 1, 4, 6) val = algo.min(values) assert val == 1 def test_max(): values = (2, 3, 1, 4, 6) val = algo.max(values) assert val == 6 \u6d4b\u8bd5\u6587\u4ef6 min_max_test.py \u7684\u540d\u79f0\u4e2d\u5305\u542b\u4e00\u4e2a\u6d4b\u8bd5\u8bcd\u3002 1 2 3 4 5 def test_min(): values = (2, 3, 1, 4, 6) val = algo.min(values) assert val == 1 \u6b64\u5916\uff0c\u6d4b\u8bd5\u529f\u80fd test_min() \u5177\u6709\u6d4b\u8bd5\u5b57\u3002 \u6211\u4eec\u4f7f\u7528 assert \u5173\u952e\u5b57\u6765\u6d4b\u8bd5\u7b97\u6cd5\u7684\u503c\u3002 1 2 3 4 5 6 7 8 9 $ pytest min_max_test.py ================================================= test session starts ================================================= platform win32 -- Python 3.7.0, pytest-5.0.1, py-1.8.0, pluggy-0.12.0 rootdir: C:\\Users\\Jano\\Documents\\pyprogs\\pytest collected 2 items min_max_test.py .. [100%] ============================================== 2 passed in 0.03 seconds =============================================== \u8fd9\u662f\u8f93\u51fa\u3002 \u6709\u4e24\u4e2a\u6d4b\u8bd5\uff0c\u5e76\u4e14\u90fd\u6210\u529f\u901a\u8fc7\u4e86\u3002 pytest -v min_max_test.py \u663e\u793a\u4e86\u66f4\u8be6\u7ec6\u7684\u8f93\u51fa\u3002 Pytest \u8df3\u8fc7 \u00b6 \u4f7f\u7528\u8df3\u8fc7\u88c5\u9970\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u8df3\u8fc7\u6307\u5b9a\u7684\u6d4b\u8bd5\u3002 \u8df3\u8fc7\u6d4b\u8bd5\u6709\u591a\u79cd\u539f\u56e0\u3002 \u4f8b\u5982\uff0c\u6570\u636e\u5e93/\u5728\u7ebf\u670d\u52a1\u76ee\u524d\u4e0d\u53ef\u7528\uff0c\u6216\u8005\u6211\u4eec\u8df3\u8fc7\u4e86 Windows \u4e0a\u9488\u5bf9 Linux \u7684\u7279\u5b9a\u6d4b\u8bd5\u3002 skipping.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env python3 import algo import pytest @pytest.mark.skip def test_min(): values = (2, 3, 1, 4, 6) val = algo.min(values) assert val == 1 def test_max(): values = (2, 3, 1, 4, 6) val = algo.max(values) assert val == 6 \u5728\u793a\u4f8b\u4e2d\uff0c test_min() \u88ab\u8df3\u8fc7\u3002 1 2 3 4 5 6 7 8 9 $ pytest min_max_test.py ================================================= test session starts ================================================= platform win32 -- Python 3.7.0, pytest-5.0.1, py-1.8.0, pluggy-0.12.0 rootdir: C:\\Users\\Jano\\Documents\\pyprogs\\pytest collected 2 items min_max_test.py s. [100%] ========================================= 1 passed, 1 skipped in 0.04 seconds ========================================= \u5728\u6d4b\u8bd5\u6587\u4ef6\u540d\u540e\u9762\u7684\u8f93\u51fa\u4e2d\uff0cs \u4ee3\u8868\u8df3\u8fc7\u7684\u548c\u3002 \u901a\u8fc7\u3002 pytest \u6807\u8bb0 \u00b6 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6807\u8bb0\u5c06\u6d4b\u8bd5\u7ec4\u7ec7\u4e3a\u5355\u5143\u3002 marking.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #!/usr/bin/env python3 # pytest -m a marking.py # pytest -m b marking.py import pytest @pytest.mark.a def test_a1(): assert (1) == (1) @pytest.mark.a def test_a2(): assert (1, 2) == (1, 2) @pytest.mark.a def test_a3(): assert (1, 2, 3) == (1, 2, 3) @pytest.mark.b def test_b1(): assert \"falcon\" == \"fal\" + \"con\" @pytest.mark.b def test_b2(): assert \"falcon\" == f\"fal{'con'}\" \u6211\u4eec\u6709\u4e24\u7ec4\u7531\u6807\u8bb0 a \u548c b \u6807\u8bc6\u7684\u6d4b\u8bd5\u3002 \u8fd9\u4e9b\u5355\u5143\u7531 pytest -m a marking.py \u548c pytest -m b marking.py \u8fd0\u884c\u3002 Pytest \u53c2\u6570\u5316\u6d4b\u8bd5 \u00b6 \u901a\u8fc7\u53c2\u6570\u5316\u6d4b\u8bd5\uff0c\u6211\u4eec\u53ef\u4ee5\u5411\u65ad\u8a00\u4e2d\u6dfb\u52a0\u591a\u4e2a\u503c\u3002 \u6211\u4eec\u4f7f\u7528 @pytest.mark.parametrize \u6807\u8bb0\u3002 parametrized.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/usr/bin/env python3 import algo import pytest @pytest.mark.parametrize(\"data, expected\", [((2, 3, 1, 4, 6), 1), ((5, -2, 0, 9, 12), -2), ((200, 100, 0, 300, 400), 0)]) def test_min(data, expected): val = algo.min(data) assert val == expected @pytest.mark.parametrize(\"data, expected\", [((2, 3, 1, 4, 6), 6), ((5, -2, 0, 9, 12), 12), ((200, 100, 0, 300, 400), 400)]) def test_max(data, expected): val = algo.max(data) assert val == expected \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u591a\u4e2a\u8f93\u5165\u6570\u636e\u6d4b\u8bd5\u8fd9\u4e24\u4e2a\u529f\u80fd\u3002 1 2 3 4 5 6 @pytest.mark.parametrize(\"data, expected\", [((2, 3, 1, 4, 6), 1), ((5, -2, 0, 9, 12), -2), ((200, 100, 0, 300, 400), 0)]) def test_min(data, expected): val = algo.min(data) assert val == expected \u6211\u4eec\u5c06\u4e24\u4e2a\u503c\u4f20\u9012\u7ed9\u6d4b\u8bd5\u51fd\u6570\uff1a\u6570\u636e\u548c\u671f\u671b\u503c\u3002 \u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u7528\u4e09\u4e2a\u6570\u636e\u5143\u7ec4\u6d4b\u8bd5 min() \u51fd\u6570\u3002 1 2 3 4 5 6 7 8 9 $ pytest parametrized.py ================================================= test session starts ================================================= platform win32 -- Python 3.7.0, pytest-5.0.1, py-1.8.0, pluggy-0.12.0 rootdir: C:\\Users\\Jano\\Documents\\pyprogs\\pytest collected 6 items parametrized.py ...... [100%] ============================================== 6 passed in 0.03 seconds =============================================== Pytest \u8f93\u51fa\u544a\u77e5\u6709\u516d\u6b21\u8fd0\u884c\u3002 pytest \u5939\u5177 \u00b6 \u6d4b\u8bd5\u9700\u8981\u5728\u4e00\u7ec4\u5df2\u77e5\u5bf9\u8c61\u7684\u80cc\u666f\u4e0b\u8fdb\u884c\u3002 \u8fd9\u7ec4\u5bf9\u8c61\u79f0\u4e3a\u6d4b\u8bd5\u5939\u5177\u3002 algo.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 def sel_sort(data): if not isinstance(data, list): vals = list(data) else: vals = data size = len(vals) for i in range(0, size): for j in range(i+1, size): if vals[j] < vals[i]: _min = vals[j] vals[j] = vals[i] vals[i] = _min return vals ... \u5bf9\u4e8e\u6b64\u793a\u4f8b\uff0c\u6211\u4eec\u5411 algo.py \u6a21\u5757\u6dfb\u52a0\u4e86\u4e00\u4e2a\u9009\u62e9\u6392\u5e8f\u7b97\u6cd5\u3002 fixtures.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/env python3 import algo import pytest @pytest.fixture def data(): return [3, 2, 1, 5, -3, 2, 0, -2, 11, 9] def test_sel_sort(data): sorted_vals = algo.sel_sort(data) assert sorted_vals == sorted(data) \u6211\u4eec\u7528\u5939\u5177\u6d4b\u8bd5\u9009\u62e9\u6392\u5e8f\u3002 1 2 3 4 @pytest.fixture def data(): return [3, 2, 1, 5, -3, 2, 0, -2, 11, 9] \u6211\u4eec\u7684\u6d4b\u8bd5\u88c5\u7f6e\u4ec5\u8fd4\u56de\u4e00\u4e9b\u6d4b\u8bd5\u6570\u636e\u3002 \u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u901a\u8fc7\u5176\u540d\u79f0\u5f15\u7528\u6b64\u706f\u5177\uff1a data \u3002 1 2 3 4 def test_sel_sort(data): sorted_vals = algo.sel_sort(data) assert sorted_vals == sorted(data) \u5728 test_sel_sort() \u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u5c06\u6570\u636e\u5939\u5177\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\u4f20\u9012\u3002 1 2 3 4 5 6 7 8 9 $ pytest fixtures.py ================================================= test session starts ================================================= platform win32 -- Python 3.7.0, pytest-5.0.1, py-1.8.0, pluggy-0.12.0 rootdir: C:\\Users\\Jano\\Documents\\pyprogs\\pytest collected 1 item fixtures.py . [100%] ============================================== 1 passed in 0.02 seconds =============================================== \u8fd9\u662f\u8f93\u51fa\u3002 Pytest \u5e03\u5c40 \u00b6 Python \u6d4b\u8bd5\u53ef\u4ee5\u591a\u79cd\u65b9\u5f0f\u7ec4\u7ec7\u3002 \u6d4b\u8bd5\u53ef\u4ee5\u96c6\u6210\u5728 Python \u5305\u4e2d\uff0c\u4e5f\u53ef\u4ee5\u653e\u5728\u5305\u5916\u3002 \u7efc\u5408\u6d4b\u8bd5 \u00b6 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c55\u793a\u5982\u4f55\u5728 Python \u5305\u4e2d\u8fd0\u884c\u6d4b\u8bd5\u3002 1 2 3 4 5 6 7 8 9 10 setup.py utils \u2502 algo.py \u2502 srel.py \u2502 __init__.py \u2502 \u2514\u2500\u2500\u2500tests algo_test.py srel_test.py __init__.py \u6211\u4eec\u6709\u8fd9\u79cd\u5305\u88c5\u5e03\u5c40\u3002 \u6d4b\u8bd5\u4e0e\u8f6f\u4ef6\u5305\u4e00\u8d77\u4f4d\u4e8e tests \u5b50\u76ee\u5f55\u4e2d\u3002 setup.py 1 2 3 4 5 #!/usr/bin/env python3 from setuptools import setup, find_packages setup(name=\"utils\", packages=find_packages()) \u8fd9\u662f setup.py \u3002 utils/algo.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 def sel_sort(data): if not isinstance(data, list): vals = list(data) else: vals = data size = len(vals) for i in range(0, size): for j in range(i+1, size): if vals[j] < vals[i]: _min = vals[j] vals[j] = vals[i] vals[i] = _min return vals def max(values): _max = values[0] for val in values: if val > _max: _max = val return _max def min(values): _min = values[0] for val in values: if val < _min: _min = val return _min \u8fd9\u662f algo.py \u6587\u4ef6\u3002 utils/srel.py 1 2 3 def is_palindrome(val): return val == val[::-1] \u6211\u4eec\u8fd8\u6709\u53e6\u4e00\u4e2a\u6a21\u5757\uff0c\u5176\u4e2d\u5305\u542b\u4e00\u4e2a\u6d4b\u8bd5\u5355\u8bcd\u662f\u5426\u4e3a\u56de\u6587\u7684\u529f\u80fd\u3002 tests/algo_test.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #!/usr/bin/env python3 import utils.algo import pytest @pytest.fixture def data(): return [3, 2, 1, 5, -3, 2, 0, -2, 11, 9] def test_sel_sort(data): sorted_vals = utils.algo.sel_sort(data) assert sorted_vals == sorted(data) def test_min(): values = (2, 3, 1, 4, 6) val = utils.algo.min(values) assert val == 1 def test_max(): values = (2, 3, 1, 4, 6) val = utils.algo.max(values) assert val == 6 \u8fd9\u4e9b\u662f utils.algo \u6a21\u5757\u7684\u6d4b\u8bd5\u3002 \u6ce8\u610f\uff0c\u6211\u4eec\u4f7f\u7528\u5b8c\u6574\u7684\u6a21\u5757\u540d\u79f0\u3002 tests/srel_test.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python3 import utils.srel import pytest @pytest.mark.parametrize(\"word, expected\", [('kayak', True), ('civic', True), ('forest', False)]) def test_palindrome(word, expected): val = utils.srel.is_palindrome(word) assert val == expected \u8fd9\u662f\u5bf9 is_palindrome() \u529f\u80fd\u7684\u6d4b\u8bd5\u3002 utils/__init__.py utils/tests/__init__.py \u4e24\u4e2a __init__.py \u6587\u4ef6\u5747\u4e3a\u7a7a\u3002 1 2 3 4 5 6 7 8 9 10 $ pytest --pyargs utils ================================================= test session starts ================================================= platform win32 -- Python 3.7.0, pytest-5.0.1, py-1.8.0, pluggy-0.12.0 rootdir: C:\\Users\\Jano\\Documents\\pyprogs\\pytest\\structure collected 6 items utils\\tests\\algo_test.py ... [ 50%] utils\\tests\\srel_test.py ... [100%] ============================================== 6 passed in 0.06 seconds =============================================== \u6211\u4eec\u4f7f\u7528 pytest --pyargs utils \u547d\u4ee4\u8fd0\u884c\u6d4b\u8bd5\u3002 \u5916\u90e8\u6d4b\u8bd5 \u00b6 \u4e0b\u4e00\u4e2a\u793a\u4f8b\u663e\u793a\u4e86\u5e94\u7528\u6e90\u5e03\u5c40\uff0c\u5176\u4e2d\u6d4b\u8bd5\u672a\u96c6\u6210\u5728\u5305\u5185\u3002 1 2 3 4 5 6 7 8 setup.py src \u2514\u2500\u2500\u2500utils \u2502 algo.py \u2502 srel.py tests algo_test.py srel_test.py \u5728\u8fd9\u79cd\u5e03\u5c40\u4e2d\uff0c\u6211\u4eec\u5728\u6e90\u4ee3\u7801\u6811\u4e4b\u5916\u8fdb\u884c\u6d4b\u8bd5\u3002 \u8bf7\u6ce8\u610f\uff0c\u4e0d\u9700\u8981 __init__.py \u6587\u4ef6\u3002 1 2 $ set PYTHONPATH=src $ pytest \u6211\u4eec\u8bbe\u7f6e PYTHONPATH \u5e76\u8fd0\u884c pytest\u3002","title":"Python Pytest \u5355\u5143\u6d4b\u8bd5\u6559\u7a0b"},{"location":"pages/python/pytutorial/python-pytest/#Python-Pytest-\u6559\u7a0b","text":"Python Pytest \u6559\u7a0b \u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528 pytest \u6a21\u5757\u6d4b\u8bd5 Python \u5e94\u7528\u3002","title":"Python Pytest \u6559\u7a0b"},{"location":"pages/python/pytutorial/python-pytest/#python-pytest","text":"Pytest \u662f\u7528\u4e8e\u6d4b\u8bd5 Python \u5e94\u7528\u7684 Python \u5e93\u3002 \u5b83\u662f\u9f3b\u5b50\u6d4b\u8bd5\u548c\u5355\u5143\u6d4b\u8bd5\u7684\u66ff\u4ee3\u65b9\u6cd5\u3002","title":"python pytest"},{"location":"pages/python/pytutorial/python-pytest/#pytest-\u5b89\u88c5","text":"\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5b89\u88c5 Pytest\uff1a 1 $ pip install pytest \u8fd9\u5c06\u5b89\u88c5 pytest \u5e93\u3002","title":"pytest \u5b89\u88c5"},{"location":"pages/python/pytutorial/python-pytest/#pytest-\u6d4b\u8bd5\u53d1\u73b0\u7ea6\u5b9a","text":"\u5982\u679c\u672a\u6307\u5b9a\u4efb\u4f55\u53c2\u6570\uff0c\u5219\u5728 testpaths \uff08\u5982\u679c\u5df2\u914d\u7f6e\uff09\u6216\u5f53\u524d\u76ee\u5f55\u4e2d\u7684\u4f4d\u7f6e\u641c\u7d22\u6d4b\u8bd5\u6587\u4ef6\u3002 \u53e6\u5916\uff0c\u547d\u4ee4\u884c\u53c2\u6570\u53ef\u4ee5\u5728\u76ee\u5f55\uff0c\u6587\u4ef6\u540d\u6216\u8282\u70b9 ID \u7684\u4efb\u4f55\u7ec4\u5408\u4e2d\u4f7f\u7528\u3002 pytest \u5728\u6240\u9009\u76ee\u5f55\u4e2d\u67e5\u627e test_*.py \u6216 *_test.py \u6587\u4ef6\u3002 \u5728\u9009\u5b9a\u7684\u6587\u4ef6\u4e2d\uff0cpytest \u5728\u7c7b\u4e4b\u5916\u67e5\u627e\u5e26\u524d\u7f00\u7684\u6d4b\u8bd5\u51fd\u6570\uff0c\u5e76\u5728\u5e26\u524d\u7f00\u7684\u6d4b\u8bd5\u7c7b\u4e2d\u67e5\u627e\u5e26\u524d\u7f00\u7684\u6d4b\u8bd5\u65b9\u6cd5\uff08\u65e0 __init__() \u65b9\u6cd5\uff09\u3002","title":"pytest \u6d4b\u8bd5\u53d1\u73b0\u7ea6\u5b9a"},{"location":"pages/python/pytutorial/python-pytest/#\u8fd0\u884c-pytest","text":"pytest \u4e0d\u5e26\u4efb\u4f55\u53c2\u6570\uff0c\u5c06\u67e5\u770b\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\uff08\u6216\u5176\u4ed6\u4e00\u4e9b\u9884\u914d\u7f6e\u7684\u76ee\u5f55\uff09\u4ee5\u53ca\u6d4b\u8bd5\u6587\u4ef6\u7684\u6240\u6709\u5b50\u76ee\u5f55\uff0c\u5e76\u8fd0\u884c\u627e\u5230\u7684\u6d4b\u8bd5\u4ee3\u7801\u3002 1 $ pytest \u8fd0\u884c\u5f53\u524d\u76ee\u5f55\u4e2d\u7684\u6240\u6709\u6d4b\u8bd5\u6587\u4ef6\u3002 1 $ pytest min_max_test.py \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u540d\u79f0\u4f5c\u4e3a\u53c2\u6570\u6765\u8fd0\u884c\u7279\u5b9a\u7684\u6d4b\u8bd5\u6587\u4ef6\u3002 1 $ pytest min_max_test.py::test_min \u53ef\u4ee5\u901a\u8fc7\u5728 :: \u5b57\u7b26\u540e\u63d0\u4f9b\u5176\u540d\u79f0\u6765\u8fd0\u884c\u7279\u5b9a\u529f\u80fd\u3002 1 $ pytest -m smoke \u6807\u8bb0\u53ef\u7528\u4e8e\u5bf9\u6d4b\u8bd5\u8fdb\u884c\u5206\u7ec4\u3002 \u7136\u540e\u4f7f\u7528 pytest -m \u8fd0\u884c\u4e00\u7ec4\u6807\u8bb0\u7684\u6d4b\u8bd5\u3002 1 $ pytest -k <expression> \u53e6\u5916\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8868\u8fbe\u5f0f\u6765\u8fd0\u884c\u4e0e\u6d4b\u8bd5\u51fd\u6570\u548c\u7c7b\u7684\u540d\u79f0\u5339\u914d\u7684\u6d4b\u8bd5\u3002","title":"\u8fd0\u884c pytest"},{"location":"pages/python/pytutorial/python-pytest/#Python-pytest-\u7b80\u5355\u793a\u4f8b","text":"\u5728\u7b2c\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 pytest \u6d4b\u8bd5\u4e24\u4e2a\u7b80\u5355\u7684\u6570\u5b66\u7b97\u6cd5\u3002 algo.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 def max(values): _max = values[0] for val in values: if val > _max: _max = val return _max def min(values): _min = values[0] for val in values: if val < _min: _min = val return _min \u6211\u4eec\u6709\u4e00\u4e2a\u5e26\u6709\u81ea\u5b9a\u4e49 max() \u548c min() \u529f\u80fd\u7684\u6a21\u5757\u3002 min_max_test.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python3 import algo def test_min(): values = (2, 3, 1, 4, 6) val = algo.min(values) assert val == 1 def test_max(): values = (2, 3, 1, 4, 6) val = algo.max(values) assert val == 6 \u6d4b\u8bd5\u6587\u4ef6 min_max_test.py \u7684\u540d\u79f0\u4e2d\u5305\u542b\u4e00\u4e2a\u6d4b\u8bd5\u8bcd\u3002 1 2 3 4 5 def test_min(): values = (2, 3, 1, 4, 6) val = algo.min(values) assert val == 1 \u6b64\u5916\uff0c\u6d4b\u8bd5\u529f\u80fd test_min() \u5177\u6709\u6d4b\u8bd5\u5b57\u3002 \u6211\u4eec\u4f7f\u7528 assert \u5173\u952e\u5b57\u6765\u6d4b\u8bd5\u7b97\u6cd5\u7684\u503c\u3002 1 2 3 4 5 6 7 8 9 $ pytest min_max_test.py ================================================= test session starts ================================================= platform win32 -- Python 3.7.0, pytest-5.0.1, py-1.8.0, pluggy-0.12.0 rootdir: C:\\Users\\Jano\\Documents\\pyprogs\\pytest collected 2 items min_max_test.py .. [100%] ============================================== 2 passed in 0.03 seconds =============================================== \u8fd9\u662f\u8f93\u51fa\u3002 \u6709\u4e24\u4e2a\u6d4b\u8bd5\uff0c\u5e76\u4e14\u90fd\u6210\u529f\u901a\u8fc7\u4e86\u3002 pytest -v min_max_test.py \u663e\u793a\u4e86\u66f4\u8be6\u7ec6\u7684\u8f93\u51fa\u3002","title":"Python pytest \u7b80\u5355\u793a\u4f8b"},{"location":"pages/python/pytutorial/python-pytest/#Pytest-\u8df3\u8fc7","text":"\u4f7f\u7528\u8df3\u8fc7\u88c5\u9970\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u8df3\u8fc7\u6307\u5b9a\u7684\u6d4b\u8bd5\u3002 \u8df3\u8fc7\u6d4b\u8bd5\u6709\u591a\u79cd\u539f\u56e0\u3002 \u4f8b\u5982\uff0c\u6570\u636e\u5e93/\u5728\u7ebf\u670d\u52a1\u76ee\u524d\u4e0d\u53ef\u7528\uff0c\u6216\u8005\u6211\u4eec\u8df3\u8fc7\u4e86 Windows \u4e0a\u9488\u5bf9 Linux \u7684\u7279\u5b9a\u6d4b\u8bd5\u3002 skipping.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env python3 import algo import pytest @pytest.mark.skip def test_min(): values = (2, 3, 1, 4, 6) val = algo.min(values) assert val == 1 def test_max(): values = (2, 3, 1, 4, 6) val = algo.max(values) assert val == 6 \u5728\u793a\u4f8b\u4e2d\uff0c test_min() \u88ab\u8df3\u8fc7\u3002 1 2 3 4 5 6 7 8 9 $ pytest min_max_test.py ================================================= test session starts ================================================= platform win32 -- Python 3.7.0, pytest-5.0.1, py-1.8.0, pluggy-0.12.0 rootdir: C:\\Users\\Jano\\Documents\\pyprogs\\pytest collected 2 items min_max_test.py s. [100%] ========================================= 1 passed, 1 skipped in 0.04 seconds ========================================= \u5728\u6d4b\u8bd5\u6587\u4ef6\u540d\u540e\u9762\u7684\u8f93\u51fa\u4e2d\uff0cs \u4ee3\u8868\u8df3\u8fc7\u7684\u548c\u3002 \u901a\u8fc7\u3002","title":"Pytest \u8df3\u8fc7"},{"location":"pages/python/pytutorial/python-pytest/#pytest-\u6807\u8bb0","text":"\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6807\u8bb0\u5c06\u6d4b\u8bd5\u7ec4\u7ec7\u4e3a\u5355\u5143\u3002 marking.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #!/usr/bin/env python3 # pytest -m a marking.py # pytest -m b marking.py import pytest @pytest.mark.a def test_a1(): assert (1) == (1) @pytest.mark.a def test_a2(): assert (1, 2) == (1, 2) @pytest.mark.a def test_a3(): assert (1, 2, 3) == (1, 2, 3) @pytest.mark.b def test_b1(): assert \"falcon\" == \"fal\" + \"con\" @pytest.mark.b def test_b2(): assert \"falcon\" == f\"fal{'con'}\" \u6211\u4eec\u6709\u4e24\u7ec4\u7531\u6807\u8bb0 a \u548c b \u6807\u8bc6\u7684\u6d4b\u8bd5\u3002 \u8fd9\u4e9b\u5355\u5143\u7531 pytest -m a marking.py \u548c pytest -m b marking.py \u8fd0\u884c\u3002","title":"pytest \u6807\u8bb0"},{"location":"pages/python/pytutorial/python-pytest/#Pytest-\u53c2\u6570\u5316\u6d4b\u8bd5","text":"\u901a\u8fc7\u53c2\u6570\u5316\u6d4b\u8bd5\uff0c\u6211\u4eec\u53ef\u4ee5\u5411\u65ad\u8a00\u4e2d\u6dfb\u52a0\u591a\u4e2a\u503c\u3002 \u6211\u4eec\u4f7f\u7528 @pytest.mark.parametrize \u6807\u8bb0\u3002 parametrized.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/usr/bin/env python3 import algo import pytest @pytest.mark.parametrize(\"data, expected\", [((2, 3, 1, 4, 6), 1), ((5, -2, 0, 9, 12), -2), ((200, 100, 0, 300, 400), 0)]) def test_min(data, expected): val = algo.min(data) assert val == expected @pytest.mark.parametrize(\"data, expected\", [((2, 3, 1, 4, 6), 6), ((5, -2, 0, 9, 12), 12), ((200, 100, 0, 300, 400), 400)]) def test_max(data, expected): val = algo.max(data) assert val == expected \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u591a\u4e2a\u8f93\u5165\u6570\u636e\u6d4b\u8bd5\u8fd9\u4e24\u4e2a\u529f\u80fd\u3002 1 2 3 4 5 6 @pytest.mark.parametrize(\"data, expected\", [((2, 3, 1, 4, 6), 1), ((5, -2, 0, 9, 12), -2), ((200, 100, 0, 300, 400), 0)]) def test_min(data, expected): val = algo.min(data) assert val == expected \u6211\u4eec\u5c06\u4e24\u4e2a\u503c\u4f20\u9012\u7ed9\u6d4b\u8bd5\u51fd\u6570\uff1a\u6570\u636e\u548c\u671f\u671b\u503c\u3002 \u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u7528\u4e09\u4e2a\u6570\u636e\u5143\u7ec4\u6d4b\u8bd5 min() \u51fd\u6570\u3002 1 2 3 4 5 6 7 8 9 $ pytest parametrized.py ================================================= test session starts ================================================= platform win32 -- Python 3.7.0, pytest-5.0.1, py-1.8.0, pluggy-0.12.0 rootdir: C:\\Users\\Jano\\Documents\\pyprogs\\pytest collected 6 items parametrized.py ...... [100%] ============================================== 6 passed in 0.03 seconds =============================================== Pytest \u8f93\u51fa\u544a\u77e5\u6709\u516d\u6b21\u8fd0\u884c\u3002","title":"Pytest \u53c2\u6570\u5316\u6d4b\u8bd5"},{"location":"pages/python/pytutorial/python-pytest/#pytest-\u5939\u5177","text":"\u6d4b\u8bd5\u9700\u8981\u5728\u4e00\u7ec4\u5df2\u77e5\u5bf9\u8c61\u7684\u80cc\u666f\u4e0b\u8fdb\u884c\u3002 \u8fd9\u7ec4\u5bf9\u8c61\u79f0\u4e3a\u6d4b\u8bd5\u5939\u5177\u3002 algo.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 def sel_sort(data): if not isinstance(data, list): vals = list(data) else: vals = data size = len(vals) for i in range(0, size): for j in range(i+1, size): if vals[j] < vals[i]: _min = vals[j] vals[j] = vals[i] vals[i] = _min return vals ... \u5bf9\u4e8e\u6b64\u793a\u4f8b\uff0c\u6211\u4eec\u5411 algo.py \u6a21\u5757\u6dfb\u52a0\u4e86\u4e00\u4e2a\u9009\u62e9\u6392\u5e8f\u7b97\u6cd5\u3002 fixtures.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/env python3 import algo import pytest @pytest.fixture def data(): return [3, 2, 1, 5, -3, 2, 0, -2, 11, 9] def test_sel_sort(data): sorted_vals = algo.sel_sort(data) assert sorted_vals == sorted(data) \u6211\u4eec\u7528\u5939\u5177\u6d4b\u8bd5\u9009\u62e9\u6392\u5e8f\u3002 1 2 3 4 @pytest.fixture def data(): return [3, 2, 1, 5, -3, 2, 0, -2, 11, 9] \u6211\u4eec\u7684\u6d4b\u8bd5\u88c5\u7f6e\u4ec5\u8fd4\u56de\u4e00\u4e9b\u6d4b\u8bd5\u6570\u636e\u3002 \u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u901a\u8fc7\u5176\u540d\u79f0\u5f15\u7528\u6b64\u706f\u5177\uff1a data \u3002 1 2 3 4 def test_sel_sort(data): sorted_vals = algo.sel_sort(data) assert sorted_vals == sorted(data) \u5728 test_sel_sort() \u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u5c06\u6570\u636e\u5939\u5177\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\u4f20\u9012\u3002 1 2 3 4 5 6 7 8 9 $ pytest fixtures.py ================================================= test session starts ================================================= platform win32 -- Python 3.7.0, pytest-5.0.1, py-1.8.0, pluggy-0.12.0 rootdir: C:\\Users\\Jano\\Documents\\pyprogs\\pytest collected 1 item fixtures.py . [100%] ============================================== 1 passed in 0.02 seconds =============================================== \u8fd9\u662f\u8f93\u51fa\u3002","title":"pytest \u5939\u5177"},{"location":"pages/python/pytutorial/python-pytest/#Pytest-\u5e03\u5c40","text":"Python \u6d4b\u8bd5\u53ef\u4ee5\u591a\u79cd\u65b9\u5f0f\u7ec4\u7ec7\u3002 \u6d4b\u8bd5\u53ef\u4ee5\u96c6\u6210\u5728 Python \u5305\u4e2d\uff0c\u4e5f\u53ef\u4ee5\u653e\u5728\u5305\u5916\u3002","title":"Pytest \u5e03\u5c40"},{"location":"pages/python/pytutorial/python-pytest/#\u7efc\u5408\u6d4b\u8bd5","text":"\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c55\u793a\u5982\u4f55\u5728 Python \u5305\u4e2d\u8fd0\u884c\u6d4b\u8bd5\u3002 1 2 3 4 5 6 7 8 9 10 setup.py utils \u2502 algo.py \u2502 srel.py \u2502 __init__.py \u2502 \u2514\u2500\u2500\u2500tests algo_test.py srel_test.py __init__.py \u6211\u4eec\u6709\u8fd9\u79cd\u5305\u88c5\u5e03\u5c40\u3002 \u6d4b\u8bd5\u4e0e\u8f6f\u4ef6\u5305\u4e00\u8d77\u4f4d\u4e8e tests \u5b50\u76ee\u5f55\u4e2d\u3002 setup.py 1 2 3 4 5 #!/usr/bin/env python3 from setuptools import setup, find_packages setup(name=\"utils\", packages=find_packages()) \u8fd9\u662f setup.py \u3002 utils/algo.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 def sel_sort(data): if not isinstance(data, list): vals = list(data) else: vals = data size = len(vals) for i in range(0, size): for j in range(i+1, size): if vals[j] < vals[i]: _min = vals[j] vals[j] = vals[i] vals[i] = _min return vals def max(values): _max = values[0] for val in values: if val > _max: _max = val return _max def min(values): _min = values[0] for val in values: if val < _min: _min = val return _min \u8fd9\u662f algo.py \u6587\u4ef6\u3002 utils/srel.py 1 2 3 def is_palindrome(val): return val == val[::-1] \u6211\u4eec\u8fd8\u6709\u53e6\u4e00\u4e2a\u6a21\u5757\uff0c\u5176\u4e2d\u5305\u542b\u4e00\u4e2a\u6d4b\u8bd5\u5355\u8bcd\u662f\u5426\u4e3a\u56de\u6587\u7684\u529f\u80fd\u3002 tests/algo_test.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #!/usr/bin/env python3 import utils.algo import pytest @pytest.fixture def data(): return [3, 2, 1, 5, -3, 2, 0, -2, 11, 9] def test_sel_sort(data): sorted_vals = utils.algo.sel_sort(data) assert sorted_vals == sorted(data) def test_min(): values = (2, 3, 1, 4, 6) val = utils.algo.min(values) assert val == 1 def test_max(): values = (2, 3, 1, 4, 6) val = utils.algo.max(values) assert val == 6 \u8fd9\u4e9b\u662f utils.algo \u6a21\u5757\u7684\u6d4b\u8bd5\u3002 \u6ce8\u610f\uff0c\u6211\u4eec\u4f7f\u7528\u5b8c\u6574\u7684\u6a21\u5757\u540d\u79f0\u3002 tests/srel_test.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python3 import utils.srel import pytest @pytest.mark.parametrize(\"word, expected\", [('kayak', True), ('civic', True), ('forest', False)]) def test_palindrome(word, expected): val = utils.srel.is_palindrome(word) assert val == expected \u8fd9\u662f\u5bf9 is_palindrome() \u529f\u80fd\u7684\u6d4b\u8bd5\u3002 utils/__init__.py utils/tests/__init__.py \u4e24\u4e2a __init__.py \u6587\u4ef6\u5747\u4e3a\u7a7a\u3002 1 2 3 4 5 6 7 8 9 10 $ pytest --pyargs utils ================================================= test session starts ================================================= platform win32 -- Python 3.7.0, pytest-5.0.1, py-1.8.0, pluggy-0.12.0 rootdir: C:\\Users\\Jano\\Documents\\pyprogs\\pytest\\structure collected 6 items utils\\tests\\algo_test.py ... [ 50%] utils\\tests\\srel_test.py ... [100%] ============================================== 6 passed in 0.06 seconds =============================================== \u6211\u4eec\u4f7f\u7528 pytest --pyargs utils \u547d\u4ee4\u8fd0\u884c\u6d4b\u8bd5\u3002","title":"\u7efc\u5408\u6d4b\u8bd5"},{"location":"pages/python/pytutorial/python-pytest/#\u5916\u90e8\u6d4b\u8bd5","text":"\u4e0b\u4e00\u4e2a\u793a\u4f8b\u663e\u793a\u4e86\u5e94\u7528\u6e90\u5e03\u5c40\uff0c\u5176\u4e2d\u6d4b\u8bd5\u672a\u96c6\u6210\u5728\u5305\u5185\u3002 1 2 3 4 5 6 7 8 setup.py src \u2514\u2500\u2500\u2500utils \u2502 algo.py \u2502 srel.py tests algo_test.py srel_test.py \u5728\u8fd9\u79cd\u5e03\u5c40\u4e2d\uff0c\u6211\u4eec\u5728\u6e90\u4ee3\u7801\u6811\u4e4b\u5916\u8fdb\u884c\u6d4b\u8bd5\u3002 \u8bf7\u6ce8\u610f\uff0c\u4e0d\u9700\u8981 __init__.py \u6587\u4ef6\u3002 1 2 $ set PYTHONPATH=src $ pytest \u6211\u4eec\u8bbe\u7f6e PYTHONPATH \u5e76\u8fd0\u884c pytest\u3002","title":"\u5916\u90e8\u6d4b\u8bd5"},{"location":"pages/python/pytutorial/python-regularexpressions/","text":"Python \u6b63\u5219\u8868\u8fbe\u5f0f \u00b6 Python \u6b63\u5219\u8868\u8fbe\u5f0f \u6559\u7a0b\u5c55\u793a\u4e86\u5982\u4f55\u5728 Python \u4e2d\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u3002 \u5bf9\u4e8e Python \u4e2d\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u6211\u4eec\u4f7f\u7528 re \u6a21\u5757\u3002 \u6b63\u5219\u8868\u8fbe\u5f0f\u7528\u4e8e\u6587\u672c\u641c\u7d22\u548c\u66f4\u9ad8\u7ea7\u7684\u6587\u672c\u64cd\u4f5c\u3002 \u6b63\u5219\u8868\u8fbe\u5f0f\u662f\u5185\u7f6e\u5de5\u5177\uff0c\u5982 grep\uff0csed\uff0c\u6587\u672c\u7f16\u8f91\u5668\uff08\u5982 vi\uff0cemacs\uff09\uff0c\u7f16\u7a0b\u8bed\u8a00\uff08\u5982 Tcl\uff0cPerl \u548c Python\uff09\u3002 Python re \u6a21\u5757 \u00b6 \u5728 Python \u4e2d\uff0c re \u6a21\u5757\u63d0\u4f9b\u4e86\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u64cd\u4f5c\u3002 \u6a21\u5f0f\u662f\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u7528\u4e8e\u5b9a\u4e49\u6211\u4eec\u6b63\u5728\u641c\u7d22\u6216\u64cd\u7eb5\u7684\u6587\u672c\u3002 \u5b83\u7531\u6587\u672c\u6587\u5b57\u548c\u5143\u5b57\u7b26\u7ec4\u6210\u3002 \u7528 compile() \u51fd\u6570\u7f16\u8bd1\u8be5\u6a21\u5f0f\u3002 \u7531\u4e8e\u6b63\u5219\u8868\u8fbe\u5f0f\u901a\u5e38\u5305\u542b\u7279\u6b8a\u5b57\u7b26\uff0c\u56e0\u6b64\u5efa\u8bae\u4f7f\u7528\u539f\u59cb\u5b57\u7b26\u4e32\u3002 \uff08\u539f\u59cb\u5b57\u7b26\u4e32\u4ee5 r \u5b57\u7b26\u5f00\u5934\u3002\uff09\u8fd9\u6837\uff0c\u5728\u5c06\u5b57\u7b26\u7f16\u8bd1\u4e3a\u6a21\u5f0f\u4e4b\u524d\uff0c\u4e0d\u4f1a\u5bf9\u8fd9\u4e9b\u5b57\u7b26\u8fdb\u884c\u89e3\u91ca\u3002 \u7f16\u8bd1\u6a21\u5f0f\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528\u5176\u4e2d\u4e00\u4e2a\u51fd\u6570\u5c06\u6a21\u5f0f\u5e94\u7528\u4e8e\u6587\u672c\u5b57\u7b26\u4e32\u3002 \u51fd\u6570\u5305\u62ec match() \uff0c search() \uff0c find() \u548c finditer() \u3002 \u4e0b\u8868\u663e\u793a\u4e86\u4e00\u4e9b\u6b63\u5219\u8868\u8fbe\u5f0f\uff1a \u6b63\u5219\u8868\u8fbe\u5f0f \u542b\u4e49 `.` \u5339\u914d\u4efb\u4f55\u5355\u4e2a\u5b57\u7b26\u3002 `?` \u4e00\u6b21\u5339\u914d\u6216\u6839\u672c\u4e0d\u5339\u914d\u524d\u9762\u7684\u5143\u7d20\u3002 `+` \u4e0e\u524d\u9762\u7684\u5143\u7d20\u5339\u914d\u4e00\u6b21\u6216\u591a\u6b21\u3002 `*` \u4e0e\u524d\u9762\u7684\u5143\u7d20\u5339\u914d\u96f6\u6b21\u6216\u591a\u6b21\u3002 `^` \u5339\u914d\u5b57\u7b26\u4e32\u4e2d\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002 `$` \u5339\u914d\u5b57\u7b26\u4e32\u4e2d\u7684\u7ed3\u675f\u4f4d\u7f6e\u3002 `|` \u5907\u7528\u8fd0\u7b97\u7b26\u3002 `[abc]` \u5339\u914d a \u6216 b \u6216 c\u3002 `[a-c]` \u8303\u56f4; \u5339\u914d a \u6216 b \u6216 c\u3002 `[^abc]` \u5426\u5b9a\uff0c\u5339\u914d\u9664 a \u6216 b \u6216 c \u4e4b\u5916\u7684\u6240\u6709\u5185\u5bb9\u3002 `\\s` \u5339\u914d\u7a7a\u767d\u5b57\u7b26\u3002 `\\w` \u5339\u914d\u5355\u8bcd\u5b57\u7b26\uff1b \u7b49\u540c\u4e8e`[a-zA-Z_0-9]` \u5339\u914d\u51fd\u6570 \u00b6 \u4ee5\u4e0b\u662f\u4e00\u4e2a\u4ee3\u7801\u793a\u4f8b\uff0c\u6f14\u793a\u4e86 Python \u4e2d\u7b80\u5355\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u7528\u6cd5\u3002 match_fun.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/python3 import re words = ('book', 'bookworm', 'Bible', 'bookish','cookbook', 'bookstore', 'pocketbook') pattern = re.compile(r'book') for word in words: if re.match(pattern, word): print('The {} matches '.format(word)) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u5355\u8bcd\u5143\u7ec4\u3002 \u7f16\u8bd1\u540e\u7684\u6a21\u5f0f\u5c06\u5728\u6bcf\u4e2a\u5355\u8bcd\u4e2d\u5bfb\u627e\u4e00\u4e2a\u201c book\u201d\u5b57\u7b26\u4e32\u3002 1 pattern = re.compile(r'book') \u4f7f\u7528 compile() \u51fd\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u56fe\u6848\u3002 \u6b63\u5219\u8868\u8fbe\u5f0f\u662f\u4e00\u4e2a\u539f\u59cb\u5b57\u7b26\u4e32\uff0c\u7531\u56db\u4e2a\u666e\u901a\u5b57\u7b26\u7ec4\u6210\u3002 1 2 3 for word in words: if re.match(pattern, word): print('The {} matches '.format(word)) \u6211\u4eec\u904d\u5386\u5143\u7ec4\u5e76\u8c03\u7528 match() \u51fd\u6570\u3002 \u5b83\u5c06\u6a21\u5f0f\u5e94\u7528\u4e8e\u5355\u8bcd\u3002 \u5982\u679c\u5b57\u7b26\u4e32\u5f00\u5934\u6709\u5339\u914d\u9879\uff0c\u5219 match() \u51fd\u6570\u5c06\u8fd4\u56de\u5339\u914d\u5bf9\u8c61\u3002 1 2 3 4 5 $ ./match_fun.py The book matches The bookworm matches The bookish matches The bookstore matches \u5143\u7ec4\u4e2d\u7684\u56db\u4e2a\u5355\u8bcd\u4e0e\u6a21\u5f0f\u5339\u914d\u3002 \u8bf7\u6ce8\u610f\uff0c\u4ee5\u201c book\u201d\u4e00\u8bcd\u5f00\u5934\u7684\u5355\u8bcd\u4e0d\u5339\u914d\u3002 \u4e3a\u4e86\u5305\u62ec\u8fd9\u4e9b\u8bcd\uff0c\u6211\u4eec\u4f7f\u7528 search() \u51fd\u6570\u3002 \u641c\u7d22\u51fd\u6570 \u00b6 search() \u51fd\u6570\u67e5\u627e\u6b63\u5219\u8868\u8fbe\u5f0f\u6a21\u5f0f\u4ea7\u751f\u5339\u914d\u9879\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u3002 search_fun.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/python3 import re words = ('book', 'bookworm', 'Bible', 'bookish','cookbook', 'bookstore', 'pocketbook') pattern = re.compile(r'book') for word in words: if re.search(pattern, word): print('The {} matches '.format(word)) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 search() \u51fd\u6570\u67e5\u627e\u201c book\u201d\u4e00\u8bcd\u3002 1 2 3 4 5 6 7 $ ./search_fun.py The book matches The bookworm matches The bookish matches The cookbook matches The bookstore matches The pocketbook matches \u8fd9\u6b21\u8fd8\u5305\u62ec\u83dc\u8c31\u548c\u8896\u73cd\u4e66\u4e2d\u7684\u5355\u8bcd\u3002 \u70b9\u5143\u5b57\u7b26 \u00b6 \u70b9\uff08\u3002\uff09\u5143\u5b57\u7b26\u4ee3\u8868\u6587\u672c\u4e2d\u7684\u4efb\u4f55\u5355\u4e2a\u5b57\u7b26\u3002 dot_meta.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/python3 import re words = ('seven', 'even', 'prevent', 'revenge', 'maven', 'eleven', 'amen', 'event') pattern = re.compile(r'.even') for word in words: if re.match(pattern, word): print('The {} matches '.format(word)) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u5e26\u6709\u516b\u4e2a\u5355\u8bcd\u7684\u5143\u7ec4\u3002 \u6211\u4eec\u5728\u6bcf\u4e2a\u5355\u8bcd\u4e0a\u5e94\u7528\u4e00\u4e2a\u5305\u542b\u70b9\u5143\u5b57\u7b26\u7684\u6a21\u5f0f\u3002 1 pattern = re.compile(r'.even') \u70b9\u4ee3\u8868\u6587\u672c\u4e2d\u7684\u4efb\u4f55\u5355\u4e2a\u5b57\u7b26\u3002 \u5b57\u7b26\u5fc5\u987b\u5b58\u5728\u3002 1 2 3 $ ./dot_meta.py The seven matches The revenge matches \u4e24\u4e2a\u5b57\u5339\u914d\u6a21\u5f0f\uff1a\u4e03\u4e2a\u548c\u590d\u4ec7\u3002 \u95ee\u53f7\u5143\u5b57\u7b26 \u00b6 \u95ee\u53f7\uff08\uff1f\uff09\u5143\u5b57\u7b26\u662f\u4e0e\u4e0a\u4e00\u4e2a\u5143\u7d20\u96f6\u6216\u4e00\u6b21\u5339\u914d\u7684\u91cf\u8bcd\u3002 question_mark_meta.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/python3 import re words = ('seven', 'even','prevent', 'revenge', 'maven', 'eleven', 'amen', 'event') pattern = re.compile(r'.?even') for word in words: if re.match(pattern, word): print('The {} matches '.format(word)) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5728\u70b9\u5b57\u7b26\u540e\u6dfb\u52a0\u95ee\u53f7\u3002 \u8fd9\u610f\u5473\u7740\u5728\u6a21\u5f0f\u4e2d\u6211\u4eec\u53ef\u4ee5\u6709\u4e00\u4e2a\u4efb\u610f\u5b57\u7b26\uff0c\u4e5f\u53ef\u4ee5\u5728\u90a3\u91cc\u6ca1\u6709\u4efb\u4f55\u5b57\u7b26\u3002 1 2 3 4 5 $ ./question_mark_meta.py The seven matches The even matches The revenge matches The event matches \u8fd9\u6b21\uff0c\u9664\u4e86\u4e03\u4e2a\u548c\u590d\u4ec7\u5916\uff0c\u5076\u6570\u548c\u4e8b\u4ef6\u8bcd\u4e5f\u5339\u914d\u3002 \u951a\u70b9 \u00b6 \u951a\u70b9\u5339\u914d\u7ed9\u5b9a\u6587\u672c\u5185\u5b57\u7b26\u7684\u4f4d\u7f6e\u3002 \u5f53\u4f7f\u7528 ^ \u951a\u65f6\uff0c\u5339\u914d\u5fc5\u987b\u53d1\u751f\u5728\u5b57\u7b26\u4e32\u7684\u5f00\u5934\uff0c\u800c\u5f53\u4f7f\u7528$\u951a\u65f6\uff0c\u5339\u914d\u5fc5\u987b\u53d1\u751f\u5728\u5b57\u7b26\u4e32\u7684\u7ed3\u5c3e\u3002 anchors.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/python3 import re sentences = ('I am looking for Jane.', 'Jane was walking along the river.', 'Kate and Jane are close friends.') pattern = re.compile(r'^Jane') for sentence in sentences: if re.search(pattern, sentence): print(sentence) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\u4e09\u4e2a\u53e5\u5b50\u3002 \u641c\u7d22\u6a21\u5f0f\u4e3a ^Jane \u3002 \u8be5\u6a21\u5f0f\u68c0\u67e5\u201c Jane\u201d\u5b57\u7b26\u4e32\u662f\u5426\u4f4d\u4e8e\u6587\u672c\u7684\u5f00\u5934\u3002 Jane\\. \u5c06\u5728\u53e5\u5b50\u7ed3\u5c3e\u5904\u67e5\u627e\u201c Jane\u201d\u3002 fullmatch \u00b6 \u53ef\u4ee5\u4f7f\u7528 fullmatch() \u51fd\u6570\u6216\u901a\u8fc7\u5c06\u672f\u8bed\u653e\u5728\u951a\u70b9\u4e4b\u95f4\u6765\u8fdb\u884c\u7cbe\u786e\u5339\u914d\uff1a^\u548c$\u3002 exact_match.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/python3 import re words = ('book', 'bookworm', 'Bible', 'bookish','cookbook', 'bookstore', 'pocketbook') pattern = re.compile(r'^book$') for word in words: if re.search(pattern, word): print('The {} matches'.format(word)) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5bfb\u627e\u4e0e\u201c book\u201d\u4e00\u8bcd\u5b8c\u5168\u5339\u914d\u7684\u5185\u5bb9\u3002 1 2 $ ./exact_match.py The book matches \u8fd9\u662f\u8f93\u51fa\u3002 \u5b57\u7b26\u7c7b \u00b6 \u5b57\u7b26\u7c7b\u5b9a\u4e49\u4e86\u4e00\u7ec4\u5b57\u7b26\uff0c\u4efb\u4f55\u5b57\u7b26\u90fd\u53ef\u4ee5\u51fa\u73b0\u5728\u8f93\u5165\u5b57\u7b26\u4e32\u4e2d\u4ee5\u4f7f\u5339\u914d\u6210\u529f\u3002 character_class.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/python3 import re words = ('a gray bird', 'grey hair', 'great look') pattern = re.compile(r'gr[ea]y') for word in words: if re.search(pattern, word): print('{} matches'.format(word)) \u5728\u8be5\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u5b57\u7b26\u7c7b\u540c\u65f6\u5305\u542b\u7070\u8272\u548c\u7070\u8272\u5355\u8bcd\u3002 1 pattern = re.compile(r'gr[ea]y') [ea] \u7c7b\u5141\u8bb8\u5728\u6a21\u5f0f\u4e2d\u4f7f\u7528\u2019e\u2019\u6216\u2019a\u2019\u5b57\u7b26\u3002 \u547d\u540d\u5b57\u7b26\u7c7b \u00b6 \u6709\u4e00\u4e9b\u9884\u5b9a\u4e49\u7684\u5b57\u7b26\u7c7b\u3002 \\s \u4e0e\u7a7a\u767d\u5b57\u7b26 [\\t\\n\\t\\f\\v] \u5339\u914d\uff0c \\d \u4e0e\u6570\u5b57 [0-9] \u5339\u914d\uff0c \\w \u4e0e\u5355\u8bcd\u5b57\u7b26 [a-zA-Z0-9_] \u5339\u914d\u3002 named_character_class.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/python3 import re text = 'We met in 2013\\. She must be now about 27 years old.' pattern = re.compile(r'\\d+') found = re.findall(pattern, text) if found: print('There are {} numbers'.format(len(found))) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u8ba1\u7b97\u6587\u672c\u4e2d\u7684\u6570\u5b57\u3002 1 pattern = re.compile(r'\\d+') \\d+ \u6a21\u5f0f\u5728\u6587\u672c\u4e2d\u67e5\u627e\u4efb\u610f\u6570\u91cf\u7684\u6570\u5b57\u96c6\u3002 1 found = re.findall(pattern, text) \u4f7f\u7528 findall() \u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u67e5\u627e\u6587\u672c\u4e2d\u7684\u6240\u6709\u6570\u5b57\u3002 1 2 $ ./named_character_classes.py There are 2 numbers \u8fd9\u662f\u8f93\u51fa\u3002 \u4e0d\u533a\u5206\u5927\u5c0f\u5199\u7684\u5339\u914d \u00b6 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6a21\u5f0f\u5339\u914d\u533a\u5206\u5927\u5c0f\u5199\u3002 \u901a\u8fc7\u5c06 re.IGNORECASE \u4f20\u9012\u7ed9 compile() \u51fd\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u5176\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u3002 case_insensitive.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/python3 import re words = ('dog', 'Dog', 'DOG', 'Doggy') pattern = re.compile(r'dog', re.IGNORECASE) for word in words: if re.match(pattern, word): print('{} matches'.format(word)) \u5728\u793a\u4f8b\u4e2d\uff0c\u65e0\u8bba\u5927\u5c0f\u5199\u5982\u4f55\uff0c\u6211\u4eec\u90fd\u5c06\u6a21\u5f0f\u5e94\u7528\u4e8e\u5355\u8bcd\u3002 1 2 3 4 5 $ ./case_insensitive.py dog matches Dog matches DOG matches Doggy matches \u6240\u6709\u56db\u4e2a\u5355\u8bcd\u90fd\u4e0e\u6a21\u5f0f\u5339\u914d\u3002 \u4ea4\u66ff \u00b6 \u4ea4\u66ff\u8fd0\u7b97\u7b26 | \u521b\u5efa\u5177\u6709\u591a\u79cd\u9009\u62e9\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u3002 alternations.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/python3 import re words = (\"Jane\", \"Thomas\", \"Robert\", \"Lucy\", \"Beky\", \"John\", \"Peter\", \"Andy\") pattern = re.compile(r'Jane|Beky|Robert') for word in words: if re.match(pattern, word): print(word) \u5217\u8868\u4e2d\u6709\u516b\u4e2a\u540d\u79f0\u3002 1 pattern = re.compile(r'Jane|Beky|Robert') \u6b64\u6b63\u5219\u8868\u8fbe\u5f0f\u67e5\u627e\u201c\u200b\u200b Jane\u201d\uff0c\u201c Beky\u201d\u6216\u201c Robert\u201d\u5b57\u7b26\u4e32\u3002 \u67e5\u627e\u65b9\u6cd5 \u00b6 finditer() \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u8be5\u8fed\u4ee3\u5668\u5728\u5b57\u7b26\u4e32\u4e2d\u7684\u6a21\u5f0f\u7684\u6240\u6709\u4e0d\u91cd\u53e0\u5339\u914d\u4e0a\u4ea7\u751f\u5339\u914d\u5bf9\u8c61\u3002 find_iter.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/python3 import re text = ('I saw a fox in the wood. The fox had red fur.') pattern = re.compile(r'fox') found = re.finditer(pattern, text) for item in found: s = item.start() e = item.end() print('Found {} at {}:{}'.format(text[s:e], s, e)) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5728\u6587\u672c\u4e2d\u641c\u7d22\u201c fox\u201d\u4e00\u8bcd\u3002 \u6211\u4eec\u904d\u5386\u627e\u5230\u7684\u5339\u914d\u9879\u7684\u8fed\u4ee3\u5668\uff0c\u5e76\u4f7f\u7528\u5b83\u4eec\u7684\u7d22\u5f15\u8fdb\u884c\u6253\u5370\u3002 1 2 s = item.start() e = item.end() start() \u548c end() \u65b9\u6cd5\u5206\u522b\u8fd4\u56de\u8d77\u59cb\u7d22\u5f15\u548c\u7ed3\u675f\u7d22\u5f15\u3002 1 2 3 $ ./find_iter.py Found fox at 8:11 Found fox at 29:32 \u8fd9\u662f\u8f93\u51fa\u3002 \u6355\u83b7\u7ec4 \u00b6 \u6355\u83b7\u7ec4\u662f\u4e00\u79cd\u5c06\u591a\u4e2a\u5b57\u7b26\u89c6\u4e3a\u4e00\u4e2a\u5355\u5143\u7684\u65b9\u6cd5\u3002 \u901a\u8fc7\u5c06\u5b57\u7b26\u653e\u7f6e\u5728\u4e00\u7ec4\u5706\u62ec\u53f7\u5185\u6765\u521b\u5efa\u5b83\u4eec\u3002 \u4f8b\u5982\uff0c\uff08book\uff09\u662f\u5305\u542b\u2019b\u2019\uff0c\u2019o\u2019\uff0c\u2019o\u2019\uff0c\u2019k\u2019\uff0c\u5b57\u7b26\u7684\u5355\u4e2a\u7ec4\u3002 \u6355\u83b7\u7ec4\u6280\u672f\u4f7f\u6211\u4eec\u80fd\u591f\u627e\u51fa\u5b57\u7b26\u4e32\u4e2d\u4e0e\u5e38\u89c4\u6a21\u5f0f\u5339\u914d\u7684\u90a3\u4e9b\u90e8\u5206\u3002 capturing_groups.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/python3 import re content = '''<p>The <code>Pattern</code> is a compiled representation of a regular expression.</p>''' pattern = re.compile(r'(</?[a-z]*>)') found = re.findall(pattern, content) for tag in found: print(tag) \u8be5\u4ee3\u7801\u793a\u4f8b\u901a\u8fc7\u6355\u83b7\u4e00\u7ec4\u5b57\u7b26\u6765\u6253\u5370\u63d0\u4f9b\u7684\u5b57\u7b26\u4e32\u4e2d\u7684\u6240\u6709 HTML \u6807\u7b7e\u3002 1 found = re.findall(pattern, content) \u4e3a\u4e86\u627e\u5230\u6240\u6709\u6807\u7b7e\uff0c\u6211\u4eec\u4f7f\u7528 findall() \u65b9\u6cd5\u3002 1 2 3 4 5 $ ./capturing_groups.py <p> <code> </code> </p> \u6211\u4eec\u627e\u5230\u4e86\u56db\u4e2a HTML \u6807\u7b7e\u3002 Python \u6b63\u5219\u8868\u8fbe\u5f0f\u7535\u5b50\u90ae\u4ef6\u793a\u4f8b \u00b6 \u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u7528\u4e8e\u68c0\u67e5\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u6a21\u5f0f\u3002 emails.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/python3 import re emails = (\"luke@gmail.com\", \"andy@yahoocom\", \"34234sdfa#2345\", \"f344@gmail.com\") pattern = re.compile(r'^[a-zA-Z0-9._-]+@[a-zA-Z0-9-]+\\.[a-zA-Z.]{2,18}$') for email in emails: if re.match(pattern, email): print(\"{} matches\".format(email)) else: print(\"{} does not match\".format(email)) \u672c\u793a\u4f8b\u63d0\u4f9b\u4e86\u4e00\u79cd\u53ef\u80fd\u7684\u89e3\u51b3\u65b9\u6848\u3002 1 pattern = re.compile(r'^[a-zA-Z0-9._-]+@[a-zA-Z0-9-]+\\.[a-zA-Z.]{2,18}$') \u524d ^ \u548c\u540e $ \u4e2a\u5b57\u7b26\u63d0\u4f9b\u7cbe\u786e\u7684\u6a21\u5f0f\u5339\u914d\u3002 \u6a21\u5f0f\u524d\u540e\u4e0d\u5141\u8bb8\u6709\u5b57\u7b26\u3002 \u7535\u5b50\u90ae\u4ef6\u5206\u4e3a\u4e94\u4e2a\u90e8\u5206\u3002 \u7b2c\u4e00\u90e8\u5206\u662f\u672c\u5730\u90e8\u5206\u3002 \u8fd9\u901a\u5e38\u662f\u516c\u53f8\uff0c\u4e2a\u4eba\u6216\u6635\u79f0\u7684\u540d\u79f0\u3002 [a-zA-Z0-9._-]+ \u5217\u51fa\u4e86\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u672c\u5730\u4f7f\u7528\u3002 \u5b83\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u6b21\u6216\u591a\u6b21\u3002 \u7b2c\u4e8c\u90e8\u5206\u7531\u6587\u5b57 @ \u5b57\u7b26\u7ec4\u6210\u3002 \u7b2c\u4e09\u90e8\u5206\u662f\u9886\u57df\u90e8\u5206\u3002 \u901a\u5e38\u662f\u7535\u5b50\u90ae\u4ef6\u63d0\u4f9b\u5546\u7684\u57df\u540d\uff0c\u4f8b\u5982 yahoo \u6216 gmail\u3002 [a-zA-Z0-9-]+ \u662f\u4e00\u4e2a\u5b57\u7b26\u7c7b\uff0c\u63d0\u4f9b\u53ef\u5728\u57df\u540d\u4e2d\u4f7f\u7528\u7684\u6240\u6709\u5b57\u7b26\u3002 + \u91cf\u8bcd\u5141\u8bb8\u4f7f\u7528\u8fd9\u4e9b\u5b57\u7b26\u4e2d\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u3002 \u7b2c\u56db\u90e8\u5206\u662f\u70b9\u5b57\u7b26\u3002 \u5b83\u524d\u9762\u5e26\u6709\u8f6c\u4e49\u5b57\u7b26\uff08\\\uff09\uff0c\u4ee5\u83b7\u53d6\u6587\u5b57\u70b9\u3002 \u6700\u540e\u4e00\u90e8\u5206\u662f\u9876\u7ea7\u57df\uff1a [a-zA-Z.]{2,18} \u3002 \u9876\u7ea7\u57df\u53ef\u4ee5\u5305\u542b 2 \u5230 18 \u4e2a\u5b57\u7b26\uff0c\u4f8b\u5982 sk\uff0cnet\uff0c\u4fe1\u606f\uff0c\u65c5\u884c\uff0c\u6e05\u6d01\uff0c\u65c5\u884c\u4fdd\u9669\u3002 \u6700\u5927\u957f\u5ea6\u53ef\u4ee5\u4e3a 63 \u4e2a\u5b57\u7b26\uff0c\u4f46\u662f\u4eca\u5929\u5927\u591a\u6570\u57df\u90fd\u5c11\u4e8e 18 \u4e2a\u5b57\u7b26\u3002 \u8fd8\u6709\u4e00\u4e2a\u70b9\u5b57\u7b26\u3002 \u8fd9\u662f\u56e0\u4e3a\u67d0\u4e9b\u9876\u7ea7\u57df\u5305\u542b\u4e24\u4e2a\u90e8\u5206\uff1a \u4f8b\u5982 co.uk\u3002 1 2 3 4 5 $ ./emails.py luke@gmail.com matches andy@yahoocom does not match 34234sdfa#2345 does not match f344@gmail.com matches \u8fd9\u662f\u8f93\u51fa\u3002","title":"Python \u6b63\u5219\u8868\u8fbe\u5f0f"},{"location":"pages/python/pytutorial/python-regularexpressions/#Python-\u6b63\u5219\u8868\u8fbe\u5f0f","text":"Python \u6b63\u5219\u8868\u8fbe\u5f0f \u6559\u7a0b\u5c55\u793a\u4e86\u5982\u4f55\u5728 Python \u4e2d\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u3002 \u5bf9\u4e8e Python \u4e2d\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u6211\u4eec\u4f7f\u7528 re \u6a21\u5757\u3002 \u6b63\u5219\u8868\u8fbe\u5f0f\u7528\u4e8e\u6587\u672c\u641c\u7d22\u548c\u66f4\u9ad8\u7ea7\u7684\u6587\u672c\u64cd\u4f5c\u3002 \u6b63\u5219\u8868\u8fbe\u5f0f\u662f\u5185\u7f6e\u5de5\u5177\uff0c\u5982 grep\uff0csed\uff0c\u6587\u672c\u7f16\u8f91\u5668\uff08\u5982 vi\uff0cemacs\uff09\uff0c\u7f16\u7a0b\u8bed\u8a00\uff08\u5982 Tcl\uff0cPerl \u548c Python\uff09\u3002","title":"Python \u6b63\u5219\u8868\u8fbe\u5f0f"},{"location":"pages/python/pytutorial/python-regularexpressions/#Python-re\u6a21\u5757","text":"\u5728 Python \u4e2d\uff0c re \u6a21\u5757\u63d0\u4f9b\u4e86\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u64cd\u4f5c\u3002 \u6a21\u5f0f\u662f\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u7528\u4e8e\u5b9a\u4e49\u6211\u4eec\u6b63\u5728\u641c\u7d22\u6216\u64cd\u7eb5\u7684\u6587\u672c\u3002 \u5b83\u7531\u6587\u672c\u6587\u5b57\u548c\u5143\u5b57\u7b26\u7ec4\u6210\u3002 \u7528 compile() \u51fd\u6570\u7f16\u8bd1\u8be5\u6a21\u5f0f\u3002 \u7531\u4e8e\u6b63\u5219\u8868\u8fbe\u5f0f\u901a\u5e38\u5305\u542b\u7279\u6b8a\u5b57\u7b26\uff0c\u56e0\u6b64\u5efa\u8bae\u4f7f\u7528\u539f\u59cb\u5b57\u7b26\u4e32\u3002 \uff08\u539f\u59cb\u5b57\u7b26\u4e32\u4ee5 r \u5b57\u7b26\u5f00\u5934\u3002\uff09\u8fd9\u6837\uff0c\u5728\u5c06\u5b57\u7b26\u7f16\u8bd1\u4e3a\u6a21\u5f0f\u4e4b\u524d\uff0c\u4e0d\u4f1a\u5bf9\u8fd9\u4e9b\u5b57\u7b26\u8fdb\u884c\u89e3\u91ca\u3002 \u7f16\u8bd1\u6a21\u5f0f\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528\u5176\u4e2d\u4e00\u4e2a\u51fd\u6570\u5c06\u6a21\u5f0f\u5e94\u7528\u4e8e\u6587\u672c\u5b57\u7b26\u4e32\u3002 \u51fd\u6570\u5305\u62ec match() \uff0c search() \uff0c find() \u548c finditer() \u3002 \u4e0b\u8868\u663e\u793a\u4e86\u4e00\u4e9b\u6b63\u5219\u8868\u8fbe\u5f0f\uff1a \u6b63\u5219\u8868\u8fbe\u5f0f \u542b\u4e49 `.` \u5339\u914d\u4efb\u4f55\u5355\u4e2a\u5b57\u7b26\u3002 `?` \u4e00\u6b21\u5339\u914d\u6216\u6839\u672c\u4e0d\u5339\u914d\u524d\u9762\u7684\u5143\u7d20\u3002 `+` \u4e0e\u524d\u9762\u7684\u5143\u7d20\u5339\u914d\u4e00\u6b21\u6216\u591a\u6b21\u3002 `*` \u4e0e\u524d\u9762\u7684\u5143\u7d20\u5339\u914d\u96f6\u6b21\u6216\u591a\u6b21\u3002 `^` \u5339\u914d\u5b57\u7b26\u4e32\u4e2d\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002 `$` \u5339\u914d\u5b57\u7b26\u4e32\u4e2d\u7684\u7ed3\u675f\u4f4d\u7f6e\u3002 `|` \u5907\u7528\u8fd0\u7b97\u7b26\u3002 `[abc]` \u5339\u914d a \u6216 b \u6216 c\u3002 `[a-c]` \u8303\u56f4; \u5339\u914d a \u6216 b \u6216 c\u3002 `[^abc]` \u5426\u5b9a\uff0c\u5339\u914d\u9664 a \u6216 b \u6216 c \u4e4b\u5916\u7684\u6240\u6709\u5185\u5bb9\u3002 `\\s` \u5339\u914d\u7a7a\u767d\u5b57\u7b26\u3002 `\\w` \u5339\u914d\u5355\u8bcd\u5b57\u7b26\uff1b \u7b49\u540c\u4e8e`[a-zA-Z_0-9]`","title":"Python re\u6a21\u5757"},{"location":"pages/python/pytutorial/python-regularexpressions/#\u5339\u914d\u51fd\u6570","text":"\u4ee5\u4e0b\u662f\u4e00\u4e2a\u4ee3\u7801\u793a\u4f8b\uff0c\u6f14\u793a\u4e86 Python \u4e2d\u7b80\u5355\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u7528\u6cd5\u3002 match_fun.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/python3 import re words = ('book', 'bookworm', 'Bible', 'bookish','cookbook', 'bookstore', 'pocketbook') pattern = re.compile(r'book') for word in words: if re.match(pattern, word): print('The {} matches '.format(word)) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u5355\u8bcd\u5143\u7ec4\u3002 \u7f16\u8bd1\u540e\u7684\u6a21\u5f0f\u5c06\u5728\u6bcf\u4e2a\u5355\u8bcd\u4e2d\u5bfb\u627e\u4e00\u4e2a\u201c book\u201d\u5b57\u7b26\u4e32\u3002 1 pattern = re.compile(r'book') \u4f7f\u7528 compile() \u51fd\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u56fe\u6848\u3002 \u6b63\u5219\u8868\u8fbe\u5f0f\u662f\u4e00\u4e2a\u539f\u59cb\u5b57\u7b26\u4e32\uff0c\u7531\u56db\u4e2a\u666e\u901a\u5b57\u7b26\u7ec4\u6210\u3002 1 2 3 for word in words: if re.match(pattern, word): print('The {} matches '.format(word)) \u6211\u4eec\u904d\u5386\u5143\u7ec4\u5e76\u8c03\u7528 match() \u51fd\u6570\u3002 \u5b83\u5c06\u6a21\u5f0f\u5e94\u7528\u4e8e\u5355\u8bcd\u3002 \u5982\u679c\u5b57\u7b26\u4e32\u5f00\u5934\u6709\u5339\u914d\u9879\uff0c\u5219 match() \u51fd\u6570\u5c06\u8fd4\u56de\u5339\u914d\u5bf9\u8c61\u3002 1 2 3 4 5 $ ./match_fun.py The book matches The bookworm matches The bookish matches The bookstore matches \u5143\u7ec4\u4e2d\u7684\u56db\u4e2a\u5355\u8bcd\u4e0e\u6a21\u5f0f\u5339\u914d\u3002 \u8bf7\u6ce8\u610f\uff0c\u4ee5\u201c book\u201d\u4e00\u8bcd\u5f00\u5934\u7684\u5355\u8bcd\u4e0d\u5339\u914d\u3002 \u4e3a\u4e86\u5305\u62ec\u8fd9\u4e9b\u8bcd\uff0c\u6211\u4eec\u4f7f\u7528 search() \u51fd\u6570\u3002","title":"\u5339\u914d\u51fd\u6570"},{"location":"pages/python/pytutorial/python-regularexpressions/#\u641c\u7d22\u51fd\u6570","text":"search() \u51fd\u6570\u67e5\u627e\u6b63\u5219\u8868\u8fbe\u5f0f\u6a21\u5f0f\u4ea7\u751f\u5339\u914d\u9879\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u3002 search_fun.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/python3 import re words = ('book', 'bookworm', 'Bible', 'bookish','cookbook', 'bookstore', 'pocketbook') pattern = re.compile(r'book') for word in words: if re.search(pattern, word): print('The {} matches '.format(word)) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 search() \u51fd\u6570\u67e5\u627e\u201c book\u201d\u4e00\u8bcd\u3002 1 2 3 4 5 6 7 $ ./search_fun.py The book matches The bookworm matches The bookish matches The cookbook matches The bookstore matches The pocketbook matches \u8fd9\u6b21\u8fd8\u5305\u62ec\u83dc\u8c31\u548c\u8896\u73cd\u4e66\u4e2d\u7684\u5355\u8bcd\u3002","title":"\u641c\u7d22\u51fd\u6570"},{"location":"pages/python/pytutorial/python-regularexpressions/#\u70b9\u5143\u5b57\u7b26","text":"\u70b9\uff08\u3002\uff09\u5143\u5b57\u7b26\u4ee3\u8868\u6587\u672c\u4e2d\u7684\u4efb\u4f55\u5355\u4e2a\u5b57\u7b26\u3002 dot_meta.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/python3 import re words = ('seven', 'even', 'prevent', 'revenge', 'maven', 'eleven', 'amen', 'event') pattern = re.compile(r'.even') for word in words: if re.match(pattern, word): print('The {} matches '.format(word)) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u5e26\u6709\u516b\u4e2a\u5355\u8bcd\u7684\u5143\u7ec4\u3002 \u6211\u4eec\u5728\u6bcf\u4e2a\u5355\u8bcd\u4e0a\u5e94\u7528\u4e00\u4e2a\u5305\u542b\u70b9\u5143\u5b57\u7b26\u7684\u6a21\u5f0f\u3002 1 pattern = re.compile(r'.even') \u70b9\u4ee3\u8868\u6587\u672c\u4e2d\u7684\u4efb\u4f55\u5355\u4e2a\u5b57\u7b26\u3002 \u5b57\u7b26\u5fc5\u987b\u5b58\u5728\u3002 1 2 3 $ ./dot_meta.py The seven matches The revenge matches \u4e24\u4e2a\u5b57\u5339\u914d\u6a21\u5f0f\uff1a\u4e03\u4e2a\u548c\u590d\u4ec7\u3002","title":"\u70b9\u5143\u5b57\u7b26"},{"location":"pages/python/pytutorial/python-regularexpressions/#\u95ee\u53f7\u5143\u5b57\u7b26","text":"\u95ee\u53f7\uff08\uff1f\uff09\u5143\u5b57\u7b26\u662f\u4e0e\u4e0a\u4e00\u4e2a\u5143\u7d20\u96f6\u6216\u4e00\u6b21\u5339\u914d\u7684\u91cf\u8bcd\u3002 question_mark_meta.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/python3 import re words = ('seven', 'even','prevent', 'revenge', 'maven', 'eleven', 'amen', 'event') pattern = re.compile(r'.?even') for word in words: if re.match(pattern, word): print('The {} matches '.format(word)) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5728\u70b9\u5b57\u7b26\u540e\u6dfb\u52a0\u95ee\u53f7\u3002 \u8fd9\u610f\u5473\u7740\u5728\u6a21\u5f0f\u4e2d\u6211\u4eec\u53ef\u4ee5\u6709\u4e00\u4e2a\u4efb\u610f\u5b57\u7b26\uff0c\u4e5f\u53ef\u4ee5\u5728\u90a3\u91cc\u6ca1\u6709\u4efb\u4f55\u5b57\u7b26\u3002 1 2 3 4 5 $ ./question_mark_meta.py The seven matches The even matches The revenge matches The event matches \u8fd9\u6b21\uff0c\u9664\u4e86\u4e03\u4e2a\u548c\u590d\u4ec7\u5916\uff0c\u5076\u6570\u548c\u4e8b\u4ef6\u8bcd\u4e5f\u5339\u914d\u3002","title":"\u95ee\u53f7\u5143\u5b57\u7b26"},{"location":"pages/python/pytutorial/python-regularexpressions/#\u951a\u70b9","text":"\u951a\u70b9\u5339\u914d\u7ed9\u5b9a\u6587\u672c\u5185\u5b57\u7b26\u7684\u4f4d\u7f6e\u3002 \u5f53\u4f7f\u7528 ^ \u951a\u65f6\uff0c\u5339\u914d\u5fc5\u987b\u53d1\u751f\u5728\u5b57\u7b26\u4e32\u7684\u5f00\u5934\uff0c\u800c\u5f53\u4f7f\u7528$\u951a\u65f6\uff0c\u5339\u914d\u5fc5\u987b\u53d1\u751f\u5728\u5b57\u7b26\u4e32\u7684\u7ed3\u5c3e\u3002 anchors.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/python3 import re sentences = ('I am looking for Jane.', 'Jane was walking along the river.', 'Kate and Jane are close friends.') pattern = re.compile(r'^Jane') for sentence in sentences: if re.search(pattern, sentence): print(sentence) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\u4e09\u4e2a\u53e5\u5b50\u3002 \u641c\u7d22\u6a21\u5f0f\u4e3a ^Jane \u3002 \u8be5\u6a21\u5f0f\u68c0\u67e5\u201c Jane\u201d\u5b57\u7b26\u4e32\u662f\u5426\u4f4d\u4e8e\u6587\u672c\u7684\u5f00\u5934\u3002 Jane\\. \u5c06\u5728\u53e5\u5b50\u7ed3\u5c3e\u5904\u67e5\u627e\u201c Jane\u201d\u3002","title":"\u951a\u70b9"},{"location":"pages/python/pytutorial/python-regularexpressions/#fullmatch","text":"\u53ef\u4ee5\u4f7f\u7528 fullmatch() \u51fd\u6570\u6216\u901a\u8fc7\u5c06\u672f\u8bed\u653e\u5728\u951a\u70b9\u4e4b\u95f4\u6765\u8fdb\u884c\u7cbe\u786e\u5339\u914d\uff1a^\u548c$\u3002 exact_match.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/python3 import re words = ('book', 'bookworm', 'Bible', 'bookish','cookbook', 'bookstore', 'pocketbook') pattern = re.compile(r'^book$') for word in words: if re.search(pattern, word): print('The {} matches'.format(word)) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5bfb\u627e\u4e0e\u201c book\u201d\u4e00\u8bcd\u5b8c\u5168\u5339\u914d\u7684\u5185\u5bb9\u3002 1 2 $ ./exact_match.py The book matches \u8fd9\u662f\u8f93\u51fa\u3002","title":"fullmatch"},{"location":"pages/python/pytutorial/python-regularexpressions/#\u5b57\u7b26\u7c7b","text":"\u5b57\u7b26\u7c7b\u5b9a\u4e49\u4e86\u4e00\u7ec4\u5b57\u7b26\uff0c\u4efb\u4f55\u5b57\u7b26\u90fd\u53ef\u4ee5\u51fa\u73b0\u5728\u8f93\u5165\u5b57\u7b26\u4e32\u4e2d\u4ee5\u4f7f\u5339\u914d\u6210\u529f\u3002 character_class.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/python3 import re words = ('a gray bird', 'grey hair', 'great look') pattern = re.compile(r'gr[ea]y') for word in words: if re.search(pattern, word): print('{} matches'.format(word)) \u5728\u8be5\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u5b57\u7b26\u7c7b\u540c\u65f6\u5305\u542b\u7070\u8272\u548c\u7070\u8272\u5355\u8bcd\u3002 1 pattern = re.compile(r'gr[ea]y') [ea] \u7c7b\u5141\u8bb8\u5728\u6a21\u5f0f\u4e2d\u4f7f\u7528\u2019e\u2019\u6216\u2019a\u2019\u5b57\u7b26\u3002","title":"\u5b57\u7b26\u7c7b"},{"location":"pages/python/pytutorial/python-regularexpressions/#\u547d\u540d\u5b57\u7b26\u7c7b","text":"\u6709\u4e00\u4e9b\u9884\u5b9a\u4e49\u7684\u5b57\u7b26\u7c7b\u3002 \\s \u4e0e\u7a7a\u767d\u5b57\u7b26 [\\t\\n\\t\\f\\v] \u5339\u914d\uff0c \\d \u4e0e\u6570\u5b57 [0-9] \u5339\u914d\uff0c \\w \u4e0e\u5355\u8bcd\u5b57\u7b26 [a-zA-Z0-9_] \u5339\u914d\u3002 named_character_class.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/python3 import re text = 'We met in 2013\\. She must be now about 27 years old.' pattern = re.compile(r'\\d+') found = re.findall(pattern, text) if found: print('There are {} numbers'.format(len(found))) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u8ba1\u7b97\u6587\u672c\u4e2d\u7684\u6570\u5b57\u3002 1 pattern = re.compile(r'\\d+') \\d+ \u6a21\u5f0f\u5728\u6587\u672c\u4e2d\u67e5\u627e\u4efb\u610f\u6570\u91cf\u7684\u6570\u5b57\u96c6\u3002 1 found = re.findall(pattern, text) \u4f7f\u7528 findall() \u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u67e5\u627e\u6587\u672c\u4e2d\u7684\u6240\u6709\u6570\u5b57\u3002 1 2 $ ./named_character_classes.py There are 2 numbers \u8fd9\u662f\u8f93\u51fa\u3002","title":"\u547d\u540d\u5b57\u7b26\u7c7b"},{"location":"pages/python/pytutorial/python-regularexpressions/#\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u7684\u5339\u914d","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6a21\u5f0f\u5339\u914d\u533a\u5206\u5927\u5c0f\u5199\u3002 \u901a\u8fc7\u5c06 re.IGNORECASE \u4f20\u9012\u7ed9 compile() \u51fd\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u5176\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u3002 case_insensitive.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/python3 import re words = ('dog', 'Dog', 'DOG', 'Doggy') pattern = re.compile(r'dog', re.IGNORECASE) for word in words: if re.match(pattern, word): print('{} matches'.format(word)) \u5728\u793a\u4f8b\u4e2d\uff0c\u65e0\u8bba\u5927\u5c0f\u5199\u5982\u4f55\uff0c\u6211\u4eec\u90fd\u5c06\u6a21\u5f0f\u5e94\u7528\u4e8e\u5355\u8bcd\u3002 1 2 3 4 5 $ ./case_insensitive.py dog matches Dog matches DOG matches Doggy matches \u6240\u6709\u56db\u4e2a\u5355\u8bcd\u90fd\u4e0e\u6a21\u5f0f\u5339\u914d\u3002","title":"\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u7684\u5339\u914d"},{"location":"pages/python/pytutorial/python-regularexpressions/#\u4ea4\u66ff","text":"\u4ea4\u66ff\u8fd0\u7b97\u7b26 | \u521b\u5efa\u5177\u6709\u591a\u79cd\u9009\u62e9\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u3002 alternations.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/python3 import re words = (\"Jane\", \"Thomas\", \"Robert\", \"Lucy\", \"Beky\", \"John\", \"Peter\", \"Andy\") pattern = re.compile(r'Jane|Beky|Robert') for word in words: if re.match(pattern, word): print(word) \u5217\u8868\u4e2d\u6709\u516b\u4e2a\u540d\u79f0\u3002 1 pattern = re.compile(r'Jane|Beky|Robert') \u6b64\u6b63\u5219\u8868\u8fbe\u5f0f\u67e5\u627e\u201c\u200b\u200b Jane\u201d\uff0c\u201c Beky\u201d\u6216\u201c Robert\u201d\u5b57\u7b26\u4e32\u3002","title":"\u4ea4\u66ff"},{"location":"pages/python/pytutorial/python-regularexpressions/#\u67e5\u627e\u65b9\u6cd5","text":"finditer() \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u8be5\u8fed\u4ee3\u5668\u5728\u5b57\u7b26\u4e32\u4e2d\u7684\u6a21\u5f0f\u7684\u6240\u6709\u4e0d\u91cd\u53e0\u5339\u914d\u4e0a\u4ea7\u751f\u5339\u914d\u5bf9\u8c61\u3002 find_iter.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/python3 import re text = ('I saw a fox in the wood. The fox had red fur.') pattern = re.compile(r'fox') found = re.finditer(pattern, text) for item in found: s = item.start() e = item.end() print('Found {} at {}:{}'.format(text[s:e], s, e)) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5728\u6587\u672c\u4e2d\u641c\u7d22\u201c fox\u201d\u4e00\u8bcd\u3002 \u6211\u4eec\u904d\u5386\u627e\u5230\u7684\u5339\u914d\u9879\u7684\u8fed\u4ee3\u5668\uff0c\u5e76\u4f7f\u7528\u5b83\u4eec\u7684\u7d22\u5f15\u8fdb\u884c\u6253\u5370\u3002 1 2 s = item.start() e = item.end() start() \u548c end() \u65b9\u6cd5\u5206\u522b\u8fd4\u56de\u8d77\u59cb\u7d22\u5f15\u548c\u7ed3\u675f\u7d22\u5f15\u3002 1 2 3 $ ./find_iter.py Found fox at 8:11 Found fox at 29:32 \u8fd9\u662f\u8f93\u51fa\u3002","title":"\u67e5\u627e\u65b9\u6cd5"},{"location":"pages/python/pytutorial/python-regularexpressions/#\u6355\u83b7\u7ec4","text":"\u6355\u83b7\u7ec4\u662f\u4e00\u79cd\u5c06\u591a\u4e2a\u5b57\u7b26\u89c6\u4e3a\u4e00\u4e2a\u5355\u5143\u7684\u65b9\u6cd5\u3002 \u901a\u8fc7\u5c06\u5b57\u7b26\u653e\u7f6e\u5728\u4e00\u7ec4\u5706\u62ec\u53f7\u5185\u6765\u521b\u5efa\u5b83\u4eec\u3002 \u4f8b\u5982\uff0c\uff08book\uff09\u662f\u5305\u542b\u2019b\u2019\uff0c\u2019o\u2019\uff0c\u2019o\u2019\uff0c\u2019k\u2019\uff0c\u5b57\u7b26\u7684\u5355\u4e2a\u7ec4\u3002 \u6355\u83b7\u7ec4\u6280\u672f\u4f7f\u6211\u4eec\u80fd\u591f\u627e\u51fa\u5b57\u7b26\u4e32\u4e2d\u4e0e\u5e38\u89c4\u6a21\u5f0f\u5339\u914d\u7684\u90a3\u4e9b\u90e8\u5206\u3002 capturing_groups.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/python3 import re content = '''<p>The <code>Pattern</code> is a compiled representation of a regular expression.</p>''' pattern = re.compile(r'(</?[a-z]*>)') found = re.findall(pattern, content) for tag in found: print(tag) \u8be5\u4ee3\u7801\u793a\u4f8b\u901a\u8fc7\u6355\u83b7\u4e00\u7ec4\u5b57\u7b26\u6765\u6253\u5370\u63d0\u4f9b\u7684\u5b57\u7b26\u4e32\u4e2d\u7684\u6240\u6709 HTML \u6807\u7b7e\u3002 1 found = re.findall(pattern, content) \u4e3a\u4e86\u627e\u5230\u6240\u6709\u6807\u7b7e\uff0c\u6211\u4eec\u4f7f\u7528 findall() \u65b9\u6cd5\u3002 1 2 3 4 5 $ ./capturing_groups.py <p> <code> </code> </p> \u6211\u4eec\u627e\u5230\u4e86\u56db\u4e2a HTML \u6807\u7b7e\u3002","title":"\u6355\u83b7\u7ec4"},{"location":"pages/python/pytutorial/python-regularexpressions/#Python-\u6b63\u5219\u8868\u8fbe\u5f0f\u7535\u5b50\u90ae\u4ef6\u793a\u4f8b","text":"\u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u7528\u4e8e\u68c0\u67e5\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u6a21\u5f0f\u3002 emails.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/python3 import re emails = (\"luke@gmail.com\", \"andy@yahoocom\", \"34234sdfa#2345\", \"f344@gmail.com\") pattern = re.compile(r'^[a-zA-Z0-9._-]+@[a-zA-Z0-9-]+\\.[a-zA-Z.]{2,18}$') for email in emails: if re.match(pattern, email): print(\"{} matches\".format(email)) else: print(\"{} does not match\".format(email)) \u672c\u793a\u4f8b\u63d0\u4f9b\u4e86\u4e00\u79cd\u53ef\u80fd\u7684\u89e3\u51b3\u65b9\u6848\u3002 1 pattern = re.compile(r'^[a-zA-Z0-9._-]+@[a-zA-Z0-9-]+\\.[a-zA-Z.]{2,18}$') \u524d ^ \u548c\u540e $ \u4e2a\u5b57\u7b26\u63d0\u4f9b\u7cbe\u786e\u7684\u6a21\u5f0f\u5339\u914d\u3002 \u6a21\u5f0f\u524d\u540e\u4e0d\u5141\u8bb8\u6709\u5b57\u7b26\u3002 \u7535\u5b50\u90ae\u4ef6\u5206\u4e3a\u4e94\u4e2a\u90e8\u5206\u3002 \u7b2c\u4e00\u90e8\u5206\u662f\u672c\u5730\u90e8\u5206\u3002 \u8fd9\u901a\u5e38\u662f\u516c\u53f8\uff0c\u4e2a\u4eba\u6216\u6635\u79f0\u7684\u540d\u79f0\u3002 [a-zA-Z0-9._-]+ \u5217\u51fa\u4e86\u6240\u6709\u53ef\u80fd\u7684\u5b57\u7b26\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u672c\u5730\u4f7f\u7528\u3002 \u5b83\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u6b21\u6216\u591a\u6b21\u3002 \u7b2c\u4e8c\u90e8\u5206\u7531\u6587\u5b57 @ \u5b57\u7b26\u7ec4\u6210\u3002 \u7b2c\u4e09\u90e8\u5206\u662f\u9886\u57df\u90e8\u5206\u3002 \u901a\u5e38\u662f\u7535\u5b50\u90ae\u4ef6\u63d0\u4f9b\u5546\u7684\u57df\u540d\uff0c\u4f8b\u5982 yahoo \u6216 gmail\u3002 [a-zA-Z0-9-]+ \u662f\u4e00\u4e2a\u5b57\u7b26\u7c7b\uff0c\u63d0\u4f9b\u53ef\u5728\u57df\u540d\u4e2d\u4f7f\u7528\u7684\u6240\u6709\u5b57\u7b26\u3002 + \u91cf\u8bcd\u5141\u8bb8\u4f7f\u7528\u8fd9\u4e9b\u5b57\u7b26\u4e2d\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u3002 \u7b2c\u56db\u90e8\u5206\u662f\u70b9\u5b57\u7b26\u3002 \u5b83\u524d\u9762\u5e26\u6709\u8f6c\u4e49\u5b57\u7b26\uff08\\\uff09\uff0c\u4ee5\u83b7\u53d6\u6587\u5b57\u70b9\u3002 \u6700\u540e\u4e00\u90e8\u5206\u662f\u9876\u7ea7\u57df\uff1a [a-zA-Z.]{2,18} \u3002 \u9876\u7ea7\u57df\u53ef\u4ee5\u5305\u542b 2 \u5230 18 \u4e2a\u5b57\u7b26\uff0c\u4f8b\u5982 sk\uff0cnet\uff0c\u4fe1\u606f\uff0c\u65c5\u884c\uff0c\u6e05\u6d01\uff0c\u65c5\u884c\u4fdd\u9669\u3002 \u6700\u5927\u957f\u5ea6\u53ef\u4ee5\u4e3a 63 \u4e2a\u5b57\u7b26\uff0c\u4f46\u662f\u4eca\u5929\u5927\u591a\u6570\u57df\u90fd\u5c11\u4e8e 18 \u4e2a\u5b57\u7b26\u3002 \u8fd8\u6709\u4e00\u4e2a\u70b9\u5b57\u7b26\u3002 \u8fd9\u662f\u56e0\u4e3a\u67d0\u4e9b\u9876\u7ea7\u57df\u5305\u542b\u4e24\u4e2a\u90e8\u5206\uff1a \u4f8b\u5982 co.uk\u3002 1 2 3 4 5 $ ./emails.py luke@gmail.com matches andy@yahoocom does not match 34234sdfa#2345 does not match f344@gmail.com matches \u8fd9\u662f\u8f93\u51fa\u3002","title":"Python \u6b63\u5219\u8868\u8fbe\u5f0f\u7535\u5b50\u90ae\u4ef6\u793a\u4f8b"},{"location":"pages/python/pytutorial/python-requests/","text":"Python Requests \u6559\u7a0b \u00b6 \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528 Python Requests \u6a21\u5757\u3002 \u6211\u4eec\u83b7\u53d6\u6570\u636e\uff0c\u53d1\u5e03\u6570\u636e\uff0c\u6d41\u6570\u636e\u5e76\u8fde\u63a5\u5230\u5b89\u5168\u7684\u7f51\u9875\u3002 \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u5728\u7ebf\u670d\u52a1\uff0cnginx \u670d\u52a1\u5668\uff0cPython HTTP \u670d\u52a1\u5668\u548c Flask \u5e94\u7528\u3002 \u8d85\u6587\u672c\u4f20\u8f93\u200b\u200b\u534f\u8bae\uff08 HTTP \uff09\u662f\u7528\u4e8e\u5206\u5e03\u5f0f\u534f\u4f5c\u8d85\u5a92\u4f53\u4fe1\u606f\u7cfb\u7edf\u7684\u5e94\u7528\u534f\u8bae\u3002 HTTP \u662f\u4e07\u7ef4\u7f51\u6570\u636e\u901a\u4fe1\u7684\u57fa\u7840\u3002 Python Requests \u00b6 Requests \u662f\u4e00\u4e2a\u7b80\u5355\u4f18\u96c5\u7684 Python HTTP \u5e93\u3002 \u5b83\u63d0\u4f9b\u4e86\u901a\u8fc7 HTTP \u8bbf\u95ee Web \u8d44\u6e90\u7684\u65b9\u6cd5\u3002 Requests \u662f\u5185\u7f6e\u7684 Python \u6a21\u5757\u3002 1 $ sudo service nginx start \u6211\u4eec\u5728\u672c\u5730\u4e3b\u673a\u4e0a\u8fd0\u884c nginx Web \u670d\u52a1\u5668\u3002 \u6211\u4eec\u7684\u4e00\u4e9b\u793a\u4f8b\u4f7f\u7528 nginx \u670d\u52a1\u5668\u3002 Python Requests \u7248\u672c \u00b6 \u7b2c\u4e00\u4e2a\u7a0b\u5e8f\u6253\u5370\u8bf7\u6c42\u5e93\u7684\u7248\u672c\u3002 version.py 1 2 3 4 5 6 #!/usr/bin/env python3 import requests print(requests.__version__) print(requests.__copyright__) \u8be5\u7a0b\u5e8f\u5c06\u6253\u5370\u8bf7\u6c42\u7684\u7248\u672c\u548c\u7248\u6743\u3002 1 2 3 $ ./version.py 2.21.0 Copyright 2018 Kenneth Reitz \u8fd9\u662f\u793a\u4f8b\u7684\u793a\u4f8b\u8f93\u51fa\u3002 Python Requests \u8bfb\u53d6\u7f51\u9875 \u00b6 get() \u65b9\u6cd5\u53d1\u51fa GET \u8bf7\u6c42\uff1b \u5b83\u83b7\u53d6\u7531\u7ed9\u5b9a URL \u6807\u8bc6\u7684\u6587\u6863\u3002 read_webpage.py 1 2 3 4 5 6 7 #!/usr/bin/env python3 import requests as req resp = req.get(\"http://www.webcode.me\") print(resp.text) \u8be5\u811a\u672c\u83b7\u53d6 www.webcode.me \u7f51\u9875\u7684\u5185\u5bb9\u3002 1 resp = req.get(\"http://www.webcode.me\") get() \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u54cd\u5e94\u5bf9\u8c61\u3002 1 print(resp.text) text \u5c5e\u6027\u5305\u542b\u54cd\u5e94\u7684\u5185\u5bb9\uff0c\u4ee5 Unicode \u8868\u793a\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 $ ./read_webpage.py <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>My html page</title> </head> <body> <p> Today is a beautiful day. We go swimming and fishing. </p> <p> Hello there. How are you? </p> </body> </html> \u8fd9\u662f read_webpage.py \u811a\u672c\u7684\u8f93\u51fa\u3002 \u4ee5\u4e0b\u7a0b\u5e8f\u83b7\u53d6\u4e00\u4e2a\u5c0f\u578b\u7f51\u9875\uff0c\u5e76\u5265\u79bb\u5176 HTML \u6807\u7b7e\u3002 strip_tags.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python3 import requests as req import re resp = req.get(\"http://www.webcode.me\") content = resp.text stripped = re.sub('<[^<]+?>', '', content) print(stripped) \u8be5\u811a\u672c\u4f1a\u5265\u79bb www.webcode.me \u7f51\u9875\u7684 HTML \u6807\u7b7e\u3002 1 stripped = re.sub('<[^<]+?>', '', content) \u4e00\u4e2a\u7b80\u5355\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u7528\u4e8e\u5265\u79bb HTML \u6807\u8bb0\u3002 HTTP \u8bf7\u6c42 \u00b6 HTTP \u8bf7\u6c42\u662f\u4ece\u5ba2\u6237\u7aef\u53d1\u9001\u5230\u6d4f\u89c8\u5668\u7684\u6d88\u606f\uff0c\u4ee5\u68c0\u7d22\u67d0\u4e9b\u4fe1\u606f\u6216\u91c7\u53d6\u67d0\u4e9b\u63aa\u65bd\u3002 Request's request \u65b9\u6cd5\u521b\u5efa\u4e00\u4e2a\u65b0\u8bf7\u6c42\u3002 \u8bf7\u6ce8\u610f\uff0c request \u6a21\u5757\u5177\u6709\u4e00\u4e9b\u66f4\u9ad8\u7ea7\u7684\u65b9\u6cd5\uff0c\u4f8b\u5982 get() \uff0c post() \u6216 put() \uff0c\u4e3a\u6211\u4eec\u8282\u7701\u4e86\u4e00\u4e9b\u8f93\u5165\u3002 create_request.py 1 2 3 4 5 6 #!/usr/bin/env python3 import requests as req resp = req.request(method='GET', url=\"http://www.webcode.me\") print(resp.text) \u8be5\u793a\u4f8b\u521b\u5efa\u4e00\u4e2a GET \u8bf7\u6c42\u5e76\u5c06\u5176\u53d1\u9001\u5230 http://www.webcode.me \u3002 Python Requests \u83b7\u53d6\u72b6\u6001 \u00b6 Response \u5bf9\u8c61\u5305\u542b\u670d\u52a1\u5668\u5bf9 HTTP \u8bf7\u6c42\u7684\u54cd\u5e94\u3002 \u5176 status_code \u5c5e\u6027\u8fd4\u56de\u54cd\u5e94\u7684 HTTP \u72b6\u6001\u4ee3\u7801\uff0c\u4f8b\u5982 200 \u6216 404\u3002 get_status.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python3 import requests as req resp = req.get(\"http://www.webcode.me\") print(resp.status_code) resp = req.get(\"http://www.webcode.me/news\") print(resp.status_code) \u6211\u4eec\u4f7f\u7528 get() \u65b9\u6cd5\u6267\u884c\u4e24\u4e2a HTTP \u8bf7\u6c42\uff0c\u5e76\u68c0\u67e5\u8fd4\u56de\u7684\u72b6\u6001\u3002 1 2 3 $ ./get_status.py 200 404 200 \u662f\u6210\u529f HTTP \u8bf7\u6c42\u7684\u6807\u51c6\u54cd\u5e94\uff0c\u800c 404 \u5219\u8868\u660e\u627e\u4e0d\u5230\u6240\u8bf7\u6c42\u7684\u8d44\u6e90\u3002 Python Requests HEAD \u65b9\u6cd5 \u00b6 head() \u65b9\u6cd5\u68c0\u7d22\u6587\u6863\u6807\u9898\u3002 \u6807\u5934\u7531\u5b57\u6bb5\u7ec4\u6210\uff0c\u5305\u62ec\u65e5\u671f\uff0c\u670d\u52a1\u5668\uff0c\u5185\u5bb9\u7c7b\u578b\u6216\u4e0a\u6b21\u4fee\u6539\u65f6\u95f4\u3002 head_request.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python3 import requests as req resp = req.head(\"http://www.webcode.me\") print(\"Server: \" + resp.headers['server']) print(\"Last modified: \" + resp.headers['last-modified']) print(\"Content type: \" + resp.headers['content-type']) \u8be5\u793a\u4f8b\u6253\u5370\u670d\u52a1\u5668\uff0c www.webcode.me \u7f51\u9875\u7684\u4e0a\u6b21\u4fee\u6539\u65f6\u95f4\u548c\u5185\u5bb9\u7c7b\u578b\u3002 1 2 3 4 $ ./head_request.py Server: nginx/1.6.2 Last modified: Sat, 20 Jul 2019 11:49:25 GMT Content type: text/html \u8fd9\u662f head_request.py \u7a0b\u5e8f\u7684\u8f93\u51fa\u3002 Python Requests GET \u65b9\u6cd5 \u00b6 get() \u65b9\u6cd5\u5411\u670d\u52a1\u5668\u53d1\u51fa GET \u8bf7\u6c42\u3002 GET \u65b9\u6cd5\u8bf7\u6c42\u6307\u5b9a\u8d44\u6e90\u7684\u8868\u793a\u5f62\u5f0f\u3002 httpbin.org \u662f\u514d\u8d39\u63d0\u4f9b\u7684 HTTP \u8bf7\u6c42&\u54cd\u5e94\u670d\u52a1\u3002 mget.py 1 2 3 4 5 6 #!/usr/bin/env python3 import requests as req resp = req.get(\"https://httpbin.org/get?name=Peter\") print(resp.text) \u8be5\u811a\u672c\u5c06\u5177\u6709\u503c\u7684\u53d8\u91cf\u53d1\u9001\u5230 httpbin.org \u670d\u52a1\u5668\u3002 \u8be5\u53d8\u91cf\u76f4\u63a5\u5728 URL \u4e2d\u6307\u5b9a\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 $ ./mget.py { \"args\": { \"name\": \"Peter\" }, \"headers\": { \"Accept\": \"*/*\", \"Accept-Encoding\": \"gzip, deflate\", \"Host\": \"httpbin.org\", \"User-Agent\": \"python-requests/2.21.0\" }, ... } \u8fd9\u662f\u793a\u4f8b\u7684\u8f93\u51fa\u3002 mget2.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python3 import requests as req payload = {'name': 'Peter', 'age': 23} resp = req.get(\"https://httpbin.org/get\", params=payload) print(resp.url) print(resp.text) get() \u65b9\u6cd5\u91c7\u7528 params \u53c2\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5176\u4e2d\u6307\u5b9a\u67e5\u8be2\u53c2\u6570\u3002 1 payload = {'name': 'Peter', 'age': 23} \u6570\u636e\u5728 Python \u5b57\u5178\u4e2d\u53d1\u9001\u3002 1 resp = req.get(\"https://httpbin.org/get\", params=payload) \u6211\u4eec\u5c06 GET \u8bf7\u6c42\u53d1\u9001\u5230 httpbin.org \u7ad9\u70b9\uff0c\u5e76\u4f20\u9012 params \u53c2\u6570\u4e2d\u6307\u5b9a\u7684\u6570\u636e\u3002 1 2 print(resp.url) print(resp.text) \u6211\u4eec\u5c06 URL \u548c\u54cd\u5e94\u5185\u5bb9\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 $ ./mget2.py http://httpbin.org/get?name=Peter&age=23 { \"args\": { \"age\": \"23\", \"name\": \"Peter\" }, \"headers\": { \"Accept\": \"*/*\", \"Accept-Encoding\": \"gzip, deflate\", \"Host\": \"httpbin.org\", \"User-Agent\": \"python-requests/2.21.0\" }, ... } \u8fd9\u662f\u793a\u4f8b\u7684\u8f93\u51fa\u3002 Python Requests \u91cd\u5b9a\u5411 \u00b6 \u91cd\u5b9a\u5411\u662f\u5c06\u4e00\u4e2a URL \u8f6c\u53d1\u5230\u53e6\u4e00\u4e2a URL \u7684\u8fc7\u7a0b\u3002 HTTP \u54cd\u5e94\u72b6\u6001\u4ee3\u7801 301\u201c\u6c38\u4e45\u79fb\u52a8\u201d\u7528\u4e8e\u6c38\u4e45 URL \u91cd\u5b9a\u5411\uff1b 302 \u627e\u5230\u4e34\u65f6\u91cd\u5b9a\u5411\u3002 redirect.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python3 import requests as req resp = req.get(\"https://httpbin.org/redirect-to?url=/\") print(resp.status_code) print(resp.history) print(resp.url) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5411 https://httpbin.org/redirect-to \u9875\u9762\u53d1\u51fa GET \u8bf7\u6c42\u3002 \u8be5\u9875\u9762\u91cd\u5b9a\u5411\u5230\u53e6\u4e00\u4e2a\u9875\u9762\uff1b \u91cd\u5b9a\u5411\u54cd\u5e94\u5b58\u50a8\u5728\u54cd\u5e94\u7684 history \u5c5e\u6027\u4e2d\u3002 1 2 3 4 $ ./redirect.py 200 [<Response [302]>] https://httpbin.org/ \u5bf9 https://httpbin.org/redirect-to \u7684 GET \u8bf7\u6c42\u88ab\u91cd\u5b9a\u5411\u5230 https://httpbin.org 302\u3002 \u5728\u7b2c\u4e8c\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4e0d\u9075\u5faa\u91cd\u5b9a\u5411\u3002 redirect2.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python3 import requests as req resp = req.get(\"https://httpbin.org/redirect-to?url=/\", allow_redirects=False) print(resp.status_code) print(resp.url) allow_redirects \u53c2\u6570\u6307\u5b9a\u662f\u5426\u9075\u5faa\u91cd\u5b9a\u5411\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u91cd\u5b9a\u5411\u4e4b\u540e\u3002 1 2 3 $ ./redirect2.py 302 https://httpbin.org/redirect-to?url=/ \u8fd9\u662f\u793a\u4f8b\u7684\u8f93\u51fa\u3002 \u7528 nginx \u91cd\u5b9a\u5411 \u00b6 \u5728\u4e0b\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u663e\u793a\u5982\u4f55\u5728 nginx \u670d\u52a1\u5668\u4e2d\u8bbe\u7f6e\u9875\u9762\u91cd\u5b9a\u5411\u3002 1 2 3 4 location = /oldpage.html { return 301 /newpage.html; } \u5c06\u8fd9\u4e9b\u884c\u6dfb\u52a0\u5230\u4f4d\u4e8e Debian \u4e0a /etc/nginx/sites-available/default \u7684 Nginx \u914d\u7f6e\u6587\u4ef6\u4e2d\u3002 1 $ sudo service nginx restart \u7f16\u8f91\u5b8c\u6587\u4ef6\u540e\uff0c\u6211\u4eec\u5fc5\u987b\u91cd\u65b0\u542f\u52a8 nginx \u624d\u80fd\u5e94\u7528\u66f4\u6539\u3002 oldpage.html 1 2 3 4 5 6 7 8 9 10 11 <!DOCTYPE html> <html> <head> <title>Old page</title> </head> <body> <p> This is old page </p> </body> </html> \u8fd9\u662f\u4f4d\u4e8e nginx \u6587\u6863\u6839\u76ee\u5f55\u4e2d\u7684 oldpage.html \u6587\u4ef6\u3002 newpage.html 1 2 3 4 5 6 7 8 9 10 11 <!DOCTYPE html> <html> <head> <title>New page</title> </head> <body> <p> This is a new page </p> </body> </html> \u8fd9\u662f newpage.html \u3002 redirect3.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python3 import requests as req resp = req.get(\"http://localhost/oldpage.html\") print(resp.status_code) print(resp.history) print(resp.url) print(resp.text) \u8be5\u811a\u672c\u8bbf\u95ee\u65e7\u9875\u9762\u5e76\u9075\u5faa\u91cd\u5b9a\u5411\u3002 \u5982\u524d\u6240\u8ff0\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8bf7\u6c42\u9075\u5faa\u91cd\u5b9a\u5411\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 $ ./redirect3.py 200 (<Response [301]>,) http://localhost/files/newpage.html <!DOCTYPE html> <html> <head> <title>New page</title> </head> <body> <p> This is a new page </p> </body> </html> \u8fd9\u662f\u793a\u4f8b\u7684\u8f93\u51fa\u3002 1 2 3 4 5 $ sudo tail -2 /var/log/nginx/access.log 127.0.0.1 - - [21/Jul/2019:07:41:27 -0400] \"GET /oldpage.html HTTP/1.1\" 301 184 \"-\" \"python-requests/2.4.3 CPython/3.4.2 Linux/3.16.0-4-amd64\" 127.0.0.1 - - [21/Jul/2019:07:41:27 -0400] \"GET /newpage.html HTTP/1.1\" 200 109 \"-\" \"python-requests/2.4.3 CPython/3.4.2 Linux/3.16.0-4-amd64\" \u4ece access.log \u6587\u4ef6\u4e2d\u53ef\u4ee5\u770b\u5230\uff0c\u8be5\u8bf7\u6c42\u5df2\u91cd\u5b9a\u5411\u5230\u65b0\u7684\u6587\u4ef6\u540d\u3002 \u901a\u4fe1\u5305\u542b\u4e24\u4e2a GET \u8bf7\u6c42\u3002 \u7528\u6237\u4ee3\u7406 \u00b6 \u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u6307\u5b9a\u7528\u6237\u4ee3\u7406\u7684\u540d\u79f0\u3002 \u6211\u4eec\u521b\u5efa\u81ea\u5df1\u7684 Python HTTP \u670d\u52a1\u5668\u3002 http_server.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #!/usr/bin/env python3 from http.server import BaseHTTPRequestHandler, HTTPServer class MyHandler(BaseHTTPRequestHandler): def do_GET(self): message = \"Hello there\" self.send_response(200) if self.path == '/agent': message = self.headers['user-agent'] self.send_header('Content-type', 'text/html') self.end_headers() self.wfile.write(bytes(message, \"utf8\")) return def main(): print('starting server on port 8081...') server_address = ('127.0.0.1', 8081) httpd = HTTPServer(server_address, MyHandler) httpd.serve_forever() main() \u6211\u4eec\u6709\u4e00\u4e2a\u7b80\u5355\u7684 Python HTTP \u670d\u52a1\u5668\u3002 1 2 3 if self.path == '/agent': message = self.headers['user-agent'] \u5982\u679c\u8def\u5f84\u5305\u542b '/agent' \uff0c\u5219\u8fd4\u56de\u6307\u5b9a\u7684\u7528\u6237\u4ee3\u7406\u3002 user_agent.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python3 import requests as req headers = {'user-agent': 'Python script'} resp = req.get(\"http://localhost:8081/agent\", headers=headers) print(resp.text) \u8be5\u811a\u672c\u5411\u6211\u4eec\u7684 Python HTTP \u670d\u52a1\u5668\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684 GET \u8bf7\u6c42\u3002 \u8981\u5411\u8bf7\u6c42\u6dfb\u52a0 HTTP \u6807\u5934\uff0c\u6211\u4eec\u5c06\u5b57\u5178\u4f20\u9012\u7ed9 headers \u53c2\u6570\u3002 1 headers = {'user-agent': 'Python script'} \u6807\u5934\u503c\u653e\u7f6e\u5728 Python \u5b57\u5178\u4e2d\u3002 1 resp = req.get(\"http://localhost:8081/agent\", headers=headers) \u8fd9\u4e9b\u503c\u5c06\u4f20\u9012\u5230 headers \u53c2\u6570\u3002 1 2 $ simple_server.py starting server on port 8081... \u9996\u5148\uff0c\u6211\u4eec\u542f\u52a8\u670d\u52a1\u5668\u3002 1 2 $ ./user_agent.py Python script \u7136\u540e\u6211\u4eec\u8fd0\u884c\u811a\u672c\u3002 \u670d\u52a1\u5668\u4f7f\u7528\u6211\u4eec\u968f\u8bf7\u6c42\u53d1\u9001\u7684\u4ee3\u7406\u540d\u79f0\u8fdb\u884c\u4e86\u54cd\u5e94\u3002 Python Requests POST \u503c \u00b6 post \u65b9\u6cd5\u5728\u7ed9\u5b9a\u7684 URL \u4e0a\u8c03\u5ea6 POST \u8bf7\u6c42\uff0c\u4e3a\u586b\u5199\u7684\u8868\u5355\u5185\u5bb9\u63d0\u4f9b\u952e/\u503c\u5bf9\u3002 post_value.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python3 import requests as req data = {'name': 'Peter'} resp = req.post(\"https://httpbin.org/post\", data) print(resp.text) \u811a\u672c\u4f7f\u7528\u5177\u6709 Peter \u503c\u7684 name \u952e\u53d1\u9001\u8bf7\u6c42\u3002 POST \u8bf7\u6c42\u901a\u8fc7 post \u65b9\u6cd5\u53d1\u51fa\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 $ ./post_value.py { \"args\": {}, \"data\": \"\", \"files\": {}, \"form\": { \"name\": \"Peter\" }, \"headers\": { \"Accept\": \"*/*\", \"Accept-Encoding\": \"gzip, deflate\", \"Content-Length\": \"10\", \"Content-Type\": \"application/x-www-form-urlencoded\", \"Host\": \"httpbin.org\", \"User-Agent\": \"python-requests/2.21.0\" }, \"json\": null, ... } \u8fd9\u662f post_value.py \u811a\u672c\u7684\u8f93\u51fa\u3002 Python Requests \u4e0a\u4f20\u56fe\u50cf \u00b6 \u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u4e0a\u4f20\u56fe\u7247\u3002 \u6211\u4eec\u4f7f\u7528 Flask \u521b\u5efa\u4e00\u4e2a Web \u5e94\u7528\u3002 app.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #!/usr/bin/env python3 import os from flask import Flask, request app = Flask(__name__) @app.route(\"/\") def home(): return 'This is home page' @app.route(\"/upload\", methods=['POST']) def handleFileUpload(): msg = 'failed to upload image' if 'image' in request.files: photo = request.files['image'] if photo.filename != '': photo.save(os.path.join('.', photo.filename)) msg = 'image uploaded successfully' return msg if __name__ == '__main__': app.run() \u8fd9\u662f\u5177\u6709\u4e24\u4e2a\u7aef\u70b9\u7684\u7b80\u5355\u5e94\u7528\u3002 /upload \u7aef\u70b9\u68c0\u67e5\u662f\u5426\u6709\u67d0\u4e9b\u56fe\u50cf\u5e76\u5c06\u5176\u4fdd\u5b58\u5230\u5f53\u524d\u76ee\u5f55\u3002 upload_file.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python3 import requests as req url = 'http://localhost:5000/upload' with open('sid.jpg', 'rb') as f: files = {'image': f} r = req.post(url, files=files) print(r.text) \u6211\u4eec\u5c06\u56fe\u50cf\u53d1\u9001\u5230 Flask \u5e94\u7528\u3002 \u8be5\u6587\u4ef6\u5728 post() \u65b9\u6cd5\u7684 files \u5c5e\u6027\u4e2d\u6307\u5b9a\u3002 JSON \u683c\u5f0f \u00b6 JSON \uff08JavaScript \u5bf9\u8c61\u8868\u793a\u6cd5\uff09\u662f\u4e00\u79cd\u8f7b\u91cf\u7ea7\u7684\u6570\u636e\u4ea4\u6362\u683c\u5f0f\u3002 \u4eba\u7c7b\u5f88\u5bb9\u6613\u8bfb\u5199\uff0c\u673a\u5668\u4e5f\u5f88\u5bb9\u6613\u89e3\u6790\u548c\u751f\u6210\u3002 JSON \u6570\u636e\u662f\u952e/\u503c\u5bf9\u7684\u96c6\u5408\uff1b \u5728 Python \u4e2d\uff0c\u5b83\u662f\u901a\u8fc7\u5b57\u5178\u5b9e\u73b0\u7684\u3002 \u8bfb\u53d6 JSON \u00b6 \u5728\u7b2c\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4ece PHP \u811a\u672c\u8bfb\u53d6 JSON \u6570\u636e\u3002 send_json.php 1 2 3 4 5 6 <?php $data = [ 'name' => 'Jane', 'age' => 17 ]; header('Content-Type: application/json'); echo json_encode($data); PHP \u811a\u672c\u53d1\u9001 JSON \u6570\u636e\u3002 \u5b83\u4f7f\u7528 json_encode() \u529f\u80fd\u5b8c\u6210\u8be5\u5de5\u4f5c\u3002 read_json.py 1 2 3 4 5 6 #!/usr/bin/env python3 import requests as req resp = req.get(\"http://localhost/send_json.php\") print(resp.json()) read_json.py \u8bfb\u53d6 PHP \u811a\u672c\u53d1\u9001\u7684 JSON \u6570\u636e\u3002 1 print(resp.json()) json() \u65b9\u6cd5\u8fd4\u56de\u54cd\u5e94\u7684 json \u7f16\u7801\u5185\u5bb9\uff08\u5982\u679c\u6709\uff09\u3002 1 2 $ ./read_json.py {'age': 17, 'name': 'Jane'} \u8fd9\u662f\u793a\u4f8b\u7684\u8f93\u51fa\u3002 \u53d1\u9001 JSON \u00b6 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06 JSON \u6570\u636e\u4ece Python \u811a\u672c\u53d1\u9001\u5230 PHP \u811a\u672c\u3002 parse_json.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 <?php $data = file_get_contents(\"php://input\"); $json = json_decode($data , true); foreach ($json as $key => $value) { if (!is_array($value)) { echo \"The $key is $value\\n\"; } else { foreach ($value as $key => $val) { echo \"The $key is $value\\n\"; } } } \u8be5 PHP \u811a\u672c\u8bfb\u53d6 JSON \u6570\u636e\uff0c\u5e76\u53d1\u9001\u5e26\u6709\u5df2\u89e3\u6790\u503c\u7684\u6d88\u606f\u3002 send_json.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python3 import requests as req data = {'name': 'Jane', 'age': 17} resp = req.post(\"http://localhost/parse_json.php\", json=data) print(resp.text) \u8be5\u811a\u672c\u5c06 JSON \u6570\u636e\u53d1\u9001\u5230 PHP \u5e94\u7528\u5e76\u8bfb\u53d6\u5176\u54cd\u5e94\u3002 1 data = {'name': 'Jane', 'age': 17} \u8fd9\u662f\u8981\u53d1\u9001\u7684\u6570\u636e\u3002 1 resp = req.post(\"http://localhost/parse_json.php\", json=data) \u5305\u542b JSON \u6570\u636e\u7684\u5b57\u5178\u5c06\u4f20\u9012\u7ed9 json \u53c2\u6570\u3002 1 2 3 $ ./send_json.py The name is Jane The age is 17 \u8fd9\u662f\u793a\u4f8b\u8f93\u51fa\u3002 \u4ece\u5b57\u5178\u4e2d\u68c0\u7d22\u5b9a\u4e49 \u00b6 \u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5728 www.dictionary.com \u4e0a\u627e\u5230\u672f\u8bed\u7684\u5b9a\u4e49\u3002 \u8981\u89e3\u6790 HTML\uff0c\u6211\u4eec\u4f7f\u7528 lxml \u6a21\u5757\u3002 1 $ pip install lxml \u6211\u4eec\u4f7f\u7528 pip \u5de5\u5177\u5b89\u88c5 lxml \u6a21\u5757\u3002 get_term.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #!/usr/bin/env python3 import requests as req from lxml import html import textwrap term = \"dog\" resp = req.get(\"http://www.dictionary.com/browse/\" + term) root = html.fromstring(resp.content) for sel in root.xpath(\"//span[contains(@class, 'one-click-content')]\"): if sel.text: s = sel.text.strip() if (len(s) > 3): print(textwrap.fill(s, width=50)) \u5728\u6b64\u811a\u672c\u4e2d\uff0c\u6211\u4eec\u5728 www.dictionary.com \u4e0a\u627e\u5230\u4e86\u672f\u8bed\u72d7\u7684\u5b9a\u4e49\u3002 lxml \u6a21\u5757\u7528\u4e8e\u89e3\u6790 HTML \u4ee3\u7801\u3002 \u6ce8\u610f: \u5305\u542b\u5b9a\u4e49\u7684\u6807\u8bb0\u53ef\u80fd\u4f1a\u5728\u4e00\u591c\u4e4b\u95f4\u66f4\u6539\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u9700\u8981\u4fee\u6539\u811a\u672c\u3002 1 from lxml import html lxml \u6a21\u5757\u53ef\u7528\u4e8e\u89e3\u6790 HTML\u3002 1 import textwrap textwrap \u6a21\u5757\u7528\u4e8e\u5c06\u6587\u672c\u5305\u88c5\u5230\u7279\u5b9a\u5bbd\u5ea6\u3002 1 resp = req.get(\"http://www.dictionary.com/browse/\" + term) \u4e3a\u4e86\u6267\u884c\u641c\u7d22\uff0c\u6211\u4eec\u5728 URL \u7684\u672b\u5c3e\u9644\u52a0\u4e86\u8be5\u8bcd\u3002 1 root = html.fromstring(resp.content) \u6211\u4eec\u9700\u8981\u4f7f\u7528 resp.content \u800c\u4e0d\u662f resp.text \uff0c\u56e0\u4e3a html.fromstring() \u9690\u5f0f\u5730\u5e0c\u671b\u5b57\u8282\u4f5c\u4e3a\u8f93\u5165\u3002 \uff08 resp.content \u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u8fd4\u56de\u5185\u5bb9\uff0c\u800c resp.text \u4ee5 Unicode \u6587\u672c\u5f62\u5f0f\u8fd4\u56de\u3002 1 2 3 4 5 6 7 8 9 for sel in root.xpath(\"//span[contains(@class, 'one-click-content')]\"): if sel.text: s = sel.text.strip() if (len(s) > 3): print(textwrap.fill(s, width=50)) \u6211\u4eec\u89e3\u6790\u5185\u5bb9\u3002 \u4e3b\u8981\u5b9a\u4e49\u4f4d\u4e8e span \u6807\u7b7e\u5185\u90e8\uff0c\u8be5\u6807\u7b7e\u5177\u6709 one-click-content \u5c5e\u6027\u3002 \u6211\u4eec\u901a\u8fc7\u6d88\u9664\u591a\u4f59\u7684\u7a7a\u767d\u548c\u6742\u6563\u5b57\u7b26\u6765\u6539\u5584\u683c\u5f0f\u3002 \u6587\u5b57\u5bbd\u5ea6\u6700\u5927\u4e3a 50 \u4e2a\u5b57\u7b26\u3002 \u8bf7\u6ce8\u610f\uff0c\u6b64\u7c7b\u89e3\u6790\u53ef\u80fd\u4f1a\u66f4\u6539\u3002 1 2 3 4 5 6 7 $ ./get_term.py a domesticated canid, any carnivore of the dog family Canidae, having prominent canine teeth and, in the wild state, a long and slender muzzle, a deep-chested muscular body, a bushy tail, and large, erect ears. ... \u8fd9\u662f\u5b9a\u4e49\u7684\u90e8\u5206\u5217\u8868\u3002 Python Requests \u6d41\u8bf7\u6c42 \u00b6 \u6d41\u6b63\u5728\u4f20\u8f93\u97f3\u9891\u548c/\u6216\u89c6\u9891\u6570\u636e\u7684\u8fde\u7eed\u6d41\uff0c\u540c\u65f6\u6b63\u5728\u4f7f\u7528\u8f83\u65e9\u7684\u90e8\u5206\u3002 Requests.iter_lines() \u904d\u5386\u54cd\u5e94\u6570\u636e\uff0c\u4e00\u6b21\u4e00\u884c\u3002 \u5728\u8bf7\u6c42\u4e0a\u8bbe\u7f6e stream=True \u53ef\u4ee5\u907f\u514d\u7acb\u5373\u5c06\u5185\u5bb9\u8bfb\u53d6\u5230\u5185\u5b58\u4e2d\u4ee5\u83b7\u5f97\u8f83\u5927\u54cd\u5e94\u3002 streaming.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python3 import requests as req url = \"https://docs.oracle.com/javase/specs/jls/se8/jls8.pdf\" local_filename = url.split('/')[-1] r = req.get(url, stream=True) with open(local_filename, 'wb') as f: for chunk in r.iter_content(chunk_size=1024): f.write(chunk) \u8be5\u793a\u4f8b\u6d41\u5f0f\u4f20\u8f93 PDF \u6587\u4ef6\u5e76\u5c06\u5176\u5199\u5165\u78c1\u76d8\u3002 1 r = req.get(url, stream=True) \u5728\u53d1\u51fa\u8bf7\u6c42\u65f6\u5c06 stream \u8bbe\u7f6e\u4e3a True \uff0c\u9664\u975e\u6211\u4eec\u6d88\u8017\u6389\u6240\u6709\u6570\u636e\u6216\u8c03\u7528 Response.close() \uff0c\u5426\u5219\u8bf7\u6c42\u65e0\u6cd5\u91ca\u653e\u56de\u6c60\u7684\u8fde\u63a5\u3002 1 2 3 4 5 with open(local_filename, 'wb') as f: for chunk in r.iter_content(chunk_size=1024): f.write(chunk) \u6211\u4eec\u6309 1 KB \u7684\u5757\u8bfb\u53d6\u8d44\u6e90\uff0c\u5e76\u5c06\u5176\u5199\u5165\u672c\u5730\u6587\u4ef6\u3002 Python Requests \u51ed\u8bc1 \u00b6 auth \u53c2\u6570\u63d0\u4f9b\u57fa\u672c\u7684 HTTP \u8eab\u4efd\u9a8c\u8bc1\uff1b \u5b83\u4f7f\u7528\u4e00\u4e2a\u5143\u7ec4\u7684\u540d\u79f0\u548c\u5bc6\u7801\u6765\u7528\u4e8e\u9886\u57df\u3002 \u5b89\u5168\u9886\u57df\u662f\u4e00\u79cd\u7528\u4e8e\u4fdd\u62a4 Web \u5e94\u7528\u8d44\u6e90\u7684\u673a\u5236\u3002 1 2 3 4 5 $ sudo apt-get install apache2-utils $ sudo htpasswd -c /etc/nginx/.htpasswd user7 New password: Re-type new password: Adding password for user user7 \u6211\u4eec\u4f7f\u7528 htpasswd \u5de5\u5177\u521b\u5efa\u7528\u4e8e\u57fa\u672c HTTP \u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u540d\u548c\u5bc6\u7801\u3002 1 2 3 4 5 location /secure { auth_basic \"Restricted Area\"; auth_basic_user_file /etc/nginx/.htpasswd; } \u5728 nginx /etc/nginx/sites-available/default \u914d\u7f6e\u6587\u4ef6\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u5b89\u5168\u9875\u9762\u3002 \u9886\u57df\u7684\u540d\u79f0\u662f\u201c\u9650\u5236\u533a\u57df\u201d\u3002 index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 <!DOCTYPE html> <html lang=\"en\"> <head> <title>Secure page</title> </head> <body> <p> This is a secure page. </p> </body> </html> \u5728 /usr/share/nginx/html/secure \u76ee\u5f55\u4e2d\uff0c\u6211\u4eec\u6709\u8fd9\u4e2a HTML \u6587\u4ef6\u3002 credentials.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python3 import requests as req user = 'user7' passwd = '7user' resp = req.get(\"http://localhost/secure/\", auth=(user, passwd)) print(resp.text) \u8be5\u811a\u672c\u8fde\u63a5\u5230\u5b89\u5168\u7f51\u9875\uff1b \u5b83\u63d0\u4f9b\u8bbf\u95ee\u8be5\u9875\u9762\u6240\u9700\u7684\u7528\u6237\u540d\u548c\u5bc6\u7801\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 $ ./credentials.py <!DOCTYPE html> <html lang=\"en\"> <head> <title>Secure page</title> </head> <body> <p> This is a secure page. </p> </body> </html> \u4f7f\u7528\u6b63\u786e\u7684\u51ed\u636e\uff0c credentials.py \u811a\u672c\u8fd4\u56de\u53d7\u4fdd\u62a4\u7684\u9875\u9762\u3002","title":"Python Requests \u6559\u7a0b"},{"location":"pages/python/pytutorial/python-requests/#Python-Requests-\u6559\u7a0b","text":"\u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528 Python Requests \u6a21\u5757\u3002 \u6211\u4eec\u83b7\u53d6\u6570\u636e\uff0c\u53d1\u5e03\u6570\u636e\uff0c\u6d41\u6570\u636e\u5e76\u8fde\u63a5\u5230\u5b89\u5168\u7684\u7f51\u9875\u3002 \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u5728\u7ebf\u670d\u52a1\uff0cnginx \u670d\u52a1\u5668\uff0cPython HTTP \u670d\u52a1\u5668\u548c Flask \u5e94\u7528\u3002 \u8d85\u6587\u672c\u4f20\u8f93\u200b\u200b\u534f\u8bae\uff08 HTTP \uff09\u662f\u7528\u4e8e\u5206\u5e03\u5f0f\u534f\u4f5c\u8d85\u5a92\u4f53\u4fe1\u606f\u7cfb\u7edf\u7684\u5e94\u7528\u534f\u8bae\u3002 HTTP \u662f\u4e07\u7ef4\u7f51\u6570\u636e\u901a\u4fe1\u7684\u57fa\u7840\u3002","title":"Python Requests \u6559\u7a0b"},{"location":"pages/python/pytutorial/python-requests/#Python-Requests","text":"Requests \u662f\u4e00\u4e2a\u7b80\u5355\u4f18\u96c5\u7684 Python HTTP \u5e93\u3002 \u5b83\u63d0\u4f9b\u4e86\u901a\u8fc7 HTTP \u8bbf\u95ee Web \u8d44\u6e90\u7684\u65b9\u6cd5\u3002 Requests \u662f\u5185\u7f6e\u7684 Python \u6a21\u5757\u3002 1 $ sudo service nginx start \u6211\u4eec\u5728\u672c\u5730\u4e3b\u673a\u4e0a\u8fd0\u884c nginx Web \u670d\u52a1\u5668\u3002 \u6211\u4eec\u7684\u4e00\u4e9b\u793a\u4f8b\u4f7f\u7528 nginx \u670d\u52a1\u5668\u3002","title":"Python Requests"},{"location":"pages/python/pytutorial/python-requests/#Python-Requests-\u7248\u672c","text":"\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\u6253\u5370\u8bf7\u6c42\u5e93\u7684\u7248\u672c\u3002 version.py 1 2 3 4 5 6 #!/usr/bin/env python3 import requests print(requests.__version__) print(requests.__copyright__) \u8be5\u7a0b\u5e8f\u5c06\u6253\u5370\u8bf7\u6c42\u7684\u7248\u672c\u548c\u7248\u6743\u3002 1 2 3 $ ./version.py 2.21.0 Copyright 2018 Kenneth Reitz \u8fd9\u662f\u793a\u4f8b\u7684\u793a\u4f8b\u8f93\u51fa\u3002","title":"Python Requests \u7248\u672c"},{"location":"pages/python/pytutorial/python-requests/#Python-Requests-\u8bfb\u53d6\u7f51\u9875","text":"get() \u65b9\u6cd5\u53d1\u51fa GET \u8bf7\u6c42\uff1b \u5b83\u83b7\u53d6\u7531\u7ed9\u5b9a URL \u6807\u8bc6\u7684\u6587\u6863\u3002 read_webpage.py 1 2 3 4 5 6 7 #!/usr/bin/env python3 import requests as req resp = req.get(\"http://www.webcode.me\") print(resp.text) \u8be5\u811a\u672c\u83b7\u53d6 www.webcode.me \u7f51\u9875\u7684\u5185\u5bb9\u3002 1 resp = req.get(\"http://www.webcode.me\") get() \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u54cd\u5e94\u5bf9\u8c61\u3002 1 print(resp.text) text \u5c5e\u6027\u5305\u542b\u54cd\u5e94\u7684\u5185\u5bb9\uff0c\u4ee5 Unicode \u8868\u793a\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 $ ./read_webpage.py <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>My html page</title> </head> <body> <p> Today is a beautiful day. We go swimming and fishing. </p> <p> Hello there. How are you? </p> </body> </html> \u8fd9\u662f read_webpage.py \u811a\u672c\u7684\u8f93\u51fa\u3002 \u4ee5\u4e0b\u7a0b\u5e8f\u83b7\u53d6\u4e00\u4e2a\u5c0f\u578b\u7f51\u9875\uff0c\u5e76\u5265\u79bb\u5176 HTML \u6807\u7b7e\u3002 strip_tags.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python3 import requests as req import re resp = req.get(\"http://www.webcode.me\") content = resp.text stripped = re.sub('<[^<]+?>', '', content) print(stripped) \u8be5\u811a\u672c\u4f1a\u5265\u79bb www.webcode.me \u7f51\u9875\u7684 HTML \u6807\u7b7e\u3002 1 stripped = re.sub('<[^<]+?>', '', content) \u4e00\u4e2a\u7b80\u5355\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u7528\u4e8e\u5265\u79bb HTML \u6807\u8bb0\u3002","title":"Python Requests \u8bfb\u53d6\u7f51\u9875"},{"location":"pages/python/pytutorial/python-requests/#HTTP-\u8bf7\u6c42","text":"HTTP \u8bf7\u6c42\u662f\u4ece\u5ba2\u6237\u7aef\u53d1\u9001\u5230\u6d4f\u89c8\u5668\u7684\u6d88\u606f\uff0c\u4ee5\u68c0\u7d22\u67d0\u4e9b\u4fe1\u606f\u6216\u91c7\u53d6\u67d0\u4e9b\u63aa\u65bd\u3002 Request's request \u65b9\u6cd5\u521b\u5efa\u4e00\u4e2a\u65b0\u8bf7\u6c42\u3002 \u8bf7\u6ce8\u610f\uff0c request \u6a21\u5757\u5177\u6709\u4e00\u4e9b\u66f4\u9ad8\u7ea7\u7684\u65b9\u6cd5\uff0c\u4f8b\u5982 get() \uff0c post() \u6216 put() \uff0c\u4e3a\u6211\u4eec\u8282\u7701\u4e86\u4e00\u4e9b\u8f93\u5165\u3002 create_request.py 1 2 3 4 5 6 #!/usr/bin/env python3 import requests as req resp = req.request(method='GET', url=\"http://www.webcode.me\") print(resp.text) \u8be5\u793a\u4f8b\u521b\u5efa\u4e00\u4e2a GET \u8bf7\u6c42\u5e76\u5c06\u5176\u53d1\u9001\u5230 http://www.webcode.me \u3002","title":"HTTP \u8bf7\u6c42"},{"location":"pages/python/pytutorial/python-requests/#Python-Requests-\u83b7\u53d6\u72b6\u6001","text":"Response \u5bf9\u8c61\u5305\u542b\u670d\u52a1\u5668\u5bf9 HTTP \u8bf7\u6c42\u7684\u54cd\u5e94\u3002 \u5176 status_code \u5c5e\u6027\u8fd4\u56de\u54cd\u5e94\u7684 HTTP \u72b6\u6001\u4ee3\u7801\uff0c\u4f8b\u5982 200 \u6216 404\u3002 get_status.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python3 import requests as req resp = req.get(\"http://www.webcode.me\") print(resp.status_code) resp = req.get(\"http://www.webcode.me/news\") print(resp.status_code) \u6211\u4eec\u4f7f\u7528 get() \u65b9\u6cd5\u6267\u884c\u4e24\u4e2a HTTP \u8bf7\u6c42\uff0c\u5e76\u68c0\u67e5\u8fd4\u56de\u7684\u72b6\u6001\u3002 1 2 3 $ ./get_status.py 200 404 200 \u662f\u6210\u529f HTTP \u8bf7\u6c42\u7684\u6807\u51c6\u54cd\u5e94\uff0c\u800c 404 \u5219\u8868\u660e\u627e\u4e0d\u5230\u6240\u8bf7\u6c42\u7684\u8d44\u6e90\u3002","title":"Python Requests \u83b7\u53d6\u72b6\u6001"},{"location":"pages/python/pytutorial/python-requests/#Python-Requests-HEAD-\u65b9\u6cd5","text":"head() \u65b9\u6cd5\u68c0\u7d22\u6587\u6863\u6807\u9898\u3002 \u6807\u5934\u7531\u5b57\u6bb5\u7ec4\u6210\uff0c\u5305\u62ec\u65e5\u671f\uff0c\u670d\u52a1\u5668\uff0c\u5185\u5bb9\u7c7b\u578b\u6216\u4e0a\u6b21\u4fee\u6539\u65f6\u95f4\u3002 head_request.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python3 import requests as req resp = req.head(\"http://www.webcode.me\") print(\"Server: \" + resp.headers['server']) print(\"Last modified: \" + resp.headers['last-modified']) print(\"Content type: \" + resp.headers['content-type']) \u8be5\u793a\u4f8b\u6253\u5370\u670d\u52a1\u5668\uff0c www.webcode.me \u7f51\u9875\u7684\u4e0a\u6b21\u4fee\u6539\u65f6\u95f4\u548c\u5185\u5bb9\u7c7b\u578b\u3002 1 2 3 4 $ ./head_request.py Server: nginx/1.6.2 Last modified: Sat, 20 Jul 2019 11:49:25 GMT Content type: text/html \u8fd9\u662f head_request.py \u7a0b\u5e8f\u7684\u8f93\u51fa\u3002","title":"Python Requests HEAD \u65b9\u6cd5"},{"location":"pages/python/pytutorial/python-requests/#Python-Requests-GET-\u65b9\u6cd5","text":"get() \u65b9\u6cd5\u5411\u670d\u52a1\u5668\u53d1\u51fa GET \u8bf7\u6c42\u3002 GET \u65b9\u6cd5\u8bf7\u6c42\u6307\u5b9a\u8d44\u6e90\u7684\u8868\u793a\u5f62\u5f0f\u3002 httpbin.org \u662f\u514d\u8d39\u63d0\u4f9b\u7684 HTTP \u8bf7\u6c42&\u54cd\u5e94\u670d\u52a1\u3002 mget.py 1 2 3 4 5 6 #!/usr/bin/env python3 import requests as req resp = req.get(\"https://httpbin.org/get?name=Peter\") print(resp.text) \u8be5\u811a\u672c\u5c06\u5177\u6709\u503c\u7684\u53d8\u91cf\u53d1\u9001\u5230 httpbin.org \u670d\u52a1\u5668\u3002 \u8be5\u53d8\u91cf\u76f4\u63a5\u5728 URL \u4e2d\u6307\u5b9a\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 $ ./mget.py { \"args\": { \"name\": \"Peter\" }, \"headers\": { \"Accept\": \"*/*\", \"Accept-Encoding\": \"gzip, deflate\", \"Host\": \"httpbin.org\", \"User-Agent\": \"python-requests/2.21.0\" }, ... } \u8fd9\u662f\u793a\u4f8b\u7684\u8f93\u51fa\u3002 mget2.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python3 import requests as req payload = {'name': 'Peter', 'age': 23} resp = req.get(\"https://httpbin.org/get\", params=payload) print(resp.url) print(resp.text) get() \u65b9\u6cd5\u91c7\u7528 params \u53c2\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5176\u4e2d\u6307\u5b9a\u67e5\u8be2\u53c2\u6570\u3002 1 payload = {'name': 'Peter', 'age': 23} \u6570\u636e\u5728 Python \u5b57\u5178\u4e2d\u53d1\u9001\u3002 1 resp = req.get(\"https://httpbin.org/get\", params=payload) \u6211\u4eec\u5c06 GET \u8bf7\u6c42\u53d1\u9001\u5230 httpbin.org \u7ad9\u70b9\uff0c\u5e76\u4f20\u9012 params \u53c2\u6570\u4e2d\u6307\u5b9a\u7684\u6570\u636e\u3002 1 2 print(resp.url) print(resp.text) \u6211\u4eec\u5c06 URL \u548c\u54cd\u5e94\u5185\u5bb9\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 $ ./mget2.py http://httpbin.org/get?name=Peter&age=23 { \"args\": { \"age\": \"23\", \"name\": \"Peter\" }, \"headers\": { \"Accept\": \"*/*\", \"Accept-Encoding\": \"gzip, deflate\", \"Host\": \"httpbin.org\", \"User-Agent\": \"python-requests/2.21.0\" }, ... } \u8fd9\u662f\u793a\u4f8b\u7684\u8f93\u51fa\u3002","title":"Python Requests GET \u65b9\u6cd5"},{"location":"pages/python/pytutorial/python-requests/#Python-Requests-\u91cd\u5b9a\u5411","text":"\u91cd\u5b9a\u5411\u662f\u5c06\u4e00\u4e2a URL \u8f6c\u53d1\u5230\u53e6\u4e00\u4e2a URL \u7684\u8fc7\u7a0b\u3002 HTTP \u54cd\u5e94\u72b6\u6001\u4ee3\u7801 301\u201c\u6c38\u4e45\u79fb\u52a8\u201d\u7528\u4e8e\u6c38\u4e45 URL \u91cd\u5b9a\u5411\uff1b 302 \u627e\u5230\u4e34\u65f6\u91cd\u5b9a\u5411\u3002 redirect.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python3 import requests as req resp = req.get(\"https://httpbin.org/redirect-to?url=/\") print(resp.status_code) print(resp.history) print(resp.url) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5411 https://httpbin.org/redirect-to \u9875\u9762\u53d1\u51fa GET \u8bf7\u6c42\u3002 \u8be5\u9875\u9762\u91cd\u5b9a\u5411\u5230\u53e6\u4e00\u4e2a\u9875\u9762\uff1b \u91cd\u5b9a\u5411\u54cd\u5e94\u5b58\u50a8\u5728\u54cd\u5e94\u7684 history \u5c5e\u6027\u4e2d\u3002 1 2 3 4 $ ./redirect.py 200 [<Response [302]>] https://httpbin.org/ \u5bf9 https://httpbin.org/redirect-to \u7684 GET \u8bf7\u6c42\u88ab\u91cd\u5b9a\u5411\u5230 https://httpbin.org 302\u3002 \u5728\u7b2c\u4e8c\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4e0d\u9075\u5faa\u91cd\u5b9a\u5411\u3002 redirect2.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python3 import requests as req resp = req.get(\"https://httpbin.org/redirect-to?url=/\", allow_redirects=False) print(resp.status_code) print(resp.url) allow_redirects \u53c2\u6570\u6307\u5b9a\u662f\u5426\u9075\u5faa\u91cd\u5b9a\u5411\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u91cd\u5b9a\u5411\u4e4b\u540e\u3002 1 2 3 $ ./redirect2.py 302 https://httpbin.org/redirect-to?url=/ \u8fd9\u662f\u793a\u4f8b\u7684\u8f93\u51fa\u3002","title":"Python Requests \u91cd\u5b9a\u5411"},{"location":"pages/python/pytutorial/python-requests/#\u7528-nginx-\u91cd\u5b9a\u5411","text":"\u5728\u4e0b\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u663e\u793a\u5982\u4f55\u5728 nginx \u670d\u52a1\u5668\u4e2d\u8bbe\u7f6e\u9875\u9762\u91cd\u5b9a\u5411\u3002 1 2 3 4 location = /oldpage.html { return 301 /newpage.html; } \u5c06\u8fd9\u4e9b\u884c\u6dfb\u52a0\u5230\u4f4d\u4e8e Debian \u4e0a /etc/nginx/sites-available/default \u7684 Nginx \u914d\u7f6e\u6587\u4ef6\u4e2d\u3002 1 $ sudo service nginx restart \u7f16\u8f91\u5b8c\u6587\u4ef6\u540e\uff0c\u6211\u4eec\u5fc5\u987b\u91cd\u65b0\u542f\u52a8 nginx \u624d\u80fd\u5e94\u7528\u66f4\u6539\u3002 oldpage.html 1 2 3 4 5 6 7 8 9 10 11 <!DOCTYPE html> <html> <head> <title>Old page</title> </head> <body> <p> This is old page </p> </body> </html> \u8fd9\u662f\u4f4d\u4e8e nginx \u6587\u6863\u6839\u76ee\u5f55\u4e2d\u7684 oldpage.html \u6587\u4ef6\u3002 newpage.html 1 2 3 4 5 6 7 8 9 10 11 <!DOCTYPE html> <html> <head> <title>New page</title> </head> <body> <p> This is a new page </p> </body> </html> \u8fd9\u662f newpage.html \u3002 redirect3.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python3 import requests as req resp = req.get(\"http://localhost/oldpage.html\") print(resp.status_code) print(resp.history) print(resp.url) print(resp.text) \u8be5\u811a\u672c\u8bbf\u95ee\u65e7\u9875\u9762\u5e76\u9075\u5faa\u91cd\u5b9a\u5411\u3002 \u5982\u524d\u6240\u8ff0\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8bf7\u6c42\u9075\u5faa\u91cd\u5b9a\u5411\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 $ ./redirect3.py 200 (<Response [301]>,) http://localhost/files/newpage.html <!DOCTYPE html> <html> <head> <title>New page</title> </head> <body> <p> This is a new page </p> </body> </html> \u8fd9\u662f\u793a\u4f8b\u7684\u8f93\u51fa\u3002 1 2 3 4 5 $ sudo tail -2 /var/log/nginx/access.log 127.0.0.1 - - [21/Jul/2019:07:41:27 -0400] \"GET /oldpage.html HTTP/1.1\" 301 184 \"-\" \"python-requests/2.4.3 CPython/3.4.2 Linux/3.16.0-4-amd64\" 127.0.0.1 - - [21/Jul/2019:07:41:27 -0400] \"GET /newpage.html HTTP/1.1\" 200 109 \"-\" \"python-requests/2.4.3 CPython/3.4.2 Linux/3.16.0-4-amd64\" \u4ece access.log \u6587\u4ef6\u4e2d\u53ef\u4ee5\u770b\u5230\uff0c\u8be5\u8bf7\u6c42\u5df2\u91cd\u5b9a\u5411\u5230\u65b0\u7684\u6587\u4ef6\u540d\u3002 \u901a\u4fe1\u5305\u542b\u4e24\u4e2a GET \u8bf7\u6c42\u3002","title":"\u7528 nginx \u91cd\u5b9a\u5411"},{"location":"pages/python/pytutorial/python-requests/#\u7528\u6237\u4ee3\u7406","text":"\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u6307\u5b9a\u7528\u6237\u4ee3\u7406\u7684\u540d\u79f0\u3002 \u6211\u4eec\u521b\u5efa\u81ea\u5df1\u7684 Python HTTP \u670d\u52a1\u5668\u3002 http_server.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #!/usr/bin/env python3 from http.server import BaseHTTPRequestHandler, HTTPServer class MyHandler(BaseHTTPRequestHandler): def do_GET(self): message = \"Hello there\" self.send_response(200) if self.path == '/agent': message = self.headers['user-agent'] self.send_header('Content-type', 'text/html') self.end_headers() self.wfile.write(bytes(message, \"utf8\")) return def main(): print('starting server on port 8081...') server_address = ('127.0.0.1', 8081) httpd = HTTPServer(server_address, MyHandler) httpd.serve_forever() main() \u6211\u4eec\u6709\u4e00\u4e2a\u7b80\u5355\u7684 Python HTTP \u670d\u52a1\u5668\u3002 1 2 3 if self.path == '/agent': message = self.headers['user-agent'] \u5982\u679c\u8def\u5f84\u5305\u542b '/agent' \uff0c\u5219\u8fd4\u56de\u6307\u5b9a\u7684\u7528\u6237\u4ee3\u7406\u3002 user_agent.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python3 import requests as req headers = {'user-agent': 'Python script'} resp = req.get(\"http://localhost:8081/agent\", headers=headers) print(resp.text) \u8be5\u811a\u672c\u5411\u6211\u4eec\u7684 Python HTTP \u670d\u52a1\u5668\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684 GET \u8bf7\u6c42\u3002 \u8981\u5411\u8bf7\u6c42\u6dfb\u52a0 HTTP \u6807\u5934\uff0c\u6211\u4eec\u5c06\u5b57\u5178\u4f20\u9012\u7ed9 headers \u53c2\u6570\u3002 1 headers = {'user-agent': 'Python script'} \u6807\u5934\u503c\u653e\u7f6e\u5728 Python \u5b57\u5178\u4e2d\u3002 1 resp = req.get(\"http://localhost:8081/agent\", headers=headers) \u8fd9\u4e9b\u503c\u5c06\u4f20\u9012\u5230 headers \u53c2\u6570\u3002 1 2 $ simple_server.py starting server on port 8081... \u9996\u5148\uff0c\u6211\u4eec\u542f\u52a8\u670d\u52a1\u5668\u3002 1 2 $ ./user_agent.py Python script \u7136\u540e\u6211\u4eec\u8fd0\u884c\u811a\u672c\u3002 \u670d\u52a1\u5668\u4f7f\u7528\u6211\u4eec\u968f\u8bf7\u6c42\u53d1\u9001\u7684\u4ee3\u7406\u540d\u79f0\u8fdb\u884c\u4e86\u54cd\u5e94\u3002","title":"\u7528\u6237\u4ee3\u7406"},{"location":"pages/python/pytutorial/python-requests/#Python-Requests-POST-\u503c","text":"post \u65b9\u6cd5\u5728\u7ed9\u5b9a\u7684 URL \u4e0a\u8c03\u5ea6 POST \u8bf7\u6c42\uff0c\u4e3a\u586b\u5199\u7684\u8868\u5355\u5185\u5bb9\u63d0\u4f9b\u952e/\u503c\u5bf9\u3002 post_value.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python3 import requests as req data = {'name': 'Peter'} resp = req.post(\"https://httpbin.org/post\", data) print(resp.text) \u811a\u672c\u4f7f\u7528\u5177\u6709 Peter \u503c\u7684 name \u952e\u53d1\u9001\u8bf7\u6c42\u3002 POST \u8bf7\u6c42\u901a\u8fc7 post \u65b9\u6cd5\u53d1\u51fa\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 $ ./post_value.py { \"args\": {}, \"data\": \"\", \"files\": {}, \"form\": { \"name\": \"Peter\" }, \"headers\": { \"Accept\": \"*/*\", \"Accept-Encoding\": \"gzip, deflate\", \"Content-Length\": \"10\", \"Content-Type\": \"application/x-www-form-urlencoded\", \"Host\": \"httpbin.org\", \"User-Agent\": \"python-requests/2.21.0\" }, \"json\": null, ... } \u8fd9\u662f post_value.py \u811a\u672c\u7684\u8f93\u51fa\u3002","title":"Python Requests POST \u503c"},{"location":"pages/python/pytutorial/python-requests/#Python-Requests-\u4e0a\u4f20\u56fe\u50cf","text":"\u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u4e0a\u4f20\u56fe\u7247\u3002 \u6211\u4eec\u4f7f\u7528 Flask \u521b\u5efa\u4e00\u4e2a Web \u5e94\u7528\u3002 app.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #!/usr/bin/env python3 import os from flask import Flask, request app = Flask(__name__) @app.route(\"/\") def home(): return 'This is home page' @app.route(\"/upload\", methods=['POST']) def handleFileUpload(): msg = 'failed to upload image' if 'image' in request.files: photo = request.files['image'] if photo.filename != '': photo.save(os.path.join('.', photo.filename)) msg = 'image uploaded successfully' return msg if __name__ == '__main__': app.run() \u8fd9\u662f\u5177\u6709\u4e24\u4e2a\u7aef\u70b9\u7684\u7b80\u5355\u5e94\u7528\u3002 /upload \u7aef\u70b9\u68c0\u67e5\u662f\u5426\u6709\u67d0\u4e9b\u56fe\u50cf\u5e76\u5c06\u5176\u4fdd\u5b58\u5230\u5f53\u524d\u76ee\u5f55\u3002 upload_file.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python3 import requests as req url = 'http://localhost:5000/upload' with open('sid.jpg', 'rb') as f: files = {'image': f} r = req.post(url, files=files) print(r.text) \u6211\u4eec\u5c06\u56fe\u50cf\u53d1\u9001\u5230 Flask \u5e94\u7528\u3002 \u8be5\u6587\u4ef6\u5728 post() \u65b9\u6cd5\u7684 files \u5c5e\u6027\u4e2d\u6307\u5b9a\u3002","title":"Python Requests \u4e0a\u4f20\u56fe\u50cf"},{"location":"pages/python/pytutorial/python-requests/#JSON-\u683c\u5f0f","text":"JSON \uff08JavaScript \u5bf9\u8c61\u8868\u793a\u6cd5\uff09\u662f\u4e00\u79cd\u8f7b\u91cf\u7ea7\u7684\u6570\u636e\u4ea4\u6362\u683c\u5f0f\u3002 \u4eba\u7c7b\u5f88\u5bb9\u6613\u8bfb\u5199\uff0c\u673a\u5668\u4e5f\u5f88\u5bb9\u6613\u89e3\u6790\u548c\u751f\u6210\u3002 JSON \u6570\u636e\u662f\u952e/\u503c\u5bf9\u7684\u96c6\u5408\uff1b \u5728 Python \u4e2d\uff0c\u5b83\u662f\u901a\u8fc7\u5b57\u5178\u5b9e\u73b0\u7684\u3002","title":"JSON \u683c\u5f0f"},{"location":"pages/python/pytutorial/python-requests/#\u8bfb\u53d6-JSON","text":"\u5728\u7b2c\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4ece PHP \u811a\u672c\u8bfb\u53d6 JSON \u6570\u636e\u3002 send_json.php 1 2 3 4 5 6 <?php $data = [ 'name' => 'Jane', 'age' => 17 ]; header('Content-Type: application/json'); echo json_encode($data); PHP \u811a\u672c\u53d1\u9001 JSON \u6570\u636e\u3002 \u5b83\u4f7f\u7528 json_encode() \u529f\u80fd\u5b8c\u6210\u8be5\u5de5\u4f5c\u3002 read_json.py 1 2 3 4 5 6 #!/usr/bin/env python3 import requests as req resp = req.get(\"http://localhost/send_json.php\") print(resp.json()) read_json.py \u8bfb\u53d6 PHP \u811a\u672c\u53d1\u9001\u7684 JSON \u6570\u636e\u3002 1 print(resp.json()) json() \u65b9\u6cd5\u8fd4\u56de\u54cd\u5e94\u7684 json \u7f16\u7801\u5185\u5bb9\uff08\u5982\u679c\u6709\uff09\u3002 1 2 $ ./read_json.py {'age': 17, 'name': 'Jane'} \u8fd9\u662f\u793a\u4f8b\u7684\u8f93\u51fa\u3002","title":"\u8bfb\u53d6 JSON"},{"location":"pages/python/pytutorial/python-requests/#\u53d1\u9001-JSON","text":"\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06 JSON \u6570\u636e\u4ece Python \u811a\u672c\u53d1\u9001\u5230 PHP \u811a\u672c\u3002 parse_json.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 <?php $data = file_get_contents(\"php://input\"); $json = json_decode($data , true); foreach ($json as $key => $value) { if (!is_array($value)) { echo \"The $key is $value\\n\"; } else { foreach ($value as $key => $val) { echo \"The $key is $value\\n\"; } } } \u8be5 PHP \u811a\u672c\u8bfb\u53d6 JSON \u6570\u636e\uff0c\u5e76\u53d1\u9001\u5e26\u6709\u5df2\u89e3\u6790\u503c\u7684\u6d88\u606f\u3002 send_json.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python3 import requests as req data = {'name': 'Jane', 'age': 17} resp = req.post(\"http://localhost/parse_json.php\", json=data) print(resp.text) \u8be5\u811a\u672c\u5c06 JSON \u6570\u636e\u53d1\u9001\u5230 PHP \u5e94\u7528\u5e76\u8bfb\u53d6\u5176\u54cd\u5e94\u3002 1 data = {'name': 'Jane', 'age': 17} \u8fd9\u662f\u8981\u53d1\u9001\u7684\u6570\u636e\u3002 1 resp = req.post(\"http://localhost/parse_json.php\", json=data) \u5305\u542b JSON \u6570\u636e\u7684\u5b57\u5178\u5c06\u4f20\u9012\u7ed9 json \u53c2\u6570\u3002 1 2 3 $ ./send_json.py The name is Jane The age is 17 \u8fd9\u662f\u793a\u4f8b\u8f93\u51fa\u3002","title":"\u53d1\u9001 JSON"},{"location":"pages/python/pytutorial/python-requests/#\u4ece\u5b57\u5178\u4e2d\u68c0\u7d22\u5b9a\u4e49","text":"\u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5728 www.dictionary.com \u4e0a\u627e\u5230\u672f\u8bed\u7684\u5b9a\u4e49\u3002 \u8981\u89e3\u6790 HTML\uff0c\u6211\u4eec\u4f7f\u7528 lxml \u6a21\u5757\u3002 1 $ pip install lxml \u6211\u4eec\u4f7f\u7528 pip \u5de5\u5177\u5b89\u88c5 lxml \u6a21\u5757\u3002 get_term.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #!/usr/bin/env python3 import requests as req from lxml import html import textwrap term = \"dog\" resp = req.get(\"http://www.dictionary.com/browse/\" + term) root = html.fromstring(resp.content) for sel in root.xpath(\"//span[contains(@class, 'one-click-content')]\"): if sel.text: s = sel.text.strip() if (len(s) > 3): print(textwrap.fill(s, width=50)) \u5728\u6b64\u811a\u672c\u4e2d\uff0c\u6211\u4eec\u5728 www.dictionary.com \u4e0a\u627e\u5230\u4e86\u672f\u8bed\u72d7\u7684\u5b9a\u4e49\u3002 lxml \u6a21\u5757\u7528\u4e8e\u89e3\u6790 HTML \u4ee3\u7801\u3002 \u6ce8\u610f: \u5305\u542b\u5b9a\u4e49\u7684\u6807\u8bb0\u53ef\u80fd\u4f1a\u5728\u4e00\u591c\u4e4b\u95f4\u66f4\u6539\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u9700\u8981\u4fee\u6539\u811a\u672c\u3002 1 from lxml import html lxml \u6a21\u5757\u53ef\u7528\u4e8e\u89e3\u6790 HTML\u3002 1 import textwrap textwrap \u6a21\u5757\u7528\u4e8e\u5c06\u6587\u672c\u5305\u88c5\u5230\u7279\u5b9a\u5bbd\u5ea6\u3002 1 resp = req.get(\"http://www.dictionary.com/browse/\" + term) \u4e3a\u4e86\u6267\u884c\u641c\u7d22\uff0c\u6211\u4eec\u5728 URL \u7684\u672b\u5c3e\u9644\u52a0\u4e86\u8be5\u8bcd\u3002 1 root = html.fromstring(resp.content) \u6211\u4eec\u9700\u8981\u4f7f\u7528 resp.content \u800c\u4e0d\u662f resp.text \uff0c\u56e0\u4e3a html.fromstring() \u9690\u5f0f\u5730\u5e0c\u671b\u5b57\u8282\u4f5c\u4e3a\u8f93\u5165\u3002 \uff08 resp.content \u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u8fd4\u56de\u5185\u5bb9\uff0c\u800c resp.text \u4ee5 Unicode \u6587\u672c\u5f62\u5f0f\u8fd4\u56de\u3002 1 2 3 4 5 6 7 8 9 for sel in root.xpath(\"//span[contains(@class, 'one-click-content')]\"): if sel.text: s = sel.text.strip() if (len(s) > 3): print(textwrap.fill(s, width=50)) \u6211\u4eec\u89e3\u6790\u5185\u5bb9\u3002 \u4e3b\u8981\u5b9a\u4e49\u4f4d\u4e8e span \u6807\u7b7e\u5185\u90e8\uff0c\u8be5\u6807\u7b7e\u5177\u6709 one-click-content \u5c5e\u6027\u3002 \u6211\u4eec\u901a\u8fc7\u6d88\u9664\u591a\u4f59\u7684\u7a7a\u767d\u548c\u6742\u6563\u5b57\u7b26\u6765\u6539\u5584\u683c\u5f0f\u3002 \u6587\u5b57\u5bbd\u5ea6\u6700\u5927\u4e3a 50 \u4e2a\u5b57\u7b26\u3002 \u8bf7\u6ce8\u610f\uff0c\u6b64\u7c7b\u89e3\u6790\u53ef\u80fd\u4f1a\u66f4\u6539\u3002 1 2 3 4 5 6 7 $ ./get_term.py a domesticated canid, any carnivore of the dog family Canidae, having prominent canine teeth and, in the wild state, a long and slender muzzle, a deep-chested muscular body, a bushy tail, and large, erect ears. ... \u8fd9\u662f\u5b9a\u4e49\u7684\u90e8\u5206\u5217\u8868\u3002","title":"\u4ece\u5b57\u5178\u4e2d\u68c0\u7d22\u5b9a\u4e49"},{"location":"pages/python/pytutorial/python-requests/#Python-Requests-\u6d41\u8bf7\u6c42","text":"\u6d41\u6b63\u5728\u4f20\u8f93\u97f3\u9891\u548c/\u6216\u89c6\u9891\u6570\u636e\u7684\u8fde\u7eed\u6d41\uff0c\u540c\u65f6\u6b63\u5728\u4f7f\u7528\u8f83\u65e9\u7684\u90e8\u5206\u3002 Requests.iter_lines() \u904d\u5386\u54cd\u5e94\u6570\u636e\uff0c\u4e00\u6b21\u4e00\u884c\u3002 \u5728\u8bf7\u6c42\u4e0a\u8bbe\u7f6e stream=True \u53ef\u4ee5\u907f\u514d\u7acb\u5373\u5c06\u5185\u5bb9\u8bfb\u53d6\u5230\u5185\u5b58\u4e2d\u4ee5\u83b7\u5f97\u8f83\u5927\u54cd\u5e94\u3002 streaming.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python3 import requests as req url = \"https://docs.oracle.com/javase/specs/jls/se8/jls8.pdf\" local_filename = url.split('/')[-1] r = req.get(url, stream=True) with open(local_filename, 'wb') as f: for chunk in r.iter_content(chunk_size=1024): f.write(chunk) \u8be5\u793a\u4f8b\u6d41\u5f0f\u4f20\u8f93 PDF \u6587\u4ef6\u5e76\u5c06\u5176\u5199\u5165\u78c1\u76d8\u3002 1 r = req.get(url, stream=True) \u5728\u53d1\u51fa\u8bf7\u6c42\u65f6\u5c06 stream \u8bbe\u7f6e\u4e3a True \uff0c\u9664\u975e\u6211\u4eec\u6d88\u8017\u6389\u6240\u6709\u6570\u636e\u6216\u8c03\u7528 Response.close() \uff0c\u5426\u5219\u8bf7\u6c42\u65e0\u6cd5\u91ca\u653e\u56de\u6c60\u7684\u8fde\u63a5\u3002 1 2 3 4 5 with open(local_filename, 'wb') as f: for chunk in r.iter_content(chunk_size=1024): f.write(chunk) \u6211\u4eec\u6309 1 KB \u7684\u5757\u8bfb\u53d6\u8d44\u6e90\uff0c\u5e76\u5c06\u5176\u5199\u5165\u672c\u5730\u6587\u4ef6\u3002","title":"Python Requests \u6d41\u8bf7\u6c42"},{"location":"pages/python/pytutorial/python-requests/#Python-Requests-\u51ed\u8bc1","text":"auth \u53c2\u6570\u63d0\u4f9b\u57fa\u672c\u7684 HTTP \u8eab\u4efd\u9a8c\u8bc1\uff1b \u5b83\u4f7f\u7528\u4e00\u4e2a\u5143\u7ec4\u7684\u540d\u79f0\u548c\u5bc6\u7801\u6765\u7528\u4e8e\u9886\u57df\u3002 \u5b89\u5168\u9886\u57df\u662f\u4e00\u79cd\u7528\u4e8e\u4fdd\u62a4 Web \u5e94\u7528\u8d44\u6e90\u7684\u673a\u5236\u3002 1 2 3 4 5 $ sudo apt-get install apache2-utils $ sudo htpasswd -c /etc/nginx/.htpasswd user7 New password: Re-type new password: Adding password for user user7 \u6211\u4eec\u4f7f\u7528 htpasswd \u5de5\u5177\u521b\u5efa\u7528\u4e8e\u57fa\u672c HTTP \u8eab\u4efd\u9a8c\u8bc1\u7684\u7528\u6237\u540d\u548c\u5bc6\u7801\u3002 1 2 3 4 5 location /secure { auth_basic \"Restricted Area\"; auth_basic_user_file /etc/nginx/.htpasswd; } \u5728 nginx /etc/nginx/sites-available/default \u914d\u7f6e\u6587\u4ef6\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u5b89\u5168\u9875\u9762\u3002 \u9886\u57df\u7684\u540d\u79f0\u662f\u201c\u9650\u5236\u533a\u57df\u201d\u3002 index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 <!DOCTYPE html> <html lang=\"en\"> <head> <title>Secure page</title> </head> <body> <p> This is a secure page. </p> </body> </html> \u5728 /usr/share/nginx/html/secure \u76ee\u5f55\u4e2d\uff0c\u6211\u4eec\u6709\u8fd9\u4e2a HTML \u6587\u4ef6\u3002 credentials.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python3 import requests as req user = 'user7' passwd = '7user' resp = req.get(\"http://localhost/secure/\", auth=(user, passwd)) print(resp.text) \u8be5\u811a\u672c\u8fde\u63a5\u5230\u5b89\u5168\u7f51\u9875\uff1b \u5b83\u63d0\u4f9b\u8bbf\u95ee\u8be5\u9875\u9762\u6240\u9700\u7684\u7528\u6237\u540d\u548c\u5bc6\u7801\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 $ ./credentials.py <!DOCTYPE html> <html lang=\"en\"> <head> <title>Secure page</title> </head> <body> <p> This is a secure page. </p> </body> </html> \u4f7f\u7528\u6b63\u786e\u7684\u51ed\u636e\uff0c credentials.py \u811a\u672c\u8fd4\u56de\u53d7\u4fdd\u62a4\u7684\u9875\u9762\u3002","title":"Python Requests \u51ed\u8bc1"},{"location":"pages/python/pytutorial/python-reverse/","text":"Python \u53cd\u8f6c \u00b6 \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u5c55\u793a\u4e86\u5982\u4f55 \u53cd\u8f6c Python \u5e8f\u5217 \u3002 \u5f53\u6211\u4eec\u64a4\u6d88\u9879\u76ee\u65f6\uff0c\u6211\u4eec\u4f1a\u66f4\u6539\u5176\u987a\u5e8f\u3002 \u8bf7\u6ce8\u610f\uff0c\u4e0d\u5e94\u5c06\u53cd\u8f6c\u4e0e\u964d\u5e8f\u6392\u5e8f\u6df7\u6dc6\u3002 Python \u5217\u8868\u5177\u6709 reverse() \u51fd\u6570\u3002 [::-1] slice \u64cd\u4f5c\u53ef\u53cd\u8f6c Python \u5e8f\u5217\u3002 reversed() \u5185\u7f6e\u51fd\u6570\u8fd4\u56de\u53cd\u8f6c\u8fed\u4ee3\u5668\u3002 \u5185\u7f6e reversed() \u8c03\u7528\u5bf9\u8c61\u7684 __reversed__() \u9b54\u672f\u65b9\u6cd5\u4ee5\u5b9e\u73b0\u53cd\u8f6c\u8fed\u4ee3\u3002 Python \u53cd\u8f6c\u5217\u8868 \u00b6 \u5728\u7b2c\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 reverse() \u65b9\u6cd5\u548c [::-1] \u8fd0\u7b97\u7b26\u53cd\u8f6c Python \u5217\u8868\u3002 reverse_list.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python3 nums = [2, 7, 8, 9, 1, 0] nums.reverse() print(nums) rev_nums = nums[::-1] print(rev_nums) reverse() \u65b9\u6cd5\u5728\u9002\u5f53\u7684\u4f4d\u7f6e\u53cd\u8f6c\u5217\u8868\u3002 nums[::-1] \u521b\u5efa\u4e00\u4e2a\u5217\u8868\u7684\u65b0\u526f\u672c\uff0c\u5176\u4e2d\u5143\u7d20\u88ab\u53cd\u8f6c\u3002 1 2 $ ./reverse_list.py [0, 1, 9, 8, 7, 2] \u8fd9\u662f\u8f93\u51fa\u3002 Python reversed \u51fd\u6570 \u00b6 reversed() \u5185\u7f6e\u51fd\u6570\u8fd4\u56de\u53cd\u8f6c\u8fed\u4ee3\u5668\u3002 reversed_fun.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/env python3 words = ['forest', 'wood', 'sky', 'rock'] for word in reversed(words): print(word) word = 'forest' for e in reversed(word): print(e, end=' ') print() for e in reversed(range(1, 10, 2)): print(e) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5728\u5217\u8868\uff0c\u5355\u8bcd\u548c\u8303\u56f4\u4e0a\u4f7f\u7528 reversed() \u51fd\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 $ ./reversed_fun.py rock sky wood forest t s e r o f 9 7 5 3 1 \u8fd9\u662f\u8f93\u51fa\u3002 Python \u81ea\u5b9a\u4e49\u53cd\u8f6c\u5b57\u7b26\u4e32\u51fd\u6570 \u00b6 \u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u81ea\u5b9a\u4e49\u5b57\u7b26\u4e32\u53cd\u8f6c\u51fd\u6570\u3002 custom_string_reverse.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python3 def reverse_string(word): rev = '' n = len(word) while n > 0: n -= 1 rev += word[n] return rev word = 'forest' print(reverse_string('forest')) \u8bf7\u6ce8\u610f\uff0c\u8fd9\u53ea\u662f\u51fa\u4e8e\u6f14\u793a\u76ee\u7684\uff1b \u8fd9\u4e2a\u5b9e\u73b0\u5f88\u6162\u3002 1 2 3 4 5 6 7 8 9 def reverse_string(word): rev = '' n = len(word) while n > 0: n -= 1 rev += word[n] return rev \u5728\u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 while \u5faa\u73af\u4ee5\u76f8\u53cd\u7684\u987a\u5e8f\u6784\u5efa\u65b0\u5b57\u7b26\u4e32\u3002 Python __reversed__ \u65b9\u6cd5 \u00b6 __reversed__() \u9b54\u672f\u65b9\u6cd5\u5b9e\u73b0\u5e94\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u8fed\u4ee3\u5668\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u4ee5\u76f8\u53cd\u7684\u987a\u5e8f\u904d\u5386\u5bb9\u5668\u4e2d\u7684\u6240\u6709\u5bf9\u8c61\u3002 reversed_magic.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #!/usr/bin/env python3 class Vowels(object): def __init__(self): self.vowels = ['a', 'e', 'i', 'o', 'u', 'y'] def __len__(self): return len(self.vowels) def __getitem__(self, e): return self.vowels[e] def __reversed__(self): for e in self.vowels[::-1]: yield elem vowels = Vowels() print('normal order:') for vowel in vowels: print(vowel, end=' ') print() print('reversed order:') for vowel in reversed(vowels): print(vowel, end=' ') print() \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5728 Vowels \u5bf9\u8c61\u4e2d\u5b9e\u73b0 __reversed__() \u65b9\u6cd5\u3002 1 2 3 4 5 $ ./reversed_magic.py normal order: a e i o u y reversed order: y u o i e a \u8fd9\u662f\u8f93\u51fa\u3002 \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u5728 Python \u4e2d\u5b8c\u6210\u4e86\u53cd\u8f6c\u64cd\u4f5c\u3002","title":"Python \u53cd\u8f6c"},{"location":"pages/python/pytutorial/python-reverse/#Python-\u53cd\u8f6c","text":"\u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u5c55\u793a\u4e86\u5982\u4f55 \u53cd\u8f6c Python \u5e8f\u5217 \u3002 \u5f53\u6211\u4eec\u64a4\u6d88\u9879\u76ee\u65f6\uff0c\u6211\u4eec\u4f1a\u66f4\u6539\u5176\u987a\u5e8f\u3002 \u8bf7\u6ce8\u610f\uff0c\u4e0d\u5e94\u5c06\u53cd\u8f6c\u4e0e\u964d\u5e8f\u6392\u5e8f\u6df7\u6dc6\u3002 Python \u5217\u8868\u5177\u6709 reverse() \u51fd\u6570\u3002 [::-1] slice \u64cd\u4f5c\u53ef\u53cd\u8f6c Python \u5e8f\u5217\u3002 reversed() \u5185\u7f6e\u51fd\u6570\u8fd4\u56de\u53cd\u8f6c\u8fed\u4ee3\u5668\u3002 \u5185\u7f6e reversed() \u8c03\u7528\u5bf9\u8c61\u7684 __reversed__() \u9b54\u672f\u65b9\u6cd5\u4ee5\u5b9e\u73b0\u53cd\u8f6c\u8fed\u4ee3\u3002","title":"Python \u53cd\u8f6c"},{"location":"pages/python/pytutorial/python-reverse/#Python-\u53cd\u8f6c\u5217\u8868","text":"\u5728\u7b2c\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 reverse() \u65b9\u6cd5\u548c [::-1] \u8fd0\u7b97\u7b26\u53cd\u8f6c Python \u5217\u8868\u3002 reverse_list.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python3 nums = [2, 7, 8, 9, 1, 0] nums.reverse() print(nums) rev_nums = nums[::-1] print(rev_nums) reverse() \u65b9\u6cd5\u5728\u9002\u5f53\u7684\u4f4d\u7f6e\u53cd\u8f6c\u5217\u8868\u3002 nums[::-1] \u521b\u5efa\u4e00\u4e2a\u5217\u8868\u7684\u65b0\u526f\u672c\uff0c\u5176\u4e2d\u5143\u7d20\u88ab\u53cd\u8f6c\u3002 1 2 $ ./reverse_list.py [0, 1, 9, 8, 7, 2] \u8fd9\u662f\u8f93\u51fa\u3002","title":"Python \u53cd\u8f6c\u5217\u8868"},{"location":"pages/python/pytutorial/python-reverse/#Python-reversed\u51fd\u6570","text":"reversed() \u5185\u7f6e\u51fd\u6570\u8fd4\u56de\u53cd\u8f6c\u8fed\u4ee3\u5668\u3002 reversed_fun.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/env python3 words = ['forest', 'wood', 'sky', 'rock'] for word in reversed(words): print(word) word = 'forest' for e in reversed(word): print(e, end=' ') print() for e in reversed(range(1, 10, 2)): print(e) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5728\u5217\u8868\uff0c\u5355\u8bcd\u548c\u8303\u56f4\u4e0a\u4f7f\u7528 reversed() \u51fd\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 $ ./reversed_fun.py rock sky wood forest t s e r o f 9 7 5 3 1 \u8fd9\u662f\u8f93\u51fa\u3002","title":"Python reversed\u51fd\u6570"},{"location":"pages/python/pytutorial/python-reverse/#Python-\u81ea\u5b9a\u4e49\u53cd\u8f6c\u5b57\u7b26\u4e32\u51fd\u6570","text":"\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u81ea\u5b9a\u4e49\u5b57\u7b26\u4e32\u53cd\u8f6c\u51fd\u6570\u3002 custom_string_reverse.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python3 def reverse_string(word): rev = '' n = len(word) while n > 0: n -= 1 rev += word[n] return rev word = 'forest' print(reverse_string('forest')) \u8bf7\u6ce8\u610f\uff0c\u8fd9\u53ea\u662f\u51fa\u4e8e\u6f14\u793a\u76ee\u7684\uff1b \u8fd9\u4e2a\u5b9e\u73b0\u5f88\u6162\u3002 1 2 3 4 5 6 7 8 9 def reverse_string(word): rev = '' n = len(word) while n > 0: n -= 1 rev += word[n] return rev \u5728\u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 while \u5faa\u73af\u4ee5\u76f8\u53cd\u7684\u987a\u5e8f\u6784\u5efa\u65b0\u5b57\u7b26\u4e32\u3002","title":"Python \u81ea\u5b9a\u4e49\u53cd\u8f6c\u5b57\u7b26\u4e32\u51fd\u6570"},{"location":"pages/python/pytutorial/python-reverse/#Python-__reversed__\u65b9\u6cd5","text":"__reversed__() \u9b54\u672f\u65b9\u6cd5\u5b9e\u73b0\u5e94\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u8fed\u4ee3\u5668\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u4ee5\u76f8\u53cd\u7684\u987a\u5e8f\u904d\u5386\u5bb9\u5668\u4e2d\u7684\u6240\u6709\u5bf9\u8c61\u3002 reversed_magic.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #!/usr/bin/env python3 class Vowels(object): def __init__(self): self.vowels = ['a', 'e', 'i', 'o', 'u', 'y'] def __len__(self): return len(self.vowels) def __getitem__(self, e): return self.vowels[e] def __reversed__(self): for e in self.vowels[::-1]: yield elem vowels = Vowels() print('normal order:') for vowel in vowels: print(vowel, end=' ') print() print('reversed order:') for vowel in reversed(vowels): print(vowel, end=' ') print() \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5728 Vowels \u5bf9\u8c61\u4e2d\u5b9e\u73b0 __reversed__() \u65b9\u6cd5\u3002 1 2 3 4 5 $ ./reversed_magic.py normal order: a e i o u y reversed order: y u o i e a \u8fd9\u662f\u8f93\u51fa\u3002 \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u5728 Python \u4e2d\u5b8c\u6210\u4e86\u53cd\u8f6c\u64cd\u4f5c\u3002","title":"Python __reversed__\u65b9\u6cd5"},{"location":"pages/python/pytutorial/python-run-job-orchestrator/","text":"Python \u8c03\u7528 Uipath Orchestrator Cloud API \u81ea\u52a8\u8fdc\u7a0b\u6267\u884c job \u00b6 \u57282019\u5e749\u6708\u4e4b\u524d\uff0c UiPath Cloud Orchestrator REST API \u7684\u8eab\u4efd\u9a8c\u8bc1\u4f7f\u7528\u57fa\u672c\u8eab\u4efd\u9a8c\u8bc1\u3002\u4f46\u4ece2019\u5e749\u6708\u5f00\u59cb\uff0c UiPath Cloud Orchestrator REST API \u7684\u8eab\u4efd\u9a8c\u8bc1\u5df2\u66f4\u6539\u4e3aOAuth\u3002\u672c\u6587\u5c06\u4f7f\u7528postman\u89e3\u91ca\u8c03\u7528\u6b65\u9aa4\u548c\u64cd\u4f5c\uff0c\u5e2e\u52a9\u8bfb\u8005\u7406\u89e3\u64cd\u4f5c\u8fc7\u7a0b\uff0c\u5e76\u4e14\u5c06\u4e3a\u60a8\u90e8\u5206 python \u7b80\u5355\u8c03\u7528\u793a\u8303\u3002 \u8c03\u7528\u7684\u8303\u4f8b\u4f7f\u7528 python \u8bed\u8a00\uff0c\u8bfb\u8005\u4e5f\u53ef\u4ee5\u6539\u6210 php , go , c# , java , kotlin \u7b49\u8bed\u8a00\u3002 \u57fa\u672c\u6982\u5ff5 \u00b6 \u4ec0\u4e48\u662fAPI\uff1f \u00b6 API\u662f\u5e94\u7528\u7a0b\u5e8f\u7f16\u7a0b\u63a5\u53e3\uff08 Application Programming Interface \uff09\u7684\u9996\u5b57\u6bcd\u7f29\u5199\uff0c\u5b83\u662f\u4e00\u79cd\u4e2d\u4ecb\u534f\u8bae\uff0c\u5141\u8bb8\u4e24\u4e2a\u5e94\u7528\u7a0b\u5e8f\u76f8\u4e92\u901a\u4fe1\u3002 API\u7684\u793a\u4f8b\uff1f \u00b6 \u5f53\u60a8\u5b89\u88c5\u548c\u4f7f\u7528\u79fb\u52a8\u5e94\u7528\u7a0b\u5e8f\u65f6\uff0c\u8be5\u79fb\u52a8\u5e94\u7528\u7a0b\u5e8f\u5c06\u8fde\u63a5\u5230Internet\u5e76\u5c06\u6570\u636e\u53d1\u9001\u5230\u670d\u52a1\u5668\u3002\u7136\u540e\uff0c\u670d\u52a1\u5668\u68c0\u7d22\u8be5\u6570\u636e\uff0c\u5bf9\u5176\u8fdb\u884c\u89e3\u91ca\uff0c\u6267\u884c\u5fc5\u8981\u7684\u64cd\u4f5c\uff0c\u7136\u540e\u5c06\u5176\u53d1\u9001\u56de\u624b\u673a\u3002\u7136\u540e\uff0c\u5e94\u7528\u7a0b\u5e8f\u5c06\u89e3\u91ca\u8be5\u6570\u636e\uff0c\u5e76\u4ee5\u53ef\u8bfb\u7684\u65b9\u5f0f\u4e3a\u60a8\u63d0\u4f9b\u6240\u9700\u7684\u4fe1\u606f\u3002\u8fd9\u5c31\u662fAPI\uff0c\u6240\u6709\u8fd9\u4e9b\u90fd\u662f\u901a\u8fc7API\u8fdb\u884c\u7684\u3002 Orchestrator API\u7684\u7528\u9014\u662f\u4ec0\u4e48\uff1f \u00b6 Orchestrator API \u53ef\u7528\u4e8e\u901a\u8fc7\u4efb\u4f55\u670d\u52a1\u5668\u3001\u5e73\u677f\u3001\u624b\u673a\u7684\u5e94\u7528\u7a0b\u5e8f\uff08\u751a\u81f3\u5305\u62ecUiPath Studio /\u673a\u5668\u4eba\uff09\u4e0eOrchestrator\u8fdb\u884c\u4ea4\u4e92\u3002 \u901a\u8fc7API\u53ef\u4ee5\u5b9e\u73b0\u7684\u57fa\u672c\u529f\u80fd\u662f \u5f00\u59cb/\u505c\u6b62\u5de5\u4f5c \u68c0\u67e5\u673a\u5668\u4eba\u7684\u72b6\u6001 \u521b\u5efa/\u4fee\u6539\u8d44\u4ea7 \u521b\u5efa\u4e00\u4e2a\u961f\u5217\u5e76\u5c06\u9879\u76ee\u63a8\u5165\u961f\u5217 \u68c0\u67e5\u4f5c\u4e1a\u72b6\u6001 \u83b7\u53d6\u73af\u5883\uff0c\u6d41\u7a0b\uff0c\u673a\u5668\u4eba\uff0c\u961f\u5217\uff0c\u4f5c\u4e1a\u8be6\u7ec6\u4fe1\u606f\u7b49\u7b49\u2026 \u5230\u672c\u6587\u7ed3\u5c3e\u60a8\u5c06\u5b66\u5230\u4ec0\u4e48\uff1f \u00b6 \u60a8\u5c06\u80fd\u591f: OAuth\u8ba4\u8bc1 \u4eceOrchestrator\u83b7\u53d6\u6240\u6709\u673a\u5668\u4eba\u6570\u636e \u83b7\u53d6\u673a\u5668\u4eba\u7684\u72b6\u6001 \u4eceOrchestrator\u83b7\u53d6\u6240\u6709\u6d41\u7a0b(Process) \u4eceOrchestrator\u83b7\u53d6\u6240\u6709\u5de5\u4f5c(Job) \u4eceOrchestrator\u83b7\u53d6\u6240\u6709\u53d1\u884c\u7248(Release) \u4eceOrchestrator\u5f00\u59cb\u4f5c\u4e1a(job) \u505c\u6b62Orchestrator\u7684\u5de5\u4f5c \u4eceOrchestrator\u83b7\u53d6\u6240\u6709\u8d44\u4ea7(Asset) \u66f4\u65b0\u8d44\u4ea7 \u521b\u5efa\u961f\u5217(Queue) \u6dfb\u52a0\u961f\u5217\u5143\u7d20(Item) \u6ce8\u610f: \u6211\u4eec\u4f7f\u7528postman\u6f14\u793a\u672c\u6587\u7684\u8c03\u7528\u6b65\u9aa4\uff0c\u5e76\u4e14\u7ed9\u51fa\u5bf9\u5e94\u7684 python \u8c03\u7528\u793a\u8303 \u8c03\u7528\u6b65\u9aa4 \u00b6 \u4e3a\u4e86\u4e95\u4e95\u6709\u6761\uff0c\u6211\u521b\u5efa\u4e86\u4e00\u4e2ajson\u6a21\u677f\u6765\u5b58\u50a8\u5b89\u5168\u4fe1\u606f\u3002\u8be5JSON\u6a21\u677f\u5b58\u50a8\u5728\u4e00\u4e2a\u6587\u4ef6\u540d\u4e3asettings.json\u3002\u6240\u6709\u8fd9\u4e9b\u5c5e\u6027\u7684\u542b\u4e49\uff0c\u5728\u9605\u8bfb\u672c\u6587\u65f6\uff0c\u8fd9\u4e00\u70b9\u5c06\u53d8\u5f97\u5f88\u6e05\u695a\u3002 \u60a8\u7684\u521d\u59cbsettings.json\u6587\u4ef6\u5e94\u7c7b\u4f3c\u4e8e\u4ee5\u4e0b\u793a\u4f8b\u3002 \u5c06\u672c\u6587\u4e2d\u7684json\u76f4\u63a5\u526a\u5207\u5e76\u7c98\u8d34\u5230\u8bb0\u4e8b\u672c\uff08Windows\uff09\u6216TextEdit\uff08Mac\uff09\u4e2d\uff0c\u7136\u540e\u586b\u5199\u60a8\u7684\u7528\u6237\u540d\u548c\u4e24\u4e2a\u5bc6\u7801\uff0c\u7136\u540e\u4fdd\u5b58\u6587\u4ef6\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 { \"OAuthUrl\" : \"https://account.uipath.com/oauth/token\" , \"url\" : \"https://cloud.uipath.com\" , \"AccountLogicName\" : \"\u4f60\u7684AccountLogicName\" , \"TenantName\" : \"\u4f60\u7684TenantName\" , \"DefaultFolder\" : \"Default\" , \"UserKey\" : \"\u4f60\u7684UserKey\" , \"ClientId\" : \"\u4f60\u7684ClientId\" , \"access_token\" : \"\" , \"id_token\" : \"\" , \"scope\" : \"\" , \"expires_in\" : \"86400\" , \"token_type\" : \"Bearer\" , \"init_time\" : \"0\" , \"RobotId\" : \"\u4f60\u7684RobotId\" , \"ReleaseKey\" : \"\u4f60\u7684process\u7684ReleaseKey\" } \u6b65\u9aa4\u4e00 \u4ece Orchestrator \u8d26\u6237\u4e2d\u83b7\u53d6 UserKey\u7b49 API OAuth \u53c2\u6570 \u00b6 \u767b\u5f55\u8fdb\u5165\u4f60\u7684 Orchestrator \u8d26\u6237\uff0c\u8fdb\u5165\u4ee5\u4e0b\u754c\u9762\uff0c\u590d\u5236\u53c2\u6570 UserKey, AccountLogicName, TenantName, ClientId\u3002 \u6b65\u9aa4\u4e8c Authenticate \u8ba4\u8bc1 \u00b6 \u6b64\u8fc7\u7a0b\u7684\u6700\u7ec8\u76ee\u6807\u662f\u62e5\u6709\u6709\u6548\u7684OAuth\u8bbf\u95ee\u4ee4\u724c\u3002\u8be5\u4ee4\u724c\u5c06\u4f5c\u4e3aGET\u548cPOST\u8bf7\u6c42\u6807\u5934\u4e2d\u7684Bearer\u4ee4\u724c\u4f20\u9012\u5230UiPath Cloud Orchestrator REST API\u3002 \u6ce8\u610f! \u53d1\u51faREST API\u8bf7\u6c42\u65f6\uff0c\u8bf7\u5728\u6bcf\u4e2a\u4f1a\u8bdd\u5f00\u59cb\u65f6\u4f7f\u7528\"\u5237\u65b0\u4ee4\u724c\"\u83b7\u53d6\u65b0\u7684\u8bbf\u95ee\u4ee4\u724c\uff0c\u7136\u540e\u4f7f\u7528\u5b83\u6765\u53d1\u51fa\u4e00\u4e2a\u6216\u591a\u4e2aREST API\u8bf7\u6c42\u3002\u4ee4\u724c\u7684\u6709\u6548\u671f\u4e3a24\u5c0f\u65f6\uff0c\u6bcf\u6b21\u8fd0\u884c\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u50a8\u5b58\u7684\u65e7\u4ee4\u724c\u3002 \u8bf7\u6ce8\u610f\uff0c\u8bf7\u5c3d\u91cf\u51cf\u5c11\u91cd\u590d\u751f\u6210\u65b0\u4ee4\u724c\uff0c\u5426\u5219\u4e91\u7aef\u670d\u52a1\u5668\u53ef\u80fd\u4f1a\u5bf9\u4f60\u7684api\u9650\u901f\u3002 \u6ce8\u610f! \u4e3a\u65b9\u4fbf\u591a\u4e2aget/post, \u6211\u4eec\u628a\u5404\u53d8\u91cf\u50a8\u5b58\u5728postman\u7684\u73af\u5883\u53d8\u91cf\u91cc\uff0c\u8c03\u7528\u53d8\u91cf\u65f6\uff0cpostman\u7684\u5f62\u5f0f\u662f {{\u53d8\u91cf\u540d}} , \u4f8b\u5982 {{access_token}}, {{AccountLogicName}}, {{TenantName}}\u7b49\u7b49\u3002 Request (Post \u8bbf\u95ee) \u5982\u56fe\u8f93\u5165\u7f51\u5740\u548c\u76f8\u5173\u53c2\u6570\uff0c\u5728 Body \u91cc\u8f93\u5165json, \u503c\u662f ClientId \u548c UserKey , \u5728 Headers \u91cc\u8f93\u5165\u952e\u540d X-UIPATH-TenantName \u548c\u503c TenantName \u3002 1 2 3 4 5 { \"grant_type\" : \"refresh_token\" , \"client_id\" : \"\u4f60\u7684 ClientId\" , \"refresh_token\" : \"\u4f60\u7684UserKey\" } Response (200 OK) \u8fd4\u56de\u7ed3\u679c\u5305\u62ec access_token , id_token \u7b49\u53c2\u6570\uff0c\u6211\u4eec\u8981\u5728\u540e\u7eed\u7684api\u8bbf\u95ee\u91cc\u4f7f\u7528\u3002 Python \u4ee3\u7801\u7247\u6bb5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 async def authToken ( self ): \"\"\"OAuth \u9a8c\u8bc1\"\"\" headers = { 'content-type' : self . ContentType , 'X-UIPATH-TenantName' : self . data [ \"TenantName\" ]} body_value = { \"grant_type\" : self . GrantType , \"client_id\" : self . data [ \"ClientId\" ], \"refresh_token\" : self . data [ \"UserKey\" ]} payload = json . JSONEncoder () . encode ( body_value ) try : if check_expire ( self . data [ \"expires_in\" ], self . data [ \"init_time\" ]): ret = await self . postdata ( url = self . data [ \"OAuthUrl\" ], headers = headers , data = payload ) if ret is None : print ( \"\u8bf7\u68c0\u67e5settings.json\u662f\u5426\u8bbe\u7f6e\u4e86api\u4fe1\u606f!\" ) os . _exit ( 0 ) else : self . data [ \"access_token\" ] = ret . get ( \"access_token\" ) self . data [ \"id_token\" ] = ret . get ( \"id_token\" ) self . data [ \"scope\" ] = ret . get ( \"scope\" ) self . data [ \"expires_in\" ] = ret . get ( \"expires_in\" , 0 ) self . data [ \"token_type\" ] = ret . get ( \"token_type\" ) self . data [ \"init_time\" ] = int ( time . time ()) except Exception as err : print ( \"OAuth Error: {0} \" . format ( err )) raise \u6b65\u9aa4\u4e09 \u67e5\u8be2 Robot, Job, Process, Release\u4fe1\u606f \u00b6 \u83b7\u53d6 License \u4fe1\u606f Get \u8bbf\u95eeendpoint: /odata/Settings/UiPath.Server.Configuration.OData.GetLicense \u83b7\u53d6 Folder \u4fe1\u606f Get \u8bbf\u95eeendpoint: /odata/OrganizationUnits \u8fd4\u56de\u7ed3\u679c DisplayName \u53c2\u6570\uff0c\u6211\u4eec\u5728\u540e\u7eed\u7684api\u91cc\u4f7f\u7528 Python \u4ee3\u7801\u7247\u6bb5 1 2 3 4 5 6 7 8 async def getFolder ( self ): \"\"\"\u83b7\u53d6 Folder \u4fe1\u606f\"\"\" headers = { \"AUTHORIZATION\" : self . data [ \"token_type\" ] + ' ' + self . data [ \"access_token\" ], 'content-type' : self . ContentType , 'X-UIPATH-TenantName' : self . data [ \"TenantName\" ]} url = self . _folder . format ( self . data [ \"url\" ], self . data [ \"AccountLogicName\" ], self . data [ \"TenantName\" ]) ret = await self . getdata ( url , headers = headers ) return [ x for x in ret . get ( \"value\" , [])] \u83b7\u53d6\u6240\u6709\u7684 Robots \u4fe1\u606f Get \u8bbf\u95eeendpoint: /odata/Robots \u8fd4\u56de\u6240\u6709\u7684 Robots \u4fe1\u606f Headers \u53c2\u6570 AUTHORIZATION , Content-Type , X-UIPATH-FolderPath Python \u4ee3\u7801\u7247\u6bb5 1 2 3 4 5 6 7 8 async def getRobots ( self ): \"\"\"\u83b7\u53d6\u5168\u90e8 Robot \u4fe1\u606f \"\"\" headers = { \"AUTHORIZATION\" : self . data [ \"token_type\" ] + ' ' + self . data [ \"access_token\" ], 'content-type' : self . ContentType , 'X-UIPATH-FolderPath' : self . data [ \"DefaultFolder\" ]} url = self . _getRobots . format ( self . data [ \"url\" ], self . data [ \"AccountLogicName\" ], self . data [ \"TenantName\" ]) ret = await self . getdata ( url , headers = headers ) return [ x for x in ret . get ( \"value\" , [])] \u83b7\u53d6\u6307\u5b9a\u7684 Robot \u72b6\u6001 Get \u8bbf\u95eeendpoint: /odata/Sessions?$top=1&$filter=Robot/Id eq (\u8fd9\u91cc\u653erobot id) &$select=State \u8fd4\u56de\u7ed3\u679c\u7684\u53ef\u80fd\u72b6\u6001\u5305\u62ec: Available , Busy , Disconnected , Unresponsive \uff0c \u6211\u4eec\u5728\u4f7f\u7528Robot\u6267\u884c\u4f5c\u4e1a\u65f6\uff0c\u9700\u8981\u5148\u5224\u65adRobot\u662f Available \u3002 \u83b7\u53d6\u6240\u6709 Process \u4fe1\u606f Get \u8bbf\u95eeendpoint: /odata/Processes \u8fd4\u56de\u6240\u6709\u7684 Process \u4fe1\u606f @odata.count \u662fProcess\u603b\u6570 \u83b7\u53d6\u6240\u6709\u4f5c\u4e1a Jobs \u4fe1\u606f Get \u8bbf\u95eeendpoint: /odata/Jobs \u8fd4\u56de\u6240\u6709\u7684 Jobs \u4fe1\u606f @odata.count \u662fJobs\u603b\u6570 \u83b7\u53d6\u6240\u6709 Releases\u4fe1\u606f Get \u8bbf\u95eeendpoint: /odata/Releases \u8fd4\u56de\u6240\u6709\u7684 Release \u4fe1\u606f @odata.count \u662fRelease\u603b\u6570 \u6267\u884c Job, \u5b9a\u4e49\u961f\u5217\uff0c\u6dfb\u52a0\u961f\u5217\uff0c\u8bbf\u95ee/\u4fee\u6539 Asset \u00b6 \u6267\u884c\u4f5c\u4e1a Job Post \u8bbf\u95eeendpoint: /odata/Jobs/UiPath.Server.Configuration.OData.StartJobs \u5982\u56fe\u793a\uff0c Body \u4e2d\u9700\u8981\u6dfb\u52a0\u5982\u4e0b\u7684\u5185\u5bb9\uff0c\u5177\u4f53\u53c2\u6570\u542b\u4e49\uff0c\u8bf7\u53c2\u8003UiPath Orchestrator \u624b\u518c 1 2 3 4 5 6 7 { \"startInfo\" : { \"ReleaseKey\" : \"\u4f60\u7684ReleaseId\" , \"Strategy\" : \"All\" , \"RobotIds\" : [] } } \u8fd4\u56de\u7ed3\u679c\u662f (HTTP 201 Created) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 { \"@odata.context\" : \"https://cloud.uipath.com/odata/$metadata#Jobs\" , \"value\" : [ { \"Key\" : \"31ade17f-5a35-4250-beea-43922dc2a20d\" , \"StartTime\" : null , \"EndTime\" : null , \"State\" : \"Pending\" , \"Source\" : \"Manual\" , \"BatchExecutionKey\" : \"cbaff1c6-32b0-468b-9ad9-b59f9ca1d3b6\" , \"Info\" : null , \"CreationTime\" : \"2018-03-19T19:01:58.6806126Z\" , \"StartingScheduleId\" : null , \"Id\" : 128209 }] } \u505c\u6b62\u4f5c\u4e1a Job Post \u8bbf\u95eeendpoint: /odata/Jobs/UiPath.Server.Configuration.OData.StopJobs 1 2 3 4 { \"jobIds\" : [ 141888 , 141889 ], \"strategy\" : \"Kill\" } \u8fd4\u56de\u7ed3\u679c (HTTP 200) 200 OK \u5217\u51fa\u6240\u6709 Assets Get \u8bbf\u95eeendpoint: /odata/Assets \u521b\u5efa Asset Post \u8bbf\u95eeendpoint: /odata/Assets \u8bbe\u7f6e Body \u4e3a\uff1a 1 2 3 4 5 6 { \"Name\" : \"\u6d4b\u8bd5\u53c2\u65702\" , \"ValueScope\" : \"Global\" , \"ValueType\" : \"Text\" , \"StringValue\" : \"An asset added through an API call\" } \u8fd4\u56de\u7ed3\u679c\u72b6\u6001\u662f (HTTP 201), \u8fd4\u56de\u5185\u5bb9\u5982\u56fe\u793a\u3002 \u4fee\u6539Asset Put \u8bbf\u95eeendpoint: /odata/Assets(\u53d8\u91cfId) \u8fd4\u56de\u7ed3\u679c\u72b6\u6001\u662f (HTTP 200)\u3002 \u521b\u5efa\u961f\u5217 Queue Post \u8bbf\u95eeendpoint: /odata/QueueDefinitions \u8fd4\u56de\u7ed3\u679c\u72b6\u6001\u662f (HTTP 201 Created), \u8fd4\u56de\u5185\u5bb9\u5982\u56fe\u793a\u3002 \u6dfb\u52a0\u961f\u5217\u5143\u7d20 Post \u8bbf\u95eeendpoint: /odata/Queues/UiPathODataSvc.AddQueueItem \u8fd4\u56de\u7ed3\u679c\u72b6\u6001\u662f (HTTP 201 Created), \u8fd4\u56de\u5185\u5bb9\u5982\u56fe\u793a\u3002 \u5982\u679c\u8fdb\u5165Orchestrator\u7684\u7ba1\u7406\uff0c\u961f\u5217\u7ba1\u7406\u754c\u9762\uff0c\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u6210\u529f\u6dfb\u52a0\u4e86\u65b0\u961f\u5217\uff0c\u961f\u5217\u5143\u7d20\u3002 \u597d\u4e86\uff0c\u5230\u6b64\u6211\u4eec\u5c31\u521d\u6b65\u7528Postman\u6f14\u793a\u4e86\u5982\u4f55\u8c03\u7528Orchestrator \u7684API\u63a5\u53e3\uff0c\u4f7f\u7528\u8fd9\u4e9b\u63a5\u53e3\uff0c\u4f60\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u521b\u5efa\u624b\u673a\uff0c\u670d\u52a1\u5668\u548c\u5e73\u677f\u4e0a\u7684\u5e94\u7528\u6765\u9a71\u52a8UiPath Robot\uff0c\u8fdc\u7a0b\u8c03\u7528Robot\u7684\u65b9\u5f0f\u53ef\u4ee5\u6709\u4e09\u79cd: \u961f\u5217\u5f02\u6b65\u9a71\u52a8(\u8bbe\u7f6e\u961f\u5217\u4e00\u6dfb\u52a0\u65b0\u5143\u7d20\uff0cRobot\u5c31\u7acb\u5373\u6267\u884c\uff0c\u5e94\u7528\u7684\u4f8b\u5b50\u4f8b\u5982\u6536\u5230\u65b0\u90ae\u4ef6\uff0c\u6216\u8005\u94f6\u884c\u4e8b\u52a1) \u5b9a\u65f6\u9a71\u52a8(\u8bbe\u7f6e\u6309\u65f6\u95f4\u548c\u6267\u884c\u9891\u7387\uff0c\u8fd0\u884cRobot) \u7528 StartJob \u76f4\u63a5\u8c03\u7528 Robot Python \u4ee3\u7801\u6587\u4ef6 orchestrator.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 # -*- coding: utf-8 -*- \"\"\"This module holds class orchestrator of UiPath \"\"\" import asyncio import aiohttp import json import time import os check_expire = lambda expires_in , init_time : int ( time . time ()) > int ( expires_in ) + int ( init_time ) - 3600 class orchestrator (): def __init__ ( self , data ): \"\"\"\u521d\u59cb\u5316 Orchestrator \u5bf9\u8c61\"\"\" self . data = data self . ContentType = 'application/json' self . GrantType = 'refresh_token' self . _folder = ' {0} / {1} / {2} /odata/OrganizationUnits' self . _getRobots = ' {0} / {1} / {2} /odata/Robots' self . _addQueue = ' {0} / {1} / {2} /odata/Queues/UiPathODataSvc.AddQueueItem' self . _addQueueBulk = ' {0} / {1} / {2} /odata/Queues/UiPathODataSvc.BulkAddQueueItems' self . _getRobotStatus = ' {0} /odata/Sessions?$top=1&$filter=Robot/Id eq {1} &$select=State' self . _StartJob = ' {0} /odata/Jobs/UiPath.Server.Configuration.OData.StartJobs' @staticmethod async def postdata ( url = None , headers = None , data = None ): ret = None try : async with aiohttp . ClientSession () as session : async with session . post ( url , headers = headers , data = data , timeout = 300 , ssl = False ) as r : #verify_ssl=False if ( r . status == 200 ) or ( r . status == 201 ): try : ret = await r . json () except Exception as err : print ( \"post url {0} Exception error: {1} \" . format ( url , err )) raise else : print ( \"Post\u5931\u8d25\uff0ccode= %d %s \" % ( r . status , await r . text ())) except aiohttp . ClientError as err : print ( \"post url {0} error {1} \" . format ( url , err )) raise return ret @staticmethod async def getdata ( url = None , headers = None , params = None ): ret = None try : async with aiohttp . ClientSession ( headers = headers ) as session : async with session . get ( url , params = params , timeout = 300 , ssl = False ) as r : #verify_ssl=False assert r . status == 200 , r . status #401 Unauthorized raise AssertionError ret = await r . json () except aiohttp . ClientError as err : #traceback.print_exc() print ( \"Get url {0} error {1} \" . format ( url , err )) raise return ret @staticmethod async def putdata ( url = None , headers = None , data = None ): ret = None try : async with aiohttp . ClientSession () as session : async with session . put ( url , headers = headers , data = data , timeout = 300 , ssl = False ) as r : #verify_ssl=False if ( r . status == 200 ) or ( r . status == 201 ): try : ret = await r . json () except Exception as err : print ( \"put url {0} Exception error: {1} \" . format ( url , err )) raise else : print ( \"Put\u5931\u8d25\uff0ccode= %d %s \" % ( r . status , await r . text ())) except aiohttp . ClientError as err : print ( \"put url {0} error {1} \" . format ( url , err )) raise return ret async def authToken ( self ): \"\"\"OAuth \u9a8c\u8bc1\"\"\" headers = { 'content-type' : self . ContentType , 'X-UIPATH-TenantName' : self . data [ \"TenantName\" ]} body_value = { \"grant_type\" : self . GrantType , \"client_id\" : self . data [ \"ClientId\" ], \"refresh_token\" : self . data [ \"UserKey\" ]} payload = json . JSONEncoder () . encode ( body_value ) try : if check_expire ( self . data [ \"expires_in\" ], self . data [ \"init_time\" ]): ret = await self . postdata ( url = self . data [ \"OAuthUrl\" ], headers = headers , data = payload ) if ret is None : print ( \"\u8bf7\u68c0\u67e5settings.json\u662f\u5426\u8bbe\u7f6e\u4e86api\u4fe1\u606f!\" ) os . _exit ( 0 ) else : self . data [ \"access_token\" ] = ret . get ( \"access_token\" ) self . data [ \"id_token\" ] = ret . get ( \"id_token\" ) self . data [ \"scope\" ] = ret . get ( \"scope\" ) self . data [ \"expires_in\" ] = ret . get ( \"expires_in\" , 0 ) self . data [ \"token_type\" ] = ret . get ( \"token_type\" ) self . data [ \"init_time\" ] = int ( time . time ()) except Exception as err : print ( \"OAuth Error: {0} \" . format ( err )) raise async def getFolder ( self ): \"\"\"\u83b7\u53d6 Folder \u4fe1\u606f\"\"\" headers = { \"AUTHORIZATION\" : self . data [ \"token_type\" ] + ' ' + self . data [ \"access_token\" ], 'content-type' : self . ContentType , 'X-UIPATH-TenantName' : self . data [ \"TenantName\" ]} url = self . _folder . format ( self . data [ \"url\" ], self . data [ \"AccountLogicName\" ], self . data [ \"TenantName\" ]) ret = await self . getdata ( url , headers = headers ) return [ x for x in ret . get ( \"value\" , [])] async def getRobots ( self ): \"\"\"\u83b7\u53d6\u5168\u90e8 Robot \u4fe1\u606f \"\"\" headers = { \"AUTHORIZATION\" : self . data [ \"token_type\" ] + ' ' + self . data [ \"access_token\" ], 'content-type' : self . ContentType , 'X-UIPATH-FolderPath' : self . data [ \"DefaultFolder\" ]} url = self . _getRobots . format ( self . data [ \"url\" ], self . data [ \"AccountLogicName\" ], self . data [ \"TenantName\" ]) ret = await self . getdata ( url , headers = headers ) return [ x for x in ret . get ( \"value\" , [])] test_UiPathOC.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 # -*- coding: utf-8 -*- \"\"\" \u5355\u5143\u6d4b\u8bd5\u7ec4\uff0c\u6d4b\u8bd5 UiPath Orchestrator API\u7684\u90e8\u5206\u63a5\u53e3\uff0c\u63d0\u4f9b\u8c03\u7528API\u6f14\u793a \"\"\" import unittest import time import asyncio import json from orchestrator import orchestrator SETTINGS_FILE = \"settings.json\" def print_test ( method ): \"\"\" \u8f93\u51fa\u6d4b\u8bd5\u5355\u5143\uff0c\u6253\u5370\u5355\u5143\u8017\u65f6\uff0c\u6d4b\u8bd5\u5355\u5143\u540d\u548c\u6d4b\u8bd5\u7ed3\u679c \"\"\" def run ( * args , ** kw ): ts = time . time () print ( ' \\t \u6d4b\u8bd5\u5355\u5143 %r ' % method . __qualname__ ) method ( * args , ** kw ) te = time . time () print ( ' \\t [\u6d4b\u8bd5\u901a\u8fc7] \u8017\u65f6 %r %2.2f \u79d2' % ( method . __qualname__ , te - ts )) return run def save_settings ( data ): \"\"\"\u4fdd\u5b58 settings.json\"\"\" # \u5199\u5165 JSON \u6570\u636e with open ( SETTINGS_FILE , 'w' ) as f : json . dump ( data , f ) class OrchestratorTestCase ( unittest . TestCase ): \"\"\"\u6d4b\u8bd5 Orchestrator API\"\"\" def setUp ( self ): \"\"\"\u6267\u884c\u5355\u5143\u6d4b\u8bd5\u524d\u5148\u6267\u884c\"\"\" # \u8bfb\u53d6 settings.json \u6570\u636e with open ( SETTINGS_FILE , 'r' ) as f : data = json . load ( f ) self . oc = orchestrator ( data ) coroutine = self . oc . authToken () loop = asyncio . get_event_loop () loop . run_until_complete ( coroutine ) @print_test def test_01_getFolder ( self ): coroutine = self . oc . getFolder () loop = asyncio . get_event_loop () task = asyncio . ensure_future ( coroutine ) loop . run_until_complete ( task ) folders = task . result () self . assertTrue ( isinstance ( folders , list ) and len ( folders ) > 0 ) output = [] for folder in folders : output . append (( folder [ \"DisplayName\" ], folder [ \"Id\" ])) print ( \" \\t \u4f60\u7684 Folder: \" , output ) @print_test def test_02_getRobots ( self ): coroutine = self . oc . getRobots () loop = asyncio . get_event_loop () task = asyncio . ensure_future ( coroutine ) loop . run_until_complete ( task ) robots = task . result () self . assertTrue ( isinstance ( robots , list ) and len ( robots ) > 0 ) output = [] for robot in robots : output . append (( robot [ \"Name\" ], robot [ \"Id\" ], robot [ \"Type\" ])) print ( \" \\t \u4f60\u7684 Robots: \" , output ) if __name__ == '__main__' : #\u6267\u884c\u5355\u5143\u6d4b\u8bd5 unittest . main ( verbosity = 0 ) \u628a\u5982\u4e0a\u7684\u4e09\u4e2a\u6587\u4ef6\uff0c settings.json , orchestrator.py , test_UiPathOC.py \u653e\u5728\u540c\u4e00\u76ee\u5f55\uff0c\u6309\u6b65\u9aa4\u4e00\u4eceoc\u8d26\u6237\u83b7\u53d6 API access \u7684\u53c2\u6570\u586b\u5165 settings.json \u3002\u5728 cmd \u7a97\u53e3\u4e0b, \u8f93\u5165\uff1a 1 2 3 pip install asyncio pip install aiohttp pip install unittest \u8f93\u5165\u4ee5\u4e0b\u5355\u5143\u6d4b\u8bd5\u7684\u547d\u4ee4\uff0c 1 python test_UiPathOC.py \u7ed3\u679c\uff1a \u603b\u7ed3\uff1a \u901a\u8fc7\u5728\u5e94\u7528\u7cfb\u7edf\u4e2d\u8fdc\u7a0b\u5f02\u6b65\u8c03\u7528Orchestrator API\u63a5\u53e3\uff0c\u53ef\u4ee5\u5b9e\u73b0\u624b\u673a\u3001\u5e73\u677f\u3001\u670d\u52a1\u5668\u591a\u5e73\u53f0\u5e94\u7528\u9a71\u52a8\u591a\u4e2a UiPath Robot \u5e76\u53d1\u5904\u7406\u4efb\u52a1\uff0c\u6269\u5c55\u4e86\u5e94\u7528\u5bbd\u5ea6\u548c\u7075\u6d3b\u6027\u3002","title":"python Uipath Orchestrator Cloud API \u6559\u7a0b"},{"location":"pages/python/pytutorial/python-run-job-orchestrator/#Python-\u8c03\u7528-Uipath-Orchestrator-Cloud-API-\u81ea\u52a8\u8fdc\u7a0b\u6267\u884c-job","text":"\u57282019\u5e749\u6708\u4e4b\u524d\uff0c UiPath Cloud Orchestrator REST API \u7684\u8eab\u4efd\u9a8c\u8bc1\u4f7f\u7528\u57fa\u672c\u8eab\u4efd\u9a8c\u8bc1\u3002\u4f46\u4ece2019\u5e749\u6708\u5f00\u59cb\uff0c UiPath Cloud Orchestrator REST API \u7684\u8eab\u4efd\u9a8c\u8bc1\u5df2\u66f4\u6539\u4e3aOAuth\u3002\u672c\u6587\u5c06\u4f7f\u7528postman\u89e3\u91ca\u8c03\u7528\u6b65\u9aa4\u548c\u64cd\u4f5c\uff0c\u5e2e\u52a9\u8bfb\u8005\u7406\u89e3\u64cd\u4f5c\u8fc7\u7a0b\uff0c\u5e76\u4e14\u5c06\u4e3a\u60a8\u90e8\u5206 python \u7b80\u5355\u8c03\u7528\u793a\u8303\u3002 \u8c03\u7528\u7684\u8303\u4f8b\u4f7f\u7528 python \u8bed\u8a00\uff0c\u8bfb\u8005\u4e5f\u53ef\u4ee5\u6539\u6210 php , go , c# , java , kotlin \u7b49\u8bed\u8a00\u3002","title":"Python \u8c03\u7528 Uipath Orchestrator Cloud API \u81ea\u52a8\u8fdc\u7a0b\u6267\u884c job"},{"location":"pages/python/pytutorial/python-run-job-orchestrator/#\u57fa\u672c\u6982\u5ff5","text":"","title":"\u57fa\u672c\u6982\u5ff5"},{"location":"pages/python/pytutorial/python-run-job-orchestrator/#\u4ec0\u4e48\u662fAPI","text":"API\u662f\u5e94\u7528\u7a0b\u5e8f\u7f16\u7a0b\u63a5\u53e3\uff08 Application Programming Interface \uff09\u7684\u9996\u5b57\u6bcd\u7f29\u5199\uff0c\u5b83\u662f\u4e00\u79cd\u4e2d\u4ecb\u534f\u8bae\uff0c\u5141\u8bb8\u4e24\u4e2a\u5e94\u7528\u7a0b\u5e8f\u76f8\u4e92\u901a\u4fe1\u3002","title":"\u4ec0\u4e48\u662fAPI\uff1f"},{"location":"pages/python/pytutorial/python-run-job-orchestrator/#API\u7684\u793a\u4f8b","text":"\u5f53\u60a8\u5b89\u88c5\u548c\u4f7f\u7528\u79fb\u52a8\u5e94\u7528\u7a0b\u5e8f\u65f6\uff0c\u8be5\u79fb\u52a8\u5e94\u7528\u7a0b\u5e8f\u5c06\u8fde\u63a5\u5230Internet\u5e76\u5c06\u6570\u636e\u53d1\u9001\u5230\u670d\u52a1\u5668\u3002\u7136\u540e\uff0c\u670d\u52a1\u5668\u68c0\u7d22\u8be5\u6570\u636e\uff0c\u5bf9\u5176\u8fdb\u884c\u89e3\u91ca\uff0c\u6267\u884c\u5fc5\u8981\u7684\u64cd\u4f5c\uff0c\u7136\u540e\u5c06\u5176\u53d1\u9001\u56de\u624b\u673a\u3002\u7136\u540e\uff0c\u5e94\u7528\u7a0b\u5e8f\u5c06\u89e3\u91ca\u8be5\u6570\u636e\uff0c\u5e76\u4ee5\u53ef\u8bfb\u7684\u65b9\u5f0f\u4e3a\u60a8\u63d0\u4f9b\u6240\u9700\u7684\u4fe1\u606f\u3002\u8fd9\u5c31\u662fAPI\uff0c\u6240\u6709\u8fd9\u4e9b\u90fd\u662f\u901a\u8fc7API\u8fdb\u884c\u7684\u3002","title":"API\u7684\u793a\u4f8b\uff1f"},{"location":"pages/python/pytutorial/python-run-job-orchestrator/#Orchestrator-API\u7684\u7528\u9014\u662f\u4ec0\u4e48","text":"Orchestrator API \u53ef\u7528\u4e8e\u901a\u8fc7\u4efb\u4f55\u670d\u52a1\u5668\u3001\u5e73\u677f\u3001\u624b\u673a\u7684\u5e94\u7528\u7a0b\u5e8f\uff08\u751a\u81f3\u5305\u62ecUiPath Studio /\u673a\u5668\u4eba\uff09\u4e0eOrchestrator\u8fdb\u884c\u4ea4\u4e92\u3002 \u901a\u8fc7API\u53ef\u4ee5\u5b9e\u73b0\u7684\u57fa\u672c\u529f\u80fd\u662f \u5f00\u59cb/\u505c\u6b62\u5de5\u4f5c \u68c0\u67e5\u673a\u5668\u4eba\u7684\u72b6\u6001 \u521b\u5efa/\u4fee\u6539\u8d44\u4ea7 \u521b\u5efa\u4e00\u4e2a\u961f\u5217\u5e76\u5c06\u9879\u76ee\u63a8\u5165\u961f\u5217 \u68c0\u67e5\u4f5c\u4e1a\u72b6\u6001 \u83b7\u53d6\u73af\u5883\uff0c\u6d41\u7a0b\uff0c\u673a\u5668\u4eba\uff0c\u961f\u5217\uff0c\u4f5c\u4e1a\u8be6\u7ec6\u4fe1\u606f\u7b49\u7b49\u2026","title":"Orchestrator API\u7684\u7528\u9014\u662f\u4ec0\u4e48\uff1f"},{"location":"pages/python/pytutorial/python-run-job-orchestrator/#\u5230\u672c\u6587\u7ed3\u5c3e\u60a8\u5c06\u5b66\u5230\u4ec0\u4e48","text":"\u60a8\u5c06\u80fd\u591f: OAuth\u8ba4\u8bc1 \u4eceOrchestrator\u83b7\u53d6\u6240\u6709\u673a\u5668\u4eba\u6570\u636e \u83b7\u53d6\u673a\u5668\u4eba\u7684\u72b6\u6001 \u4eceOrchestrator\u83b7\u53d6\u6240\u6709\u6d41\u7a0b(Process) \u4eceOrchestrator\u83b7\u53d6\u6240\u6709\u5de5\u4f5c(Job) \u4eceOrchestrator\u83b7\u53d6\u6240\u6709\u53d1\u884c\u7248(Release) \u4eceOrchestrator\u5f00\u59cb\u4f5c\u4e1a(job) \u505c\u6b62Orchestrator\u7684\u5de5\u4f5c \u4eceOrchestrator\u83b7\u53d6\u6240\u6709\u8d44\u4ea7(Asset) \u66f4\u65b0\u8d44\u4ea7 \u521b\u5efa\u961f\u5217(Queue) \u6dfb\u52a0\u961f\u5217\u5143\u7d20(Item) \u6ce8\u610f: \u6211\u4eec\u4f7f\u7528postman\u6f14\u793a\u672c\u6587\u7684\u8c03\u7528\u6b65\u9aa4\uff0c\u5e76\u4e14\u7ed9\u51fa\u5bf9\u5e94\u7684 python \u8c03\u7528\u793a\u8303","title":"\u5230\u672c\u6587\u7ed3\u5c3e\u60a8\u5c06\u5b66\u5230\u4ec0\u4e48\uff1f"},{"location":"pages/python/pytutorial/python-run-job-orchestrator/#\u8c03\u7528\u6b65\u9aa4","text":"\u4e3a\u4e86\u4e95\u4e95\u6709\u6761\uff0c\u6211\u521b\u5efa\u4e86\u4e00\u4e2ajson\u6a21\u677f\u6765\u5b58\u50a8\u5b89\u5168\u4fe1\u606f\u3002\u8be5JSON\u6a21\u677f\u5b58\u50a8\u5728\u4e00\u4e2a\u6587\u4ef6\u540d\u4e3asettings.json\u3002\u6240\u6709\u8fd9\u4e9b\u5c5e\u6027\u7684\u542b\u4e49\uff0c\u5728\u9605\u8bfb\u672c\u6587\u65f6\uff0c\u8fd9\u4e00\u70b9\u5c06\u53d8\u5f97\u5f88\u6e05\u695a\u3002 \u60a8\u7684\u521d\u59cbsettings.json\u6587\u4ef6\u5e94\u7c7b\u4f3c\u4e8e\u4ee5\u4e0b\u793a\u4f8b\u3002 \u5c06\u672c\u6587\u4e2d\u7684json\u76f4\u63a5\u526a\u5207\u5e76\u7c98\u8d34\u5230\u8bb0\u4e8b\u672c\uff08Windows\uff09\u6216TextEdit\uff08Mac\uff09\u4e2d\uff0c\u7136\u540e\u586b\u5199\u60a8\u7684\u7528\u6237\u540d\u548c\u4e24\u4e2a\u5bc6\u7801\uff0c\u7136\u540e\u4fdd\u5b58\u6587\u4ef6\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 { \"OAuthUrl\" : \"https://account.uipath.com/oauth/token\" , \"url\" : \"https://cloud.uipath.com\" , \"AccountLogicName\" : \"\u4f60\u7684AccountLogicName\" , \"TenantName\" : \"\u4f60\u7684TenantName\" , \"DefaultFolder\" : \"Default\" , \"UserKey\" : \"\u4f60\u7684UserKey\" , \"ClientId\" : \"\u4f60\u7684ClientId\" , \"access_token\" : \"\" , \"id_token\" : \"\" , \"scope\" : \"\" , \"expires_in\" : \"86400\" , \"token_type\" : \"Bearer\" , \"init_time\" : \"0\" , \"RobotId\" : \"\u4f60\u7684RobotId\" , \"ReleaseKey\" : \"\u4f60\u7684process\u7684ReleaseKey\" }","title":"\u8c03\u7528\u6b65\u9aa4"},{"location":"pages/python/pytutorial/python-run-job-orchestrator/#\u6b65\u9aa4\u4e00-\u4ece-Orchestrator-\u8d26\u6237\u4e2d\u83b7\u53d6-UserKey\u7b49-API-OAuth-\u53c2\u6570","text":"\u767b\u5f55\u8fdb\u5165\u4f60\u7684 Orchestrator \u8d26\u6237\uff0c\u8fdb\u5165\u4ee5\u4e0b\u754c\u9762\uff0c\u590d\u5236\u53c2\u6570 UserKey, AccountLogicName, TenantName, ClientId\u3002","title":"\u6b65\u9aa4\u4e00 \u4ece Orchestrator \u8d26\u6237\u4e2d\u83b7\u53d6 UserKey\u7b49 API OAuth \u53c2\u6570"},{"location":"pages/python/pytutorial/python-run-job-orchestrator/#\u6b65\u9aa4\u4e8c-Authenticate-\u8ba4\u8bc1","text":"\u6b64\u8fc7\u7a0b\u7684\u6700\u7ec8\u76ee\u6807\u662f\u62e5\u6709\u6709\u6548\u7684OAuth\u8bbf\u95ee\u4ee4\u724c\u3002\u8be5\u4ee4\u724c\u5c06\u4f5c\u4e3aGET\u548cPOST\u8bf7\u6c42\u6807\u5934\u4e2d\u7684Bearer\u4ee4\u724c\u4f20\u9012\u5230UiPath Cloud Orchestrator REST API\u3002 \u6ce8\u610f! \u53d1\u51faREST API\u8bf7\u6c42\u65f6\uff0c\u8bf7\u5728\u6bcf\u4e2a\u4f1a\u8bdd\u5f00\u59cb\u65f6\u4f7f\u7528\"\u5237\u65b0\u4ee4\u724c\"\u83b7\u53d6\u65b0\u7684\u8bbf\u95ee\u4ee4\u724c\uff0c\u7136\u540e\u4f7f\u7528\u5b83\u6765\u53d1\u51fa\u4e00\u4e2a\u6216\u591a\u4e2aREST API\u8bf7\u6c42\u3002\u4ee4\u724c\u7684\u6709\u6548\u671f\u4e3a24\u5c0f\u65f6\uff0c\u6bcf\u6b21\u8fd0\u884c\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u50a8\u5b58\u7684\u65e7\u4ee4\u724c\u3002 \u8bf7\u6ce8\u610f\uff0c\u8bf7\u5c3d\u91cf\u51cf\u5c11\u91cd\u590d\u751f\u6210\u65b0\u4ee4\u724c\uff0c\u5426\u5219\u4e91\u7aef\u670d\u52a1\u5668\u53ef\u80fd\u4f1a\u5bf9\u4f60\u7684api\u9650\u901f\u3002 \u6ce8\u610f! \u4e3a\u65b9\u4fbf\u591a\u4e2aget/post, \u6211\u4eec\u628a\u5404\u53d8\u91cf\u50a8\u5b58\u5728postman\u7684\u73af\u5883\u53d8\u91cf\u91cc\uff0c\u8c03\u7528\u53d8\u91cf\u65f6\uff0cpostman\u7684\u5f62\u5f0f\u662f {{\u53d8\u91cf\u540d}} , \u4f8b\u5982 {{access_token}}, {{AccountLogicName}}, {{TenantName}}\u7b49\u7b49\u3002 Request (Post \u8bbf\u95ee) \u5982\u56fe\u8f93\u5165\u7f51\u5740\u548c\u76f8\u5173\u53c2\u6570\uff0c\u5728 Body \u91cc\u8f93\u5165json, \u503c\u662f ClientId \u548c UserKey , \u5728 Headers \u91cc\u8f93\u5165\u952e\u540d X-UIPATH-TenantName \u548c\u503c TenantName \u3002 1 2 3 4 5 { \"grant_type\" : \"refresh_token\" , \"client_id\" : \"\u4f60\u7684 ClientId\" , \"refresh_token\" : \"\u4f60\u7684UserKey\" } Response (200 OK) \u8fd4\u56de\u7ed3\u679c\u5305\u62ec access_token , id_token \u7b49\u53c2\u6570\uff0c\u6211\u4eec\u8981\u5728\u540e\u7eed\u7684api\u8bbf\u95ee\u91cc\u4f7f\u7528\u3002 Python \u4ee3\u7801\u7247\u6bb5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 async def authToken ( self ): \"\"\"OAuth \u9a8c\u8bc1\"\"\" headers = { 'content-type' : self . ContentType , 'X-UIPATH-TenantName' : self . data [ \"TenantName\" ]} body_value = { \"grant_type\" : self . GrantType , \"client_id\" : self . data [ \"ClientId\" ], \"refresh_token\" : self . data [ \"UserKey\" ]} payload = json . JSONEncoder () . encode ( body_value ) try : if check_expire ( self . data [ \"expires_in\" ], self . data [ \"init_time\" ]): ret = await self . postdata ( url = self . data [ \"OAuthUrl\" ], headers = headers , data = payload ) if ret is None : print ( \"\u8bf7\u68c0\u67e5settings.json\u662f\u5426\u8bbe\u7f6e\u4e86api\u4fe1\u606f!\" ) os . _exit ( 0 ) else : self . data [ \"access_token\" ] = ret . get ( \"access_token\" ) self . data [ \"id_token\" ] = ret . get ( \"id_token\" ) self . data [ \"scope\" ] = ret . get ( \"scope\" ) self . data [ \"expires_in\" ] = ret . get ( \"expires_in\" , 0 ) self . data [ \"token_type\" ] = ret . get ( \"token_type\" ) self . data [ \"init_time\" ] = int ( time . time ()) except Exception as err : print ( \"OAuth Error: {0} \" . format ( err )) raise","title":"\u6b65\u9aa4\u4e8c Authenticate \u8ba4\u8bc1"},{"location":"pages/python/pytutorial/python-run-job-orchestrator/#\u6b65\u9aa4\u4e09-\u67e5\u8be2-Robot-Job-Process-Release\u4fe1\u606f","text":"\u83b7\u53d6 License \u4fe1\u606f Get \u8bbf\u95eeendpoint: /odata/Settings/UiPath.Server.Configuration.OData.GetLicense \u83b7\u53d6 Folder \u4fe1\u606f Get \u8bbf\u95eeendpoint: /odata/OrganizationUnits \u8fd4\u56de\u7ed3\u679c DisplayName \u53c2\u6570\uff0c\u6211\u4eec\u5728\u540e\u7eed\u7684api\u91cc\u4f7f\u7528 Python \u4ee3\u7801\u7247\u6bb5 1 2 3 4 5 6 7 8 async def getFolder ( self ): \"\"\"\u83b7\u53d6 Folder \u4fe1\u606f\"\"\" headers = { \"AUTHORIZATION\" : self . data [ \"token_type\" ] + ' ' + self . data [ \"access_token\" ], 'content-type' : self . ContentType , 'X-UIPATH-TenantName' : self . data [ \"TenantName\" ]} url = self . _folder . format ( self . data [ \"url\" ], self . data [ \"AccountLogicName\" ], self . data [ \"TenantName\" ]) ret = await self . getdata ( url , headers = headers ) return [ x for x in ret . get ( \"value\" , [])] \u83b7\u53d6\u6240\u6709\u7684 Robots \u4fe1\u606f Get \u8bbf\u95eeendpoint: /odata/Robots \u8fd4\u56de\u6240\u6709\u7684 Robots \u4fe1\u606f Headers \u53c2\u6570 AUTHORIZATION , Content-Type , X-UIPATH-FolderPath Python \u4ee3\u7801\u7247\u6bb5 1 2 3 4 5 6 7 8 async def getRobots ( self ): \"\"\"\u83b7\u53d6\u5168\u90e8 Robot \u4fe1\u606f \"\"\" headers = { \"AUTHORIZATION\" : self . data [ \"token_type\" ] + ' ' + self . data [ \"access_token\" ], 'content-type' : self . ContentType , 'X-UIPATH-FolderPath' : self . data [ \"DefaultFolder\" ]} url = self . _getRobots . format ( self . data [ \"url\" ], self . data [ \"AccountLogicName\" ], self . data [ \"TenantName\" ]) ret = await self . getdata ( url , headers = headers ) return [ x for x in ret . get ( \"value\" , [])] \u83b7\u53d6\u6307\u5b9a\u7684 Robot \u72b6\u6001 Get \u8bbf\u95eeendpoint: /odata/Sessions?$top=1&$filter=Robot/Id eq (\u8fd9\u91cc\u653erobot id) &$select=State \u8fd4\u56de\u7ed3\u679c\u7684\u53ef\u80fd\u72b6\u6001\u5305\u62ec: Available , Busy , Disconnected , Unresponsive \uff0c \u6211\u4eec\u5728\u4f7f\u7528Robot\u6267\u884c\u4f5c\u4e1a\u65f6\uff0c\u9700\u8981\u5148\u5224\u65adRobot\u662f Available \u3002 \u83b7\u53d6\u6240\u6709 Process \u4fe1\u606f Get \u8bbf\u95eeendpoint: /odata/Processes \u8fd4\u56de\u6240\u6709\u7684 Process \u4fe1\u606f @odata.count \u662fProcess\u603b\u6570 \u83b7\u53d6\u6240\u6709\u4f5c\u4e1a Jobs \u4fe1\u606f Get \u8bbf\u95eeendpoint: /odata/Jobs \u8fd4\u56de\u6240\u6709\u7684 Jobs \u4fe1\u606f @odata.count \u662fJobs\u603b\u6570 \u83b7\u53d6\u6240\u6709 Releases\u4fe1\u606f Get \u8bbf\u95eeendpoint: /odata/Releases \u8fd4\u56de\u6240\u6709\u7684 Release \u4fe1\u606f @odata.count \u662fRelease\u603b\u6570","title":"\u6b65\u9aa4\u4e09 \u67e5\u8be2 Robot, Job, Process, Release\u4fe1\u606f"},{"location":"pages/python/pytutorial/python-run-job-orchestrator/#\u6267\u884c-Job-\u5b9a\u4e49\u961f\u5217\u6dfb\u52a0\u961f\u5217\u8bbf\u95ee\u4fee\u6539-Asset","text":"\u6267\u884c\u4f5c\u4e1a Job Post \u8bbf\u95eeendpoint: /odata/Jobs/UiPath.Server.Configuration.OData.StartJobs \u5982\u56fe\u793a\uff0c Body \u4e2d\u9700\u8981\u6dfb\u52a0\u5982\u4e0b\u7684\u5185\u5bb9\uff0c\u5177\u4f53\u53c2\u6570\u542b\u4e49\uff0c\u8bf7\u53c2\u8003UiPath Orchestrator \u624b\u518c 1 2 3 4 5 6 7 { \"startInfo\" : { \"ReleaseKey\" : \"\u4f60\u7684ReleaseId\" , \"Strategy\" : \"All\" , \"RobotIds\" : [] } } \u8fd4\u56de\u7ed3\u679c\u662f (HTTP 201 Created) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 { \"@odata.context\" : \"https://cloud.uipath.com/odata/$metadata#Jobs\" , \"value\" : [ { \"Key\" : \"31ade17f-5a35-4250-beea-43922dc2a20d\" , \"StartTime\" : null , \"EndTime\" : null , \"State\" : \"Pending\" , \"Source\" : \"Manual\" , \"BatchExecutionKey\" : \"cbaff1c6-32b0-468b-9ad9-b59f9ca1d3b6\" , \"Info\" : null , \"CreationTime\" : \"2018-03-19T19:01:58.6806126Z\" , \"StartingScheduleId\" : null , \"Id\" : 128209 }] } \u505c\u6b62\u4f5c\u4e1a Job Post \u8bbf\u95eeendpoint: /odata/Jobs/UiPath.Server.Configuration.OData.StopJobs 1 2 3 4 { \"jobIds\" : [ 141888 , 141889 ], \"strategy\" : \"Kill\" } \u8fd4\u56de\u7ed3\u679c (HTTP 200) 200 OK \u5217\u51fa\u6240\u6709 Assets Get \u8bbf\u95eeendpoint: /odata/Assets \u521b\u5efa Asset Post \u8bbf\u95eeendpoint: /odata/Assets \u8bbe\u7f6e Body \u4e3a\uff1a 1 2 3 4 5 6 { \"Name\" : \"\u6d4b\u8bd5\u53c2\u65702\" , \"ValueScope\" : \"Global\" , \"ValueType\" : \"Text\" , \"StringValue\" : \"An asset added through an API call\" } \u8fd4\u56de\u7ed3\u679c\u72b6\u6001\u662f (HTTP 201), \u8fd4\u56de\u5185\u5bb9\u5982\u56fe\u793a\u3002 \u4fee\u6539Asset Put \u8bbf\u95eeendpoint: /odata/Assets(\u53d8\u91cfId) \u8fd4\u56de\u7ed3\u679c\u72b6\u6001\u662f (HTTP 200)\u3002 \u521b\u5efa\u961f\u5217 Queue Post \u8bbf\u95eeendpoint: /odata/QueueDefinitions \u8fd4\u56de\u7ed3\u679c\u72b6\u6001\u662f (HTTP 201 Created), \u8fd4\u56de\u5185\u5bb9\u5982\u56fe\u793a\u3002 \u6dfb\u52a0\u961f\u5217\u5143\u7d20 Post \u8bbf\u95eeendpoint: /odata/Queues/UiPathODataSvc.AddQueueItem \u8fd4\u56de\u7ed3\u679c\u72b6\u6001\u662f (HTTP 201 Created), \u8fd4\u56de\u5185\u5bb9\u5982\u56fe\u793a\u3002 \u5982\u679c\u8fdb\u5165Orchestrator\u7684\u7ba1\u7406\uff0c\u961f\u5217\u7ba1\u7406\u754c\u9762\uff0c\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u6210\u529f\u6dfb\u52a0\u4e86\u65b0\u961f\u5217\uff0c\u961f\u5217\u5143\u7d20\u3002 \u597d\u4e86\uff0c\u5230\u6b64\u6211\u4eec\u5c31\u521d\u6b65\u7528Postman\u6f14\u793a\u4e86\u5982\u4f55\u8c03\u7528Orchestrator \u7684API\u63a5\u53e3\uff0c\u4f7f\u7528\u8fd9\u4e9b\u63a5\u53e3\uff0c\u4f60\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u521b\u5efa\u624b\u673a\uff0c\u670d\u52a1\u5668\u548c\u5e73\u677f\u4e0a\u7684\u5e94\u7528\u6765\u9a71\u52a8UiPath Robot\uff0c\u8fdc\u7a0b\u8c03\u7528Robot\u7684\u65b9\u5f0f\u53ef\u4ee5\u6709\u4e09\u79cd: \u961f\u5217\u5f02\u6b65\u9a71\u52a8(\u8bbe\u7f6e\u961f\u5217\u4e00\u6dfb\u52a0\u65b0\u5143\u7d20\uff0cRobot\u5c31\u7acb\u5373\u6267\u884c\uff0c\u5e94\u7528\u7684\u4f8b\u5b50\u4f8b\u5982\u6536\u5230\u65b0\u90ae\u4ef6\uff0c\u6216\u8005\u94f6\u884c\u4e8b\u52a1) \u5b9a\u65f6\u9a71\u52a8(\u8bbe\u7f6e\u6309\u65f6\u95f4\u548c\u6267\u884c\u9891\u7387\uff0c\u8fd0\u884cRobot) \u7528 StartJob \u76f4\u63a5\u8c03\u7528 Robot Python \u4ee3\u7801\u6587\u4ef6 orchestrator.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 # -*- coding: utf-8 -*- \"\"\"This module holds class orchestrator of UiPath \"\"\" import asyncio import aiohttp import json import time import os check_expire = lambda expires_in , init_time : int ( time . time ()) > int ( expires_in ) + int ( init_time ) - 3600 class orchestrator (): def __init__ ( self , data ): \"\"\"\u521d\u59cb\u5316 Orchestrator \u5bf9\u8c61\"\"\" self . data = data self . ContentType = 'application/json' self . GrantType = 'refresh_token' self . _folder = ' {0} / {1} / {2} /odata/OrganizationUnits' self . _getRobots = ' {0} / {1} / {2} /odata/Robots' self . _addQueue = ' {0} / {1} / {2} /odata/Queues/UiPathODataSvc.AddQueueItem' self . _addQueueBulk = ' {0} / {1} / {2} /odata/Queues/UiPathODataSvc.BulkAddQueueItems' self . _getRobotStatus = ' {0} /odata/Sessions?$top=1&$filter=Robot/Id eq {1} &$select=State' self . _StartJob = ' {0} /odata/Jobs/UiPath.Server.Configuration.OData.StartJobs' @staticmethod async def postdata ( url = None , headers = None , data = None ): ret = None try : async with aiohttp . ClientSession () as session : async with session . post ( url , headers = headers , data = data , timeout = 300 , ssl = False ) as r : #verify_ssl=False if ( r . status == 200 ) or ( r . status == 201 ): try : ret = await r . json () except Exception as err : print ( \"post url {0} Exception error: {1} \" . format ( url , err )) raise else : print ( \"Post\u5931\u8d25\uff0ccode= %d %s \" % ( r . status , await r . text ())) except aiohttp . ClientError as err : print ( \"post url {0} error {1} \" . format ( url , err )) raise return ret @staticmethod async def getdata ( url = None , headers = None , params = None ): ret = None try : async with aiohttp . ClientSession ( headers = headers ) as session : async with session . get ( url , params = params , timeout = 300 , ssl = False ) as r : #verify_ssl=False assert r . status == 200 , r . status #401 Unauthorized raise AssertionError ret = await r . json () except aiohttp . ClientError as err : #traceback.print_exc() print ( \"Get url {0} error {1} \" . format ( url , err )) raise return ret @staticmethod async def putdata ( url = None , headers = None , data = None ): ret = None try : async with aiohttp . ClientSession () as session : async with session . put ( url , headers = headers , data = data , timeout = 300 , ssl = False ) as r : #verify_ssl=False if ( r . status == 200 ) or ( r . status == 201 ): try : ret = await r . json () except Exception as err : print ( \"put url {0} Exception error: {1} \" . format ( url , err )) raise else : print ( \"Put\u5931\u8d25\uff0ccode= %d %s \" % ( r . status , await r . text ())) except aiohttp . ClientError as err : print ( \"put url {0} error {1} \" . format ( url , err )) raise return ret async def authToken ( self ): \"\"\"OAuth \u9a8c\u8bc1\"\"\" headers = { 'content-type' : self . ContentType , 'X-UIPATH-TenantName' : self . data [ \"TenantName\" ]} body_value = { \"grant_type\" : self . GrantType , \"client_id\" : self . data [ \"ClientId\" ], \"refresh_token\" : self . data [ \"UserKey\" ]} payload = json . JSONEncoder () . encode ( body_value ) try : if check_expire ( self . data [ \"expires_in\" ], self . data [ \"init_time\" ]): ret = await self . postdata ( url = self . data [ \"OAuthUrl\" ], headers = headers , data = payload ) if ret is None : print ( \"\u8bf7\u68c0\u67e5settings.json\u662f\u5426\u8bbe\u7f6e\u4e86api\u4fe1\u606f!\" ) os . _exit ( 0 ) else : self . data [ \"access_token\" ] = ret . get ( \"access_token\" ) self . data [ \"id_token\" ] = ret . get ( \"id_token\" ) self . data [ \"scope\" ] = ret . get ( \"scope\" ) self . data [ \"expires_in\" ] = ret . get ( \"expires_in\" , 0 ) self . data [ \"token_type\" ] = ret . get ( \"token_type\" ) self . data [ \"init_time\" ] = int ( time . time ()) except Exception as err : print ( \"OAuth Error: {0} \" . format ( err )) raise async def getFolder ( self ): \"\"\"\u83b7\u53d6 Folder \u4fe1\u606f\"\"\" headers = { \"AUTHORIZATION\" : self . data [ \"token_type\" ] + ' ' + self . data [ \"access_token\" ], 'content-type' : self . ContentType , 'X-UIPATH-TenantName' : self . data [ \"TenantName\" ]} url = self . _folder . format ( self . data [ \"url\" ], self . data [ \"AccountLogicName\" ], self . data [ \"TenantName\" ]) ret = await self . getdata ( url , headers = headers ) return [ x for x in ret . get ( \"value\" , [])] async def getRobots ( self ): \"\"\"\u83b7\u53d6\u5168\u90e8 Robot \u4fe1\u606f \"\"\" headers = { \"AUTHORIZATION\" : self . data [ \"token_type\" ] + ' ' + self . data [ \"access_token\" ], 'content-type' : self . ContentType , 'X-UIPATH-FolderPath' : self . data [ \"DefaultFolder\" ]} url = self . _getRobots . format ( self . data [ \"url\" ], self . data [ \"AccountLogicName\" ], self . data [ \"TenantName\" ]) ret = await self . getdata ( url , headers = headers ) return [ x for x in ret . get ( \"value\" , [])] test_UiPathOC.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 # -*- coding: utf-8 -*- \"\"\" \u5355\u5143\u6d4b\u8bd5\u7ec4\uff0c\u6d4b\u8bd5 UiPath Orchestrator API\u7684\u90e8\u5206\u63a5\u53e3\uff0c\u63d0\u4f9b\u8c03\u7528API\u6f14\u793a \"\"\" import unittest import time import asyncio import json from orchestrator import orchestrator SETTINGS_FILE = \"settings.json\" def print_test ( method ): \"\"\" \u8f93\u51fa\u6d4b\u8bd5\u5355\u5143\uff0c\u6253\u5370\u5355\u5143\u8017\u65f6\uff0c\u6d4b\u8bd5\u5355\u5143\u540d\u548c\u6d4b\u8bd5\u7ed3\u679c \"\"\" def run ( * args , ** kw ): ts = time . time () print ( ' \\t \u6d4b\u8bd5\u5355\u5143 %r ' % method . __qualname__ ) method ( * args , ** kw ) te = time . time () print ( ' \\t [\u6d4b\u8bd5\u901a\u8fc7] \u8017\u65f6 %r %2.2f \u79d2' % ( method . __qualname__ , te - ts )) return run def save_settings ( data ): \"\"\"\u4fdd\u5b58 settings.json\"\"\" # \u5199\u5165 JSON \u6570\u636e with open ( SETTINGS_FILE , 'w' ) as f : json . dump ( data , f ) class OrchestratorTestCase ( unittest . TestCase ): \"\"\"\u6d4b\u8bd5 Orchestrator API\"\"\" def setUp ( self ): \"\"\"\u6267\u884c\u5355\u5143\u6d4b\u8bd5\u524d\u5148\u6267\u884c\"\"\" # \u8bfb\u53d6 settings.json \u6570\u636e with open ( SETTINGS_FILE , 'r' ) as f : data = json . load ( f ) self . oc = orchestrator ( data ) coroutine = self . oc . authToken () loop = asyncio . get_event_loop () loop . run_until_complete ( coroutine ) @print_test def test_01_getFolder ( self ): coroutine = self . oc . getFolder () loop = asyncio . get_event_loop () task = asyncio . ensure_future ( coroutine ) loop . run_until_complete ( task ) folders = task . result () self . assertTrue ( isinstance ( folders , list ) and len ( folders ) > 0 ) output = [] for folder in folders : output . append (( folder [ \"DisplayName\" ], folder [ \"Id\" ])) print ( \" \\t \u4f60\u7684 Folder: \" , output ) @print_test def test_02_getRobots ( self ): coroutine = self . oc . getRobots () loop = asyncio . get_event_loop () task = asyncio . ensure_future ( coroutine ) loop . run_until_complete ( task ) robots = task . result () self . assertTrue ( isinstance ( robots , list ) and len ( robots ) > 0 ) output = [] for robot in robots : output . append (( robot [ \"Name\" ], robot [ \"Id\" ], robot [ \"Type\" ])) print ( \" \\t \u4f60\u7684 Robots: \" , output ) if __name__ == '__main__' : #\u6267\u884c\u5355\u5143\u6d4b\u8bd5 unittest . main ( verbosity = 0 ) \u628a\u5982\u4e0a\u7684\u4e09\u4e2a\u6587\u4ef6\uff0c settings.json , orchestrator.py , test_UiPathOC.py \u653e\u5728\u540c\u4e00\u76ee\u5f55\uff0c\u6309\u6b65\u9aa4\u4e00\u4eceoc\u8d26\u6237\u83b7\u53d6 API access \u7684\u53c2\u6570\u586b\u5165 settings.json \u3002\u5728 cmd \u7a97\u53e3\u4e0b, \u8f93\u5165\uff1a 1 2 3 pip install asyncio pip install aiohttp pip install unittest \u8f93\u5165\u4ee5\u4e0b\u5355\u5143\u6d4b\u8bd5\u7684\u547d\u4ee4\uff0c 1 python test_UiPathOC.py \u7ed3\u679c\uff1a \u603b\u7ed3\uff1a \u901a\u8fc7\u5728\u5e94\u7528\u7cfb\u7edf\u4e2d\u8fdc\u7a0b\u5f02\u6b65\u8c03\u7528Orchestrator API\u63a5\u53e3\uff0c\u53ef\u4ee5\u5b9e\u73b0\u624b\u673a\u3001\u5e73\u677f\u3001\u670d\u52a1\u5668\u591a\u5e73\u53f0\u5e94\u7528\u9a71\u52a8\u591a\u4e2a UiPath Robot \u5e76\u53d1\u5904\u7406\u4efb\u52a1\uff0c\u6269\u5c55\u4e86\u5e94\u7528\u5bbd\u5ea6\u548c\u7075\u6d3b\u6027\u3002","title":"\u6267\u884c Job, \u5b9a\u4e49\u961f\u5217\uff0c\u6dfb\u52a0\u961f\u5217\uff0c\u8bbf\u95ee/\u4fee\u6539 Asset"},{"location":"pages/python/pytutorial/python-set/","text":"Python \u96c6\u5408 \u00b6 Python set \u6559\u7a0b \u4ecb\u7ecd\u4e86 Python set \u96c6\u5408\u3002 \u6211\u4eec\u5c55\u793a\u4e86\u5982\u4f55\u521b\u5efa\u96c6\u5408\u5e76\u5bf9\u5176\u6267\u884c\u64cd\u4f5c\u3002 Python \u96c6\u5408 \u00b6 Python \u96c6\u662f\u65e0\u5e8f\u6570\u636e\u96c6\u5408\uff0c\u6ca1\u6709\u91cd\u590d\u7684\u5143\u7d20\u3002 \u96c6\u5408\u652f\u6301\u6570\u5b66\u4e2d\u5df2\u77e5\u7684\u8bf8\u5982\u5e76\u96c6\uff0c\u76f8\u4ea4\u6216\u6c42\u5dee\u7684\u8fd0\u7b97\u3002 Python \u96c6\u5408\u5b57\u9762\u503c \u00b6 \u4ece Python 2.6 \u5f00\u59cb\uff0c\u53ef\u4ee5\u4f7f\u7528\u5b57\u9762\u503c\u7b26\u53f7\u521b\u5efa\u96c6\u5408\u3002 \u6211\u4eec\u4f7f\u7528\u5927\u62ec\u53f7\u5728 Python \u4e2d\u5b9a\u4e49\u4e00\u4e2a\u96c6\u5408\uff0c\u5e76\u4e14\u5143\u7d20\u4e4b\u95f4\u7528\u9017\u53f7\u5206\u9694\u3002 python_set_literal.py 1 2 3 4 5 6 #!/usr/bin/python3 nums = { 1, 2, 2, 2, 3, 4 } print(type(nums)) print(nums) \u8be5\u793a\u4f8b\u521b\u5efa\u5e26\u6709\u5b57\u9762\u503c\u7b26\u53f7\u7684 Python \u96c6\u3002 1 nums = { 1, 2, 2, 2, 3, 4 } \u96c6\u5408\u662f\u552f\u4e00\u5143\u7d20\u7684\u96c6\u5408\uff1b \u5373\u4f7f\u6211\u4eec\u63d0\u4f9b\u4e86 3 \u6b21\u503c 2\uff0c\u8be5\u96c6\u5408\u4e5f\u53ea\u5305\u542b\u4e00\u4e2a 2\u3002 1 2 3 $ ./python_set_literal.py <class 'set'> {1, 2, 3, 4} \u8fd9\u662f\u8f93\u51fa\u3002 Python \u96c6\u5408\u51fd\u6570 \u00b6 Python set() \u51fd\u6570\u521b\u5efa\u4e00\u4e2a\u65b0\u96c6\u5408\uff0c\u5176\u5143\u7d20\u6765\u81ea\u53ef\u8fed\u4ee3\u5bf9\u8c61\u3002 \u53ef\u8fed\u4ee3\u5bf9\u8c61\u662f\u6211\u4eec\u53ef\u4ee5\u8fed\u4ee3\u7684\u5bf9\u8c61\uff1b \u4f8b\u5982\u5b57\u7b26\u4e32\u6216\u5217\u8868\u3002 python_set_fun.py 1 2 3 4 5 6 7 #!/usr/bin/python3 seasons = [\"spring\", \"summer\", \"autumn\", \"winter\"] myset = set(seasons) print(myset) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 set() \u5185\u7f6e\u51fd\u6570\u4ece\u5217\u8868\u521b\u5efa\u4e86\u4e00\u4e2a\u96c6\u5408\u3002 1 2 $ ./python_set_fun.py {'summer', 'autumn', 'winter', 'spring'} \u8fd9\u662f\u8f93\u51fa\u3002 Python \u96c6\u5408\u6210\u5458\u6027\u6d4b\u8bd5 \u00b6 in \u548c not in \u8fd0\u7b97\u7b26\u6d4b\u8bd5\u96c6\u5408\u4e2d\u5143\u7d20\u7684\u5b58\u5728\u3002 python_set_membership.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/python3 words = { \"spring\", \"table\", \"cup\", \"bottle\", \"coin\" } word = 'cup' if (word in words): print(\"{0} is present in the set\".format(word)) else: print(\"{0} is not present in the set\".format(word)) word = 'tree' if (word not in words): print(\"{0} is not present in the set\".format(word)) else: print(\"{0} is present in the set\".format(word)) \u6211\u4eec\u4f7f\u7528\u6210\u5458\u8fd0\u7b97\u7b26\u68c0\u67e5\u96c6\u5408\u4e2d\u662f\u5426\u5b58\u5728\u4e24\u4e2a\u5355\u8bcd\u3002 1 2 3 $ ./python_set_membership.py cup is present in the set tree is not present in the set \u8fd9\u662f\u8f93\u51fa\u3002 Python \u96c6\u5408\u5185\u7f6e\u51fd\u6570 \u00b6 \u6709\u51e0\u4e2a\u5185\u7f6e Python \u51fd\u6570\uff0c\u4f8b\u5982 len() \u6216 min() \uff0c\u53ef\u4ee5\u5728 Python \u96c6\u4e0a\u4f7f\u7528\u3002 python_set_builtins.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/python3 nums = { 21, 11, 42, 29, 22, 71, 18 } print(nums) print(\"Number of elements: {0}\".format(len(nums))) print(\"Minimum: {0}\".format(min(nums))) print(\"Maximum: {0}\".format(max(nums))) print(\"Sum: {0}\".format(sum(nums))) print(\"Sorted elements:\") print(sorted(nums)) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5bf9\u4e00\u7ec4\u6574\u6570\u503c\u5e94\u7528\u4e86\u4e94\u4e2a\u5185\u7f6e\u51fd\u6570\u3002 1 print(\"Number of elements: {0}\".format(len(nums))) len() \u65b9\u6cd5\u8fd4\u56de\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u6570\u3002 1 print(\"Minimum: {0}\".format(min(nums))) min() \u65b9\u6cd5\u8fd4\u56de\u96c6\u5408\u4e2d\u7684\u6700\u5c0f\u503c\u3002 1 print(\"Maximum: {0}\".format(max(nums))) max() \u65b9\u6cd5\u8fd4\u56de\u96c6\u5408\u4e2d\u7684\u6700\u5927\u503c\u3002 1 print(\"Sum: {0}\".format(sum(nums))) sum() \u65b9\u6cd5\u8fd4\u56de\u96c6\u5408\u4e2d\u503c\u7684\u603b\u548c\u3002 1 print(sorted(nums)) \u6700\u540e\uff0c\u4f7f\u7528 sorted() \u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u96c6\u5408\u4e2d\u521b\u5efa\u65e0\u5e8f\u5217\u8868\u3002 1 2 3 4 5 6 7 8 $ ./python_set_builtins.py {71, 42, 11, 18, 21, 22, 29} Number of elements: 7 Minimum: 11 Maximum: 71 Sum: 214 Sorted elements: [11, 18, 21, 22, 29, 42, 71] \u8fd9\u662f\u8f93\u51fa\u3002 Python \u96c6\u5408\u8fed\u4ee3 \u00b6 \u53ef\u4ee5\u4f7f\u7528 for \u5faa\u73af\u6765\u8fed\u4ee3 Python \u96c6\u3002 python_set_iteration.py 1 2 3 4 5 6 7 #!/usr/bin/python3 words = { \"spring\", \"table\", \"cup\", \"bottle\", \"coin\" } for word in words: print(word) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u904d\u5386\u8be5\u96c6\u5408\u5e76\u9010\u4e2a\u6253\u5370\u5176\u5143\u7d20\u3002 1 2 3 4 5 6 $ ./python_set_iteration.py table cup coin spring bottle \u8fd9\u662f\u8f93\u51fa\u3002 Python \u96c6\u5408\u6dfb\u52a0 \u00b6 Python set add() \u65b9\u6cd5\u5c06\u65b0\u5143\u7d20\u6dfb\u52a0\u5230\u96c6\u5408\u4e2d\u3002 python_set_add.py 1 2 3 4 5 6 7 #!/usr/bin/python3 words = { \"spring\", \"table\", \"cup\", \"bottle\", \"coin\" } words.add(\"coffee\") print(words) \u6211\u4eec\u6709\u4e00\u5957\u8bdd\u3002 \u6211\u4eec\u4f7f\u7528 add() \u65b9\u6cd5\u6dfb\u52a0\u4e00\u4e2a\u65b0\u5355\u8bcd\u3002 1 2 $ ./python_set_add.py {'table', 'coffee', 'coin', 'spring', 'bottle', 'cup'} \u8fd9\u662f\u8f93\u51fa\u3002 Python \u96c6\u5408\u66f4\u65b0 \u00b6 Python set update() \u65b9\u6cd5\u5c06\u4e00\u4e2a\u6216\u591a\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u6dfb\u52a0\u5230\u96c6\u5408\u4e2d\u3002 python_set_update.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/python3 words = { \"spring\", \"table\", \"cup\", \"bottle\", \"coin\" } words.add(\"coffee\") print(words) words2 = { \"car\", \"purse\", \"wind\" } words3 = { \"nice\", \"prime\", \"puppy\" } words.update(words2, words3) print(words) \u6211\u4eec\u6709\u4e09\u7ec4\u5355\u8bcd\u3002 \u6211\u4eec\u4f7f\u7528 update() \u65b9\u6cd5\u5c06\u7b2c\u4e8c\u7ec4\u548c\u7b2c\u4e09\u7ec4\u6dfb\u52a0\u5230\u7b2c\u4e00\u7ec4\u3002 1 2 3 $ ./python_set_update.py {'spring', 'bottle', 'cup', 'coin', 'purse', 'wind', 'nice', 'car', 'table', 'prime', 'puppy'} \u8fd9\u662f\u8f93\u51fa\u3002 Python \u96c6\u5408\u5220\u9664 \u00b6 Python \u6709\u4e24\u79cd\u5220\u9664\u5143\u7d20\u7684\u57fa\u672c\u65b9\u6cd5\uff1a remove() \u548c discard() \u3002 remove() \u65b9\u6cd5\u4ece\u96c6\u5408\u4e2d\u5220\u9664\u6307\u5b9a\u7684\u5143\u7d20\uff0c\u5982\u679c\u5143\u7d20\u4e0d\u5728\u96c6\u5408\u4e2d\uff0c\u5219\u63d0\u9ad8 KeyError \u3002 discard() \u65b9\u6cd5\u4ece\u96c6\u5408\u4e2d\u5220\u9664\u5143\u7d20\uff0c\u5982\u679c\u8981\u5220\u9664\u7684\u5143\u7d20\u4e0d\u5728\u96c6\u5408\u4e2d\uff0c\u5219\u4e0d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u3002 python_set_remove.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/python3 words = { \"spring\", \"table\", \"cup\", \"bottle\", \"coin\" } words.discard(\"coin\") words.discard(\"pen\") print(words) words.remove(\"cup\") try: words.remove(\"cloud\") except KeyError as e: pass print(words) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 remove() \u548c discard() \u5220\u9664\u96c6\u5408\u5143\u7d20\u3002 1 2 3 4 try: words.remove(\"cloud\") except KeyError as e: pass \u5982\u679c\u6211\u4eec\u6ca1\u6709\u6293\u4f4f KeyError \uff0c\u811a\u672c\u5c06\u7ec8\u6b62\u800c\u4e0d\u6267\u884c\u6700\u540e\u4e00\u6761\u8bed\u53e5\u3002 1 2 3 $ ./python_set_remove.py {'table', 'cup', 'bottle', 'spring'} {'table', 'bottle', 'spring'} \u8fd9\u662f\u8f93\u51fa\u3002 Python \u96c6\u5408\u5f39\u51fa&\u6e05\u9664 \u00b6 pop() \u65b9\u6cd5\u4ece\u96c6\u5408\u4e2d\u79fb\u9664\u5e76\u8fd4\u56de\u4efb\u610f\u5143\u7d20\u3002 clear() \u65b9\u6cd5\u4ece\u96c6\u5408\u4e2d\u5220\u9664\u6240\u6709\u5143\u7d20\u3002 python_set_remove2.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/python3 words = { \"spring\", \"table\", \"cup\", \"bottle\", \"coin\", \"pen\", \"water\" } print(words.pop()) print(words.pop()) print(words) words.clear() print(words) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5220\u9664\u5e76\u6253\u5370\u4e24\u4e2a\u968f\u673a\u5143\u7d20\uff0c\u5e76\u663e\u793a\u5176\u4f59\u5143\u7d20\u3002 \u7136\u540e\uff0c\u4f7f\u7528 clear() \u4ece\u96c6\u5408\u4e2d\u5220\u9664\u6240\u6709\u5143\u7d20\u3002 1 2 3 4 5 $ ./python_set_remove2.py water pen {'cup', 'spring', 'table', 'bottle', 'coin'} set() \u8fd9\u662f\u8f93\u51fa\u3002 Python \u96c6\u5408\u8fd0\u7b97 \u00b6 \u4f7f\u7528 Python \u96c6\uff0c\u6211\u4eec\u53ef\u4ee5\u6267\u884c\u7279\u5b9a\u7684\u8fd0\u7b97\uff1a\u5e76\u96c6\uff0c\u4ea4\u96c6\uff0c\u5dee\u548c\u5bf9\u79f0\u5dee\u3002 python_set_operations.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/python3 set1 = { 'a', 'b', 'c', 'c', 'd' } set2 = { 'a', 'b', 'x', 'y', 'z' } print(\"Set 1:\", set1) print(\"Set 2:\", set2) print(\"intersection:\", set1.intersection(set2)) print(\"union:\", set1.union(set2)) print(\"difference:\", set1.difference(set2)) print(\"symmetric difference:\", set1.symmetric_difference(set2)) \u8be5\u793a\u4f8b\u663e\u793a\u4e86\u56db\u4e2a\u8bbe\u7f6e\u64cd\u4f5c\u3002 1 print(\"intersection:\", set1.intersection(set2)) intersection() \u65b9\u6cd5\u6267\u884c\u76f8\u4ea4\u64cd\u4f5c\uff0c\u8be5\u64cd\u4f5c\u8fd4\u56de set1 \u548c set2 \u4e2d\u7684\u5143\u7d20\u3002 1 print(\"union:\", set1.union(set2)) union() \u65b9\u6cd5\u6267\u884c\u8054\u5408\u64cd\u4f5c\uff0c\u8be5\u64cd\u4f5c\u8fd4\u56de\u4e24\u4e2a\u96c6\u5408\u4e2d\u7684\u6240\u6709\u5143\u7d20\u3002 1 print(\"difference:\", set1.difference(set2)) difference() \u65b9\u6cd5\u6267\u884c\u5dee\u5206\u64cd\u4f5c\uff0c\u8be5\u64cd\u4f5c\u8fd4\u56de set1 \u4e2d\u800c\u4e0d\u662f set2 \u4e2d\u7684\u5143\u7d20\u3002 1 print(\"symmetric difference:\", set1.symmetric_difference(set2)) symmetric_difference() \u65b9\u6cd5\u6267\u884c\u5bf9\u79f0\u5dee\u5206\u64cd\u4f5c\uff0c\u8be5\u64cd\u4f5c\u8fd4\u56de set1 \u6216 set2 \u4e2d\u7684\u5143\u7d20\uff0c\u4f46\u4e0d\u8fd4\u56de\u4e24\u8005\u4e2d\u7684\u5143\u7d20\u3002 1 2 3 4 5 6 7 $ ./python_set_operations.py Set 1: {'c', 'b', 'a', 'd'} Set 2: {'y', 'b', 'a', 'x', 'z'} intersection: {'b', 'a'} union: {'b', 'a', 'z', 'c', 'x', 'y', 'd'} difference: {'c', 'd'} symmetric difference: {'z', 'c', 'x', 'y', 'd'} \u8fd9\u662f\u4e00\u4e2a\u793a\u4f8b\u8f93\u51fa\u3002 \u53ef\u4ee5\u4f7f\u7528&\uff0c|\uff0c-\u548c^\u8fd0\u7b97\u7b26\u6267\u884c\u8fd9\u4e9b\u64cd\u4f5c\u3002 python_set_operations2.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/python3 set1 = { 'a', 'b', 'c', 'c', 'd' } set2 = { 'a', 'b', 'x', 'y', 'z' } print(\"Set 1:\", set1) print(\"Set 2:\", set2) print(\"intersection:\", set1 & set2) print(\"union:\", set1 | set2) print(\"difference:\", set1 - set2) print(\"symmetric difference:\", set1 ^ set2) \u8be5\u793a\u4f8b\u663e\u793a\u4e86\u4f7f\u7528\u8fd0\u7b97\u7b26\u7684\u56db\u4e2a set \u64cd\u4f5c\u3002 \u5b50\u96c6\u548c\u8d85\u96c6 \u00b6 \u5982\u679c\u96c6\u5408 A \u7684\u6240\u6709\u5143\u7d20\u90fd\u5305\u542b\u5728\u96c6\u5408 B \u4e2d\uff0c\u5219\u5c06 A \u79f0\u4e3a B \u7684\u5b50\u96c6\uff0c\u5c06 B \u79f0\u4e3a A \u7684\u8d85\u96c6\u3002 python_subset_superset.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/python3 set1 = { 'a', 'b', 'c', 'd', 'e' } set2 = { 'a', 'b', 'c' } set3 = {'x', 'y', 'z' } if (set2.issubset(set1)): print(\"set2 is a subset of set1\") if (set1.issuperset(set2)): print(\"set1 is a superset of set2\") if (set2.isdisjoint(set3)): print(\"set2 and set3 have no common elements\") \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 issubset() \uff0c issuperset() \u548c isdisjoint() \u65b9\u6cd5\u3002 1 2 if (set2.issubset(set1)): print(\"set1 is a subset of set2\") \u4f7f\u7528 issubset() \u65b9\u6cd5\uff0c\u6211\u4eec\u68c0\u67e5 set2 \u662f\u5426\u662f s1 \u7684\u5b50\u96c6\u3002 1 2 if (set1.issuperset(set2)): print(\"set1 is a superset of set2\") \u4f7f\u7528 issuperset() \u65b9\u6cd5\uff0c\u6211\u4eec\u68c0\u67e5 set1 \u662f\u5426\u662f s2 \u7684\u8d85\u96c6\u3002 1 2 if (set2.isdisjoint(set3)): print(\"set2 and set3 have no common elements\") \u4f7f\u7528 isdisjoint() \u65b9\u6cd5\uff0c\u6211\u4eec\u68c0\u67e5 set2 \u548c set3 \u662f\u5426\u6ca1\u6709\u5171\u540c\u7684\u5143\u7d20\u3002 1 2 3 4 $ ./python_subset_superset.py set1 is a subset of set2 set1 is a superset of set2 set2 and set3 have no common elements \u8fd9\u662f\u8f93\u51fa\u3002 Python \u4e0d\u53ef\u53d8\u96c6 \u00b6 \u4e0d\u53ef\u53d8\u7684\u96c6\uff08\u65e0\u6cd5\u4fee\u6539\u7684\u96c6\uff09\u662f\u4f7f\u7528 frozenset() \u529f\u80fd\u521b\u5efa\u7684\u3002 1 2 3 4 5 6 7 >>> s1 = frozenset(('blue', 'green', 'red')) >>> s1 frozenset({'red', 'green', 'blue'}) >>> s1.add('brown') Traceback (most recent call last): File \"<stdin>\", line 1, in <module> AttributeError: 'frozenset' object has no attribute 'add' \u5f53\u6211\u4eec\u5c1d\u8bd5\u5411\u51bb\u7ed3\u96c6\u4e2d\u6dfb\u52a0\u65b0\u5143\u7d20\u65f6\u51fa\u73b0\u9519\u8bef\u3002","title":"Python \u96c6\u5408"},{"location":"pages/python/pytutorial/python-set/#Python-\u96c6\u5408","text":"Python set \u6559\u7a0b \u4ecb\u7ecd\u4e86 Python set \u96c6\u5408\u3002 \u6211\u4eec\u5c55\u793a\u4e86\u5982\u4f55\u521b\u5efa\u96c6\u5408\u5e76\u5bf9\u5176\u6267\u884c\u64cd\u4f5c\u3002","title":"Python \u96c6\u5408"},{"location":"pages/python/pytutorial/python-set/#Python-\u96c6\u5408_1","text":"Python \u96c6\u662f\u65e0\u5e8f\u6570\u636e\u96c6\u5408\uff0c\u6ca1\u6709\u91cd\u590d\u7684\u5143\u7d20\u3002 \u96c6\u5408\u652f\u6301\u6570\u5b66\u4e2d\u5df2\u77e5\u7684\u8bf8\u5982\u5e76\u96c6\uff0c\u76f8\u4ea4\u6216\u6c42\u5dee\u7684\u8fd0\u7b97\u3002","title":"Python \u96c6\u5408"},{"location":"pages/python/pytutorial/python-set/#Python-\u96c6\u5408\u5b57\u9762\u503c","text":"\u4ece Python 2.6 \u5f00\u59cb\uff0c\u53ef\u4ee5\u4f7f\u7528\u5b57\u9762\u503c\u7b26\u53f7\u521b\u5efa\u96c6\u5408\u3002 \u6211\u4eec\u4f7f\u7528\u5927\u62ec\u53f7\u5728 Python \u4e2d\u5b9a\u4e49\u4e00\u4e2a\u96c6\u5408\uff0c\u5e76\u4e14\u5143\u7d20\u4e4b\u95f4\u7528\u9017\u53f7\u5206\u9694\u3002 python_set_literal.py 1 2 3 4 5 6 #!/usr/bin/python3 nums = { 1, 2, 2, 2, 3, 4 } print(type(nums)) print(nums) \u8be5\u793a\u4f8b\u521b\u5efa\u5e26\u6709\u5b57\u9762\u503c\u7b26\u53f7\u7684 Python \u96c6\u3002 1 nums = { 1, 2, 2, 2, 3, 4 } \u96c6\u5408\u662f\u552f\u4e00\u5143\u7d20\u7684\u96c6\u5408\uff1b \u5373\u4f7f\u6211\u4eec\u63d0\u4f9b\u4e86 3 \u6b21\u503c 2\uff0c\u8be5\u96c6\u5408\u4e5f\u53ea\u5305\u542b\u4e00\u4e2a 2\u3002 1 2 3 $ ./python_set_literal.py <class 'set'> {1, 2, 3, 4} \u8fd9\u662f\u8f93\u51fa\u3002","title":"Python \u96c6\u5408\u5b57\u9762\u503c"},{"location":"pages/python/pytutorial/python-set/#Python-\u96c6\u5408\u51fd\u6570","text":"Python set() \u51fd\u6570\u521b\u5efa\u4e00\u4e2a\u65b0\u96c6\u5408\uff0c\u5176\u5143\u7d20\u6765\u81ea\u53ef\u8fed\u4ee3\u5bf9\u8c61\u3002 \u53ef\u8fed\u4ee3\u5bf9\u8c61\u662f\u6211\u4eec\u53ef\u4ee5\u8fed\u4ee3\u7684\u5bf9\u8c61\uff1b \u4f8b\u5982\u5b57\u7b26\u4e32\u6216\u5217\u8868\u3002 python_set_fun.py 1 2 3 4 5 6 7 #!/usr/bin/python3 seasons = [\"spring\", \"summer\", \"autumn\", \"winter\"] myset = set(seasons) print(myset) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 set() \u5185\u7f6e\u51fd\u6570\u4ece\u5217\u8868\u521b\u5efa\u4e86\u4e00\u4e2a\u96c6\u5408\u3002 1 2 $ ./python_set_fun.py {'summer', 'autumn', 'winter', 'spring'} \u8fd9\u662f\u8f93\u51fa\u3002","title":"Python \u96c6\u5408\u51fd\u6570"},{"location":"pages/python/pytutorial/python-set/#Python-\u96c6\u5408\u6210\u5458\u6027\u6d4b\u8bd5","text":"in \u548c not in \u8fd0\u7b97\u7b26\u6d4b\u8bd5\u96c6\u5408\u4e2d\u5143\u7d20\u7684\u5b58\u5728\u3002 python_set_membership.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/python3 words = { \"spring\", \"table\", \"cup\", \"bottle\", \"coin\" } word = 'cup' if (word in words): print(\"{0} is present in the set\".format(word)) else: print(\"{0} is not present in the set\".format(word)) word = 'tree' if (word not in words): print(\"{0} is not present in the set\".format(word)) else: print(\"{0} is present in the set\".format(word)) \u6211\u4eec\u4f7f\u7528\u6210\u5458\u8fd0\u7b97\u7b26\u68c0\u67e5\u96c6\u5408\u4e2d\u662f\u5426\u5b58\u5728\u4e24\u4e2a\u5355\u8bcd\u3002 1 2 3 $ ./python_set_membership.py cup is present in the set tree is not present in the set \u8fd9\u662f\u8f93\u51fa\u3002","title":"Python \u96c6\u5408\u6210\u5458\u6027\u6d4b\u8bd5"},{"location":"pages/python/pytutorial/python-set/#Python-\u96c6\u5408\u5185\u7f6e\u51fd\u6570","text":"\u6709\u51e0\u4e2a\u5185\u7f6e Python \u51fd\u6570\uff0c\u4f8b\u5982 len() \u6216 min() \uff0c\u53ef\u4ee5\u5728 Python \u96c6\u4e0a\u4f7f\u7528\u3002 python_set_builtins.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/python3 nums = { 21, 11, 42, 29, 22, 71, 18 } print(nums) print(\"Number of elements: {0}\".format(len(nums))) print(\"Minimum: {0}\".format(min(nums))) print(\"Maximum: {0}\".format(max(nums))) print(\"Sum: {0}\".format(sum(nums))) print(\"Sorted elements:\") print(sorted(nums)) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5bf9\u4e00\u7ec4\u6574\u6570\u503c\u5e94\u7528\u4e86\u4e94\u4e2a\u5185\u7f6e\u51fd\u6570\u3002 1 print(\"Number of elements: {0}\".format(len(nums))) len() \u65b9\u6cd5\u8fd4\u56de\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u6570\u3002 1 print(\"Minimum: {0}\".format(min(nums))) min() \u65b9\u6cd5\u8fd4\u56de\u96c6\u5408\u4e2d\u7684\u6700\u5c0f\u503c\u3002 1 print(\"Maximum: {0}\".format(max(nums))) max() \u65b9\u6cd5\u8fd4\u56de\u96c6\u5408\u4e2d\u7684\u6700\u5927\u503c\u3002 1 print(\"Sum: {0}\".format(sum(nums))) sum() \u65b9\u6cd5\u8fd4\u56de\u96c6\u5408\u4e2d\u503c\u7684\u603b\u548c\u3002 1 print(sorted(nums)) \u6700\u540e\uff0c\u4f7f\u7528 sorted() \u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u96c6\u5408\u4e2d\u521b\u5efa\u65e0\u5e8f\u5217\u8868\u3002 1 2 3 4 5 6 7 8 $ ./python_set_builtins.py {71, 42, 11, 18, 21, 22, 29} Number of elements: 7 Minimum: 11 Maximum: 71 Sum: 214 Sorted elements: [11, 18, 21, 22, 29, 42, 71] \u8fd9\u662f\u8f93\u51fa\u3002","title":"Python \u96c6\u5408\u5185\u7f6e\u51fd\u6570"},{"location":"pages/python/pytutorial/python-set/#Python-\u96c6\u5408\u8fed\u4ee3","text":"\u53ef\u4ee5\u4f7f\u7528 for \u5faa\u73af\u6765\u8fed\u4ee3 Python \u96c6\u3002 python_set_iteration.py 1 2 3 4 5 6 7 #!/usr/bin/python3 words = { \"spring\", \"table\", \"cup\", \"bottle\", \"coin\" } for word in words: print(word) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u904d\u5386\u8be5\u96c6\u5408\u5e76\u9010\u4e2a\u6253\u5370\u5176\u5143\u7d20\u3002 1 2 3 4 5 6 $ ./python_set_iteration.py table cup coin spring bottle \u8fd9\u662f\u8f93\u51fa\u3002","title":"Python \u96c6\u5408\u8fed\u4ee3"},{"location":"pages/python/pytutorial/python-set/#Python-\u96c6\u5408\u6dfb\u52a0","text":"Python set add() \u65b9\u6cd5\u5c06\u65b0\u5143\u7d20\u6dfb\u52a0\u5230\u96c6\u5408\u4e2d\u3002 python_set_add.py 1 2 3 4 5 6 7 #!/usr/bin/python3 words = { \"spring\", \"table\", \"cup\", \"bottle\", \"coin\" } words.add(\"coffee\") print(words) \u6211\u4eec\u6709\u4e00\u5957\u8bdd\u3002 \u6211\u4eec\u4f7f\u7528 add() \u65b9\u6cd5\u6dfb\u52a0\u4e00\u4e2a\u65b0\u5355\u8bcd\u3002 1 2 $ ./python_set_add.py {'table', 'coffee', 'coin', 'spring', 'bottle', 'cup'} \u8fd9\u662f\u8f93\u51fa\u3002","title":"Python \u96c6\u5408\u6dfb\u52a0"},{"location":"pages/python/pytutorial/python-set/#Python-\u96c6\u5408\u66f4\u65b0","text":"Python set update() \u65b9\u6cd5\u5c06\u4e00\u4e2a\u6216\u591a\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u6dfb\u52a0\u5230\u96c6\u5408\u4e2d\u3002 python_set_update.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/python3 words = { \"spring\", \"table\", \"cup\", \"bottle\", \"coin\" } words.add(\"coffee\") print(words) words2 = { \"car\", \"purse\", \"wind\" } words3 = { \"nice\", \"prime\", \"puppy\" } words.update(words2, words3) print(words) \u6211\u4eec\u6709\u4e09\u7ec4\u5355\u8bcd\u3002 \u6211\u4eec\u4f7f\u7528 update() \u65b9\u6cd5\u5c06\u7b2c\u4e8c\u7ec4\u548c\u7b2c\u4e09\u7ec4\u6dfb\u52a0\u5230\u7b2c\u4e00\u7ec4\u3002 1 2 3 $ ./python_set_update.py {'spring', 'bottle', 'cup', 'coin', 'purse', 'wind', 'nice', 'car', 'table', 'prime', 'puppy'} \u8fd9\u662f\u8f93\u51fa\u3002","title":"Python \u96c6\u5408\u66f4\u65b0"},{"location":"pages/python/pytutorial/python-set/#Python-\u96c6\u5408\u5220\u9664","text":"Python \u6709\u4e24\u79cd\u5220\u9664\u5143\u7d20\u7684\u57fa\u672c\u65b9\u6cd5\uff1a remove() \u548c discard() \u3002 remove() \u65b9\u6cd5\u4ece\u96c6\u5408\u4e2d\u5220\u9664\u6307\u5b9a\u7684\u5143\u7d20\uff0c\u5982\u679c\u5143\u7d20\u4e0d\u5728\u96c6\u5408\u4e2d\uff0c\u5219\u63d0\u9ad8 KeyError \u3002 discard() \u65b9\u6cd5\u4ece\u96c6\u5408\u4e2d\u5220\u9664\u5143\u7d20\uff0c\u5982\u679c\u8981\u5220\u9664\u7684\u5143\u7d20\u4e0d\u5728\u96c6\u5408\u4e2d\uff0c\u5219\u4e0d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u3002 python_set_remove.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/python3 words = { \"spring\", \"table\", \"cup\", \"bottle\", \"coin\" } words.discard(\"coin\") words.discard(\"pen\") print(words) words.remove(\"cup\") try: words.remove(\"cloud\") except KeyError as e: pass print(words) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 remove() \u548c discard() \u5220\u9664\u96c6\u5408\u5143\u7d20\u3002 1 2 3 4 try: words.remove(\"cloud\") except KeyError as e: pass \u5982\u679c\u6211\u4eec\u6ca1\u6709\u6293\u4f4f KeyError \uff0c\u811a\u672c\u5c06\u7ec8\u6b62\u800c\u4e0d\u6267\u884c\u6700\u540e\u4e00\u6761\u8bed\u53e5\u3002 1 2 3 $ ./python_set_remove.py {'table', 'cup', 'bottle', 'spring'} {'table', 'bottle', 'spring'} \u8fd9\u662f\u8f93\u51fa\u3002","title":"Python \u96c6\u5408\u5220\u9664"},{"location":"pages/python/pytutorial/python-set/#Python-\u96c6\u5408\u5f39\u51fa\u6e05\u9664","text":"pop() \u65b9\u6cd5\u4ece\u96c6\u5408\u4e2d\u79fb\u9664\u5e76\u8fd4\u56de\u4efb\u610f\u5143\u7d20\u3002 clear() \u65b9\u6cd5\u4ece\u96c6\u5408\u4e2d\u5220\u9664\u6240\u6709\u5143\u7d20\u3002 python_set_remove2.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/python3 words = { \"spring\", \"table\", \"cup\", \"bottle\", \"coin\", \"pen\", \"water\" } print(words.pop()) print(words.pop()) print(words) words.clear() print(words) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5220\u9664\u5e76\u6253\u5370\u4e24\u4e2a\u968f\u673a\u5143\u7d20\uff0c\u5e76\u663e\u793a\u5176\u4f59\u5143\u7d20\u3002 \u7136\u540e\uff0c\u4f7f\u7528 clear() \u4ece\u96c6\u5408\u4e2d\u5220\u9664\u6240\u6709\u5143\u7d20\u3002 1 2 3 4 5 $ ./python_set_remove2.py water pen {'cup', 'spring', 'table', 'bottle', 'coin'} set() \u8fd9\u662f\u8f93\u51fa\u3002","title":"Python \u96c6\u5408\u5f39\u51fa&amp;\u6e05\u9664"},{"location":"pages/python/pytutorial/python-set/#Python-\u96c6\u5408\u8fd0\u7b97","text":"\u4f7f\u7528 Python \u96c6\uff0c\u6211\u4eec\u53ef\u4ee5\u6267\u884c\u7279\u5b9a\u7684\u8fd0\u7b97\uff1a\u5e76\u96c6\uff0c\u4ea4\u96c6\uff0c\u5dee\u548c\u5bf9\u79f0\u5dee\u3002 python_set_operations.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/python3 set1 = { 'a', 'b', 'c', 'c', 'd' } set2 = { 'a', 'b', 'x', 'y', 'z' } print(\"Set 1:\", set1) print(\"Set 2:\", set2) print(\"intersection:\", set1.intersection(set2)) print(\"union:\", set1.union(set2)) print(\"difference:\", set1.difference(set2)) print(\"symmetric difference:\", set1.symmetric_difference(set2)) \u8be5\u793a\u4f8b\u663e\u793a\u4e86\u56db\u4e2a\u8bbe\u7f6e\u64cd\u4f5c\u3002 1 print(\"intersection:\", set1.intersection(set2)) intersection() \u65b9\u6cd5\u6267\u884c\u76f8\u4ea4\u64cd\u4f5c\uff0c\u8be5\u64cd\u4f5c\u8fd4\u56de set1 \u548c set2 \u4e2d\u7684\u5143\u7d20\u3002 1 print(\"union:\", set1.union(set2)) union() \u65b9\u6cd5\u6267\u884c\u8054\u5408\u64cd\u4f5c\uff0c\u8be5\u64cd\u4f5c\u8fd4\u56de\u4e24\u4e2a\u96c6\u5408\u4e2d\u7684\u6240\u6709\u5143\u7d20\u3002 1 print(\"difference:\", set1.difference(set2)) difference() \u65b9\u6cd5\u6267\u884c\u5dee\u5206\u64cd\u4f5c\uff0c\u8be5\u64cd\u4f5c\u8fd4\u56de set1 \u4e2d\u800c\u4e0d\u662f set2 \u4e2d\u7684\u5143\u7d20\u3002 1 print(\"symmetric difference:\", set1.symmetric_difference(set2)) symmetric_difference() \u65b9\u6cd5\u6267\u884c\u5bf9\u79f0\u5dee\u5206\u64cd\u4f5c\uff0c\u8be5\u64cd\u4f5c\u8fd4\u56de set1 \u6216 set2 \u4e2d\u7684\u5143\u7d20\uff0c\u4f46\u4e0d\u8fd4\u56de\u4e24\u8005\u4e2d\u7684\u5143\u7d20\u3002 1 2 3 4 5 6 7 $ ./python_set_operations.py Set 1: {'c', 'b', 'a', 'd'} Set 2: {'y', 'b', 'a', 'x', 'z'} intersection: {'b', 'a'} union: {'b', 'a', 'z', 'c', 'x', 'y', 'd'} difference: {'c', 'd'} symmetric difference: {'z', 'c', 'x', 'y', 'd'} \u8fd9\u662f\u4e00\u4e2a\u793a\u4f8b\u8f93\u51fa\u3002 \u53ef\u4ee5\u4f7f\u7528&\uff0c|\uff0c-\u548c^\u8fd0\u7b97\u7b26\u6267\u884c\u8fd9\u4e9b\u64cd\u4f5c\u3002 python_set_operations2.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/python3 set1 = { 'a', 'b', 'c', 'c', 'd' } set2 = { 'a', 'b', 'x', 'y', 'z' } print(\"Set 1:\", set1) print(\"Set 2:\", set2) print(\"intersection:\", set1 & set2) print(\"union:\", set1 | set2) print(\"difference:\", set1 - set2) print(\"symmetric difference:\", set1 ^ set2) \u8be5\u793a\u4f8b\u663e\u793a\u4e86\u4f7f\u7528\u8fd0\u7b97\u7b26\u7684\u56db\u4e2a set \u64cd\u4f5c\u3002","title":"Python \u96c6\u5408\u8fd0\u7b97"},{"location":"pages/python/pytutorial/python-set/#\u5b50\u96c6\u548c\u8d85\u96c6","text":"\u5982\u679c\u96c6\u5408 A \u7684\u6240\u6709\u5143\u7d20\u90fd\u5305\u542b\u5728\u96c6\u5408 B \u4e2d\uff0c\u5219\u5c06 A \u79f0\u4e3a B \u7684\u5b50\u96c6\uff0c\u5c06 B \u79f0\u4e3a A \u7684\u8d85\u96c6\u3002 python_subset_superset.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/python3 set1 = { 'a', 'b', 'c', 'd', 'e' } set2 = { 'a', 'b', 'c' } set3 = {'x', 'y', 'z' } if (set2.issubset(set1)): print(\"set2 is a subset of set1\") if (set1.issuperset(set2)): print(\"set1 is a superset of set2\") if (set2.isdisjoint(set3)): print(\"set2 and set3 have no common elements\") \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 issubset() \uff0c issuperset() \u548c isdisjoint() \u65b9\u6cd5\u3002 1 2 if (set2.issubset(set1)): print(\"set1 is a subset of set2\") \u4f7f\u7528 issubset() \u65b9\u6cd5\uff0c\u6211\u4eec\u68c0\u67e5 set2 \u662f\u5426\u662f s1 \u7684\u5b50\u96c6\u3002 1 2 if (set1.issuperset(set2)): print(\"set1 is a superset of set2\") \u4f7f\u7528 issuperset() \u65b9\u6cd5\uff0c\u6211\u4eec\u68c0\u67e5 set1 \u662f\u5426\u662f s2 \u7684\u8d85\u96c6\u3002 1 2 if (set2.isdisjoint(set3)): print(\"set2 and set3 have no common elements\") \u4f7f\u7528 isdisjoint() \u65b9\u6cd5\uff0c\u6211\u4eec\u68c0\u67e5 set2 \u548c set3 \u662f\u5426\u6ca1\u6709\u5171\u540c\u7684\u5143\u7d20\u3002 1 2 3 4 $ ./python_subset_superset.py set1 is a subset of set2 set1 is a superset of set2 set2 and set3 have no common elements \u8fd9\u662f\u8f93\u51fa\u3002","title":"\u5b50\u96c6\u548c\u8d85\u96c6"},{"location":"pages/python/pytutorial/python-set/#Python-\u4e0d\u53ef\u53d8\u96c6","text":"\u4e0d\u53ef\u53d8\u7684\u96c6\uff08\u65e0\u6cd5\u4fee\u6539\u7684\u96c6\uff09\u662f\u4f7f\u7528 frozenset() \u529f\u80fd\u521b\u5efa\u7684\u3002 1 2 3 4 5 6 7 >>> s1 = frozenset(('blue', 'green', 'red')) >>> s1 frozenset({'red', 'green', 'blue'}) >>> s1.add('brown') Traceback (most recent call last): File \"<stdin>\", line 1, in <module> AttributeError: 'frozenset' object has no attribute 'add' \u5f53\u6211\u4eec\u5c1d\u8bd5\u5411\u51bb\u7ed3\u96c6\u4e2d\u6dfb\u52a0\u65b0\u5143\u7d20\u65f6\u51fa\u73b0\u9519\u8bef\u3002","title":"Python \u4e0d\u53ef\u53d8\u96c6"},{"location":"pages/python/pytutorial/python-simplejson/","text":"Python simplejson \u6559\u7a0b \u00b6 Python simplejson \u6559\u7a0b \u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528 Python simplejson \u6a21\u5757\u8bfb\u53d6\u548c\u5199\u5165 JSON \u6570\u636e\u3002 JSON \u683c\u5f0f \u00b6 JSON\uff08JavaScript \u5bf9\u8c61\u8868\u793a\u6cd5\uff09\u662f\u4e00\u79cd\u8f7b\u91cf\u7ea7\u7684\u6570\u636e\u4ea4\u6362\u683c\u5f0f\u3002 \u5b83\u5f88\u5bb9\u6613\u88ab\u4eba\u8bfb\u5199\uff0c\u4e5f\u53ef\u4ee5\u7531\u673a\u5668\u89e3\u6790\u548c\u751f\u6210\u3002 application/json \u662f JSON \u7684\u5b98\u65b9 Internet \u5a92\u4f53\u7c7b\u578b\u3002 JSON \u6587\u4ef6\u6269\u5c55\u540d\u662f .json \u3002 simplejson \u6a21\u5757 \u00b6 simplejson \u662f\u9002\u7528\u4e8e Python 2.5+\u548c Python 3.3+\u7684\u7b80\u5355\uff0c\u5feb\u901f\uff0c\u5b8c\u6574\u4e14\u53ef\u6269\u5c55\u7684 JSON \u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u3002 \u5b83\u662f\u6ca1\u6709\u4f9d\u8d56\u6027\u7684\u7eaf Python \u4ee3\u7801\u3002 simplejson \u6a21\u5757\u5305\u542b\u5728\u73b0\u4ee3 Python \u7248\u672c\u4e2d\u3002 \u89e3\u7801\u5668\u53ef\u4ee5\u5904\u7406\u4efb\u4f55\u6307\u5b9a\u7f16\u7801\u7684\u4f20\u5165 JSON \u5b57\u7b26\u4e32\uff08\u9ed8\u8ba4\u4e3a UTF-8\uff09 \u4f7f\u7528 simplejson \u00b6 1 import json \u8981\u4f7f\u7528 simplejson \u6a21\u5757\uff0c\u6211\u4eec\u5bfc\u5165 json \u3002 Simplejson \u8f6c\u6362\u8868 \u00b6 \u4e0b\u8868\u663e\u793a\u4e86\u5982\u4f55\u5728 Python \u548c JSON \u4e4b\u95f4\u8f6c\u6362\u6570\u636e\u7c7b\u578b\u3002 Python JSON \u683c\u5f0f \u5b57\u5178\uff0c\u547d\u540d\u5143\u7ec4 \u5bf9\u8c61 \u5217\u8868\uff0c\u5143\u7ec4 \u6570\u7ec4 `str`\uff0c`unicode` \u5b57\u7b26\u4e32 `int`\uff0c`long`\uff0c`float` \u6570\u5b57 `True` `true` `False` `false` `None` `null` json.dump() \u00b6 json.dump() \u65b9\u6cd5\u5c06 Python \u5bf9\u8c61\u4f5c\u4e3a JSON \u683c\u5f0f\u7684\u6d41\u5e8f\u5217\u5316\u5230\u6587\u4ef6\u5bf9\u8c61\u3002 simplejson_dump.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/python import json data = {\"name\": \"Jane\", \"age\": 17} with open('friends.json', 'w') as f: json.dump(data, f) \u8be5\u793a\u4f8b\u4f7f\u7528 json.dump() \u65b9\u6cd5\u5c06 Python \u5b57\u5178\u5e8f\u5217\u5316\u4e3a JSON\u3002 JSON \u6570\u636e\u88ab\u5199\u5165 friends.json \u6587\u4ef6\u3002 1 2 $ cat friends.json {\"age\": 17, \"name\": \"Jane\"} \u6267\u884c\u811a\u672c\u540e\uff0c\u6211\u4eec\u5f97\u5230\u4e86\u8fd9\u4e9b\u6570\u636e\u3002 json.dumps() \u00b6 json.dumps() \u65b9\u6cd5\u5c06 Python \u5bf9\u8c61\u5e8f\u5217\u5316\u4e3a JSON \u5b57\u7b26\u4e32\u3002 simplejson_dumps.py 1 2 3 4 5 6 7 8 #!/usr/bin/python import json data = [{\"name\": \"Jane\", \"age\": 17}, {\"name\": \"Thomas\", \"age\": 27}] json_data = json.dumps(data) print(repr(json_data)) \u8be5\u793a\u4f8b\u4f7f\u7528 json.dumps() \u65b9\u6cd5\u5c06 Python \u5217\u8868\u5e8f\u5217\u5316\u4e3a JSON \u5b57\u7b26\u4e32\u3002 JSON \u6570\u636e\u88ab\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 2 $ ./simplejson_dumps.py '[{\"name\": \"Jane\", \"age\": 17}, {\"name\": \"Thomas\", \"age\": 27}]' \u8fd9\u662f\u793a\u4f8b\u7684\u8f93\u51fa\u3002 json.load() \u00b6 json.load() \u65b9\u6cd5\u5c06\u5305\u542b JSON \u6587\u6863\u7684\u6587\u4ef6\u5bf9\u8c61\u53cd\u5e8f\u5217\u5316\u4e3a Python \u5bf9\u8c61\u3002 config.json 1 2 3 4 5 { \"theme\" : \"bluespring\", \"size\": \"small\", \"splashscreen\": \"false\" } config.json \u6587\u4ef6\u5305\u542b\u6b64\u6570\u636e\u3002 read_config.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/python import json with open('config.json') as f: config = json.load(f) print('Theme: {}'.format(config['theme'])) print('Size: {}'.format(config['size'])) print('Splash screen: {}'.format(config['splashscreen'])) \u8be5\u793a\u4f8b\u4f7f\u7528 json.load() \u4ece config.json \u6587\u4ef6\u8bfb\u53d6\u914d\u7f6e\u6570\u636e\uff0c\u5e76\u5c06\u6570\u636e\u6253\u5370\u5230\u7ec8\u7aef\u3002 1 2 3 4 $ ./read_config.py Theme: bluespring Size: small Splash screen: false \u8fd9\u662f\u8f93\u51fa\u3002 json.loads() \u00b6 json.loads() \u65b9\u6cd5\u5c06 JSON \u5b57\u7b26\u4e32\u53cd\u5e8f\u5217\u5316\u4e3a Python \u5bf9\u8c61\u3002 simplejson_loads.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/python import json json_data = '{\"name\": \"Jane\", \"age\": 17}' data = json.loads(json_data) print(type(json_data)) print(type(data)) print(data) \u8be5\u793a\u4f8b\u5c06 JSON \u5b57\u7b26\u4e32\u53cd\u5e8f\u5217\u5316\u4e3a Python \u5b57\u5178\u3002 1 2 3 4 $ ./simple.py <class 'str'> <class 'dict'> {'name': 'Jane', 'age': 17} \u8fd9\u662f\u793a\u4f8b\u7684\u8f93\u51fa\u3002 Simplejson \u4ece URL \u8bfb\u53d6 JSON \u00b6 \u4ee5\u4e0b\u793a\u4f8b\u4ece\u7f51\u9875\u8bfb\u53d6 JSON \u6570\u636e\u3002 \u6211\u4eec\u4ece http://time.jsontest.com \u83b7\u5f97 JSON \u6570\u636e\u3002 1 2 3 4 5 6 $ curl http://time.jsontest.com { \"time\": \"10:00:19 AM\", \"milliseconds_since_epoch\": 1496311219347, \"date\": \"06-01-2017\" } \u5bf9\u6b64\u7ad9\u70b9\u7684 GET \u8bf7\u6c42\u8fd4\u56de\u6b64 JSON \u5b57\u7b26\u4e32\u3002 parse_json_url.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/python import json import urllib.request hres = urllib.request.urlopen('http://time.jsontest.com') data = json.loads(hres.read().decode(\"utf-8\")) print('Unix time: {}'.format(data['milliseconds_since_epoch'])) print('Time: {}'.format(data['time'])) print('Date: {}'.format(data['date'])) \u5728\u8be5\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 urllib.request \u6a21\u5757\u521b\u5efa\u5bf9\u7f51\u7ad9\u7684\u8bf7\u6c42\u3002 1 data = json.loads(hres.read().decode(\"utf-8\")) \u4ece\u8fd4\u56de\u7684\u54cd\u5e94\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 json.loads() \u65b9\u6cd5\u5c06 JSON \u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a Python \u5b57\u5178\u3002 1 2 3 print('Unix time: {}'.format(data['milliseconds_since_epoch'])) print('Time: {}'.format(data['time'])) print('Date: {}'.format(data['date'])) \u501f\u52a9 Python \u7684 format() \u65b9\u6cd5\uff0c\u6211\u4eec\u5c06\u68c0\u7d22\u5230\u7684\u6570\u636e\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 2 3 4 $ ./parse_json_url.py Unix time: 1496311518866 Time: 10:05:18 AM Date: 06-01-2017 \u8fd9\u662f\u8f93\u51fa\u3002 \u6f02\u4eae\u5730\u6253\u5370 \u00b6 \u4f7f\u7528 simplejson\uff0c\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u6f02\u4eae\u5730\u6253\u5370\u6570\u636e\u3002 pretty_print_json.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/python import json json_data = {\"name\":\"Audi\", \"model\":\"2012\", \"price\":22000, \"colours\":[\"gray\", \"red\", \"white\"]} data = json.dumps(json_data, sort_keys=True, indent=4 * ' ') print(data) \u4f7f\u7528 sort_keys \u548c indent \u9009\u9879\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u597d\u5730\u683c\u5f0f\u5316 JSON \u6570\u636e\u3002 1 2 3 4 5 6 7 8 9 10 11 $ ./pretty_print_json.py { \"colours\": [ \"gray\", \"red\", \"white\" ], \"model\": \"2012\", \"name\": \"Audi\", \"price\": 22000 } \u8fd9\u662f\u793a\u4f8b\u7684\u8f93\u51fa\u3002 \u6570\u636e\u7f29\u8fdb\u5e76\u5bf9\u952e\u8fdb\u884c\u6392\u5e8f\u3002 Simplejson \u81ea\u5b9a\u4e49\u7c7b \u00b6 Simplejson \u4ec5\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e00\u4e9b Python \u5bf9\u8c61\uff0c\u8fd9\u4e9b\u5bf9\u8c61\u5728\u8f6c\u6362\u8868\u4e2d\u5217\u51fa\u3002 \u5bf9\u4e8e\u81ea\u5b9a\u4e49 Python \u5bf9\u8c61\uff0c\u6211\u4eec\u9700\u8981\u6267\u884c\u4e00\u4e9b\u9644\u52a0\u6b65\u9aa4\u3002 custom_class.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/python import json class Person(object): def __init__(self, name, age): self.name = name self.age = age p = Person(\"Lucy\", 23) json_data = json.dumps(p.__dict__) print(repr(json_data)) \u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u81ea\u5b9a\u4e49\u5bf9\u8c61\u5e8f\u5217\u5316\u4e3a JSON\u3002 1 json_data = json.dumps(p.__dict__) \u8bc0\u7a8d\u662f\u4f7f\u7528 __dict__ \u5c5e\u6027\uff0c\u8be5\u5c5e\u6027\u5b58\u50a8\u5bf9\u8c61\u5c5e\u6027\uff08\u540d\u79f0\u548c\u5e74\u9f84\uff09\u3002 1 2 $ ./custom_class.py '{\"name\": \"Lucy\", \"age\": 23}' \u8fd9\u662f\u8f93\u51fa\u3002 \u81ea\u5b9a\u4e49\u7c7b\u7684 Simplejson \u5217\u8868 \u00b6 \u5728\u4e0b\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u663e\u793a\u5982\u4f55\u5e8f\u5217\u5316\u81ea\u5b9a\u4e49\u7c7b\u7684\u5217\u8868\u3002 custom_class_list.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #!/usr/bin/python import json class Person(object): def __init__(self, name, age): self.name = name self.age = age def toJson(self): ''' Serialize the object custom object ''' return json.dumps(self, default=lambda o: o.__dict__, sort_keys=True, indent=4) p1 = Person(\"Lucy\", 23) p2 = Person(\"Thomas\", 29) people = [] people.append(json.loads(p1.toJson())) people.append(json.loads(p2.toJson())) json_data = json.dumps(people) print(repr(json_data)) \u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a toJson() \u65b9\u6cd5\u6765\u5e8f\u5217\u5316\u8be5\u5bf9\u8c61\u3002 1 2 3 people = [] people.append(json.loads(p1.toJson())) people.append(json.loads(p2.toJson())) \u5c06\u5bf9\u8c61\u6dfb\u52a0\u5230\u5217\u8868\u65f6\uff0c\u6211\u4eec\u5c06\u8c03\u7528 toJson() \u65b9\u6cd5\u3002 1 2 $ ./custom_class_list.py '[{\"age\": 23, \"name\": \"Lucy\"}, {\"age\": 29, \"name\": \"Thomas\"}]' \u8fd9\u662f\u793a\u4f8b\u7684\u8f93\u51fa\u3002 \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 Python simplejson \u5e93\u3002","title":"Python JSON \u6559\u7a0b"},{"location":"pages/python/pytutorial/python-simplejson/#Python-simplejson-\u6559\u7a0b","text":"Python simplejson \u6559\u7a0b \u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528 Python simplejson \u6a21\u5757\u8bfb\u53d6\u548c\u5199\u5165 JSON \u6570\u636e\u3002","title":"Python simplejson \u6559\u7a0b"},{"location":"pages/python/pytutorial/python-simplejson/#JSON-\u683c\u5f0f","text":"JSON\uff08JavaScript \u5bf9\u8c61\u8868\u793a\u6cd5\uff09\u662f\u4e00\u79cd\u8f7b\u91cf\u7ea7\u7684\u6570\u636e\u4ea4\u6362\u683c\u5f0f\u3002 \u5b83\u5f88\u5bb9\u6613\u88ab\u4eba\u8bfb\u5199\uff0c\u4e5f\u53ef\u4ee5\u7531\u673a\u5668\u89e3\u6790\u548c\u751f\u6210\u3002 application/json \u662f JSON \u7684\u5b98\u65b9 Internet \u5a92\u4f53\u7c7b\u578b\u3002 JSON \u6587\u4ef6\u6269\u5c55\u540d\u662f .json \u3002","title":"JSON \u683c\u5f0f"},{"location":"pages/python/pytutorial/python-simplejson/#simplejson-\u6a21\u5757","text":"simplejson \u662f\u9002\u7528\u4e8e Python 2.5+\u548c Python 3.3+\u7684\u7b80\u5355\uff0c\u5feb\u901f\uff0c\u5b8c\u6574\u4e14\u53ef\u6269\u5c55\u7684 JSON \u7f16\u7801\u5668\u548c\u89e3\u7801\u5668\u3002 \u5b83\u662f\u6ca1\u6709\u4f9d\u8d56\u6027\u7684\u7eaf Python \u4ee3\u7801\u3002 simplejson \u6a21\u5757\u5305\u542b\u5728\u73b0\u4ee3 Python \u7248\u672c\u4e2d\u3002 \u89e3\u7801\u5668\u53ef\u4ee5\u5904\u7406\u4efb\u4f55\u6307\u5b9a\u7f16\u7801\u7684\u4f20\u5165 JSON \u5b57\u7b26\u4e32\uff08\u9ed8\u8ba4\u4e3a UTF-8\uff09","title":"simplejson \u6a21\u5757"},{"location":"pages/python/pytutorial/python-simplejson/#\u4f7f\u7528-simplejson","text":"1 import json \u8981\u4f7f\u7528 simplejson \u6a21\u5757\uff0c\u6211\u4eec\u5bfc\u5165 json \u3002","title":"\u4f7f\u7528 simplejson"},{"location":"pages/python/pytutorial/python-simplejson/#Simplejson-\u8f6c\u6362\u8868","text":"\u4e0b\u8868\u663e\u793a\u4e86\u5982\u4f55\u5728 Python \u548c JSON \u4e4b\u95f4\u8f6c\u6362\u6570\u636e\u7c7b\u578b\u3002 Python JSON \u683c\u5f0f \u5b57\u5178\uff0c\u547d\u540d\u5143\u7ec4 \u5bf9\u8c61 \u5217\u8868\uff0c\u5143\u7ec4 \u6570\u7ec4 `str`\uff0c`unicode` \u5b57\u7b26\u4e32 `int`\uff0c`long`\uff0c`float` \u6570\u5b57 `True` `true` `False` `false` `None` `null`","title":"Simplejson \u8f6c\u6362\u8868"},{"location":"pages/python/pytutorial/python-simplejson/#jsondump","text":"json.dump() \u65b9\u6cd5\u5c06 Python \u5bf9\u8c61\u4f5c\u4e3a JSON \u683c\u5f0f\u7684\u6d41\u5e8f\u5217\u5316\u5230\u6587\u4ef6\u5bf9\u8c61\u3002 simplejson_dump.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/python import json data = {\"name\": \"Jane\", \"age\": 17} with open('friends.json', 'w') as f: json.dump(data, f) \u8be5\u793a\u4f8b\u4f7f\u7528 json.dump() \u65b9\u6cd5\u5c06 Python \u5b57\u5178\u5e8f\u5217\u5316\u4e3a JSON\u3002 JSON \u6570\u636e\u88ab\u5199\u5165 friends.json \u6587\u4ef6\u3002 1 2 $ cat friends.json {\"age\": 17, \"name\": \"Jane\"} \u6267\u884c\u811a\u672c\u540e\uff0c\u6211\u4eec\u5f97\u5230\u4e86\u8fd9\u4e9b\u6570\u636e\u3002","title":"json.dump()"},{"location":"pages/python/pytutorial/python-simplejson/#jsondumps","text":"json.dumps() \u65b9\u6cd5\u5c06 Python \u5bf9\u8c61\u5e8f\u5217\u5316\u4e3a JSON \u5b57\u7b26\u4e32\u3002 simplejson_dumps.py 1 2 3 4 5 6 7 8 #!/usr/bin/python import json data = [{\"name\": \"Jane\", \"age\": 17}, {\"name\": \"Thomas\", \"age\": 27}] json_data = json.dumps(data) print(repr(json_data)) \u8be5\u793a\u4f8b\u4f7f\u7528 json.dumps() \u65b9\u6cd5\u5c06 Python \u5217\u8868\u5e8f\u5217\u5316\u4e3a JSON \u5b57\u7b26\u4e32\u3002 JSON \u6570\u636e\u88ab\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 2 $ ./simplejson_dumps.py '[{\"name\": \"Jane\", \"age\": 17}, {\"name\": \"Thomas\", \"age\": 27}]' \u8fd9\u662f\u793a\u4f8b\u7684\u8f93\u51fa\u3002","title":"json.dumps()"},{"location":"pages/python/pytutorial/python-simplejson/#jsonload","text":"json.load() \u65b9\u6cd5\u5c06\u5305\u542b JSON \u6587\u6863\u7684\u6587\u4ef6\u5bf9\u8c61\u53cd\u5e8f\u5217\u5316\u4e3a Python \u5bf9\u8c61\u3002 config.json 1 2 3 4 5 { \"theme\" : \"bluespring\", \"size\": \"small\", \"splashscreen\": \"false\" } config.json \u6587\u4ef6\u5305\u542b\u6b64\u6570\u636e\u3002 read_config.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/python import json with open('config.json') as f: config = json.load(f) print('Theme: {}'.format(config['theme'])) print('Size: {}'.format(config['size'])) print('Splash screen: {}'.format(config['splashscreen'])) \u8be5\u793a\u4f8b\u4f7f\u7528 json.load() \u4ece config.json \u6587\u4ef6\u8bfb\u53d6\u914d\u7f6e\u6570\u636e\uff0c\u5e76\u5c06\u6570\u636e\u6253\u5370\u5230\u7ec8\u7aef\u3002 1 2 3 4 $ ./read_config.py Theme: bluespring Size: small Splash screen: false \u8fd9\u662f\u8f93\u51fa\u3002","title":"json.load()"},{"location":"pages/python/pytutorial/python-simplejson/#jsonloads","text":"json.loads() \u65b9\u6cd5\u5c06 JSON \u5b57\u7b26\u4e32\u53cd\u5e8f\u5217\u5316\u4e3a Python \u5bf9\u8c61\u3002 simplejson_loads.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/python import json json_data = '{\"name\": \"Jane\", \"age\": 17}' data = json.loads(json_data) print(type(json_data)) print(type(data)) print(data) \u8be5\u793a\u4f8b\u5c06 JSON \u5b57\u7b26\u4e32\u53cd\u5e8f\u5217\u5316\u4e3a Python \u5b57\u5178\u3002 1 2 3 4 $ ./simple.py <class 'str'> <class 'dict'> {'name': 'Jane', 'age': 17} \u8fd9\u662f\u793a\u4f8b\u7684\u8f93\u51fa\u3002","title":"json.loads()"},{"location":"pages/python/pytutorial/python-simplejson/#Simplejson-\u4ece-URL-\u8bfb\u53d6-JSON","text":"\u4ee5\u4e0b\u793a\u4f8b\u4ece\u7f51\u9875\u8bfb\u53d6 JSON \u6570\u636e\u3002 \u6211\u4eec\u4ece http://time.jsontest.com \u83b7\u5f97 JSON \u6570\u636e\u3002 1 2 3 4 5 6 $ curl http://time.jsontest.com { \"time\": \"10:00:19 AM\", \"milliseconds_since_epoch\": 1496311219347, \"date\": \"06-01-2017\" } \u5bf9\u6b64\u7ad9\u70b9\u7684 GET \u8bf7\u6c42\u8fd4\u56de\u6b64 JSON \u5b57\u7b26\u4e32\u3002 parse_json_url.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/python import json import urllib.request hres = urllib.request.urlopen('http://time.jsontest.com') data = json.loads(hres.read().decode(\"utf-8\")) print('Unix time: {}'.format(data['milliseconds_since_epoch'])) print('Time: {}'.format(data['time'])) print('Date: {}'.format(data['date'])) \u5728\u8be5\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 urllib.request \u6a21\u5757\u521b\u5efa\u5bf9\u7f51\u7ad9\u7684\u8bf7\u6c42\u3002 1 data = json.loads(hres.read().decode(\"utf-8\")) \u4ece\u8fd4\u56de\u7684\u54cd\u5e94\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 json.loads() \u65b9\u6cd5\u5c06 JSON \u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a Python \u5b57\u5178\u3002 1 2 3 print('Unix time: {}'.format(data['milliseconds_since_epoch'])) print('Time: {}'.format(data['time'])) print('Date: {}'.format(data['date'])) \u501f\u52a9 Python \u7684 format() \u65b9\u6cd5\uff0c\u6211\u4eec\u5c06\u68c0\u7d22\u5230\u7684\u6570\u636e\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 2 3 4 $ ./parse_json_url.py Unix time: 1496311518866 Time: 10:05:18 AM Date: 06-01-2017 \u8fd9\u662f\u8f93\u51fa\u3002","title":"Simplejson \u4ece URL \u8bfb\u53d6 JSON"},{"location":"pages/python/pytutorial/python-simplejson/#\u6f02\u4eae\u5730\u6253\u5370","text":"\u4f7f\u7528 simplejson\uff0c\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u6f02\u4eae\u5730\u6253\u5370\u6570\u636e\u3002 pretty_print_json.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/python import json json_data = {\"name\":\"Audi\", \"model\":\"2012\", \"price\":22000, \"colours\":[\"gray\", \"red\", \"white\"]} data = json.dumps(json_data, sort_keys=True, indent=4 * ' ') print(data) \u4f7f\u7528 sort_keys \u548c indent \u9009\u9879\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u597d\u5730\u683c\u5f0f\u5316 JSON \u6570\u636e\u3002 1 2 3 4 5 6 7 8 9 10 11 $ ./pretty_print_json.py { \"colours\": [ \"gray\", \"red\", \"white\" ], \"model\": \"2012\", \"name\": \"Audi\", \"price\": 22000 } \u8fd9\u662f\u793a\u4f8b\u7684\u8f93\u51fa\u3002 \u6570\u636e\u7f29\u8fdb\u5e76\u5bf9\u952e\u8fdb\u884c\u6392\u5e8f\u3002","title":"\u6f02\u4eae\u5730\u6253\u5370"},{"location":"pages/python/pytutorial/python-simplejson/#Simplejson-\u81ea\u5b9a\u4e49\u7c7b","text":"Simplejson \u4ec5\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e00\u4e9b Python \u5bf9\u8c61\uff0c\u8fd9\u4e9b\u5bf9\u8c61\u5728\u8f6c\u6362\u8868\u4e2d\u5217\u51fa\u3002 \u5bf9\u4e8e\u81ea\u5b9a\u4e49 Python \u5bf9\u8c61\uff0c\u6211\u4eec\u9700\u8981\u6267\u884c\u4e00\u4e9b\u9644\u52a0\u6b65\u9aa4\u3002 custom_class.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/python import json class Person(object): def __init__(self, name, age): self.name = name self.age = age p = Person(\"Lucy\", 23) json_data = json.dumps(p.__dict__) print(repr(json_data)) \u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u81ea\u5b9a\u4e49\u5bf9\u8c61\u5e8f\u5217\u5316\u4e3a JSON\u3002 1 json_data = json.dumps(p.__dict__) \u8bc0\u7a8d\u662f\u4f7f\u7528 __dict__ \u5c5e\u6027\uff0c\u8be5\u5c5e\u6027\u5b58\u50a8\u5bf9\u8c61\u5c5e\u6027\uff08\u540d\u79f0\u548c\u5e74\u9f84\uff09\u3002 1 2 $ ./custom_class.py '{\"name\": \"Lucy\", \"age\": 23}' \u8fd9\u662f\u8f93\u51fa\u3002","title":"Simplejson \u81ea\u5b9a\u4e49\u7c7b"},{"location":"pages/python/pytutorial/python-simplejson/#\u81ea\u5b9a\u4e49\u7c7b\u7684-Simplejson-\u5217\u8868","text":"\u5728\u4e0b\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u663e\u793a\u5982\u4f55\u5e8f\u5217\u5316\u81ea\u5b9a\u4e49\u7c7b\u7684\u5217\u8868\u3002 custom_class_list.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #!/usr/bin/python import json class Person(object): def __init__(self, name, age): self.name = name self.age = age def toJson(self): ''' Serialize the object custom object ''' return json.dumps(self, default=lambda o: o.__dict__, sort_keys=True, indent=4) p1 = Person(\"Lucy\", 23) p2 = Person(\"Thomas\", 29) people = [] people.append(json.loads(p1.toJson())) people.append(json.loads(p2.toJson())) json_data = json.dumps(people) print(repr(json_data)) \u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a toJson() \u65b9\u6cd5\u6765\u5e8f\u5217\u5316\u8be5\u5bf9\u8c61\u3002 1 2 3 people = [] people.append(json.loads(p1.toJson())) people.append(json.loads(p2.toJson())) \u5c06\u5bf9\u8c61\u6dfb\u52a0\u5230\u5217\u8868\u65f6\uff0c\u6211\u4eec\u5c06\u8c03\u7528 toJson() \u65b9\u6cd5\u3002 1 2 $ ./custom_class_list.py '[{\"age\": 23, \"name\": \"Lucy\"}, {\"age\": 29, \"name\": \"Thomas\"}]' \u8fd9\u662f\u793a\u4f8b\u7684\u8f93\u51fa\u3002 \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 Python simplejson \u5e93\u3002","title":"\u81ea\u5b9a\u4e49\u7c7b\u7684 Simplejson \u5217\u8868"},{"location":"pages/python/pytutorial/python-smtplib/","text":"Python smtplib \u6559\u7a0b \u00b6 Python smtplib \u6559\u7a0b \u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528 smtplib \u6a21\u5757\u5728 Python \u4e2d\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\u3002 \u8981\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\uff0c\u6211\u4eec\u4f7f\u7528 Python \u5f00\u53d1\u670d\u52a1\u5668\uff0cMailtrap \u5728\u7ebf\u670d\u52a1\u548c\u5171\u4eab\u7684\u7f51\u7edc\u6258\u7ba1\u90ae\u4ef6\u670d\u52a1\u5668\u3002 SMTP \u00b6 \u7b80\u5355\u90ae\u4ef6\u4f20\u8f93\u534f\u8bae\uff08SMTP\uff09\u662f\u7528\u4e8e\u7535\u5b50\u90ae\u4ef6\u4f20\u8f93\u7684\u901a\u4fe1\u534f\u8bae\u3002 Is \u662f\u4e00\u4e2a Internet \u6807\u51c6\uff0c\u8be5\u6807\u51c6\u4e8e 1982 \u5e74\u7531 RFC 821 \u9996\u6b21\u5b9a\u4e49\uff0c\u5e76\u4e8e 2008 \u5e74\u7531 RFC 5321 \u66f4\u65b0\u4e3a\u6269\u5c55 SMTP \u6dfb\u52a0\u3002 \u90ae\u4ef6\u670d\u52a1\u5668\u548c\u5176\u4ed6\u90ae\u4ef6\u4f20\u8f93\u4ee3\u7406\u4f7f\u7528 SMTP \u53d1\u9001\u548c\u63a5\u6536\u90ae\u4ef6\u3002 smtplib \u6a21\u5757 \u00b6 smtplib \u662f\u4e00\u4e2a Python \u5e93\uff0c\u7528\u4e8e\u4f7f\u7528\u7b80\u5355\u90ae\u4ef6\u4f20\u8f93\u534f\u8bae\uff08SMTP\uff09\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\u3002 smtplib \u662f\u5185\u7f6e\u6a21\u5757\uff1b \u6211\u4eec\u4e0d\u9700\u8981\u5b89\u88c5\u5b83\u3002 \u5b83\u62bd\u8c61\u4e86 SMTP \u7684\u6240\u6709\u590d\u6742\u6027\u3002 \u90ae\u4ef6\u670d\u52a1\u5668 \u00b6 \u8981\u5b9e\u9645\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\uff0c\u6211\u4eec\u9700\u8981\u6709\u6743\u8bbf\u95ee\u90ae\u4ef6\u670d\u52a1\u5668\u3002 Python \u5e26\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u5f00\u53d1\u90ae\u4ef6\u670d\u52a1\u5668\u3002 Mailslurper \u662f\u6613\u4e8e\u4f7f\u7528\u7684\u672c\u5730\u5f00\u53d1\u670d\u52a1\u5668\u3002 \u5171\u4eab\u7684\u865a\u62df\u4e3b\u673a\u63d0\u4f9b\u5546\u4f7f\u6211\u4eec\u53ef\u4ee5\u8bbf\u95ee\u90ae\u4ef6\u670d\u52a1\u5668\u3002 \u6211\u4eec\u53ef\u4ee5\u5728\u5e10\u6237\u4e2d\u627e\u5230\u8be6\u7ec6\u4fe1\u606f\u3002 \u6ce8\u610f\uff1a \u907f\u514d\u4f7f\u7528 Gmail\uff0c\u56e0\u4e3a\u5b83\u662f\u9ad8\u5ea6\u5b89\u5168\u7684\u670d\u52a1\u5668\uff0c\u5e76\u4e14\u4f7f\u5176\u5de5\u4f5c\u975e\u5e38\u590d\u6742\u3002 \u5b9e\u9645\u4e0a\uff0cInternet \u4e0a\u7684\u5927\u591a\u6570\uff08\u5982\u679c\u4e0d\u662f\u5168\u90e8\uff09\u793a\u4f8b\u6f14\u793a\u4e86\u5982\u4f55\u901a\u8fc7 Gmail \u670d\u52a1\u5668\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\uff0c\u8fd9\u4e9b\u793a\u4f8b\u90fd\u65e0\u6cd5\u6b63\u5e38\u5de5\u4f5c\u3002 \u800c\u662f\u4f7f\u7528\u5f00\u53d1\u670d\u52a1\u5668\u6216\u5171\u4eab\u7684\u865a\u62df\u4e3b\u673a\u670d\u52a1\u5668\u3002 \u6700\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Web \u670d\u52a1\u3002 \u6709\u5f00\u53d1 Web \u670d\u52a1\uff08\u4f8b\u5982 MailTrap \u6216 MailSlurp\uff09\u6216\u751f\u4ea7\u670d\u52a1\uff08\u4f8b\u5982 Mailgun \u6216 Mandrill\uff09\u3002 \u4f7f\u7528 Python \u5185\u7f6e\u90ae\u4ef6\u670d\u52a1\u5668 \u00b6 1 $ python -m smtpd -c DebuggingServer -n localhost:1025 \u6211\u4eec\u5728\u7aef\u53e3 1025 \u4e0a\u542f\u52a8 Python \u5185\u7f6e\u90ae\u4ef6\u670d\u52a1\u5668\u3002 built_in.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #!/usr/bin/env python import smtplib from email.mime.text import MIMEText sender = 'admin@example.com' receivers = ['info@example.com'] port = 1025 msg = MIMEText('This is test mail') msg['Subject'] = 'Test mail' msg['From'] = 'admin@example.com' msg['To'] = 'info@example.com' with smtplib.SMTP('localhost', port) as server: # server.login('username', 'password') server.sendmail(sender, receivers, msg.as_string()) print(\"Successfully sent email\") \u6211\u4eec\u5411\u672c\u5730\u5f00\u53d1\u90ae\u4ef6\u670d\u52a1\u5668\u53d1\u9001\u4e00\u6761\u7b80\u5355\u7684\u6587\u672c\u6d88\u606f\u3002 1 2 sender = 'admin@example.com' receivers = ['info@example.com'] \u6211\u4eec\u63d0\u4f9b\u53d1\u9001\u8005\u548c\u63a5\u6536\u8005\u3002 example.com \u662f\u4e13\u95e8\u7528\u4e8e\u6587\u6863\u4e2d\u7684\u8bf4\u660e\u6027\u793a\u4f8b\u7684\u57df\u540d\u3002 1 2 3 4 5 msg = MIMEText('This is test mail') msg['Subject'] = 'Test mail' msg['From'] = 'admin@example.com' msg['To'] = 'info@example.com' MimeText \u7528\u4e8e\u53d1\u9001\u6587\u672c\u7535\u5b50\u90ae\u4ef6\u3002 \u6211\u4eec\u63d0\u4f9b\u4e3b\u9898\uff0c\u4ece\u9009\u9879\u5230\u9009\u9879\u3002 1 2 with smtplib.SMTP('localhost', port) as server: ... SMTP \u7c7b\u7ba1\u7406\u4e0e SMTP \u670d\u52a1\u5668\u7684\u8fde\u63a5\u3002 1 # server.login('username', 'password') \u7531\u4e8e\u6211\u4eec\u4f7f\u7528\u672c\u5730\u5f00\u53d1\u670d\u52a1\u5668\uff0c\u56e0\u6b64\u4e0d\u5fc5\u767b\u5f55\u3002 1 server.sendmail(sender, receivers, msg.as_string()) \u7535\u5b50\u90ae\u4ef6\u5e26\u6709 sendmail() \u53d1\u9001\u3002 1 2 3 4 5 6 7 8 9 10 11 12 $ python -m smtpd -c DebuggingServer -n localhost:1025 ---------- MESSAGE FOLLOWS ---------- b'Content-Type: text/plain; charset=\"us-ascii\"' b'MIME-Version: 1.0' b'Content-Transfer-Encoding: 7bit' b'Subject: Test mail' b'From: admin@example.com' b'To: info@example.com' b'X-Peer: ::1' b'' b'This is test mail' ------------ END MESSAGE ------------ \u53d1\u9001\u7535\u5b50\u90ae\u4ef6\u540e\uff0c\u6211\u4eec\u4f1a\u6536\u5230\u6b64\u6d88\u606f\u3002 \u53d1\u9001\u90ae\u4ef6\u5230 Mailtrap \u00b6 Mailtrap \u63d0\u4f9b\u4e86\u4e00\u9879\u514d\u8d39\u8ba1\u5212\uff0c\u4f7f\u6211\u4eec\u6bcf\u4e2a\u6708\u53ef\u4ee5\u53d1\u9001 500 \u5c01\u90ae\u4ef6\u3002 \u8bbe\u7f6e Mailtrap \u975e\u5e38\u5bb9\u6613\u3002 \u5982\u679c\u6211\u4eec\u62e5\u6709 Github \u6216 Google \u5e10\u6237\uff0c\u5219\u53ea\u9700\u51e0\u79d2\u949f\u3002 \u8bbe\u7f6e\u9875\u9762\u4e2d\u63d0\u4f9b\u4e86\u5fc5\u8981\u7684\u51ed\u636e\u3002 \u53e6\u5916\uff0c\u8fd8\u6709\u4e00\u4e9b\u7b80\u77ed\u7684\u4ee3\u7801\u793a\u4f8b\u663e\u793a\u4e86\u5982\u4f55\u4f7f\u7528\u670d\u52a1\uff0c\u5305\u62ec smtplib \uff0c Django \u6216 Flask \u3002 mailtrap_simple.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #!/usr/bin/env python import smtplib from email.mime.text import MIMEText sender = 'admin@example.com' receiver = 'info@example.com' msg = MIMEText('This is test mail') msg['Subject'] = 'Test mail' msg['From'] = 'admin@example.com' msg['To'] = 'info@example.com' user = 'username' password = 'passoword' with smtplib.SMTP(\"smtp.mailtrap.io\", 2525) as server: server.login(user, password) server.sendmail(sender, receiver, msg.as_string()) print(\"mail successfully sent\") \u8be5\u793a\u4f8b\u5c06\u7b80\u5355\u90ae\u4ef6\u53d1\u9001\u5230 Mailtrap \u5e10\u6237\u3002 1 server.login(user, password) \u7528\u6237\u540d\u548c\u5bc6\u7801\u5728\u8bbe\u7f6e\u9875\u9762\u4e2d\u7ed9\u51fa\uff1b \u5b83\u4eec\u7531\u968f\u673a\u5b57\u7b26\u7ec4\u6210\uff0c\u4f8b\u5982 24h328df3e32\u3002 \u53d1\u9001\u5e26\u6709\u9644\u4ef6\u7684\u7535\u5b50\u90ae\u4ef6 \u00b6 \u5f53\u6211\u4eec\u6709\u9644\u4ef6\u6216\u8981\u63d0\u4f9b\u76f8\u540c\u5185\u5bb9\u7684\u66ff\u4ee3\u7248\u672c\uff08\u4f8b\u5982\u7eaf\u6587\u672c/ HTML \u7248\u672c\uff09\u65f6\uff0c\u5c06\u4f7f\u7528 MIMEMultipart \u3002 words.txt 1 2 3 4 falcon blue sky cloud \u6211\u4eec\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u6587\u672c\u6587\u4ef6\u3002 mailtrap_attachment.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #!/usr/bin/python import smtplib from os.path import basename from email.mime.text import MIMEText from email.mime.multipart import MIMEMultipart from email.mime.application import MIMEApplication sender = 'admin@example.com' receiver = 'info@example.com' msg = MIMEMultipart() msg['Subject'] = 'Test mail with attachment' msg['From'] = 'admin@example.com' msg['To'] = 'info@example.com' filename = 'words.txt' with open(filename, 'r') as f: part = MIMEApplication(f.read(), Name=basename(filename)) part['Content-Disposition'] = 'attachment; filename=\"{}\"'.format(basename(filename)) msg.attach(part) user = 'username' password = 'password' with smtplib.SMTP(\"smtp.mailtrap.io\", 2525) as server: server.login(user, password) server.sendmail(sender, receiver, msg.as_string()) print(\"Successfully sent email\") \u8be5\u793a\u4f8b\u5411 Mailtrap \u53d1\u9001\u5e26\u6709\u6587\u672c\u6587\u4ef6\u9644\u4ef6\u7684\u7535\u5b50\u90ae\u4ef6\u3002 1 2 3 filename = 'words.txt' with open(filename, 'r') as f: part = MIMEApplication(f.read(), Name=basename(filename)) \u6211\u4eec\u9605\u8bfb\u4e86\u6587\u672c\u6587\u4ef6\u7684\u5185\u5bb9\u3002 1 2 part['Content-Disposition'] = 'attachment; filename=\"{}\"'.format(basename(filename)) msg.attach(part) \u9644\u4ef6\u901a\u8fc7 attach() \u65b9\u6cd5\u6dfb\u52a0\u3002 \u4f7f\u7528 STARTTLS \u7684\u90ae\u4ef6\u9677\u9631 \u00b6 Mailtrap \u5728\u4efb\u4f55 SMTP \u7aef\u53e3\u4e0a\u90fd\u4e0d\u652f\u6301 SSL\uff0c\u5b83\u4ec5\u652f\u6301 STARTTLS\u3002 \u5982\u679c\u6211\u4eec\u5c1d\u8bd5\u4f7f\u7528 SSL\uff0c\u5219\u4f1a\u6536\u5230\u4ee5\u4e0b\u9519\u8bef\u6d88\u606f\uff1a 1 ssl.SSLError: [SSL: WRONG_VERSION_NUMBER] wrong version number (_ssl.c:1045) \u6240\u8c13\u7684\u673a\u4f1a TLS \uff08\u4f20\u8f93\u5c42\u5b89\u5168\u6027\uff09\u662f\u7eaf\u6587\u672c\u901a\u4fe1\u534f\u8bae\u7684\u6269\u5c55\u3002 \u5b83\u63d0\u4f9b\u4e86\u4e00\u79cd\u5c06\u7eaf\u6587\u672c\u8fde\u63a5\u5347\u7ea7\u4e3a\u52a0\u5bc6\uff08TLS \u6216 SSL\uff09\u8fde\u63a5\u7684\u65b9\u6cd5\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u5355\u72ec\u7684\u7aef\u53e3\u8fdb\u884c\u52a0\u5bc6\u901a\u4fe1\u3002 \u4e3a\u6b64\uff0c\u4e00\u4e9b\u534f\u8bae\u4f7f\u7528\u540d\u4e3a STARTTLS \u7684\u547d\u4ee4\u3002 \u5b83\u4e3b\u8981\u65e8\u5728\u4f5c\u4e3a\u88ab\u52a8\u76d1\u89c6\u7684\u5bf9\u7b56\u3002 mailtrap_secured.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #!/usr/bin/env python import smtplib from email.mime.text import MIMEText port = 465 sender = 'admin@example.com' receiver = 'info@example.com' msg = MIMEText('Secured test mail') msg['Subject'] = 'Test mail' msg['From'] = 'admin@example.com' msg['To'] = 'info@example.com' user = 'username' password = 'password' with smtplib.SMTP(\"smtp.mailtrap.io\", port) as server: server.starttls() # Secure the connection server.login(user, password) server.sendmail(sender, receiver, msg.as_string()) print(\"mail successfully sent\") \u8be5\u793a\u4f8b\u5c06\u7535\u5b50\u90ae\u4ef6\u53d1\u9001\u5230\u5177\u6709\u673a\u4f1a\u6027 TLS \u7684 Mailtrap \u5e10\u6237\u3002 1 server.starttls() # Secure the connection starttls() \u5c06\u4e0e SMTP \u670d\u52a1\u5668\u7684\u8fde\u63a5\u7f6e\u4e8e TLS \u6a21\u5f0f\u3002 \u901a\u8fc7 SSL \u53d1\u9001\u90ae\u4ef6 \u00b6 \u4ee5\u4e0b\u793a\u4f8b\u901a\u8fc7 SSL \u53d1\u9001\u7535\u5b50\u90ae\u4ef6\u3002 \u4f7f\u7528\u4e86 Web \u6258\u7ba1 SMTP \u670d\u52a1\u5668\uff08\u6765\u81ea websupport.sk\uff09\u3002 send_mail_ssl.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #!/usr/bin/env python import smtplib, ssl from email.mime.text import MIMEText sender = 'admin@example.com' receivers = ['info@example.com'] port = 465 user = 'admin@example.com' password = 'password' msg = MIMEText('This is test mail') msg['Subject'] = 'Test mail' msg['From'] = 'admin@example.com' msg['To'] = 'info@example.com' context = ssl.create_default_context() with smtplib.SMTP_SSL(\"smtp.websupport.sk\", port, context=context) as server: server.login(user, password) server.sendmail(sender, receivers, msg.as_string()) print('mail successfully sent') SMTP_SSL \u901a\u8fc7 SSL \u52a0\u5bc6\u7684\u5957\u63a5\u5b57\u8fde\u63a5\u3002 \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 Python smtplib \u6a21\u5757\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\u3002","title":"Python smtplib \u6559\u7a0b"},{"location":"pages/python/pytutorial/python-smtplib/#Python-smtplib-\u6559\u7a0b","text":"Python smtplib \u6559\u7a0b \u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528 smtplib \u6a21\u5757\u5728 Python \u4e2d\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\u3002 \u8981\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\uff0c\u6211\u4eec\u4f7f\u7528 Python \u5f00\u53d1\u670d\u52a1\u5668\uff0cMailtrap \u5728\u7ebf\u670d\u52a1\u548c\u5171\u4eab\u7684\u7f51\u7edc\u6258\u7ba1\u90ae\u4ef6\u670d\u52a1\u5668\u3002","title":"Python smtplib \u6559\u7a0b"},{"location":"pages/python/pytutorial/python-smtplib/#SMTP","text":"\u7b80\u5355\u90ae\u4ef6\u4f20\u8f93\u534f\u8bae\uff08SMTP\uff09\u662f\u7528\u4e8e\u7535\u5b50\u90ae\u4ef6\u4f20\u8f93\u7684\u901a\u4fe1\u534f\u8bae\u3002 Is \u662f\u4e00\u4e2a Internet \u6807\u51c6\uff0c\u8be5\u6807\u51c6\u4e8e 1982 \u5e74\u7531 RFC 821 \u9996\u6b21\u5b9a\u4e49\uff0c\u5e76\u4e8e 2008 \u5e74\u7531 RFC 5321 \u66f4\u65b0\u4e3a\u6269\u5c55 SMTP \u6dfb\u52a0\u3002 \u90ae\u4ef6\u670d\u52a1\u5668\u548c\u5176\u4ed6\u90ae\u4ef6\u4f20\u8f93\u4ee3\u7406\u4f7f\u7528 SMTP \u53d1\u9001\u548c\u63a5\u6536\u90ae\u4ef6\u3002","title":"SMTP"},{"location":"pages/python/pytutorial/python-smtplib/#smtplib\u6a21\u5757","text":"smtplib \u662f\u4e00\u4e2a Python \u5e93\uff0c\u7528\u4e8e\u4f7f\u7528\u7b80\u5355\u90ae\u4ef6\u4f20\u8f93\u534f\u8bae\uff08SMTP\uff09\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\u3002 smtplib \u662f\u5185\u7f6e\u6a21\u5757\uff1b \u6211\u4eec\u4e0d\u9700\u8981\u5b89\u88c5\u5b83\u3002 \u5b83\u62bd\u8c61\u4e86 SMTP \u7684\u6240\u6709\u590d\u6742\u6027\u3002","title":"smtplib\u6a21\u5757"},{"location":"pages/python/pytutorial/python-smtplib/#\u90ae\u4ef6\u670d\u52a1\u5668","text":"\u8981\u5b9e\u9645\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\uff0c\u6211\u4eec\u9700\u8981\u6709\u6743\u8bbf\u95ee\u90ae\u4ef6\u670d\u52a1\u5668\u3002 Python \u5e26\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u5f00\u53d1\u90ae\u4ef6\u670d\u52a1\u5668\u3002 Mailslurper \u662f\u6613\u4e8e\u4f7f\u7528\u7684\u672c\u5730\u5f00\u53d1\u670d\u52a1\u5668\u3002 \u5171\u4eab\u7684\u865a\u62df\u4e3b\u673a\u63d0\u4f9b\u5546\u4f7f\u6211\u4eec\u53ef\u4ee5\u8bbf\u95ee\u90ae\u4ef6\u670d\u52a1\u5668\u3002 \u6211\u4eec\u53ef\u4ee5\u5728\u5e10\u6237\u4e2d\u627e\u5230\u8be6\u7ec6\u4fe1\u606f\u3002 \u6ce8\u610f\uff1a \u907f\u514d\u4f7f\u7528 Gmail\uff0c\u56e0\u4e3a\u5b83\u662f\u9ad8\u5ea6\u5b89\u5168\u7684\u670d\u52a1\u5668\uff0c\u5e76\u4e14\u4f7f\u5176\u5de5\u4f5c\u975e\u5e38\u590d\u6742\u3002 \u5b9e\u9645\u4e0a\uff0cInternet \u4e0a\u7684\u5927\u591a\u6570\uff08\u5982\u679c\u4e0d\u662f\u5168\u90e8\uff09\u793a\u4f8b\u6f14\u793a\u4e86\u5982\u4f55\u901a\u8fc7 Gmail \u670d\u52a1\u5668\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\uff0c\u8fd9\u4e9b\u793a\u4f8b\u90fd\u65e0\u6cd5\u6b63\u5e38\u5de5\u4f5c\u3002 \u800c\u662f\u4f7f\u7528\u5f00\u53d1\u670d\u52a1\u5668\u6216\u5171\u4eab\u7684\u865a\u62df\u4e3b\u673a\u670d\u52a1\u5668\u3002 \u6700\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Web \u670d\u52a1\u3002 \u6709\u5f00\u53d1 Web \u670d\u52a1\uff08\u4f8b\u5982 MailTrap \u6216 MailSlurp\uff09\u6216\u751f\u4ea7\u670d\u52a1\uff08\u4f8b\u5982 Mailgun \u6216 Mandrill\uff09\u3002","title":"\u90ae\u4ef6\u670d\u52a1\u5668"},{"location":"pages/python/pytutorial/python-smtplib/#\u4f7f\u7528-Python-\u5185\u7f6e\u90ae\u4ef6\u670d\u52a1\u5668","text":"1 $ python -m smtpd -c DebuggingServer -n localhost:1025 \u6211\u4eec\u5728\u7aef\u53e3 1025 \u4e0a\u542f\u52a8 Python \u5185\u7f6e\u90ae\u4ef6\u670d\u52a1\u5668\u3002 built_in.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #!/usr/bin/env python import smtplib from email.mime.text import MIMEText sender = 'admin@example.com' receivers = ['info@example.com'] port = 1025 msg = MIMEText('This is test mail') msg['Subject'] = 'Test mail' msg['From'] = 'admin@example.com' msg['To'] = 'info@example.com' with smtplib.SMTP('localhost', port) as server: # server.login('username', 'password') server.sendmail(sender, receivers, msg.as_string()) print(\"Successfully sent email\") \u6211\u4eec\u5411\u672c\u5730\u5f00\u53d1\u90ae\u4ef6\u670d\u52a1\u5668\u53d1\u9001\u4e00\u6761\u7b80\u5355\u7684\u6587\u672c\u6d88\u606f\u3002 1 2 sender = 'admin@example.com' receivers = ['info@example.com'] \u6211\u4eec\u63d0\u4f9b\u53d1\u9001\u8005\u548c\u63a5\u6536\u8005\u3002 example.com \u662f\u4e13\u95e8\u7528\u4e8e\u6587\u6863\u4e2d\u7684\u8bf4\u660e\u6027\u793a\u4f8b\u7684\u57df\u540d\u3002 1 2 3 4 5 msg = MIMEText('This is test mail') msg['Subject'] = 'Test mail' msg['From'] = 'admin@example.com' msg['To'] = 'info@example.com' MimeText \u7528\u4e8e\u53d1\u9001\u6587\u672c\u7535\u5b50\u90ae\u4ef6\u3002 \u6211\u4eec\u63d0\u4f9b\u4e3b\u9898\uff0c\u4ece\u9009\u9879\u5230\u9009\u9879\u3002 1 2 with smtplib.SMTP('localhost', port) as server: ... SMTP \u7c7b\u7ba1\u7406\u4e0e SMTP \u670d\u52a1\u5668\u7684\u8fde\u63a5\u3002 1 # server.login('username', 'password') \u7531\u4e8e\u6211\u4eec\u4f7f\u7528\u672c\u5730\u5f00\u53d1\u670d\u52a1\u5668\uff0c\u56e0\u6b64\u4e0d\u5fc5\u767b\u5f55\u3002 1 server.sendmail(sender, receivers, msg.as_string()) \u7535\u5b50\u90ae\u4ef6\u5e26\u6709 sendmail() \u53d1\u9001\u3002 1 2 3 4 5 6 7 8 9 10 11 12 $ python -m smtpd -c DebuggingServer -n localhost:1025 ---------- MESSAGE FOLLOWS ---------- b'Content-Type: text/plain; charset=\"us-ascii\"' b'MIME-Version: 1.0' b'Content-Transfer-Encoding: 7bit' b'Subject: Test mail' b'From: admin@example.com' b'To: info@example.com' b'X-Peer: ::1' b'' b'This is test mail' ------------ END MESSAGE ------------ \u53d1\u9001\u7535\u5b50\u90ae\u4ef6\u540e\uff0c\u6211\u4eec\u4f1a\u6536\u5230\u6b64\u6d88\u606f\u3002","title":"\u4f7f\u7528 Python \u5185\u7f6e\u90ae\u4ef6\u670d\u52a1\u5668"},{"location":"pages/python/pytutorial/python-smtplib/#\u53d1\u9001\u90ae\u4ef6\u5230-Mailtrap","text":"Mailtrap \u63d0\u4f9b\u4e86\u4e00\u9879\u514d\u8d39\u8ba1\u5212\uff0c\u4f7f\u6211\u4eec\u6bcf\u4e2a\u6708\u53ef\u4ee5\u53d1\u9001 500 \u5c01\u90ae\u4ef6\u3002 \u8bbe\u7f6e Mailtrap \u975e\u5e38\u5bb9\u6613\u3002 \u5982\u679c\u6211\u4eec\u62e5\u6709 Github \u6216 Google \u5e10\u6237\uff0c\u5219\u53ea\u9700\u51e0\u79d2\u949f\u3002 \u8bbe\u7f6e\u9875\u9762\u4e2d\u63d0\u4f9b\u4e86\u5fc5\u8981\u7684\u51ed\u636e\u3002 \u53e6\u5916\uff0c\u8fd8\u6709\u4e00\u4e9b\u7b80\u77ed\u7684\u4ee3\u7801\u793a\u4f8b\u663e\u793a\u4e86\u5982\u4f55\u4f7f\u7528\u670d\u52a1\uff0c\u5305\u62ec smtplib \uff0c Django \u6216 Flask \u3002 mailtrap_simple.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #!/usr/bin/env python import smtplib from email.mime.text import MIMEText sender = 'admin@example.com' receiver = 'info@example.com' msg = MIMEText('This is test mail') msg['Subject'] = 'Test mail' msg['From'] = 'admin@example.com' msg['To'] = 'info@example.com' user = 'username' password = 'passoword' with smtplib.SMTP(\"smtp.mailtrap.io\", 2525) as server: server.login(user, password) server.sendmail(sender, receiver, msg.as_string()) print(\"mail successfully sent\") \u8be5\u793a\u4f8b\u5c06\u7b80\u5355\u90ae\u4ef6\u53d1\u9001\u5230 Mailtrap \u5e10\u6237\u3002 1 server.login(user, password) \u7528\u6237\u540d\u548c\u5bc6\u7801\u5728\u8bbe\u7f6e\u9875\u9762\u4e2d\u7ed9\u51fa\uff1b \u5b83\u4eec\u7531\u968f\u673a\u5b57\u7b26\u7ec4\u6210\uff0c\u4f8b\u5982 24h328df3e32\u3002","title":"\u53d1\u9001\u90ae\u4ef6\u5230 Mailtrap"},{"location":"pages/python/pytutorial/python-smtplib/#\u53d1\u9001\u5e26\u6709\u9644\u4ef6\u7684\u7535\u5b50\u90ae\u4ef6","text":"\u5f53\u6211\u4eec\u6709\u9644\u4ef6\u6216\u8981\u63d0\u4f9b\u76f8\u540c\u5185\u5bb9\u7684\u66ff\u4ee3\u7248\u672c\uff08\u4f8b\u5982\u7eaf\u6587\u672c/ HTML \u7248\u672c\uff09\u65f6\uff0c\u5c06\u4f7f\u7528 MIMEMultipart \u3002 words.txt 1 2 3 4 falcon blue sky cloud \u6211\u4eec\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u6587\u672c\u6587\u4ef6\u3002 mailtrap_attachment.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #!/usr/bin/python import smtplib from os.path import basename from email.mime.text import MIMEText from email.mime.multipart import MIMEMultipart from email.mime.application import MIMEApplication sender = 'admin@example.com' receiver = 'info@example.com' msg = MIMEMultipart() msg['Subject'] = 'Test mail with attachment' msg['From'] = 'admin@example.com' msg['To'] = 'info@example.com' filename = 'words.txt' with open(filename, 'r') as f: part = MIMEApplication(f.read(), Name=basename(filename)) part['Content-Disposition'] = 'attachment; filename=\"{}\"'.format(basename(filename)) msg.attach(part) user = 'username' password = 'password' with smtplib.SMTP(\"smtp.mailtrap.io\", 2525) as server: server.login(user, password) server.sendmail(sender, receiver, msg.as_string()) print(\"Successfully sent email\") \u8be5\u793a\u4f8b\u5411 Mailtrap \u53d1\u9001\u5e26\u6709\u6587\u672c\u6587\u4ef6\u9644\u4ef6\u7684\u7535\u5b50\u90ae\u4ef6\u3002 1 2 3 filename = 'words.txt' with open(filename, 'r') as f: part = MIMEApplication(f.read(), Name=basename(filename)) \u6211\u4eec\u9605\u8bfb\u4e86\u6587\u672c\u6587\u4ef6\u7684\u5185\u5bb9\u3002 1 2 part['Content-Disposition'] = 'attachment; filename=\"{}\"'.format(basename(filename)) msg.attach(part) \u9644\u4ef6\u901a\u8fc7 attach() \u65b9\u6cd5\u6dfb\u52a0\u3002","title":"\u53d1\u9001\u5e26\u6709\u9644\u4ef6\u7684\u7535\u5b50\u90ae\u4ef6"},{"location":"pages/python/pytutorial/python-smtplib/#\u4f7f\u7528-STARTTLS-\u7684\u90ae\u4ef6\u9677\u9631","text":"Mailtrap \u5728\u4efb\u4f55 SMTP \u7aef\u53e3\u4e0a\u90fd\u4e0d\u652f\u6301 SSL\uff0c\u5b83\u4ec5\u652f\u6301 STARTTLS\u3002 \u5982\u679c\u6211\u4eec\u5c1d\u8bd5\u4f7f\u7528 SSL\uff0c\u5219\u4f1a\u6536\u5230\u4ee5\u4e0b\u9519\u8bef\u6d88\u606f\uff1a 1 ssl.SSLError: [SSL: WRONG_VERSION_NUMBER] wrong version number (_ssl.c:1045) \u6240\u8c13\u7684\u673a\u4f1a TLS \uff08\u4f20\u8f93\u5c42\u5b89\u5168\u6027\uff09\u662f\u7eaf\u6587\u672c\u901a\u4fe1\u534f\u8bae\u7684\u6269\u5c55\u3002 \u5b83\u63d0\u4f9b\u4e86\u4e00\u79cd\u5c06\u7eaf\u6587\u672c\u8fde\u63a5\u5347\u7ea7\u4e3a\u52a0\u5bc6\uff08TLS \u6216 SSL\uff09\u8fde\u63a5\u7684\u65b9\u6cd5\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u5355\u72ec\u7684\u7aef\u53e3\u8fdb\u884c\u52a0\u5bc6\u901a\u4fe1\u3002 \u4e3a\u6b64\uff0c\u4e00\u4e9b\u534f\u8bae\u4f7f\u7528\u540d\u4e3a STARTTLS \u7684\u547d\u4ee4\u3002 \u5b83\u4e3b\u8981\u65e8\u5728\u4f5c\u4e3a\u88ab\u52a8\u76d1\u89c6\u7684\u5bf9\u7b56\u3002 mailtrap_secured.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #!/usr/bin/env python import smtplib from email.mime.text import MIMEText port = 465 sender = 'admin@example.com' receiver = 'info@example.com' msg = MIMEText('Secured test mail') msg['Subject'] = 'Test mail' msg['From'] = 'admin@example.com' msg['To'] = 'info@example.com' user = 'username' password = 'password' with smtplib.SMTP(\"smtp.mailtrap.io\", port) as server: server.starttls() # Secure the connection server.login(user, password) server.sendmail(sender, receiver, msg.as_string()) print(\"mail successfully sent\") \u8be5\u793a\u4f8b\u5c06\u7535\u5b50\u90ae\u4ef6\u53d1\u9001\u5230\u5177\u6709\u673a\u4f1a\u6027 TLS \u7684 Mailtrap \u5e10\u6237\u3002 1 server.starttls() # Secure the connection starttls() \u5c06\u4e0e SMTP \u670d\u52a1\u5668\u7684\u8fde\u63a5\u7f6e\u4e8e TLS \u6a21\u5f0f\u3002","title":"\u4f7f\u7528 STARTTLS \u7684\u90ae\u4ef6\u9677\u9631"},{"location":"pages/python/pytutorial/python-smtplib/#\u901a\u8fc7-SSL-\u53d1\u9001\u90ae\u4ef6","text":"\u4ee5\u4e0b\u793a\u4f8b\u901a\u8fc7 SSL \u53d1\u9001\u7535\u5b50\u90ae\u4ef6\u3002 \u4f7f\u7528\u4e86 Web \u6258\u7ba1 SMTP \u670d\u52a1\u5668\uff08\u6765\u81ea websupport.sk\uff09\u3002 send_mail_ssl.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #!/usr/bin/env python import smtplib, ssl from email.mime.text import MIMEText sender = 'admin@example.com' receivers = ['info@example.com'] port = 465 user = 'admin@example.com' password = 'password' msg = MIMEText('This is test mail') msg['Subject'] = 'Test mail' msg['From'] = 'admin@example.com' msg['To'] = 'info@example.com' context = ssl.create_default_context() with smtplib.SMTP_SSL(\"smtp.websupport.sk\", port, context=context) as server: server.login(user, password) server.sendmail(sender, receivers, msg.as_string()) print('mail successfully sent') SMTP_SSL \u901a\u8fc7 SSL \u52a0\u5bc6\u7684\u5957\u63a5\u5b57\u8fde\u63a5\u3002 \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 Python smtplib \u6a21\u5757\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\u3002","title":"\u901a\u8fc7 SSL \u53d1\u9001\u90ae\u4ef6"},{"location":"pages/python/pytutorial/python-socket/","text":"Python \u5957\u63a5\u5b57\u6559\u7a0b \u00b6 Python Socket \u6559\u7a0b \u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528\u5957\u63a5\u5b57\u8fdb\u884c Python \u7f51\u7edc\u7f16\u7a0b\u3002 \u5957\u63a5\u5b57\u7f16\u7a0b\u662f\u4f4e\u7ea7\u7684\uff0c\u672c\u6559\u7a0b\u7684\u76ee\u7684\u662f\u4ecb\u7ecd\u5305\u62ec\u8fd9\u4e9b\u4f4e\u7ea7\u8be6\u7ec6\u4fe1\u606f\u7684\u7f51\u7edc\u7f16\u7a0b\u3002 \u6709\u66f4\u9ad8\u7ea7\u7684 Python API\uff0c\u4f8b\u5982 Twisted\uff0c\u53ef\u80fd\u66f4\u9002\u5408\u3002 \u5728\u7f16\u7a0b\u4e2d\uff0c\u5957\u63a5\u5b57\u662f\u7f51\u7edc\u4e0a\u8fd0\u884c\u7684\u4e24\u4e2a\u7a0b\u5e8f\u4e4b\u95f4\u901a\u4fe1\u7684\u7aef\u70b9\u3002 \u5957\u63a5\u5b57\u7528\u4e8e\u5728\u5ba2\u6237\u7aef\u7a0b\u5e8f\u548c\u670d\u52a1\u5668\u7a0b\u5e8f\u4e4b\u95f4\u521b\u5efa\u8fde\u63a5\u3002 Python \u7684 socket \u6a21\u5757\u63d0\u4f9b\u4e86\u4e0e Berkeley \u5957\u63a5\u5b57 API \u7684\u63a5\u53e3\u3002 \u6ce8\u610f: \u5728\u7f51\u7edc\u4e2d\uff0c\u672f\u8bedsocket\u6709\u4e0d\u540c\u7684\u542b\u4e49\uff0c\u5b83\u7528\u4e8eIP\u5730\u5740\u548c\u7aef\u53e3\u53f7\u7684\u7ec4\u5408\u3002 \u7f51\u7edc\u534f\u8bae \u00b6 TCP / IP \u662f\u8bbe\u5907\u7528\u4e8e\u5728 Internet \u548c\u5927\u591a\u6570\u672c\u5730\u7f51\u7edc\u4e0a\u8fdb\u884c\u901a\u4fe1\u7684\u4e00\u7ec4\u534f\u8bae\u3002 TCP \u66f4\u53ef\u9760\uff0c\u5177\u6709\u5927\u91cf\u9519\u8bef\u68c0\u67e5\u5e76\u9700\u8981\u66f4\u591a\u8d44\u6e90\u3002 HTTP\uff0cSMTP \u6216 FTP \u7b49\u670d\u52a1\u4f7f\u7528\u5b83\u3002 UDP \u7684\u53ef\u9760\u6027\u8981\u5dee\u5f97\u591a\uff0c\u9519\u8bef\u68c0\u67e5\u7684\u80fd\u529b\u4e5f\u6709\u9650\uff0c\u6240\u9700\u8d44\u6e90\u4e5f\u66f4\u5c11\u3002 VoIP \u7b49\u670d\u52a1\u4f7f\u7528\u5b83\u3002 socket.SOCK_STREAM \u7528\u4e8e\u4e3a TCP \u521b\u5efa\u5957\u63a5\u5b57\uff0c\u800c socket.SOCK_DGRAM \u4e3a UDP \u521b\u5efa\u5957\u63a5\u5b57\u3002 \u5730\u5740\u65cf \u00b6 \u521b\u5efa\u5957\u63a5\u5b57\u65f6\uff0c\u5fc5\u987b\u6307\u5b9a\u5176\u5730\u5740\u65cf\u3002 \u7136\u540e\uff0c\u6211\u4eec\u53ea\u80fd\u5728\u5957\u63a5\u5b57\u4e2d\u4f7f\u7528\u8be5\u7c7b\u578b\u7684\u5730\u5740\u3002 AF_UNIX\uff0cAF_LOCAL-\u672c\u5730\u901a\u8baf AF_INET-IPv4 Internet \u534f\u8bae AF_INET6-IPv6 Internet \u534f\u8bae AF_IPX-IPX-Novell \u534f\u8bae AF_BLUETOOTH-\u65e0\u7ebf\u84dd\u7259\u534f\u8bae AF_PACKET-\u5e95\u5c42\u6570\u636e\u5305\u63a5\u53e3 \u5bf9\u4e8e AF_INET \u5730\u5740\u65cf\uff0c\u6307\u5b9a\u4e86\u4e00\u5bf9\uff08\u4e3b\u673a\uff0c\u7aef\u53e3\uff09\u3002 host \u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8868\u793a\u4e92\u8054\u7f51\u57df\u8868\u793a\u6cd5\u4e2d\u7684\u4e3b\u673a\u540d\uff08\u5982 example.com \uff09\u6216 IPv4 \u5730\u5740\uff08\u5982 93.184.216.34 \uff09\uff0c\u5e76\u4e14 port \u662f\u6574\u6570\u3002 Python \u83b7\u53d6 IP \u5730\u5740 \u00b6 \u4f7f\u7528 gethostbyname() \uff0c\u6211\u4eec\u83b7\u5f97\u4e3b\u673a\u7684 IP \u5730\u5740\u3002 get_ip.py 1 2 3 4 5 6 #!/usr/bin/env python import socket ip = socket.gethostbyname('example.com') print(ip) \u8be5\u793a\u4f8b\u6253\u5370 example.com \u7684 IP \u5730\u5740\u3002 1 2 $ ./get_ip.py 93.184.216.34 \u8fd9\u662f\u8f93\u51fa\u3002 Python UDP \u5957\u63a5\u5b57\u793a\u4f8b \u00b6 UDP \u662f\u4e00\u79cd\u901a\u4fe1\u534f\u8bae\uff0c\u5b83\u901a\u8fc7\u7f51\u7edc\u4f20\u8f93\u72ec\u7acb\u7684\u6570\u636e\u5305\uff0c\u4e0d\u4fdd\u8bc1\u5230\u8fbe\u4e14\u4e5f\u4e0d\u4fdd\u8bc1\u4f20\u9012\u987a\u5e8f\u3002 \u4f7f\u7528 UDP \u7684\u4e00\u9879\u670d\u52a1\u662f\u6bcf\u65e5\u62a5\u4ef7\uff08QOTD\uff09\u3002 qotd_client.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python import socket with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s: message = b'' addr = (\"djxmmx.net\", 17) s.sendto(message, addr) data, address = s.recvfrom(1024) print(data.decode()) \u8be5\u793a\u4f8b\u521b\u5efa\u4e00\u4e2a\u8fde\u63a5\u5230 QOTD \u670d\u52a1\u7684\u5ba2\u6237\u7aef\u7a0b\u5e8f\u3002 1 import socket \u6211\u4eec\u5bfc\u5165 socket \u6a21\u5757\u3002 1 with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s: \u521b\u5efa\u4e86\u7528\u4e8e IPv4 \u7684\u6570\u636e\u62a5\u5957\u63a5\u5b57\u3002 1 message = b'' \u6211\u4eec\u53d1\u9001\u7a7a\u6d88\u606f\uff1b QOTD \u670d\u52a1\u901a\u8fc7\u5411\u5957\u63a5\u5b57\u53d1\u9001\u4efb\u610f\u6570\u636e\u6765\u5de5\u4f5c\uff1b \u5b83\u53ea\u662f\u7528\u5f15\u53f7\u5f15\u8d77\u6765\u3002 \u4e3a\u4e86\u901a\u8fc7 TCP / UDP \u8fdb\u884c\u901a\u4fe1\uff0c\u6211\u4eec\u4f7f\u7528\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\u3002 1 addr = (\"djxmmx.net\", 17) \u6211\u4eec\u63d0\u4f9b\u5730\u5740\u548c\u7aef\u53e3\u3002 1 s.sendto(message, addr) \u6211\u4eec\u4f7f\u7528 sendto() \u65b9\u6cd5\u53d1\u9001\u6570\u636e\u3002 1 data, address = s.recvfrom(1024) UDP \u5957\u63a5\u5b57\u4f7f\u7528 recvfrom() \u63a5\u6536\u6570\u636e\u3002 \u5b83\u7684\u53c2\u6570\u662f\u7f13\u51b2\u533a\u5927\u5c0f\u3002 \u8fd4\u56de\u503c\u662f\u4e00\u5bf9\uff08\u6570\u636e\uff0c\u5730\u5740\uff09\uff0c\u5176\u4e2d\u6570\u636e\u662f\u4ee3\u8868\u63a5\u6536\u5230\u7684\u6570\u636e\u7684\u5b57\u8282\u5b57\u7b26\u4e32\uff0c\u800c\u5730\u5740\u662f\u53d1\u9001\u6570\u636e\u7684\u5957\u63a5\u5b57\u7684\u5730\u5740\u3002 1 print(data.decode()) \u6211\u4eec\u5c06\u89e3\u7801\u540e\u7684\u6570\u636e\u6253\u5370\u5230\u7ec8\u7aef\u3002 1 2 3 4 $ ./qotd_client.py \"Oh the nerves, the nerves; the mysteries of this machine called man! Oh the little that unhinges it, poor creatures that we are!\" Charles Dickens (1812-70) Python TCP \u5957\u63a5\u5b57\u793a\u4f8b \u00b6 \u662f\u63d0\u4f9b\u5f53\u524d\u65f6\u95f4\u7684\u670d\u52a1\u5668\u3002 \u5ba2\u6237\u7aef\u65e0\u9700\u4efb\u4f55\u547d\u4ee4\u5373\u53ef\u76f4\u63a5\u8fde\u63a5\u5230\u670d\u52a1\u5668\uff0c\u670d\u52a1\u5668\u4ee5\u5f53\u524d\u65f6\u95f4\u4f5c\u4e3a\u54cd\u5e94\u3002 \u6ce8\u610f: \u65f6\u95f4\u670d\u52a1\u5668\u6765\u6765\u53bb\u53bb\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u80fd\u9700\u8981\u627e\u5230\u4e00\u4e2a\u5de5\u4f5c\u7684\u670d\u52a1\u5668 https://www.ntppool.org/en/ . time_client.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python import socket with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: host = \"time.nist.gov\" port = 13 s.connect((host, port)) s.sendall(b'') print(str(s.recv(4096), 'utf-8')) \u8be5\u793a\u4f8b\u901a\u8fc7\u8fde\u63a5\u5230\u65f6\u95f4\u670d\u52a1\u5668\u7684 TCP \u5957\u63a5\u5b57\u6765\u786e\u5b9a\u5f53\u524d\u65f6\u95f4\u3002 1 with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: \u521b\u5efa\u7528\u4e8e IPv4 \u7684 TCP \u5957\u63a5\u5b57\u3002 1 2 host = \"time.nist.gov\" port = 13 \u8fd9\u662f\u5de5\u4f5c\u65f6\u95f4\u670d\u52a1\u5668\u7684\u4e3b\u673a\u540d\u548c\u7aef\u53e3\u53f7\u3002 1 s.connect((host, port)) \u6211\u4eec\u4f7f\u7528 connect() \u8fde\u63a5\u5230\u8fdc\u7a0b\u5957\u63a5\u5b57\u3002 1 s.sendall(b'') sendall() \u65b9\u6cd5\u5c06\u6570\u636e\u53d1\u9001\u5230\u5957\u63a5\u5b57\u3002 \u5957\u63a5\u5b57\u5fc5\u987b\u8fde\u63a5\u5230\u8fdc\u7a0b\u5957\u63a5\u5b57\u3002 \u5b83\u7ee7\u7eed\u4ece\u5b57\u8282\u53d1\u9001\u6570\u636e\uff0c\u76f4\u5230\u53d1\u9001\u5b8c\u6240\u6709\u6570\u636e\u6216\u53d1\u751f\u9519\u8bef\u4e3a\u6b62\u3002 1 print(str(s.recv(4096), 'utf-8')) \u6211\u4eec\u6253\u5370\u63a5\u6536\u5230\u7684\u6570\u636e\u3002 recv() \u65b9\u6cd5\u4ece\u5957\u63a5\u5b57\u63a5\u6536\u6700\u591a buffersize \u4e2a\u5b57\u8282\u3002 \u5f53\u6ca1\u6709\u6570\u636e\u53ef\u7528\u65f6\uff0c\u5b83\u5c06\u963b\u585e\uff0c\u76f4\u5230\u81f3\u5c11\u4e00\u4e2a\u5b57\u8282\u53ef\u7528\u6216\u76f4\u5230\u8fdc\u7aef\u5173\u95ed\u4e3a\u6b62\u3002 \u5f53\u8fdc\u7aef\u5173\u95ed\u5e76\u8bfb\u53d6\u6240\u6709\u6570\u636e\u65f6\uff0c\u5b83\u5c06\u8fd4\u56de\u4e00\u4e2a\u7a7a\u5b57\u8282\u5b57\u7b26\u4e32\u3002 Python \u5957\u63a5\u5b57 HEAD \u8bf7\u6c42 \u00b6 HEAD \u8bf7\u6c42\u662f\u6ca1\u6709\u6d88\u606f\u6b63\u6587\u7684 GET \u8bf7\u6c42\u3002 \u8bf7\u6c42/\u54cd\u5e94\u7684\u6807\u5934\u5305\u542b\u5143\u6570\u636e\uff0c\u4f8b\u5982 HTTP \u534f\u8bae\u7248\u672c\u6216\u5185\u5bb9\u7c7b\u578b\u3002 head_request.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python import socket with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: s.connect((\"webcode.me\" , 80)) s.sendall(b\"HEAD / HTTP/1.1\\r\\nHost: webcode.me\\r\\nAccept: text/html\\r\\n\\r\\n\") print(str(s.recv(1024), 'utf-8')) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5411 webcode.me \u53d1\u9001 HEAD \u8bf7\u6c42\u3002 1 s.sendall(b\"HEAD / HTTP/1.1\\r\\nHost: webcode.me\\r\\nAccept: text/html\\r\\n\\r\\n\") \u7528 HEAD \u547d\u4ee4\u53d1\u51fa\u5934\u8bf7\u6c42\uff0c\u540e\u8ddf\u8d44\u6e90 URL \u548c HTTP \u534f\u8bae\u7248\u672c\u3002 \u8bf7\u6ce8\u610f\uff0c \\r\\n \u662f\u901a\u4fe1\u8fc7\u7a0b\u4e2d\u5fc5\u4e0d\u53ef\u5c11\u7684\u90e8\u5206\u3002 \u5728 RFC 7231 \u6587\u6863\u4e2d\u63cf\u8ff0\u4e86\u8be6\u7ec6\u4fe1\u606f\u3002 1 2 3 4 5 6 7 8 9 10 $ head_request.py HTTP/1.1 200 OK Server: nginx/1.6.2 Date: Sun, 08 Sep 2019 11:23:25 GMT Content-Type: text/html Content-Length: 348 Last-Modified: Sat, 20 Jul 2019 11:49:25 GMT Connection: keep-alive ETag: \"5d32ffc5-15c\" Accept-Ranges: bytes Python \u5957\u63a5\u5b57 GET \u8bf7\u6c42 \u00b6 HTTP GET \u65b9\u6cd5\u8bf7\u6c42\u6307\u5b9a\u8d44\u6e90\u7684\u8868\u793a\u5f62\u5f0f\u3002 \u4f7f\u7528 GET \u7684\u8bf7\u6c42\u5e94\u4ec5\u68c0\u7d22\u6570\u636e\u3002 get_request.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env python import socket with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: s.connect((\"webcode.me\" , 80)) s.sendall(b\"GET / HTTP/1.1\\r\\nHost: webcode.me\\r\\nAccept: text/html\\r\\nConnection: close\\r\\n\\r\\n\") while True: data = s.recv(1024) if not data: break print(data.decode()) \u8be5\u793a\u4f8b\u4f7f\u7528 GET \u8bf7\u6c42\u8bfb\u53d6 webcode.me \u7684\u4e3b\u9875\u3002 1 s.sendall(b\"GET / HTTP/1.1\\r\\nHost: webcode.me\\r\\nAccept: text/html\\r\\nConnection: close\\r\\n\\r\\n\") \u5bf9\u4e8e HTTP 1.1 \u534f\u8bae\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8fde\u63a5\u53ef\u4ee5\u662f\u6301\u4e45\u7684\u3002 \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u53d1\u9001 Connection: close \u6807\u5934\u7684\u539f\u56e0\u3002 1 2 3 4 5 6 7 8 while True: data = s.recv(1024) if not data: break print(data.decode()) \u6211\u4eec\u4f7f\u7528 while \u5faa\u73af\u6765\u5904\u7406\u63a5\u6536\u5230\u7684\u6570\u636e\u3002 \u5982\u679c\u6ca1\u6709\u9519\u8bef\u53d1\u751f\uff0c\u5219 recv() \u8fd4\u56de\u63a5\u6536\u5230\u7684\u5b57\u8282\u3002 \u5982\u679c\u8fde\u63a5\u5df2\u6b63\u5e38\u5173\u95ed\uff0c\u5219\u8fd4\u56de\u503c\u4e3a\u7a7a\u5b57\u8282\u5b57\u7b26\u4e32\u3002 recv() \u662f\u4e00\u79cd\u963b\u6b62\u65b9\u6cd5\uff0c\u76f4\u5230\u5b8c\u6210\u5b83\uff0c\u6216\u8005\u8fbe\u5230\u8d85\u65f6\u6216\u53d1\u751f\u53e6\u4e00\u4e2a\u5f02\u5e38\u4e3a\u6b62\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 $ ./get_request.py HTTP/1.1 200 OK Server: nginx/1.6.2 Date: Sun, 08 Sep 2019 11:39:34 GMT Content-Type: text/html Content-Length: 348 Last-Modified: Sat, 20 Jul 2019 11:49:25 GMT Connection: keep-alive ETag: \"5d32ffc5-15c\" Access-Control-Allow-Origin: * Accept-Ranges: bytes <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>My html page</title> </head> <body> <p> Today is a beautiful day. We go swimming and fishing. </p> <p> Hello there. How are you? </p> </body> </html> \u56de\u663e\u5ba2\u6237\u7aef\u670d\u52a1\u5668\u793a\u4f8b \u00b6 \u56de\u663e\u670d\u52a1\u5668\u5c06\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u6d88\u606f\u53d1\u9001\u56de\u53bb\u3002 \u8fd9\u662f\u7528\u4e8e\u6d4b\u8bd5\u548c\u5b66\u4e60\u7684\u7ecf\u5178\u793a\u4f8b\u3002 echo_server.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #!/usr/bin/env python import socket import time with socket.socket() as s: host = 'localhost' port = 8001 s.bind((host, port)) print(f'socket binded to {port}') s.listen() con, addr = s.accept() with con: while True: data = con.recv(1024) if not data: break con.sendall(data) \u56de\u663e\u670d\u52a1\u5668\u5c06\u5ba2\u6237\u7aef\u6d88\u606f\u53d1\u9001\u56de\u5ba2\u6237\u7aef\u3002 1 2 host = 'localhost' port = 8001 \u670d\u52a1\u5668\u5728\u7aef\u53e3 8001 \u4e0a\u7684 localhost \u4e0a\u8fd0\u884c\u3002 1 s.bind((host, port)) bind() \u65b9\u6cd5\u5efa\u7acb\u901a\u4fe1\u7aef\u70b9\u3002 \u5b83\u5c06\u5957\u63a5\u5b57\u7ed1\u5b9a\u5230\u6307\u5b9a\u7684\u5730\u5740\u3002 \u5957\u63a5\u5b57\u5fc5\u987b\u5c1a\u672a\u7ed1\u5b9a\u3002 \uff08\u5730\u5740\u7684\u683c\u5f0f\u53d6\u51b3\u4e8e\u5730\u5740\u7cfb\u5217\u3002\uff09 1 s.listen() listen() \u65b9\u6cd5\u4f7f\u670d\u52a1\u5668\u53ef\u4ee5\u63a5\u53d7\u8fde\u63a5\u3002 \u670d\u52a1\u5668\u73b0\u5728\u53ef\u4ee5\u4fa6\u542c\u5957\u63a5\u5b57\u4e0a\u7684\u8fde\u63a5\u3002 listen() \u5177\u6709 backlog \u53c2\u6570\u3002 \u5b83\u6307\u5b9a\u7cfb\u7edf\u5728\u62d2\u7edd\u65b0\u8fde\u63a5\u4e4b\u524d\u5141\u8bb8\u7684\u4e0d\u53ef\u63a5\u53d7\u7684\u8fde\u63a5\u6570\u3002 \u81ea Python 3.5 \u8d77\uff0c\u6b64\u53c2\u6570\u662f\u53ef\u9009\u7684\u3002 \u5982\u679c\u672a\u6307\u5b9a\uff0c\u5219\u9009\u62e9\u9ed8\u8ba4\u7684\u79ef\u538b\u503c\u3002 1 con, addr = s.accept() \u4f7f\u7528 accept() \uff0c\u670d\u52a1\u5668\u63a5\u53d7\u8fde\u63a5\u3002 \u5b83\u963b\u6b62\u5e76\u7b49\u5f85\u4f20\u5165\u200b\u200b\u8fde\u63a5\u3002 \u5957\u63a5\u5b57\u5fc5\u987b\u7ed1\u5b9a\u5230\u4e00\u4e2a\u5730\u5740\u5e76\u76d1\u542c\u8fde\u63a5\u3002 \u8fd4\u56de\u503c\u662f\u4e00\u5bf9\uff08con\uff0caddr\uff09\uff0c\u5176\u4e2d con \u662f\u53ef\u7528\u4e8e\u5728\u8fde\u63a5\u4e0a\u53d1\u9001\u548c\u63a5\u6536\u6570\u636e\u7684\u65b0\u5957\u63a5\u5b57\u5bf9\u8c61\uff0c\u800c addr \u662f\u7ed1\u5b9a\u5230\u8fde\u63a5\u53e6\u4e00\u7aef\u4e0a\u7684\u5957\u63a5\u5b57\u7684\u5730\u5740\u3002 \u8bf7\u6ce8\u610f\uff0c accept() \u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u5957\u63a5\u5b57\uff0c\u7528\u4e8e\u4e0e\u5ba2\u6237\u7aef\u8fdb\u884c\u901a\u4fe1\uff0c\u8be5\u5957\u63a5\u5b57\u4e0e\u4fa6\u542c\u5957\u63a5\u5b57\u4e0d\u540c\u3002 echo_client.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python import socket with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: host = \"localhost\" port = 8001 s.connect((host, port)) s.sendall(b'hello there') print(str(s.recv(4096), 'utf-8')) \u5ba2\u6237\u7aef\u5c06\u6d88\u606f\u53d1\u9001\u5230\u56de\u663e\u670d\u52a1\u5668\u3002 \u5f02\u6b65\u670d\u52a1\u5668\u793a\u4f8b \u00b6 \u4e3a\u4e86\u63d0\u9ad8\u670d\u52a1\u5668\u7684\u6027\u80fd\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 asyncio \u6a21\u5757\u3002 async_server.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/env python # from threading import current_thread import asyncio async def handle_client(reader, writer): data = (await reader.read(1024)) writer.write(data) writer.close() loop = asyncio.get_event_loop() loop.create_task(asyncio.start_server(handle_client, 'localhost', 8001)) loop.run_forever() \u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u6d4b\u8bd5\u963b\u585e\u670d\u52a1\u5668\u548c\u975e\u963b\u585e\u670d\u52a1\u5668\u7684\u6027\u80fd\u3002 1 $ ab -c 50 -n 1000 http://localhost:8001/ \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Apache \u57fa\u51c6\u6d4b\u8bd5\u5de5\u5177\u6d4b\u8bd5\u6027\u80fd\u3002 \u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u547d\u4ee4\u53d1\u9001 1000 \u4e2a\u8bf7\u6c42\uff0c\u4e00\u6b21\u53d1\u9001 50 \u4e2a\u3002 \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u5c55\u793a\u4e86\u5982\u4f55\u5728 Python \u4e2d\u4f7f\u7528\u5957\u63a5\u5b57\u521b\u5efa\u7b80\u5355\u7684\u7f51\u7edc\u7a0b\u5e8f\u3002","title":"Python \u5957\u63a5\u5b57\u6559\u7a0b"},{"location":"pages/python/pytutorial/python-socket/#Python-\u5957\u63a5\u5b57\u6559\u7a0b","text":"Python Socket \u6559\u7a0b \u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528\u5957\u63a5\u5b57\u8fdb\u884c Python \u7f51\u7edc\u7f16\u7a0b\u3002 \u5957\u63a5\u5b57\u7f16\u7a0b\u662f\u4f4e\u7ea7\u7684\uff0c\u672c\u6559\u7a0b\u7684\u76ee\u7684\u662f\u4ecb\u7ecd\u5305\u62ec\u8fd9\u4e9b\u4f4e\u7ea7\u8be6\u7ec6\u4fe1\u606f\u7684\u7f51\u7edc\u7f16\u7a0b\u3002 \u6709\u66f4\u9ad8\u7ea7\u7684 Python API\uff0c\u4f8b\u5982 Twisted\uff0c\u53ef\u80fd\u66f4\u9002\u5408\u3002 \u5728\u7f16\u7a0b\u4e2d\uff0c\u5957\u63a5\u5b57\u662f\u7f51\u7edc\u4e0a\u8fd0\u884c\u7684\u4e24\u4e2a\u7a0b\u5e8f\u4e4b\u95f4\u901a\u4fe1\u7684\u7aef\u70b9\u3002 \u5957\u63a5\u5b57\u7528\u4e8e\u5728\u5ba2\u6237\u7aef\u7a0b\u5e8f\u548c\u670d\u52a1\u5668\u7a0b\u5e8f\u4e4b\u95f4\u521b\u5efa\u8fde\u63a5\u3002 Python \u7684 socket \u6a21\u5757\u63d0\u4f9b\u4e86\u4e0e Berkeley \u5957\u63a5\u5b57 API \u7684\u63a5\u53e3\u3002 \u6ce8\u610f: \u5728\u7f51\u7edc\u4e2d\uff0c\u672f\u8bedsocket\u6709\u4e0d\u540c\u7684\u542b\u4e49\uff0c\u5b83\u7528\u4e8eIP\u5730\u5740\u548c\u7aef\u53e3\u53f7\u7684\u7ec4\u5408\u3002","title":"Python \u5957\u63a5\u5b57\u6559\u7a0b"},{"location":"pages/python/pytutorial/python-socket/#\u7f51\u7edc\u534f\u8bae","text":"TCP / IP \u662f\u8bbe\u5907\u7528\u4e8e\u5728 Internet \u548c\u5927\u591a\u6570\u672c\u5730\u7f51\u7edc\u4e0a\u8fdb\u884c\u901a\u4fe1\u7684\u4e00\u7ec4\u534f\u8bae\u3002 TCP \u66f4\u53ef\u9760\uff0c\u5177\u6709\u5927\u91cf\u9519\u8bef\u68c0\u67e5\u5e76\u9700\u8981\u66f4\u591a\u8d44\u6e90\u3002 HTTP\uff0cSMTP \u6216 FTP \u7b49\u670d\u52a1\u4f7f\u7528\u5b83\u3002 UDP \u7684\u53ef\u9760\u6027\u8981\u5dee\u5f97\u591a\uff0c\u9519\u8bef\u68c0\u67e5\u7684\u80fd\u529b\u4e5f\u6709\u9650\uff0c\u6240\u9700\u8d44\u6e90\u4e5f\u66f4\u5c11\u3002 VoIP \u7b49\u670d\u52a1\u4f7f\u7528\u5b83\u3002 socket.SOCK_STREAM \u7528\u4e8e\u4e3a TCP \u521b\u5efa\u5957\u63a5\u5b57\uff0c\u800c socket.SOCK_DGRAM \u4e3a UDP \u521b\u5efa\u5957\u63a5\u5b57\u3002","title":"\u7f51\u7edc\u534f\u8bae"},{"location":"pages/python/pytutorial/python-socket/#\u5730\u5740\u65cf","text":"\u521b\u5efa\u5957\u63a5\u5b57\u65f6\uff0c\u5fc5\u987b\u6307\u5b9a\u5176\u5730\u5740\u65cf\u3002 \u7136\u540e\uff0c\u6211\u4eec\u53ea\u80fd\u5728\u5957\u63a5\u5b57\u4e2d\u4f7f\u7528\u8be5\u7c7b\u578b\u7684\u5730\u5740\u3002 AF_UNIX\uff0cAF_LOCAL-\u672c\u5730\u901a\u8baf AF_INET-IPv4 Internet \u534f\u8bae AF_INET6-IPv6 Internet \u534f\u8bae AF_IPX-IPX-Novell \u534f\u8bae AF_BLUETOOTH-\u65e0\u7ebf\u84dd\u7259\u534f\u8bae AF_PACKET-\u5e95\u5c42\u6570\u636e\u5305\u63a5\u53e3 \u5bf9\u4e8e AF_INET \u5730\u5740\u65cf\uff0c\u6307\u5b9a\u4e86\u4e00\u5bf9\uff08\u4e3b\u673a\uff0c\u7aef\u53e3\uff09\u3002 host \u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8868\u793a\u4e92\u8054\u7f51\u57df\u8868\u793a\u6cd5\u4e2d\u7684\u4e3b\u673a\u540d\uff08\u5982 example.com \uff09\u6216 IPv4 \u5730\u5740\uff08\u5982 93.184.216.34 \uff09\uff0c\u5e76\u4e14 port \u662f\u6574\u6570\u3002","title":"\u5730\u5740\u65cf"},{"location":"pages/python/pytutorial/python-socket/#Python-\u83b7\u53d6-IP-\u5730\u5740","text":"\u4f7f\u7528 gethostbyname() \uff0c\u6211\u4eec\u83b7\u5f97\u4e3b\u673a\u7684 IP \u5730\u5740\u3002 get_ip.py 1 2 3 4 5 6 #!/usr/bin/env python import socket ip = socket.gethostbyname('example.com') print(ip) \u8be5\u793a\u4f8b\u6253\u5370 example.com \u7684 IP \u5730\u5740\u3002 1 2 $ ./get_ip.py 93.184.216.34 \u8fd9\u662f\u8f93\u51fa\u3002","title":"Python \u83b7\u53d6 IP \u5730\u5740"},{"location":"pages/python/pytutorial/python-socket/#Python-UDP-\u5957\u63a5\u5b57\u793a\u4f8b","text":"UDP \u662f\u4e00\u79cd\u901a\u4fe1\u534f\u8bae\uff0c\u5b83\u901a\u8fc7\u7f51\u7edc\u4f20\u8f93\u72ec\u7acb\u7684\u6570\u636e\u5305\uff0c\u4e0d\u4fdd\u8bc1\u5230\u8fbe\u4e14\u4e5f\u4e0d\u4fdd\u8bc1\u4f20\u9012\u987a\u5e8f\u3002 \u4f7f\u7528 UDP \u7684\u4e00\u9879\u670d\u52a1\u662f\u6bcf\u65e5\u62a5\u4ef7\uff08QOTD\uff09\u3002 qotd_client.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python import socket with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s: message = b'' addr = (\"djxmmx.net\", 17) s.sendto(message, addr) data, address = s.recvfrom(1024) print(data.decode()) \u8be5\u793a\u4f8b\u521b\u5efa\u4e00\u4e2a\u8fde\u63a5\u5230 QOTD \u670d\u52a1\u7684\u5ba2\u6237\u7aef\u7a0b\u5e8f\u3002 1 import socket \u6211\u4eec\u5bfc\u5165 socket \u6a21\u5757\u3002 1 with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s: \u521b\u5efa\u4e86\u7528\u4e8e IPv4 \u7684\u6570\u636e\u62a5\u5957\u63a5\u5b57\u3002 1 message = b'' \u6211\u4eec\u53d1\u9001\u7a7a\u6d88\u606f\uff1b QOTD \u670d\u52a1\u901a\u8fc7\u5411\u5957\u63a5\u5b57\u53d1\u9001\u4efb\u610f\u6570\u636e\u6765\u5de5\u4f5c\uff1b \u5b83\u53ea\u662f\u7528\u5f15\u53f7\u5f15\u8d77\u6765\u3002 \u4e3a\u4e86\u901a\u8fc7 TCP / UDP \u8fdb\u884c\u901a\u4fe1\uff0c\u6211\u4eec\u4f7f\u7528\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\u3002 1 addr = (\"djxmmx.net\", 17) \u6211\u4eec\u63d0\u4f9b\u5730\u5740\u548c\u7aef\u53e3\u3002 1 s.sendto(message, addr) \u6211\u4eec\u4f7f\u7528 sendto() \u65b9\u6cd5\u53d1\u9001\u6570\u636e\u3002 1 data, address = s.recvfrom(1024) UDP \u5957\u63a5\u5b57\u4f7f\u7528 recvfrom() \u63a5\u6536\u6570\u636e\u3002 \u5b83\u7684\u53c2\u6570\u662f\u7f13\u51b2\u533a\u5927\u5c0f\u3002 \u8fd4\u56de\u503c\u662f\u4e00\u5bf9\uff08\u6570\u636e\uff0c\u5730\u5740\uff09\uff0c\u5176\u4e2d\u6570\u636e\u662f\u4ee3\u8868\u63a5\u6536\u5230\u7684\u6570\u636e\u7684\u5b57\u8282\u5b57\u7b26\u4e32\uff0c\u800c\u5730\u5740\u662f\u53d1\u9001\u6570\u636e\u7684\u5957\u63a5\u5b57\u7684\u5730\u5740\u3002 1 print(data.decode()) \u6211\u4eec\u5c06\u89e3\u7801\u540e\u7684\u6570\u636e\u6253\u5370\u5230\u7ec8\u7aef\u3002 1 2 3 4 $ ./qotd_client.py \"Oh the nerves, the nerves; the mysteries of this machine called man! Oh the little that unhinges it, poor creatures that we are!\" Charles Dickens (1812-70)","title":"Python UDP \u5957\u63a5\u5b57\u793a\u4f8b"},{"location":"pages/python/pytutorial/python-socket/#Python-TCP-\u5957\u63a5\u5b57\u793a\u4f8b","text":"\u662f\u63d0\u4f9b\u5f53\u524d\u65f6\u95f4\u7684\u670d\u52a1\u5668\u3002 \u5ba2\u6237\u7aef\u65e0\u9700\u4efb\u4f55\u547d\u4ee4\u5373\u53ef\u76f4\u63a5\u8fde\u63a5\u5230\u670d\u52a1\u5668\uff0c\u670d\u52a1\u5668\u4ee5\u5f53\u524d\u65f6\u95f4\u4f5c\u4e3a\u54cd\u5e94\u3002 \u6ce8\u610f: \u65f6\u95f4\u670d\u52a1\u5668\u6765\u6765\u53bb\u53bb\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u80fd\u9700\u8981\u627e\u5230\u4e00\u4e2a\u5de5\u4f5c\u7684\u670d\u52a1\u5668 https://www.ntppool.org/en/ . time_client.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python import socket with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: host = \"time.nist.gov\" port = 13 s.connect((host, port)) s.sendall(b'') print(str(s.recv(4096), 'utf-8')) \u8be5\u793a\u4f8b\u901a\u8fc7\u8fde\u63a5\u5230\u65f6\u95f4\u670d\u52a1\u5668\u7684 TCP \u5957\u63a5\u5b57\u6765\u786e\u5b9a\u5f53\u524d\u65f6\u95f4\u3002 1 with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: \u521b\u5efa\u7528\u4e8e IPv4 \u7684 TCP \u5957\u63a5\u5b57\u3002 1 2 host = \"time.nist.gov\" port = 13 \u8fd9\u662f\u5de5\u4f5c\u65f6\u95f4\u670d\u52a1\u5668\u7684\u4e3b\u673a\u540d\u548c\u7aef\u53e3\u53f7\u3002 1 s.connect((host, port)) \u6211\u4eec\u4f7f\u7528 connect() \u8fde\u63a5\u5230\u8fdc\u7a0b\u5957\u63a5\u5b57\u3002 1 s.sendall(b'') sendall() \u65b9\u6cd5\u5c06\u6570\u636e\u53d1\u9001\u5230\u5957\u63a5\u5b57\u3002 \u5957\u63a5\u5b57\u5fc5\u987b\u8fde\u63a5\u5230\u8fdc\u7a0b\u5957\u63a5\u5b57\u3002 \u5b83\u7ee7\u7eed\u4ece\u5b57\u8282\u53d1\u9001\u6570\u636e\uff0c\u76f4\u5230\u53d1\u9001\u5b8c\u6240\u6709\u6570\u636e\u6216\u53d1\u751f\u9519\u8bef\u4e3a\u6b62\u3002 1 print(str(s.recv(4096), 'utf-8')) \u6211\u4eec\u6253\u5370\u63a5\u6536\u5230\u7684\u6570\u636e\u3002 recv() \u65b9\u6cd5\u4ece\u5957\u63a5\u5b57\u63a5\u6536\u6700\u591a buffersize \u4e2a\u5b57\u8282\u3002 \u5f53\u6ca1\u6709\u6570\u636e\u53ef\u7528\u65f6\uff0c\u5b83\u5c06\u963b\u585e\uff0c\u76f4\u5230\u81f3\u5c11\u4e00\u4e2a\u5b57\u8282\u53ef\u7528\u6216\u76f4\u5230\u8fdc\u7aef\u5173\u95ed\u4e3a\u6b62\u3002 \u5f53\u8fdc\u7aef\u5173\u95ed\u5e76\u8bfb\u53d6\u6240\u6709\u6570\u636e\u65f6\uff0c\u5b83\u5c06\u8fd4\u56de\u4e00\u4e2a\u7a7a\u5b57\u8282\u5b57\u7b26\u4e32\u3002","title":"Python TCP \u5957\u63a5\u5b57\u793a\u4f8b"},{"location":"pages/python/pytutorial/python-socket/#Python-\u5957\u63a5\u5b57-HEAD-\u8bf7\u6c42","text":"HEAD \u8bf7\u6c42\u662f\u6ca1\u6709\u6d88\u606f\u6b63\u6587\u7684 GET \u8bf7\u6c42\u3002 \u8bf7\u6c42/\u54cd\u5e94\u7684\u6807\u5934\u5305\u542b\u5143\u6570\u636e\uff0c\u4f8b\u5982 HTTP \u534f\u8bae\u7248\u672c\u6216\u5185\u5bb9\u7c7b\u578b\u3002 head_request.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python import socket with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: s.connect((\"webcode.me\" , 80)) s.sendall(b\"HEAD / HTTP/1.1\\r\\nHost: webcode.me\\r\\nAccept: text/html\\r\\n\\r\\n\") print(str(s.recv(1024), 'utf-8')) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5411 webcode.me \u53d1\u9001 HEAD \u8bf7\u6c42\u3002 1 s.sendall(b\"HEAD / HTTP/1.1\\r\\nHost: webcode.me\\r\\nAccept: text/html\\r\\n\\r\\n\") \u7528 HEAD \u547d\u4ee4\u53d1\u51fa\u5934\u8bf7\u6c42\uff0c\u540e\u8ddf\u8d44\u6e90 URL \u548c HTTP \u534f\u8bae\u7248\u672c\u3002 \u8bf7\u6ce8\u610f\uff0c \\r\\n \u662f\u901a\u4fe1\u8fc7\u7a0b\u4e2d\u5fc5\u4e0d\u53ef\u5c11\u7684\u90e8\u5206\u3002 \u5728 RFC 7231 \u6587\u6863\u4e2d\u63cf\u8ff0\u4e86\u8be6\u7ec6\u4fe1\u606f\u3002 1 2 3 4 5 6 7 8 9 10 $ head_request.py HTTP/1.1 200 OK Server: nginx/1.6.2 Date: Sun, 08 Sep 2019 11:23:25 GMT Content-Type: text/html Content-Length: 348 Last-Modified: Sat, 20 Jul 2019 11:49:25 GMT Connection: keep-alive ETag: \"5d32ffc5-15c\" Accept-Ranges: bytes","title":"Python \u5957\u63a5\u5b57 HEAD \u8bf7\u6c42"},{"location":"pages/python/pytutorial/python-socket/#Python-\u5957\u63a5\u5b57-GET-\u8bf7\u6c42","text":"HTTP GET \u65b9\u6cd5\u8bf7\u6c42\u6307\u5b9a\u8d44\u6e90\u7684\u8868\u793a\u5f62\u5f0f\u3002 \u4f7f\u7528 GET \u7684\u8bf7\u6c42\u5e94\u4ec5\u68c0\u7d22\u6570\u636e\u3002 get_request.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env python import socket with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: s.connect((\"webcode.me\" , 80)) s.sendall(b\"GET / HTTP/1.1\\r\\nHost: webcode.me\\r\\nAccept: text/html\\r\\nConnection: close\\r\\n\\r\\n\") while True: data = s.recv(1024) if not data: break print(data.decode()) \u8be5\u793a\u4f8b\u4f7f\u7528 GET \u8bf7\u6c42\u8bfb\u53d6 webcode.me \u7684\u4e3b\u9875\u3002 1 s.sendall(b\"GET / HTTP/1.1\\r\\nHost: webcode.me\\r\\nAccept: text/html\\r\\nConnection: close\\r\\n\\r\\n\") \u5bf9\u4e8e HTTP 1.1 \u534f\u8bae\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8fde\u63a5\u53ef\u4ee5\u662f\u6301\u4e45\u7684\u3002 \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u53d1\u9001 Connection: close \u6807\u5934\u7684\u539f\u56e0\u3002 1 2 3 4 5 6 7 8 while True: data = s.recv(1024) if not data: break print(data.decode()) \u6211\u4eec\u4f7f\u7528 while \u5faa\u73af\u6765\u5904\u7406\u63a5\u6536\u5230\u7684\u6570\u636e\u3002 \u5982\u679c\u6ca1\u6709\u9519\u8bef\u53d1\u751f\uff0c\u5219 recv() \u8fd4\u56de\u63a5\u6536\u5230\u7684\u5b57\u8282\u3002 \u5982\u679c\u8fde\u63a5\u5df2\u6b63\u5e38\u5173\u95ed\uff0c\u5219\u8fd4\u56de\u503c\u4e3a\u7a7a\u5b57\u8282\u5b57\u7b26\u4e32\u3002 recv() \u662f\u4e00\u79cd\u963b\u6b62\u65b9\u6cd5\uff0c\u76f4\u5230\u5b8c\u6210\u5b83\uff0c\u6216\u8005\u8fbe\u5230\u8d85\u65f6\u6216\u53d1\u751f\u53e6\u4e00\u4e2a\u5f02\u5e38\u4e3a\u6b62\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 $ ./get_request.py HTTP/1.1 200 OK Server: nginx/1.6.2 Date: Sun, 08 Sep 2019 11:39:34 GMT Content-Type: text/html Content-Length: 348 Last-Modified: Sat, 20 Jul 2019 11:49:25 GMT Connection: keep-alive ETag: \"5d32ffc5-15c\" Access-Control-Allow-Origin: * Accept-Ranges: bytes <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>My html page</title> </head> <body> <p> Today is a beautiful day. We go swimming and fishing. </p> <p> Hello there. How are you? </p> </body> </html>","title":"Python \u5957\u63a5\u5b57 GET \u8bf7\u6c42"},{"location":"pages/python/pytutorial/python-socket/#\u56de\u663e\u5ba2\u6237\u7aef\u670d\u52a1\u5668\u793a\u4f8b","text":"\u56de\u663e\u670d\u52a1\u5668\u5c06\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u6d88\u606f\u53d1\u9001\u56de\u53bb\u3002 \u8fd9\u662f\u7528\u4e8e\u6d4b\u8bd5\u548c\u5b66\u4e60\u7684\u7ecf\u5178\u793a\u4f8b\u3002 echo_server.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #!/usr/bin/env python import socket import time with socket.socket() as s: host = 'localhost' port = 8001 s.bind((host, port)) print(f'socket binded to {port}') s.listen() con, addr = s.accept() with con: while True: data = con.recv(1024) if not data: break con.sendall(data) \u56de\u663e\u670d\u52a1\u5668\u5c06\u5ba2\u6237\u7aef\u6d88\u606f\u53d1\u9001\u56de\u5ba2\u6237\u7aef\u3002 1 2 host = 'localhost' port = 8001 \u670d\u52a1\u5668\u5728\u7aef\u53e3 8001 \u4e0a\u7684 localhost \u4e0a\u8fd0\u884c\u3002 1 s.bind((host, port)) bind() \u65b9\u6cd5\u5efa\u7acb\u901a\u4fe1\u7aef\u70b9\u3002 \u5b83\u5c06\u5957\u63a5\u5b57\u7ed1\u5b9a\u5230\u6307\u5b9a\u7684\u5730\u5740\u3002 \u5957\u63a5\u5b57\u5fc5\u987b\u5c1a\u672a\u7ed1\u5b9a\u3002 \uff08\u5730\u5740\u7684\u683c\u5f0f\u53d6\u51b3\u4e8e\u5730\u5740\u7cfb\u5217\u3002\uff09 1 s.listen() listen() \u65b9\u6cd5\u4f7f\u670d\u52a1\u5668\u53ef\u4ee5\u63a5\u53d7\u8fde\u63a5\u3002 \u670d\u52a1\u5668\u73b0\u5728\u53ef\u4ee5\u4fa6\u542c\u5957\u63a5\u5b57\u4e0a\u7684\u8fde\u63a5\u3002 listen() \u5177\u6709 backlog \u53c2\u6570\u3002 \u5b83\u6307\u5b9a\u7cfb\u7edf\u5728\u62d2\u7edd\u65b0\u8fde\u63a5\u4e4b\u524d\u5141\u8bb8\u7684\u4e0d\u53ef\u63a5\u53d7\u7684\u8fde\u63a5\u6570\u3002 \u81ea Python 3.5 \u8d77\uff0c\u6b64\u53c2\u6570\u662f\u53ef\u9009\u7684\u3002 \u5982\u679c\u672a\u6307\u5b9a\uff0c\u5219\u9009\u62e9\u9ed8\u8ba4\u7684\u79ef\u538b\u503c\u3002 1 con, addr = s.accept() \u4f7f\u7528 accept() \uff0c\u670d\u52a1\u5668\u63a5\u53d7\u8fde\u63a5\u3002 \u5b83\u963b\u6b62\u5e76\u7b49\u5f85\u4f20\u5165\u200b\u200b\u8fde\u63a5\u3002 \u5957\u63a5\u5b57\u5fc5\u987b\u7ed1\u5b9a\u5230\u4e00\u4e2a\u5730\u5740\u5e76\u76d1\u542c\u8fde\u63a5\u3002 \u8fd4\u56de\u503c\u662f\u4e00\u5bf9\uff08con\uff0caddr\uff09\uff0c\u5176\u4e2d con \u662f\u53ef\u7528\u4e8e\u5728\u8fde\u63a5\u4e0a\u53d1\u9001\u548c\u63a5\u6536\u6570\u636e\u7684\u65b0\u5957\u63a5\u5b57\u5bf9\u8c61\uff0c\u800c addr \u662f\u7ed1\u5b9a\u5230\u8fde\u63a5\u53e6\u4e00\u7aef\u4e0a\u7684\u5957\u63a5\u5b57\u7684\u5730\u5740\u3002 \u8bf7\u6ce8\u610f\uff0c accept() \u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u5957\u63a5\u5b57\uff0c\u7528\u4e8e\u4e0e\u5ba2\u6237\u7aef\u8fdb\u884c\u901a\u4fe1\uff0c\u8be5\u5957\u63a5\u5b57\u4e0e\u4fa6\u542c\u5957\u63a5\u5b57\u4e0d\u540c\u3002 echo_client.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python import socket with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: host = \"localhost\" port = 8001 s.connect((host, port)) s.sendall(b'hello there') print(str(s.recv(4096), 'utf-8')) \u5ba2\u6237\u7aef\u5c06\u6d88\u606f\u53d1\u9001\u5230\u56de\u663e\u670d\u52a1\u5668\u3002","title":"\u56de\u663e\u5ba2\u6237\u7aef\u670d\u52a1\u5668\u793a\u4f8b"},{"location":"pages/python/pytutorial/python-socket/#\u5f02\u6b65\u670d\u52a1\u5668\u793a\u4f8b","text":"\u4e3a\u4e86\u63d0\u9ad8\u670d\u52a1\u5668\u7684\u6027\u80fd\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 asyncio \u6a21\u5757\u3002 async_server.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/env python # from threading import current_thread import asyncio async def handle_client(reader, writer): data = (await reader.read(1024)) writer.write(data) writer.close() loop = asyncio.get_event_loop() loop.create_task(asyncio.start_server(handle_client, 'localhost', 8001)) loop.run_forever() \u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u6d4b\u8bd5\u963b\u585e\u670d\u52a1\u5668\u548c\u975e\u963b\u585e\u670d\u52a1\u5668\u7684\u6027\u80fd\u3002 1 $ ab -c 50 -n 1000 http://localhost:8001/ \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Apache \u57fa\u51c6\u6d4b\u8bd5\u5de5\u5177\u6d4b\u8bd5\u6027\u80fd\u3002 \u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u547d\u4ee4\u53d1\u9001 1000 \u4e2a\u8bf7\u6c42\uff0c\u4e00\u6b21\u53d1\u9001 50 \u4e2a\u3002 \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u5c55\u793a\u4e86\u5982\u4f55\u5728 Python \u4e2d\u4f7f\u7528\u5957\u63a5\u5b57\u521b\u5efa\u7b80\u5355\u7684\u7f51\u7edc\u7a0b\u5e8f\u3002","title":"\u5f02\u6b65\u670d\u52a1\u5668\u793a\u4f8b"},{"location":"pages/python/pytutorial/python-sqlite/","text":"Python SQLite \u6559\u7a0b \u00b6 \u8fd9\u662f\u7528\u4e8e SQLite \u6570\u636e\u5e93\u7684 Python \u7f16\u7a0b\u6559\u7a0b\uff0c\u5b83\u6db5\u76d6\u4e86\u4f7f\u7528 Python \u8bed\u8a00\u8fdb\u884c SQLite \u7f16\u7a0b\u7684\u57fa\u7840\u3002 \u8981\u4f7f\u7528\u672c\u6559\u7a0b\uff0c\u6211\u4eec\u5fc5\u987b\u5728\u7cfb\u7edf\u4e0a\u5b89\u88c5 Python \u8bed\u8a00\uff0cSQLite \u6570\u636e\u5e93\uff0c pysqlite \u8bed\u8a00\u7ed1\u5b9a\u548c sqlite3 \u547d\u4ee4\u884c\u5de5\u5177\u3002 \u4e3a\u4e86\u4f7f\u7528 SQLite \u6570\u636e\u5e93\uff0c\u6211\u4eec\u53ef\u4ee5\u5b89\u88c5 sqlite3 \u6216 SQLite \u6d4f\u89c8\u5668 GUI\u3002 1 2 3 4 5 6 7 8 $ python Python 3.7.0 (v3.7.0:1bf9cc5093, Jun 27 2018, 04:59:51) [MSC v.1914 64 bit (AMD64)] on win32 Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> import sqlite3 >>> sqlite3.version '2.6.0' >>> sqlite3.sqlite_version '3.21.0' \u5728\u5916\u58f3\u7a0b\u5e8f\u4e2d\uff0c\u6211\u4eec\u542f\u52a8 Python \u4ea4\u4e92\u5f0f\u89e3\u91ca\u5668\u3002 \u6211\u4eec\u53ef\u4ee5\u770b\u5230 Python \u7248\u672c\u3002 \u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\u662f Python 3.7.0\u3002 sqlite.version \u662f pysqlite \uff082.6.0\uff09\u7684\u7248\u672c\uff0c\u5b83\u662f Python \u8bed\u8a00\u4e0e SQLite \u6570\u636e\u5e93\u7684\u7ed1\u5b9a\u3002 sqlite3.sqlite_version \u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86 SQLite \u6570\u636e\u5e93\u5e93\u7684\u7248\u672c\u3002 \u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u7248\u672c\u662f 3.21.0\u3002 SQLite \u00b6 SQLite \u662f\u5d4c\u5165\u5f0f\u5173\u7cfb\u6570\u636e\u5e93\u5f15\u64ce\u3002 \u8be5\u6587\u6863\u79f0\u5176\u4e3a\u81ea\u5305\u542b\uff0c\u65e0\u670d\u52a1\u5668\uff0c\u96f6\u914d\u7f6e\u548c\u4e8b\u52a1\u578b SQL \u6570\u636e\u5e93\u5f15\u64ce\u3002 \u5982\u4eca\uff0c\u5b83\u5728\u5168\u7403\u4f7f\u7528\u7740\u6570\u4ebf\u518c\uff0c\u975e\u5e38\u53d7\u6b22\u8fce\u3002 \u51e0\u79cd\u7f16\u7a0b\u8bed\u8a00\u90fd\u5185\u7f6e\u4e86\u5bf9 SQLite \u7684\u652f\u6301\uff0c\u5305\u62ec Python \u548c PHP\u3002 \u521b\u5efa SQLite \u6570\u636e\u5e93 \u00b6 \u73b0\u5728\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 sqlite3 \u547d\u4ee4\u884c\u5de5\u5177\u521b\u5efa\u4e00\u4e2a\u65b0\u6570\u636e\u5e93\u3002 1 2 3 4 $ sqlite3 ydb.db SQLite version 3.27.2 2019-02-25 16:06:06 Enter \".help\" for usage hints. sqlite> \u6211\u4eec\u4e3a sqlite3 tool \u63d0\u4f9b\u4e86\u4e00\u4e2a\u53c2\u6570\uff1b ydb.db \u662f\u6570\u636e\u5e93\u540d\u79f0\u3002 \u8fd9\u662f\u6211\u4eec\u78c1\u76d8\u4e0a\u7684\u6587\u4ef6\u3002 \u5982\u679c\u5b58\u5728\uff0c\u5219\u5c06\u5176\u6253\u5f00\u3002 \u5982\u679c\u4e0d\u662f\uff0c\u5219\u521b\u5efa\u5b83\u3002 1 2 3 4 sqlite> .tables sqlite> .exit $ ls ydb.db .tables \u547d\u4ee4\u63d0\u4f9b ydb.db \u6570\u636e\u5e93\u4e2d\u7684\u8868\u7684\u5217\u8868\u3002 \u5f53\u524d\u6ca1\u6709\u8868\u683c\u3002 .exit \u547d\u4ee4\u7ec8\u6b62 sqlite3 \u547d\u4ee4\u884c\u5de5\u5177\u7684\u4ea4\u4e92\u5f0f\u4f1a\u8bdd\u3002 ls Unix \u547d\u4ee4\u663e\u793a\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u7684\u5185\u5bb9\u3002 \u6211\u4eec\u53ef\u4ee5\u770b\u5230 ydb.db \u6587\u4ef6\u3002 \u6240\u6709\u6570\u636e\u5c06\u5b58\u50a8\u5728\u8be5\u5355\u4e2a\u6587\u4ef6\u4e2d\u3002 Python SQLite \u7248\u672c\u793a\u4f8b \u00b6 \u5728\u7b2c\u4e00\u4e2a\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u83b7\u5f97 SQLite \u6570\u636e\u5e93\u7684\u7248\u672c\u3002 version.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #!/usr/bin/env python3 # -*- coding: utf-8 -*- import sqlite3 as sqlite import sys con = None try: con = sqlite.connect('ydb.db') cur = con.cursor() cur.execute('SELECT SQLITE_VERSION()') data = cur.fetchone()[0] print(f\"SQLite version: {data}\") except sqlite.Error as e: print(f\"Error {e.args[0]}\") sys.exit(1) finally: if con: con.close() \u5728\u4e0a\u9762\u7684 Python \u811a\u672c\u4e2d\uff0c\u6211\u4eec\u8fde\u63a5\u5230\u5148\u524d\u521b\u5efa\u7684 ydb.db \u6570\u636e\u5e93\u3002 \u6211\u4eec\u6267\u884c\u4e00\u6761 SQL \u8bed\u53e5\uff0c\u8be5\u8bed\u53e5\u8fd4\u56de SQLite \u6570\u636e\u5e93\u7684\u7248\u672c\u3002 1 import sqlite3 as sqlite \u6211\u4eec\u5bfc\u5165 sqlite3 \u5e76\u4e3a\u5176\u547d\u540d\u3002 1 con = None \u6211\u4eec\u5c06 con \u53d8\u91cf\u521d\u59cb\u5316\u4e3a None \u3002 \u5982\u679c\u65e0\u6cd5\u521b\u5efa\u4e0e\u6570\u636e\u5e93\u7684\u8fde\u63a5\uff08\u4f8b\u5982\u78c1\u76d8\u5df2\u6ee1\uff09\uff0c\u5219\u4e0d\u4f1a\u5b9a\u4e49\u8fde\u63a5\u53d8\u91cf\u3002 \u8fd9\u5c06\u5bfc\u81f4 finally \u5b50\u53e5\u4e2d\u7684\u9519\u8bef\u3002 1 con = sqlite.connect('ydb.db') \u6211\u4eec\u8fde\u63a5\u5230 ydb.db \u6570\u636e\u5e93\u3002 connect() \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u8fde\u63a5\u5bf9\u8c61\u3002 1 2 cur = con.cursor() cur.execute('SELECT SQLITE_VERSION()') \u4ece\u8fde\u63a5\u4e2d\uff0c\u6211\u4eec\u5f97\u5230\u5149\u6807\u5bf9\u8c61\u3002 \u6e38\u6807\u7528\u4e8e\u904d\u5386\u7ed3\u679c\u96c6\u4e2d\u7684\u8bb0\u5f55\u3002 \u6211\u4eec\u8c03\u7528\u6e38\u6807\u7684 execute() \u65b9\u6cd5\u5e76\u6267\u884c SQL \u8bed\u53e5\u3002 1 data = cur.fetchone()[0] \u6211\u4eec\u83b7\u53d6\u6570\u636e\u3002 \u7531\u4e8e\u53ea\u68c0\u7d22\u4e00\u6761\u8bb0\u5f55\uff0c\u56e0\u6b64\u6211\u4eec\u79f0\u4e3a fetchone() \u65b9\u6cd5\u3002 1 print(f\"SQLite version: {data}\") \u6211\u4eec\u5c06\u68c0\u7d22\u5230\u7684\u6570\u636e\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 2 3 4 except sqlite.Error as e: print(f\"Error {e.args[0]}\") sys.exit(1) \u5982\u679c\u53d1\u751f\u5f02\u5e38\uff0c\u6211\u4eec\u5c06\u8f93\u51fa\u4e00\u6761\u9519\u8bef\u6d88\u606f\uff0c\u5e76\u4ee5\u9519\u8bef\u4ee3\u7801 1 \u9000\u51fa\u811a\u672c\u3002 1 2 3 4 finally: if con: con.close() \u5728\u6700\u540e\u4e00\u6b65\uff0c\u6211\u4eec\u91ca\u653e\u8d44\u6e90\u3002 \u5728\u7b2c\u4e8c\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u518d\u6b21\u83b7\u5f97 SQLite \u6570\u636e\u5e93\u7684\u7248\u672c\u3002 \u8fd9\u6b21\u6211\u4eec\u5c06\u4f7f\u7528 with \u5173\u952e\u5b57\u3002 version2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python3 # -*- coding: utf-8 -*- import sqlite3 as sqlite con = sqlite.connect('ydb.db') with con: cur = con.cursor() cur.execute('SELECT SQLITE_VERSION()') data = cur.fetchone()[0] print(f\"SQLite version: {data}\") \u8be5\u811a\u672c\u8fd4\u56de SQLite \u6570\u636e\u5e93\u7684\u5f53\u524d\u7248\u672c\u3002 \u901a\u8fc7\u4f7f\u7528 with \u5173\u952e\u5b57\u3002 \u4ee3\u7801\u66f4\u7d27\u51d1\u3002 1 with con: \u4f7f\u7528 with \u5173\u952e\u5b57\uff0cPython \u89e3\u91ca\u5668\u4f1a\u81ea\u52a8\u91ca\u653e\u8d44\u6e90\u3002 \u5b83\u8fd8\u63d0\u4f9b\u9519\u8bef\u5904\u7406\u3002 1 2 $ ./version.py SQLite version: 3.21.0 Python SQLite execute \u00b6 \u6211\u4eec\u521b\u5efa\u4e00\u4e2a cars \u8868\u5e76\u5728\u5176\u4e2d\u63d2\u5165\u51e0\u884c\u3002 \u6211\u4eec\u4f7f\u7528 execute() \u3002 create_table.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #!/usr/bin/env python3 # -*- coding: utf-8 -*- import sqlite3 as sqlite con = sqlite.connect('ydb.db') with con: cur = con.cursor() cur.execute(\"CREATE TABLE cars(id INT, name TEXT, price INT)\") cur.execute(\"INSERT INTO cars VALUES(1,'Audi',52642)\") cur.execute(\"INSERT INTO cars VALUES(2,'Mercedes',57127)\") cur.execute(\"INSERT INTO cars VALUES(3,'Skoda',9000)\") cur.execute(\"INSERT INTO cars VALUES(4,'Volvo',29000)\") cur.execute(\"INSERT INTO cars VALUES(5,'Bentley',350000)\") cur.execute(\"INSERT INTO cars VALUES(6,'Citroen',21000)\") cur.execute(\"INSERT INTO cars VALUES(7,'Hummer',41400)\") cur.execute(\"INSERT INTO cars VALUES(8,'Volkswagen',21600)\") \u4e0a\u9762\u7684\u811a\u672c\u521b\u5efa\u4e00\u4e2a cars \u8868\uff0c\u5e76\u5c06 8 \u884c\u63d2\u5165\u5230\u8be5\u8868\u4e2d\u3002 1 cur.execute(\"CREATE TABLE cars(id INT, name TEXT, price INT)\") \u8be5 SQL \u8bed\u53e5\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 cars \u8868\u3002 \u8be5\u8868\u6709\u4e09\u5217\u3002 1 2 cur.execute(\"INSERT INTO cars VALUES(1,'Audi',52642)\") cur.execute(\"INSERT INTO cars VALUES(2,'Mercedes',57127)\") \u8fd9\u4e24\u884c\u5c06\u4e24\u8f86\u8f66\u63d2\u5165\u684c\u5b50\u3002 \u4f7f\u7528 with \u5173\u952e\u5b57\uff0c\u66f4\u6539\u5c06\u81ea\u52a8\u63d0\u4ea4\u3002 \u5426\u5219\uff0c\u6211\u4eec\u5c06\u4e0d\u5f97\u4e0d\u624b\u52a8\u63d0\u4ea4\u5b83\u4eec\u3002 1 2 sqlite> .mode column sqlite> .headers on \u6211\u4eec\u4f7f\u7528 sqlite3 \u5de5\u5177\u9a8c\u8bc1\u5199\u5165\u7684\u6570\u636e\u3002 \u9996\u5148\uff0c\u6211\u4eec\u4fee\u6539\u6570\u636e\u5728\u63a7\u5236\u53f0\u4e2d\u7684\u663e\u793a\u65b9\u5f0f\u3002 \u6211\u4eec\u4f7f\u7528\u5217\u6a21\u5f0f\u5e76\u6253\u5f00\u6807\u9898\u3002 1 2 3 4 5 6 7 8 9 10 11 sqlite> select * from cars; id name price ---------- ---------- ---------- 1 Audi 52642 2 Mercedes 57127 3 Skoda 9000 4 Volvo 29000 5 Bentley 350000 6 Citroen 21000 7 Hummer 41400 8 Volkswagen 21600 \u8fd9\u662f\u6211\u4eec\u5df2\u5199\u5165 cars \u8868\u7684\u6570\u636e\u3002 Python SQLite executemany \u00b6 \u6211\u4eec\u5c06\u521b\u5efa\u76f8\u540c\u7684\u8868\u3002 \u8fd9\u6b21\u4f7f\u7528\u4fbf\u6377\u7684 executemany() \u65b9\u6cd5\u3002 create_table2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #!/usr/bin/env python3 # -*- coding: utf-8 -*- import sqlite3 as sqlite cars = ( (1, 'Audi', 52642), (2, 'Mercedes', 57127), (3, 'Skoda', 9000), (4, 'Volvo', 29000), (5, 'Bentley', 350000), (6, 'Hummer', 41400), (7, 'Volkswagen', 21600) ) con = sqlite.connect('ydb.db') with con: cur = con.cursor() cur.execute(\"DROP TABLE IF EXISTS cars\") cur.execute(\"CREATE TABLE cars(id INT, name TEXT, price INT)\") cur.executemany(\"INSERT INTO cars VALUES(?, ?, ?)\", cars) \u7a0b\u5e8f\u5c06\u5220\u9664 cars \u8868\uff08\u5982\u679c\u5b58\u5728\uff09\u5e76\u91cd\u65b0\u521b\u5efa\u5b83\u3002 1 2 cur.execute(\"DROP TABLE IF EXISTS cars\") cur.execute(\"CREATE TABLE cars(id INT, name TEXT, price INT)\") \u5982\u679c\u5b58\u5728\uff0c\u5219\u7b2c\u4e00\u4e2a SQL \u8bed\u53e5\u5c06\u5220\u9664 cars \u8868\u3002 \u7b2c\u4e8c\u6761 SQL \u8bed\u53e5\u521b\u5efa cars \u8868\u3002 1 cur.executemany(\"INSERT INTO cars VALUES(?, ?, ?)\", cars) \u6211\u4eec\u4f7f\u7528\u4fbf\u6377\u7684 executemany() \u65b9\u6cd5\u5c06 8 \u884c\u63d2\u5165\u5230\u8868\u4e2d\u3002 \u6b64\u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u53c2\u6570\u5316\u7684 SQL \u8bed\u53e5\u3002 \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u6570\u636e\uff0c\u4ee5\u5143\u7ec4\u7684\u5143\u7ec4\u7684\u5f62\u5f0f\u3002 Python SQLite executescript \u00b6 \u6211\u4eec\u63d0\u4f9b\u4e86\u53e6\u4e00\u79cd\u4f7f\u7528 executescript() \u521b\u5efa cars \u8868\u7684\u65b9\u6cd5\u3002 \u6211\u4eec\u624b\u52a8\u63d0\u4ea4\u66f4\u6539\u5e76\u63d0\u4f9b\u6211\u4eec\u81ea\u5df1\u7684\u9519\u8bef\u5904\u7406\u3002 create_table3.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 #!/usr/bin/env python3 # -*- coding: utf-8 -*- import sqlite3 as sqlite import sys con = None try: con = sqlite.connect('ydb.db') cur = con.cursor() cur.executescript(\"\"\" DROP TABLE IF EXISTS cars; CREATE TABLE cars(id INT, name TEXT, price INT); INSERT INTO cars VALUES(1,'Audi',52642); INSERT INTO cars VALUES(2,'Mercedes',57127); INSERT INTO cars VALUES(3,'Skoda',9000); INSERT INTO cars VALUES(4,'Volvo',29000); INSERT INTO cars VALUES(5,'Bentley',350000); INSERT INTO cars VALUES(6,'Citroen',21000); INSERT INTO cars VALUES(7,'Hummer',41400); INSERT INTO cars VALUES(8,'Volkswagen',21600); \"\"\") con.commit() except sqlite.Error as e: if con: con.rollback() print(f\"Error {e.args[0]}\") sys.exit(1) finally: if con: con.close() \u5728\u4e0a\u9762\u7684\u811a\u672c\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 executescript() \u65b9\u6cd5\uff08\u91cd\u65b0\uff09\u521b\u5efa cars \u8868\u3002 1 2 3 4 5 6 cur.executescript(\"\"\" DROP TABLE IF EXISTS cars; CREATE TABLE cars(id INT, name TEXT, price INT); INSERT INTO cars VALUES(1,'Audi',52642); INSERT INTO cars VALUES(2,'Mercedes',57127); ... executescript() \u65b9\u6cd5\u5141\u8bb8\u6211\u4eec\u4e00\u6b65\u6267\u884c\u6574\u4e2a SQL \u4ee3\u7801\u3002 1 con.commit() \u5982\u679c\u6ca1\u6709 with \u5173\u952e\u5b57\uff0c\u5219\u5fc5\u987b\u4f7f\u7528 commit() \u65b9\u6cd5\u6765\u63d0\u4ea4\u66f4\u6539\u3002 1 2 3 4 5 6 7 except sqlite.Error as e: if con: con.rollback() print(f\"Error {e.args[0]}\") sys.exit(1) \u53d1\u751f\u9519\u8bef\u65f6\uff0c\u6240\u505a\u7684\u66f4\u6539\u5c06\u56de\u6eda\uff0c\u5e76\u5728\u7ec8\u7aef\u4e0a\u663e\u793a\u4e00\u6761\u9519\u8bef\u6d88\u606f\u3002 Python SQLite lastrowid \u00b6 \u6709\u65f6\uff0c\u6211\u4eec\u9700\u8981\u786e\u5b9a\u6700\u540e\u63d2\u5165\u7684\u884c\u7684 ID\u3002 \u5728 Python SQLite \u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u5149\u6807\u5bf9\u8c61\u7684 lastrowid \u5c5e\u6027\u3002 lastrowid.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/usr/bin/env python3 # -*- coding: utf-8 -*- import sqlite3 as sqlite con = sqlite.connect(':memory:') with con: cur = con.cursor() cur.execute(\"CREATE TABLE friends(id INTEGER PRIMARY KEY, name TEXT);\") cur.execute(\"INSERT INTO friends(name) VALUES ('Tom');\") cur.execute(\"INSERT INTO friends(name) VALUES ('Rebecca');\") cur.execute(\"INSERT INTO friends(name) VALUES ('Jim');\") cur.execute(\"INSERT INTO friends(name) VALUES ('Robert');\") last_row_id = cur.lastrowid print(f\"The last Id of the inserted row is {last_row_id}\") \u6211\u4eec\u5728\u5185\u5b58\u4e2d\u521b\u5efa\u4e00\u4e2a friends \u8868\u3002 ID \u4f1a\u81ea\u52a8\u9012\u589e\u3002 1 cur.execute(\"CREATE TABLE friends(id INTEGER PRIMARY KEY, name TEXT);\") \u5728 SQLite \u4e2d\uff0c INTEGER PRIMARY KEY \u5217\u81ea\u52a8\u589e\u52a0\u3002 \u8fd8\u6709\u4e00\u4e2a AUTOINCREMENT \u5173\u952e\u5b57\u3002 \u5728 INTEGER PRIMARY KEY AUTOINCREMENT \u4e2d\u4f7f\u7528\u65f6\uff0c\u4f1a\u4f7f\u7528\u7a0d\u5fae\u4e0d\u540c\u7684 ID \u521b\u5efa\u7b97\u6cd5\u3002 1 2 3 4 cur.execute(\"INSERT INTO friends(name) VALUES ('Tom');\") cur.execute(\"INSERT INTO friends(name) VALUES ('Rebecca');\") cur.execute(\"INSERT INTO friends(name) VALUES ('Jim');\") cur.execute(\"INSERT INTO friends(name) VALUES ('Robert');\") \u4f7f\u7528\u81ea\u52a8\u589e\u91cf\u65f6\uff0c\u6211\u4eec\u5fc5\u987b\u660e\u786e\u58f0\u660e\u5217\u540d\uff0c\u800c\u5ffd\u7565\u81ea\u52a8\u589e\u91cf\u7684\u5217\u540d\u3002 \u8fd9\u56db\u4e2a\u8bed\u53e5\u5728 friends \u8868\u4e2d\u63d2\u5165\u56db\u884c\u3002 1 last_row_id = cur.lastrowid \u4f7f\u7528 lastrowid \u83b7\u5f97\u6700\u540e\u63d2\u5165\u7684\u884c ID\u3002 1 2 $ ./lastrowid.py The last Id of the inserted row is 4 Python SQLite \u4f7f\u7528 fetchall \u68c0\u7d22\u6570\u636e \u00b6 fetchall() \u65b9\u6cd5\u83b7\u53d6\u67e5\u8be2\u7ed3\u679c\u96c6\u7684\u6240\u6709\uff08\u6216\u6240\u6709\u5269\u4f59\uff09\u884c\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\u5217\u8868\u3002 fetch_all.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/env python3 # -*- coding: utf-8 -*- import sqlite3 as sqlite con = sqlite.connect('ydb.db') with con: cur = con.cursor() cur.execute(\"SELECT * FROM cars\") rows = cur.fetchall() for row in rows: print(f\"{row[0]} {row[1]} {row[2]}\") \u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4ece cars \u8868\u4e2d\u68c0\u7d22\u6240\u6709\u6570\u636e\u3002 1 cur.execute(\"SELECT * FROM cars\") \u8be5 SQL \u8bed\u53e5\u4ece cars \u8868\u4e2d\u9009\u62e9\u6240\u6709\u6570\u636e\u3002 1 rows = cur.fetchall() fetchall() \u65b9\u6cd5\u83b7\u53d6\u6240\u6709\u8bb0\u5f55\u3002 \u5b83\u8fd4\u56de\u4e00\u4e2a\u7ed3\u679c\u96c6\u3002 \u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u5b83\u662f\u4e00\u4e2a\u5143\u7ec4\u7684\u5143\u7ec4\u3002 \u6bcf\u4e2a\u5185\u90e8\u5143\u7ec4\u4ee3\u8868\u8868\u4e2d\u7684\u4e00\u884c\u3002 1 2 for row in rows: print(f\"{row[0]} {row[1]} {row[2]}\") \u6211\u4eec\u5c06\u6570\u636e\u9010\u884c\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 2 3 4 5 6 7 8 9 $ ./fetch_all.py 1 Audi 52642 2 Mercedes 57127 3 Skoda 9000 4 Volvo 29000 5 Bentley 350000 6 Citroen 21000 7 Hummer 41400 8 Volkswagen 21600 Python SQLite fetchone \u00b6 fetchone() \u8fd4\u56de\u67e5\u8be2\u7ed3\u679c\u96c6\u7684\u4e0b\u4e00\u884c\uff0c\u8fd4\u56de\u5355\u4e2a\u5143\u7ec4\uff0c\u6216\u8005\u5728\u6ca1\u6709\u66f4\u591a\u6570\u636e\u53ef\u7528\u65f6\u8fd4\u56de None \u3002 fetch_one.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #!/usr/bin/env python3 # -*- coding: utf-8 -*- import sqlite3 as sqlite con = sqlite.connect('ydb.db') with con: cur = con.cursor() cur.execute(\"SELECT * FROM cars\") while True: row = cur.fetchone() if row == None: break print(f\"{row[0]} {row[1]} {row[2]}\") \u5728\u6b64\u811a\u672c\u4e2d\uff0c\u6211\u4eec\u8fde\u63a5\u5230\u6570\u636e\u5e93\uff0c\u5e76\u9010\u4e2a\u8bfb\u53d6 cars \u8868\u7684\u884c\u3002 1 while True: \u6211\u4eec\u4ece while \u5faa\u73af\u8bbf\u95ee\u6570\u636e\u3002 \u5f53\u6211\u4eec\u8bfb\u53d6\u6700\u540e\u4e00\u884c\u65f6\uff0c\u5faa\u73af\u7ec8\u6b62\u3002 1 2 3 4 row = cur.fetchone() if row == None: break fetchone() \u65b9\u6cd5\u8fd4\u56de\u8868\u7684\u4e0b\u4e00\u884c\u3002 \u5982\u679c\u6ca1\u6709\u5269\u4f59\u6570\u636e\uff0c\u5219\u8fd4\u56de None \u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u6253\u7834\u4e86\u5faa\u73af\u3002 1 print(f\"{row[0]} {row[1]} {row[2]}\") \u6570\u636e\u4ee5\u5143\u7ec4\u7684\u5f62\u5f0f\u8fd4\u56de\u3002 \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4ece\u5143\u7ec4\u4e2d\u9009\u62e9\u8bb0\u5f55\u3002 \u7b2c\u4e00\u4e2a\u662f ID\uff0c\u7b2c\u4e8c\u4e2a\u662f\u6c7d\u8f66\u540d\u79f0\uff0c\u7b2c\u4e09\u4e2a\u662f\u6c7d\u8f66\u7684\u4ef7\u683c\u3002 1 2 3 4 5 6 7 8 9 $ ./fetch_one.py 1 Audi 52642 2 Mercedes 57127 3 Skoda 9000 4 Volvo 29000 5 Bentley 350000 6 Citroen 21000 7 Hummer 41400 8 Volkswagen 21600 Python SQLite \u5b57\u5178\u6e38\u6807 \u00b6 \u9ed8\u8ba4\u6e38\u6807\u4ee5\u5143\u7ec4\u7684\u5143\u7ec4\u8fd4\u56de\u6570\u636e\u3002 \u5f53\u6211\u4eec\u4f7f\u7528\u5b57\u5178\u6e38\u6807\u65f6\uff0c\u6570\u636e\u4ee5 Python \u5b57\u5178\u7684\u5f62\u5f0f\u53d1\u9001\u3002 \u8fd9\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5217\u540d\u79f0\u6765\u5f15\u7528\u6570\u636e\u3002 dictionary_cursor.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/usr/bin/env python3 # -*- coding: utf-8 -*- import sqlite3 as sqlite con = sqlite.connect('ydb.db') with con: con.row_factory = sqlite.Row cur = con.cursor() cur.execute(\"SELECT * FROM cars\") rows = cur.fetchall() for row in rows: print(f\"{row['id']} {row['name']} {row['price']}\") \u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u5b57\u5178\u5149\u6807\u6253\u5370 cars \u8868\u7684\u5185\u5bb9\u3002 1 con.row_factory = sqlite.Row \u6211\u4eec\u9009\u62e9\u4e00\u4e2a\u5b57\u5178\u5149\u6807\u3002 \u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u6309\u5217\u540d\u8bbf\u95ee\u8bb0\u5f55\u3002 1 2 for row in rows: print(f\"{row['id']} {row['name']} {row['price']}\") \u901a\u8fc7\u5217\u540d\u8bbf\u95ee\u6570\u636e\u3002 Python SQLite \u53c2\u6570\u5316\u8bed\u53e5 \u00b6 \u73b0\u5728\uff0c\u6211\u4eec\u5c06\u5173\u6ce8\u53c2\u6570\u5316\u67e5\u8be2\u3002 \u5f53\u4f7f\u7528\u53c2\u6570\u5316\u67e5\u8be2\u65f6\uff0c\u6211\u4eec\u4f7f\u7528\u5360\u4f4d\u7b26\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u5c06\u503c\u5199\u5165\u8bed\u53e5\u3002 \u53c2\u6570\u5316\u67e5\u8be2\u53ef\u63d0\u9ad8\u5b89\u5168\u6027\u548c\u6027\u80fd\u3002 Python sqlite3 \u6a21\u5757\u652f\u6301\u4e24\u79cd\u7c7b\u578b\u7684\u5360\u4f4d\u7b26\uff1a\u95ee\u53f7\u548c\u547d\u540d\u5360\u4f4d\u7b26\u3002 \u5e26\u95ee\u53f7\u7684\u53c2\u6570\u5316\u8bed\u53e5 \u00b6 \u5728\u7b2c\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u95ee\u53f7\u7684\u8bed\u6cd5\u3002 parameterized_query.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/env python3 # -*- coding: utf-8 -*- import sqlite3 as sqlite uId = 1 uPrice = 62300 con = sqlite.connect('ydb.db') with con: cur = con.cursor() cur.execute(\"UPDATE cars SET price=? WHERE id=?\", (uPrice, uId)) print(f\"Number of rows updated: {cur.rowcount}\") \u6211\u4eec\u66f4\u65b0\u4e86\u4e00\u8f86\u8f66\u7684\u4ef7\u683c\u3002 \u5728\u6b64\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u95ee\u53f7\u5360\u4f4d\u7b26\u3002 1 cur.execute(\"UPDATE cars SET price=? WHERE id=?\", (uPrice, uId)) \u95ee\u53f7 ? \u662f\u503c\u7684\u5360\u4f4d\u7b26\u3002 \u8fd9\u4e9b\u503c\u5c06\u6dfb\u52a0\u5230\u5360\u4f4d\u7b26\u3002 1 print(f\"Number of rows updated: {cur.rowcount}\") rowcount \u5c5e\u6027\u8fd4\u56de\u66f4\u65b0\u7684\u884c\u6570\u3002 \u5728\u6211\u4eec\u7684\u60c5\u51b5\u4e0b\uff0c\u4e00\u884c\u5df2\u66f4\u65b0\u3002 \u5177\u6709\u547d\u540d\u5360\u4f4d\u7b26\u7684\u53c2\u6570\u5316\u8bed\u53e5 \u00b6 \u7b2c\u4e8c\u4e2a\u793a\u4f8b\u4f7f\u7528\u5e26\u6709\u547d\u540d\u5360\u4f4d\u7b26\u7684\u53c2\u6570\u5316\u8bed\u53e5\u3002 named_placeholders.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/env python3 # -*- coding: utf-8 -*- import sqlite3 as sqlite uId = 4 con = sqlite.connect('ydb.db') with con: cur = con.cursor() cur.execute(\"SELECT name, price FROM cars WHERE Id=:Id\", {\"Id\": uId}) row = cur.fetchone() print(f\"{row[0]}, {row[1]}\") \u6211\u4eec\u4f7f\u7528\u547d\u540d\u7684\u5360\u4f4d\u7b26\u9009\u62e9\u6c7d\u8f66\u7684\u540d\u79f0\u548c\u4ef7\u683c\u3002 1 cur.execute(\"SELECT name, price FROM cars WHERE Id=:Id\", {\"Id\": uId}) \u547d\u540d\u7684\u5360\u4f4d\u7b26\u4ee5\u5192\u53f7\u5f00\u5934\u3002 Python SQLite \u63d2\u5165\u56fe\u7247 \u00b6 \u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u56fe\u50cf\u63d2\u5165\u5230 SQLite \u6570\u636e\u5e93\u4e2d\u3002 \u8bf7\u6ce8\u610f\uff0c\u6709\u4e9b\u4eba\u53cd\u5bf9\u5c06\u56fe\u50cf\u653e\u5165\u6570\u636e\u5e93\u3002 \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u53ea\u5c55\u793a\u5982\u4f55\u505a\u3002 \u6211\u4eec\u4e0d\u8ba8\u8bba\u662f\u5426\u5c06\u56fe\u50cf\u4fdd\u5b58\u5728\u6570\u636e\u5e93\u4e2d\u7684\u6280\u672f\u95ee\u9898\u3002 1 sqlite> CREATE TABLE images(id INTEGER PRIMARY KEY, data BLOB); \u5bf9\u4e8e\u6b64\u793a\u4f8b\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a Images \u7684\u65b0\u8868\u3002 \u5bf9\u4e8e\u56fe\u50cf\uff0c\u6211\u4eec\u4f7f\u7528 BLOB \u6570\u636e\u7c7b\u578b\uff0c\u8868\u793a\u4e8c\u8fdb\u5236\u5927\u578b\u5bf9\u8c61\u3002 insert_image.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 #!/usr/bin/env python3 # -*- coding: utf-8 -*- import sqlite3 as sqlite import sys def readImage(): fin = None try: fin = open(\"sid.jpg\", \"rb\") img = fin.read() return img except IOError as e: print(e) sys.exit(1) finally: if fin: fin.close() con = None try: con = sqlite.connect('ydb.db') cur = con.cursor() data = readImage() binary = sqlite.Binary(data) cur.execute(\"INSERT INTO images(data) VALUES (?)\", (binary,) ) con.commit() except sqlite.Error as e: if con: con.rollback() print(e) sys.exit(1) finally: if con: con.close() \u5728\u6b64\u811a\u672c\u4e2d\uff0c\u6211\u4eec\u4ece\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u4e2d\u8bfb\u53d6\u56fe\u50cf\uff0c\u5e76\u5c06\u5176\u5199\u5165 SQLite ydb.db \u6570\u636e\u5e93\u7684 images \u8868\u4e2d\u3002 1 2 3 4 try: fin = open(\"sid.png\", \"rb\") img = fin.read() return img \u6211\u4eec\u4ece\u6587\u4ef6\u7cfb\u7edf\u8bfb\u53d6\u4e8c\u8fdb\u5236\u6570\u636e\u3002 \u6211\u4eec\u6709\u4e00\u4e2a\u540d\u4e3a sid.png \u7684 JPG \u56fe\u50cf\u3002 1 binary = sqlite.Binary(data) \u4f7f\u7528 SQLite Binary \u5bf9\u8c61\u5bf9\u6570\u636e\u8fdb\u884c\u7f16\u7801\u3002 1 cur.execute(\"INSERT INTO images(data) VALUES (?)\", (binary,) ) \u8be5 SQL \u8bed\u53e5\u7528\u4e8e\u5c06\u6620\u50cf\u63d2\u5165\u6570\u636e\u5e93\u3002 Python SQLite \u8bfb\u53d6\u56fe\u50cf \u00b6 \u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u6267\u884c\u76f8\u53cd\u7684\u64cd\u4f5c\uff1a\u6211\u4eec\u4ece\u6570\u636e\u5e93\u8868\u4e2d\u8bfb\u53d6\u4e00\u4e2a\u56fe\u50cf\u3002 read_image.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 #!/usr/bin/env python3 # -*- coding: utf-8 -*- import sqlite3 as sqlite import sys def writeImage(data): fout = None try: fout = open('sid2.png','wb') fout.write(data) except IOError as e: print(e) sys.exit(1) finally: if fout: fout.close() con = None try: con = sqlite.connect('ydb.db') cur = con.cursor() cur.execute(\"SELECT data FROM images LIMIT 1\") data = cur.fetchone()[0] writeImage(data) except sqlite.Error as e: print(e) sys.exit(1) finally: if con: con.close() \u6211\u4eec\u4ece Images \u8868\u4e2d\u8bfb\u53d6\u56fe\u50cf\u6570\u636e\uff0c\u5e76\u5c06\u5176\u5199\u5165\u53e6\u4e00\u4e2a\u6587\u4ef6 woman2.jpg \u4e2d\u3002 1 2 3 try: fout = open('sid2.png','wb') fout.write(data) \u6211\u4eec\u4ee5\u5199\u5165\u6a21\u5f0f\u6253\u5f00\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002 \u6765\u81ea\u6570\u636e\u5e93\u7684\u6570\u636e\u88ab\u5199\u5165\u6587\u4ef6\u3002 1 2 cur.execute(\"SELECT data FROM images LIMIT 1\") data = cur.fetchone()[0] \u8fd9\u4e24\u884c\u4ece images \u8868\u4e2d\u9009\u62e9\u5e76\u83b7\u53d6\u6570\u636e\u3002 \u6211\u4eec\u4ece\u7b2c\u4e00\u884c\u83b7\u53d6\u4e8c\u8fdb\u5236\u6570\u636e\u3002 Python SQLite \u5143\u6570\u636e \u00b6 \u5143\u6570\u636e\u662f\u6709\u5173\u6570\u636e\u5e93\u4e2d\u6570\u636e\u7684\u4fe1\u606f\u3002 SQLite \u4e2d\u7684\u5143\u6570\u636e\u5305\u542b\u6709\u5173\u8868\u548c\u5217\u7684\u4fe1\u606f\uff0c\u6211\u4eec\u5728\u5176\u4e2d\u5b58\u50a8\u6570\u636e\u3002 \u53d7 SQL \u8bed\u53e5\u5f71\u54cd\u7684\u884c\u6570\u662f\u5143\u6570\u636e\u3002 \u7ed3\u679c\u96c6\u4e2d\u8fd4\u56de\u7684\u884c\u6570\u548c\u5217\u6570\u4e5f\u5c5e\u4e8e\u5143\u6570\u636e\u3002 \u53ef\u4ee5\u4f7f\u7528 PRAGMA \u547d\u4ee4\u83b7\u53d6 SQLite \u4e2d\u7684\u5143\u6570\u636e\u3002 SQLite \u5bf9\u8c61\u53ef\u80fd\u5177\u6709\u5c5e\u6027\uff0c\u5373\u5143\u6570\u636e\u3002 \u6700\u540e\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u901a\u8fc7\u67e5\u8be2 SQLite \u7cfb\u7edf sqlite_master \u8868\u6765\u83b7\u53d6\u7279\u5b9a\u7684 metatada\u3002 column_names.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env python3 # -*- coding: utf-8 -*- import sqlite3 as sqlite con = sqlite.connect('ydb.db') with con: cur = con.cursor() cur.execute('PRAGMA table_info(cars)') data = cur.fetchall() for d in data: print(f\"{d[0]} {d[1]} {d[2]}\") \u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u53d1\u51fa PRAGMA table_info(tableName) \u547d\u4ee4\uff0c\u4ee5\u83b7\u53d6\u6709\u5173 cars \u8868\u7684\u4e00\u4e9b\u5143\u6570\u636e\u4fe1\u606f\u3002 1 cur.execute('PRAGMA table_info(cars)') PRAGMA table_info(tableName) \u547d\u4ee4\u4e3a cars \u8868\u4e2d\u7684\u6bcf\u4e00\u5217\u8fd4\u56de\u4e00\u884c\u3002 \u7ed3\u679c\u96c6\u4e2d\u7684\u5217\u5305\u62ec\u5217\u987a\u5e8f\u53f7\uff0c\u5217\u540d\u79f0\uff0c\u6570\u636e\u7c7b\u578b\uff0c\u8be5\u5217\u662f\u5426\u53ef\u4ee5\u4e3a NULL \u4ee5\u53ca\u8be5\u5217\u7684\u9ed8\u8ba4\u503c\u3002 1 2 for d in data: print(f\"{d[0]} {d[1]} {d[2]}\") \u6839\u636e\u63d0\u4f9b\u7684\u4fe1\u606f\uff0c\u6211\u4eec\u6253\u5370\u5217\u987a\u5e8f\u53f7\uff0c\u5217\u540d\u79f0\u548c\u5217\u6570\u636e\u7c7b\u578b\u3002 1 2 3 4 $ ./column_names.py 0 id INT 1 name TEXT 2 price INT \u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6253\u5370 cars \u8868\u4e2d\u7684\u6240\u6709\u884c\u53ca\u5176\u5217\u540d\u3002 column_names2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #!/usr/bin/env python3 # -*- coding: utf-8 -*- import sqlite3 as sqlite con = sqlite.connect('ydb.db') with con: cur = con.cursor() cur.execute('SELECT * FROM cars') col_names = [cn[0] for cn in cur.description] rows = cur.fetchall() print(f\"{col_names[0]:3} {col_names[1]:10} {col_names[2]:7}\") for row in rows: print(f\"{row[0]:<3} {row[1]:<10} {row[2]:7}\") \u6211\u4eec\u5c06 cars \u8868\u7684\u5185\u5bb9\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 \u73b0\u5728\uff0c\u6211\u4eec\u4e5f\u5305\u62ec\u5217\u7684\u540d\u79f0\u3002 \u8bb0\u5f55\u4e0e\u5217\u540d\u5bf9\u9f50\u3002 1 col_names = [cn[0] for cn in cur.description] \u6211\u4eec\u4ece\u6e38\u6807\u5bf9\u8c61\u7684 description \u5c5e\u6027\u83b7\u5f97\u5217\u540d\u3002 1 print(f\"{col_names[0]:3} {col_names[1]:10} {col_names[2]:7}\") \u6b64\u884c\u6253\u5370 cars \u8868\u7684\u4e09\u4e2a\u5217\u540d\u3002 1 2 for row in rows: print(f\"{row[0]:<3} {row[1]:<10} {row[2]:7}\") \u6211\u4eec\u4f7f\u7528 for \u5faa\u73af\u6253\u5370\u884c\u3002 \u6570\u636e\u4e0e\u5217\u540d\u5bf9\u9f50\u3002 1 2 3 4 5 6 7 8 9 $ ./column_names2.py id name price 1 Audi 62300 2 Mercedes 57127 3 Skoda 9000 4 Volvo 29000 5 Bentley 350000 6 Hummer 41400 7 Volkswagen 21600 \u5728\u4e0e\u5143\u6570\u636e\u6709\u5173\u7684\u6700\u540e\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u5217\u51fa ydb.db \u6570\u636e\u5e93\u4e2d\u7684\u6240\u6709\u8868\u3002 list_tables.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/env python3 # -*- coding: utf-8 -*- import sqlite3 as sqlite con = sqlite.connect('ydb.db') with con: cur = con.cursor() cur.execute(\"SELECT name FROM sqlite_master WHERE type='table'\") rows = cur.fetchall() for row in rows: print(row[0]) \u8be5\u4ee3\u7801\u793a\u4f8b\u5c06\u5f53\u524d\u6570\u636e\u5e93\u4e2d\u7684\u6240\u6709\u53ef\u7528\u8868\u6253\u5370\u5230\u7ec8\u7aef\u3002 1 cur.execute(\"SELECT name FROM sqlite_master WHERE type='table'\") \u8868\u540d\u5b58\u50a8\u5728\u7cfb\u7edf sqlite_master \u8868\u4e2d\u3002 1 2 3 $ ./list_tables.py cars images \u8fd9\u4e9b\u662f\u6211\u4eec\u7cfb\u7edf\u4e0a\u7684\u8868\u3002 Python SQLite \u6570\u636e\u5bfc\u51fa \u00b6 \u6211\u4eec\u53ef\u4ee5\u8f6c\u50a8 SQL \u683c\u5f0f\u7684\u6570\u636e\u4ee5\u521b\u5efa\u6570\u636e\u5e93\u8868\u7684\u7b80\u5355\u5907\u4efd\u3002 export_table.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 #!/usr/bin/env python3 # -*- coding: utf-8 -*- import sqlite3 as sqlite cars = ( (1, 'Audi', 52643), (2, 'Mercedes', 57642), (3, 'Skoda', 9000), (4, 'Volvo', 29000), (5, 'Bentley', 350000), (6, 'Hummer', 41400), (7, 'Volkswagen', 21600) ) def writeData(data): f = open('cars.sql', 'w') with f: f.write(data) con = sqlite.connect(':memory:') with con: cur = con.cursor() cur.execute(\"DROP TABLE IF EXISTS cars\") cur.execute(\"CREATE TABLE cars(id INT, name TEXT, price INT)\") cur.executemany(\"INSERT INTO cars VALUES(?, ?, ?)\", cars) cur.execute(\"DELETE FROM cars WHERE price < 30000\") data = '\\n'.join(con.iterdump()) writeData(data) \u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5728\u5185\u5b58\u4e2d\u91cd\u65b0\u521b\u5efa\u4e86 cars \u8868\u3002 \u6211\u4eec\u4ece\u8868\u4e2d\u5220\u9664\u4e00\u4e9b\u884c\uff0c\u5e76\u5c06\u8868\u7684\u5f53\u524d\u72b6\u6001\u8f6c\u50a8\u5230 cars.sql \u6587\u4ef6\u4e2d\u3002 \u8be5\u6587\u4ef6\u53ef\u4ee5\u7528\u4f5c\u8868\u7684\u5f53\u524d\u5907\u4efd\u3002 1 2 3 4 5 6 def writeData(data): f = open('cars.sql', 'w') with f: f.write(data) \u8868\u4e2d\u7684\u6570\u636e\u6b63\u5728\u5199\u5165\u6587\u4ef6\u3002 1 con = sqlite.connect(':memory:') \u6211\u4eec\u5728\u5185\u5b58\u4e2d\u521b\u5efa\u4e00\u4e2a\u4e34\u65f6\u8868\u3002 1 2 3 4 cur.execute(\"DROP TABLE IF EXISTS cars\") cur.execute(\"CREATE TABLE cars(id INT, name TEXT, price INT)\") cur.executemany(\"INSERT INTO cars VALUES(?, ?, ?)\", cars) cur.execute(\"DELETE FROM cars WHERE price < 30000\") \u8fd9\u4e9b\u884c\u521b\u5efa cars \u8868\uff0c\u63d2\u5165\u503c\u5e76\u5220\u9664\u884c\uff0c\u5176\u4e2d price \u5c0f\u4e8e 30000 \u5355\u4f4d\u3002 1 data = '\\n'.join(con.iterdump()) con.iterdump() \u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u4ee5 SQL \u6587\u672c\u683c\u5f0f\u8f6c\u50a8\u6570\u636e\u5e93\u3002 \u5185\u7f6e\u7684 join() \u51fd\u6570\u91c7\u7528\u8fed\u4ee3\u5668\uff0c\u5e76\u5c06\u8fed\u4ee3\u5668\u4e2d\u7684\u6240\u6709\u5b57\u7b26\u4e32\u8fde\u63a5\u5728\u4e00\u8d77\uff0c\u5e76\u7528\u65b0\u884c\u5206\u9694\u3002 \u6b64\u6570\u636e\u5c06\u5199\u5165 writeData() \u51fd\u6570\u4e2d\u7684 cars.sql \u6587\u4ef6\u4e2d\u3002 1 2 3 4 5 6 7 8 $ cat cars.sql BEGIN TRANSACTION; CREATE TABLE cars(id INT, name TEXT, price INT); INSERT INTO \"cars\" VALUES(1,'Audi',52643); INSERT INTO \"cars\" VALUES(2,'Mercedes',57642); INSERT INTO \"cars\" VALUES(5,'Bentley',350000); INSERT INTO \"cars\" VALUES(6,'Hummer',41400); COMMIT; \u5e9f\u5f03\u7684\u5185\u5b58\u8f66\u8868\u4e2d\u7684\u5185\u5bb9\u3002 Python SQLite \u5bfc\u5165\u6570\u636e \u00b6 \u73b0\u5728\uff0c\u6211\u4eec\u5c06\u6267\u884c\u53cd\u5411\u64cd\u4f5c\u3002 \u6211\u4eec\u5c06\u8f6c\u50a8\u7684\u8868\u5bfc\u5165\u56de\u5185\u5b58\u3002 import_table.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 #!/usr/bin/env python3 # -*- coding: utf-8 -*- import sqlite3 as sqlite def readData(): f = open('cars.sql', 'r') with f: data = f.read() return data con = sqlite.connect(':memory:') with con: cur = con.cursor() sql = readData() cur.executescript(sql) cur.execute(\"SELECT * FROM cars\") rows = cur.fetchall() for row in rows: print(row) \u5728\u6b64\u811a\u672c\u4e2d\uff0c\u6211\u4eec\u8bfb\u53d6 cars.sql \u6587\u4ef6\u7684\u5185\u5bb9\u5e76\u6267\u884c\u5b83\u3002 \u8fd9\u5c06\u91cd\u65b0\u521b\u5efa\u8f6c\u50a8\u7684\u8868\u3002 1 2 3 4 5 6 7 8 9 def readData(): f = open('cars.sql', 'r') with f: data = f.read() return data \u5728 readData() \u65b9\u6cd5\u5185\u90e8\uff0c\u6211\u4eec\u8bfb\u53d6 cars.sql \u8868\u7684\u5185\u5bb9\u3002 1 cur.executescript(sql) \u6211\u4eec\u8c03\u7528 executescript() \u65b9\u6cd5\u6765\u542f\u52a8 SQL \u811a\u672c\u3002 1 2 3 4 5 6 cur.execute(\"SELECT * FROM cars\") rows = cur.fetchall() for row in rows: print(row) \u6211\u4eec\u9a8c\u8bc1\u6570\u636e\u3002 1 2 3 4 5 $ ./import_table.py (1, u'Audi', 52643) (2, u'Mercedes', 57642) (5, u'Bentley', 350000) (6, u'Hummer', 41400) \u8f93\u51fa\u663e\u793a\u6211\u4eec\u5df2\u7ecf\u6210\u529f\u5730\u91cd\u65b0\u521b\u5efa\u4e86\u4fdd\u5b58\u7684\u6c7d\u8f66\u8868\u3002 Python SQLite \u4e8b\u52a1 \u00b6 \u4e8b\u52a1\u662f\u9488\u5bf9\u4e00\u4e2a\u6216\u591a\u4e2a\u6570\u636e\u5e93\u4e2d\u6570\u636e\u7684\u6570\u636e\u5e93\u64cd\u4f5c\u7684\u57fa\u672c\u5355\u4f4d\u3002 \u4e8b\u52a1\u4e2d\u6240\u6709 SQL \u8bed\u53e5\u7684\u5f71\u54cd\u53ef\u4ee5\u5168\u90e8\u63d0\u4ea4\u7ed9\u6570\u636e\u5e93\uff0c\u4e5f\u53ef\u4ee5\u5168\u90e8\u56de\u6eda\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cPython sqlite3 \u6a21\u5757\u5728\u6570\u636e\u4fee\u6539\u8bed\u8a00\uff08DML\uff09\u8bed\u53e5\uff08\u5373 INSERT / UPDATE /DELETE / REPLACE \uff09\u4e4b\u524d\u9690\u5f0f\u53d1\u51fa BEGIN \u8bed\u53e5\u3002 sqlite3 \u7528\u4e8e\u5728 DDL \u8bed\u53e5\u4e4b\u524d\u9690\u5f0f\u63d0\u4ea4\u4e00\u4e2a\u6253\u5f00\u7684\u4e8b\u52a1\u3002 \u8fd9\u5df2\u4e0d\u518d\u662f\u8fd9\u79cd\u60c5\u51b5\u3002 \u624b\u52a8\u4e8b\u52a1\u4ee5 BEGIN TRANSACTION \u8bed\u53e5\u5f00\u59cb\uff0c\u5e76\u4ee5 COMMIT \u6216 ROLLBACK \u8bed\u53e5\u7ed3\u675f\u3002 SQLite \u652f\u6301\u4e09\u79cd\u975e\u6807\u51c6\u4e8b\u52a1\u7ea7\u522b\uff1a DEFERRED \uff0c IMMEDIATE \u548c EXCLUSIVE \u3002 Python SQLite \u6a21\u5757\u8fd8\u652f\u6301\u81ea\u52a8\u63d0\u4ea4\u6a21\u5f0f\uff0c\u8be5\u6a21\u5f0f\u4e0b\u5bf9\u8868\u7684\u6240\u6709\u66f4\u6539\u5747\u7acb\u5373\u751f\u6548\u3002 no_commit.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #!/usr/bin/env python3 # -*- coding: utf-8 -*- import sqlite3 as sqlite import sys con = None try: con = sqlite.connect('ydb.db') cur = con.cursor() cur.execute(\"DROP TABLE IF EXISTS friends\") cur.execute(\"CREATE TABLE friends(id INTEGER PRIMARY KEY, name TEXT)\") cur.execute(\"INSERT INTO friends(name) VALUES ('Tom')\") cur.execute(\"INSERT INTO friends(name) VALUES ('Rebecca')\") cur.execute(\"INSERT INTO friends(name) VALUES ('Jim')\") cur.execute(\"INSERT INTO friends(name) VALUES ('Robert')\") #con.commit() except sqlite.Error as e: if con: con.rollback() print(e) sys.exit(1) finally: if con: con.close() \u6211\u4eec\u521b\u5efa\u4e00\u4e2a friends \u8868\uff0c\u5e76\u5c1d\u8bd5\u7528\u6570\u636e\u586b\u5145\u5b83\u3002 \u4f46\u662f\uff0c\u6b63\u5982\u6211\u4eec\u5c06\u770b\u5230\u7684\uff0c\u6570\u636e\u672a\u63d0\u4ea4\u3002 1 #con.commit() \u6ce8\u91ca commit() \u65b9\u6cd5\u3002 \u5982\u679c\u6211\u4eec\u53d6\u6d88\u6ce8\u91ca\u8be5\u884c\uff0c\u5219\u6570\u636e\u5c06\u88ab\u5199\u5165\u8868\u4e2d\u3002 1 2 3 4 5 6 7 sqlite> .tables cars friends images sqlite> SELECT Count(id) FROM friends; Count(id) ---------- 0 sqlite> \u8868\u5df2\u521b\u5efa\uff0c\u4f46\u6570\u636e\u672a\u5199\u5165\u8868\u4e2d\u3002 Python SQLite \u81ea\u52a8\u63d0\u4ea4 \u00b6 \u5728\u81ea\u52a8\u63d0\u4ea4\u6a21\u5f0f\u4e0b\uff0c\u5c06\u7acb\u5373\u6267\u884c\u4e00\u6761 SQL \u8bed\u53e5\u3002 autocommit.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #!/usr/bin/env python3 # -*- coding: utf-8 -*- import sqlite3 as sqlite import sys con = None try: con = sqlite.connect('ydb.db', isolation_level=None) cur = con.cursor() cur.execute(\"DROP TABLE IF EXISTS friends\") cur.execute(\"CREATE TABLE friends(id INTEGER PRIMARY KEY, name TEXT)\") cur.execute(\"INSERT INTO friends(name) VALUES ('Tom')\") cur.execute(\"INSERT INTO friends(name) VALUES ('Rebecca')\") cur.execute(\"INSERT INTO friends(name) VALUES ('Jim')\") cur.execute(\"INSERT INTO friends(name) VALUES ('Robert')\") except sqlite.Error as e: print(e) sys.exit(1) finally: if con: con.close() \u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4ee5\u81ea\u52a8\u63d0\u4ea4\u6a21\u5f0f\u8fde\u63a5\u5230\u6570\u636e\u5e93\u3002 1 con = sqlite.connect('ydb.db', isolation_level=None) \u5f53\u5c06 isolation_level \u8bbe\u7f6e\u4e3a None \u65f6\uff0c\u6211\u4eec\u5177\u6709\u81ea\u52a8\u63d0\u4ea4\u6a21\u5f0f\u3002 1 2 3 4 5 6 7 8 9 $ ./autocommit.py sqlite> SELECT * FROM friends; Id Name ---------- ---------- 1 Tom 2 Rebecca 3 Jim 4 Robert \u6570\u636e\u5df2\u6210\u529f\u63d0\u4ea4\u5230 friends \u8868\u3002","title":"Python SQLite \u6559\u7a0b"},{"location":"pages/python/pytutorial/python-sqlite/#Python-SQLite-\u6559\u7a0b","text":"\u8fd9\u662f\u7528\u4e8e SQLite \u6570\u636e\u5e93\u7684 Python \u7f16\u7a0b\u6559\u7a0b\uff0c\u5b83\u6db5\u76d6\u4e86\u4f7f\u7528 Python \u8bed\u8a00\u8fdb\u884c SQLite \u7f16\u7a0b\u7684\u57fa\u7840\u3002 \u8981\u4f7f\u7528\u672c\u6559\u7a0b\uff0c\u6211\u4eec\u5fc5\u987b\u5728\u7cfb\u7edf\u4e0a\u5b89\u88c5 Python \u8bed\u8a00\uff0cSQLite \u6570\u636e\u5e93\uff0c pysqlite \u8bed\u8a00\u7ed1\u5b9a\u548c sqlite3 \u547d\u4ee4\u884c\u5de5\u5177\u3002 \u4e3a\u4e86\u4f7f\u7528 SQLite \u6570\u636e\u5e93\uff0c\u6211\u4eec\u53ef\u4ee5\u5b89\u88c5 sqlite3 \u6216 SQLite \u6d4f\u89c8\u5668 GUI\u3002 1 2 3 4 5 6 7 8 $ python Python 3.7.0 (v3.7.0:1bf9cc5093, Jun 27 2018, 04:59:51) [MSC v.1914 64 bit (AMD64)] on win32 Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> import sqlite3 >>> sqlite3.version '2.6.0' >>> sqlite3.sqlite_version '3.21.0' \u5728\u5916\u58f3\u7a0b\u5e8f\u4e2d\uff0c\u6211\u4eec\u542f\u52a8 Python \u4ea4\u4e92\u5f0f\u89e3\u91ca\u5668\u3002 \u6211\u4eec\u53ef\u4ee5\u770b\u5230 Python \u7248\u672c\u3002 \u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\u662f Python 3.7.0\u3002 sqlite.version \u662f pysqlite \uff082.6.0\uff09\u7684\u7248\u672c\uff0c\u5b83\u662f Python \u8bed\u8a00\u4e0e SQLite \u6570\u636e\u5e93\u7684\u7ed1\u5b9a\u3002 sqlite3.sqlite_version \u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86 SQLite \u6570\u636e\u5e93\u5e93\u7684\u7248\u672c\u3002 \u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u7248\u672c\u662f 3.21.0\u3002","title":"Python SQLite \u6559\u7a0b"},{"location":"pages/python/pytutorial/python-sqlite/#SQLite","text":"SQLite \u662f\u5d4c\u5165\u5f0f\u5173\u7cfb\u6570\u636e\u5e93\u5f15\u64ce\u3002 \u8be5\u6587\u6863\u79f0\u5176\u4e3a\u81ea\u5305\u542b\uff0c\u65e0\u670d\u52a1\u5668\uff0c\u96f6\u914d\u7f6e\u548c\u4e8b\u52a1\u578b SQL \u6570\u636e\u5e93\u5f15\u64ce\u3002 \u5982\u4eca\uff0c\u5b83\u5728\u5168\u7403\u4f7f\u7528\u7740\u6570\u4ebf\u518c\uff0c\u975e\u5e38\u53d7\u6b22\u8fce\u3002 \u51e0\u79cd\u7f16\u7a0b\u8bed\u8a00\u90fd\u5185\u7f6e\u4e86\u5bf9 SQLite \u7684\u652f\u6301\uff0c\u5305\u62ec Python \u548c PHP\u3002","title":"SQLite"},{"location":"pages/python/pytutorial/python-sqlite/#\u521b\u5efa-SQLite-\u6570\u636e\u5e93","text":"\u73b0\u5728\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 sqlite3 \u547d\u4ee4\u884c\u5de5\u5177\u521b\u5efa\u4e00\u4e2a\u65b0\u6570\u636e\u5e93\u3002 1 2 3 4 $ sqlite3 ydb.db SQLite version 3.27.2 2019-02-25 16:06:06 Enter \".help\" for usage hints. sqlite> \u6211\u4eec\u4e3a sqlite3 tool \u63d0\u4f9b\u4e86\u4e00\u4e2a\u53c2\u6570\uff1b ydb.db \u662f\u6570\u636e\u5e93\u540d\u79f0\u3002 \u8fd9\u662f\u6211\u4eec\u78c1\u76d8\u4e0a\u7684\u6587\u4ef6\u3002 \u5982\u679c\u5b58\u5728\uff0c\u5219\u5c06\u5176\u6253\u5f00\u3002 \u5982\u679c\u4e0d\u662f\uff0c\u5219\u521b\u5efa\u5b83\u3002 1 2 3 4 sqlite> .tables sqlite> .exit $ ls ydb.db .tables \u547d\u4ee4\u63d0\u4f9b ydb.db \u6570\u636e\u5e93\u4e2d\u7684\u8868\u7684\u5217\u8868\u3002 \u5f53\u524d\u6ca1\u6709\u8868\u683c\u3002 .exit \u547d\u4ee4\u7ec8\u6b62 sqlite3 \u547d\u4ee4\u884c\u5de5\u5177\u7684\u4ea4\u4e92\u5f0f\u4f1a\u8bdd\u3002 ls Unix \u547d\u4ee4\u663e\u793a\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u7684\u5185\u5bb9\u3002 \u6211\u4eec\u53ef\u4ee5\u770b\u5230 ydb.db \u6587\u4ef6\u3002 \u6240\u6709\u6570\u636e\u5c06\u5b58\u50a8\u5728\u8be5\u5355\u4e2a\u6587\u4ef6\u4e2d\u3002","title":"\u521b\u5efa SQLite \u6570\u636e\u5e93"},{"location":"pages/python/pytutorial/python-sqlite/#Python-SQLite-\u7248\u672c\u793a\u4f8b","text":"\u5728\u7b2c\u4e00\u4e2a\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u83b7\u5f97 SQLite \u6570\u636e\u5e93\u7684\u7248\u672c\u3002 version.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #!/usr/bin/env python3 # -*- coding: utf-8 -*- import sqlite3 as sqlite import sys con = None try: con = sqlite.connect('ydb.db') cur = con.cursor() cur.execute('SELECT SQLITE_VERSION()') data = cur.fetchone()[0] print(f\"SQLite version: {data}\") except sqlite.Error as e: print(f\"Error {e.args[0]}\") sys.exit(1) finally: if con: con.close() \u5728\u4e0a\u9762\u7684 Python \u811a\u672c\u4e2d\uff0c\u6211\u4eec\u8fde\u63a5\u5230\u5148\u524d\u521b\u5efa\u7684 ydb.db \u6570\u636e\u5e93\u3002 \u6211\u4eec\u6267\u884c\u4e00\u6761 SQL \u8bed\u53e5\uff0c\u8be5\u8bed\u53e5\u8fd4\u56de SQLite \u6570\u636e\u5e93\u7684\u7248\u672c\u3002 1 import sqlite3 as sqlite \u6211\u4eec\u5bfc\u5165 sqlite3 \u5e76\u4e3a\u5176\u547d\u540d\u3002 1 con = None \u6211\u4eec\u5c06 con \u53d8\u91cf\u521d\u59cb\u5316\u4e3a None \u3002 \u5982\u679c\u65e0\u6cd5\u521b\u5efa\u4e0e\u6570\u636e\u5e93\u7684\u8fde\u63a5\uff08\u4f8b\u5982\u78c1\u76d8\u5df2\u6ee1\uff09\uff0c\u5219\u4e0d\u4f1a\u5b9a\u4e49\u8fde\u63a5\u53d8\u91cf\u3002 \u8fd9\u5c06\u5bfc\u81f4 finally \u5b50\u53e5\u4e2d\u7684\u9519\u8bef\u3002 1 con = sqlite.connect('ydb.db') \u6211\u4eec\u8fde\u63a5\u5230 ydb.db \u6570\u636e\u5e93\u3002 connect() \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u8fde\u63a5\u5bf9\u8c61\u3002 1 2 cur = con.cursor() cur.execute('SELECT SQLITE_VERSION()') \u4ece\u8fde\u63a5\u4e2d\uff0c\u6211\u4eec\u5f97\u5230\u5149\u6807\u5bf9\u8c61\u3002 \u6e38\u6807\u7528\u4e8e\u904d\u5386\u7ed3\u679c\u96c6\u4e2d\u7684\u8bb0\u5f55\u3002 \u6211\u4eec\u8c03\u7528\u6e38\u6807\u7684 execute() \u65b9\u6cd5\u5e76\u6267\u884c SQL \u8bed\u53e5\u3002 1 data = cur.fetchone()[0] \u6211\u4eec\u83b7\u53d6\u6570\u636e\u3002 \u7531\u4e8e\u53ea\u68c0\u7d22\u4e00\u6761\u8bb0\u5f55\uff0c\u56e0\u6b64\u6211\u4eec\u79f0\u4e3a fetchone() \u65b9\u6cd5\u3002 1 print(f\"SQLite version: {data}\") \u6211\u4eec\u5c06\u68c0\u7d22\u5230\u7684\u6570\u636e\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 2 3 4 except sqlite.Error as e: print(f\"Error {e.args[0]}\") sys.exit(1) \u5982\u679c\u53d1\u751f\u5f02\u5e38\uff0c\u6211\u4eec\u5c06\u8f93\u51fa\u4e00\u6761\u9519\u8bef\u6d88\u606f\uff0c\u5e76\u4ee5\u9519\u8bef\u4ee3\u7801 1 \u9000\u51fa\u811a\u672c\u3002 1 2 3 4 finally: if con: con.close() \u5728\u6700\u540e\u4e00\u6b65\uff0c\u6211\u4eec\u91ca\u653e\u8d44\u6e90\u3002 \u5728\u7b2c\u4e8c\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u518d\u6b21\u83b7\u5f97 SQLite \u6570\u636e\u5e93\u7684\u7248\u672c\u3002 \u8fd9\u6b21\u6211\u4eec\u5c06\u4f7f\u7528 with \u5173\u952e\u5b57\u3002 version2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python3 # -*- coding: utf-8 -*- import sqlite3 as sqlite con = sqlite.connect('ydb.db') with con: cur = con.cursor() cur.execute('SELECT SQLITE_VERSION()') data = cur.fetchone()[0] print(f\"SQLite version: {data}\") \u8be5\u811a\u672c\u8fd4\u56de SQLite \u6570\u636e\u5e93\u7684\u5f53\u524d\u7248\u672c\u3002 \u901a\u8fc7\u4f7f\u7528 with \u5173\u952e\u5b57\u3002 \u4ee3\u7801\u66f4\u7d27\u51d1\u3002 1 with con: \u4f7f\u7528 with \u5173\u952e\u5b57\uff0cPython \u89e3\u91ca\u5668\u4f1a\u81ea\u52a8\u91ca\u653e\u8d44\u6e90\u3002 \u5b83\u8fd8\u63d0\u4f9b\u9519\u8bef\u5904\u7406\u3002 1 2 $ ./version.py SQLite version: 3.21.0","title":"Python SQLite \u7248\u672c\u793a\u4f8b"},{"location":"pages/python/pytutorial/python-sqlite/#Python-SQLite-execute","text":"\u6211\u4eec\u521b\u5efa\u4e00\u4e2a cars \u8868\u5e76\u5728\u5176\u4e2d\u63d2\u5165\u51e0\u884c\u3002 \u6211\u4eec\u4f7f\u7528 execute() \u3002 create_table.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #!/usr/bin/env python3 # -*- coding: utf-8 -*- import sqlite3 as sqlite con = sqlite.connect('ydb.db') with con: cur = con.cursor() cur.execute(\"CREATE TABLE cars(id INT, name TEXT, price INT)\") cur.execute(\"INSERT INTO cars VALUES(1,'Audi',52642)\") cur.execute(\"INSERT INTO cars VALUES(2,'Mercedes',57127)\") cur.execute(\"INSERT INTO cars VALUES(3,'Skoda',9000)\") cur.execute(\"INSERT INTO cars VALUES(4,'Volvo',29000)\") cur.execute(\"INSERT INTO cars VALUES(5,'Bentley',350000)\") cur.execute(\"INSERT INTO cars VALUES(6,'Citroen',21000)\") cur.execute(\"INSERT INTO cars VALUES(7,'Hummer',41400)\") cur.execute(\"INSERT INTO cars VALUES(8,'Volkswagen',21600)\") \u4e0a\u9762\u7684\u811a\u672c\u521b\u5efa\u4e00\u4e2a cars \u8868\uff0c\u5e76\u5c06 8 \u884c\u63d2\u5165\u5230\u8be5\u8868\u4e2d\u3002 1 cur.execute(\"CREATE TABLE cars(id INT, name TEXT, price INT)\") \u8be5 SQL \u8bed\u53e5\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 cars \u8868\u3002 \u8be5\u8868\u6709\u4e09\u5217\u3002 1 2 cur.execute(\"INSERT INTO cars VALUES(1,'Audi',52642)\") cur.execute(\"INSERT INTO cars VALUES(2,'Mercedes',57127)\") \u8fd9\u4e24\u884c\u5c06\u4e24\u8f86\u8f66\u63d2\u5165\u684c\u5b50\u3002 \u4f7f\u7528 with \u5173\u952e\u5b57\uff0c\u66f4\u6539\u5c06\u81ea\u52a8\u63d0\u4ea4\u3002 \u5426\u5219\uff0c\u6211\u4eec\u5c06\u4e0d\u5f97\u4e0d\u624b\u52a8\u63d0\u4ea4\u5b83\u4eec\u3002 1 2 sqlite> .mode column sqlite> .headers on \u6211\u4eec\u4f7f\u7528 sqlite3 \u5de5\u5177\u9a8c\u8bc1\u5199\u5165\u7684\u6570\u636e\u3002 \u9996\u5148\uff0c\u6211\u4eec\u4fee\u6539\u6570\u636e\u5728\u63a7\u5236\u53f0\u4e2d\u7684\u663e\u793a\u65b9\u5f0f\u3002 \u6211\u4eec\u4f7f\u7528\u5217\u6a21\u5f0f\u5e76\u6253\u5f00\u6807\u9898\u3002 1 2 3 4 5 6 7 8 9 10 11 sqlite> select * from cars; id name price ---------- ---------- ---------- 1 Audi 52642 2 Mercedes 57127 3 Skoda 9000 4 Volvo 29000 5 Bentley 350000 6 Citroen 21000 7 Hummer 41400 8 Volkswagen 21600 \u8fd9\u662f\u6211\u4eec\u5df2\u5199\u5165 cars \u8868\u7684\u6570\u636e\u3002","title":"Python SQLite execute"},{"location":"pages/python/pytutorial/python-sqlite/#Python-SQLite-executemany","text":"\u6211\u4eec\u5c06\u521b\u5efa\u76f8\u540c\u7684\u8868\u3002 \u8fd9\u6b21\u4f7f\u7528\u4fbf\u6377\u7684 executemany() \u65b9\u6cd5\u3002 create_table2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #!/usr/bin/env python3 # -*- coding: utf-8 -*- import sqlite3 as sqlite cars = ( (1, 'Audi', 52642), (2, 'Mercedes', 57127), (3, 'Skoda', 9000), (4, 'Volvo', 29000), (5, 'Bentley', 350000), (6, 'Hummer', 41400), (7, 'Volkswagen', 21600) ) con = sqlite.connect('ydb.db') with con: cur = con.cursor() cur.execute(\"DROP TABLE IF EXISTS cars\") cur.execute(\"CREATE TABLE cars(id INT, name TEXT, price INT)\") cur.executemany(\"INSERT INTO cars VALUES(?, ?, ?)\", cars) \u7a0b\u5e8f\u5c06\u5220\u9664 cars \u8868\uff08\u5982\u679c\u5b58\u5728\uff09\u5e76\u91cd\u65b0\u521b\u5efa\u5b83\u3002 1 2 cur.execute(\"DROP TABLE IF EXISTS cars\") cur.execute(\"CREATE TABLE cars(id INT, name TEXT, price INT)\") \u5982\u679c\u5b58\u5728\uff0c\u5219\u7b2c\u4e00\u4e2a SQL \u8bed\u53e5\u5c06\u5220\u9664 cars \u8868\u3002 \u7b2c\u4e8c\u6761 SQL \u8bed\u53e5\u521b\u5efa cars \u8868\u3002 1 cur.executemany(\"INSERT INTO cars VALUES(?, ?, ?)\", cars) \u6211\u4eec\u4f7f\u7528\u4fbf\u6377\u7684 executemany() \u65b9\u6cd5\u5c06 8 \u884c\u63d2\u5165\u5230\u8868\u4e2d\u3002 \u6b64\u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u53c2\u6570\u5316\u7684 SQL \u8bed\u53e5\u3002 \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u6570\u636e\uff0c\u4ee5\u5143\u7ec4\u7684\u5143\u7ec4\u7684\u5f62\u5f0f\u3002","title":"Python SQLite executemany"},{"location":"pages/python/pytutorial/python-sqlite/#Python-SQLite-executescript","text":"\u6211\u4eec\u63d0\u4f9b\u4e86\u53e6\u4e00\u79cd\u4f7f\u7528 executescript() \u521b\u5efa cars \u8868\u7684\u65b9\u6cd5\u3002 \u6211\u4eec\u624b\u52a8\u63d0\u4ea4\u66f4\u6539\u5e76\u63d0\u4f9b\u6211\u4eec\u81ea\u5df1\u7684\u9519\u8bef\u5904\u7406\u3002 create_table3.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 #!/usr/bin/env python3 # -*- coding: utf-8 -*- import sqlite3 as sqlite import sys con = None try: con = sqlite.connect('ydb.db') cur = con.cursor() cur.executescript(\"\"\" DROP TABLE IF EXISTS cars; CREATE TABLE cars(id INT, name TEXT, price INT); INSERT INTO cars VALUES(1,'Audi',52642); INSERT INTO cars VALUES(2,'Mercedes',57127); INSERT INTO cars VALUES(3,'Skoda',9000); INSERT INTO cars VALUES(4,'Volvo',29000); INSERT INTO cars VALUES(5,'Bentley',350000); INSERT INTO cars VALUES(6,'Citroen',21000); INSERT INTO cars VALUES(7,'Hummer',41400); INSERT INTO cars VALUES(8,'Volkswagen',21600); \"\"\") con.commit() except sqlite.Error as e: if con: con.rollback() print(f\"Error {e.args[0]}\") sys.exit(1) finally: if con: con.close() \u5728\u4e0a\u9762\u7684\u811a\u672c\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 executescript() \u65b9\u6cd5\uff08\u91cd\u65b0\uff09\u521b\u5efa cars \u8868\u3002 1 2 3 4 5 6 cur.executescript(\"\"\" DROP TABLE IF EXISTS cars; CREATE TABLE cars(id INT, name TEXT, price INT); INSERT INTO cars VALUES(1,'Audi',52642); INSERT INTO cars VALUES(2,'Mercedes',57127); ... executescript() \u65b9\u6cd5\u5141\u8bb8\u6211\u4eec\u4e00\u6b65\u6267\u884c\u6574\u4e2a SQL \u4ee3\u7801\u3002 1 con.commit() \u5982\u679c\u6ca1\u6709 with \u5173\u952e\u5b57\uff0c\u5219\u5fc5\u987b\u4f7f\u7528 commit() \u65b9\u6cd5\u6765\u63d0\u4ea4\u66f4\u6539\u3002 1 2 3 4 5 6 7 except sqlite.Error as e: if con: con.rollback() print(f\"Error {e.args[0]}\") sys.exit(1) \u53d1\u751f\u9519\u8bef\u65f6\uff0c\u6240\u505a\u7684\u66f4\u6539\u5c06\u56de\u6eda\uff0c\u5e76\u5728\u7ec8\u7aef\u4e0a\u663e\u793a\u4e00\u6761\u9519\u8bef\u6d88\u606f\u3002","title":"Python SQLite executescript"},{"location":"pages/python/pytutorial/python-sqlite/#Python-SQLite-lastrowid","text":"\u6709\u65f6\uff0c\u6211\u4eec\u9700\u8981\u786e\u5b9a\u6700\u540e\u63d2\u5165\u7684\u884c\u7684 ID\u3002 \u5728 Python SQLite \u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u5149\u6807\u5bf9\u8c61\u7684 lastrowid \u5c5e\u6027\u3002 lastrowid.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/usr/bin/env python3 # -*- coding: utf-8 -*- import sqlite3 as sqlite con = sqlite.connect(':memory:') with con: cur = con.cursor() cur.execute(\"CREATE TABLE friends(id INTEGER PRIMARY KEY, name TEXT);\") cur.execute(\"INSERT INTO friends(name) VALUES ('Tom');\") cur.execute(\"INSERT INTO friends(name) VALUES ('Rebecca');\") cur.execute(\"INSERT INTO friends(name) VALUES ('Jim');\") cur.execute(\"INSERT INTO friends(name) VALUES ('Robert');\") last_row_id = cur.lastrowid print(f\"The last Id of the inserted row is {last_row_id}\") \u6211\u4eec\u5728\u5185\u5b58\u4e2d\u521b\u5efa\u4e00\u4e2a friends \u8868\u3002 ID \u4f1a\u81ea\u52a8\u9012\u589e\u3002 1 cur.execute(\"CREATE TABLE friends(id INTEGER PRIMARY KEY, name TEXT);\") \u5728 SQLite \u4e2d\uff0c INTEGER PRIMARY KEY \u5217\u81ea\u52a8\u589e\u52a0\u3002 \u8fd8\u6709\u4e00\u4e2a AUTOINCREMENT \u5173\u952e\u5b57\u3002 \u5728 INTEGER PRIMARY KEY AUTOINCREMENT \u4e2d\u4f7f\u7528\u65f6\uff0c\u4f1a\u4f7f\u7528\u7a0d\u5fae\u4e0d\u540c\u7684 ID \u521b\u5efa\u7b97\u6cd5\u3002 1 2 3 4 cur.execute(\"INSERT INTO friends(name) VALUES ('Tom');\") cur.execute(\"INSERT INTO friends(name) VALUES ('Rebecca');\") cur.execute(\"INSERT INTO friends(name) VALUES ('Jim');\") cur.execute(\"INSERT INTO friends(name) VALUES ('Robert');\") \u4f7f\u7528\u81ea\u52a8\u589e\u91cf\u65f6\uff0c\u6211\u4eec\u5fc5\u987b\u660e\u786e\u58f0\u660e\u5217\u540d\uff0c\u800c\u5ffd\u7565\u81ea\u52a8\u589e\u91cf\u7684\u5217\u540d\u3002 \u8fd9\u56db\u4e2a\u8bed\u53e5\u5728 friends \u8868\u4e2d\u63d2\u5165\u56db\u884c\u3002 1 last_row_id = cur.lastrowid \u4f7f\u7528 lastrowid \u83b7\u5f97\u6700\u540e\u63d2\u5165\u7684\u884c ID\u3002 1 2 $ ./lastrowid.py The last Id of the inserted row is 4","title":"Python SQLite lastrowid"},{"location":"pages/python/pytutorial/python-sqlite/#Python-SQLite-\u4f7f\u7528fetchall\u68c0\u7d22\u6570\u636e","text":"fetchall() \u65b9\u6cd5\u83b7\u53d6\u67e5\u8be2\u7ed3\u679c\u96c6\u7684\u6240\u6709\uff08\u6216\u6240\u6709\u5269\u4f59\uff09\u884c\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\u5217\u8868\u3002 fetch_all.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/env python3 # -*- coding: utf-8 -*- import sqlite3 as sqlite con = sqlite.connect('ydb.db') with con: cur = con.cursor() cur.execute(\"SELECT * FROM cars\") rows = cur.fetchall() for row in rows: print(f\"{row[0]} {row[1]} {row[2]}\") \u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4ece cars \u8868\u4e2d\u68c0\u7d22\u6240\u6709\u6570\u636e\u3002 1 cur.execute(\"SELECT * FROM cars\") \u8be5 SQL \u8bed\u53e5\u4ece cars \u8868\u4e2d\u9009\u62e9\u6240\u6709\u6570\u636e\u3002 1 rows = cur.fetchall() fetchall() \u65b9\u6cd5\u83b7\u53d6\u6240\u6709\u8bb0\u5f55\u3002 \u5b83\u8fd4\u56de\u4e00\u4e2a\u7ed3\u679c\u96c6\u3002 \u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u5b83\u662f\u4e00\u4e2a\u5143\u7ec4\u7684\u5143\u7ec4\u3002 \u6bcf\u4e2a\u5185\u90e8\u5143\u7ec4\u4ee3\u8868\u8868\u4e2d\u7684\u4e00\u884c\u3002 1 2 for row in rows: print(f\"{row[0]} {row[1]} {row[2]}\") \u6211\u4eec\u5c06\u6570\u636e\u9010\u884c\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 2 3 4 5 6 7 8 9 $ ./fetch_all.py 1 Audi 52642 2 Mercedes 57127 3 Skoda 9000 4 Volvo 29000 5 Bentley 350000 6 Citroen 21000 7 Hummer 41400 8 Volkswagen 21600","title":"Python SQLite \u4f7f\u7528fetchall\u68c0\u7d22\u6570\u636e"},{"location":"pages/python/pytutorial/python-sqlite/#Python-SQLite-fetchone","text":"fetchone() \u8fd4\u56de\u67e5\u8be2\u7ed3\u679c\u96c6\u7684\u4e0b\u4e00\u884c\uff0c\u8fd4\u56de\u5355\u4e2a\u5143\u7ec4\uff0c\u6216\u8005\u5728\u6ca1\u6709\u66f4\u591a\u6570\u636e\u53ef\u7528\u65f6\u8fd4\u56de None \u3002 fetch_one.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #!/usr/bin/env python3 # -*- coding: utf-8 -*- import sqlite3 as sqlite con = sqlite.connect('ydb.db') with con: cur = con.cursor() cur.execute(\"SELECT * FROM cars\") while True: row = cur.fetchone() if row == None: break print(f\"{row[0]} {row[1]} {row[2]}\") \u5728\u6b64\u811a\u672c\u4e2d\uff0c\u6211\u4eec\u8fde\u63a5\u5230\u6570\u636e\u5e93\uff0c\u5e76\u9010\u4e2a\u8bfb\u53d6 cars \u8868\u7684\u884c\u3002 1 while True: \u6211\u4eec\u4ece while \u5faa\u73af\u8bbf\u95ee\u6570\u636e\u3002 \u5f53\u6211\u4eec\u8bfb\u53d6\u6700\u540e\u4e00\u884c\u65f6\uff0c\u5faa\u73af\u7ec8\u6b62\u3002 1 2 3 4 row = cur.fetchone() if row == None: break fetchone() \u65b9\u6cd5\u8fd4\u56de\u8868\u7684\u4e0b\u4e00\u884c\u3002 \u5982\u679c\u6ca1\u6709\u5269\u4f59\u6570\u636e\uff0c\u5219\u8fd4\u56de None \u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u6253\u7834\u4e86\u5faa\u73af\u3002 1 print(f\"{row[0]} {row[1]} {row[2]}\") \u6570\u636e\u4ee5\u5143\u7ec4\u7684\u5f62\u5f0f\u8fd4\u56de\u3002 \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4ece\u5143\u7ec4\u4e2d\u9009\u62e9\u8bb0\u5f55\u3002 \u7b2c\u4e00\u4e2a\u662f ID\uff0c\u7b2c\u4e8c\u4e2a\u662f\u6c7d\u8f66\u540d\u79f0\uff0c\u7b2c\u4e09\u4e2a\u662f\u6c7d\u8f66\u7684\u4ef7\u683c\u3002 1 2 3 4 5 6 7 8 9 $ ./fetch_one.py 1 Audi 52642 2 Mercedes 57127 3 Skoda 9000 4 Volvo 29000 5 Bentley 350000 6 Citroen 21000 7 Hummer 41400 8 Volkswagen 21600","title":"Python SQLite fetchone"},{"location":"pages/python/pytutorial/python-sqlite/#Python-SQLite-\u5b57\u5178\u6e38\u6807","text":"\u9ed8\u8ba4\u6e38\u6807\u4ee5\u5143\u7ec4\u7684\u5143\u7ec4\u8fd4\u56de\u6570\u636e\u3002 \u5f53\u6211\u4eec\u4f7f\u7528\u5b57\u5178\u6e38\u6807\u65f6\uff0c\u6570\u636e\u4ee5 Python \u5b57\u5178\u7684\u5f62\u5f0f\u53d1\u9001\u3002 \u8fd9\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5217\u540d\u79f0\u6765\u5f15\u7528\u6570\u636e\u3002 dictionary_cursor.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/usr/bin/env python3 # -*- coding: utf-8 -*- import sqlite3 as sqlite con = sqlite.connect('ydb.db') with con: con.row_factory = sqlite.Row cur = con.cursor() cur.execute(\"SELECT * FROM cars\") rows = cur.fetchall() for row in rows: print(f\"{row['id']} {row['name']} {row['price']}\") \u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u5b57\u5178\u5149\u6807\u6253\u5370 cars \u8868\u7684\u5185\u5bb9\u3002 1 con.row_factory = sqlite.Row \u6211\u4eec\u9009\u62e9\u4e00\u4e2a\u5b57\u5178\u5149\u6807\u3002 \u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u6309\u5217\u540d\u8bbf\u95ee\u8bb0\u5f55\u3002 1 2 for row in rows: print(f\"{row['id']} {row['name']} {row['price']}\") \u901a\u8fc7\u5217\u540d\u8bbf\u95ee\u6570\u636e\u3002","title":"Python SQLite \u5b57\u5178\u6e38\u6807"},{"location":"pages/python/pytutorial/python-sqlite/#Python-SQLite-\u53c2\u6570\u5316\u8bed\u53e5","text":"\u73b0\u5728\uff0c\u6211\u4eec\u5c06\u5173\u6ce8\u53c2\u6570\u5316\u67e5\u8be2\u3002 \u5f53\u4f7f\u7528\u53c2\u6570\u5316\u67e5\u8be2\u65f6\uff0c\u6211\u4eec\u4f7f\u7528\u5360\u4f4d\u7b26\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u5c06\u503c\u5199\u5165\u8bed\u53e5\u3002 \u53c2\u6570\u5316\u67e5\u8be2\u53ef\u63d0\u9ad8\u5b89\u5168\u6027\u548c\u6027\u80fd\u3002 Python sqlite3 \u6a21\u5757\u652f\u6301\u4e24\u79cd\u7c7b\u578b\u7684\u5360\u4f4d\u7b26\uff1a\u95ee\u53f7\u548c\u547d\u540d\u5360\u4f4d\u7b26\u3002","title":"Python SQLite \u53c2\u6570\u5316\u8bed\u53e5"},{"location":"pages/python/pytutorial/python-sqlite/#\u5e26\u95ee\u53f7\u7684\u53c2\u6570\u5316\u8bed\u53e5","text":"\u5728\u7b2c\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u95ee\u53f7\u7684\u8bed\u6cd5\u3002 parameterized_query.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/env python3 # -*- coding: utf-8 -*- import sqlite3 as sqlite uId = 1 uPrice = 62300 con = sqlite.connect('ydb.db') with con: cur = con.cursor() cur.execute(\"UPDATE cars SET price=? WHERE id=?\", (uPrice, uId)) print(f\"Number of rows updated: {cur.rowcount}\") \u6211\u4eec\u66f4\u65b0\u4e86\u4e00\u8f86\u8f66\u7684\u4ef7\u683c\u3002 \u5728\u6b64\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u95ee\u53f7\u5360\u4f4d\u7b26\u3002 1 cur.execute(\"UPDATE cars SET price=? WHERE id=?\", (uPrice, uId)) \u95ee\u53f7 ? \u662f\u503c\u7684\u5360\u4f4d\u7b26\u3002 \u8fd9\u4e9b\u503c\u5c06\u6dfb\u52a0\u5230\u5360\u4f4d\u7b26\u3002 1 print(f\"Number of rows updated: {cur.rowcount}\") rowcount \u5c5e\u6027\u8fd4\u56de\u66f4\u65b0\u7684\u884c\u6570\u3002 \u5728\u6211\u4eec\u7684\u60c5\u51b5\u4e0b\uff0c\u4e00\u884c\u5df2\u66f4\u65b0\u3002","title":"\u5e26\u95ee\u53f7\u7684\u53c2\u6570\u5316\u8bed\u53e5"},{"location":"pages/python/pytutorial/python-sqlite/#\u5177\u6709\u547d\u540d\u5360\u4f4d\u7b26\u7684\u53c2\u6570\u5316\u8bed\u53e5","text":"\u7b2c\u4e8c\u4e2a\u793a\u4f8b\u4f7f\u7528\u5e26\u6709\u547d\u540d\u5360\u4f4d\u7b26\u7684\u53c2\u6570\u5316\u8bed\u53e5\u3002 named_placeholders.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/env python3 # -*- coding: utf-8 -*- import sqlite3 as sqlite uId = 4 con = sqlite.connect('ydb.db') with con: cur = con.cursor() cur.execute(\"SELECT name, price FROM cars WHERE Id=:Id\", {\"Id\": uId}) row = cur.fetchone() print(f\"{row[0]}, {row[1]}\") \u6211\u4eec\u4f7f\u7528\u547d\u540d\u7684\u5360\u4f4d\u7b26\u9009\u62e9\u6c7d\u8f66\u7684\u540d\u79f0\u548c\u4ef7\u683c\u3002 1 cur.execute(\"SELECT name, price FROM cars WHERE Id=:Id\", {\"Id\": uId}) \u547d\u540d\u7684\u5360\u4f4d\u7b26\u4ee5\u5192\u53f7\u5f00\u5934\u3002","title":"\u5177\u6709\u547d\u540d\u5360\u4f4d\u7b26\u7684\u53c2\u6570\u5316\u8bed\u53e5"},{"location":"pages/python/pytutorial/python-sqlite/#Python-SQLite-\u63d2\u5165\u56fe\u7247","text":"\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u56fe\u50cf\u63d2\u5165\u5230 SQLite \u6570\u636e\u5e93\u4e2d\u3002 \u8bf7\u6ce8\u610f\uff0c\u6709\u4e9b\u4eba\u53cd\u5bf9\u5c06\u56fe\u50cf\u653e\u5165\u6570\u636e\u5e93\u3002 \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u53ea\u5c55\u793a\u5982\u4f55\u505a\u3002 \u6211\u4eec\u4e0d\u8ba8\u8bba\u662f\u5426\u5c06\u56fe\u50cf\u4fdd\u5b58\u5728\u6570\u636e\u5e93\u4e2d\u7684\u6280\u672f\u95ee\u9898\u3002 1 sqlite> CREATE TABLE images(id INTEGER PRIMARY KEY, data BLOB); \u5bf9\u4e8e\u6b64\u793a\u4f8b\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a Images \u7684\u65b0\u8868\u3002 \u5bf9\u4e8e\u56fe\u50cf\uff0c\u6211\u4eec\u4f7f\u7528 BLOB \u6570\u636e\u7c7b\u578b\uff0c\u8868\u793a\u4e8c\u8fdb\u5236\u5927\u578b\u5bf9\u8c61\u3002 insert_image.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 #!/usr/bin/env python3 # -*- coding: utf-8 -*- import sqlite3 as sqlite import sys def readImage(): fin = None try: fin = open(\"sid.jpg\", \"rb\") img = fin.read() return img except IOError as e: print(e) sys.exit(1) finally: if fin: fin.close() con = None try: con = sqlite.connect('ydb.db') cur = con.cursor() data = readImage() binary = sqlite.Binary(data) cur.execute(\"INSERT INTO images(data) VALUES (?)\", (binary,) ) con.commit() except sqlite.Error as e: if con: con.rollback() print(e) sys.exit(1) finally: if con: con.close() \u5728\u6b64\u811a\u672c\u4e2d\uff0c\u6211\u4eec\u4ece\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u4e2d\u8bfb\u53d6\u56fe\u50cf\uff0c\u5e76\u5c06\u5176\u5199\u5165 SQLite ydb.db \u6570\u636e\u5e93\u7684 images \u8868\u4e2d\u3002 1 2 3 4 try: fin = open(\"sid.png\", \"rb\") img = fin.read() return img \u6211\u4eec\u4ece\u6587\u4ef6\u7cfb\u7edf\u8bfb\u53d6\u4e8c\u8fdb\u5236\u6570\u636e\u3002 \u6211\u4eec\u6709\u4e00\u4e2a\u540d\u4e3a sid.png \u7684 JPG \u56fe\u50cf\u3002 1 binary = sqlite.Binary(data) \u4f7f\u7528 SQLite Binary \u5bf9\u8c61\u5bf9\u6570\u636e\u8fdb\u884c\u7f16\u7801\u3002 1 cur.execute(\"INSERT INTO images(data) VALUES (?)\", (binary,) ) \u8be5 SQL \u8bed\u53e5\u7528\u4e8e\u5c06\u6620\u50cf\u63d2\u5165\u6570\u636e\u5e93\u3002","title":"Python SQLite \u63d2\u5165\u56fe\u7247"},{"location":"pages/python/pytutorial/python-sqlite/#Python-SQLite-\u8bfb\u53d6\u56fe\u50cf","text":"\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u6267\u884c\u76f8\u53cd\u7684\u64cd\u4f5c\uff1a\u6211\u4eec\u4ece\u6570\u636e\u5e93\u8868\u4e2d\u8bfb\u53d6\u4e00\u4e2a\u56fe\u50cf\u3002 read_image.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 #!/usr/bin/env python3 # -*- coding: utf-8 -*- import sqlite3 as sqlite import sys def writeImage(data): fout = None try: fout = open('sid2.png','wb') fout.write(data) except IOError as e: print(e) sys.exit(1) finally: if fout: fout.close() con = None try: con = sqlite.connect('ydb.db') cur = con.cursor() cur.execute(\"SELECT data FROM images LIMIT 1\") data = cur.fetchone()[0] writeImage(data) except sqlite.Error as e: print(e) sys.exit(1) finally: if con: con.close() \u6211\u4eec\u4ece Images \u8868\u4e2d\u8bfb\u53d6\u56fe\u50cf\u6570\u636e\uff0c\u5e76\u5c06\u5176\u5199\u5165\u53e6\u4e00\u4e2a\u6587\u4ef6 woman2.jpg \u4e2d\u3002 1 2 3 try: fout = open('sid2.png','wb') fout.write(data) \u6211\u4eec\u4ee5\u5199\u5165\u6a21\u5f0f\u6253\u5f00\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002 \u6765\u81ea\u6570\u636e\u5e93\u7684\u6570\u636e\u88ab\u5199\u5165\u6587\u4ef6\u3002 1 2 cur.execute(\"SELECT data FROM images LIMIT 1\") data = cur.fetchone()[0] \u8fd9\u4e24\u884c\u4ece images \u8868\u4e2d\u9009\u62e9\u5e76\u83b7\u53d6\u6570\u636e\u3002 \u6211\u4eec\u4ece\u7b2c\u4e00\u884c\u83b7\u53d6\u4e8c\u8fdb\u5236\u6570\u636e\u3002","title":"Python SQLite \u8bfb\u53d6\u56fe\u50cf"},{"location":"pages/python/pytutorial/python-sqlite/#Python-SQLite-\u5143\u6570\u636e","text":"\u5143\u6570\u636e\u662f\u6709\u5173\u6570\u636e\u5e93\u4e2d\u6570\u636e\u7684\u4fe1\u606f\u3002 SQLite \u4e2d\u7684\u5143\u6570\u636e\u5305\u542b\u6709\u5173\u8868\u548c\u5217\u7684\u4fe1\u606f\uff0c\u6211\u4eec\u5728\u5176\u4e2d\u5b58\u50a8\u6570\u636e\u3002 \u53d7 SQL \u8bed\u53e5\u5f71\u54cd\u7684\u884c\u6570\u662f\u5143\u6570\u636e\u3002 \u7ed3\u679c\u96c6\u4e2d\u8fd4\u56de\u7684\u884c\u6570\u548c\u5217\u6570\u4e5f\u5c5e\u4e8e\u5143\u6570\u636e\u3002 \u53ef\u4ee5\u4f7f\u7528 PRAGMA \u547d\u4ee4\u83b7\u53d6 SQLite \u4e2d\u7684\u5143\u6570\u636e\u3002 SQLite \u5bf9\u8c61\u53ef\u80fd\u5177\u6709\u5c5e\u6027\uff0c\u5373\u5143\u6570\u636e\u3002 \u6700\u540e\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u901a\u8fc7\u67e5\u8be2 SQLite \u7cfb\u7edf sqlite_master \u8868\u6765\u83b7\u53d6\u7279\u5b9a\u7684 metatada\u3002 column_names.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env python3 # -*- coding: utf-8 -*- import sqlite3 as sqlite con = sqlite.connect('ydb.db') with con: cur = con.cursor() cur.execute('PRAGMA table_info(cars)') data = cur.fetchall() for d in data: print(f\"{d[0]} {d[1]} {d[2]}\") \u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u53d1\u51fa PRAGMA table_info(tableName) \u547d\u4ee4\uff0c\u4ee5\u83b7\u53d6\u6709\u5173 cars \u8868\u7684\u4e00\u4e9b\u5143\u6570\u636e\u4fe1\u606f\u3002 1 cur.execute('PRAGMA table_info(cars)') PRAGMA table_info(tableName) \u547d\u4ee4\u4e3a cars \u8868\u4e2d\u7684\u6bcf\u4e00\u5217\u8fd4\u56de\u4e00\u884c\u3002 \u7ed3\u679c\u96c6\u4e2d\u7684\u5217\u5305\u62ec\u5217\u987a\u5e8f\u53f7\uff0c\u5217\u540d\u79f0\uff0c\u6570\u636e\u7c7b\u578b\uff0c\u8be5\u5217\u662f\u5426\u53ef\u4ee5\u4e3a NULL \u4ee5\u53ca\u8be5\u5217\u7684\u9ed8\u8ba4\u503c\u3002 1 2 for d in data: print(f\"{d[0]} {d[1]} {d[2]}\") \u6839\u636e\u63d0\u4f9b\u7684\u4fe1\u606f\uff0c\u6211\u4eec\u6253\u5370\u5217\u987a\u5e8f\u53f7\uff0c\u5217\u540d\u79f0\u548c\u5217\u6570\u636e\u7c7b\u578b\u3002 1 2 3 4 $ ./column_names.py 0 id INT 1 name TEXT 2 price INT \u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6253\u5370 cars \u8868\u4e2d\u7684\u6240\u6709\u884c\u53ca\u5176\u5217\u540d\u3002 column_names2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #!/usr/bin/env python3 # -*- coding: utf-8 -*- import sqlite3 as sqlite con = sqlite.connect('ydb.db') with con: cur = con.cursor() cur.execute('SELECT * FROM cars') col_names = [cn[0] for cn in cur.description] rows = cur.fetchall() print(f\"{col_names[0]:3} {col_names[1]:10} {col_names[2]:7}\") for row in rows: print(f\"{row[0]:<3} {row[1]:<10} {row[2]:7}\") \u6211\u4eec\u5c06 cars \u8868\u7684\u5185\u5bb9\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 \u73b0\u5728\uff0c\u6211\u4eec\u4e5f\u5305\u62ec\u5217\u7684\u540d\u79f0\u3002 \u8bb0\u5f55\u4e0e\u5217\u540d\u5bf9\u9f50\u3002 1 col_names = [cn[0] for cn in cur.description] \u6211\u4eec\u4ece\u6e38\u6807\u5bf9\u8c61\u7684 description \u5c5e\u6027\u83b7\u5f97\u5217\u540d\u3002 1 print(f\"{col_names[0]:3} {col_names[1]:10} {col_names[2]:7}\") \u6b64\u884c\u6253\u5370 cars \u8868\u7684\u4e09\u4e2a\u5217\u540d\u3002 1 2 for row in rows: print(f\"{row[0]:<3} {row[1]:<10} {row[2]:7}\") \u6211\u4eec\u4f7f\u7528 for \u5faa\u73af\u6253\u5370\u884c\u3002 \u6570\u636e\u4e0e\u5217\u540d\u5bf9\u9f50\u3002 1 2 3 4 5 6 7 8 9 $ ./column_names2.py id name price 1 Audi 62300 2 Mercedes 57127 3 Skoda 9000 4 Volvo 29000 5 Bentley 350000 6 Hummer 41400 7 Volkswagen 21600 \u5728\u4e0e\u5143\u6570\u636e\u6709\u5173\u7684\u6700\u540e\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u5217\u51fa ydb.db \u6570\u636e\u5e93\u4e2d\u7684\u6240\u6709\u8868\u3002 list_tables.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/env python3 # -*- coding: utf-8 -*- import sqlite3 as sqlite con = sqlite.connect('ydb.db') with con: cur = con.cursor() cur.execute(\"SELECT name FROM sqlite_master WHERE type='table'\") rows = cur.fetchall() for row in rows: print(row[0]) \u8be5\u4ee3\u7801\u793a\u4f8b\u5c06\u5f53\u524d\u6570\u636e\u5e93\u4e2d\u7684\u6240\u6709\u53ef\u7528\u8868\u6253\u5370\u5230\u7ec8\u7aef\u3002 1 cur.execute(\"SELECT name FROM sqlite_master WHERE type='table'\") \u8868\u540d\u5b58\u50a8\u5728\u7cfb\u7edf sqlite_master \u8868\u4e2d\u3002 1 2 3 $ ./list_tables.py cars images \u8fd9\u4e9b\u662f\u6211\u4eec\u7cfb\u7edf\u4e0a\u7684\u8868\u3002","title":"Python SQLite \u5143\u6570\u636e"},{"location":"pages/python/pytutorial/python-sqlite/#Python-SQLite-\u6570\u636e\u5bfc\u51fa","text":"\u6211\u4eec\u53ef\u4ee5\u8f6c\u50a8 SQL \u683c\u5f0f\u7684\u6570\u636e\u4ee5\u521b\u5efa\u6570\u636e\u5e93\u8868\u7684\u7b80\u5355\u5907\u4efd\u3002 export_table.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 #!/usr/bin/env python3 # -*- coding: utf-8 -*- import sqlite3 as sqlite cars = ( (1, 'Audi', 52643), (2, 'Mercedes', 57642), (3, 'Skoda', 9000), (4, 'Volvo', 29000), (5, 'Bentley', 350000), (6, 'Hummer', 41400), (7, 'Volkswagen', 21600) ) def writeData(data): f = open('cars.sql', 'w') with f: f.write(data) con = sqlite.connect(':memory:') with con: cur = con.cursor() cur.execute(\"DROP TABLE IF EXISTS cars\") cur.execute(\"CREATE TABLE cars(id INT, name TEXT, price INT)\") cur.executemany(\"INSERT INTO cars VALUES(?, ?, ?)\", cars) cur.execute(\"DELETE FROM cars WHERE price < 30000\") data = '\\n'.join(con.iterdump()) writeData(data) \u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5728\u5185\u5b58\u4e2d\u91cd\u65b0\u521b\u5efa\u4e86 cars \u8868\u3002 \u6211\u4eec\u4ece\u8868\u4e2d\u5220\u9664\u4e00\u4e9b\u884c\uff0c\u5e76\u5c06\u8868\u7684\u5f53\u524d\u72b6\u6001\u8f6c\u50a8\u5230 cars.sql \u6587\u4ef6\u4e2d\u3002 \u8be5\u6587\u4ef6\u53ef\u4ee5\u7528\u4f5c\u8868\u7684\u5f53\u524d\u5907\u4efd\u3002 1 2 3 4 5 6 def writeData(data): f = open('cars.sql', 'w') with f: f.write(data) \u8868\u4e2d\u7684\u6570\u636e\u6b63\u5728\u5199\u5165\u6587\u4ef6\u3002 1 con = sqlite.connect(':memory:') \u6211\u4eec\u5728\u5185\u5b58\u4e2d\u521b\u5efa\u4e00\u4e2a\u4e34\u65f6\u8868\u3002 1 2 3 4 cur.execute(\"DROP TABLE IF EXISTS cars\") cur.execute(\"CREATE TABLE cars(id INT, name TEXT, price INT)\") cur.executemany(\"INSERT INTO cars VALUES(?, ?, ?)\", cars) cur.execute(\"DELETE FROM cars WHERE price < 30000\") \u8fd9\u4e9b\u884c\u521b\u5efa cars \u8868\uff0c\u63d2\u5165\u503c\u5e76\u5220\u9664\u884c\uff0c\u5176\u4e2d price \u5c0f\u4e8e 30000 \u5355\u4f4d\u3002 1 data = '\\n'.join(con.iterdump()) con.iterdump() \u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u4ee5 SQL \u6587\u672c\u683c\u5f0f\u8f6c\u50a8\u6570\u636e\u5e93\u3002 \u5185\u7f6e\u7684 join() \u51fd\u6570\u91c7\u7528\u8fed\u4ee3\u5668\uff0c\u5e76\u5c06\u8fed\u4ee3\u5668\u4e2d\u7684\u6240\u6709\u5b57\u7b26\u4e32\u8fde\u63a5\u5728\u4e00\u8d77\uff0c\u5e76\u7528\u65b0\u884c\u5206\u9694\u3002 \u6b64\u6570\u636e\u5c06\u5199\u5165 writeData() \u51fd\u6570\u4e2d\u7684 cars.sql \u6587\u4ef6\u4e2d\u3002 1 2 3 4 5 6 7 8 $ cat cars.sql BEGIN TRANSACTION; CREATE TABLE cars(id INT, name TEXT, price INT); INSERT INTO \"cars\" VALUES(1,'Audi',52643); INSERT INTO \"cars\" VALUES(2,'Mercedes',57642); INSERT INTO \"cars\" VALUES(5,'Bentley',350000); INSERT INTO \"cars\" VALUES(6,'Hummer',41400); COMMIT; \u5e9f\u5f03\u7684\u5185\u5b58\u8f66\u8868\u4e2d\u7684\u5185\u5bb9\u3002","title":"Python SQLite \u6570\u636e\u5bfc\u51fa"},{"location":"pages/python/pytutorial/python-sqlite/#Python-SQLite-\u5bfc\u5165\u6570\u636e","text":"\u73b0\u5728\uff0c\u6211\u4eec\u5c06\u6267\u884c\u53cd\u5411\u64cd\u4f5c\u3002 \u6211\u4eec\u5c06\u8f6c\u50a8\u7684\u8868\u5bfc\u5165\u56de\u5185\u5b58\u3002 import_table.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 #!/usr/bin/env python3 # -*- coding: utf-8 -*- import sqlite3 as sqlite def readData(): f = open('cars.sql', 'r') with f: data = f.read() return data con = sqlite.connect(':memory:') with con: cur = con.cursor() sql = readData() cur.executescript(sql) cur.execute(\"SELECT * FROM cars\") rows = cur.fetchall() for row in rows: print(row) \u5728\u6b64\u811a\u672c\u4e2d\uff0c\u6211\u4eec\u8bfb\u53d6 cars.sql \u6587\u4ef6\u7684\u5185\u5bb9\u5e76\u6267\u884c\u5b83\u3002 \u8fd9\u5c06\u91cd\u65b0\u521b\u5efa\u8f6c\u50a8\u7684\u8868\u3002 1 2 3 4 5 6 7 8 9 def readData(): f = open('cars.sql', 'r') with f: data = f.read() return data \u5728 readData() \u65b9\u6cd5\u5185\u90e8\uff0c\u6211\u4eec\u8bfb\u53d6 cars.sql \u8868\u7684\u5185\u5bb9\u3002 1 cur.executescript(sql) \u6211\u4eec\u8c03\u7528 executescript() \u65b9\u6cd5\u6765\u542f\u52a8 SQL \u811a\u672c\u3002 1 2 3 4 5 6 cur.execute(\"SELECT * FROM cars\") rows = cur.fetchall() for row in rows: print(row) \u6211\u4eec\u9a8c\u8bc1\u6570\u636e\u3002 1 2 3 4 5 $ ./import_table.py (1, u'Audi', 52643) (2, u'Mercedes', 57642) (5, u'Bentley', 350000) (6, u'Hummer', 41400) \u8f93\u51fa\u663e\u793a\u6211\u4eec\u5df2\u7ecf\u6210\u529f\u5730\u91cd\u65b0\u521b\u5efa\u4e86\u4fdd\u5b58\u7684\u6c7d\u8f66\u8868\u3002","title":"Python SQLite \u5bfc\u5165\u6570\u636e"},{"location":"pages/python/pytutorial/python-sqlite/#Python-SQLite-\u4e8b\u52a1","text":"\u4e8b\u52a1\u662f\u9488\u5bf9\u4e00\u4e2a\u6216\u591a\u4e2a\u6570\u636e\u5e93\u4e2d\u6570\u636e\u7684\u6570\u636e\u5e93\u64cd\u4f5c\u7684\u57fa\u672c\u5355\u4f4d\u3002 \u4e8b\u52a1\u4e2d\u6240\u6709 SQL \u8bed\u53e5\u7684\u5f71\u54cd\u53ef\u4ee5\u5168\u90e8\u63d0\u4ea4\u7ed9\u6570\u636e\u5e93\uff0c\u4e5f\u53ef\u4ee5\u5168\u90e8\u56de\u6eda\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cPython sqlite3 \u6a21\u5757\u5728\u6570\u636e\u4fee\u6539\u8bed\u8a00\uff08DML\uff09\u8bed\u53e5\uff08\u5373 INSERT / UPDATE /DELETE / REPLACE \uff09\u4e4b\u524d\u9690\u5f0f\u53d1\u51fa BEGIN \u8bed\u53e5\u3002 sqlite3 \u7528\u4e8e\u5728 DDL \u8bed\u53e5\u4e4b\u524d\u9690\u5f0f\u63d0\u4ea4\u4e00\u4e2a\u6253\u5f00\u7684\u4e8b\u52a1\u3002 \u8fd9\u5df2\u4e0d\u518d\u662f\u8fd9\u79cd\u60c5\u51b5\u3002 \u624b\u52a8\u4e8b\u52a1\u4ee5 BEGIN TRANSACTION \u8bed\u53e5\u5f00\u59cb\uff0c\u5e76\u4ee5 COMMIT \u6216 ROLLBACK \u8bed\u53e5\u7ed3\u675f\u3002 SQLite \u652f\u6301\u4e09\u79cd\u975e\u6807\u51c6\u4e8b\u52a1\u7ea7\u522b\uff1a DEFERRED \uff0c IMMEDIATE \u548c EXCLUSIVE \u3002 Python SQLite \u6a21\u5757\u8fd8\u652f\u6301\u81ea\u52a8\u63d0\u4ea4\u6a21\u5f0f\uff0c\u8be5\u6a21\u5f0f\u4e0b\u5bf9\u8868\u7684\u6240\u6709\u66f4\u6539\u5747\u7acb\u5373\u751f\u6548\u3002 no_commit.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #!/usr/bin/env python3 # -*- coding: utf-8 -*- import sqlite3 as sqlite import sys con = None try: con = sqlite.connect('ydb.db') cur = con.cursor() cur.execute(\"DROP TABLE IF EXISTS friends\") cur.execute(\"CREATE TABLE friends(id INTEGER PRIMARY KEY, name TEXT)\") cur.execute(\"INSERT INTO friends(name) VALUES ('Tom')\") cur.execute(\"INSERT INTO friends(name) VALUES ('Rebecca')\") cur.execute(\"INSERT INTO friends(name) VALUES ('Jim')\") cur.execute(\"INSERT INTO friends(name) VALUES ('Robert')\") #con.commit() except sqlite.Error as e: if con: con.rollback() print(e) sys.exit(1) finally: if con: con.close() \u6211\u4eec\u521b\u5efa\u4e00\u4e2a friends \u8868\uff0c\u5e76\u5c1d\u8bd5\u7528\u6570\u636e\u586b\u5145\u5b83\u3002 \u4f46\u662f\uff0c\u6b63\u5982\u6211\u4eec\u5c06\u770b\u5230\u7684\uff0c\u6570\u636e\u672a\u63d0\u4ea4\u3002 1 #con.commit() \u6ce8\u91ca commit() \u65b9\u6cd5\u3002 \u5982\u679c\u6211\u4eec\u53d6\u6d88\u6ce8\u91ca\u8be5\u884c\uff0c\u5219\u6570\u636e\u5c06\u88ab\u5199\u5165\u8868\u4e2d\u3002 1 2 3 4 5 6 7 sqlite> .tables cars friends images sqlite> SELECT Count(id) FROM friends; Count(id) ---------- 0 sqlite> \u8868\u5df2\u521b\u5efa\uff0c\u4f46\u6570\u636e\u672a\u5199\u5165\u8868\u4e2d\u3002","title":"Python SQLite \u4e8b\u52a1"},{"location":"pages/python/pytutorial/python-sqlite/#Python-SQLite-\u81ea\u52a8\u63d0\u4ea4","text":"\u5728\u81ea\u52a8\u63d0\u4ea4\u6a21\u5f0f\u4e0b\uff0c\u5c06\u7acb\u5373\u6267\u884c\u4e00\u6761 SQL \u8bed\u53e5\u3002 autocommit.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #!/usr/bin/env python3 # -*- coding: utf-8 -*- import sqlite3 as sqlite import sys con = None try: con = sqlite.connect('ydb.db', isolation_level=None) cur = con.cursor() cur.execute(\"DROP TABLE IF EXISTS friends\") cur.execute(\"CREATE TABLE friends(id INTEGER PRIMARY KEY, name TEXT)\") cur.execute(\"INSERT INTO friends(name) VALUES ('Tom')\") cur.execute(\"INSERT INTO friends(name) VALUES ('Rebecca')\") cur.execute(\"INSERT INTO friends(name) VALUES ('Jim')\") cur.execute(\"INSERT INTO friends(name) VALUES ('Robert')\") except sqlite.Error as e: print(e) sys.exit(1) finally: if con: con.close() \u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4ee5\u81ea\u52a8\u63d0\u4ea4\u6a21\u5f0f\u8fde\u63a5\u5230\u6570\u636e\u5e93\u3002 1 con = sqlite.connect('ydb.db', isolation_level=None) \u5f53\u5c06 isolation_level \u8bbe\u7f6e\u4e3a None \u65f6\uff0c\u6211\u4eec\u5177\u6709\u81ea\u52a8\u63d0\u4ea4\u6a21\u5f0f\u3002 1 2 3 4 5 6 7 8 9 $ ./autocommit.py sqlite> SELECT * FROM friends; Id Name ---------- ---------- 1 Tom 2 Rebecca 3 Jim 4 Robert \u6570\u636e\u5df2\u6210\u529f\u63d0\u4ea4\u5230 friends \u8868\u3002","title":"Python SQLite \u81ea\u52a8\u63d0\u4ea4"},{"location":"pages/python/pytutorial/python-strings/","text":"Python \u5b57\u7b26\u4e32 \u00b6 Python \u4e2d\u7684\u5b57\u7b26\u4e32\u662f\u5b57\u7b26\u5e8f\u5217\uff0c\u5b83\u662f\u6d3e\u751f\u7684\u6570\u636e\u7c7b\u578b\u3002 \u5b57\u7b26\u4e32\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u8fd9\u610f\u5473\u7740\u4e00\u65e6\u5b9a\u4e49\uff0c\u5c31\u65e0\u6cd5\u66f4\u6539\u3002 \u8bb8\u591a Python \u65b9\u6cd5\uff0c\u4f8b\u5982 replace() \uff0c join() \u6216 split() \u90fd\u4f1a\u4fee\u6539\u5b57\u7b26\u4e32\u3002 \u4f46\u662f\uff0c\u5b83\u4eec\u4e0d\u4f1a\u4fee\u6539\u539f\u59cb\u5b57\u7b26\u4e32\u3002 \u4ed6\u4eec\u521b\u5efa\u4e00\u4e2a\u5b57\u7b26\u4e32\u526f\u672c\uff0c\u7136\u540e\u5bf9\u5176\u8fdb\u884c\u4fee\u6539\u5e76\u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u3002 Python \u5b57\u7b26\u4e32\u5b57\u9762\u503c \u00b6 \u53ef\u4ee5\u4f7f\u7528\u5355\u5f15\u53f7\uff0c\u53cc\u5f15\u53f7\u6216\u4e09\u5f15\u53f7\u521b\u5efa Python \u5b57\u7b26\u4e32\u3002 \u5f53\u6211\u4eec\u4f7f\u7528\u4e09\u5f15\u53f7\u65f6\uff0c\u5b57\u7b26\u4e32\u53ef\u4ee5\u8de8\u8d8a\u591a\u884c\u800c\u65e0\u9700\u4f7f\u7528\u8f6c\u4e49\u7b26\u3002 string_literals.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/env python # string_literals.py a = \"proximity alert\" b = 'evacuation' c = \"\"\" requiem for a tower \"\"\" print(a) print(b) print(c) \u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4e3a a \uff0c b \u548c c \u53d8\u91cf\u5206\u914d\u4e86\u4e09\u4e2a\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u3002 \u7136\u540e\u5c06\u5b83\u4eec\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 2 3 4 5 6 7 8 $ ./string_literals.py proximity alert evacuation requiem for a tower Python \u4e2d\u7684 Unicode \u00b6 \u5982\u679c\u8981\u521b\u5efa Unicode \u5b57\u7b26\u4e32\uff0c\u8bf7\u5728\u6587\u672c\u5f00\u5934\u6dfb\u52a0 u \u6216 U \u5b57\u7b26\u3002 unicode.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python # unicode.py text = u'\\u041b\\u0435\\u0432 \\u041d\\u0438\\u043a\\u043e\\u043b\\u0430\\ \\u0435\\u0432\\u0438\\u0447 \\u0422\\u043e\\u043b\\u0441\\u0442\\u043e\\u0439: \\n\\ \\u0410\\u043d\\u043d\\u0430 \\u041a\\u0430\\u0440\\u0435\\u043d\\u0438\\u043d\\u0430' print(text) \u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5728 azbuka \u4e2d\u6253\u200b\u200b\u5370\u4e86\u6258\u5c14\u65af\u6cf0\uff1a\u300a\u5b89\u5a1c\u00b7\u5361\u5217\u5c3c\u5a1c\u300b\u3002 1 2 3 $ ./unicode.py \u041b\u0435\u0432 \u041d\u0438\u043a\u043e\u043b\u0430\u0435\u0432\u0438\u0447 \u0422\u043e\u043b\u0441\u0442\u043e\u0439: \u0410\u043d\u043d\u0430 \u041a\u0430\u0440\u0435\u043d\u0438\u043d\u0430 \u5982\u679c\u6211\u4eec\u4f7f\u7528\u7f16\u7801\u6ce8\u91ca\uff0c\u5219\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u4fc4\u8bed\u5b57\u6bcd\u3002 unicode2.py 1 2 3 4 5 6 7 8 #!/usr/bin/python # -*- coding: utf-8 -*- # unicode2.py text = '\u041b\u0435\u0432 \u041d\u0438\u043a\u043e\u043b\u0430\u0435\u0432\u0438\u0447 \u0422\u043e\u043b\u0441\u0442\u043e\u0439: \u0410\u043d\u043d\u0430 \u041a\u0430\u0440\u0435\u043d\u0438\u043d\u0430' print(text) \u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u76f4\u63a5\u5728\u6e90\u4ee3\u7801\u4e2d\u4f7f\u7528\u975e\u62c9\u4e01\u5b57\u7b26\u3002 \u6211\u4eec\u5b9a\u4e49\u4e86\u5e26\u6709\u7f16\u7801\u6ce8\u91ca\u7684 UTF-8 \u7f16\u7801\u3002 \u5728 Python \u4e2d\u4f7f\u7528\u5f15\u53f7 \u00b6 Python \u4e2d\u7684\u5b57\u7b26\u4e32\u7531\u5355\u5f15\u53f7\u6216\u53cc\u5f15\u53f7\u5b57\u7b26\u5206\u9694\u3002 \u5982\u679c\u6211\u4eec\u60f3\u663e\u793a\u62a5\u4ef7\uff0c\u4f8b\u5982\u76f4\u63a5\u8bb2\u8bdd\u600e\u4e48\u529e\uff1f \u6709\u4e24\u79cd\u57fa\u672c\u65b9\u6cd5\u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9\u3002 quotes.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python # quotes.py print(\"There are many stars.\") print(\"He said, \\\"Which one is your favourite?\\\"\") print('There are many stars.') print('He said, \"Which one is your favourite?\"') \u6211\u4eec\u4f7f\u7528 \\ \u5b57\u7b26\u8f6c\u4e49\u5176\u4ed6\u5f15\u53f7\u3002 \u901a\u5e38\uff0c\u53cc\u5f15\u53f7\u7528\u4e8e\u5206\u9694\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u3002 \u4f46\u662f\uff0c\u5f53\u8f6c\u4e49\u65f6\uff0c\u5176\u539f\u59cb\u542b\u4e49\u88ab\u6291\u5236\u3002 \u5b83\u663e\u793a\u4e3a\u666e\u901a\u5b57\u7b26\uff0c\u53ef\u4ee5\u5728\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u4e2d\u4f7f\u7528\u3002 \u5728\u5f15\u53f7\u4e2d\u4f7f\u7528\u5f15\u53f7\u7684\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u662f\u6df7\u5408\u5355\u5f15\u53f7\u548c\u53cc\u5f15\u53f7\u3002 1 2 3 4 5 $ ./quotes.py There are many stars. He said, \"Which one is your favourite?\" There are many stars. He said, \"Which one is your favourite?\" \u8fd9\u662f\u8f93\u51fa\u3002 Python \u5b57\u7b26\u4e32\u957f\u5ea6 \u00b6 len() \u65b9\u6cd5\u8ba1\u7b97\u5b57\u7b26\u4e32\u4e2d\u7684\u5b57\u7b26\u6570\u3002 \u7a7a\u767d\u5b57\u7b26\u4e5f\u7b97\u5728\u5185\u3002 string_length.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python # string_length.py s1 = \"Eagle\" s2 = \"Eagle\\n\" s3 = \"Eagle \" print(len(s1)) print(len(s2)) print(len(s3)) \u6211\u4eec\u8ba1\u7b97\u4e09\u4e2a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u3002 1 2 3 s1 = \"Eagle\" s2 = \"Eagle\\n\" s3 = \"Eagle \" \u5b9a\u4e49\u4e86\u4e09\u4e2a\u5b57\u7b26\u4e32\u3002 \u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\u7684\u672b\u5c3e\u6709\u6362\u884c\u7b26\u3002 \u7b2c\u4e09\u4e2a\u6709\u4e24\u4e2a\u989d\u5916\u7684\u7a7a\u683c\u5b57\u7b26\u3002 1 print(len(s1)) \u6211\u4eec\u5c06\u5b57\u7b26\u6570\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 2 3 4 $ ./length.py 5 6 7 \u4ece\u8f93\u51fa\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u7a7a\u683c\uff08\u5728\u672c\u4f8b\u4e2d\u4e3a\u6362\u884c\u7b26\u548c\u7a7a\u683c\u7b26\uff09\u4e5f\u88ab\u8ba1\u7b97\u5728\u5185\u3002 Python \u5b57\u7b26\u4e32\u5265\u79bb\u7a7a\u767d\u5b57\u7b26 \u00b6 \u5728\u5b57\u7b26\u4e32\u5904\u7406\u4e2d\uff0c\u6211\u4eec\u901a\u5e38\u53ef\u80fd\u4f1a\u4ee5\u5728\u5b57\u7b26\u4e32\u5f00\u5934\u6216\u7ed3\u5c3e\u5904\u5e26\u6709\u7a7a\u767d\u5b57\u7b26\u7684\u5b57\u7b26\u4e32\u7ed3\u5c3e\u3002 \u672f\u8bed\u7a7a\u767d\uff08\u5b57\u7b26\uff09\u662f\u6307\u4e0d\u53ef\u89c1\u7684\u5b57\u7b26\uff0c\u4f8b\u5982\u6362\u884c\u7b26\uff0c\u5236\u8868\u7b26\uff0c\u7a7a\u683c\u6216\u5176\u4ed6\u63a7\u5236\u5b57\u7b26\u3002 \u6211\u4eec\u6709 strip() \uff0c lstrip() \u548c rstrip() \u65b9\u6cd5\u6765\u5220\u9664\u8fd9\u4e9b\u5b57\u7b26\u3002 stripping.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/env python # strippig.py s = \" Eagle \" s2 = s.rstrip() s3 = s.lstrip() s4 = s.strip() print('{0} {1}'.format(s, len(s))) print('{0} {1}'.format(s2, len(s2))) print('{0} {1}'.format(s3, len(s3))) print('{0} {1}'.format(s4, len(s4))) \u6211\u4eec\u5bf9\u5177\u6709\u4e09\u4e2a\u7a7a\u683c\u7684\u5b57\u7b26\u4e32\u5355\u8bcd\u5e94\u7528\u5265\u79bb\u65b9\u6cd5\u3002 \u5f00\u5934\u4e00\u4e2a\u7a7a\u683c\uff0c\u7ed3\u5c3e\u4e24\u4e2a\u7a7a\u683c\u3002 \u8bf7\u6ce8\u610f\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u4f1a\u5220\u9664\u4efb\u610f\u6570\u91cf\u7684\u7a7a\u683c\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u4e00\u4e2a\u7a7a\u683c\u3002 1 s2 = s.rstrip() rstrip() \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5176\u4e2d\u5220\u9664\u4e86\u7ed3\u5c3e\u7684\u7a7a\u767d\u5b57\u7b26\u3002 1 s3 = s.lstrip() lstrip() \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5176\u4e2d\u5220\u9664\u4e86\u524d\u5bfc\u7a7a\u683c\u5b57\u7b26\u3002 1 s4 = s.strip() strip() \u65b9\u6cd5\u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u526f\u672c\uff0c\u5176\u4e2d\u5220\u9664\u4e86\u524d\u5bfc\u548c\u5c3e\u968f\u5b57\u7b26\u3002 1 print('{0} {1}'.format(s2, len(s2))) format() \u65b9\u6cd5\u7528\u4e8e\u52a8\u6001\u6784\u5efa\u5b57\u7b26\u4e32\u3002 {0} \u662f\u53c2\u8003 format() \u65b9\u6cd5\u7b2c\u4e00\u4e2a\u53c2\u6570\u7684\u63a7\u5236\u5b57\u7b26\u3002 {1} \u662f\u6307\u7b2c\u4e8c\u4e2a\u53c2\u6570\u3002 1 2 3 4 5 $ ./stripping.py Eagle 8 Eagle 6 Eagle 7 Eagle 5 \u8fd9\u662f stripping.py \u793a\u4f8b\u7684\u8f93\u51fa\u3002 Python \u5b57\u7b26\u4e32\u8f6c\u4e49\u5e8f\u5217 \u00b6 \u5728\u5904\u7406\u5b57\u7b26\u4e32\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u8f6c\u4e49\u5e8f\u5217\u3002 \u8f6c\u4e49\u5e8f\u5217\u662f\u7279\u6b8a\u5b57\u7b26\uff0c\u5728\u5b57\u7b26\u4e32\u4e2d\u4f7f\u7528\u65f6\u5177\u6709\u7279\u5b9a\u76ee\u7684\u3002 1 print(\" bbb\\raaa\") # prints aaabbb \u56de\u8f66 \\r \u662f\u884c\u5c3e\u5230\u884c\u9996\u7684\u63a7\u5236\u5b57\u7b26\u3002 strophe.py 1 2 3 4 5 6 #!/usr/bin/env python # strophe.py print(\"Incompatible, it don't matter though\\n'cos someone's bound to hear my cry\") print(\"Speak out if you do\\nYou're not easy to find\") \u65b0\u884c\u662f\u63a7\u5236\u5b57\u7b26\uff0c\u5b83\u5f00\u59cb\u65b0\u7684\u4e00\u884c\u6587\u672c\u3002 1 2 3 4 5 $ ./strophe.py Incompatible, it don't matter though 'cos someone's bound to hear my cry Speak out if you do You're not easy to find \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u68c0\u67e5\u9000\u683c\u63a7\u5236\u5b57\u7b26\u3002 1 print(\"Python\\b\\b\\booo\") # prints Pytooo \u9000\u683c\u63a7\u5236\u5b57\u7b26 \\b \u5c06\u5149\u6807\u5411\u540e\u79fb\u52a8\u4e00\u4e2a\u5b57\u7b26\u3002 \u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e09\u4e2a\u9000\u683c\u5b57\u7b26\u5220\u9664\u4e09\u4e2a\u5b57\u6bcd\uff0c\u5e76\u7528\u4e09\u4e2a o \u5b57\u7b26\u66ff\u6362\u5b83\u4eec\u3002 1 print(\"Towering\\tinferno\") # prints Towering inferno \u6c34\u5e73\u9009\u9879\u5361\u5728\u6587\u672c\u4e4b\u95f4\u653e\u7f6e\u4e00\u4e2a\u7a7a\u683c\u3002 1 2 \"Johnie's dog\" 'Johnie\\'s dog' \u5355\u5f15\u53f7\u548c\u53cc\u5f15\u53f7\u53ef\u4ee5\u5d4c\u5957\u3002 \u6216\u8005\uff0c\u5982\u679c\u4ec5\u4f7f\u7528\u5355\u5f15\u53f7\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u53cd\u659c\u6760\u6765\u8f6c\u4e49\u5355\u5f15\u53f7\u7684\u9ed8\u8ba4\u542b\u4e49\u3002 \u5982\u679c\u6211\u4eec\u5728\u5b57\u7b26\u4e32\u524d\u9762\u52a0\u4e0a r\uff0c\u5219\u4f1a\u5f97\u5230\u539f\u59cb\u5b57\u7b26\u4e32\u3002 \u8f6c\u4e49\u5e8f\u5217\u4e0d\u88ab\u89e3\u91ca\u3002 raw.py 1 2 3 4 5 #!/usr/bin/env python # raw.py print(r\"Another world\\n\") 1 2 $ ./raw.py Another world\\n \u6211\u4eec\u5f97\u5230\u7684\u5b57\u7b26\u4e32\u5305\u62ec\u6362\u884c\u7b26\u3002 Python \u6bd4\u8f83\u5b57\u7b26\u4e32 \u00b6 \u6bd4\u8f83\u5b57\u7b26\u4e32\u662f\u7f16\u7a0b\u4e2d\u7684\u5e38\u89c1\u5de5\u4f5c\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 == \u8fd0\u7b97\u7b26\u6bd4\u8f83\u4e24\u4e2a\u5b57\u7b26\u4e32\u3002 \u6211\u4eec\u53ef\u4ee5\u7528\u975e\u7b49\u5f0f != \u8fd0\u7b97\u7b26\u68c0\u67e5\u76f8\u53cd\u7684\u60c5\u51b5\u3002 \u8fd0\u7b97\u7b26\u8fd4\u56de\u5e03\u5c14 True \u6216 False \u3002 comparing.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python # comparing.py print(\"12\" == \"12\") print(\"17\" == \"9\") print(\"aa\" == \"ab\") print(\"abc\" != \"bce\") print(\"efg\" != \"efg\") \u5728\u6b64\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6bd4\u8f83\u4e86\u4e00\u4e9b\u5b57\u7b26\u4e32\u3002 1 print(\"12\" == \"12\") \u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u76f8\u7b49\uff0c\u56e0\u6b64\u8be5\u884c\u8fd4\u56de True \u3002 1 print(\"aa\" == \"ab\") \u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u524d\u4e24\u4e2a\u5b57\u7b26\u76f8\u7b49\u3002 \u63a5\u4e0b\u6765\u6bd4\u8f83\u4ee5\u4e0b\u5b57\u7b26\u3002 \u5b83\u4eec\u4e0d\u540c\uff0c\u56e0\u6b64\u8be5\u884c\u8fd4\u56de False \u3002 1 print(\"abc\" != \"bce\") \u7531\u4e8e\u4e24\u4e2a\u5b57\u7b26\u4e32\u4e0d\u540c\uff0c\u56e0\u6b64\u8be5\u884c\u8fd4\u56de True \u3002 1 2 3 4 5 6 $ ./comparing.py True False False True False \u8fd9\u662f\u8f93\u51fa\u3002 Python \u8bbf\u95ee\u5b57\u7b26\u4e32\u5143\u7d20 \u00b6 \u53ef\u4ee5\u5728 Python \u4e2d\u8bbf\u95ee\u5b57\u7b26\u4e32\u5143\u7d20\u3002 string_elements.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/env python # string_elements.py s = \"Eagle\" print(s[0]) print(s[4]) print(s[-1]) print(s[-2]) print(\"****************\") print(s[0:4]) print(s[1:3]) print(s[:]) \u7d22\u5f15\u64cd\u4f5c\u7528\u4e8e\u83b7\u53d6\u5b57\u7b26\u4e32\u7684\u5143\u7d20\u3002 1 2 print(s[0]) print(s[4]) \u7b2c\u4e00\u884c\u6253\u5370\u7b2c\u4e00\u4e2a\u5b57\u7b26\u3002 \u7b2c\u4e8c\u884c\u6253\u5370\u7b2c\u4e94\u4e2a\u5b57\u7b26\u3002 \u7d22\u5f15\u4ece\u96f6\u5f00\u59cb\u3002 1 2 print(s[-1]) print(s[-2]) \u5f53\u7d22\u5f15\u4e3a\u8d1f\u6570\u65f6\uff0c\u6211\u4eec\u4ece\u5b57\u7b26\u4e32\u7684\u672b\u5c3e\u68c0\u7d22\u5143\u7d20\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5c06\u6253\u5370\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u548c\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u3002 1 print(s[0:4]) \u4e5f\u53ef\u4ee5\u8bbf\u95ee\u5b57\u7b26\u8303\u56f4\u3002 \u8be5\u884c\u6253\u5370\u4ece\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5f00\u59cb\u5230\u7b2c\u56db\u4e2a\u5b57\u7b26\u7ed3\u675f\u7684\u4e00\u7cfb\u5217\u5b57\u7b26\u3002 1 print(s[:]) \u6b64\u884c\u5c06\u6253\u5370\u5b57\u7b26\u4e32\u4e2d\u7684\u6240\u6709\u5b57\u7b26\u3002 1 2 3 4 5 6 7 8 9 $ ./string_elements.py E e e l **************** Eagl ag Eagle \u8fd9\u662f\u8f93\u51fa\u3002 for \u5faa\u73af\u53ef\u7528\u4e8e\u904d\u5386\u5b57\u7b26\u4e32\u7684\u6240\u6709\u5b57\u7b26\u3002 traverse.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python # traverse.py s = \"ZetCode\" for i in s: print(i, \" \", end=\"\") \u8be5\u811a\u672c\u5c06\u7ed9\u5b9a\u5b57\u7b26\u4e32\u7684\u6240\u6709\u5b57\u7b26\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 2 $ ./traverse.py Z e t C o d e \u8fd9\u662f\u8f93\u51fa\u3002 Python \u67e5\u627e\u5b50\u5b57\u7b26\u4e32 \u00b6 find() \uff0c rfind() \uff0c index() \u548c rindex() \u65b9\u6cd5\u7528\u4e8e\u67e5\u627e\u5b57\u7b26\u4e32\u4e2d\u7684\u5b50\u5b57\u7b26\u4e32\u3002 \u5b83\u4eec\u8fd4\u56de\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u5b50\u5b57\u7b26\u4e32\u7684\u7d22\u5f15\u3002 find() \u548c index() \u65b9\u6cd5\u4ece\u5b57\u7b26\u4e32\u7684\u5f00\u5934\u641c\u7d22\u3002 rfind() \u548c rindex() \u4ece\u5b57\u7b26\u4e32\u7684\u672b\u5c3e\u5f00\u59cb\u641c\u7d22\u3002 find() \u548c index() \u65b9\u6cd5\u4e4b\u95f4\u7684\u533a\u522b\u5728\u4e8e\uff0c\u5f53\u627e\u4e0d\u5230\u5b50\u5b57\u7b26\u4e32\u65f6\uff0c\u524d\u8005\u8fd4\u56de-1\u3002 \u540e\u8005\u5f15\u53d1 ValueError \u5f02\u5e38\u3002 1 2 3 4 find(str, beg=0, end=len(string)) rfind(str, beg=0, end=len(string)) index(str, beg=0, end=len(string)) rindex(str, beg=0, end=len(string)) str \u662f\u8981\u641c\u7d22\u7684\u5b50\u5b57\u7b26\u4e32\u3002 beg \u53c2\u6570\u662f\u8d77\u59cb\u7d22\u5f15\uff0c\u9ed8\u8ba4\u503c\u4e3a 0\u3002 end \u53c2\u6570\u662f\u7ec8\u6b62\u7d22\u5f15\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5b83\u7b49\u4e8e\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u3002 substrings.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python # substrings.py a = \"I saw a wolf in the forest. A lone wolf.\" print(a.find(\"wolf\")) print(a.find(\"wolf\", 10, 20)) print(a.find(\"wolf\", 15)) print(a.rfind(\"wolf\")) \u6211\u4eec\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u53e5\u5b50\u3002 \u6211\u4eec\u5c1d\u8bd5\u5728\u53e5\u5b50\u4e2d\u627e\u5230\u5b50\u5b57\u7b26\u4e32\u7684\u7d22\u5f15\u3002 1 print(a.find(\"wolf\")) \u8be5\u884c\u67e5\u627e\u53e5\u5b50\u4e2d\u5b50\u5b57\u7b26\u4e32\u201c wolf\u201d\u7684\u7b2c\u4e00\u6b21\u51fa\u73b0\u3002 \u6253\u5370 8\u3002 1 print(a.find(\"wolf\", 10, 20)) \u8be5\u884c\u5c1d\u8bd5\u67e5\u627e\u201c wolf\u201d\u5b50\u5b57\u7b26\u4e32\u3002 \u5b83\u4ece\u7b2c 10 \u4e2a\u5b57\u7b26\u5f00\u59cb\uff0c\u7136\u540e\u641c\u7d22\u63a5\u4e0b\u6765\u7684 20 \u4e2a\u5b57\u7b26\u3002 \u5728\u6b64\u8303\u56f4\u5185\u6ca1\u6709\u8fd9\u6837\u7684\u5b50\u5b57\u7b26\u4e32\uff0c\u56e0\u6b64\u8be5\u884c\u663e\u793a-1\uff08\u672a\u627e\u5230\uff09\u3002 1 print(a.find(\"wolf\", 15)) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u641c\u7d22\u4ece\u7b2c 15 \u4e2a\u5b57\u7b26\u5230\u5b57\u7b26\u4e32\u7ed3\u5c3e\u7684\u5b50\u5b57\u7b26\u4e32\u3002 \u6211\u4eec\u627e\u5230\u5b50\u5b57\u7b26\u4e32\u7684\u7b2c\u4e8c\u6b21\u51fa\u73b0\u3002 \u8be5\u884c\u6253\u5370 35\u3002 1 print(a.rfind(\"wolf\")) rfind() \u4ece\u672b\u5c3e\u67e5\u627e\u5b50\u5b57\u7b26\u4e32\u3002 \u5b83\u67e5\u627e\u201c wolf\u201d\u5b50\u5b57\u7b26\u4e32\u7684\u7b2c\u4e8c\u6b21\u51fa\u73b0\u3002 \u8be5\u884c\u6253\u5370 35\u3002 1 2 3 4 5 $ ./substrings.py 8 -1 35 35 \u8fd9\u662f\u8f93\u51fa\u3002 \u5728\u7b2c\u4e8c\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 index() \u548c rindex() \u65b9\u6cd5\u3002 substrings2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python # substrings2.py a = \"I saw a wolf in the forest. A lone wolf.\" print(a.index(\"wolf\")) print(a.rindex(\"wolf\")) try: print(a.rindex(\"fox\")) except ValueError as e: print(\"Could not find substring\") \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 index() \u548c rindex() \u65b9\u6cd5\u641c\u7d22\u5b50\u5b57\u7b26\u4e32\u3002 1 2 print(a.index(\"wolf\")) print(a.rindex(\"wolf\")) \u8fd9\u4e9b\u884c\u4ece\u5f00\u5934\u548c\u7ed3\u5c3e\u5f00\u59cb\u67e5\u627e\u201c wolf\u201d\u5b50\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u4e2a\u5339\u914d\u9879\u3002 1 2 3 4 try: print(a.rindex(\"fox\")) except ValueError as e: print(\"Could not find substring\") \u5f53\u627e\u4e0d\u5230\u5b50\u5b57\u7b26\u4e32\u65f6\uff0c rindex() \u65b9\u6cd5\u5f15\u53d1 ValueError \u5f02\u5e38\u3002 1 2 3 4 $ ./substrings2.py 8 35 Could not find substring \u8fd9\u662f\u793a\u4f8b\u7684\u8f93\u51fa\u3002 Python \u57fa\u672c\u5b57\u7b26\u4e32\u64cd\u4f5c \u00b6 \u5728\u4e0b\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u8fdb\u884c\u5b57\u7b26\u4e32\u4e58\u6cd5\u548c\u4e32\u8054\u3002 add_multiply.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python # add_multiply.py print(\"eagle \" * 5) print(\"eagle \" \"falcon\") print(\"eagle \" + \"and \" + \"falcon\") * \u8fd0\u7b97\u7b26\u5c06\u5b57\u7b26\u4e32\u91cd\u590d n \u6b21\u3002 \u5728\u6211\u4eec\u7684\u60c5\u51b5\u4e0b\u662f\u4e94\u6b21\u3002 \u5f7c\u6b64\u76f8\u90bb\u7684\u4e24\u4e2a\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u4f1a\u81ea\u52a8\u8fde\u63a5\u5728\u4e00\u8d77\u3002 \u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528 + \u8fd0\u7b97\u7b26\u663e\u5f0f\u8fde\u63a5\u5b57\u7b26\u4e32\u3002 1 2 3 4 $ ./add_multiply.py eagle eagle eagle eagle eagle eagle falcon eagle and falcon \u8fd9\u662f add_multiply.py \u811a\u672c\u7684\u8f93\u51fa\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 len() \u51fd\u6570\u6765\u8ba1\u7b97\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff08\u4ee5\u5b57\u7b26\u4e3a\u5355\u4f4d\uff09\u3002 eagle.py 1 2 3 4 5 6 7 #!/usr/bin/python # eagle.py var = 'eagle' print(var, \"has\", len(var), \"characters\") \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u8ba1\u7b97\u5b57\u7b26\u4e32\u53d8\u91cf\u4e2d\u7684\u5b57\u7b26\u6570\u3002 1 2 $ ./eagle.py eagle has 5 characters \u4e00\u4e9b\u7f16\u7a0b\u8bed\u8a00\u5141\u8bb8\u9690\u5f0f\u6dfb\u52a0\u5b57\u7b26\u4e32\u548c\u6570\u5b57\u3002 \u5728 Python \u8bed\u8a00\u4e2d\uff0c\u8fd9\u662f\u4e0d\u53ef\u80fd\u7684\u3002 \u6211\u4eec\u5fc5\u987b\u663e\u5f0f\u8f6c\u6362\u503c\u3002 string_number.py 1 2 3 4 5 6 7 #!/usr/bin/python # string_number.py print(int(\"12\") + 12) print(\"There are \" + str(22) + \" oranges.\") print(float('22.33') + 22.55) \u6211\u4eec\u4f7f\u7528\u5185\u7f6e\u7684 int() \u51fd\u6570\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6574\u6570\u3002 \u5e76\u4e14\u8fd8\u6709\u4e00\u4e2a\u5185\u7f6e\u7684 str() \u51fd\u6570\u5c06\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u3002 \u7136\u540e\uff0c\u6211\u4eec\u4f7f\u7528 float() \u51fd\u6570\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6d6e\u70b9\u6570\u3002 Python \u66ff\u6362\u5b57\u7b26\u4e32 \u00b6 replace() \u65b9\u6cd5\u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u5b50\u5b57\u7b26\u4e32\u66ff\u6362\u4e3a\u5176\u4ed6\u5b50\u5b57\u7b26\u4e32\u3002 \u7531\u4e8e Python \u4e2d\u7684\u5b57\u7b26\u4e32\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u56e0\u6b64\u5c06\u4f7f\u7528\u66ff\u6362\u7684\u503c\u6784\u5efa\u65b0\u7684\u5b57\u7b26\u4e32\u3002 1 replace(old, new [, max]) \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c replace() \u65b9\u6cd5\u5c06\u66ff\u6362\u6240\u6709\u51fa\u73b0\u7684\u5b50\u5b57\u7b26\u4e32\u3002 \u8be5\u65b9\u6cd5\u91c7\u7528\u7b2c\u4e09\u4e2a\u53c2\u6570\uff0c\u5b83\u5c06\u66ff\u6362\u6b21\u6570\u9650\u5236\u4e3a\u4e00\u5b9a\u6570\u91cf\u3002 replacing.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python # replacing.py a = \"I saw a wolf in the forest. A lonely wolf.\" b = a.replace(\"wolf\", \"fox\") print(b) c = a.replace(\"wolf\", \"fox\", 1) print(c) \u6211\u4eec\u6709\u4e00\u53e5\u8bdd\u7528\u201c fox\u201d\u4ee3\u66ff\u201c wolf\u201d\u3002 1 b = a.replace(\"wolf\", \"fox\") \u8be5\u884c\u5c06\u6240\u6709\u51fa\u73b0\u7684\u201c\u72fc\u201d\u66ff\u6362\u4e3a\u201c fox\u201d\u3002 1 c = a.replace(\"wolf\", \"fox\", 1) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4ec5\u66ff\u6362\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u60c5\u51b5\u3002 1 2 3 $ ./replacing.py I saw a fox in the forest. A lonely fox. I saw a fox in the forest. A lonely wolf. \u8fd9\u662f\u8f93\u51fa\u3002 Python \u5206\u5272\u548c\u8fde\u63a5\u5b57\u7b26\u4e32 \u00b6 \u53ef\u4ee5\u4f7f\u7528 split() \u6216 rsplit() \u65b9\u6cd5\u5206\u5272\u5b57\u7b26\u4e32\u3002 \u5b83\u4eec\u8fd4\u56de\u4f7f\u7528\u5206\u9694\u7b26\u4ece\u5b57\u7b26\u4e32\u4e2d\u5207\u51fa\u7684\u5b57\u7b26\u4e32\u5217\u8868\u3002 \u53ef\u9009\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u5141\u8bb8\u7684\u6700\u5927\u5206\u5272\u6570\u3002 splitting.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/env python # splitting.py nums = \"1,5,6,8,2,3,1,9\" k = nums.split(\",\") print(k) l = nums.split(\",\", 5) print(l) m = nums.rsplit(\",\", 3) print(m) \u6211\u4eec\u6709\u4e00\u4e2a\u9017\u53f7\u5206\u9694\u7684\u5b57\u7b26\u4e32\u3002 \u6211\u4eec\u628a\u7ef3\u5b50\u5207\u6210\u5c0f\u6bb5\u3002 1 k = nums.split(\",\") \u6211\u4eec\u4f7f\u7528\u9017\u53f7\u4f5c\u4e3a\u5206\u9694\u7b26\u5c06\u5b57\u7b26\u4e32\u5206\u6210\u516b\u4e2a\u90e8\u5206\u3002 \u8be5\u65b9\u6cd5\u8fd4\u56de\u516b\u4e2a\u5b57\u7b26\u4e32\u7684\u5217\u8868\u3002 1 l = nums.split(\",\", 5) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5c06\u5b57\u7b26\u4e32\u5206\u6210\u516d\u4e2a\u90e8\u5206\u3002 \u6709\u4e94\u4e2a\u5b50\u5b57\u7b26\u4e32\uff0c\u5176\u4f59\u90e8\u5206\u4e3a\u5b57\u7b26\u4e32\u3002 1 m = nums.rsplit(\",\", 3) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5c06\u5b57\u7b26\u4e32\u5206\u6210\u56db\u4e2a\u90e8\u5206\u3002 \u8fd9\u6b21\u62c6\u5206\u662f\u4ece\u53f3\u4fa7\u8fdb\u884c\u7684\u3002 1 2 3 4 $ ./splitting.py ['1', '5', '6', '8', '2', '3', '1', '9'] ['1', '5', '6', '8', '2', '3,1,9'] ['1,5,6,8,2', '3', '1', '9'] \u5b57\u7b26\u4e32\u53ef\u4ee5\u4e0e join() \u5b57\u7b26\u4e32\u8fde\u63a5\u3002 \u5b83\u8fd4\u56de\u7531\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7684\u5b57\u7b26\u4e32\u8fde\u63a5\u800c\u6210\u7684\u5b57\u7b26\u4e32\u3002 \u5143\u7d20\u4e4b\u95f4\u7684\u5206\u9694\u7b26\u662f\u63d0\u4f9b\u6b64\u65b9\u6cd5\u7684\u5b57\u7b26\u4e32\u3002 split_join.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python # split_join.py nums = \"1,5,6,8,2,3,1,9\" n = nums.split(\",\") print(n) m = ':'.join(n) print(m) \u9996\u5148\uff0c\u6211\u4eec\u5c06\u5b57\u7b26\u4e32\u62c6\u5206\u4e3a\u5b57\u7b26\u4e32\u5217\u8868\u3002 \u7136\u540e\uff0c\u6211\u4eec\u5c06\u5b57\u7b26\u4e32\u8fde\u63a5\u5230\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\uff0c\u5e76\u7528\u63d0\u4f9b\u7684\u5b57\u7b26\u5206\u9694\u5143\u7d20\u3002 1 m = ':'.join(n) join() \u65b9\u6cd5\u4ece\u5b57\u7b26\u4e32\u5217\u8868\u4e2d\u521b\u5efa\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 \u5143\u7d20\u7531 : \u5b57\u7b26\u5206\u9694\u3002 1 2 3 $ ./split_join.py ['1', '5', '6', '8', '2', '3', '1', '9'] 1:5:6:8:2:3:1:9 \u8fd9\u662f\u8f93\u51fa\u3002 \u53ef\u4ee5\u7528\u4e8e\u5206\u5272\u5b57\u7b26\u4e32\u7684\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f partition() \u3002 \u5b83\u5c06\u5728\u7b2c\u4e00\u6b21\u51fa\u73b0\u5206\u9694\u7b26\u65f6\u5206\u5272\u5b57\u7b26\u4e32\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u4e09\u5143\u7ec4\uff0c\u5176\u4e2d\u5305\u542b\u5206\u9694\u7b26\u4e4b\u524d\u7684\u90e8\u5206\uff0c\u5206\u9694\u7b26\u672c\u8eab\u4ee5\u53ca\u5206\u9694\u7b26\u4e4b\u540e\u7684\u90e8\u5206\u3002 partition.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python # partition.py s = \"1 + 2 + 3 = 6\" a = s.partition(\"=\") print(a) \u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 partition() \u65b9\u6cd5\u3002 1 a = s.partition(\"=\") \u8fd9\u4f1a\u5c06\u5b57\u7b26\u4e32\u5207\u6210\u4e09\u90e8\u5206\u3002 = \u5b57\u7b26\u524d\u7684\u4e00\u4e2a\uff0c\u5206\u9694\u7b26\uff0c\u5206\u9694\u7b26\u7684\u53f3\u8fb9\u3002 1 2 $ ./partition.py ('1 + 2 + 3 ', '=', ' 6') \u8fd9\u662f\u8f93\u51fa\u3002 Python \u5b57\u7b26\u4e32\u5927\u5c0f\u5199 \u00b6 Python \u6709\u56db\u79cd\u5904\u7406\u5b57\u7b26\u4e32\u5927\u5c0f\u5199\u7684\u5b57\u7b26\u4e32\u65b9\u6cd5\u3002 \u8fd9\u4e9b\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u4fee\u6539\u540e\u7684\u5b57\u7b26\u4e32\u3002 convert_case.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python # convert_case.py a = \"ZetCode\" print(a.upper()) print(a.lower()) print(a.swapcase()) print(a.title()) \u6211\u4eec\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32\u8bcd\uff0c\u6211\u4eec\u5c06\u5728\u4e0a\u9762\u6f14\u793a\u8fd9\u56db\u79cd\u65b9\u6cd5\u3002 1 print(a.upper()) upper() \u65b9\u6cd5\u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u526f\u672c\uff0c\u5176\u4e2d\u6240\u6709\u5b57\u7b26\u5747\u8f6c\u6362\u4e3a\u5927\u5199\u3002 1 print(a.lower()) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4ee5\u5c0f\u5199\u5b57\u6bcd\u83b7\u53d6\u5b57\u7b26\u4e32\u7684\u526f\u672c\u3002 1 print(a.swapcase()) swapcase() \u65b9\u6cd5\u4ea4\u6362\u5b57\u6bcd\u7684\u5927\u5c0f\u5199\u3002 \u5c0f\u5199\u5b57\u7b26\u5c06\u53d8\u4e3a\u5927\u5199\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002 1 print(a.title()) title() \u65b9\u6cd5\u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u526f\u672c\uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e3a\u5927\u5199\uff0c\u5176\u4f59\u5b57\u7b26\u4e3a\u5c0f\u5199\u3002 1 2 3 4 5 $ ./convert_case.py ZETCODE zetcode zETcODE Zetcode \u8fd9\u662f\u8f93\u51fa\u3002 \u5bf9\u5b57\u7b26\u4e32\u7684 Python \u64cd\u4f5c \u00b6 \u6709\u51e0\u4e2a\u6709\u7528\u7684\u5185\u7f6e\u51fd\u6570\u53ef\u7528\u4e8e\u5904\u7406\u5b57\u7b26\u4e32\u3002 letters.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #!/usr/bin/env python # letters.py sentence = \"There are 22 apples\" alphas = 0 digits = 0 spaces = 0 for i in sentence: if i.isalpha(): alphas += 1 if i.isdigit(): digits += 1 if i.isspace(): spaces += 1 print(\"There are\", len(sentence), \"characters\") print(\"There are\", alphas, \"alphabetic characters\") print(\"There are\", digits, \"digits\") print(\"There are\", spaces, \"spaces\") \u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32\u53e5\u5b50\u3002 \u6211\u4eec\u8ba1\u7b97\u53e5\u5b50\u4e2d\u7684\u7edd\u5bf9\u5b57\u7b26\u6570\uff0c\u5b57\u6bcd\u5b57\u7b26\u6570\uff0c\u6570\u5b57\u548c\u7a7a\u683c\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u4f7f\u7528\u4ee5\u4e0b\u529f\u80fd\uff1a len() \uff0c isalpha() \uff0c isdigit() \u548c isspace() \u3002 1 2 3 4 5 $ ./letters.py There are 19 characters There are 14 alphabetic characters There are 2 digits There are 3 spaces \u5728\u4e0b\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u6253\u5370\u8db3\u7403\u6bd4\u8d5b\u7684\u7ed3\u679c\u3002 teams1.py 1 2 3 4 5 6 7 #!/usr/bin/env python # teams1.py print(\"Ajax Amsterdam\" \" - \" \"Inter Milano \" \"2:3\") print(\"Real Madridi\" \" - \" \"AC Milano \" \"3:3\") print(\"Dortmund\" \" - \" \"Sparta Praha \" \"2:1\") \u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u76f8\u90bb\u7684\u5b57\u7b26\u4e32\u662f\u4e32\u8054\u5728\u4e00\u8d77\u7684\u3002 1 2 3 4 $ ./teams1.py Ajax Amsterdam - Inter Milano 2:3 Real Madridi - AC Milano 3:3 Dortmund - Sparta Praha 2:1 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u6539\u5584\u8f93\u51fa\u7684\u5916\u89c2\u3002 teams2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/env python # teams2.py teams = { 0: (\"Ajax Amsterdam\", \"Inter Milano\"), 1: (\"Real Madrid\", \"AC Milano\"), 2: (\"Dortmund\", \"Sparta Praha\") } results = (\"2:3\", \"3:3\", \"2:1\") for i in teams: line = teams[i][0].ljust(16) + \"-\".ljust(5) + teams[i][1].ljust(16) + results[i].ljust(3) print(line) ljust() \u65b9\u6cd5\u8fd4\u56de\u5de6\u5bf9\u9f50\u5b57\u7b26\u4e32\uff0c rjust() \u65b9\u6cd5\u8fd4\u56de\u53f3\u5bf9\u9f50\u5b57\u7b26\u4e32\u3002 \u5982\u679c\u5b57\u7b26\u4e32\u5c0f\u4e8e\u6211\u4eec\u63d0\u4f9b\u7684\u5bbd\u5ea6\uff0c\u5219\u5c06\u7528\u7a7a\u683c\u586b\u5145\u3002 1 2 3 4 $ ./teams2.py Ajax Amsterdam - Inter Milano 2:3 Real Madrid - AC Milano 3:3 Dortmund - Sparta Praha 2:1 \u73b0\u5728\u8f93\u51fa\u770b\u8d77\u6765\u66f4\u597d\u3002 Python \u5b57\u7b26\u4e32\u683c\u5f0f\u5316 \u00b6 \u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u662f\u5c06\u5404\u79cd\u503c\u52a8\u6001\u5730\u653e\u5165\u5b57\u7b26\u4e32\u4e2d\u3002 \u53ef\u4ee5\u4f7f\u7528 % \u8fd0\u7b97\u7b26\u6216 format() \u65b9\u6cd5\u5b9e\u73b0\u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u3002 oranges.py 1 2 3 4 5 6 #!/usr/bin/env python # oranges.py print('There are %d oranges in the basket' % 32) print('There are {0} oranges in the basket'.format(32)) \u5728\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u52a8\u6001\u6784\u5efa\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 \u6211\u4eec\u5728\u53e5\u5b50\u4e2d\u52a0\u4e0a\u6570\u5b57\u3002 1 print('There are %d oranges in the basket' % 32) \u6211\u4eec\u4f7f\u7528 %d \u683c\u5f0f\u8bf4\u660e\u7b26\u3002 d \u5b57\u7b26\u8868\u793a\u6211\u4eec\u671f\u671b\u4e00\u4e2a\u6574\u6570\u3002 \u5728\u5b57\u7b26\u4e32\u4e4b\u540e\uff0c\u6211\u4eec\u653e\u7f6e\u4e00\u4e2a\u6a21\u8fd0\u7b97\u7b26\u548c\u4e00\u4e2a\u53c2\u6570\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u6574\u6570\u503c\u3002 1 print('There are {0} oranges in the basket'.format(32)) \u4f7f\u7528 format() \u65b9\u6cd5\u53ef\u4ee5\u5b8c\u6210\u76f8\u540c\u7684\u4efb\u52a1\u3002 \u8fd9\u6b21\uff0c\u683c\u5f0f\u5316\u8bf4\u660e\u7b26\u662f {0} \u3002 1 2 3 $ ./oranges.py There are 32 oranges in the basket There are 32 oranges in the basket \u4e0b\u4e00\u4e2a\u793a\u4f8b\u663e\u793a\u5982\u4f55\u5411\u5b57\u7b26\u4e32\u4e2d\u6dfb\u52a0\u66f4\u591a\u503c\u3002 fruits.py 1 2 3 4 5 6 #!/usr/bin/env python # fruits.py print('There are %d oranges and %d apples in the basket' % (12, 23)) print('There are {0} oranges and {1} apples in the basket'.format(12, 23)) \u5728\u8fd9\u4e24\u884c\u4e2d\uff0c\u6211\u4eec\u6dfb\u52a0\u4e86\u4e24\u4e2a\u683c\u5f0f\u8bf4\u660e\u7b26\u3002 1 2 3 $ ./fruits.py There are 12 oranges and 23 apples in the basket There are 12 oranges and 23 apples in the basket \u5728\u4e0b\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6784\u5efa\u4e00\u4e2a\u5e26\u6709\u6d6e\u70b9\u6570\u548c\u5b57\u7b26\u4e32\u503c\u7684\u5b57\u7b26\u4e32\u3002 height.py 1 2 3 4 5 6 #!/usr/bin/env python # height.py print('Height: %f %s' % (172.3, 'cm')) print('Height: {0:f} {1:s}'.format(172.3, 'cm')) \u6211\u4eec\u6253\u5370\u4e00\u4e2a\u4eba\u7684\u8eab\u9ad8\u3002 1 print('Height: %f %s' % (172.3, 'cm')) \u6d6e\u70b9\u503c\u7684\u683c\u5f0f\u8bf4\u660e\u7b26\u4e3a %f \uff0c\u5b57\u7b26\u4e32\u4e3a %s \u3002 1 print('Height: {0:f} {1:s}'.format(172.3, 'cm')) \u4f7f\u7528 format() \u65b9\u6cd5\uff0c\u6211\u4eec\u5c06 f \u548c s \u5b57\u7b26\u6dfb\u52a0\u5230\u8bf4\u660e\u7b26\u4e2d\u3002 1 2 3 $ ./height.py Height: 172.300000 cm Height: 172.300000 cm \u6211\u4eec\u53ef\u80fd\u4e0d\u559c\u6b22\u4e0a\u9762\u793a\u4f8b\u4e2d\u7684\u6570\u5b57\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5177\u6709 6 \u4e2a\u5c0f\u6570\u4f4d\u7684\u4e8b\u5b9e\u3002 \u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u683c\u5f0f\u8bf4\u660e\u7b26\u4e2d\u7684\u5c0f\u6570\u4f4d\u6570\u3002 height2.py 1 2 3 4 5 6 #!/usr/bin/env python # height2.py print('Height: %.2f %s' % (172.3, 'cm')) print('Height: {0:.2f} {1:s}'.format(172.3, 'cm')) \u5c0f\u6570\u70b9\u540e\u8ddf\u4e00\u4e2a\u6574\u6570\u63a7\u5236\u5c0f\u6570\u4f4d\u6570\u3002 \u5728\u6211\u4eec\u7684\u60c5\u51b5\u4e0b\uff0c\u8be5\u6570\u5b57\u5c06\u4fdd\u7559\u4e24\u4f4d\u5c0f\u6570\u3002 1 2 3 $ ./height2.py Height: 172.30 cm Height: 172.30 cm \u4e0b\u9762\u7684\u793a\u4f8b\u663e\u793a\u5176\u4ed6\u683c\u5f0f\u8bbe\u7f6e\u9009\u9879\u3002 various.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/python # various.py # hexadecimal print(\"%x\" % 300) print(\"%#x\" % 300) # octal print(\"%o\" % 300) # scientific print(\"%e\" % 300000) \u524d\u4e24\u79cd\u683c\u5f0f\u4f7f\u7528\u5341\u516d\u8fdb\u5236\u6570\u3002 x \u5b57\u7b26\u5c06\u4ee5\u5341\u516d\u8fdb\u5236\u683c\u5f0f\u683c\u5f0f\u5316\u6570\u5b57\u3002 # \u5b57\u7b26\u4f1a\u5c06 0x \u6dfb\u52a0\u5230\u5341\u516d\u8fdb\u5236\u6570\u5b57\u3002 o \u5b57\u7b26\u4ee5\u516b\u8fdb\u5236\u683c\u5f0f\u663e\u793a\u6570\u5b57\u3002 e \u5b57\u7b26\u5c06\u4ee5\u79d1\u5b66\u683c\u5f0f\u663e\u793a\u6570\u5b57\u3002 1 2 3 4 5 $ ./various.py 12c 0x12c 454 3.000000e+05 format() \u65b9\u6cd5\u8fd8\u652f\u6301\u4e8c\u8fdb\u5236\u683c\u5f0f\u3002 various2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/python # various2.py # hexadecimal print(\"{:x}\".format(300)) print(\"{:#x}\".format(300)) # binary print(\"{:b}\".format(300)) # octal print(\"{:o}\".format(300)) # scientific print(\"{:e}\".format(300000)) \u8be5\u793a\u4f8b\u4ee5\u5341\u516d\u8fdb\u5236\uff0c\u4e8c\u8fdb\u5236\uff0c\u516b\u8fdb\u5236\u548c\u79d1\u5b66\u683c\u5f0f\u6253\u5370\u6570\u5b57\u3002 \u4e0b\u4e00\u4e2a\u793a\u4f8b\u5c06\u6253\u5370\u4e09\u5217\u6570\u5b57\u3002 columns1.py 1 2 3 4 5 6 #!/usr/bin/env python # columns1.py for x in range(1, 11): print('%d %d %d' % (x, x*x, x*x*x)) \u6570\u5b57\u5de6\u5bf9\u9f50\uff0c\u8f93\u51fa\u4e0d\u662f\u6700\u4f73\u7684\u3002 1 2 3 4 5 6 7 8 9 10 11 $ ./columns1.py 1 1 1 2 4 8 3 9 27 4 16 64 5 25 125 6 36 216 7 49 343 8 64 512 9 81 729 10 100 1000 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u4f7f\u7528\u5bbd\u5ea6\u8bf4\u660e\u7b26\u3002 \u5bbd\u5ea6\u8bf4\u660e\u7b26\u5b9a\u4e49\u5bf9\u8c61\u7684\u6700\u5c0f\u5bbd\u5ea6\u3002 \u5982\u679c\u5bf9\u8c61\u5c0f\u4e8e\u5bbd\u5ea6\uff0c\u5219\u5c06\u586b\u5145\u7a7a\u683c\u3002 columns2.py 1 2 3 4 5 6 #!/usr/bin/env python # columns2.py for x in range(1, 11): print('%2d %3d %4d' % (x, x*x, x*x*x)) \u73b0\u5728\u8f93\u51fa\u770b\u8d77\u6765\u6b63\u5e38\u3002 \u503c 2 \u4f7f\u7b2c\u4e00\u5217\u5bbd 2 \u4e2a\u5b57\u7b26\u3002 1 2 3 4 5 6 7 8 9 10 11 $ ./columns2.py 1 1 1 2 4 8 3 9 27 4 16 64 5 25 125 6 36 216 7 49 343 8 64 512 9 81 729 10 100 1000 \u73b0\u5728\u6211\u4eec\u6709\u4e86 format() \u65b9\u6cd5\u7684\u6539\u8fdb\u683c\u5f0f\u3002 columns3.py 1 2 3 4 5 6 #!/usr/bin/env python # columns3.py for x in range(1, 11): print('{0:2d} {1:3d} {2:4d}'.format(x, x*x, x*x*x))","title":"Python \u5b57\u7b26\u4e32"},{"location":"pages/python/pytutorial/python-strings/#Python-\u5b57\u7b26\u4e32","text":"Python \u4e2d\u7684\u5b57\u7b26\u4e32\u662f\u5b57\u7b26\u5e8f\u5217\uff0c\u5b83\u662f\u6d3e\u751f\u7684\u6570\u636e\u7c7b\u578b\u3002 \u5b57\u7b26\u4e32\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u8fd9\u610f\u5473\u7740\u4e00\u65e6\u5b9a\u4e49\uff0c\u5c31\u65e0\u6cd5\u66f4\u6539\u3002 \u8bb8\u591a Python \u65b9\u6cd5\uff0c\u4f8b\u5982 replace() \uff0c join() \u6216 split() \u90fd\u4f1a\u4fee\u6539\u5b57\u7b26\u4e32\u3002 \u4f46\u662f\uff0c\u5b83\u4eec\u4e0d\u4f1a\u4fee\u6539\u539f\u59cb\u5b57\u7b26\u4e32\u3002 \u4ed6\u4eec\u521b\u5efa\u4e00\u4e2a\u5b57\u7b26\u4e32\u526f\u672c\uff0c\u7136\u540e\u5bf9\u5176\u8fdb\u884c\u4fee\u6539\u5e76\u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u3002","title":"Python \u5b57\u7b26\u4e32"},{"location":"pages/python/pytutorial/python-strings/#Python-\u5b57\u7b26\u4e32\u5b57\u9762\u503c","text":"\u53ef\u4ee5\u4f7f\u7528\u5355\u5f15\u53f7\uff0c\u53cc\u5f15\u53f7\u6216\u4e09\u5f15\u53f7\u521b\u5efa Python \u5b57\u7b26\u4e32\u3002 \u5f53\u6211\u4eec\u4f7f\u7528\u4e09\u5f15\u53f7\u65f6\uff0c\u5b57\u7b26\u4e32\u53ef\u4ee5\u8de8\u8d8a\u591a\u884c\u800c\u65e0\u9700\u4f7f\u7528\u8f6c\u4e49\u7b26\u3002 string_literals.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/env python # string_literals.py a = \"proximity alert\" b = 'evacuation' c = \"\"\" requiem for a tower \"\"\" print(a) print(b) print(c) \u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4e3a a \uff0c b \u548c c \u53d8\u91cf\u5206\u914d\u4e86\u4e09\u4e2a\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u3002 \u7136\u540e\u5c06\u5b83\u4eec\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 2 3 4 5 6 7 8 $ ./string_literals.py proximity alert evacuation requiem for a tower","title":"Python \u5b57\u7b26\u4e32\u5b57\u9762\u503c"},{"location":"pages/python/pytutorial/python-strings/#Python-\u4e2d\u7684-Unicode","text":"\u5982\u679c\u8981\u521b\u5efa Unicode \u5b57\u7b26\u4e32\uff0c\u8bf7\u5728\u6587\u672c\u5f00\u5934\u6dfb\u52a0 u \u6216 U \u5b57\u7b26\u3002 unicode.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python # unicode.py text = u'\\u041b\\u0435\\u0432 \\u041d\\u0438\\u043a\\u043e\\u043b\\u0430\\ \\u0435\\u0432\\u0438\\u0447 \\u0422\\u043e\\u043b\\u0441\\u0442\\u043e\\u0439: \\n\\ \\u0410\\u043d\\u043d\\u0430 \\u041a\\u0430\\u0440\\u0435\\u043d\\u0438\\u043d\\u0430' print(text) \u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5728 azbuka \u4e2d\u6253\u200b\u200b\u5370\u4e86\u6258\u5c14\u65af\u6cf0\uff1a\u300a\u5b89\u5a1c\u00b7\u5361\u5217\u5c3c\u5a1c\u300b\u3002 1 2 3 $ ./unicode.py \u041b\u0435\u0432 \u041d\u0438\u043a\u043e\u043b\u0430\u0435\u0432\u0438\u0447 \u0422\u043e\u043b\u0441\u0442\u043e\u0439: \u0410\u043d\u043d\u0430 \u041a\u0430\u0440\u0435\u043d\u0438\u043d\u0430 \u5982\u679c\u6211\u4eec\u4f7f\u7528\u7f16\u7801\u6ce8\u91ca\uff0c\u5219\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u4fc4\u8bed\u5b57\u6bcd\u3002 unicode2.py 1 2 3 4 5 6 7 8 #!/usr/bin/python # -*- coding: utf-8 -*- # unicode2.py text = '\u041b\u0435\u0432 \u041d\u0438\u043a\u043e\u043b\u0430\u0435\u0432\u0438\u0447 \u0422\u043e\u043b\u0441\u0442\u043e\u0439: \u0410\u043d\u043d\u0430 \u041a\u0430\u0440\u0435\u043d\u0438\u043d\u0430' print(text) \u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u76f4\u63a5\u5728\u6e90\u4ee3\u7801\u4e2d\u4f7f\u7528\u975e\u62c9\u4e01\u5b57\u7b26\u3002 \u6211\u4eec\u5b9a\u4e49\u4e86\u5e26\u6709\u7f16\u7801\u6ce8\u91ca\u7684 UTF-8 \u7f16\u7801\u3002","title":"Python \u4e2d\u7684 Unicode"},{"location":"pages/python/pytutorial/python-strings/#\u5728-Python-\u4e2d\u4f7f\u7528\u5f15\u53f7","text":"Python \u4e2d\u7684\u5b57\u7b26\u4e32\u7531\u5355\u5f15\u53f7\u6216\u53cc\u5f15\u53f7\u5b57\u7b26\u5206\u9694\u3002 \u5982\u679c\u6211\u4eec\u60f3\u663e\u793a\u62a5\u4ef7\uff0c\u4f8b\u5982\u76f4\u63a5\u8bb2\u8bdd\u600e\u4e48\u529e\uff1f \u6709\u4e24\u79cd\u57fa\u672c\u65b9\u6cd5\u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9\u3002 quotes.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python # quotes.py print(\"There are many stars.\") print(\"He said, \\\"Which one is your favourite?\\\"\") print('There are many stars.') print('He said, \"Which one is your favourite?\"') \u6211\u4eec\u4f7f\u7528 \\ \u5b57\u7b26\u8f6c\u4e49\u5176\u4ed6\u5f15\u53f7\u3002 \u901a\u5e38\uff0c\u53cc\u5f15\u53f7\u7528\u4e8e\u5206\u9694\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u3002 \u4f46\u662f\uff0c\u5f53\u8f6c\u4e49\u65f6\uff0c\u5176\u539f\u59cb\u542b\u4e49\u88ab\u6291\u5236\u3002 \u5b83\u663e\u793a\u4e3a\u666e\u901a\u5b57\u7b26\uff0c\u53ef\u4ee5\u5728\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u4e2d\u4f7f\u7528\u3002 \u5728\u5f15\u53f7\u4e2d\u4f7f\u7528\u5f15\u53f7\u7684\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u662f\u6df7\u5408\u5355\u5f15\u53f7\u548c\u53cc\u5f15\u53f7\u3002 1 2 3 4 5 $ ./quotes.py There are many stars. He said, \"Which one is your favourite?\" There are many stars. He said, \"Which one is your favourite?\" \u8fd9\u662f\u8f93\u51fa\u3002","title":"\u5728 Python \u4e2d\u4f7f\u7528\u5f15\u53f7"},{"location":"pages/python/pytutorial/python-strings/#Python-\u5b57\u7b26\u4e32\u957f\u5ea6","text":"len() \u65b9\u6cd5\u8ba1\u7b97\u5b57\u7b26\u4e32\u4e2d\u7684\u5b57\u7b26\u6570\u3002 \u7a7a\u767d\u5b57\u7b26\u4e5f\u7b97\u5728\u5185\u3002 string_length.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python # string_length.py s1 = \"Eagle\" s2 = \"Eagle\\n\" s3 = \"Eagle \" print(len(s1)) print(len(s2)) print(len(s3)) \u6211\u4eec\u8ba1\u7b97\u4e09\u4e2a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u3002 1 2 3 s1 = \"Eagle\" s2 = \"Eagle\\n\" s3 = \"Eagle \" \u5b9a\u4e49\u4e86\u4e09\u4e2a\u5b57\u7b26\u4e32\u3002 \u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\u7684\u672b\u5c3e\u6709\u6362\u884c\u7b26\u3002 \u7b2c\u4e09\u4e2a\u6709\u4e24\u4e2a\u989d\u5916\u7684\u7a7a\u683c\u5b57\u7b26\u3002 1 print(len(s1)) \u6211\u4eec\u5c06\u5b57\u7b26\u6570\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 2 3 4 $ ./length.py 5 6 7 \u4ece\u8f93\u51fa\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u7a7a\u683c\uff08\u5728\u672c\u4f8b\u4e2d\u4e3a\u6362\u884c\u7b26\u548c\u7a7a\u683c\u7b26\uff09\u4e5f\u88ab\u8ba1\u7b97\u5728\u5185\u3002","title":"Python \u5b57\u7b26\u4e32\u957f\u5ea6"},{"location":"pages/python/pytutorial/python-strings/#Python-\u5b57\u7b26\u4e32\u5265\u79bb\u7a7a\u767d\u5b57\u7b26","text":"\u5728\u5b57\u7b26\u4e32\u5904\u7406\u4e2d\uff0c\u6211\u4eec\u901a\u5e38\u53ef\u80fd\u4f1a\u4ee5\u5728\u5b57\u7b26\u4e32\u5f00\u5934\u6216\u7ed3\u5c3e\u5904\u5e26\u6709\u7a7a\u767d\u5b57\u7b26\u7684\u5b57\u7b26\u4e32\u7ed3\u5c3e\u3002 \u672f\u8bed\u7a7a\u767d\uff08\u5b57\u7b26\uff09\u662f\u6307\u4e0d\u53ef\u89c1\u7684\u5b57\u7b26\uff0c\u4f8b\u5982\u6362\u884c\u7b26\uff0c\u5236\u8868\u7b26\uff0c\u7a7a\u683c\u6216\u5176\u4ed6\u63a7\u5236\u5b57\u7b26\u3002 \u6211\u4eec\u6709 strip() \uff0c lstrip() \u548c rstrip() \u65b9\u6cd5\u6765\u5220\u9664\u8fd9\u4e9b\u5b57\u7b26\u3002 stripping.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/env python # strippig.py s = \" Eagle \" s2 = s.rstrip() s3 = s.lstrip() s4 = s.strip() print('{0} {1}'.format(s, len(s))) print('{0} {1}'.format(s2, len(s2))) print('{0} {1}'.format(s3, len(s3))) print('{0} {1}'.format(s4, len(s4))) \u6211\u4eec\u5bf9\u5177\u6709\u4e09\u4e2a\u7a7a\u683c\u7684\u5b57\u7b26\u4e32\u5355\u8bcd\u5e94\u7528\u5265\u79bb\u65b9\u6cd5\u3002 \u5f00\u5934\u4e00\u4e2a\u7a7a\u683c\uff0c\u7ed3\u5c3e\u4e24\u4e2a\u7a7a\u683c\u3002 \u8bf7\u6ce8\u610f\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u4f1a\u5220\u9664\u4efb\u610f\u6570\u91cf\u7684\u7a7a\u683c\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u4e00\u4e2a\u7a7a\u683c\u3002 1 s2 = s.rstrip() rstrip() \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5176\u4e2d\u5220\u9664\u4e86\u7ed3\u5c3e\u7684\u7a7a\u767d\u5b57\u7b26\u3002 1 s3 = s.lstrip() lstrip() \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5176\u4e2d\u5220\u9664\u4e86\u524d\u5bfc\u7a7a\u683c\u5b57\u7b26\u3002 1 s4 = s.strip() strip() \u65b9\u6cd5\u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u526f\u672c\uff0c\u5176\u4e2d\u5220\u9664\u4e86\u524d\u5bfc\u548c\u5c3e\u968f\u5b57\u7b26\u3002 1 print('{0} {1}'.format(s2, len(s2))) format() \u65b9\u6cd5\u7528\u4e8e\u52a8\u6001\u6784\u5efa\u5b57\u7b26\u4e32\u3002 {0} \u662f\u53c2\u8003 format() \u65b9\u6cd5\u7b2c\u4e00\u4e2a\u53c2\u6570\u7684\u63a7\u5236\u5b57\u7b26\u3002 {1} \u662f\u6307\u7b2c\u4e8c\u4e2a\u53c2\u6570\u3002 1 2 3 4 5 $ ./stripping.py Eagle 8 Eagle 6 Eagle 7 Eagle 5 \u8fd9\u662f stripping.py \u793a\u4f8b\u7684\u8f93\u51fa\u3002","title":"Python \u5b57\u7b26\u4e32\u5265\u79bb\u7a7a\u767d\u5b57\u7b26"},{"location":"pages/python/pytutorial/python-strings/#Python-\u5b57\u7b26\u4e32\u8f6c\u4e49\u5e8f\u5217","text":"\u5728\u5904\u7406\u5b57\u7b26\u4e32\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u8f6c\u4e49\u5e8f\u5217\u3002 \u8f6c\u4e49\u5e8f\u5217\u662f\u7279\u6b8a\u5b57\u7b26\uff0c\u5728\u5b57\u7b26\u4e32\u4e2d\u4f7f\u7528\u65f6\u5177\u6709\u7279\u5b9a\u76ee\u7684\u3002 1 print(\" bbb\\raaa\") # prints aaabbb \u56de\u8f66 \\r \u662f\u884c\u5c3e\u5230\u884c\u9996\u7684\u63a7\u5236\u5b57\u7b26\u3002 strophe.py 1 2 3 4 5 6 #!/usr/bin/env python # strophe.py print(\"Incompatible, it don't matter though\\n'cos someone's bound to hear my cry\") print(\"Speak out if you do\\nYou're not easy to find\") \u65b0\u884c\u662f\u63a7\u5236\u5b57\u7b26\uff0c\u5b83\u5f00\u59cb\u65b0\u7684\u4e00\u884c\u6587\u672c\u3002 1 2 3 4 5 $ ./strophe.py Incompatible, it don't matter though 'cos someone's bound to hear my cry Speak out if you do You're not easy to find \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u68c0\u67e5\u9000\u683c\u63a7\u5236\u5b57\u7b26\u3002 1 print(\"Python\\b\\b\\booo\") # prints Pytooo \u9000\u683c\u63a7\u5236\u5b57\u7b26 \\b \u5c06\u5149\u6807\u5411\u540e\u79fb\u52a8\u4e00\u4e2a\u5b57\u7b26\u3002 \u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e09\u4e2a\u9000\u683c\u5b57\u7b26\u5220\u9664\u4e09\u4e2a\u5b57\u6bcd\uff0c\u5e76\u7528\u4e09\u4e2a o \u5b57\u7b26\u66ff\u6362\u5b83\u4eec\u3002 1 print(\"Towering\\tinferno\") # prints Towering inferno \u6c34\u5e73\u9009\u9879\u5361\u5728\u6587\u672c\u4e4b\u95f4\u653e\u7f6e\u4e00\u4e2a\u7a7a\u683c\u3002 1 2 \"Johnie's dog\" 'Johnie\\'s dog' \u5355\u5f15\u53f7\u548c\u53cc\u5f15\u53f7\u53ef\u4ee5\u5d4c\u5957\u3002 \u6216\u8005\uff0c\u5982\u679c\u4ec5\u4f7f\u7528\u5355\u5f15\u53f7\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u53cd\u659c\u6760\u6765\u8f6c\u4e49\u5355\u5f15\u53f7\u7684\u9ed8\u8ba4\u542b\u4e49\u3002 \u5982\u679c\u6211\u4eec\u5728\u5b57\u7b26\u4e32\u524d\u9762\u52a0\u4e0a r\uff0c\u5219\u4f1a\u5f97\u5230\u539f\u59cb\u5b57\u7b26\u4e32\u3002 \u8f6c\u4e49\u5e8f\u5217\u4e0d\u88ab\u89e3\u91ca\u3002 raw.py 1 2 3 4 5 #!/usr/bin/env python # raw.py print(r\"Another world\\n\") 1 2 $ ./raw.py Another world\\n \u6211\u4eec\u5f97\u5230\u7684\u5b57\u7b26\u4e32\u5305\u62ec\u6362\u884c\u7b26\u3002","title":"Python \u5b57\u7b26\u4e32\u8f6c\u4e49\u5e8f\u5217"},{"location":"pages/python/pytutorial/python-strings/#Python-\u6bd4\u8f83\u5b57\u7b26\u4e32","text":"\u6bd4\u8f83\u5b57\u7b26\u4e32\u662f\u7f16\u7a0b\u4e2d\u7684\u5e38\u89c1\u5de5\u4f5c\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 == \u8fd0\u7b97\u7b26\u6bd4\u8f83\u4e24\u4e2a\u5b57\u7b26\u4e32\u3002 \u6211\u4eec\u53ef\u4ee5\u7528\u975e\u7b49\u5f0f != \u8fd0\u7b97\u7b26\u68c0\u67e5\u76f8\u53cd\u7684\u60c5\u51b5\u3002 \u8fd0\u7b97\u7b26\u8fd4\u56de\u5e03\u5c14 True \u6216 False \u3002 comparing.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python # comparing.py print(\"12\" == \"12\") print(\"17\" == \"9\") print(\"aa\" == \"ab\") print(\"abc\" != \"bce\") print(\"efg\" != \"efg\") \u5728\u6b64\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6bd4\u8f83\u4e86\u4e00\u4e9b\u5b57\u7b26\u4e32\u3002 1 print(\"12\" == \"12\") \u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u76f8\u7b49\uff0c\u56e0\u6b64\u8be5\u884c\u8fd4\u56de True \u3002 1 print(\"aa\" == \"ab\") \u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u524d\u4e24\u4e2a\u5b57\u7b26\u76f8\u7b49\u3002 \u63a5\u4e0b\u6765\u6bd4\u8f83\u4ee5\u4e0b\u5b57\u7b26\u3002 \u5b83\u4eec\u4e0d\u540c\uff0c\u56e0\u6b64\u8be5\u884c\u8fd4\u56de False \u3002 1 print(\"abc\" != \"bce\") \u7531\u4e8e\u4e24\u4e2a\u5b57\u7b26\u4e32\u4e0d\u540c\uff0c\u56e0\u6b64\u8be5\u884c\u8fd4\u56de True \u3002 1 2 3 4 5 6 $ ./comparing.py True False False True False \u8fd9\u662f\u8f93\u51fa\u3002","title":"Python \u6bd4\u8f83\u5b57\u7b26\u4e32"},{"location":"pages/python/pytutorial/python-strings/#Python-\u8bbf\u95ee\u5b57\u7b26\u4e32\u5143\u7d20","text":"\u53ef\u4ee5\u5728 Python \u4e2d\u8bbf\u95ee\u5b57\u7b26\u4e32\u5143\u7d20\u3002 string_elements.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/env python # string_elements.py s = \"Eagle\" print(s[0]) print(s[4]) print(s[-1]) print(s[-2]) print(\"****************\") print(s[0:4]) print(s[1:3]) print(s[:]) \u7d22\u5f15\u64cd\u4f5c\u7528\u4e8e\u83b7\u53d6\u5b57\u7b26\u4e32\u7684\u5143\u7d20\u3002 1 2 print(s[0]) print(s[4]) \u7b2c\u4e00\u884c\u6253\u5370\u7b2c\u4e00\u4e2a\u5b57\u7b26\u3002 \u7b2c\u4e8c\u884c\u6253\u5370\u7b2c\u4e94\u4e2a\u5b57\u7b26\u3002 \u7d22\u5f15\u4ece\u96f6\u5f00\u59cb\u3002 1 2 print(s[-1]) print(s[-2]) \u5f53\u7d22\u5f15\u4e3a\u8d1f\u6570\u65f6\uff0c\u6211\u4eec\u4ece\u5b57\u7b26\u4e32\u7684\u672b\u5c3e\u68c0\u7d22\u5143\u7d20\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5c06\u6253\u5370\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u548c\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u3002 1 print(s[0:4]) \u4e5f\u53ef\u4ee5\u8bbf\u95ee\u5b57\u7b26\u8303\u56f4\u3002 \u8be5\u884c\u6253\u5370\u4ece\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5f00\u59cb\u5230\u7b2c\u56db\u4e2a\u5b57\u7b26\u7ed3\u675f\u7684\u4e00\u7cfb\u5217\u5b57\u7b26\u3002 1 print(s[:]) \u6b64\u884c\u5c06\u6253\u5370\u5b57\u7b26\u4e32\u4e2d\u7684\u6240\u6709\u5b57\u7b26\u3002 1 2 3 4 5 6 7 8 9 $ ./string_elements.py E e e l **************** Eagl ag Eagle \u8fd9\u662f\u8f93\u51fa\u3002 for \u5faa\u73af\u53ef\u7528\u4e8e\u904d\u5386\u5b57\u7b26\u4e32\u7684\u6240\u6709\u5b57\u7b26\u3002 traverse.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python # traverse.py s = \"ZetCode\" for i in s: print(i, \" \", end=\"\") \u8be5\u811a\u672c\u5c06\u7ed9\u5b9a\u5b57\u7b26\u4e32\u7684\u6240\u6709\u5b57\u7b26\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 2 $ ./traverse.py Z e t C o d e \u8fd9\u662f\u8f93\u51fa\u3002","title":"Python \u8bbf\u95ee\u5b57\u7b26\u4e32\u5143\u7d20"},{"location":"pages/python/pytutorial/python-strings/#Python-\u67e5\u627e\u5b50\u5b57\u7b26\u4e32","text":"find() \uff0c rfind() \uff0c index() \u548c rindex() \u65b9\u6cd5\u7528\u4e8e\u67e5\u627e\u5b57\u7b26\u4e32\u4e2d\u7684\u5b50\u5b57\u7b26\u4e32\u3002 \u5b83\u4eec\u8fd4\u56de\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u5b50\u5b57\u7b26\u4e32\u7684\u7d22\u5f15\u3002 find() \u548c index() \u65b9\u6cd5\u4ece\u5b57\u7b26\u4e32\u7684\u5f00\u5934\u641c\u7d22\u3002 rfind() \u548c rindex() \u4ece\u5b57\u7b26\u4e32\u7684\u672b\u5c3e\u5f00\u59cb\u641c\u7d22\u3002 find() \u548c index() \u65b9\u6cd5\u4e4b\u95f4\u7684\u533a\u522b\u5728\u4e8e\uff0c\u5f53\u627e\u4e0d\u5230\u5b50\u5b57\u7b26\u4e32\u65f6\uff0c\u524d\u8005\u8fd4\u56de-1\u3002 \u540e\u8005\u5f15\u53d1 ValueError \u5f02\u5e38\u3002 1 2 3 4 find(str, beg=0, end=len(string)) rfind(str, beg=0, end=len(string)) index(str, beg=0, end=len(string)) rindex(str, beg=0, end=len(string)) str \u662f\u8981\u641c\u7d22\u7684\u5b50\u5b57\u7b26\u4e32\u3002 beg \u53c2\u6570\u662f\u8d77\u59cb\u7d22\u5f15\uff0c\u9ed8\u8ba4\u503c\u4e3a 0\u3002 end \u53c2\u6570\u662f\u7ec8\u6b62\u7d22\u5f15\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5b83\u7b49\u4e8e\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u3002 substrings.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python # substrings.py a = \"I saw a wolf in the forest. A lone wolf.\" print(a.find(\"wolf\")) print(a.find(\"wolf\", 10, 20)) print(a.find(\"wolf\", 15)) print(a.rfind(\"wolf\")) \u6211\u4eec\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u53e5\u5b50\u3002 \u6211\u4eec\u5c1d\u8bd5\u5728\u53e5\u5b50\u4e2d\u627e\u5230\u5b50\u5b57\u7b26\u4e32\u7684\u7d22\u5f15\u3002 1 print(a.find(\"wolf\")) \u8be5\u884c\u67e5\u627e\u53e5\u5b50\u4e2d\u5b50\u5b57\u7b26\u4e32\u201c wolf\u201d\u7684\u7b2c\u4e00\u6b21\u51fa\u73b0\u3002 \u6253\u5370 8\u3002 1 print(a.find(\"wolf\", 10, 20)) \u8be5\u884c\u5c1d\u8bd5\u67e5\u627e\u201c wolf\u201d\u5b50\u5b57\u7b26\u4e32\u3002 \u5b83\u4ece\u7b2c 10 \u4e2a\u5b57\u7b26\u5f00\u59cb\uff0c\u7136\u540e\u641c\u7d22\u63a5\u4e0b\u6765\u7684 20 \u4e2a\u5b57\u7b26\u3002 \u5728\u6b64\u8303\u56f4\u5185\u6ca1\u6709\u8fd9\u6837\u7684\u5b50\u5b57\u7b26\u4e32\uff0c\u56e0\u6b64\u8be5\u884c\u663e\u793a-1\uff08\u672a\u627e\u5230\uff09\u3002 1 print(a.find(\"wolf\", 15)) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u641c\u7d22\u4ece\u7b2c 15 \u4e2a\u5b57\u7b26\u5230\u5b57\u7b26\u4e32\u7ed3\u5c3e\u7684\u5b50\u5b57\u7b26\u4e32\u3002 \u6211\u4eec\u627e\u5230\u5b50\u5b57\u7b26\u4e32\u7684\u7b2c\u4e8c\u6b21\u51fa\u73b0\u3002 \u8be5\u884c\u6253\u5370 35\u3002 1 print(a.rfind(\"wolf\")) rfind() \u4ece\u672b\u5c3e\u67e5\u627e\u5b50\u5b57\u7b26\u4e32\u3002 \u5b83\u67e5\u627e\u201c wolf\u201d\u5b50\u5b57\u7b26\u4e32\u7684\u7b2c\u4e8c\u6b21\u51fa\u73b0\u3002 \u8be5\u884c\u6253\u5370 35\u3002 1 2 3 4 5 $ ./substrings.py 8 -1 35 35 \u8fd9\u662f\u8f93\u51fa\u3002 \u5728\u7b2c\u4e8c\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 index() \u548c rindex() \u65b9\u6cd5\u3002 substrings2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python # substrings2.py a = \"I saw a wolf in the forest. A lone wolf.\" print(a.index(\"wolf\")) print(a.rindex(\"wolf\")) try: print(a.rindex(\"fox\")) except ValueError as e: print(\"Could not find substring\") \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 index() \u548c rindex() \u65b9\u6cd5\u641c\u7d22\u5b50\u5b57\u7b26\u4e32\u3002 1 2 print(a.index(\"wolf\")) print(a.rindex(\"wolf\")) \u8fd9\u4e9b\u884c\u4ece\u5f00\u5934\u548c\u7ed3\u5c3e\u5f00\u59cb\u67e5\u627e\u201c wolf\u201d\u5b50\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u4e2a\u5339\u914d\u9879\u3002 1 2 3 4 try: print(a.rindex(\"fox\")) except ValueError as e: print(\"Could not find substring\") \u5f53\u627e\u4e0d\u5230\u5b50\u5b57\u7b26\u4e32\u65f6\uff0c rindex() \u65b9\u6cd5\u5f15\u53d1 ValueError \u5f02\u5e38\u3002 1 2 3 4 $ ./substrings2.py 8 35 Could not find substring \u8fd9\u662f\u793a\u4f8b\u7684\u8f93\u51fa\u3002","title":"Python \u67e5\u627e\u5b50\u5b57\u7b26\u4e32"},{"location":"pages/python/pytutorial/python-strings/#Python-\u57fa\u672c\u5b57\u7b26\u4e32\u64cd\u4f5c","text":"\u5728\u4e0b\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u8fdb\u884c\u5b57\u7b26\u4e32\u4e58\u6cd5\u548c\u4e32\u8054\u3002 add_multiply.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python # add_multiply.py print(\"eagle \" * 5) print(\"eagle \" \"falcon\") print(\"eagle \" + \"and \" + \"falcon\") * \u8fd0\u7b97\u7b26\u5c06\u5b57\u7b26\u4e32\u91cd\u590d n \u6b21\u3002 \u5728\u6211\u4eec\u7684\u60c5\u51b5\u4e0b\u662f\u4e94\u6b21\u3002 \u5f7c\u6b64\u76f8\u90bb\u7684\u4e24\u4e2a\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u4f1a\u81ea\u52a8\u8fde\u63a5\u5728\u4e00\u8d77\u3002 \u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528 + \u8fd0\u7b97\u7b26\u663e\u5f0f\u8fde\u63a5\u5b57\u7b26\u4e32\u3002 1 2 3 4 $ ./add_multiply.py eagle eagle eagle eagle eagle eagle falcon eagle and falcon \u8fd9\u662f add_multiply.py \u811a\u672c\u7684\u8f93\u51fa\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 len() \u51fd\u6570\u6765\u8ba1\u7b97\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff08\u4ee5\u5b57\u7b26\u4e3a\u5355\u4f4d\uff09\u3002 eagle.py 1 2 3 4 5 6 7 #!/usr/bin/python # eagle.py var = 'eagle' print(var, \"has\", len(var), \"characters\") \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u8ba1\u7b97\u5b57\u7b26\u4e32\u53d8\u91cf\u4e2d\u7684\u5b57\u7b26\u6570\u3002 1 2 $ ./eagle.py eagle has 5 characters \u4e00\u4e9b\u7f16\u7a0b\u8bed\u8a00\u5141\u8bb8\u9690\u5f0f\u6dfb\u52a0\u5b57\u7b26\u4e32\u548c\u6570\u5b57\u3002 \u5728 Python \u8bed\u8a00\u4e2d\uff0c\u8fd9\u662f\u4e0d\u53ef\u80fd\u7684\u3002 \u6211\u4eec\u5fc5\u987b\u663e\u5f0f\u8f6c\u6362\u503c\u3002 string_number.py 1 2 3 4 5 6 7 #!/usr/bin/python # string_number.py print(int(\"12\") + 12) print(\"There are \" + str(22) + \" oranges.\") print(float('22.33') + 22.55) \u6211\u4eec\u4f7f\u7528\u5185\u7f6e\u7684 int() \u51fd\u6570\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6574\u6570\u3002 \u5e76\u4e14\u8fd8\u6709\u4e00\u4e2a\u5185\u7f6e\u7684 str() \u51fd\u6570\u5c06\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u3002 \u7136\u540e\uff0c\u6211\u4eec\u4f7f\u7528 float() \u51fd\u6570\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6d6e\u70b9\u6570\u3002","title":"Python \u57fa\u672c\u5b57\u7b26\u4e32\u64cd\u4f5c"},{"location":"pages/python/pytutorial/python-strings/#Python-\u66ff\u6362\u5b57\u7b26\u4e32","text":"replace() \u65b9\u6cd5\u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u5b50\u5b57\u7b26\u4e32\u66ff\u6362\u4e3a\u5176\u4ed6\u5b50\u5b57\u7b26\u4e32\u3002 \u7531\u4e8e Python \u4e2d\u7684\u5b57\u7b26\u4e32\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u56e0\u6b64\u5c06\u4f7f\u7528\u66ff\u6362\u7684\u503c\u6784\u5efa\u65b0\u7684\u5b57\u7b26\u4e32\u3002 1 replace(old, new [, max]) \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c replace() \u65b9\u6cd5\u5c06\u66ff\u6362\u6240\u6709\u51fa\u73b0\u7684\u5b50\u5b57\u7b26\u4e32\u3002 \u8be5\u65b9\u6cd5\u91c7\u7528\u7b2c\u4e09\u4e2a\u53c2\u6570\uff0c\u5b83\u5c06\u66ff\u6362\u6b21\u6570\u9650\u5236\u4e3a\u4e00\u5b9a\u6570\u91cf\u3002 replacing.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python # replacing.py a = \"I saw a wolf in the forest. A lonely wolf.\" b = a.replace(\"wolf\", \"fox\") print(b) c = a.replace(\"wolf\", \"fox\", 1) print(c) \u6211\u4eec\u6709\u4e00\u53e5\u8bdd\u7528\u201c fox\u201d\u4ee3\u66ff\u201c wolf\u201d\u3002 1 b = a.replace(\"wolf\", \"fox\") \u8be5\u884c\u5c06\u6240\u6709\u51fa\u73b0\u7684\u201c\u72fc\u201d\u66ff\u6362\u4e3a\u201c fox\u201d\u3002 1 c = a.replace(\"wolf\", \"fox\", 1) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4ec5\u66ff\u6362\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u60c5\u51b5\u3002 1 2 3 $ ./replacing.py I saw a fox in the forest. A lonely fox. I saw a fox in the forest. A lonely wolf. \u8fd9\u662f\u8f93\u51fa\u3002","title":"Python \u66ff\u6362\u5b57\u7b26\u4e32"},{"location":"pages/python/pytutorial/python-strings/#Python-\u5206\u5272\u548c\u8fde\u63a5\u5b57\u7b26\u4e32","text":"\u53ef\u4ee5\u4f7f\u7528 split() \u6216 rsplit() \u65b9\u6cd5\u5206\u5272\u5b57\u7b26\u4e32\u3002 \u5b83\u4eec\u8fd4\u56de\u4f7f\u7528\u5206\u9694\u7b26\u4ece\u5b57\u7b26\u4e32\u4e2d\u5207\u51fa\u7684\u5b57\u7b26\u4e32\u5217\u8868\u3002 \u53ef\u9009\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u5141\u8bb8\u7684\u6700\u5927\u5206\u5272\u6570\u3002 splitting.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/env python # splitting.py nums = \"1,5,6,8,2,3,1,9\" k = nums.split(\",\") print(k) l = nums.split(\",\", 5) print(l) m = nums.rsplit(\",\", 3) print(m) \u6211\u4eec\u6709\u4e00\u4e2a\u9017\u53f7\u5206\u9694\u7684\u5b57\u7b26\u4e32\u3002 \u6211\u4eec\u628a\u7ef3\u5b50\u5207\u6210\u5c0f\u6bb5\u3002 1 k = nums.split(\",\") \u6211\u4eec\u4f7f\u7528\u9017\u53f7\u4f5c\u4e3a\u5206\u9694\u7b26\u5c06\u5b57\u7b26\u4e32\u5206\u6210\u516b\u4e2a\u90e8\u5206\u3002 \u8be5\u65b9\u6cd5\u8fd4\u56de\u516b\u4e2a\u5b57\u7b26\u4e32\u7684\u5217\u8868\u3002 1 l = nums.split(\",\", 5) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5c06\u5b57\u7b26\u4e32\u5206\u6210\u516d\u4e2a\u90e8\u5206\u3002 \u6709\u4e94\u4e2a\u5b50\u5b57\u7b26\u4e32\uff0c\u5176\u4f59\u90e8\u5206\u4e3a\u5b57\u7b26\u4e32\u3002 1 m = nums.rsplit(\",\", 3) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5c06\u5b57\u7b26\u4e32\u5206\u6210\u56db\u4e2a\u90e8\u5206\u3002 \u8fd9\u6b21\u62c6\u5206\u662f\u4ece\u53f3\u4fa7\u8fdb\u884c\u7684\u3002 1 2 3 4 $ ./splitting.py ['1', '5', '6', '8', '2', '3', '1', '9'] ['1', '5', '6', '8', '2', '3,1,9'] ['1,5,6,8,2', '3', '1', '9'] \u5b57\u7b26\u4e32\u53ef\u4ee5\u4e0e join() \u5b57\u7b26\u4e32\u8fde\u63a5\u3002 \u5b83\u8fd4\u56de\u7531\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7684\u5b57\u7b26\u4e32\u8fde\u63a5\u800c\u6210\u7684\u5b57\u7b26\u4e32\u3002 \u5143\u7d20\u4e4b\u95f4\u7684\u5206\u9694\u7b26\u662f\u63d0\u4f9b\u6b64\u65b9\u6cd5\u7684\u5b57\u7b26\u4e32\u3002 split_join.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python # split_join.py nums = \"1,5,6,8,2,3,1,9\" n = nums.split(\",\") print(n) m = ':'.join(n) print(m) \u9996\u5148\uff0c\u6211\u4eec\u5c06\u5b57\u7b26\u4e32\u62c6\u5206\u4e3a\u5b57\u7b26\u4e32\u5217\u8868\u3002 \u7136\u540e\uff0c\u6211\u4eec\u5c06\u5b57\u7b26\u4e32\u8fde\u63a5\u5230\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\uff0c\u5e76\u7528\u63d0\u4f9b\u7684\u5b57\u7b26\u5206\u9694\u5143\u7d20\u3002 1 m = ':'.join(n) join() \u65b9\u6cd5\u4ece\u5b57\u7b26\u4e32\u5217\u8868\u4e2d\u521b\u5efa\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 \u5143\u7d20\u7531 : \u5b57\u7b26\u5206\u9694\u3002 1 2 3 $ ./split_join.py ['1', '5', '6', '8', '2', '3', '1', '9'] 1:5:6:8:2:3:1:9 \u8fd9\u662f\u8f93\u51fa\u3002 \u53ef\u4ee5\u7528\u4e8e\u5206\u5272\u5b57\u7b26\u4e32\u7684\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f partition() \u3002 \u5b83\u5c06\u5728\u7b2c\u4e00\u6b21\u51fa\u73b0\u5206\u9694\u7b26\u65f6\u5206\u5272\u5b57\u7b26\u4e32\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u4e09\u5143\u7ec4\uff0c\u5176\u4e2d\u5305\u542b\u5206\u9694\u7b26\u4e4b\u524d\u7684\u90e8\u5206\uff0c\u5206\u9694\u7b26\u672c\u8eab\u4ee5\u53ca\u5206\u9694\u7b26\u4e4b\u540e\u7684\u90e8\u5206\u3002 partition.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python # partition.py s = \"1 + 2 + 3 = 6\" a = s.partition(\"=\") print(a) \u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 partition() \u65b9\u6cd5\u3002 1 a = s.partition(\"=\") \u8fd9\u4f1a\u5c06\u5b57\u7b26\u4e32\u5207\u6210\u4e09\u90e8\u5206\u3002 = \u5b57\u7b26\u524d\u7684\u4e00\u4e2a\uff0c\u5206\u9694\u7b26\uff0c\u5206\u9694\u7b26\u7684\u53f3\u8fb9\u3002 1 2 $ ./partition.py ('1 + 2 + 3 ', '=', ' 6') \u8fd9\u662f\u8f93\u51fa\u3002","title":"Python \u5206\u5272\u548c\u8fde\u63a5\u5b57\u7b26\u4e32"},{"location":"pages/python/pytutorial/python-strings/#Python-\u5b57\u7b26\u4e32\u5927\u5c0f\u5199","text":"Python \u6709\u56db\u79cd\u5904\u7406\u5b57\u7b26\u4e32\u5927\u5c0f\u5199\u7684\u5b57\u7b26\u4e32\u65b9\u6cd5\u3002 \u8fd9\u4e9b\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u4fee\u6539\u540e\u7684\u5b57\u7b26\u4e32\u3002 convert_case.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python # convert_case.py a = \"ZetCode\" print(a.upper()) print(a.lower()) print(a.swapcase()) print(a.title()) \u6211\u4eec\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32\u8bcd\uff0c\u6211\u4eec\u5c06\u5728\u4e0a\u9762\u6f14\u793a\u8fd9\u56db\u79cd\u65b9\u6cd5\u3002 1 print(a.upper()) upper() \u65b9\u6cd5\u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u526f\u672c\uff0c\u5176\u4e2d\u6240\u6709\u5b57\u7b26\u5747\u8f6c\u6362\u4e3a\u5927\u5199\u3002 1 print(a.lower()) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4ee5\u5c0f\u5199\u5b57\u6bcd\u83b7\u53d6\u5b57\u7b26\u4e32\u7684\u526f\u672c\u3002 1 print(a.swapcase()) swapcase() \u65b9\u6cd5\u4ea4\u6362\u5b57\u6bcd\u7684\u5927\u5c0f\u5199\u3002 \u5c0f\u5199\u5b57\u7b26\u5c06\u53d8\u4e3a\u5927\u5199\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002 1 print(a.title()) title() \u65b9\u6cd5\u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u526f\u672c\uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e3a\u5927\u5199\uff0c\u5176\u4f59\u5b57\u7b26\u4e3a\u5c0f\u5199\u3002 1 2 3 4 5 $ ./convert_case.py ZETCODE zetcode zETcODE Zetcode \u8fd9\u662f\u8f93\u51fa\u3002","title":"Python \u5b57\u7b26\u4e32\u5927\u5c0f\u5199"},{"location":"pages/python/pytutorial/python-strings/#\u5bf9\u5b57\u7b26\u4e32\u7684-Python-\u64cd\u4f5c","text":"\u6709\u51e0\u4e2a\u6709\u7528\u7684\u5185\u7f6e\u51fd\u6570\u53ef\u7528\u4e8e\u5904\u7406\u5b57\u7b26\u4e32\u3002 letters.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #!/usr/bin/env python # letters.py sentence = \"There are 22 apples\" alphas = 0 digits = 0 spaces = 0 for i in sentence: if i.isalpha(): alphas += 1 if i.isdigit(): digits += 1 if i.isspace(): spaces += 1 print(\"There are\", len(sentence), \"characters\") print(\"There are\", alphas, \"alphabetic characters\") print(\"There are\", digits, \"digits\") print(\"There are\", spaces, \"spaces\") \u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32\u53e5\u5b50\u3002 \u6211\u4eec\u8ba1\u7b97\u53e5\u5b50\u4e2d\u7684\u7edd\u5bf9\u5b57\u7b26\u6570\uff0c\u5b57\u6bcd\u5b57\u7b26\u6570\uff0c\u6570\u5b57\u548c\u7a7a\u683c\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u4f7f\u7528\u4ee5\u4e0b\u529f\u80fd\uff1a len() \uff0c isalpha() \uff0c isdigit() \u548c isspace() \u3002 1 2 3 4 5 $ ./letters.py There are 19 characters There are 14 alphabetic characters There are 2 digits There are 3 spaces \u5728\u4e0b\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u6253\u5370\u8db3\u7403\u6bd4\u8d5b\u7684\u7ed3\u679c\u3002 teams1.py 1 2 3 4 5 6 7 #!/usr/bin/env python # teams1.py print(\"Ajax Amsterdam\" \" - \" \"Inter Milano \" \"2:3\") print(\"Real Madridi\" \" - \" \"AC Milano \" \"3:3\") print(\"Dortmund\" \" - \" \"Sparta Praha \" \"2:1\") \u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u76f8\u90bb\u7684\u5b57\u7b26\u4e32\u662f\u4e32\u8054\u5728\u4e00\u8d77\u7684\u3002 1 2 3 4 $ ./teams1.py Ajax Amsterdam - Inter Milano 2:3 Real Madridi - AC Milano 3:3 Dortmund - Sparta Praha 2:1 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u6539\u5584\u8f93\u51fa\u7684\u5916\u89c2\u3002 teams2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/env python # teams2.py teams = { 0: (\"Ajax Amsterdam\", \"Inter Milano\"), 1: (\"Real Madrid\", \"AC Milano\"), 2: (\"Dortmund\", \"Sparta Praha\") } results = (\"2:3\", \"3:3\", \"2:1\") for i in teams: line = teams[i][0].ljust(16) + \"-\".ljust(5) + teams[i][1].ljust(16) + results[i].ljust(3) print(line) ljust() \u65b9\u6cd5\u8fd4\u56de\u5de6\u5bf9\u9f50\u5b57\u7b26\u4e32\uff0c rjust() \u65b9\u6cd5\u8fd4\u56de\u53f3\u5bf9\u9f50\u5b57\u7b26\u4e32\u3002 \u5982\u679c\u5b57\u7b26\u4e32\u5c0f\u4e8e\u6211\u4eec\u63d0\u4f9b\u7684\u5bbd\u5ea6\uff0c\u5219\u5c06\u7528\u7a7a\u683c\u586b\u5145\u3002 1 2 3 4 $ ./teams2.py Ajax Amsterdam - Inter Milano 2:3 Real Madrid - AC Milano 3:3 Dortmund - Sparta Praha 2:1 \u73b0\u5728\u8f93\u51fa\u770b\u8d77\u6765\u66f4\u597d\u3002","title":"\u5bf9\u5b57\u7b26\u4e32\u7684 Python \u64cd\u4f5c"},{"location":"pages/python/pytutorial/python-strings/#Python-\u5b57\u7b26\u4e32\u683c\u5f0f\u5316","text":"\u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u662f\u5c06\u5404\u79cd\u503c\u52a8\u6001\u5730\u653e\u5165\u5b57\u7b26\u4e32\u4e2d\u3002 \u53ef\u4ee5\u4f7f\u7528 % \u8fd0\u7b97\u7b26\u6216 format() \u65b9\u6cd5\u5b9e\u73b0\u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u3002 oranges.py 1 2 3 4 5 6 #!/usr/bin/env python # oranges.py print('There are %d oranges in the basket' % 32) print('There are {0} oranges in the basket'.format(32)) \u5728\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u52a8\u6001\u6784\u5efa\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 \u6211\u4eec\u5728\u53e5\u5b50\u4e2d\u52a0\u4e0a\u6570\u5b57\u3002 1 print('There are %d oranges in the basket' % 32) \u6211\u4eec\u4f7f\u7528 %d \u683c\u5f0f\u8bf4\u660e\u7b26\u3002 d \u5b57\u7b26\u8868\u793a\u6211\u4eec\u671f\u671b\u4e00\u4e2a\u6574\u6570\u3002 \u5728\u5b57\u7b26\u4e32\u4e4b\u540e\uff0c\u6211\u4eec\u653e\u7f6e\u4e00\u4e2a\u6a21\u8fd0\u7b97\u7b26\u548c\u4e00\u4e2a\u53c2\u6570\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u6574\u6570\u503c\u3002 1 print('There are {0} oranges in the basket'.format(32)) \u4f7f\u7528 format() \u65b9\u6cd5\u53ef\u4ee5\u5b8c\u6210\u76f8\u540c\u7684\u4efb\u52a1\u3002 \u8fd9\u6b21\uff0c\u683c\u5f0f\u5316\u8bf4\u660e\u7b26\u662f {0} \u3002 1 2 3 $ ./oranges.py There are 32 oranges in the basket There are 32 oranges in the basket \u4e0b\u4e00\u4e2a\u793a\u4f8b\u663e\u793a\u5982\u4f55\u5411\u5b57\u7b26\u4e32\u4e2d\u6dfb\u52a0\u66f4\u591a\u503c\u3002 fruits.py 1 2 3 4 5 6 #!/usr/bin/env python # fruits.py print('There are %d oranges and %d apples in the basket' % (12, 23)) print('There are {0} oranges and {1} apples in the basket'.format(12, 23)) \u5728\u8fd9\u4e24\u884c\u4e2d\uff0c\u6211\u4eec\u6dfb\u52a0\u4e86\u4e24\u4e2a\u683c\u5f0f\u8bf4\u660e\u7b26\u3002 1 2 3 $ ./fruits.py There are 12 oranges and 23 apples in the basket There are 12 oranges and 23 apples in the basket \u5728\u4e0b\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6784\u5efa\u4e00\u4e2a\u5e26\u6709\u6d6e\u70b9\u6570\u548c\u5b57\u7b26\u4e32\u503c\u7684\u5b57\u7b26\u4e32\u3002 height.py 1 2 3 4 5 6 #!/usr/bin/env python # height.py print('Height: %f %s' % (172.3, 'cm')) print('Height: {0:f} {1:s}'.format(172.3, 'cm')) \u6211\u4eec\u6253\u5370\u4e00\u4e2a\u4eba\u7684\u8eab\u9ad8\u3002 1 print('Height: %f %s' % (172.3, 'cm')) \u6d6e\u70b9\u503c\u7684\u683c\u5f0f\u8bf4\u660e\u7b26\u4e3a %f \uff0c\u5b57\u7b26\u4e32\u4e3a %s \u3002 1 print('Height: {0:f} {1:s}'.format(172.3, 'cm')) \u4f7f\u7528 format() \u65b9\u6cd5\uff0c\u6211\u4eec\u5c06 f \u548c s \u5b57\u7b26\u6dfb\u52a0\u5230\u8bf4\u660e\u7b26\u4e2d\u3002 1 2 3 $ ./height.py Height: 172.300000 cm Height: 172.300000 cm \u6211\u4eec\u53ef\u80fd\u4e0d\u559c\u6b22\u4e0a\u9762\u793a\u4f8b\u4e2d\u7684\u6570\u5b57\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5177\u6709 6 \u4e2a\u5c0f\u6570\u4f4d\u7684\u4e8b\u5b9e\u3002 \u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u683c\u5f0f\u8bf4\u660e\u7b26\u4e2d\u7684\u5c0f\u6570\u4f4d\u6570\u3002 height2.py 1 2 3 4 5 6 #!/usr/bin/env python # height2.py print('Height: %.2f %s' % (172.3, 'cm')) print('Height: {0:.2f} {1:s}'.format(172.3, 'cm')) \u5c0f\u6570\u70b9\u540e\u8ddf\u4e00\u4e2a\u6574\u6570\u63a7\u5236\u5c0f\u6570\u4f4d\u6570\u3002 \u5728\u6211\u4eec\u7684\u60c5\u51b5\u4e0b\uff0c\u8be5\u6570\u5b57\u5c06\u4fdd\u7559\u4e24\u4f4d\u5c0f\u6570\u3002 1 2 3 $ ./height2.py Height: 172.30 cm Height: 172.30 cm \u4e0b\u9762\u7684\u793a\u4f8b\u663e\u793a\u5176\u4ed6\u683c\u5f0f\u8bbe\u7f6e\u9009\u9879\u3002 various.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/python # various.py # hexadecimal print(\"%x\" % 300) print(\"%#x\" % 300) # octal print(\"%o\" % 300) # scientific print(\"%e\" % 300000) \u524d\u4e24\u79cd\u683c\u5f0f\u4f7f\u7528\u5341\u516d\u8fdb\u5236\u6570\u3002 x \u5b57\u7b26\u5c06\u4ee5\u5341\u516d\u8fdb\u5236\u683c\u5f0f\u683c\u5f0f\u5316\u6570\u5b57\u3002 # \u5b57\u7b26\u4f1a\u5c06 0x \u6dfb\u52a0\u5230\u5341\u516d\u8fdb\u5236\u6570\u5b57\u3002 o \u5b57\u7b26\u4ee5\u516b\u8fdb\u5236\u683c\u5f0f\u663e\u793a\u6570\u5b57\u3002 e \u5b57\u7b26\u5c06\u4ee5\u79d1\u5b66\u683c\u5f0f\u663e\u793a\u6570\u5b57\u3002 1 2 3 4 5 $ ./various.py 12c 0x12c 454 3.000000e+05 format() \u65b9\u6cd5\u8fd8\u652f\u6301\u4e8c\u8fdb\u5236\u683c\u5f0f\u3002 various2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/python # various2.py # hexadecimal print(\"{:x}\".format(300)) print(\"{:#x}\".format(300)) # binary print(\"{:b}\".format(300)) # octal print(\"{:o}\".format(300)) # scientific print(\"{:e}\".format(300000)) \u8be5\u793a\u4f8b\u4ee5\u5341\u516d\u8fdb\u5236\uff0c\u4e8c\u8fdb\u5236\uff0c\u516b\u8fdb\u5236\u548c\u79d1\u5b66\u683c\u5f0f\u6253\u5370\u6570\u5b57\u3002 \u4e0b\u4e00\u4e2a\u793a\u4f8b\u5c06\u6253\u5370\u4e09\u5217\u6570\u5b57\u3002 columns1.py 1 2 3 4 5 6 #!/usr/bin/env python # columns1.py for x in range(1, 11): print('%d %d %d' % (x, x*x, x*x*x)) \u6570\u5b57\u5de6\u5bf9\u9f50\uff0c\u8f93\u51fa\u4e0d\u662f\u6700\u4f73\u7684\u3002 1 2 3 4 5 6 7 8 9 10 11 $ ./columns1.py 1 1 1 2 4 8 3 9 27 4 16 64 5 25 125 6 36 216 7 49 343 8 64 512 9 81 729 10 100 1000 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u4f7f\u7528\u5bbd\u5ea6\u8bf4\u660e\u7b26\u3002 \u5bbd\u5ea6\u8bf4\u660e\u7b26\u5b9a\u4e49\u5bf9\u8c61\u7684\u6700\u5c0f\u5bbd\u5ea6\u3002 \u5982\u679c\u5bf9\u8c61\u5c0f\u4e8e\u5bbd\u5ea6\uff0c\u5219\u5c06\u586b\u5145\u7a7a\u683c\u3002 columns2.py 1 2 3 4 5 6 #!/usr/bin/env python # columns2.py for x in range(1, 11): print('%2d %3d %4d' % (x, x*x, x*x*x)) \u73b0\u5728\u8f93\u51fa\u770b\u8d77\u6765\u6b63\u5e38\u3002 \u503c 2 \u4f7f\u7b2c\u4e00\u5217\u5bbd 2 \u4e2a\u5b57\u7b26\u3002 1 2 3 4 5 6 7 8 9 10 11 $ ./columns2.py 1 1 1 2 4 8 3 9 27 4 16 64 5 25 125 6 36 216 7 49 343 8 64 512 9 81 729 10 100 1000 \u73b0\u5728\u6211\u4eec\u6709\u4e86 format() \u65b9\u6cd5\u7684\u6539\u8fdb\u683c\u5f0f\u3002 columns3.py 1 2 3 4 5 6 #!/usr/bin/env python # columns3.py for x in range(1, 11): print('{0:2d} {1:3d} {2:4d}'.format(x, x*x, x*x*x))","title":"Python \u5b57\u7b26\u4e32\u683c\u5f0f\u5316"},{"location":"pages/python/pytutorial/python-sympy/","text":"SymPy \u6559\u7a0b \u00b6 SymPy \u6559\u7a0b \u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528 sympy \u6a21\u5757\u5728 Python \u4e2d\u8fdb\u884c\u7b26\u53f7\u8ba1\u7b97\u3002 \u8fd9\u662f\u5bf9 SymPy \u7684\u7b80\u8981\u4ecb\u7ecd\u3002 \u8ba1\u7b97\u673a\u4ee3\u6570\u7cfb\u7edf\uff08CAS\uff09\u662f\u4e00\u79cd\u6570\u5b66\u8f6f\u4ef6\uff0c\u80fd\u591f\u4ee5\u7c7b\u4f3c\u4e8e\u6570\u5b66\u5bb6\u548c\u79d1\u5b66\u5bb6\u7684\u4f20\u7edf\u624b\u52a8\u8ba1\u7b97\u65b9\u5f0f\u6765\u5904\u7406\u6570\u5b66\u8868\u8fbe\u5f0f\u3002 \u7b26\u53f7\u8ba1\u7b97\u8c61\u5f81\u6027\u5730\u5904\u7406\u6570\u5b66\u5bf9\u8c61\u7684\u8ba1\u7b97\u3002 \u6570\u5b66\u5bf9\u8c61\u662f\u51c6\u786e\u800c\u975e\u8fd1\u4f3c\u5730\u8868\u793a\u7684\uff0c\u5177\u6709\u672a\u6c42\u503c\u53d8\u91cf\u7684\u6570\u5b66\u8868\u8fbe\u5f0f\u4ee5\u7b26\u53f7\u5f62\u5f0f\u4fdd\u7559\u3002 SymPy \u00b6 SymPy \u662f\u7528\u4e8e\u7b26\u53f7\u6570\u5b66\u7684 Python \u5e93\u3002 \u5b83\u65e8\u5728\u6210\u4e3a\u529f\u80fd\u9f50\u5168\u7684\u8ba1\u7b97\u673a\u4ee3\u6570\u7cfb\u7edf\u3002 SymPy \u5305\u62ec\u4ece\u57fa\u672c\u7b26\u53f7\u7b97\u672f\u5230\u5fae\u79ef\u5206\uff0c\u4ee3\u6570\uff0c\u79bb\u6563\u6570\u5b66\u548c\u91cf\u5b50\u7269\u7406\u5b66\u7684\u529f\u80fd\u3002 \u5b83\u53ef\u4ee5\u5728 LaTeX \u4e2d\u663e\u793a\u7ed3\u679c\u3002 1 $ pip install sympy SymPy \u662f\u4f7f\u7528 pip install sympy \u547d\u4ee4\u5b89\u88c5\u7684\u3002 Rational \u503c \u00b6 SymPy \u5177\u6709\u7528\u4e8e\u5904\u7406\u6709\u7406\u6570\u7684 Rational \u3002 \u6709\u7406\u6570\u662f\u53ef\u4ee5\u8868\u793a\u4e3a\u4e24\u4e2a\u6574\u6570\uff08\u5206\u5b50 p \u548c\u975e\u96f6\u5206\u6bcd q\uff09\u7684\u5546\u6216\u5206\u6570 p / q \u7684\u4efb\u4f55\u6570\u5b57\u3002 rational_values.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python from sympy import Rational r1 = Rational(1/10) r2 = Rational(1/10) r3 = Rational(1/10) val = (r1 + r2 + r3) * 3 print(val.evalf()) val2 = (1/10 + 1/10 + 1/10) * 3 print(val2) \u8be5\u793a\u4f8b\u4f7f\u7528\u6709\u7406\u6570\u3002 1 2 val = (r1 + r2 + r3) * 3 print(val.evalf()) \u8be5\u8868\u8fbe\u5f62\u5f0f\u4e3a\u7b26\u53f7\u5f62\u5f0f\u3002 \u6211\u4eec\u4f7f\u7528 evalf() \u65b9\u6cd5\u5bf9\u5176\u8fdb\u884c\u6c42\u503c\u3002 1 2 3 $ rational_values.py 0.900000000000000 0.9000000000000001 \u6ce8\u610f\uff0c\u5f53\u4e0d\u4f7f\u7528\u6709\u7406\u6570\u65f6\uff0c\u8f93\u51fa\u4e2d\u4f1a\u6709\u4e00\u4e2a\u5c0f\u9519\u8bef\u3002 SymPy pprint \u00b6 pprint() \u7528\u4e8e\u5728\u63a7\u5236\u53f0\u4e0a\u6f02\u4eae\u5730\u6253\u5370\u8f93\u51fa\u3002 LaTeX \u53ef\u4ee5\u8fbe\u5230\u6700\u4f73\u6548\u679c\uff0c\u4f8b\u5982 \u5728 Jupyter \u7b14\u8bb0\u672c\u4e2d\u3002 prettify.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/usr/bin/env python from sympy import pprint, Symbol, exp, sqrt from sympy import init_printing init_printing(use_unicode=True) x = Symbol('x') a = sqrt(2) pprint(a) print(a) print(\"------------------------\") c = (exp(x) ** 2)/2 pprint(c) print(c) \u7a0b\u5e8f\u4f1a\u7f8e\u5316\u8f93\u51fa\u3002 1 init_printing(use_unicode=True) \u5bf9\u4e8e\u67d0\u4e9b\u5b57\u7b26\uff0c\u6211\u4eec\u9700\u8981\u542f\u7528 unicode \u652f\u6301\u3002 1 2 3 4 5 6 7 8 9 $ prettify.py \u221a2 sqrt(2) ------------------------ 2\u22c5x \u212f \u2500\u2500\u2500\u2500 2 exp(2*x)/2 \u8fd9\u662f\u8f93\u51fa\u3002 \u8bf7\u6ce8\u610f\uff0c\u4f7f\u7528 Jupyter \u7b14\u8bb0\u672c\u4f1a\u63d0\u4f9b\u66f4\u597d\u7684\u8f93\u51fa\u3002 \u5e73\u65b9\u6839 \u00b6 \u5e73\u65b9\u6839\u662f\u4e00\u4e2a\u6570\u5b57\uff0c\u4e58\u4ee5\u5b83\u4f1a\u4ea7\u751f\u6307\u5b9a\u7684\u6570\u91cf\u3002 square_root.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python from sympy import sqrt, pprint, Mul x = sqrt(2) y = sqrt(2) pprint(Mul(x, y, evaluate=False)) print('equals to ') print(x * y) \u7a0b\u5e8f\u8f93\u51fa\u4e00\u4e2a\u5305\u542b\u5e73\u65b9\u6839\u7684\u8868\u8fbe\u5f0f\u3002 1 pprint(Mul(x, y, evaluate=False)) \u6211\u4eec\u4f7f\u7528 evaluate \u5c5e\u6027\u63a8\u8fdf\u5bf9\u4e58\u6cd5\u8868\u8fbe\u5f0f\u7684\u6c42\u503c\u3002 1 2 3 4 $ square_root.py \u221a2\u22c5\u221a2 equals to 2 \u8fd9\u662f\u8f93\u51fa\u3002 SymPy \u7b26\u53f7 \u00b6 \u7b26\u53f7\u8ba1\u7b97\u9002\u7528\u4e8e\u7b26\u53f7\uff0c\u4ee5\u540e\u53ef\u4ee5\u5bf9\u5176\u8fdb\u884c\u6c42\u503c\u3002 \u4f7f\u7528\u7b26\u53f7\u4e4b\u524d\uff0c\u5fc5\u987b\u5728 SymPy \u4e2d\u5b9a\u4e49\u7b26\u53f7\u3002 def_sym.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/usr/bin/env python # ways to define symbols from sympy import Symbol, symbols from sympy.abc import x, y expr = 2*x + 5*y print(expr) a = Symbol('a') b = Symbol('b') expr2 = a*b + a - b print(expr2) i, j = symbols('i j') expr3 = 2*i*j + i*j print(expr3) \u8be5\u7a0b\u5e8f\u663e\u793a\u4e86\u4e09\u79cd\u5728 SymPy \u4e2d\u5b9a\u4e49\u7b26\u53f7\u7684\u65b9\u6cd5\u3002 1 from sympy.abc import x, y \u53ef\u4ee5\u4ece sympy.abc \u6a21\u5757\u5bfc\u5165\u7b26\u53f7\u3002 \u5b83\u5c06\u6240\u6709\u62c9\u4e01\u5b57\u6bcd\u548c\u5e0c\u814a\u5b57\u6bcd\u5bfc\u51fa\u4e3a\u7b26\u53f7\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u65b9\u4fbf\u5730\u4f7f\u7528\u5b83\u4eec\u3002 1 2 a = Symbol('a') b = Symbol('b') \u53ef\u4ee5\u7528 Symbol \u5b9a\u4e49 1 i, j = symbols('i j') \u53ef\u4ee5\u4f7f\u7528 symbols() \u65b9\u6cd5\u5b9a\u4e49\u591a\u4e2a\u7b26\u53f7\u3002 SymPy \u89c4\u8303\u8868\u8fbe\u5f62\u5f0f \u00b6 SymPy \u4f1a\u81ea\u52a8\u5c06\u8868\u8fbe\u5f0f\u8f6c\u6362\u4e3a\u89c4\u8303\u5f62\u5f0f\u3002 SymPy \u4ec5\u6267\u884c\u5ec9\u4ef7\u64cd\u4f5c\uff1b \u56e0\u6b64\uff0c\u8868\u8fbe\u5f0f\u53ef\u80fd\u65e0\u6cd5\u6c42\u503c\u4e3a\u6700\u7b80\u5355\u7684\u5f62\u5f0f\u3002 canonical_form.py 1 2 3 4 5 6 7 #!/usr/bin/env python from sympy.abc import a, b expr = b*a + -4*a + b + a*b + 4*a + (a + b)*3 print(expr) \u6211\u4eec\u6709\u4e00\u4e2a\u5e26\u6709\u7b26\u53f7 a \u548c b \u7684\u8868\u8fbe\u5f0f\u3002 \u8be5\u8868\u8fbe\u53ef\u4ee5\u5bb9\u6613\u5730\u7b80\u5316\u3002 1 2 $ canonical_form.py 2*a*b + 3*a + 4*b \u8fd9\u662f\u8f93\u51fa\u3002 SymPy \u6269\u5c55\u4ee3\u6570\u8868\u8fbe\u5f0f \u00b6 \u4f7f\u7528 expand() \uff0c\u6211\u4eec\u53ef\u4ee5\u6269\u5c55\u4ee3\u6570\u8868\u8fbe\u5f0f\uff1b \u5373\u8be5\u65b9\u6cd5\u5c1d\u8bd5\u6d88\u9664\u5e42\u548c\u4e58\u6cd5\u3002 expand.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/env python from sympy import expand, pprint from sympy.abc import x expr = (x + 1) ** 2 pprint(expr) print('-----------------------') print('-----------------------') expr = expand(expr) pprint(expr) \u8be5\u7a0b\u5e8f\u6269\u5c55\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u8868\u8fbe\u5f0f\u3002 1 2 3 4 5 6 7 $ expand.py 2 (x + 1) ----------------------- ----------------------- 2 x + 2\u22c5x + 1 \u8fd9\u662f\u8f93\u51fa\u3002 SymPy \u7b80\u5316\u8868\u8fbe\u5f0f \u00b6 \u53ef\u4ee5\u4f7f\u7528 simplify() \u5c06\u8868\u8fbe\u5f0f\u66f4\u6539\u4e3a\u66f4\u7b80\u5355\u7684\u5f62\u5f0f\u3002 simplify.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python from sympy import sin, cos, simplify, pprint from sympy.abc import x expr = sin(x) / cos(x) pprint(expr) print('-----------------------') expr = simplify(expr) pprint(expr) \u4f8b\u5982\u5c06 sin(x)/sin(y) \u8868\u8fbe\u5f0f\u7b80\u5316\u4e3a tan(x) \u3002 1 2 3 4 5 6 $ simplify.py sin(x) \u2500\u2500\u2500\u2500\u2500\u2500 cos(x) ----------------------- tan(x) \u8fd9\u662f\u8f93\u51fa\u3002 SymPy \u6bd4\u8f83\u8868\u8fbe\u5f0f \u00b6 SymPy \u8868\u8fbe\u5f0f\u4e0e equals() \u800c\u4e0d\u662f == \u8fd0\u7b97\u7b26\u8fdb\u884c\u6bd4\u8f83\u3002 expr_equality.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python from sympy import pprint, Symbol, sin, cos x = Symbol('x') a = cos(x)**2 - sin(x)**2 b = cos(2*x) print(a.equals(b)) # we cannot use == operator print(a == b) \u8be5\u7a0b\u5e8f\u6bd4\u8f83\u4e24\u4e2a\u8868\u8fbe\u5f0f\u3002 1 print(a.equals(b)) \u6211\u4eec\u7528 equals() \u6bd4\u8f83\u4e24\u4e2a\u8868\u8fbe\u5f0f\u3002 \u5728\u5e94\u7528\u8be5\u65b9\u6cd5\u4e4b\u524d\uff0cSymPy \u5c1d\u8bd5\u7b80\u5316\u8868\u8fbe\u5f0f\u3002 1 2 3 $ expr_equality.py True False \u8fd9\u662f\u8f93\u51fa\u3002 SymPy \u6c42\u503c\u8868\u8fbe\u5f0f \u00b6 \u53ef\u4ee5\u901a\u8fc7\u66ff\u6362\u7b26\u53f7\u6765\u6c42\u503c\u8868\u8fbe\u5f0f\u3002 evaluating.py 1 2 3 4 5 #!/usr/bin/env python from sympy import pi print(pi.evalf(30)) \u8be5\u793a\u4f8b\u5c06 pi \u503c\u6c42\u503c\u4e3a 30 \u4e2a\u4f4d\u3002 1 2 $ evaluating.py 3.14159265358979323846264338328 \u8fd9\u662f\u8f93\u51fa\u3002 evaluating2.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python from sympy.abc import a, b from sympy import pprint expr = b*a + -4*a + b + a*b + 4*a + (a + b)*3 print(expr.subs([(a, 3), (b, 2)])) \u672c\u793a\u4f8b\u901a\u8fc7\u7528\u6570\u5b57\u66ff\u6362 a \u548c b \u7b26\u53f7\u6765\u6c42\u503c\u8868\u8fbe\u5f0f\u3002 1 2 $ evaluating.py 3.14159265358979323846264338328 \u8fd9\u662f\u8f93\u51fa\u3002 SymPy \u6c42\u89e3\u65b9\u7a0b \u00b6 \u7528 solve() \u6216 solveset() \u6c42\u89e3\u65b9\u7a0b\u3002 solving.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python from sympy import Symbol, solve x = Symbol('x') sol = solve(x**2 - x, x) print(sol) \u8be5\u793a\u4f8b\u4f7f\u7528 solve() \u89e3\u51b3\u4e86\u4e00\u4e2a\u7b80\u5355\u65b9\u7a0b\u3002 1 sol = solve(x**2 - x, x) solve() \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u516c\u5f0f\u3002 \u8be5\u516c\u5f0f\u4ee5\u9002\u5408 SymPy \u7684\u7279\u5b9a\u5f62\u5f0f\u7f16\u5199\uff1b \u5373 x**2 - x \u4ee3\u66ff x**2 = x \u3002 \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u6211\u4eec\u9700\u8981\u89e3\u51b3\u7684\u7b26\u53f7\u3002 1 2 $ solving.py [0, 1] \u8be5\u65b9\u7a0b\u5f0f\u6709\u4e24\u4e2a\u89e3\uff1a0 \u548c 1\u3002 \u6216\u8005\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 Eq \u7528\u4e8e\u516c\u5f0f\u3002 solving2.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python from sympy import pprint, Symbol, Eq, solve x = Symbol('x') eq1 = Eq(x + 1, 4) pprint(eq1) sol = solve(eq1, x) print(sol) \u8be5\u793a\u4f8b\u89e3\u51b3\u4e86\u4e00\u4e2a\u7b80\u5355\u7684 x + 1 = 4 \u65b9\u7a0b\u3002 1 2 3 $ solving2.py x + 1 = 4 [3] \u8fd9\u662f\u8f93\u51fa\u3002 solving3.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python from sympy.solvers import solveset from sympy import Symbol, Interval, pprint x = Symbol('x') sol = solveset(x**2 - 1, x, Interval(0, 100)) print(sol) \u4f7f\u7528 solveset() \uff0c\u6211\u4eec\u627e\u5230\u4e86\u7ed9\u5b9a\u95f4\u9694\u7684\u89e3\u51b3\u65b9\u6848\u3002 1 2 $ solving3.py {1} \u8fd9\u662f\u8f93\u51fa\u3002 SymPy \u5e8f\u5217 \u00b6 \u5e8f\u5217\u662f\u5176\u4e2d\u5141\u8bb8\u91cd\u590d\u7684\u5bf9\u8c61\u7684\u679a\u4e3e\u96c6\u5408\u3002 \u5e8f\u5217\u53ef\u4ee5\u662f\u6709\u9650\u7684\u6216\u65e0\u9650\u7684\u3002 \u5143\u7d20\u7684\u6570\u91cf\u79f0\u4e3a\u5e8f\u5217\u7684\u957f\u5ea6\u3002 \u4e0e\u96c6\u5408\u4e0d\u540c\uff0c\u540c\u4e00\u5143\u7d20\u53ef\u4ee5\u5728\u5e8f\u5217\u4e2d\u7684\u4e0d\u540c\u4f4d\u7f6e\u51fa\u73b0\u591a\u6b21\u3002 \u5143\u7d20\u7684\u987a\u5e8f\u5f88\u91cd\u8981\u3002 sequence.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/env python from sympy import summation, sequence, pprint from sympy.abc import x s = sequence(x, (x, 1, 10)) print(s) pprint(s) print(list(s)) print(s.length) print(summation(s.formula, (x, s.start, s.stop))) # print(sum(list(s))) \u672c\u793a\u4f8b\u521b\u5efa\u4e00\u4e2a\u7531\u6570\u5b57 1\u30012\uff0c\u2026\uff0c10 \u7ec4\u6210\u7684\u5e8f\u5217\u3002 \u6211\u4eec\u8ba1\u7b97\u8fd9\u4e9b\u6570\u5b57\u7684\u603b\u548c\u3002 1 2 3 4 5 6 $ sequence.py SeqFormula(x, (x, 1, 10)) [1, 2, 3, 4, \u2026] [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 10 55 \u8fd9\u662f\u8f93\u51fa\u3002 SymPy \u6781\u9650 \u00b6 \u6781\u9650\u662f\u51fd\u6570\uff08\u6216\u5e8f\u5217\uff09\u201c\u63a5\u8fd1\u201d\u4f5c\u4e3a\u8f93\u5165\uff08\u6216\u7d22\u5f15\uff09\u201c\u63a5\u8fd1\u201d\u67d0\u4e2a\u503c\u7684\u503c\u3002 limit.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python from sympy import sin, limit, oo from sympy.abc import x l1 = limit(1/x, x, oo) print(l1) l2 = limit(1/x, x, 0) print(l2) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5177\u6709 1/x \u529f\u80fd\u3002 \u5b83\u5177\u6709\u5de6\u4fa7\u548c\u53f3\u4fa7\u9650\u5236\u3002 1 from sympy import sin, limit, sqrt, oo oo \u8868\u793a\u65e0\u7a77\u5927\u3002 1 2 l1 = limit(1/x, x, oo) print(l1) \u6211\u4eec\u8ba1\u7b97 1/x \u7684\u6781\u9650\uff0c\u5176\u4e2d x \u63a5\u8fd1\u6b63\u65e0\u7a77\u5927\u3002 1 2 3 $ limit.py 0 oo \u8fd9\u662f\u8f93\u51fa\u3002 SymPy \u77e9\u9635 \u00b6 \u5728 SymPy \u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u77e9\u9635\u3002 \u77e9\u9635\u662f\u6570\u5b57\u6216\u5176\u4ed6\u6570\u5b66\u5bf9\u8c61\u7684\u77e9\u5f62\u6570\u7ec4\uff0c\u4e3a\u5176\u5b9a\u4e49\u4e86\u8fd0\u7b97\uff08\u4f8b\u5982\u52a0\u6cd5\u548c\u4e58\u6cd5\uff09\u3002 \u77e9\u9635\u7528\u4e8e\u8ba1\u7b97\uff0c\u5de5\u7a0b\u6216\u56fe\u50cf\u5904\u7406\u3002 matrix.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python from sympy import Matrix, pprint M = Matrix([[1, 2], [3, 4], [0, 3]]) print(M) pprint(M) N = Matrix([2, 2]) print(\"---------------------------\") print(\"M * N\") print(\"---------------------------\") pprint(M*N) \u8be5\u793a\u4f8b\u5b9a\u4e49\u4e86\u4e24\u4e2a\u77e9\u9635\u5e76\u5c06\u5b83\u4eec\u76f8\u4e58\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 $ matrix.py Matrix([[1, 2], [3, 4], [0, 3]]) \u23a11 2\u23a4 \u23a2 \u23a5 \u23a23 4\u23a5 \u23a2 \u23a5 \u23a30 3\u23a6 --------------------------- M * N --------------------------- \u23a16 \u23a4 \u23a2 \u23a5 \u23a214\u23a5 \u23a2 \u23a5 \u23a36 \u23a6 \u8fd9\u662f\u8f93\u51fa\u3002 SymPy \u7ed8\u56fe \u00b6 SymPy \u5305\u542b\u7528\u4e8e\u7ed8\u56fe\u7684\u6a21\u5757\u3002 \u5b83\u57fa\u4e8e Matplotlib \u6784\u5efa\u3002 simple_plot.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python # uses matplotlib import sympy from sympy.abc import x from sympy.plotting import plot plot(1/x) \u8be5\u793a\u4f8b\u7ed8\u5236\u4e86 1/x \u51fd\u6570\u7684\u4e8c\u7ef4\u56fe\u3002 \u8fd9\u662f SymPy \u6559\u7a0b\u3002","title":"SymPy \u6559\u7a0b"},{"location":"pages/python/pytutorial/python-sympy/#SymPy-\u6559\u7a0b","text":"SymPy \u6559\u7a0b \u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528 sympy \u6a21\u5757\u5728 Python \u4e2d\u8fdb\u884c\u7b26\u53f7\u8ba1\u7b97\u3002 \u8fd9\u662f\u5bf9 SymPy \u7684\u7b80\u8981\u4ecb\u7ecd\u3002 \u8ba1\u7b97\u673a\u4ee3\u6570\u7cfb\u7edf\uff08CAS\uff09\u662f\u4e00\u79cd\u6570\u5b66\u8f6f\u4ef6\uff0c\u80fd\u591f\u4ee5\u7c7b\u4f3c\u4e8e\u6570\u5b66\u5bb6\u548c\u79d1\u5b66\u5bb6\u7684\u4f20\u7edf\u624b\u52a8\u8ba1\u7b97\u65b9\u5f0f\u6765\u5904\u7406\u6570\u5b66\u8868\u8fbe\u5f0f\u3002 \u7b26\u53f7\u8ba1\u7b97\u8c61\u5f81\u6027\u5730\u5904\u7406\u6570\u5b66\u5bf9\u8c61\u7684\u8ba1\u7b97\u3002 \u6570\u5b66\u5bf9\u8c61\u662f\u51c6\u786e\u800c\u975e\u8fd1\u4f3c\u5730\u8868\u793a\u7684\uff0c\u5177\u6709\u672a\u6c42\u503c\u53d8\u91cf\u7684\u6570\u5b66\u8868\u8fbe\u5f0f\u4ee5\u7b26\u53f7\u5f62\u5f0f\u4fdd\u7559\u3002","title":"SymPy \u6559\u7a0b"},{"location":"pages/python/pytutorial/python-sympy/#SymPy","text":"SymPy \u662f\u7528\u4e8e\u7b26\u53f7\u6570\u5b66\u7684 Python \u5e93\u3002 \u5b83\u65e8\u5728\u6210\u4e3a\u529f\u80fd\u9f50\u5168\u7684\u8ba1\u7b97\u673a\u4ee3\u6570\u7cfb\u7edf\u3002 SymPy \u5305\u62ec\u4ece\u57fa\u672c\u7b26\u53f7\u7b97\u672f\u5230\u5fae\u79ef\u5206\uff0c\u4ee3\u6570\uff0c\u79bb\u6563\u6570\u5b66\u548c\u91cf\u5b50\u7269\u7406\u5b66\u7684\u529f\u80fd\u3002 \u5b83\u53ef\u4ee5\u5728 LaTeX \u4e2d\u663e\u793a\u7ed3\u679c\u3002 1 $ pip install sympy SymPy \u662f\u4f7f\u7528 pip install sympy \u547d\u4ee4\u5b89\u88c5\u7684\u3002","title":"SymPy"},{"location":"pages/python/pytutorial/python-sympy/#Rational\u503c","text":"SymPy \u5177\u6709\u7528\u4e8e\u5904\u7406\u6709\u7406\u6570\u7684 Rational \u3002 \u6709\u7406\u6570\u662f\u53ef\u4ee5\u8868\u793a\u4e3a\u4e24\u4e2a\u6574\u6570\uff08\u5206\u5b50 p \u548c\u975e\u96f6\u5206\u6bcd q\uff09\u7684\u5546\u6216\u5206\u6570 p / q \u7684\u4efb\u4f55\u6570\u5b57\u3002 rational_values.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python from sympy import Rational r1 = Rational(1/10) r2 = Rational(1/10) r3 = Rational(1/10) val = (r1 + r2 + r3) * 3 print(val.evalf()) val2 = (1/10 + 1/10 + 1/10) * 3 print(val2) \u8be5\u793a\u4f8b\u4f7f\u7528\u6709\u7406\u6570\u3002 1 2 val = (r1 + r2 + r3) * 3 print(val.evalf()) \u8be5\u8868\u8fbe\u5f62\u5f0f\u4e3a\u7b26\u53f7\u5f62\u5f0f\u3002 \u6211\u4eec\u4f7f\u7528 evalf() \u65b9\u6cd5\u5bf9\u5176\u8fdb\u884c\u6c42\u503c\u3002 1 2 3 $ rational_values.py 0.900000000000000 0.9000000000000001 \u6ce8\u610f\uff0c\u5f53\u4e0d\u4f7f\u7528\u6709\u7406\u6570\u65f6\uff0c\u8f93\u51fa\u4e2d\u4f1a\u6709\u4e00\u4e2a\u5c0f\u9519\u8bef\u3002","title":"Rational\u503c"},{"location":"pages/python/pytutorial/python-sympy/#SymPy-pprint","text":"pprint() \u7528\u4e8e\u5728\u63a7\u5236\u53f0\u4e0a\u6f02\u4eae\u5730\u6253\u5370\u8f93\u51fa\u3002 LaTeX \u53ef\u4ee5\u8fbe\u5230\u6700\u4f73\u6548\u679c\uff0c\u4f8b\u5982 \u5728 Jupyter \u7b14\u8bb0\u672c\u4e2d\u3002 prettify.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/usr/bin/env python from sympy import pprint, Symbol, exp, sqrt from sympy import init_printing init_printing(use_unicode=True) x = Symbol('x') a = sqrt(2) pprint(a) print(a) print(\"------------------------\") c = (exp(x) ** 2)/2 pprint(c) print(c) \u7a0b\u5e8f\u4f1a\u7f8e\u5316\u8f93\u51fa\u3002 1 init_printing(use_unicode=True) \u5bf9\u4e8e\u67d0\u4e9b\u5b57\u7b26\uff0c\u6211\u4eec\u9700\u8981\u542f\u7528 unicode \u652f\u6301\u3002 1 2 3 4 5 6 7 8 9 $ prettify.py \u221a2 sqrt(2) ------------------------ 2\u22c5x \u212f \u2500\u2500\u2500\u2500 2 exp(2*x)/2 \u8fd9\u662f\u8f93\u51fa\u3002 \u8bf7\u6ce8\u610f\uff0c\u4f7f\u7528 Jupyter \u7b14\u8bb0\u672c\u4f1a\u63d0\u4f9b\u66f4\u597d\u7684\u8f93\u51fa\u3002","title":"SymPy pprint"},{"location":"pages/python/pytutorial/python-sympy/#\u5e73\u65b9\u6839","text":"\u5e73\u65b9\u6839\u662f\u4e00\u4e2a\u6570\u5b57\uff0c\u4e58\u4ee5\u5b83\u4f1a\u4ea7\u751f\u6307\u5b9a\u7684\u6570\u91cf\u3002 square_root.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python from sympy import sqrt, pprint, Mul x = sqrt(2) y = sqrt(2) pprint(Mul(x, y, evaluate=False)) print('equals to ') print(x * y) \u7a0b\u5e8f\u8f93\u51fa\u4e00\u4e2a\u5305\u542b\u5e73\u65b9\u6839\u7684\u8868\u8fbe\u5f0f\u3002 1 pprint(Mul(x, y, evaluate=False)) \u6211\u4eec\u4f7f\u7528 evaluate \u5c5e\u6027\u63a8\u8fdf\u5bf9\u4e58\u6cd5\u8868\u8fbe\u5f0f\u7684\u6c42\u503c\u3002 1 2 3 4 $ square_root.py \u221a2\u22c5\u221a2 equals to 2 \u8fd9\u662f\u8f93\u51fa\u3002","title":"\u5e73\u65b9\u6839"},{"location":"pages/python/pytutorial/python-sympy/#SymPy-\u7b26\u53f7","text":"\u7b26\u53f7\u8ba1\u7b97\u9002\u7528\u4e8e\u7b26\u53f7\uff0c\u4ee5\u540e\u53ef\u4ee5\u5bf9\u5176\u8fdb\u884c\u6c42\u503c\u3002 \u4f7f\u7528\u7b26\u53f7\u4e4b\u524d\uff0c\u5fc5\u987b\u5728 SymPy \u4e2d\u5b9a\u4e49\u7b26\u53f7\u3002 def_sym.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/usr/bin/env python # ways to define symbols from sympy import Symbol, symbols from sympy.abc import x, y expr = 2*x + 5*y print(expr) a = Symbol('a') b = Symbol('b') expr2 = a*b + a - b print(expr2) i, j = symbols('i j') expr3 = 2*i*j + i*j print(expr3) \u8be5\u7a0b\u5e8f\u663e\u793a\u4e86\u4e09\u79cd\u5728 SymPy \u4e2d\u5b9a\u4e49\u7b26\u53f7\u7684\u65b9\u6cd5\u3002 1 from sympy.abc import x, y \u53ef\u4ee5\u4ece sympy.abc \u6a21\u5757\u5bfc\u5165\u7b26\u53f7\u3002 \u5b83\u5c06\u6240\u6709\u62c9\u4e01\u5b57\u6bcd\u548c\u5e0c\u814a\u5b57\u6bcd\u5bfc\u51fa\u4e3a\u7b26\u53f7\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u65b9\u4fbf\u5730\u4f7f\u7528\u5b83\u4eec\u3002 1 2 a = Symbol('a') b = Symbol('b') \u53ef\u4ee5\u7528 Symbol \u5b9a\u4e49 1 i, j = symbols('i j') \u53ef\u4ee5\u4f7f\u7528 symbols() \u65b9\u6cd5\u5b9a\u4e49\u591a\u4e2a\u7b26\u53f7\u3002","title":"SymPy \u7b26\u53f7"},{"location":"pages/python/pytutorial/python-sympy/#SymPy-\u89c4\u8303\u8868\u8fbe\u5f62\u5f0f","text":"SymPy \u4f1a\u81ea\u52a8\u5c06\u8868\u8fbe\u5f0f\u8f6c\u6362\u4e3a\u89c4\u8303\u5f62\u5f0f\u3002 SymPy \u4ec5\u6267\u884c\u5ec9\u4ef7\u64cd\u4f5c\uff1b \u56e0\u6b64\uff0c\u8868\u8fbe\u5f0f\u53ef\u80fd\u65e0\u6cd5\u6c42\u503c\u4e3a\u6700\u7b80\u5355\u7684\u5f62\u5f0f\u3002 canonical_form.py 1 2 3 4 5 6 7 #!/usr/bin/env python from sympy.abc import a, b expr = b*a + -4*a + b + a*b + 4*a + (a + b)*3 print(expr) \u6211\u4eec\u6709\u4e00\u4e2a\u5e26\u6709\u7b26\u53f7 a \u548c b \u7684\u8868\u8fbe\u5f0f\u3002 \u8be5\u8868\u8fbe\u53ef\u4ee5\u5bb9\u6613\u5730\u7b80\u5316\u3002 1 2 $ canonical_form.py 2*a*b + 3*a + 4*b \u8fd9\u662f\u8f93\u51fa\u3002","title":"SymPy \u89c4\u8303\u8868\u8fbe\u5f62\u5f0f"},{"location":"pages/python/pytutorial/python-sympy/#SymPy-\u6269\u5c55\u4ee3\u6570\u8868\u8fbe\u5f0f","text":"\u4f7f\u7528 expand() \uff0c\u6211\u4eec\u53ef\u4ee5\u6269\u5c55\u4ee3\u6570\u8868\u8fbe\u5f0f\uff1b \u5373\u8be5\u65b9\u6cd5\u5c1d\u8bd5\u6d88\u9664\u5e42\u548c\u4e58\u6cd5\u3002 expand.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/env python from sympy import expand, pprint from sympy.abc import x expr = (x + 1) ** 2 pprint(expr) print('-----------------------') print('-----------------------') expr = expand(expr) pprint(expr) \u8be5\u7a0b\u5e8f\u6269\u5c55\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u8868\u8fbe\u5f0f\u3002 1 2 3 4 5 6 7 $ expand.py 2 (x + 1) ----------------------- ----------------------- 2 x + 2\u22c5x + 1 \u8fd9\u662f\u8f93\u51fa\u3002","title":"SymPy \u6269\u5c55\u4ee3\u6570\u8868\u8fbe\u5f0f"},{"location":"pages/python/pytutorial/python-sympy/#SymPy-\u7b80\u5316\u8868\u8fbe\u5f0f","text":"\u53ef\u4ee5\u4f7f\u7528 simplify() \u5c06\u8868\u8fbe\u5f0f\u66f4\u6539\u4e3a\u66f4\u7b80\u5355\u7684\u5f62\u5f0f\u3002 simplify.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python from sympy import sin, cos, simplify, pprint from sympy.abc import x expr = sin(x) / cos(x) pprint(expr) print('-----------------------') expr = simplify(expr) pprint(expr) \u4f8b\u5982\u5c06 sin(x)/sin(y) \u8868\u8fbe\u5f0f\u7b80\u5316\u4e3a tan(x) \u3002 1 2 3 4 5 6 $ simplify.py sin(x) \u2500\u2500\u2500\u2500\u2500\u2500 cos(x) ----------------------- tan(x) \u8fd9\u662f\u8f93\u51fa\u3002","title":"SymPy \u7b80\u5316\u8868\u8fbe\u5f0f"},{"location":"pages/python/pytutorial/python-sympy/#SymPy-\u6bd4\u8f83\u8868\u8fbe\u5f0f","text":"SymPy \u8868\u8fbe\u5f0f\u4e0e equals() \u800c\u4e0d\u662f == \u8fd0\u7b97\u7b26\u8fdb\u884c\u6bd4\u8f83\u3002 expr_equality.py 1 2 3 4 5 6 7 8 9 10 11 12 13 #!/usr/bin/env python from sympy import pprint, Symbol, sin, cos x = Symbol('x') a = cos(x)**2 - sin(x)**2 b = cos(2*x) print(a.equals(b)) # we cannot use == operator print(a == b) \u8be5\u7a0b\u5e8f\u6bd4\u8f83\u4e24\u4e2a\u8868\u8fbe\u5f0f\u3002 1 print(a.equals(b)) \u6211\u4eec\u7528 equals() \u6bd4\u8f83\u4e24\u4e2a\u8868\u8fbe\u5f0f\u3002 \u5728\u5e94\u7528\u8be5\u65b9\u6cd5\u4e4b\u524d\uff0cSymPy \u5c1d\u8bd5\u7b80\u5316\u8868\u8fbe\u5f0f\u3002 1 2 3 $ expr_equality.py True False \u8fd9\u662f\u8f93\u51fa\u3002","title":"SymPy \u6bd4\u8f83\u8868\u8fbe\u5f0f"},{"location":"pages/python/pytutorial/python-sympy/#SymPy-\u6c42\u503c\u8868\u8fbe\u5f0f","text":"\u53ef\u4ee5\u901a\u8fc7\u66ff\u6362\u7b26\u53f7\u6765\u6c42\u503c\u8868\u8fbe\u5f0f\u3002 evaluating.py 1 2 3 4 5 #!/usr/bin/env python from sympy import pi print(pi.evalf(30)) \u8be5\u793a\u4f8b\u5c06 pi \u503c\u6c42\u503c\u4e3a 30 \u4e2a\u4f4d\u3002 1 2 $ evaluating.py 3.14159265358979323846264338328 \u8fd9\u662f\u8f93\u51fa\u3002 evaluating2.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python from sympy.abc import a, b from sympy import pprint expr = b*a + -4*a + b + a*b + 4*a + (a + b)*3 print(expr.subs([(a, 3), (b, 2)])) \u672c\u793a\u4f8b\u901a\u8fc7\u7528\u6570\u5b57\u66ff\u6362 a \u548c b \u7b26\u53f7\u6765\u6c42\u503c\u8868\u8fbe\u5f0f\u3002 1 2 $ evaluating.py 3.14159265358979323846264338328 \u8fd9\u662f\u8f93\u51fa\u3002","title":"SymPy \u6c42\u503c\u8868\u8fbe\u5f0f"},{"location":"pages/python/pytutorial/python-sympy/#SymPy-\u6c42\u89e3\u65b9\u7a0b","text":"\u7528 solve() \u6216 solveset() \u6c42\u89e3\u65b9\u7a0b\u3002 solving.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python from sympy import Symbol, solve x = Symbol('x') sol = solve(x**2 - x, x) print(sol) \u8be5\u793a\u4f8b\u4f7f\u7528 solve() \u89e3\u51b3\u4e86\u4e00\u4e2a\u7b80\u5355\u65b9\u7a0b\u3002 1 sol = solve(x**2 - x, x) solve() \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u516c\u5f0f\u3002 \u8be5\u516c\u5f0f\u4ee5\u9002\u5408 SymPy \u7684\u7279\u5b9a\u5f62\u5f0f\u7f16\u5199\uff1b \u5373 x**2 - x \u4ee3\u66ff x**2 = x \u3002 \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u6211\u4eec\u9700\u8981\u89e3\u51b3\u7684\u7b26\u53f7\u3002 1 2 $ solving.py [0, 1] \u8be5\u65b9\u7a0b\u5f0f\u6709\u4e24\u4e2a\u89e3\uff1a0 \u548c 1\u3002 \u6216\u8005\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 Eq \u7528\u4e8e\u516c\u5f0f\u3002 solving2.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python from sympy import pprint, Symbol, Eq, solve x = Symbol('x') eq1 = Eq(x + 1, 4) pprint(eq1) sol = solve(eq1, x) print(sol) \u8be5\u793a\u4f8b\u89e3\u51b3\u4e86\u4e00\u4e2a\u7b80\u5355\u7684 x + 1 = 4 \u65b9\u7a0b\u3002 1 2 3 $ solving2.py x + 1 = 4 [3] \u8fd9\u662f\u8f93\u51fa\u3002 solving3.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python from sympy.solvers import solveset from sympy import Symbol, Interval, pprint x = Symbol('x') sol = solveset(x**2 - 1, x, Interval(0, 100)) print(sol) \u4f7f\u7528 solveset() \uff0c\u6211\u4eec\u627e\u5230\u4e86\u7ed9\u5b9a\u95f4\u9694\u7684\u89e3\u51b3\u65b9\u6848\u3002 1 2 $ solving3.py {1} \u8fd9\u662f\u8f93\u51fa\u3002","title":"SymPy \u6c42\u89e3\u65b9\u7a0b"},{"location":"pages/python/pytutorial/python-sympy/#SymPy-\u5e8f\u5217","text":"\u5e8f\u5217\u662f\u5176\u4e2d\u5141\u8bb8\u91cd\u590d\u7684\u5bf9\u8c61\u7684\u679a\u4e3e\u96c6\u5408\u3002 \u5e8f\u5217\u53ef\u4ee5\u662f\u6709\u9650\u7684\u6216\u65e0\u9650\u7684\u3002 \u5143\u7d20\u7684\u6570\u91cf\u79f0\u4e3a\u5e8f\u5217\u7684\u957f\u5ea6\u3002 \u4e0e\u96c6\u5408\u4e0d\u540c\uff0c\u540c\u4e00\u5143\u7d20\u53ef\u4ee5\u5728\u5e8f\u5217\u4e2d\u7684\u4e0d\u540c\u4f4d\u7f6e\u51fa\u73b0\u591a\u6b21\u3002 \u5143\u7d20\u7684\u987a\u5e8f\u5f88\u91cd\u8981\u3002 sequence.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!/usr/bin/env python from sympy import summation, sequence, pprint from sympy.abc import x s = sequence(x, (x, 1, 10)) print(s) pprint(s) print(list(s)) print(s.length) print(summation(s.formula, (x, s.start, s.stop))) # print(sum(list(s))) \u672c\u793a\u4f8b\u521b\u5efa\u4e00\u4e2a\u7531\u6570\u5b57 1\u30012\uff0c\u2026\uff0c10 \u7ec4\u6210\u7684\u5e8f\u5217\u3002 \u6211\u4eec\u8ba1\u7b97\u8fd9\u4e9b\u6570\u5b57\u7684\u603b\u548c\u3002 1 2 3 4 5 6 $ sequence.py SeqFormula(x, (x, 1, 10)) [1, 2, 3, 4, \u2026] [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 10 55 \u8fd9\u662f\u8f93\u51fa\u3002","title":"SymPy \u5e8f\u5217"},{"location":"pages/python/pytutorial/python-sympy/#SymPy-\u6781\u9650","text":"\u6781\u9650\u662f\u51fd\u6570\uff08\u6216\u5e8f\u5217\uff09\u201c\u63a5\u8fd1\u201d\u4f5c\u4e3a\u8f93\u5165\uff08\u6216\u7d22\u5f15\uff09\u201c\u63a5\u8fd1\u201d\u67d0\u4e2a\u503c\u7684\u503c\u3002 limit.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python from sympy import sin, limit, oo from sympy.abc import x l1 = limit(1/x, x, oo) print(l1) l2 = limit(1/x, x, 0) print(l2) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5177\u6709 1/x \u529f\u80fd\u3002 \u5b83\u5177\u6709\u5de6\u4fa7\u548c\u53f3\u4fa7\u9650\u5236\u3002 1 from sympy import sin, limit, sqrt, oo oo \u8868\u793a\u65e0\u7a77\u5927\u3002 1 2 l1 = limit(1/x, x, oo) print(l1) \u6211\u4eec\u8ba1\u7b97 1/x \u7684\u6781\u9650\uff0c\u5176\u4e2d x \u63a5\u8fd1\u6b63\u65e0\u7a77\u5927\u3002 1 2 3 $ limit.py 0 oo \u8fd9\u662f\u8f93\u51fa\u3002","title":"SymPy \u6781\u9650"},{"location":"pages/python/pytutorial/python-sympy/#SymPy-\u77e9\u9635","text":"\u5728 SymPy \u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u77e9\u9635\u3002 \u77e9\u9635\u662f\u6570\u5b57\u6216\u5176\u4ed6\u6570\u5b66\u5bf9\u8c61\u7684\u77e9\u5f62\u6570\u7ec4\uff0c\u4e3a\u5176\u5b9a\u4e49\u4e86\u8fd0\u7b97\uff08\u4f8b\u5982\u52a0\u6cd5\u548c\u4e58\u6cd5\uff09\u3002 \u77e9\u9635\u7528\u4e8e\u8ba1\u7b97\uff0c\u5de5\u7a0b\u6216\u56fe\u50cf\u5904\u7406\u3002 matrix.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/env python from sympy import Matrix, pprint M = Matrix([[1, 2], [3, 4], [0, 3]]) print(M) pprint(M) N = Matrix([2, 2]) print(\"---------------------------\") print(\"M * N\") print(\"---------------------------\") pprint(M*N) \u8be5\u793a\u4f8b\u5b9a\u4e49\u4e86\u4e24\u4e2a\u77e9\u9635\u5e76\u5c06\u5b83\u4eec\u76f8\u4e58\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 $ matrix.py Matrix([[1, 2], [3, 4], [0, 3]]) \u23a11 2\u23a4 \u23a2 \u23a5 \u23a23 4\u23a5 \u23a2 \u23a5 \u23a30 3\u23a6 --------------------------- M * N --------------------------- \u23a16 \u23a4 \u23a2 \u23a5 \u23a214\u23a5 \u23a2 \u23a5 \u23a36 \u23a6 \u8fd9\u662f\u8f93\u51fa\u3002","title":"SymPy \u77e9\u9635"},{"location":"pages/python/pytutorial/python-sympy/#SymPy-\u7ed8\u56fe","text":"SymPy \u5305\u542b\u7528\u4e8e\u7ed8\u56fe\u7684\u6a21\u5757\u3002 \u5b83\u57fa\u4e8e Matplotlib \u6784\u5efa\u3002 simple_plot.py 1 2 3 4 5 6 7 8 9 #!/usr/bin/env python # uses matplotlib import sympy from sympy.abc import x from sympy.plotting import plot plot(1/x) \u8be5\u793a\u4f8b\u7ed8\u5236\u4e86 1/x \u51fd\u6570\u7684\u4e8c\u7ef4\u56fe\u3002 \u8fd9\u662f SymPy \u6559\u7a0b\u3002","title":"SymPy \u7ed8\u56fe"},{"location":"pages/python/pytutorial/python-yaml/","text":"Python YAML \u6559\u7a0b \u00b6 Python YAML \u6559\u7a0b \u5c55\u793a\u4e86\u5982\u4f55\u5728 Python \u4e2d\u4f7f\u7528 YAML \u683c\u5f0f\uff0c\u6211\u4eec\u4f7f\u7528 pyyaml \u6a21\u5757\u3002 YAML \u683c\u5f0f \u00b6 YAML\uff08\u4e0d\u662f YAML \u6807\u8bb0\u8bed\u8a00\uff09\u662f\u4e00\u79cd\u4eba\u7c7b\u53ef\u8bfb\u7684\u6570\u636e\u5e8f\u5217\u5316\u8bed\u8a00\u3002 \u5b83\u901a\u5e38\u7528\u4e8e\u914d\u7f6e\u6587\u4ef6\uff0c\u4f46\u4e5f\u7528\u4e8e\u6570\u636e\u5b58\u50a8\uff08\u4f8b\u5982\u8c03\u8bd5\u8f93\u51fa\uff09\u6216\u4f20\u8f93\uff08\u4f8b\u5982\u6587\u6863\u6807\u9898\uff09\u3002 YAML \u672c\u673a\u652f\u6301\u4e09\u79cd\u57fa\u672c\u6570\u636e\u7c7b\u578b\uff1a\u6807\u91cf\uff08\u4f8b\u5982\u5b57\u7b26\u4e32\uff0c\u6574\u6570\u548c\u6d6e\u70b9\u6570\uff09\uff0c\u5217\u8868\u548c\u5173\u8054\u6570\u7ec4\u3002 \u5b98\u65b9\u63a8\u8350\u7684 YAML \u6587\u4ef6\u6269\u5c55\u540d\u662f .yaml \u3002 Python \u4e2d\u6709\u4e24\u4e2a\u7528\u4e8e YAML \u7684\u6a21\u5757\uff1aPyYAML \u548c ruamel.yaml\u3002 \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u524d\u8005\u3002 PyYAML \u00b6 PyYAML \u662f Python \u7684 YAML \u89e3\u6790\u5668\u548c\u53d1\u5c04\u5668\u3002 1 $ pip install pyyaml \u8be5\u6a21\u5757\u901a\u8fc7 pip \u5b89\u88c5\u3002 YAML \u6587\u4ef6 \u00b6 \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4ee5\u4e0b YAML \u6587\u4ef6\uff1a items.yaml 1 2 3 4 5 6 raincoat: 1 coins: 5 books: 23 spectacles: 2 chairs: 12 pens: 6 \u6211\u4eec\u6709\u51e0\u4e2a\u6807\u91cf\u503c\u3002 data.yaml 1 2 3 4 5 6 7 8 9 10 11 12 cities: - Bratislava - Kosice - Trnava - Moldava - Trencin --- companies: - Eset - Slovnaft - Duslo Sala - Matador Puchov \u6211\u4eec\u5728 data.yaml \u4e2d\u6709\u4e24\u4e2a\u6587\u6863\u3002 \u6587\u4ef6\u7528 --- \u5206\u9694\u3002 Python YAML \u8bfb\u53d6 \u00b6 \u5728\u7b2c\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u8bfb\u53d6\u4e86\u4e00\u4e2a YAML \u6587\u4ef6\u3002 read_yaml.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python3 import yaml with open('items.yaml') as f: data = yaml.load(f, Loader=yaml.FullLoader) print(data) \u6211\u4eec\u6253\u5f00 items.yaml \u6587\u4ef6\uff0c\u5e76\u4f7f\u7528 yaml.load() \u65b9\u6cd5\u52a0\u8f7d\u5185\u5bb9\u3002 \u6570\u636e\u88ab\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 2 $ python read_yaml.py {'raincoat': 1, 'coins': 5, 'books': 23, 'spectacles': 2, 'chairs': 12, 'pens': 6} PyYAML \u6a21\u5757\u5c06\u6807\u91cf\u503c\u8f6c\u6362\u4e3a Python \u5b57\u5178\u3002 Python YAML \u9605\u8bfb\u6587\u6863 \u00b6 \u4f7f\u7528 load_all() \u8bfb\u53d6\u591a\u4e2a YAML \u6587\u6863\u3002 read_docs.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python3 import yaml with open('data.yaml') as f: docs = yaml.load_all(f, Loader=yaml.FullLoader) for doc in docs: for k, v in doc.items(): print(k, \"->\", v) \u8be5\u793a\u4f8b\u4ece data.yaml \u6587\u4ef6\u4e2d\u8bfb\u53d6\u4e24\u4e2a\u6587\u6863\u3002 1 2 3 $ python read_docs.py cities -> ['Bratislava', 'Kosice', 'Trnava', 'Moldava', 'Trencin'] companies -> ['Eset', 'Slovnaft', 'Duslo Sala', 'Matador Puchov'] Python YAML \u8f6c\u50a8 \u00b6 dump() \u65b9\u6cd5\u5c06 Python \u5bf9\u8c61\u5e8f\u5217\u5316\u4e3a YAML \u6d41\u3002 dumping.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python3 import yaml users = [{'name': 'John Doe', 'occupation': 'gardener'}, {'name': 'Lucy Black', 'occupation': 'teacher'}] print(yaml.dump(users)) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u8bcd\u5178\u5217\u8868\u3002 \u6211\u4eec\u4f7f\u7528 dump() \u65b9\u6cd5\u5c06\u5217\u8868\u5e8f\u5217\u5316\u4e3a YAML \u683c\u5f0f\u3002 1 2 3 4 5 $ python dumping.py - name: John Doe occupation: gardener - name: Lucy Black occupation: teacher Python YAML \u5199\u5165 \u00b6 \u4ee5\u4e0b\u793a\u4f8b\u5c06 Python \u6570\u636e\u5199\u5165 YAML \u6587\u4ef6\u3002 writing.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python3 import yaml users = [{'name': 'John Doe', 'occupation': 'gardener'}, {'name': 'Lucy Black', 'occupation': 'teacher'}] with open('users.yaml', 'w') as f: data = yaml.dump(users, f) \u8be5\u793a\u4f8b\u5c06\u8bcd\u5178\u5217\u8868\u5199\u5165 users.yaml \u6587\u4ef6\u3002 1 data = yaml.dump(users, f) \u6211\u4eec\u4f7f\u7528 dump() \u65b9\u6cd5\u5199\u5165\u6570\u636e\u3002 \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u6570\u636e\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u6587\u4ef6\u5bf9\u8c61\u3002 Python YAML \u6392\u5e8f\u952e \u00b6 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 dump's sort_keys \u53c2\u6570\u5bf9\u952e\u8fdb\u884c\u6392\u5e8f\u3002 sort_keys.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python3 import yaml with open('items.yaml') as f: data = yaml.load(f, Loader=yaml.FullLoader) print(data) sorted = yaml.dump(data, sort_keys=True) print(sorted) \u8be5\u793a\u4f8b\u4ece items.yaml \u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\uff0c\u5e76\u901a\u8fc7 YAML \u8f93\u51fa\u4e2d\u7684\u952e\u5bf9\u6570\u636e\u8fdb\u884c\u6392\u5e8f\u3002 1 2 3 4 5 6 7 8 $ python sort_keys.py {'raincoat': 1, 'coins': 5, 'books': 23, 'spectacles': 2, 'chairs': 12, 'pens': 6} books: 23 chairs: 12 coins: 5 pens: 6 raincoat: 1 spectacles: 2 \u8bb0\u53f7 \u00b6 \u89e3\u6790 YAML \u6587\u4ef6\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8f83\u4f4e\u7ea7\u522b\u7684 API\u3002 scan() \u65b9\u6cd5\u626b\u63cf YAML \u6d41\u5e76\u751f\u6210\u626b\u63cf\u8bb0\u53f7\u3002 tokens.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python3 import yaml with open('items.yaml') as f: data = yaml.scan(f, Loader=yaml.FullLoader) for token in data: print(token) \u8be5\u793a\u4f8b\u626b\u63cf YAML \u6587\u4ef6\u5e76\u6253\u5370\u8bb0\u53f7\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 $ python tokens.py StreamStartToken(encoding=None) BlockMappingStartToken() KeyToken() ScalarToken(plain=True, style=None, value='raincoat') ValueToken() ScalarToken(plain=True, style=None, value='1') KeyToken() ScalarToken(plain=True, style=None, value='coins') ValueToken() ScalarToken(plain=True, style=None, value='5') KeyToken() ScalarToken(plain=True, style=None, value='books') ValueToken() ScalarToken(plain=True, style=None, value='23') KeyToken() ScalarToken(plain=True, style=None, value='spectacles') ValueToken() ScalarToken(plain=True, style=None, value='2') KeyToken() ScalarToken(plain=True, style=None, value='chairs') ValueToken() ScalarToken(plain=True, style=None, value='12') KeyToken() ScalarToken(plain=True, style=None, value='pens') ValueToken() ScalarToken(plain=True, style=None, value='6') BlockEndToken() StreamEndToken() \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 Python \u4e2d\u7684 YAML \u683c\u5f0f\u3002","title":"Python YAML \u6559\u7a0b"},{"location":"pages/python/pytutorial/python-yaml/#Python-YAML-\u6559\u7a0b","text":"Python YAML \u6559\u7a0b \u5c55\u793a\u4e86\u5982\u4f55\u5728 Python \u4e2d\u4f7f\u7528 YAML \u683c\u5f0f\uff0c\u6211\u4eec\u4f7f\u7528 pyyaml \u6a21\u5757\u3002","title":"Python YAML \u6559\u7a0b"},{"location":"pages/python/pytutorial/python-yaml/#YAML-\u683c\u5f0f","text":"YAML\uff08\u4e0d\u662f YAML \u6807\u8bb0\u8bed\u8a00\uff09\u662f\u4e00\u79cd\u4eba\u7c7b\u53ef\u8bfb\u7684\u6570\u636e\u5e8f\u5217\u5316\u8bed\u8a00\u3002 \u5b83\u901a\u5e38\u7528\u4e8e\u914d\u7f6e\u6587\u4ef6\uff0c\u4f46\u4e5f\u7528\u4e8e\u6570\u636e\u5b58\u50a8\uff08\u4f8b\u5982\u8c03\u8bd5\u8f93\u51fa\uff09\u6216\u4f20\u8f93\uff08\u4f8b\u5982\u6587\u6863\u6807\u9898\uff09\u3002 YAML \u672c\u673a\u652f\u6301\u4e09\u79cd\u57fa\u672c\u6570\u636e\u7c7b\u578b\uff1a\u6807\u91cf\uff08\u4f8b\u5982\u5b57\u7b26\u4e32\uff0c\u6574\u6570\u548c\u6d6e\u70b9\u6570\uff09\uff0c\u5217\u8868\u548c\u5173\u8054\u6570\u7ec4\u3002 \u5b98\u65b9\u63a8\u8350\u7684 YAML \u6587\u4ef6\u6269\u5c55\u540d\u662f .yaml \u3002 Python \u4e2d\u6709\u4e24\u4e2a\u7528\u4e8e YAML \u7684\u6a21\u5757\uff1aPyYAML \u548c ruamel.yaml\u3002 \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u524d\u8005\u3002","title":"YAML \u683c\u5f0f"},{"location":"pages/python/pytutorial/python-yaml/#PyYAML","text":"PyYAML \u662f Python \u7684 YAML \u89e3\u6790\u5668\u548c\u53d1\u5c04\u5668\u3002 1 $ pip install pyyaml \u8be5\u6a21\u5757\u901a\u8fc7 pip \u5b89\u88c5\u3002","title":"PyYAML"},{"location":"pages/python/pytutorial/python-yaml/#YAML-\u6587\u4ef6","text":"\u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4ee5\u4e0b YAML \u6587\u4ef6\uff1a items.yaml 1 2 3 4 5 6 raincoat: 1 coins: 5 books: 23 spectacles: 2 chairs: 12 pens: 6 \u6211\u4eec\u6709\u51e0\u4e2a\u6807\u91cf\u503c\u3002 data.yaml 1 2 3 4 5 6 7 8 9 10 11 12 cities: - Bratislava - Kosice - Trnava - Moldava - Trencin --- companies: - Eset - Slovnaft - Duslo Sala - Matador Puchov \u6211\u4eec\u5728 data.yaml \u4e2d\u6709\u4e24\u4e2a\u6587\u6863\u3002 \u6587\u4ef6\u7528 --- \u5206\u9694\u3002","title":"YAML \u6587\u4ef6"},{"location":"pages/python/pytutorial/python-yaml/#Python-YAML-\u8bfb\u53d6","text":"\u5728\u7b2c\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u8bfb\u53d6\u4e86\u4e00\u4e2a YAML \u6587\u4ef6\u3002 read_yaml.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python3 import yaml with open('items.yaml') as f: data = yaml.load(f, Loader=yaml.FullLoader) print(data) \u6211\u4eec\u6253\u5f00 items.yaml \u6587\u4ef6\uff0c\u5e76\u4f7f\u7528 yaml.load() \u65b9\u6cd5\u52a0\u8f7d\u5185\u5bb9\u3002 \u6570\u636e\u88ab\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 1 2 $ python read_yaml.py {'raincoat': 1, 'coins': 5, 'books': 23, 'spectacles': 2, 'chairs': 12, 'pens': 6} PyYAML \u6a21\u5757\u5c06\u6807\u91cf\u503c\u8f6c\u6362\u4e3a Python \u5b57\u5178\u3002","title":"Python YAML \u8bfb\u53d6"},{"location":"pages/python/pytutorial/python-yaml/#Python-YAML-\u9605\u8bfb\u6587\u6863","text":"\u4f7f\u7528 load_all() \u8bfb\u53d6\u591a\u4e2a YAML \u6587\u6863\u3002 read_docs.py 1 2 3 4 5 6 7 8 9 10 11 12 #!/usr/bin/env python3 import yaml with open('data.yaml') as f: docs = yaml.load_all(f, Loader=yaml.FullLoader) for doc in docs: for k, v in doc.items(): print(k, \"->\", v) \u8be5\u793a\u4f8b\u4ece data.yaml \u6587\u4ef6\u4e2d\u8bfb\u53d6\u4e24\u4e2a\u6587\u6863\u3002 1 2 3 $ python read_docs.py cities -> ['Bratislava', 'Kosice', 'Trnava', 'Moldava', 'Trencin'] companies -> ['Eset', 'Slovnaft', 'Duslo Sala', 'Matador Puchov']","title":"Python YAML \u9605\u8bfb\u6587\u6863"},{"location":"pages/python/pytutorial/python-yaml/#Python-YAML-\u8f6c\u50a8","text":"dump() \u65b9\u6cd5\u5c06 Python \u5bf9\u8c61\u5e8f\u5217\u5316\u4e3a YAML \u6d41\u3002 dumping.py 1 2 3 4 5 6 7 8 #!/usr/bin/env python3 import yaml users = [{'name': 'John Doe', 'occupation': 'gardener'}, {'name': 'Lucy Black', 'occupation': 'teacher'}] print(yaml.dump(users)) \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u8bcd\u5178\u5217\u8868\u3002 \u6211\u4eec\u4f7f\u7528 dump() \u65b9\u6cd5\u5c06\u5217\u8868\u5e8f\u5217\u5316\u4e3a YAML \u683c\u5f0f\u3002 1 2 3 4 5 $ python dumping.py - name: John Doe occupation: gardener - name: Lucy Black occupation: teacher","title":"Python YAML \u8f6c\u50a8"},{"location":"pages/python/pytutorial/python-yaml/#Python-YAML-\u5199\u5165","text":"\u4ee5\u4e0b\u793a\u4f8b\u5c06 Python \u6570\u636e\u5199\u5165 YAML \u6587\u4ef6\u3002 writing.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python3 import yaml users = [{'name': 'John Doe', 'occupation': 'gardener'}, {'name': 'Lucy Black', 'occupation': 'teacher'}] with open('users.yaml', 'w') as f: data = yaml.dump(users, f) \u8be5\u793a\u4f8b\u5c06\u8bcd\u5178\u5217\u8868\u5199\u5165 users.yaml \u6587\u4ef6\u3002 1 data = yaml.dump(users, f) \u6211\u4eec\u4f7f\u7528 dump() \u65b9\u6cd5\u5199\u5165\u6570\u636e\u3002 \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u6570\u636e\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u6587\u4ef6\u5bf9\u8c61\u3002","title":"Python YAML \u5199\u5165"},{"location":"pages/python/pytutorial/python-yaml/#Python-YAML-\u6392\u5e8f\u952e","text":"\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 dump's sort_keys \u53c2\u6570\u5bf9\u952e\u8fdb\u884c\u6392\u5e8f\u3002 sort_keys.py 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python3 import yaml with open('items.yaml') as f: data = yaml.load(f, Loader=yaml.FullLoader) print(data) sorted = yaml.dump(data, sort_keys=True) print(sorted) \u8be5\u793a\u4f8b\u4ece items.yaml \u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\uff0c\u5e76\u901a\u8fc7 YAML \u8f93\u51fa\u4e2d\u7684\u952e\u5bf9\u6570\u636e\u8fdb\u884c\u6392\u5e8f\u3002 1 2 3 4 5 6 7 8 $ python sort_keys.py {'raincoat': 1, 'coins': 5, 'books': 23, 'spectacles': 2, 'chairs': 12, 'pens': 6} books: 23 chairs: 12 coins: 5 pens: 6 raincoat: 1 spectacles: 2","title":"Python YAML \u6392\u5e8f\u952e"},{"location":"pages/python/pytutorial/python-yaml/#\u8bb0\u53f7","text":"\u89e3\u6790 YAML \u6587\u4ef6\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8f83\u4f4e\u7ea7\u522b\u7684 API\u3002 scan() \u65b9\u6cd5\u626b\u63cf YAML \u6d41\u5e76\u751f\u6210\u626b\u63cf\u8bb0\u53f7\u3002 tokens.py 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python3 import yaml with open('items.yaml') as f: data = yaml.scan(f, Loader=yaml.FullLoader) for token in data: print(token) \u8be5\u793a\u4f8b\u626b\u63cf YAML \u6587\u4ef6\u5e76\u6253\u5370\u8bb0\u53f7\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 $ python tokens.py StreamStartToken(encoding=None) BlockMappingStartToken() KeyToken() ScalarToken(plain=True, style=None, value='raincoat') ValueToken() ScalarToken(plain=True, style=None, value='1') KeyToken() ScalarToken(plain=True, style=None, value='coins') ValueToken() ScalarToken(plain=True, style=None, value='5') KeyToken() ScalarToken(plain=True, style=None, value='books') ValueToken() ScalarToken(plain=True, style=None, value='23') KeyToken() ScalarToken(plain=True, style=None, value='spectacles') ValueToken() ScalarToken(plain=True, style=None, value='2') KeyToken() ScalarToken(plain=True, style=None, value='chairs') ValueToken() ScalarToken(plain=True, style=None, value='12') KeyToken() ScalarToken(plain=True, style=None, value='pens') ValueToken() ScalarToken(plain=True, style=None, value='6') BlockEndToken() StreamEndToken() \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 Python \u4e2d\u7684 YAML \u683c\u5f0f\u3002","title":"\u8bb0\u53f7"}]}